#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieBP

#include "Basic.hpp"

#include "CriWareRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MovieBP.MovieBP_C
// 0x0090 (0x02C0 - 0x0230)
class AMovieBP_C final : public AStaticMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URCManaComponent*                       RCMana2;                                           // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URCManaComponent*                       RCMana1;                                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URCManaComponent*                       RCMana;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UmovieUMG_C*                            screen;                                            // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaying;                                         // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MovieID;                                           // 0x0260(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           SubTitleID;                                        // 0x0270(0x0010)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void()>              PlayMovie;                                         // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          MovieEnd;                                          // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLoaded;                                          // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292[0x2];                                      // 0x0292(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoadedMovieCount;                                  // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MovieCount;                                        // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isEnableMovieLoad;                                 // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AutoPlayNextMovie;                                 // 0x029D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEnd;                                             // 0x029E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29F[0x1];                                      // 0x029F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadStart;                                         // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLoop;                                            // 0x02A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseSubTitle;                                       // 0x02A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A7[0x1];                                      // 0x02A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDataTable*>                     SoundDataTable;                                    // 0x02A8(0x0010)(Edit, BlueprintVisible)
	bool                                          isFinishMovie;                                     // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LoadFlag;                                          // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_MovieBP(int32 EntryPoint);
	void OnStartLoadEvent();
	void PlayMovie_Event();
	void OnFinishedEvent______________0();
	void OnLoadedEvent______________0();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void m________________________0(const class FString& MovieID_0);
	void m_________________(class FName SubTitleID_0);
	void m_______________________(int32 MovieIndex, bool* isFinish);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MovieBP_C">();
	}
	static class AMovieBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMovieBP_C>();
	}
};
static_assert(alignof(AMovieBP_C) == 0x000008, "Wrong alignment on AMovieBP_C");
static_assert(sizeof(AMovieBP_C) == 0x0002C0, "Wrong size on AMovieBP_C");
static_assert(offsetof(AMovieBP_C, UberGraphFrame) == 0x000230, "Member 'AMovieBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, RCMana2) == 0x000238, "Member 'AMovieBP_C::RCMana2' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, RCMana1) == 0x000240, "Member 'AMovieBP_C::RCMana1' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, RCMana) == 0x000248, "Member 'AMovieBP_C::RCMana' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, screen) == 0x000250, "Member 'AMovieBP_C::screen' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, IsPlaying) == 0x000258, "Member 'AMovieBP_C::IsPlaying' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, MovieID) == 0x000260, "Member 'AMovieBP_C::MovieID' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, SubTitleID) == 0x000270, "Member 'AMovieBP_C::SubTitleID' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, PlayMovie) == 0x000280, "Member 'AMovieBP_C::PlayMovie' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, MovieEnd) == 0x000290, "Member 'AMovieBP_C::MovieEnd' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, IsLoaded) == 0x000291, "Member 'AMovieBP_C::IsLoaded' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, LoadedMovieCount) == 0x000294, "Member 'AMovieBP_C::LoadedMovieCount' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, MovieCount) == 0x000298, "Member 'AMovieBP_C::MovieCount' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, isEnableMovieLoad) == 0x00029C, "Member 'AMovieBP_C::isEnableMovieLoad' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, AutoPlayNextMovie) == 0x00029D, "Member 'AMovieBP_C::AutoPlayNextMovie' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, IsEnd) == 0x00029E, "Member 'AMovieBP_C::IsEnd' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, FadeTime) == 0x0002A0, "Member 'AMovieBP_C::FadeTime' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, LoadStart) == 0x0002A4, "Member 'AMovieBP_C::LoadStart' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, IsLoop) == 0x0002A5, "Member 'AMovieBP_C::IsLoop' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, UseSubTitle) == 0x0002A6, "Member 'AMovieBP_C::UseSubTitle' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, SoundDataTable) == 0x0002A8, "Member 'AMovieBP_C::SoundDataTable' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, isFinishMovie) == 0x0002B8, "Member 'AMovieBP_C::isFinishMovie' has a wrong offset!");
static_assert(offsetof(AMovieBP_C, LoadFlag) == 0x0002B9, "Member 'AMovieBP_C::LoadFlag' has a wrong offset!");

}

