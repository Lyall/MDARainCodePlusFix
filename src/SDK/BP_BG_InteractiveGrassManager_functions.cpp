#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BG_InteractiveGrassManager

#include "Basic.hpp"

#include "BP_BG_InteractiveGrassManager_classes.hpp"
#include "BP_BG_InteractiveGrassManager_parameters.hpp"


namespace SDK
{

// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.ExecuteUbergraph_BP_BG_InteractiveGrassManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::ExecuteUbergraph_BP_BG_InteractiveGrassManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "ExecuteUbergraph_BP_BG_InteractiveGrassManager");

	Params::BP_BG_InteractiveGrassManager_C_ExecuteUbergraph_BP_BG_InteractiveGrassManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.SmoothlyChangeWindStrength
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   newStrength                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::SmoothlyChangeWindStrength(float newStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "SmoothlyChangeWindStrength");

	Params::BP_BG_InteractiveGrassManager_C_SmoothlyChangeWindStrength Parms{};

	Parms.newStrength = newStrength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.SmoothlyChangeWindDirection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          newDirection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::SmoothlyChangeWindDirection(const struct FVector& newDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "SmoothlyChangeWindDirection");

	Params::BP_BG_InteractiveGrassManager_C_SmoothlyChangeWindDirection Parms{};

	Parms.newDirection = std::move(newDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BG_InteractiveGrassManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.WindStrengthChanger__Change__EventFunc
// (BlueprintEvent)

void ABP_BG_InteractiveGrassManager_C::WindStrengthChanger__Change__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "WindStrengthChanger__Change__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.WindStrengthChanger__UpdateFunc
// (BlueprintEvent)

void ABP_BG_InteractiveGrassManager_C::WindStrengthChanger__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "WindStrengthChanger__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.WindStrengthChanger__FinishedFunc
// (BlueprintEvent)

void ABP_BG_InteractiveGrassManager_C::WindStrengthChanger__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "WindStrengthChanger__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.WindDirectionChanger__ChangeDirection__EventFunc
// (BlueprintEvent)

void ABP_BG_InteractiveGrassManager_C::WindDirectionChanger__ChangeDirection__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "WindDirectionChanger__ChangeDirection__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.WindDirectionChanger__UpdateFunc
// (BlueprintEvent)

void ABP_BG_InteractiveGrassManager_C::WindDirectionChanger__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "WindDirectionChanger__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.WindDirectionChanger__FinishedFunc
// (BlueprintEvent)

void ABP_BG_InteractiveGrassManager_C::WindDirectionChanger__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "WindDirectionChanger__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.SpawnFoliage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    spawnUnderCursor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          locationIfNotUnderCursor                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          normalIfNotUnderCursor                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          minScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MaxScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFoliageToSpawn_Struct           foliageToSpawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::SpawnFoliage(bool spawnUnderCursor, const struct FVector& locationIfNotUnderCursor, const struct FVector& normalIfNotUnderCursor, const struct FVector& minScale, const struct FVector& MaxScale, const struct FFoliageToSpawn_Struct& foliageToSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "SpawnFoliage");

	Params::BP_BG_InteractiveGrassManager_C_SpawnFoliage Parms{};

	Parms.spawnUnderCursor = spawnUnderCursor;
	Parms.locationIfNotUnderCursor = std::move(locationIfNotUnderCursor);
	Parms.normalIfNotUnderCursor = std::move(normalIfNotUnderCursor);
	Parms.minScale = std::move(minScale);
	Parms.MaxScale = std::move(MaxScale);
	Parms.foliageToSpawn = std::move(foliageToSpawn);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.SpawnFoliageCluster
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          centerLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   sizeX_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   sizeY_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   density_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   nonUniformDistribution                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFoliageToSpawn_Struct           foliageToSpawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          minScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MaxScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    useGrassSpawnAreas                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AGrassSpawnArea_BP_C*             grassSpawnArea                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::SpawnFoliageCluster(const struct FVector& centerLocation, float sizeX_, float sizeY_, float density_, float nonUniformDistribution, const struct FFoliageToSpawn_Struct& foliageToSpawn, const struct FVector& minScale, const struct FVector& MaxScale, bool useGrassSpawnAreas, class AGrassSpawnArea_BP_C* grassSpawnArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "SpawnFoliageCluster");

	Params::BP_BG_InteractiveGrassManager_C_SpawnFoliageCluster Parms{};

	Parms.centerLocation = std::move(centerLocation);
	Parms.sizeX_ = sizeX_;
	Parms.sizeY_ = sizeY_;
	Parms.density_ = density_;
	Parms.nonUniformDistribution = nonUniformDistribution;
	Parms.foliageToSpawn = std::move(foliageToSpawn);
	Parms.minScale = std::move(minScale);
	Parms.MaxScale = std::move(MaxScale);
	Parms.useGrassSpawnAreas = useGrassSpawnAreas;
	Parms.grassSpawnArea = grassSpawnArea;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.GetFreeMaterialInteractionChannel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   foundChannel                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::GetFreeMaterialInteractionChannel(bool* found, int32* foundChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "GetFreeMaterialInteractionChannel");

	Params::BP_BG_InteractiveGrassManager_C_GetFreeMaterialInteractionChannel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (found != nullptr)
		*found = Parms.found;

	if (foundChannel != nullptr)
		*foundChannel = Parms.foundChannel;
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.FreeUpMaterialInteractionChannel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   nrOfChannel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::FreeUpMaterialInteractionChannel(int32 nrOfChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "FreeUpMaterialInteractionChannel");

	Params::BP_BG_InteractiveGrassManager_C_FreeUpMaterialInteractionChannel Parms{};

	Parms.nrOfChannel = nrOfChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.DistanceToViewTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          fromLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::DistanceToViewTarget(const struct FVector& fromLocation, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "DistanceToViewTarget");

	Params::BP_BG_InteractiveGrassManager_C_DistanceToViewTarget Parms{};

	Parms.fromLocation = std::move(fromLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.AddFoliageChunkActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ChunkCenter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UINTERACTIVE_FoliageComp_BP_C*    SourceComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    replaceWithSourceComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    leaveDefaultComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AInteractiveFoliageChunk_BP_C*    addedChunk                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::AddFoliageChunkActor(const struct FVector& ChunkCenter, class UINTERACTIVE_FoliageComp_BP_C* SourceComponent, bool replaceWithSourceComponent, bool leaveDefaultComponent, class AInteractiveFoliageChunk_BP_C** addedChunk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "AddFoliageChunkActor");

	Params::BP_BG_InteractiveGrassManager_C_AddFoliageChunkActor Parms{};

	Parms.ChunkCenter = std::move(ChunkCenter);
	Parms.SourceComponent = SourceComponent;
	Parms.replaceWithSourceComponent = replaceWithSourceComponent;
	Parms.leaveDefaultComponent = leaveDefaultComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (addedChunk != nullptr)
		*addedChunk = Parms.addedChunk;
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.PopulateMapWithGrass
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BG_InteractiveGrassManager_C::PopulateMapWithGrass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "PopulateMapWithGrass");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BG_InteractiveGrassManager.BP_BG_InteractiveGrassManager_C.GetUpdateInterval
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DistanceToViewTarget                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   updatesPerSecond                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   UpdateInterval                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BG_InteractiveGrassManager_C::GetUpdateInterval(float DistanceToViewTarget, int32 updatesPerSecond, float* UpdateInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BG_InteractiveGrassManager_C", "GetUpdateInterval");

	Params::BP_BG_InteractiveGrassManager_C_GetUpdateInterval Parms{};

	Parms.DistanceToViewTarget = DistanceToViewTarget;
	Parms.updatesPerSecond = updatesPerSecond;

	UObject::ProcessEvent(Func, &Parms);

	if (UpdateInterval != nullptr)
		*UpdateInterval = Parms.UpdateInterval;
}

}

