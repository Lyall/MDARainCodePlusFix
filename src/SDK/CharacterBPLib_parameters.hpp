#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterBPLib

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CharacterBPLib.CharacterBPLib_C.ToonShading
// 0x0028 (0x0028 - 0x0000)
struct CharacterBPLib_C_ToonShading final
{
public:
	class UBP_ToonComponent_C*                    BPToonComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Construction;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ToonScene_C*                        Scene;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                m_WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterBPLib_C_ToonShading) == 0x000008, "Wrong alignment on CharacterBPLib_C_ToonShading");
static_assert(sizeof(CharacterBPLib_C_ToonShading) == 0x000028, "Wrong size on CharacterBPLib_C_ToonShading");
static_assert(offsetof(CharacterBPLib_C_ToonShading, BPToonComponent) == 0x000000, "Member 'CharacterBPLib_C_ToonShading::BPToonComponent' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_ToonShading, Construction) == 0x000008, "Member 'CharacterBPLib_C_ToonShading::Construction' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_ToonShading, Mesh) == 0x000010, "Member 'CharacterBPLib_C_ToonShading::Mesh' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_ToonShading, Scene) == 0x000018, "Member 'CharacterBPLib_C_ToonShading::Scene' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_ToonShading, m_WorldContext) == 0x000020, "Member 'CharacterBPLib_C_ToonShading::m_WorldContext' has a wrong offset!");

// Function CharacterBPLib.CharacterBPLib_C.EyeProcessing
// 0x0210 (0x0210 - 0x0000)
struct CharacterBPLib_C_EyeProcessing final
{
public:
	class USkeletalMeshComponent*                 MasterMesh;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 EyeMaterialMesh;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameLeft;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameRight;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterLeft;                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterRight;                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleLeft;                                  // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleRight;                                 // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingLeft;                               // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingRight;                              // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                m_WorldContext;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingRight_;                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingLeft_;                              // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleRight_;                                // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleLeft_;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterRight_;                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterLeft_;                           // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameRight_;                                // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameLeft_;                                 // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x00D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue_1;                  // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x01A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_1;   // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_3;                   // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_2;   // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_3;   // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterBPLib_C_EyeProcessing) == 0x000010, "Wrong alignment on CharacterBPLib_C_EyeProcessing");
static_assert(sizeof(CharacterBPLib_C_EyeProcessing) == 0x000210, "Wrong size on CharacterBPLib_C_EyeProcessing");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, MasterMesh) == 0x000000, "Member 'CharacterBPLib_C_EyeProcessing::MasterMesh' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeMaterialMesh) == 0x000008, "Member 'CharacterBPLib_C_EyeProcessing::EyeMaterialMesh' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeJointNameLeft) == 0x000010, "Member 'CharacterBPLib_C_EyeProcessing::EyeJointNameLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeJointNameRight) == 0x000018, "Member 'CharacterBPLib_C_EyeProcessing::EyeJointNameRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballUVParameterLeft) == 0x000020, "Member 'CharacterBPLib_C_EyeProcessing::EyeballUVParameterLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballUVParameterRight) == 0x000028, "Member 'CharacterBPLib_C_EyeProcessing::EyeballUVParameterRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballScaleLeft) == 0x000030, "Member 'CharacterBPLib_C_EyeProcessing::EyeballScaleLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballScaleRight) == 0x000038, "Member 'CharacterBPLib_C_EyeProcessing::EyeballScaleRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballRotatingLeft) == 0x000040, "Member 'CharacterBPLib_C_EyeProcessing::EyeballRotatingLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballRotatingRight) == 0x000048, "Member 'CharacterBPLib_C_EyeProcessing::EyeballRotatingRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, m_WorldContext) == 0x000050, "Member 'CharacterBPLib_C_EyeProcessing::m_WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballRotatingRight_) == 0x000058, "Member 'CharacterBPLib_C_EyeProcessing::EyeballRotatingRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballRotatingLeft_) == 0x000060, "Member 'CharacterBPLib_C_EyeProcessing::EyeballRotatingLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballScaleRight_) == 0x000068, "Member 'CharacterBPLib_C_EyeProcessing::EyeballScaleRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballScaleLeft_) == 0x000070, "Member 'CharacterBPLib_C_EyeProcessing::EyeballScaleLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballUVParameterRight_) == 0x000078, "Member 'CharacterBPLib_C_EyeProcessing::EyeballUVParameterRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeballUVParameterLeft_) == 0x000080, "Member 'CharacterBPLib_C_EyeProcessing::EyeballUVParameterLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeJointNameRight_) == 0x000088, "Member 'CharacterBPLib_C_EyeProcessing::EyeJointNameRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, EyeJointNameLeft_) == 0x000090, "Member 'CharacterBPLib_C_EyeProcessing::EyeJointNameLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_GetSocketTransform_ReturnValue) == 0x0000A0, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_GetSocketTransform_ReturnValue_1) == 0x0000D0, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakTransform_Location) == 0x000100, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakTransform_Rotation) == 0x00010C, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakTransform_Scale) == 0x000118, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakTransform_Location_1) == 0x000124, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakTransform_Rotation_1) == 0x000130, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakTransform_Scale_1) == 0x00013C, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_X) == 0x000148, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_Y) == 0x00014C, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_Z) == 0x000150, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_X_1) == 0x000154, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_Y_1) == 0x000158, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_Z_1) == 0x00015C, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_X_2) == 0x000160, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_Y_2) == 0x000164, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_Z_2) == 0x000168, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_X_3) == 0x00016C, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_Y_3) == 0x000170, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_BreakVector_Z_3) == 0x000174, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_MakeColor_ReturnValue) == 0x000178, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_MakeColor_ReturnValue_1) == 0x000188, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_MakeColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, K2Node_MakeStruct_LinearColor) == 0x000198, "Member 'CharacterBPLib_C_EyeProcessing::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, K2Node_MakeStruct_LinearColor_1) == 0x0001A8, "Member 'CharacterBPLib_C_EyeProcessing::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x0001B8, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_Conv_LinearColorToVector_ReturnValue_1) == 0x0001C4, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_Conv_LinearColorToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, K2Node_MakeStruct_LinearColor_2) == 0x0001D0, "Member 'CharacterBPLib_C_EyeProcessing::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, K2Node_MakeStruct_LinearColor_3) == 0x0001E0, "Member 'CharacterBPLib_C_EyeProcessing::K2Node_MakeStruct_LinearColor_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_Conv_LinearColorToVector_ReturnValue_2) == 0x0001F0, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_Conv_LinearColorToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeProcessing, CallFunc_Conv_LinearColorToVector_ReturnValue_3) == 0x0001FC, "Member 'CharacterBPLib_C_EyeProcessing::CallFunc_Conv_LinearColorToVector_ReturnValue_3' has a wrong offset!");

// Function CharacterBPLib.CharacterBPLib_C.SetNPCCollision
// 0x0018 (0x0018 - 0x0000)
struct CharacterBPLib_C_SetNPCCollision final
{
public:
	bool                                          Collision;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      Capsule;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                m_WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterBPLib_C_SetNPCCollision) == 0x000008, "Wrong alignment on CharacterBPLib_C_SetNPCCollision");
static_assert(sizeof(CharacterBPLib_C_SetNPCCollision) == 0x000018, "Wrong size on CharacterBPLib_C_SetNPCCollision");
static_assert(offsetof(CharacterBPLib_C_SetNPCCollision, Collision) == 0x000000, "Member 'CharacterBPLib_C_SetNPCCollision::Collision' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_SetNPCCollision, Capsule) == 0x000008, "Member 'CharacterBPLib_C_SetNPCCollision::Capsule' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_SetNPCCollision, m_WorldContext) == 0x000010, "Member 'CharacterBPLib_C_SetNPCCollision::m_WorldContext' has a wrong offset!");

// Function CharacterBPLib.CharacterBPLib_C.EyeLightProcessing
// 0x03A0 (0x03A0 - 0x0000)
struct CharacterBPLib_C_EyeLightProcessing final
{
public:
	class USkeletalMeshComponent*                 MasterMesh;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 EyeMaterialMesh;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameLeft;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameRight;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterLeft;                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterRight;                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleLeft;                                  // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleRight;                                 // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingLeft;                               // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingRight;                              // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParentEyeJointNameLeft;                            // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParentEyeJointNameRight;                           // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                m_WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParentEyeJointNameRight_;                          // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParentEyeJointNameLeft_;                           // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingRight_;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingLeft_;                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleRight_;                                // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleLeft_;                                 // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterRight_;                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterLeft_;                           // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameRight_;                                // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameLeft_;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x00F0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_2;         // 0x01D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_3;         // 0x0200(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_6;                          // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_7;                          // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_7;                          // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_7;                          // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_13;       // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_14;       // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_15;       // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_16;       // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_17;       // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_6;        // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_7;        // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_18;       // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_19;       // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_7;             // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0308(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue_1;                  // 0x0318(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0328(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0338(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x0348(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_1;   // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x0360(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_3;                   // 0x0370(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_2;   // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_3;   // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterBPLib_C_EyeLightProcessing) == 0x000010, "Wrong alignment on CharacterBPLib_C_EyeLightProcessing");
static_assert(sizeof(CharacterBPLib_C_EyeLightProcessing) == 0x0003A0, "Wrong size on CharacterBPLib_C_EyeLightProcessing");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, MasterMesh) == 0x000000, "Member 'CharacterBPLib_C_EyeLightProcessing::MasterMesh' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeMaterialMesh) == 0x000008, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeMaterialMesh' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeJointNameLeft) == 0x000010, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeJointNameLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeJointNameRight) == 0x000018, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeJointNameRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballUVParameterLeft) == 0x000020, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballUVParameterLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballUVParameterRight) == 0x000028, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballUVParameterRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballScaleLeft) == 0x000030, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballScaleLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballScaleRight) == 0x000038, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballScaleRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballRotatingLeft) == 0x000040, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballRotatingLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballRotatingRight) == 0x000048, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballRotatingRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, ParentEyeJointNameLeft) == 0x000050, "Member 'CharacterBPLib_C_EyeLightProcessing::ParentEyeJointNameLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, ParentEyeJointNameRight) == 0x000058, "Member 'CharacterBPLib_C_EyeLightProcessing::ParentEyeJointNameRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, m_WorldContext) == 0x000060, "Member 'CharacterBPLib_C_EyeLightProcessing::m_WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, ParentEyeJointNameRight_) == 0x000068, "Member 'CharacterBPLib_C_EyeLightProcessing::ParentEyeJointNameRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, ParentEyeJointNameLeft_) == 0x000070, "Member 'CharacterBPLib_C_EyeLightProcessing::ParentEyeJointNameLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballRotatingRight_) == 0x000078, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballRotatingRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballRotatingLeft_) == 0x000080, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballRotatingLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballScaleRight_) == 0x000088, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballScaleRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballScaleLeft_) == 0x000090, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballScaleLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballUVParameterRight_) == 0x000098, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballUVParameterRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeballUVParameterLeft_) == 0x0000A0, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeballUVParameterLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeJointNameRight_) == 0x0000A8, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeJointNameRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, EyeJointNameLeft_) == 0x0000B0, "Member 'CharacterBPLib_C_EyeLightProcessing::EyeJointNameLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_GetSocketTransform_ReturnValue) == 0x0000C0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_GetSocketTransform_ReturnValue_1) == 0x0000F0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Location) == 0x000120, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Rotation) == 0x00012C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Scale) == 0x000138, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Location_1) == 0x000144, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Rotation_1) == 0x000150, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Scale_1) == 0x00015C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_X) == 0x000168, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Y) == 0x00016C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Z) == 0x000170, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_X_1) == 0x000174, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Y_1) == 0x000178, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Z_1) == 0x00017C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000180, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000184, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000188, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00018C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000190, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000194, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000198, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00019C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_X_2) == 0x0001A0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Y_2) == 0x0001A4, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Z_2) == 0x0001A8, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_X_3) == 0x0001AC, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Y_3) == 0x0001B0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Z_3) == 0x0001B4, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0001B8, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0001BC, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0001C0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0001C4, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_GetSocketTransform_ReturnValue_2) == 0x0001D0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_GetSocketTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_GetSocketTransform_ReturnValue_3) == 0x000200, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_GetSocketTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Location_2) == 0x000230, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Rotation_2) == 0x00023C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Scale_2) == 0x000248, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Location_3) == 0x000254, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Rotation_3) == 0x000260, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakTransform_Scale_3) == 0x00026C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_X_4) == 0x000278, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Y_4) == 0x00027C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Z_4) == 0x000280, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_X_5) == 0x000284, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Y_5) == 0x000288, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Z_5) == 0x00028C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000290, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x000294, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x000298, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x00029C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_X_6) == 0x0002A0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Y_6) == 0x0002A4, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Z_6) == 0x0002A8, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_X_7) == 0x0002AC, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Y_7) == 0x0002B0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_BreakVector_Z_7) == 0x0002B4, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x0002B8, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_13) == 0x0002BC, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x0002C0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x0002C4, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_14) == 0x0002C8, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_15) == 0x0002CC, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002D0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0002D4, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0002D8, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x0002DC, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_16) == 0x0002E0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_17) == 0x0002E4, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Subtract_FloatFloat_ReturnValue_6) == 0x0002E8, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Subtract_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Subtract_FloatFloat_ReturnValue_7) == 0x0002EC, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Subtract_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_18) == 0x0002F0, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Multiply_FloatFloat_ReturnValue_19) == 0x0002F4, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Multiply_FloatFloat_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x0002F8, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x0002FC, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x000300, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Add_FloatFloat_ReturnValue_7) == 0x000304, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Add_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_MakeColor_ReturnValue) == 0x000308, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_MakeColor_ReturnValue_1) == 0x000318, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_MakeColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, K2Node_MakeStruct_LinearColor) == 0x000328, "Member 'CharacterBPLib_C_EyeLightProcessing::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, K2Node_MakeStruct_LinearColor_1) == 0x000338, "Member 'CharacterBPLib_C_EyeLightProcessing::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x000348, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Conv_LinearColorToVector_ReturnValue_1) == 0x000354, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Conv_LinearColorToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, K2Node_MakeStruct_LinearColor_2) == 0x000360, "Member 'CharacterBPLib_C_EyeLightProcessing::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, K2Node_MakeStruct_LinearColor_3) == 0x000370, "Member 'CharacterBPLib_C_EyeLightProcessing::K2Node_MakeStruct_LinearColor_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Conv_LinearColorToVector_ReturnValue_2) == 0x000380, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Conv_LinearColorToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing, CallFunc_Conv_LinearColorToVector_ReturnValue_3) == 0x00038C, "Member 'CharacterBPLib_C_EyeLightProcessing::CallFunc_Conv_LinearColorToVector_ReturnValue_3' has a wrong offset!");

// Function CharacterBPLib.CharacterBPLib_C.EyeLightProcessing_EventCharacter
// 0x03D0 (0x03D0 - 0x0000)
struct CharacterBPLib_C_EyeLightProcessing_EventCharacter final
{
public:
	class USkeletalMeshComponent*                 MasterMesh;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 EyeMaterialMesh;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameLeft;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameRight;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterLeft;                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterRight;                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleLeft;                                  // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleRight;                                 // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingLeft;                               // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingRight;                              // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParentEyeJointNameLeft;                            // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParentEyeJointNameRight;                           // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                m_WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UVParam_R;                                         // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UVParam_L;                                         // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParentEyeJointNameRight_;                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParentEyeJointNameLeft_;                           // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingRight_;                             // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballRotatingLeft_;                              // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleRight_;                                // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballScaleLeft_;                                 // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterRight_;                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeballUVParameterLeft_;                           // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameRight_;                                // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyeJointNameLeft_;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x00D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0xC];                                      // 0x0124(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0130(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_2;         // 0x01B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_3;         // 0x01E0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_5;          // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_6;          // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_7;          // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x029C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x02B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x02CC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_1;   // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x02E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_2;   // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_3;                   // 0x0308(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_3;   // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0331(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_332[0x2];                                      // 0x0332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_5;                          // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue_1;                  // 0x0340(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_4;                   // 0x0354(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_5;                   // 0x0364(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_4;   // 0x0374(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_5;   // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_6;                   // 0x038C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_7;                   // 0x039C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_6;   // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_7;   // 0x03B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterBPLib_C_EyeLightProcessing_EventCharacter) == 0x000010, "Wrong alignment on CharacterBPLib_C_EyeLightProcessing_EventCharacter");
static_assert(sizeof(CharacterBPLib_C_EyeLightProcessing_EventCharacter) == 0x0003D0, "Wrong size on CharacterBPLib_C_EyeLightProcessing_EventCharacter");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, MasterMesh) == 0x000000, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::MasterMesh' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeMaterialMesh) == 0x000008, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeMaterialMesh' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeJointNameLeft) == 0x000010, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeJointNameLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeJointNameRight) == 0x000018, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeJointNameRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballUVParameterLeft) == 0x000020, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballUVParameterLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballUVParameterRight) == 0x000028, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballUVParameterRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballScaleLeft) == 0x000030, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballScaleLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballScaleRight) == 0x000038, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballScaleRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballRotatingLeft) == 0x000040, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballRotatingLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballRotatingRight) == 0x000048, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballRotatingRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, ParentEyeJointNameLeft) == 0x000050, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::ParentEyeJointNameLeft' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, ParentEyeJointNameRight) == 0x000058, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::ParentEyeJointNameRight' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, m_WorldContext) == 0x000060, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::m_WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, UVParam_R) == 0x000068, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::UVParam_R' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, UVParam_L) == 0x000074, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::UVParam_L' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, ParentEyeJointNameRight_) == 0x000080, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::ParentEyeJointNameRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, ParentEyeJointNameLeft_) == 0x000088, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::ParentEyeJointNameLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballRotatingRight_) == 0x000090, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballRotatingRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballRotatingLeft_) == 0x000098, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballRotatingLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballScaleRight_) == 0x0000A0, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballScaleRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballScaleLeft_) == 0x0000A8, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballScaleLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballUVParameterRight_) == 0x0000B0, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballUVParameterRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeballUVParameterLeft_) == 0x0000B8, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeballUVParameterLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeJointNameRight_) == 0x0000C0, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeJointNameRight_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, EyeJointNameLeft_) == 0x0000C8, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::EyeJointNameLeft_' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_GetSocketTransform_ReturnValue) == 0x0000D0, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Location) == 0x000100, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Rotation) == 0x00010C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Scale) == 0x000118, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000130, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_X) == 0x000160, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Y) == 0x000164, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Z) == 0x000168, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Location_1) == 0x00016C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Rotation_1) == 0x000178, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Scale_1) == 0x000184, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000190, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_X_1) == 0x000194, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Y_1) == 0x000198, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Z_1) == 0x00019C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0001A0, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0001A4, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0001A8, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_GetSocketTransform_ReturnValue_2) == 0x0001B0, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_GetSocketTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_GetSocketTransform_ReturnValue_3) == 0x0001E0, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_GetSocketTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Location_2) == 0x000210, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Rotation_2) == 0x00021C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Scale_2) == 0x000228, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Location_3) == 0x000234, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Rotation_3) == 0x000240, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakTransform_Scale_3) == 0x00024C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_X_2) == 0x000258, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Y_2) == 0x00025C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Z_2) == 0x000260, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_X_3) == 0x000264, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Y_3) == 0x000268, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Z_3) == 0x00026C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x000270, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Divide_FloatFloat_ReturnValue_5) == 0x000274, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Divide_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Divide_FloatFloat_ReturnValue_6) == 0x000278, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Divide_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Divide_FloatFloat_ReturnValue_7) == 0x00027C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Divide_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakRotator_Roll) == 0x000280, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakRotator_Pitch) == 0x000284, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakRotator_Yaw) == 0x000288, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_X_4) == 0x00028C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Y_4) == 0x000290, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Z_4) == 0x000294, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000298, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_MakeColor_ReturnValue) == 0x00029C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Less_FloatFloat_ReturnValue) == 0x0002AC, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, K2Node_MakeStruct_LinearColor) == 0x0002B0, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x0002C0, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, K2Node_MakeStruct_LinearColor_1) == 0x0002CC, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Conv_LinearColorToVector_ReturnValue_1) == 0x0002DC, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Conv_LinearColorToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, K2Node_MakeStruct_LinearColor_2) == 0x0002E8, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Conv_LinearColorToVector_ReturnValue_2) == 0x0002F8, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Conv_LinearColorToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000304, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, K2Node_MakeStruct_LinearColor_3) == 0x000308, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::K2Node_MakeStruct_LinearColor_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakRotator_Roll_1) == 0x000318, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakRotator_Pitch_1) == 0x00031C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakRotator_Yaw_1) == 0x000320, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Conv_LinearColorToVector_ReturnValue_3) == 0x000324, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Conv_LinearColorToVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000330, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000331, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_X_5) == 0x000334, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Y_5) == 0x000338, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_BreakVector_Z_5) == 0x00033C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_MakeColor_ReturnValue_1) == 0x000340, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_MakeColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000350, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, K2Node_MakeStruct_LinearColor_4) == 0x000354, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::K2Node_MakeStruct_LinearColor_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, K2Node_MakeStruct_LinearColor_5) == 0x000364, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::K2Node_MakeStruct_LinearColor_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Conv_LinearColorToVector_ReturnValue_4) == 0x000374, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Conv_LinearColorToVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Conv_LinearColorToVector_ReturnValue_5) == 0x000380, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Conv_LinearColorToVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, K2Node_MakeStruct_LinearColor_6) == 0x00038C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::K2Node_MakeStruct_LinearColor_6' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, K2Node_MakeStruct_LinearColor_7) == 0x00039C, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::K2Node_MakeStruct_LinearColor_7' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Conv_LinearColorToVector_ReturnValue_6) == 0x0003AC, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Conv_LinearColorToVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharacterBPLib_C_EyeLightProcessing_EventCharacter, CallFunc_Conv_LinearColorToVector_ReturnValue_7) == 0x0003B8, "Member 'CharacterBPLib_C_EyeLightProcessing_EventCharacter::CallFunc_Conv_LinearColorToVector_ReturnValue_7' has a wrong offset!");

}

