#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ToonComponent

#include "Basic.hpp"

#include "PositioningMode_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ToonComponent.BP_ToonComponent_C
// 0x0070 (0x0270 - 0x0200)
class UBP_ToonComponent_C final : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EPositioningMode                              PositioningMode;                                   // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceConstant*              RCShellMaterial_Default;                           // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UMaterialInstanceConstant*> RCShellMaterialMap;                                // 0x0210(0x0050)(Edit, BlueprintVisible)
	class UMaterialInstanceConstant*              RCShellMaterial;                                   // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyShading(bool Construction, class UMeshComponent* Mesh, class ABP_ToonScene_C* ActorScene);
	void CreateMaterials(class UMeshComponent* Mesh);
	void InitStaticShell(class UStaticMeshComponent* Shell, const struct FLinearColor& Color);
	void InitSkeletalShell(class USkeletalMeshComponent* Source, class USkeletalMeshComponent* Shell, const struct FLinearColor& Color);
	void SetShellColor(class UMeshComponent* Mesh, const struct FLinearColor& ShellColor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ToonComponent_C">();
	}
	static class UBP_ToonComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ToonComponent_C>();
	}
};
static_assert(alignof(UBP_ToonComponent_C) == 0x000010, "Wrong alignment on UBP_ToonComponent_C");
static_assert(sizeof(UBP_ToonComponent_C) == 0x000270, "Wrong size on UBP_ToonComponent_C");
static_assert(offsetof(UBP_ToonComponent_C, PositioningMode) == 0x000200, "Member 'UBP_ToonComponent_C::PositioningMode' has a wrong offset!");
static_assert(offsetof(UBP_ToonComponent_C, RCShellMaterial_Default) == 0x000208, "Member 'UBP_ToonComponent_C::RCShellMaterial_Default' has a wrong offset!");
static_assert(offsetof(UBP_ToonComponent_C, RCShellMaterialMap) == 0x000210, "Member 'UBP_ToonComponent_C::RCShellMaterialMap' has a wrong offset!");
static_assert(offsetof(UBP_ToonComponent_C, RCShellMaterial) == 0x000260, "Member 'UBP_ToonComponent_C::RCShellMaterial' has a wrong offset!");

}

