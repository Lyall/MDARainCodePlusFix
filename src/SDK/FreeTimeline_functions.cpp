#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FreeTimeline

#include "Basic.hpp"

#include "FreeTimeline_classes.hpp"
#include "FreeTimeline_parameters.hpp"


namespace SDK
{

// Function FreeTimeline.SSLevelSequenceActor.AddRebindInfo
// (Final, Native, Private)
// Parameters:
// struct FMovieSceneObjectBindingID       InBindingId                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  InActorGUID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASSLevelSequenceActor::AddRebindInfo(const struct FMovieSceneObjectBindingID& InBindingId, const class FString& InName, uint32 InActorGUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "AddRebindInfo");

	Params::SSLevelSequenceActor_AddRebindInfo Parms{};

	Parms.InBindingId = std::move(InBindingId);
	Parms.InName = std::move(InName);
	Parms.InActorGUID = InActorGUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequenceActor.GetSSSequencePlayer
// (Final, Native, Public)
// Parameters:
// class USSLevelSequencePlayer*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USSLevelSequencePlayer* ASSLevelSequenceActor::GetSSSequencePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "GetSSSequencePlayer");

	Params::SSLevelSequenceActor_GetSSSequencePlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSLevelSequenceActor.IsSequencePlayerPlaying
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASSLevelSequenceActor::IsSequencePlayerPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "IsSequencePlayerPlaying");

	Params::SSLevelSequenceActor_IsSequencePlayerPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSLevelSequenceActor.KillMySelf
// (Final, Native, Public)

void ASSLevelSequenceActor::KillMySelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "KillMySelf");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequenceActor.PlaySequencePlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPauseAtEnd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASSLevelSequenceActor::PlaySequencePlayer(int32 StartFrame, bool bPauseAtEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "PlaySequencePlayer");

	Params::SSLevelSequenceActor_PlaySequencePlayer Parms{};

	Parms.StartFrame = StartFrame;
	Parms.bPauseAtEnd = bPauseAtEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSLevelSequenceActor.PlaySequencePlayerByInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Label                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRatio                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASSLevelSequenceActor::PlaySequencePlayerByInfo(class FName Label, float PlayRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "PlaySequencePlayerByInfo");

	Params::SSLevelSequenceActor_PlaySequencePlayerByInfo Parms{};

	Parms.Label = Label;
	Parms.PlayRatio = PlayRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSLevelSequenceActor.PlaySequencePlayerInLooping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPauseAtEnd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumLoops                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASSLevelSequenceActor::PlaySequencePlayerInLooping(int32 StartFrame, bool bPauseAtEnd, int32 NumLoops)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "PlaySequencePlayerInLooping");

	Params::SSLevelSequenceActor_PlaySequencePlayerInLooping Parms{};

	Parms.StartFrame = StartFrame;
	Parms.bPauseAtEnd = bPauseAtEnd;
	Parms.NumLoops = NumLoops;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSLevelSequenceActor.SetCancelLevelSequence
// (Final, Native, Public)
// Parameters:
// class ULevelSequence*                   InCancelLevelSequence                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASSLevelSequenceActor::SetCancelLevelSequence(class ULevelSequence* InCancelLevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "SetCancelLevelSequence");

	Params::SSLevelSequenceActor_SetCancelLevelSequence Parms{};

	Parms.InCancelLevelSequence = InCancelLevelSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequenceActor.SetPlayInfo
// (Final, Native, Public, HasOutParams)
// Parameters:
// TArray<struct FKoratSequencePlayInfo>   InPlayInfoList                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ASSLevelSequenceActor::SetPlayInfo(TArray<struct FKoratSequencePlayInfo>* InPlayInfoList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "SetPlayInfo");

	Params::SSLevelSequenceActor_SetPlayInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InPlayInfoList != nullptr)
		*InPlayInfoList = std::move(Parms.InPlayInfoList);
}


// Function FreeTimeline.SSLevelSequenceActor.SetPlayInfoNextLabel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Label                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewNextLabel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASSLevelSequenceActor::SetPlayInfoNextLabel(class FName Label, class FName NewNextLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "SetPlayInfoNextLabel");

	Params::SSLevelSequenceActor_SetPlayInfoNextLabel Parms{};

	Parms.Label = Label;
	Parms.NewNextLabel = NewNextLabel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequenceActor.SetRebind
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InNameRegexPattern                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           RebindActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableAnimTrack                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableTransformTrack                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASSLevelSequenceActor::SetRebind(const class FString& InNameRegexPattern, class AActor* RebindActor, bool DisableAnimTrack, bool DisableTransformTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "SetRebind");

	Params::SSLevelSequenceActor_SetRebind Parms{};

	Parms.InNameRegexPattern = std::move(InNameRegexPattern);
	Parms.RebindActor = RebindActor;
	Parms.DisableAnimTrack = DisableAnimTrack;
	Parms.DisableTransformTrack = DisableTransformTrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSLevelSequenceActor.SetRebindsForGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRebindOwnerCharacter                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebindCharacterCamera                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebindFrontCamera                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebindToonDirectionLight                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASSLevelSequenceActor::SetRebindsForGame(bool bRebindOwnerCharacter, bool bRebindCharacterCamera, bool bRebindFrontCamera, bool bRebindToonDirectionLight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "SetRebindsForGame");

	Params::SSLevelSequenceActor_SetRebindsForGame Parms{};

	Parms.bRebindOwnerCharacter = bRebindOwnerCharacter;
	Parms.bRebindCharacterCamera = bRebindCharacterCamera;
	Parms.bRebindFrontCamera = bRebindFrontCamera;
	Parms.bRebindToonDirectionLight = bRebindToonDirectionLight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequenceActor.SetSequencePlayerAttachParam
// (Final, Native, Public)
// Parameters:
// struct FKoratAttachParamInfo            AttachParam                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ASSLevelSequenceActor::SetSequencePlayerAttachParam(const struct FKoratAttachParamInfo& AttachParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "SetSequencePlayerAttachParam");

	Params::SSLevelSequenceActor_SetSequencePlayerAttachParam Parms{};

	Parms.AttachParam = std::move(AttachParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequenceActor.StartCharacterCameraFromPlayerOnPlay
// (Final, Native, Private)

void ASSLevelSequenceActor::StartCharacterCameraFromPlayerOnPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "StartCharacterCameraFromPlayerOnPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequenceActor.StopPlayerAndDestroy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCancel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASSLevelSequenceActor::StopPlayerAndDestroy(bool bCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "StopPlayerAndDestroy");

	Params::SSLevelSequenceActor_StopPlayerAndDestroy Parms{};

	Parms.bCancel = bCancel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequenceActor.StopSequencePlayer
// (Final, Native, Public)

void ASSLevelSequenceActor::StopSequencePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequenceActor", "StopSequencePlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequencePlayer.OnFinishedForExternalParticle
// (Final, Native, Private)

void USSLevelSequencePlayer::OnFinishedForExternalParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequencePlayer", "OnFinishedForExternalParticle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSLevelSequencePlayer.SetSequencerPlaySeqNextLabel
// (Final, Native, Public)
// Parameters:
// class FName                             Label                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewNextLabel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSLevelSequencePlayer::SetSequencerPlaySeqNextLabel(class FName Label, class FName NewNextLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SSLevelSequencePlayer", "SetSequencerPlaySeqNextLabel");

	Params::SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel Parms{};

	Parms.Label = Label;
	Parms.NewNextLabel = NewNextLabel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.AddEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           EffectActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SeqName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSEffectManager::AddEffect(class UWorld* World, class FName Key, class AActor* EffectActor, class FName SeqName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "AddEffect");

	Params::SSEffectManager_AddEffect Parms{};

	Parms.World = World;
	Parms.Key = Key;
	Parms.EffectActor = EffectActor;
	Parms.SeqName = SeqName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.AddExternalActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SeqName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSEffectManager::AddExternalActor(class AActor* Actor, class FName SeqName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "AddExternalActor");

	Params::SSEffectManager_AddExternalActor Parms{};

	Parms.Actor = Actor;
	Parms.SeqName = SeqName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.AddSequencer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASSLevelSequenceActor*            SequencerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSEffectManager::AddSequencer(class UWorld* World, class FName Key, class ASSLevelSequenceActor* SequencerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "AddSequencer");

	Params::SSEffectManager_AddSequencer Parms{};

	Parms.World = World;
	Parms.Key = Key;
	Parms.SequencerActor = SequencerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.GetEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USSEffectManager::GetEffect(class UWorld* World, class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "GetEffect");

	Params::SSEffectManager_GetEffect Parms{};

	Parms.World = World;
	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.GetEffects
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SeqActorName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> USSEffectManager::GetEffects(class UWorld* World, class FName Key, class FName SeqActorName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "GetEffects");

	Params::SSEffectManager_GetEffects Parms{};

	Parms.World = World;
	Parms.Key = Key;
	Parms.SeqActorName = SeqActorName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.GetExternalActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USSEffectManager::GetExternalActor(class UWorld* World, class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "GetExternalActor");

	Params::SSEffectManager_GetExternalActor Parms{};

	Parms.World = World;
	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.GetOutlineMaterialInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InOwner                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* USSEffectManager::GetOutlineMaterialInstance(class AActor* InOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "GetOutlineMaterialInstance");

	Params::SSEffectManager_GetOutlineMaterialInstance Parms{};

	Parms.InOwner = InOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.GetSequencer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASSLevelSequenceActor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASSLevelSequenceActor* USSEffectManager::GetSequencer(class UWorld* World, class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "GetSequencer");

	Params::SSEffectManager_GetSequencer Parms{};

	Parms.World = World;
	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.IsExistExternalActorKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USSEffectManager::IsExistExternalActorKey(class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "IsExistExternalActorKey");

	Params::SSEffectManager_IsExistExternalActorKey Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.IsExistKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USSEffectManager::IsExistKey(class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "IsExistKey");

	Params::SSEffectManager_IsExistKey Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.IsExistSequencerKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USSEffectManager::IsExistSequencerKey(class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "IsExistSequencerKey");

	Params::SSEffectManager_IsExistSequencerKey Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.OutputDebugInfo
// (Final, Native, Static, Public, BlueprintCallable)

void USSEffectManager::OutputDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "OutputDebugInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.RemoveEffectAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSEffectManager::RemoveEffectAll(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "RemoveEffectAll");

	Params::SSEffectManager_RemoveEffectAll Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.RemoveEffectKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USSEffectManager::RemoveEffectKey(class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "RemoveEffectKey");

	Params::SSEffectManager_RemoveEffectKey Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.RemoveExternalActorAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSEffectManager::RemoveExternalActorAll(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "RemoveExternalActorAll");

	Params::SSEffectManager_RemoveExternalActorAll Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.RemoveExternalActorKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USSEffectManager::RemoveExternalActorKey(class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "RemoveExternalActorKey");

	Params::SSEffectManager_RemoveExternalActorKey Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.RemoveExternalActorKeyByActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ExtActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USSEffectManager::RemoveExternalActorKeyByActor(class AActor* ExtActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "RemoveExternalActorKeyByActor");

	Params::SSEffectManager_RemoveExternalActorKeyByActor Parms{};

	Parms.ExtActor = ExtActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.RemoveSequencerAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSEffectManager::RemoveSequencerAll(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "RemoveSequencerAll");

	Params::SSEffectManager_RemoveSequencerAll Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.RemoveSequencerKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USSEffectManager::RemoveSequencerKey(class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "RemoveSequencerKey");

	Params::SSEffectManager_RemoveSequencerKey Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SelectCharacterFreeTimeline
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EKoratFreeTimelineType                  TimelineType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   CancelSequenceData                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* USSEffectManager::SelectCharacterFreeTimeline(class AActor* OwnerActor, EKoratFreeTimelineType TimelineType, class ULevelSequence** CancelSequenceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SelectCharacterFreeTimeline");

	Params::SSEffectManager_SelectCharacterFreeTimeline Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.TimelineType = TimelineType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CancelSequenceData != nullptr)
		*CancelSequenceData = Parms.CancelSequenceData;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SelectCharacterFreeTimelineAtb
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EKoratFreeTimelineAtbType               TimelineType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AtbName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* USSEffectManager::SelectCharacterFreeTimelineAtb(class AActor* OwnerActor, EKoratFreeTimelineAtbType TimelineType, class FName AtbName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SelectCharacterFreeTimelineAtb");

	Params::SSEffectManager_SelectCharacterFreeTimelineAtb Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.TimelineType = TimelineType;
	Parms.AtbName = AtbName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SelectCharacterFreeTimelineAtbBrk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EKoratFreeTimelineAtbBrkType            TimelineType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AtbName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* USSEffectManager::SelectCharacterFreeTimelineAtbBrk(class AActor* OwnerActor, EKoratFreeTimelineAtbBrkType TimelineType, class FName AtbName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SelectCharacterFreeTimelineAtbBrk");

	Params::SSEffectManager_SelectCharacterFreeTimelineAtbBrk Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.TimelineType = TimelineType;
	Parms.AtbName = AtbName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SetCharacterOutline
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InChara                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InTypeName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSEffectManager::SetCharacterOutline(class AActor* InChara, bool bEnable, class FName InTypeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SetCharacterOutline");

	Params::SSEffectManager_SetCharacterOutline Parms{};

	Parms.InChara = InChara;
	Parms.bEnable = bEnable;
	Parms.InTypeName = InTypeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.SetCharacterOutlineFill
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InChara                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSEffectManager::SetCharacterOutlineFill(class AActor* InChara, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SetCharacterOutlineFill");

	Params::SSEffectManager_SetCharacterOutlineFill Parms{};

	Parms.InChara = InChara;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.SetCharacterStencil
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InChara                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StencilIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USSEffectManager::SetCharacterStencil(class AActor* InChara, int32 StencilIndex, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SetCharacterStencil");

	Params::SSEffectManager_SetCharacterStencil Parms{};

	Parms.InChara = InChara;
	Parms.StencilIndex = StencilIndex;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FreeTimeline.SSEffectManager.SpawnSequenceActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSequenceActorSpawnParameters    InParameters                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ASSLevelSequenceActor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASSLevelSequenceActor* USSEffectManager::SpawnSequenceActor(const struct FSequenceActorSpawnParameters& InParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SpawnSequenceActor");

	Params::SSEffectManager_SpawnSequenceActor Parms{};

	Parms.InParameters = std::move(InParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SpawnSequenceActorForFreeTimeline
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EKoratFreeTimelineType                  TimelineType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKoratSequencePlayInfo>   PlaySeq                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bLooped                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPauseAtEnd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ManagedID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebindPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASSLevelSequenceActor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASSLevelSequenceActor* USSEffectManager::SpawnSequenceActorForFreeTimeline(class AActor* OwnerActor, EKoratFreeTimelineType TimelineType, const TArray<struct FKoratSequencePlayInfo>& PlaySeq, bool bLooped, bool bPauseAtEnd, class FName ManagedID, int32 StartFrame, bool bRebindPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SpawnSequenceActorForFreeTimeline");

	Params::SSEffectManager_SpawnSequenceActorForFreeTimeline Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.TimelineType = TimelineType;
	Parms.PlaySeq = std::move(PlaySeq);
	Parms.bLooped = bLooped;
	Parms.bPauseAtEnd = bPauseAtEnd;
	Parms.ManagedID = ManagedID;
	Parms.StartFrame = StartFrame;
	Parms.bRebindPlayer = bRebindPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SpawnSequenceActorForFreeTimelineAtb
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EKoratFreeTimelineAtbType               TimelineType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKoratSequencePlayInfo>   PlaySeq                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bLooped                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPauseAtEnd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ManagedID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebindPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASSLevelSequenceActor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASSLevelSequenceActor* USSEffectManager::SpawnSequenceActorForFreeTimelineAtb(class AActor* OwnerActor, EKoratFreeTimelineAtbType TimelineType, const TArray<struct FKoratSequencePlayInfo>& PlaySeq, bool bLooped, bool bPauseAtEnd, class FName ManagedID, int32 StartFrame, bool bRebindPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SpawnSequenceActorForFreeTimelineAtb");

	Params::SSEffectManager_SpawnSequenceActorForFreeTimelineAtb Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.TimelineType = TimelineType;
	Parms.PlaySeq = std::move(PlaySeq);
	Parms.bLooped = bLooped;
	Parms.bPauseAtEnd = bPauseAtEnd;
	Parms.ManagedID = ManagedID;
	Parms.StartFrame = StartFrame;
	Parms.bRebindPlayer = bRebindPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SpawnSequenceActorForFreeTimelineAtbBrk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EKoratFreeTimelineAtbBrkType            TimelineType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKoratSequencePlayInfo>   PlaySeq                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bLooped                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPauseAtEnd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ManagedID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebindPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASSLevelSequenceActor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASSLevelSequenceActor* USSEffectManager::SpawnSequenceActorForFreeTimelineAtbBrk(class AActor* OwnerActor, EKoratFreeTimelineAtbBrkType TimelineType, const TArray<struct FKoratSequencePlayInfo>& PlaySeq, bool bLooped, bool bPauseAtEnd, class FName ManagedID, int32 StartFrame, bool bRebindPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SpawnSequenceActorForFreeTimelineAtbBrk");

	Params::SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.TimelineType = TimelineType;
	Parms.PlaySeq = std::move(PlaySeq);
	Parms.bLooped = bLooped;
	Parms.bPauseAtEnd = bPauseAtEnd;
	Parms.ManagedID = ManagedID;
	Parms.StartFrame = StartFrame;
	Parms.bRebindPlayer = bRebindPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SpawnSequenceActorForFreeTimelineDirect
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           BaseActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             ManagedID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebindPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASSLevelSequenceActor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASSLevelSequenceActor* USSEffectManager::SpawnSequenceActorForFreeTimelineDirect(class AActor* BaseActor, class ULevelSequence* LevelSequence, const struct FTransform& Transform, class FName ManagedID, bool bRebindPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SpawnSequenceActorForFreeTimelineDirect");

	Params::SSEffectManager_SpawnSequenceActorForFreeTimelineDirect Parms{};

	Parms.BaseActor = BaseActor;
	Parms.LevelSequence = LevelSequence;
	Parms.Transform = std::move(Transform);
	Parms.ManagedID = ManagedID;
	Parms.bRebindPlayer = bRebindPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SpawnSequenceActorSyncFreeTimeline
// (Final, Native, Static, Public, HasDefaults)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKoratSequencePlayInfo>   PlaySeq                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bOverrideTransform                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OverrideTransform                                      (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             ManagedID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebindPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayExec                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   CancelSequence                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionDataKey                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASSLevelSequenceActor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASSLevelSequenceActor* USSEffectManager::SpawnSequenceActorSyncFreeTimeline(class AActor* OwnerActor, class ULevelSequence* LevelSequence, const TArray<struct FKoratSequencePlayInfo>& PlaySeq, bool bOverrideTransform, const struct FTransform& OverrideTransform, class FName ManagedID, bool bRebindPlayer, bool bPlayExec, class ULevelSequence* CancelSequence, const class FName ActionDataKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SpawnSequenceActorSyncFreeTimeline");

	Params::SSEffectManager_SpawnSequenceActorSyncFreeTimeline Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.LevelSequence = LevelSequence;
	Parms.PlaySeq = std::move(PlaySeq);
	Parms.bOverrideTransform = bOverrideTransform;
	Parms.OverrideTransform = std::move(OverrideTransform);
	Parms.ManagedID = ManagedID;
	Parms.bRebindPlayer = bRebindPlayer;
	Parms.bPlayExec = bPlayExec;
	Parms.CancelSequence = CancelSequence;
	Parms.ActionDataKey = ActionDataKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FreeTimeline.SSEffectManager.SpawnSequenceActorSyncMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKoratSequencePlayInfo>   PlaySeq                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bLooped                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPauseAtEnd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ManagedID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebindPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayExec                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   CancelSequence                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionDataKey                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASSLevelSequenceActor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASSLevelSequenceActor* USSEffectManager::SpawnSequenceActorSyncMontage(class AActor* OwnerActor, class ULevelSequence* LevelSequence, const TArray<struct FKoratSequencePlayInfo>& PlaySeq, bool bLooped, bool bPauseAtEnd, class FName ManagedID, int32 StartFrame, bool bRebindPlayer, bool bPlayExec, class ULevelSequence* CancelSequence, const class FName ActionDataKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SSEffectManager", "SpawnSequenceActorSyncMontage");

	Params::SSEffectManager_SpawnSequenceActorSyncMontage Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.LevelSequence = LevelSequence;
	Parms.PlaySeq = std::move(PlaySeq);
	Parms.bLooped = bLooped;
	Parms.bPauseAtEnd = bPauseAtEnd;
	Parms.ManagedID = ManagedID;
	Parms.StartFrame = StartFrame;
	Parms.bRebindPlayer = bRebindPlayer;
	Parms.bPlayExec = bPlayExec;
	Parms.CancelSequence = CancelSequence;
	Parms.ActionDataKey = ActionDataKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

