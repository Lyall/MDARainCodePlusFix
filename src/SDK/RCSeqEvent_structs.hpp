#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RCSeqEvent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"
#include "RC_structs.hpp"


namespace SDK
{

// Enum RCSeqEvent.ERCSeqBaseJumpType
// NumValues: 0x0005
enum class ERCSeqBaseJumpType : uint8
{
	Label                                    = 0,
	Frame                                    = 1,
	Seconds                                  = 2,
	SectionEnd                               = 3,
	Max                                      = 4,
};

// Enum RCSeqEvent.FRCSeqEventLoopSectionJumpType
// NumValues: 0x0003
enum class EFRCSeqEventLoopSectionJumpType : uint8
{
	Time                                     = 0,
	Frame                                    = 1,
	Max                                      = 2,
};

// Enum RCSeqEvent.FRCSeqEventLoopSectionLoopType
// NumValues: 0x0002
enum class EFRCSeqEventLoopSectionLoopType : uint8
{
	BoolProperty                             = 0,
	Max                                      = 1,
};

// Enum RCSeqEvent.ERCSeqSubtitleOneSubtitleSectionJumpCondition
// NumValues: 0x0003
enum class ERCSeqSubtitleOneSubtitleSectionJumpCondition : uint8
{
	NotJump                                  = 0,
	NotEndSection                            = 1,
	Max                                      = 2,
};

// Enum RCSeqEvent.FRCSeqSubtitleOneSubtitleSectionCloseType
// NumValues: 0x0004
enum class EFRCSeqSubtitleOneSubtitleSectionCloseType : uint8
{
	NotClose                                 = 0,
	AtDelayEnd                               = 1,
	AtSectionEnd                             = 2,
	Max                                      = 3,
};

// Enum RCSeqEvent.ERCSeqSubtitleSubtitleSectionJumpCondition
// NumValues: 0x0003
enum class ERCSeqSubtitleSubtitleSectionJumpCondition : uint8
{
	NotJump                                  = 0,
	NotEndSection                            = 1,
	Max                                      = 2,
};

// Enum RCSeqEvent.FRCSeqSubtitleSubtitleSectionSubtitleDataType
// NumValues: 0x0003
enum class EFRCSeqSubtitleSubtitleSectionSubtitleDataType : uint8
{
	DataTable                                = 0,
	SubtitleID                               = 1,
	Max                                      = 2,
};

// Enum RCSeqEvent.FRCSeqSubtitleWaitSubtitleSectionSubtitleDataType
// NumValues: 0x0003
enum class EFRCSeqSubtitleWaitSubtitleSectionSubtitleDataType : uint8
{
	DataTable                                = 0,
	SubtitleID                               = 1,
	Max                                      = 2,
};

// Enum RCSeqEvent.ERCSeqTalkOneTalkSectionJumpCondition
// NumValues: 0x0004
enum class ERCSeqTalkOneTalkSectionJumpCondition : uint8
{
	NotJump                                  = 0,
	SkipVoice                                = 1,
	NotEndSection                            = 2,
	Max                                      = 3,
};

// Enum RCSeqEvent.ERCSeqTalkTalkSectionJumpCondition
// NumValues: 0x0003
enum class ERCSeqTalkTalkSectionJumpCondition : uint8
{
	NotJump                                  = 0,
	NotEndSection                            = 1,
	Max                                      = 2,
};

// Enum RCSeqEvent.FRCSeqTalkTalkSectionTalkDataType
// NumValues: 0x0003
enum class EFRCSeqTalkTalkSectionTalkDataType : uint8
{
	DataTable                                = 0,
	TalkID                                   = 1,
	Max                                      = 2,
};

// Enum RCSeqEvent.FRCSeqTalkWaitTalkSectionTalkDataType
// NumValues: 0x0003
enum class EFRCSeqTalkWaitTalkSectionTalkDataType : uint8
{
	DataTable                                = 0,
	TalkID                                   = 1,
	Max                                      = 2,
};

// ScriptStruct RCSeqEvent.RCSeqBaseJumpData
// 0x0020 (0x0020 - 0x0000)
struct FRCSeqBaseJumpData final
{
public:
	ERCSeqBaseJumpType                            JumpType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Label;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frame;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqBaseJumpData) == 0x000008, "Wrong alignment on FRCSeqBaseJumpData");
static_assert(sizeof(FRCSeqBaseJumpData) == 0x000020, "Wrong size on FRCSeqBaseJumpData");
static_assert(offsetof(FRCSeqBaseJumpData, JumpType) == 0x000000, "Member 'FRCSeqBaseJumpData::JumpType' has a wrong offset!");
static_assert(offsetof(FRCSeqBaseJumpData, Label) == 0x000008, "Member 'FRCSeqBaseJumpData::Label' has a wrong offset!");
static_assert(offsetof(FRCSeqBaseJumpData, Frame) == 0x000018, "Member 'FRCSeqBaseJumpData::Frame' has a wrong offset!");
static_assert(offsetof(FRCSeqBaseJumpData, Seconds) == 0x00001C, "Member 'FRCSeqBaseJumpData::Seconds' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqBaseTemplate
// 0x0020 (0x0040 - 0x0020)
struct FRCSeqBaseTemplate : public FMovieSceneEvalTemplate
{
public:
	bool                                          bKey;                                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFrameNumber>                   KeyTimes;                                          // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FFrameNumber                           RangeStartFrame;                                   // 0x0038(0x0004)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFrameNumber                           RangeEndFrame;                                     // 0x003C(0x0004)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRCSeqBaseTemplate) == 0x000008, "Wrong alignment on FRCSeqBaseTemplate");
static_assert(sizeof(FRCSeqBaseTemplate) == 0x000040, "Wrong size on FRCSeqBaseTemplate");
static_assert(offsetof(FRCSeqBaseTemplate, bKey) == 0x000020, "Member 'FRCSeqBaseTemplate::bKey' has a wrong offset!");
static_assert(offsetof(FRCSeqBaseTemplate, KeyTimes) == 0x000028, "Member 'FRCSeqBaseTemplate::KeyTimes' has a wrong offset!");
static_assert(offsetof(FRCSeqBaseTemplate, RangeStartFrame) == 0x000038, "Member 'FRCSeqBaseTemplate::RangeStartFrame' has a wrong offset!");
static_assert(offsetof(FRCSeqBaseTemplate, RangeEndFrame) == 0x00003C, "Member 'FRCSeqBaseTemplate::RangeEndFrame' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventEmissiveSectionEmissiveData
// 0x0018 (0x0018 - 0x0000)
struct FRCSeqEventEmissiveSectionEmissiveData final
{
public:
	class FString                                 CharacterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventEmissiveValue;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqEventEmissiveSectionEmissiveData) == 0x000008, "Wrong alignment on FRCSeqEventEmissiveSectionEmissiveData");
static_assert(sizeof(FRCSeqEventEmissiveSectionEmissiveData) == 0x000018, "Wrong size on FRCSeqEventEmissiveSectionEmissiveData");
static_assert(offsetof(FRCSeqEventEmissiveSectionEmissiveData, CharacterName) == 0x000000, "Member 'FRCSeqEventEmissiveSectionEmissiveData::CharacterName' has a wrong offset!");
static_assert(offsetof(FRCSeqEventEmissiveSectionEmissiveData, EventEmissiveValue) == 0x000010, "Member 'FRCSeqEventEmissiveSectionEmissiveData::EventEmissiveValue' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventEmissiveTemplate
// 0x0018 (0x0058 - 0x0040)
struct FRCSeqEventEmissiveTemplate final : public FRCSeqBaseTemplate
{
public:
	struct FRCSeqEventEmissiveSectionEmissiveData EmissiveData;                                      // 0x0040(0x0018)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCSeqEventEmissiveTemplate) == 0x000008, "Wrong alignment on FRCSeqEventEmissiveTemplate");
static_assert(sizeof(FRCSeqEventEmissiveTemplate) == 0x000058, "Wrong size on FRCSeqEventEmissiveTemplate");
static_assert(offsetof(FRCSeqEventEmissiveTemplate, EmissiveData) == 0x000040, "Member 'FRCSeqEventEmissiveTemplate::EmissiveData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventFacialColorSectionFacialColorData
// 0x0028 (0x0028 - 0x0000)
struct FRCSeqEventFacialColorSectionFacialColorData final
{
public:
	class FString                                 CharacterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorPatternName;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqEventFacialColorSectionFacialColorData) == 0x000008, "Wrong alignment on FRCSeqEventFacialColorSectionFacialColorData");
static_assert(sizeof(FRCSeqEventFacialColorSectionFacialColorData) == 0x000028, "Wrong size on FRCSeqEventFacialColorSectionFacialColorData");
static_assert(offsetof(FRCSeqEventFacialColorSectionFacialColorData, CharacterName) == 0x000000, "Member 'FRCSeqEventFacialColorSectionFacialColorData::CharacterName' has a wrong offset!");
static_assert(offsetof(FRCSeqEventFacialColorSectionFacialColorData, ColorPatternName) == 0x000010, "Member 'FRCSeqEventFacialColorSectionFacialColorData::ColorPatternName' has a wrong offset!");
static_assert(offsetof(FRCSeqEventFacialColorSectionFacialColorData, FadeTime) == 0x000020, "Member 'FRCSeqEventFacialColorSectionFacialColorData::FadeTime' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventFacialColorTemplate
// 0x0028 (0x0068 - 0x0040)
struct FRCSeqEventFacialColorTemplate final : public FRCSeqBaseTemplate
{
public:
	struct FRCSeqEventFacialColorSectionFacialColorData FacialColorData;                                   // 0x0040(0x0028)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCSeqEventFacialColorTemplate) == 0x000008, "Wrong alignment on FRCSeqEventFacialColorTemplate");
static_assert(sizeof(FRCSeqEventFacialColorTemplate) == 0x000068, "Wrong size on FRCSeqEventFacialColorTemplate");
static_assert(offsetof(FRCSeqEventFacialColorTemplate, FacialColorData) == 0x000040, "Member 'FRCSeqEventFacialColorTemplate::FacialColorData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventHairSpecularSectionHairSpecularData
// 0x0020 (0x0020 - 0x0000)
struct FRCSeqEventHairSpecularSectionHairSpecularData final
{
public:
	class FString                                 CharacterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventHairSpecularDirectionX;                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventHairSpecularDirectionY;                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventHairSpecularDirectionZ;                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqEventHairSpecularSectionHairSpecularData) == 0x000008, "Wrong alignment on FRCSeqEventHairSpecularSectionHairSpecularData");
static_assert(sizeof(FRCSeqEventHairSpecularSectionHairSpecularData) == 0x000020, "Wrong size on FRCSeqEventHairSpecularSectionHairSpecularData");
static_assert(offsetof(FRCSeqEventHairSpecularSectionHairSpecularData, CharacterName) == 0x000000, "Member 'FRCSeqEventHairSpecularSectionHairSpecularData::CharacterName' has a wrong offset!");
static_assert(offsetof(FRCSeqEventHairSpecularSectionHairSpecularData, EventHairSpecularDirectionX) == 0x000010, "Member 'FRCSeqEventHairSpecularSectionHairSpecularData::EventHairSpecularDirectionX' has a wrong offset!");
static_assert(offsetof(FRCSeqEventHairSpecularSectionHairSpecularData, EventHairSpecularDirectionY) == 0x000014, "Member 'FRCSeqEventHairSpecularSectionHairSpecularData::EventHairSpecularDirectionY' has a wrong offset!");
static_assert(offsetof(FRCSeqEventHairSpecularSectionHairSpecularData, EventHairSpecularDirectionZ) == 0x000018, "Member 'FRCSeqEventHairSpecularSectionHairSpecularData::EventHairSpecularDirectionZ' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventHairSpecularTemplate
// 0x0020 (0x0060 - 0x0040)
struct FRCSeqEventHairSpecularTemplate final : public FRCSeqBaseTemplate
{
public:
	struct FRCSeqEventHairSpecularSectionHairSpecularData HairSpecularData;                                  // 0x0040(0x0020)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCSeqEventHairSpecularTemplate) == 0x000008, "Wrong alignment on FRCSeqEventHairSpecularTemplate");
static_assert(sizeof(FRCSeqEventHairSpecularTemplate) == 0x000060, "Wrong size on FRCSeqEventHairSpecularTemplate");
static_assert(offsetof(FRCSeqEventHairSpecularTemplate, HairSpecularData) == 0x000040, "Member 'FRCSeqEventHairSpecularTemplate::HairSpecularData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventLightOffsetSectionOffsetData
// 0x000C (0x000C - 0x0000)
struct FRCSeqEventLightOffsetSectionOffsetData final
{
public:
	struct FRotator                               RotatorOffset;                                     // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqEventLightOffsetSectionOffsetData) == 0x000004, "Wrong alignment on FRCSeqEventLightOffsetSectionOffsetData");
static_assert(sizeof(FRCSeqEventLightOffsetSectionOffsetData) == 0x00000C, "Wrong size on FRCSeqEventLightOffsetSectionOffsetData");
static_assert(offsetof(FRCSeqEventLightOffsetSectionOffsetData, RotatorOffset) == 0x000000, "Member 'FRCSeqEventLightOffsetSectionOffsetData::RotatorOffset' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventLightOffsetTemplate
// 0x0010 (0x0050 - 0x0040)
struct FRCSeqEventLightOffsetTemplate final : public FRCSeqBaseTemplate
{
public:
	struct FRCSeqEventLightOffsetSectionOffsetData LightOffsetData;                                   // 0x0040(0x000C)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqEventLightOffsetTemplate) == 0x000008, "Wrong alignment on FRCSeqEventLightOffsetTemplate");
static_assert(sizeof(FRCSeqEventLightOffsetTemplate) == 0x000050, "Wrong size on FRCSeqEventLightOffsetTemplate");
static_assert(offsetof(FRCSeqEventLightOffsetTemplate, LightOffsetData) == 0x000040, "Member 'FRCSeqEventLightOffsetTemplate::LightOffsetData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventLightSectionRotatorOffsetData
// 0x000C (0x000C - 0x0000)
struct FRCSeqEventLightSectionRotatorOffsetData final
{
public:
	struct FRotator                               Offset;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqEventLightSectionRotatorOffsetData) == 0x000004, "Wrong alignment on FRCSeqEventLightSectionRotatorOffsetData");
static_assert(sizeof(FRCSeqEventLightSectionRotatorOffsetData) == 0x00000C, "Wrong size on FRCSeqEventLightSectionRotatorOffsetData");
static_assert(offsetof(FRCSeqEventLightSectionRotatorOffsetData, Offset) == 0x000000, "Member 'FRCSeqEventLightSectionRotatorOffsetData::Offset' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventLoopSectionJumpData
// 0x0001 (0x0001 - 0x0000)
struct FRCSeqEventLoopSectionJumpData final
{
public:
	EFRCSeqEventLoopSectionJumpType               JumpType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqEventLoopSectionJumpData) == 0x000001, "Wrong alignment on FRCSeqEventLoopSectionJumpData");
static_assert(sizeof(FRCSeqEventLoopSectionJumpData) == 0x000001, "Wrong size on FRCSeqEventLoopSectionJumpData");
static_assert(offsetof(FRCSeqEventLoopSectionJumpData, JumpType) == 0x000000, "Member 'FRCSeqEventLoopSectionJumpData::JumpType' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventLoopSectionCheckLoopData
// 0x0010 (0x0010 - 0x0000)
struct FRCSeqEventLoopSectionCheckLoopData final
{
public:
	EFRCSeqEventLoopSectionLoopType               LoopType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PropertyName;                                      // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBreakLoop;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqEventLoopSectionCheckLoopData) == 0x000004, "Wrong alignment on FRCSeqEventLoopSectionCheckLoopData");
static_assert(sizeof(FRCSeqEventLoopSectionCheckLoopData) == 0x000010, "Wrong size on FRCSeqEventLoopSectionCheckLoopData");
static_assert(offsetof(FRCSeqEventLoopSectionCheckLoopData, LoopType) == 0x000000, "Member 'FRCSeqEventLoopSectionCheckLoopData::LoopType' has a wrong offset!");
static_assert(offsetof(FRCSeqEventLoopSectionCheckLoopData, PropertyName) == 0x000004, "Member 'FRCSeqEventLoopSectionCheckLoopData::PropertyName' has a wrong offset!");
static_assert(offsetof(FRCSeqEventLoopSectionCheckLoopData, bBreakLoop) == 0x00000C, "Member 'FRCSeqEventLoopSectionCheckLoopData::bBreakLoop' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventLoopTemplate
// 0x0020 (0x0040 - 0x0020)
struct FRCSeqEventLoopTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FRCSeqEventLoopSectionCheckLoopData    CheckLoopData;                                     // 0x0020(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FRCSeqEventLoopSectionJumpData         JumpData;                                          // 0x0030(0x0001)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameNumber                           RangeStartFrame;                                   // 0x0034(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           RangeEndFrame;                                     // 0x0038(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqEventLoopTemplate) == 0x000008, "Wrong alignment on FRCSeqEventLoopTemplate");
static_assert(sizeof(FRCSeqEventLoopTemplate) == 0x000040, "Wrong size on FRCSeqEventLoopTemplate");
static_assert(offsetof(FRCSeqEventLoopTemplate, CheckLoopData) == 0x000020, "Member 'FRCSeqEventLoopTemplate::CheckLoopData' has a wrong offset!");
static_assert(offsetof(FRCSeqEventLoopTemplate, JumpData) == 0x000030, "Member 'FRCSeqEventLoopTemplate::JumpData' has a wrong offset!");
static_assert(offsetof(FRCSeqEventLoopTemplate, RangeStartFrame) == 0x000034, "Member 'FRCSeqEventLoopTemplate::RangeStartFrame' has a wrong offset!");
static_assert(offsetof(FRCSeqEventLoopTemplate, RangeEndFrame) == 0x000038, "Member 'FRCSeqEventLoopTemplate::RangeEndFrame' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqEventTemplate
// 0x0000 (0x0020 - 0x0020)
struct FRCSeqEventTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FRCSeqEventTemplate) == 0x000008, "Wrong alignment on FRCSeqEventTemplate");
static_assert(sizeof(FRCSeqEventTemplate) == 0x000020, "Wrong size on FRCSeqEventTemplate");

// ScriptStruct RCSeqEvent.RCSeqSubtitleOneSubtitleSectionJumpData
// 0x0028 (0x0028 - 0x0000)
struct FRCSeqSubtitleOneSubtitleSectionJumpData final
{
public:
	ERCSeqSubtitleOneSubtitleSectionJumpCondition JumpCondition;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCSeqBaseJumpData                     JumpData;                                          // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqSubtitleOneSubtitleSectionJumpData) == 0x000008, "Wrong alignment on FRCSeqSubtitleOneSubtitleSectionJumpData");
static_assert(sizeof(FRCSeqSubtitleOneSubtitleSectionJumpData) == 0x000028, "Wrong size on FRCSeqSubtitleOneSubtitleSectionJumpData");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionJumpData, JumpCondition) == 0x000000, "Member 'FRCSeqSubtitleOneSubtitleSectionJumpData::JumpCondition' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionJumpData, JumpData) == 0x000008, "Member 'FRCSeqSubtitleOneSubtitleSectionJumpData::JumpData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqSubtitleOneSubtitleSectionSubtitleData2
// 0x0028 (0x0028 - 0x0000)
struct FRCSeqSubtitleOneSubtitleSectionSubtitleData2 final
{
public:
	int32                                         CharacterNameID;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameSubID;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceCharacterID;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopVoiceAtStart;                                 // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayAtEnd;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFRCSeqSubtitleOneSubtitleSectionCloseType    CloseType;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopSequencer;                                    // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInReverse;                                  // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2) == 0x000004, "Wrong alignment on FRCSeqSubtitleOneSubtitleSectionSubtitleData2");
static_assert(sizeof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2) == 0x000028, "Wrong size on FRCSeqSubtitleOneSubtitleSectionSubtitleData2");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, CharacterNameID) == 0x000000, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::CharacterNameID' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, CharacterNameSubID) == 0x000004, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::CharacterNameSubID' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, TextID) == 0x000008, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::TextID' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, VoiceCharacterID) == 0x000010, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::VoiceCharacterID' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, VoiceID) == 0x000014, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::VoiceID' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, bStopVoiceAtStart) == 0x00001C, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::bStopVoiceAtStart' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, DelayAtEnd) == 0x000020, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, CloseType) == 0x000024, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::CloseType' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, bStopSequencer) == 0x000025, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::bStopSequencer' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleSectionSubtitleData2, bEnableInReverse) == 0x000026, "Member 'FRCSeqSubtitleOneSubtitleSectionSubtitleData2::bEnableInReverse' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqSubtitleOneSubtitleTemplate
// 0x0050 (0x0090 - 0x0040)
struct FRCSeqSubtitleOneSubtitleTemplate final : public FRCSeqBaseTemplate
{
public:
	struct FRCSeqSubtitleOneSubtitleSectionSubtitleData2 SubtitleData2;                                     // 0x0040(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FRCSeqSubtitleOneSubtitleSectionJumpData JumpData;                                          // 0x0068(0x0028)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCSeqSubtitleOneSubtitleTemplate) == 0x000008, "Wrong alignment on FRCSeqSubtitleOneSubtitleTemplate");
static_assert(sizeof(FRCSeqSubtitleOneSubtitleTemplate) == 0x000090, "Wrong size on FRCSeqSubtitleOneSubtitleTemplate");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleTemplate, SubtitleData2) == 0x000040, "Member 'FRCSeqSubtitleOneSubtitleTemplate::SubtitleData2' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleOneSubtitleTemplate, JumpData) == 0x000068, "Member 'FRCSeqSubtitleOneSubtitleTemplate::JumpData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqSubtitleSubtitleSectionJumpData
// 0x0028 (0x0028 - 0x0000)
struct FRCSeqSubtitleSubtitleSectionJumpData final
{
public:
	ERCSeqSubtitleSubtitleSectionJumpCondition    JumpCondition;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCSeqBaseJumpData                     JumpData;                                          // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqSubtitleSubtitleSectionJumpData) == 0x000008, "Wrong alignment on FRCSeqSubtitleSubtitleSectionJumpData");
static_assert(sizeof(FRCSeqSubtitleSubtitleSectionJumpData) == 0x000028, "Wrong size on FRCSeqSubtitleSubtitleSectionJumpData");
static_assert(offsetof(FRCSeqSubtitleSubtitleSectionJumpData, JumpCondition) == 0x000000, "Member 'FRCSeqSubtitleSubtitleSectionJumpData::JumpCondition' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleSubtitleSectionJumpData, JumpData) == 0x000008, "Member 'FRCSeqSubtitleSubtitleSectionJumpData::JumpData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqSubtitleSubtitleSectionSubtitleData
// 0x0028 (0x0028 - 0x0000)
struct FRCSeqSubtitleSubtitleSectionSubtitleData final
{
public:
	EFRCSeqSubtitleSubtitleSectionSubtitleDataType DataType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubTitleID;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEnd;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToNext;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAtAllEnd;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopSequencer;                                    // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqSubtitleSubtitleSectionSubtitleData) == 0x000008, "Wrong alignment on FRCSeqSubtitleSubtitleSectionSubtitleData");
static_assert(sizeof(FRCSeqSubtitleSubtitleSectionSubtitleData) == 0x000028, "Wrong size on FRCSeqSubtitleSubtitleSectionSubtitleData");
static_assert(offsetof(FRCSeqSubtitleSubtitleSectionSubtitleData, DataType) == 0x000000, "Member 'FRCSeqSubtitleSubtitleSectionSubtitleData::DataType' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleSubtitleSectionSubtitleData, DataTable) == 0x000008, "Member 'FRCSeqSubtitleSubtitleSectionSubtitleData::DataTable' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleSubtitleSectionSubtitleData, SubTitleID) == 0x000010, "Member 'FRCSeqSubtitleSubtitleSectionSubtitleData::SubTitleID' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleSubtitleSectionSubtitleData, DelayAtEnd) == 0x000018, "Member 'FRCSeqSubtitleSubtitleSectionSubtitleData::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleSubtitleSectionSubtitleData, DelayToNext) == 0x00001C, "Member 'FRCSeqSubtitleSubtitleSectionSubtitleData::DelayToNext' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleSubtitleSectionSubtitleData, bCloseAtAllEnd) == 0x000020, "Member 'FRCSeqSubtitleSubtitleSectionSubtitleData::bCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleSubtitleSectionSubtitleData, bStopSequencer) == 0x000021, "Member 'FRCSeqSubtitleSubtitleSectionSubtitleData::bStopSequencer' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqSubtitleSubtitleTemplate
// 0x0050 (0x0090 - 0x0040)
struct FRCSeqSubtitleSubtitleTemplate final : public FRCSeqBaseTemplate
{
public:
	struct FRCSeqSubtitleSubtitleSectionSubtitleData SubtitleData;                                      // 0x0040(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FRCSeqSubtitleSubtitleSectionJumpData  JumpData;                                          // 0x0068(0x0028)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCSeqSubtitleSubtitleTemplate) == 0x000008, "Wrong alignment on FRCSeqSubtitleSubtitleTemplate");
static_assert(sizeof(FRCSeqSubtitleSubtitleTemplate) == 0x000090, "Wrong size on FRCSeqSubtitleSubtitleTemplate");
static_assert(offsetof(FRCSeqSubtitleSubtitleTemplate, SubtitleData) == 0x000040, "Member 'FRCSeqSubtitleSubtitleTemplate::SubtitleData' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleSubtitleTemplate, JumpData) == 0x000068, "Member 'FRCSeqSubtitleSubtitleTemplate::JumpData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqSubtitleWaitSubtitleSectionSubtitleData
// 0x0008 (0x0008 - 0x0000)
struct FRCSeqSubtitleWaitSubtitleSectionSubtitleData final
{
public:
	class FName                                   SubTitleID;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqSubtitleWaitSubtitleSectionSubtitleData) == 0x000004, "Wrong alignment on FRCSeqSubtitleWaitSubtitleSectionSubtitleData");
static_assert(sizeof(FRCSeqSubtitleWaitSubtitleSectionSubtitleData) == 0x000008, "Wrong size on FRCSeqSubtitleWaitSubtitleSectionSubtitleData");
static_assert(offsetof(FRCSeqSubtitleWaitSubtitleSectionSubtitleData, SubTitleID) == 0x000000, "Member 'FRCSeqSubtitleWaitSubtitleSectionSubtitleData::SubTitleID' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqSubtitleWaitSubtitleChannel
// 0x0080 (0x0088 - 0x0008)
struct FRCSeqSubtitleWaitSubtitleChannel final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   KeyTimes;                                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FRCSeqSubtitleWaitSubtitleSectionSubtitleData> KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqSubtitleWaitSubtitleChannel) == 0x000008, "Wrong alignment on FRCSeqSubtitleWaitSubtitleChannel");
static_assert(sizeof(FRCSeqSubtitleWaitSubtitleChannel) == 0x000088, "Wrong size on FRCSeqSubtitleWaitSubtitleChannel");
static_assert(offsetof(FRCSeqSubtitleWaitSubtitleChannel, KeyTimes) == 0x000008, "Member 'FRCSeqSubtitleWaitSubtitleChannel::KeyTimes' has a wrong offset!");
static_assert(offsetof(FRCSeqSubtitleWaitSubtitleChannel, KeyValues) == 0x000018, "Member 'FRCSeqSubtitleWaitSubtitleChannel::KeyValues' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqSubtitleWaitSubtitleTemplate
// 0x0010 (0x0050 - 0x0040)
struct FRCSeqSubtitleWaitSubtitleTemplate final : public FRCSeqBaseTemplate
{
public:
	TArray<struct FRCSeqSubtitleWaitSubtitleSectionSubtitleData> KeySubtitleDatas;                                  // 0x0040(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRCSeqSubtitleWaitSubtitleTemplate) == 0x000008, "Wrong alignment on FRCSeqSubtitleWaitSubtitleTemplate");
static_assert(sizeof(FRCSeqSubtitleWaitSubtitleTemplate) == 0x000050, "Wrong size on FRCSeqSubtitleWaitSubtitleTemplate");
static_assert(offsetof(FRCSeqSubtitleWaitSubtitleTemplate, KeySubtitleDatas) == 0x000040, "Member 'FRCSeqSubtitleWaitSubtitleTemplate::KeySubtitleDatas' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqTalkOneTalkSectionJumpData
// 0x0028 (0x0028 - 0x0000)
struct FRCSeqTalkOneTalkSectionJumpData final
{
public:
	ERCSeqTalkOneTalkSectionJumpCondition         JumpCondition;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCSeqBaseJumpData                     JumpData;                                          // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqTalkOneTalkSectionJumpData) == 0x000008, "Wrong alignment on FRCSeqTalkOneTalkSectionJumpData");
static_assert(sizeof(FRCSeqTalkOneTalkSectionJumpData) == 0x000028, "Wrong size on FRCSeqTalkOneTalkSectionJumpData");
static_assert(offsetof(FRCSeqTalkOneTalkSectionJumpData, JumpCondition) == 0x000000, "Member 'FRCSeqTalkOneTalkSectionJumpData::JumpCondition' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionJumpData, JumpData) == 0x000008, "Member 'FRCSeqTalkOneTalkSectionJumpData::JumpData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqTalkOneTalkSectionTalkData2
// 0x0030 (0x0030 - 0x0000)
struct FRCSeqTalkOneTalkSectionTalkData2 final
{
public:
	ERCAdvHUDTalkWindowType                       WindowType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterFaceID;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFacialID;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceCharacterID;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceCharacterFacialID;                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEnd;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClose;                                            // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopSequencer;                                    // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqTalkOneTalkSectionTalkData2) == 0x000004, "Wrong alignment on FRCSeqTalkOneTalkSectionTalkData2");
static_assert(sizeof(FRCSeqTalkOneTalkSectionTalkData2) == 0x000030, "Wrong size on FRCSeqTalkOneTalkSectionTalkData2");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, WindowType) == 0x000000, "Member 'FRCSeqTalkOneTalkSectionTalkData2::WindowType' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, CharacterFaceID) == 0x000004, "Member 'FRCSeqTalkOneTalkSectionTalkData2::CharacterFaceID' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, CharacterFacialID) == 0x000008, "Member 'FRCSeqTalkOneTalkSectionTalkData2::CharacterFacialID' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, TextID) == 0x00000C, "Member 'FRCSeqTalkOneTalkSectionTalkData2::TextID' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, VoiceCharacterID) == 0x000014, "Member 'FRCSeqTalkOneTalkSectionTalkData2::VoiceCharacterID' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, VoiceCharacterFacialID) == 0x000018, "Member 'FRCSeqTalkOneTalkSectionTalkData2::VoiceCharacterFacialID' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, VoiceID) == 0x000020, "Member 'FRCSeqTalkOneTalkSectionTalkData2::VoiceID' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, DelayAtEnd) == 0x000028, "Member 'FRCSeqTalkOneTalkSectionTalkData2::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, bClose) == 0x00002C, "Member 'FRCSeqTalkOneTalkSectionTalkData2::bClose' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkSectionTalkData2, bStopSequencer) == 0x00002D, "Member 'FRCSeqTalkOneTalkSectionTalkData2::bStopSequencer' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqTalkOneTalkTemplate
// 0x0060 (0x00A0 - 0x0040)
struct FRCSeqTalkOneTalkTemplate final : public FRCSeqBaseTemplate
{
public:
	struct FRCSeqTalkOneTalkSectionTalkData2      TalkData2;                                         // 0x0040(0x0030)(NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bForceAutoPlay;                                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCSeqTalkOneTalkSectionJumpData       JumpData;                                          // 0x0078(0x0028)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCSeqTalkOneTalkTemplate) == 0x000008, "Wrong alignment on FRCSeqTalkOneTalkTemplate");
static_assert(sizeof(FRCSeqTalkOneTalkTemplate) == 0x0000A0, "Wrong size on FRCSeqTalkOneTalkTemplate");
static_assert(offsetof(FRCSeqTalkOneTalkTemplate, TalkData2) == 0x000040, "Member 'FRCSeqTalkOneTalkTemplate::TalkData2' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkTemplate, bForceAutoPlay) == 0x000070, "Member 'FRCSeqTalkOneTalkTemplate::bForceAutoPlay' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkOneTalkTemplate, JumpData) == 0x000078, "Member 'FRCSeqTalkOneTalkTemplate::JumpData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqTalkTalkSectionJumpData
// 0x0028 (0x0028 - 0x0000)
struct FRCSeqTalkTalkSectionJumpData final
{
public:
	ERCSeqTalkTalkSectionJumpCondition            JumpCondition;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCSeqBaseJumpData                     JumpData;                                          // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqTalkTalkSectionJumpData) == 0x000008, "Wrong alignment on FRCSeqTalkTalkSectionJumpData");
static_assert(sizeof(FRCSeqTalkTalkSectionJumpData) == 0x000028, "Wrong size on FRCSeqTalkTalkSectionJumpData");
static_assert(offsetof(FRCSeqTalkTalkSectionJumpData, JumpCondition) == 0x000000, "Member 'FRCSeqTalkTalkSectionJumpData::JumpCondition' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkTalkSectionJumpData, JumpData) == 0x000008, "Member 'FRCSeqTalkTalkSectionJumpData::JumpData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqTalkTalkSectionTalkData
// 0x0020 (0x0020 - 0x0000)
struct FRCSeqTalkTalkSectionTalkData final
{
public:
	EFRCSeqTalkTalkSectionTalkDataType            DataType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopSequencer;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAutoPlay;                                    // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqTalkTalkSectionTalkData) == 0x000008, "Wrong alignment on FRCSeqTalkTalkSectionTalkData");
static_assert(sizeof(FRCSeqTalkTalkSectionTalkData) == 0x000020, "Wrong size on FRCSeqTalkTalkSectionTalkData");
static_assert(offsetof(FRCSeqTalkTalkSectionTalkData, DataType) == 0x000000, "Member 'FRCSeqTalkTalkSectionTalkData::DataType' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkTalkSectionTalkData, DataTable) == 0x000008, "Member 'FRCSeqTalkTalkSectionTalkData::DataTable' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkTalkSectionTalkData, TalkID) == 0x000010, "Member 'FRCSeqTalkTalkSectionTalkData::TalkID' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkTalkSectionTalkData, bStopSequencer) == 0x000018, "Member 'FRCSeqTalkTalkSectionTalkData::bStopSequencer' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkTalkSectionTalkData, bForceAutoPlay) == 0x000019, "Member 'FRCSeqTalkTalkSectionTalkData::bForceAutoPlay' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqTalkTalkTemplate
// 0x0048 (0x0088 - 0x0040)
struct FRCSeqTalkTalkTemplate final : public FRCSeqBaseTemplate
{
public:
	struct FRCSeqTalkTalkSectionTalkData          TalkData;                                          // 0x0040(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FRCSeqTalkTalkSectionJumpData          JumpData;                                          // 0x0060(0x0028)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCSeqTalkTalkTemplate) == 0x000008, "Wrong alignment on FRCSeqTalkTalkTemplate");
static_assert(sizeof(FRCSeqTalkTalkTemplate) == 0x000088, "Wrong size on FRCSeqTalkTalkTemplate");
static_assert(offsetof(FRCSeqTalkTalkTemplate, TalkData) == 0x000040, "Member 'FRCSeqTalkTalkTemplate::TalkData' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkTalkTemplate, JumpData) == 0x000060, "Member 'FRCSeqTalkTalkTemplate::JumpData' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqTalkWaitTalkSectionTalkData
// 0x0008 (0x0008 - 0x0000)
struct FRCSeqTalkWaitTalkSectionTalkData final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSeqTalkWaitTalkSectionTalkData) == 0x000004, "Wrong alignment on FRCSeqTalkWaitTalkSectionTalkData");
static_assert(sizeof(FRCSeqTalkWaitTalkSectionTalkData) == 0x000008, "Wrong size on FRCSeqTalkWaitTalkSectionTalkData");
static_assert(offsetof(FRCSeqTalkWaitTalkSectionTalkData, TalkID) == 0x000000, "Member 'FRCSeqTalkWaitTalkSectionTalkData::TalkID' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqTalkWaitTalkChannel
// 0x0080 (0x0088 - 0x0008)
struct FRCSeqTalkWaitTalkChannel final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   KeyTimes;                                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FRCSeqTalkWaitTalkSectionTalkData> KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSeqTalkWaitTalkChannel) == 0x000008, "Wrong alignment on FRCSeqTalkWaitTalkChannel");
static_assert(sizeof(FRCSeqTalkWaitTalkChannel) == 0x000088, "Wrong size on FRCSeqTalkWaitTalkChannel");
static_assert(offsetof(FRCSeqTalkWaitTalkChannel, KeyTimes) == 0x000008, "Member 'FRCSeqTalkWaitTalkChannel::KeyTimes' has a wrong offset!");
static_assert(offsetof(FRCSeqTalkWaitTalkChannel, KeyValues) == 0x000018, "Member 'FRCSeqTalkWaitTalkChannel::KeyValues' has a wrong offset!");

// ScriptStruct RCSeqEvent.RCSeqTalkWaitTalkTemplate
// 0x0010 (0x0050 - 0x0040)
struct FRCSeqTalkWaitTalkTemplate final : public FRCSeqBaseTemplate
{
public:
	TArray<struct FRCSeqTalkWaitTalkSectionTalkData> KeyTalkDatas;                                      // 0x0040(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRCSeqTalkWaitTalkTemplate) == 0x000008, "Wrong alignment on FRCSeqTalkWaitTalkTemplate");
static_assert(sizeof(FRCSeqTalkWaitTalkTemplate) == 0x000050, "Wrong size on FRCSeqTalkWaitTalkTemplate");
static_assert(offsetof(FRCSeqTalkWaitTalkTemplate, KeyTalkDatas) == 0x000040, "Member 'FRCSeqTalkWaitTalkTemplate::KeyTalkDatas' has a wrong offset!");

}

