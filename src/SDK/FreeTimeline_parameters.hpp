#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FreeTimeline

#include "Basic.hpp"

#include "FreeTimeline_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK::Params
{

// Function FreeTimeline.SSLevelSequenceActor.AddRebindInfo
// 0x0030 (0x0030 - 0x0000)
struct SSLevelSequenceActor_AddRebindInfo final
{
public:
	struct FMovieSceneObjectBindingID             InBindingId;                                       // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InName;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InActorGUID;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSLevelSequenceActor_AddRebindInfo) == 0x000008, "Wrong alignment on SSLevelSequenceActor_AddRebindInfo");
static_assert(sizeof(SSLevelSequenceActor_AddRebindInfo) == 0x000030, "Wrong size on SSLevelSequenceActor_AddRebindInfo");
static_assert(offsetof(SSLevelSequenceActor_AddRebindInfo, InBindingId) == 0x000000, "Member 'SSLevelSequenceActor_AddRebindInfo::InBindingId' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_AddRebindInfo, InName) == 0x000018, "Member 'SSLevelSequenceActor_AddRebindInfo::InName' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_AddRebindInfo, InActorGUID) == 0x000028, "Member 'SSLevelSequenceActor_AddRebindInfo::InActorGUID' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.GetSSSequencePlayer
// 0x0008 (0x0008 - 0x0000)
struct SSLevelSequenceActor_GetSSSequencePlayer final
{
public:
	class USSLevelSequencePlayer*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSLevelSequenceActor_GetSSSequencePlayer) == 0x000008, "Wrong alignment on SSLevelSequenceActor_GetSSSequencePlayer");
static_assert(sizeof(SSLevelSequenceActor_GetSSSequencePlayer) == 0x000008, "Wrong size on SSLevelSequenceActor_GetSSSequencePlayer");
static_assert(offsetof(SSLevelSequenceActor_GetSSSequencePlayer, ReturnValue) == 0x000000, "Member 'SSLevelSequenceActor_GetSSSequencePlayer::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.IsSequencePlayerPlaying
// 0x0001 (0x0001 - 0x0000)
struct SSLevelSequenceActor_IsSequencePlayerPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSLevelSequenceActor_IsSequencePlayerPlaying) == 0x000001, "Wrong alignment on SSLevelSequenceActor_IsSequencePlayerPlaying");
static_assert(sizeof(SSLevelSequenceActor_IsSequencePlayerPlaying) == 0x000001, "Wrong size on SSLevelSequenceActor_IsSequencePlayerPlaying");
static_assert(offsetof(SSLevelSequenceActor_IsSequencePlayerPlaying, ReturnValue) == 0x000000, "Member 'SSLevelSequenceActor_IsSequencePlayerPlaying::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.PlaySequencePlayer
// 0x0008 (0x0008 - 0x0000)
struct SSLevelSequenceActor_PlaySequencePlayer final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSLevelSequenceActor_PlaySequencePlayer) == 0x000004, "Wrong alignment on SSLevelSequenceActor_PlaySequencePlayer");
static_assert(sizeof(SSLevelSequenceActor_PlaySequencePlayer) == 0x000008, "Wrong size on SSLevelSequenceActor_PlaySequencePlayer");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayer, StartFrame) == 0x000000, "Member 'SSLevelSequenceActor_PlaySequencePlayer::StartFrame' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayer, bPauseAtEnd) == 0x000004, "Member 'SSLevelSequenceActor_PlaySequencePlayer::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayer, ReturnValue) == 0x000005, "Member 'SSLevelSequenceActor_PlaySequencePlayer::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.PlaySequencePlayerByInfo
// 0x0010 (0x0010 - 0x0000)
struct SSLevelSequenceActor_PlaySequencePlayerByInfo final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRatio;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSLevelSequenceActor_PlaySequencePlayerByInfo) == 0x000004, "Wrong alignment on SSLevelSequenceActor_PlaySequencePlayerByInfo");
static_assert(sizeof(SSLevelSequenceActor_PlaySequencePlayerByInfo) == 0x000010, "Wrong size on SSLevelSequenceActor_PlaySequencePlayerByInfo");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayerByInfo, Label) == 0x000000, "Member 'SSLevelSequenceActor_PlaySequencePlayerByInfo::Label' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayerByInfo, PlayRatio) == 0x000008, "Member 'SSLevelSequenceActor_PlaySequencePlayerByInfo::PlayRatio' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayerByInfo, ReturnValue) == 0x00000C, "Member 'SSLevelSequenceActor_PlaySequencePlayerByInfo::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.PlaySequencePlayerInLooping
// 0x0010 (0x0010 - 0x0000)
struct SSLevelSequenceActor_PlaySequencePlayerInLooping final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSLevelSequenceActor_PlaySequencePlayerInLooping) == 0x000004, "Wrong alignment on SSLevelSequenceActor_PlaySequencePlayerInLooping");
static_assert(sizeof(SSLevelSequenceActor_PlaySequencePlayerInLooping) == 0x000010, "Wrong size on SSLevelSequenceActor_PlaySequencePlayerInLooping");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayerInLooping, StartFrame) == 0x000000, "Member 'SSLevelSequenceActor_PlaySequencePlayerInLooping::StartFrame' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayerInLooping, bPauseAtEnd) == 0x000004, "Member 'SSLevelSequenceActor_PlaySequencePlayerInLooping::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayerInLooping, NumLoops) == 0x000008, "Member 'SSLevelSequenceActor_PlaySequencePlayerInLooping::NumLoops' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_PlaySequencePlayerInLooping, ReturnValue) == 0x00000C, "Member 'SSLevelSequenceActor_PlaySequencePlayerInLooping::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.SetCancelLevelSequence
// 0x0008 (0x0008 - 0x0000)
struct SSLevelSequenceActor_SetCancelLevelSequence final
{
public:
	class ULevelSequence*                         InCancelLevelSequence;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSLevelSequenceActor_SetCancelLevelSequence) == 0x000008, "Wrong alignment on SSLevelSequenceActor_SetCancelLevelSequence");
static_assert(sizeof(SSLevelSequenceActor_SetCancelLevelSequence) == 0x000008, "Wrong size on SSLevelSequenceActor_SetCancelLevelSequence");
static_assert(offsetof(SSLevelSequenceActor_SetCancelLevelSequence, InCancelLevelSequence) == 0x000000, "Member 'SSLevelSequenceActor_SetCancelLevelSequence::InCancelLevelSequence' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.SetPlayInfo
// 0x0010 (0x0010 - 0x0000)
struct SSLevelSequenceActor_SetPlayInfo final
{
public:
	TArray<struct FKoratSequencePlayInfo>         InPlayInfoList;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSLevelSequenceActor_SetPlayInfo) == 0x000008, "Wrong alignment on SSLevelSequenceActor_SetPlayInfo");
static_assert(sizeof(SSLevelSequenceActor_SetPlayInfo) == 0x000010, "Wrong size on SSLevelSequenceActor_SetPlayInfo");
static_assert(offsetof(SSLevelSequenceActor_SetPlayInfo, InPlayInfoList) == 0x000000, "Member 'SSLevelSequenceActor_SetPlayInfo::InPlayInfoList' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.SetPlayInfoNextLabel
// 0x0010 (0x0010 - 0x0000)
struct SSLevelSequenceActor_SetPlayInfoNextLabel final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewNextLabel;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSLevelSequenceActor_SetPlayInfoNextLabel) == 0x000004, "Wrong alignment on SSLevelSequenceActor_SetPlayInfoNextLabel");
static_assert(sizeof(SSLevelSequenceActor_SetPlayInfoNextLabel) == 0x000010, "Wrong size on SSLevelSequenceActor_SetPlayInfoNextLabel");
static_assert(offsetof(SSLevelSequenceActor_SetPlayInfoNextLabel, Label) == 0x000000, "Member 'SSLevelSequenceActor_SetPlayInfoNextLabel::Label' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_SetPlayInfoNextLabel, NewNextLabel) == 0x000008, "Member 'SSLevelSequenceActor_SetPlayInfoNextLabel::NewNextLabel' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.SetRebind
// 0x0020 (0x0020 - 0x0000)
struct SSLevelSequenceActor_SetRebind final
{
public:
	class FString                                 InNameRegexPattern;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 RebindActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableAnimTrack;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableTransformTrack;                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSLevelSequenceActor_SetRebind) == 0x000008, "Wrong alignment on SSLevelSequenceActor_SetRebind");
static_assert(sizeof(SSLevelSequenceActor_SetRebind) == 0x000020, "Wrong size on SSLevelSequenceActor_SetRebind");
static_assert(offsetof(SSLevelSequenceActor_SetRebind, InNameRegexPattern) == 0x000000, "Member 'SSLevelSequenceActor_SetRebind::InNameRegexPattern' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_SetRebind, RebindActor) == 0x000010, "Member 'SSLevelSequenceActor_SetRebind::RebindActor' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_SetRebind, DisableAnimTrack) == 0x000018, "Member 'SSLevelSequenceActor_SetRebind::DisableAnimTrack' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_SetRebind, DisableTransformTrack) == 0x000019, "Member 'SSLevelSequenceActor_SetRebind::DisableTransformTrack' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_SetRebind, ReturnValue) == 0x00001A, "Member 'SSLevelSequenceActor_SetRebind::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.SetRebindsForGame
// 0x0004 (0x0004 - 0x0000)
struct SSLevelSequenceActor_SetRebindsForGame final
{
public:
	bool                                          bRebindOwnerCharacter;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindCharacterCamera;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindFrontCamera;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindToonDirectionLight;                         // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSLevelSequenceActor_SetRebindsForGame) == 0x000001, "Wrong alignment on SSLevelSequenceActor_SetRebindsForGame");
static_assert(sizeof(SSLevelSequenceActor_SetRebindsForGame) == 0x000004, "Wrong size on SSLevelSequenceActor_SetRebindsForGame");
static_assert(offsetof(SSLevelSequenceActor_SetRebindsForGame, bRebindOwnerCharacter) == 0x000000, "Member 'SSLevelSequenceActor_SetRebindsForGame::bRebindOwnerCharacter' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_SetRebindsForGame, bRebindCharacterCamera) == 0x000001, "Member 'SSLevelSequenceActor_SetRebindsForGame::bRebindCharacterCamera' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_SetRebindsForGame, bRebindFrontCamera) == 0x000002, "Member 'SSLevelSequenceActor_SetRebindsForGame::bRebindFrontCamera' has a wrong offset!");
static_assert(offsetof(SSLevelSequenceActor_SetRebindsForGame, bRebindToonDirectionLight) == 0x000003, "Member 'SSLevelSequenceActor_SetRebindsForGame::bRebindToonDirectionLight' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.SetSequencePlayerAttachParam
// 0x0020 (0x0020 - 0x0000)
struct SSLevelSequenceActor_SetSequencePlayerAttachParam final
{
public:
	struct FKoratAttachParamInfo                  AttachParam;                                       // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSLevelSequenceActor_SetSequencePlayerAttachParam) == 0x000004, "Wrong alignment on SSLevelSequenceActor_SetSequencePlayerAttachParam");
static_assert(sizeof(SSLevelSequenceActor_SetSequencePlayerAttachParam) == 0x000020, "Wrong size on SSLevelSequenceActor_SetSequencePlayerAttachParam");
static_assert(offsetof(SSLevelSequenceActor_SetSequencePlayerAttachParam, AttachParam) == 0x000000, "Member 'SSLevelSequenceActor_SetSequencePlayerAttachParam::AttachParam' has a wrong offset!");

// Function FreeTimeline.SSLevelSequenceActor.StopPlayerAndDestroy
// 0x0001 (0x0001 - 0x0000)
struct SSLevelSequenceActor_StopPlayerAndDestroy final
{
public:
	bool                                          bCancel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSLevelSequenceActor_StopPlayerAndDestroy) == 0x000001, "Wrong alignment on SSLevelSequenceActor_StopPlayerAndDestroy");
static_assert(sizeof(SSLevelSequenceActor_StopPlayerAndDestroy) == 0x000001, "Wrong size on SSLevelSequenceActor_StopPlayerAndDestroy");
static_assert(offsetof(SSLevelSequenceActor_StopPlayerAndDestroy, bCancel) == 0x000000, "Member 'SSLevelSequenceActor_StopPlayerAndDestroy::bCancel' has a wrong offset!");

// Function FreeTimeline.SSLevelSequencePlayer.SetSequencerPlaySeqNextLabel
// 0x0010 (0x0010 - 0x0000)
struct SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewNextLabel;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel) == 0x000004, "Wrong alignment on SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel");
static_assert(sizeof(SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel) == 0x000010, "Wrong size on SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel");
static_assert(offsetof(SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel, Label) == 0x000000, "Member 'SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel::Label' has a wrong offset!");
static_assert(offsetof(SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel, NewNextLabel) == 0x000008, "Member 'SSLevelSequencePlayer_SetSequencerPlaySeqNextLabel::NewNextLabel' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.AddEffect
// 0x0020 (0x0020 - 0x0000)
struct SSEffectManager_AddEffect final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EffectActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeqName;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_AddEffect) == 0x000008, "Wrong alignment on SSEffectManager_AddEffect");
static_assert(sizeof(SSEffectManager_AddEffect) == 0x000020, "Wrong size on SSEffectManager_AddEffect");
static_assert(offsetof(SSEffectManager_AddEffect, World) == 0x000000, "Member 'SSEffectManager_AddEffect::World' has a wrong offset!");
static_assert(offsetof(SSEffectManager_AddEffect, Key) == 0x000008, "Member 'SSEffectManager_AddEffect::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_AddEffect, EffectActor) == 0x000010, "Member 'SSEffectManager_AddEffect::EffectActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_AddEffect, SeqName) == 0x000018, "Member 'SSEffectManager_AddEffect::SeqName' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.AddExternalActor
// 0x0010 (0x0010 - 0x0000)
struct SSEffectManager_AddExternalActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeqName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_AddExternalActor) == 0x000008, "Wrong alignment on SSEffectManager_AddExternalActor");
static_assert(sizeof(SSEffectManager_AddExternalActor) == 0x000010, "Wrong size on SSEffectManager_AddExternalActor");
static_assert(offsetof(SSEffectManager_AddExternalActor, Actor) == 0x000000, "Member 'SSEffectManager_AddExternalActor::Actor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_AddExternalActor, SeqName) == 0x000008, "Member 'SSEffectManager_AddExternalActor::SeqName' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.AddSequencer
// 0x0018 (0x0018 - 0x0000)
struct SSEffectManager_AddSequencer final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSLevelSequenceActor*                  SequencerActor;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_AddSequencer) == 0x000008, "Wrong alignment on SSEffectManager_AddSequencer");
static_assert(sizeof(SSEffectManager_AddSequencer) == 0x000018, "Wrong size on SSEffectManager_AddSequencer");
static_assert(offsetof(SSEffectManager_AddSequencer, World) == 0x000000, "Member 'SSEffectManager_AddSequencer::World' has a wrong offset!");
static_assert(offsetof(SSEffectManager_AddSequencer, Key) == 0x000008, "Member 'SSEffectManager_AddSequencer::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_AddSequencer, SequencerActor) == 0x000010, "Member 'SSEffectManager_AddSequencer::SequencerActor' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.GetEffect
// 0x0018 (0x0018 - 0x0000)
struct SSEffectManager_GetEffect final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_GetEffect) == 0x000008, "Wrong alignment on SSEffectManager_GetEffect");
static_assert(sizeof(SSEffectManager_GetEffect) == 0x000018, "Wrong size on SSEffectManager_GetEffect");
static_assert(offsetof(SSEffectManager_GetEffect, World) == 0x000000, "Member 'SSEffectManager_GetEffect::World' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetEffect, Key) == 0x000008, "Member 'SSEffectManager_GetEffect::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetEffect, ReturnValue) == 0x000010, "Member 'SSEffectManager_GetEffect::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.GetEffects
// 0x0028 (0x0028 - 0x0000)
struct SSEffectManager_GetEffects final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeqActorName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_GetEffects) == 0x000008, "Wrong alignment on SSEffectManager_GetEffects");
static_assert(sizeof(SSEffectManager_GetEffects) == 0x000028, "Wrong size on SSEffectManager_GetEffects");
static_assert(offsetof(SSEffectManager_GetEffects, World) == 0x000000, "Member 'SSEffectManager_GetEffects::World' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetEffects, Key) == 0x000008, "Member 'SSEffectManager_GetEffects::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetEffects, SeqActorName) == 0x000010, "Member 'SSEffectManager_GetEffects::SeqActorName' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetEffects, ReturnValue) == 0x000018, "Member 'SSEffectManager_GetEffects::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.GetExternalActor
// 0x0018 (0x0018 - 0x0000)
struct SSEffectManager_GetExternalActor final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_GetExternalActor) == 0x000008, "Wrong alignment on SSEffectManager_GetExternalActor");
static_assert(sizeof(SSEffectManager_GetExternalActor) == 0x000018, "Wrong size on SSEffectManager_GetExternalActor");
static_assert(offsetof(SSEffectManager_GetExternalActor, World) == 0x000000, "Member 'SSEffectManager_GetExternalActor::World' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetExternalActor, Key) == 0x000008, "Member 'SSEffectManager_GetExternalActor::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetExternalActor, ReturnValue) == 0x000010, "Member 'SSEffectManager_GetExternalActor::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.GetOutlineMaterialInstance
// 0x0010 (0x0010 - 0x0000)
struct SSEffectManager_GetOutlineMaterialInstance final
{
public:
	class AActor*                                 InOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_GetOutlineMaterialInstance) == 0x000008, "Wrong alignment on SSEffectManager_GetOutlineMaterialInstance");
static_assert(sizeof(SSEffectManager_GetOutlineMaterialInstance) == 0x000010, "Wrong size on SSEffectManager_GetOutlineMaterialInstance");
static_assert(offsetof(SSEffectManager_GetOutlineMaterialInstance, InOwner) == 0x000000, "Member 'SSEffectManager_GetOutlineMaterialInstance::InOwner' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetOutlineMaterialInstance, ReturnValue) == 0x000008, "Member 'SSEffectManager_GetOutlineMaterialInstance::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.GetSequencer
// 0x0018 (0x0018 - 0x0000)
struct SSEffectManager_GetSequencer final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSLevelSequenceActor*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_GetSequencer) == 0x000008, "Wrong alignment on SSEffectManager_GetSequencer");
static_assert(sizeof(SSEffectManager_GetSequencer) == 0x000018, "Wrong size on SSEffectManager_GetSequencer");
static_assert(offsetof(SSEffectManager_GetSequencer, World) == 0x000000, "Member 'SSEffectManager_GetSequencer::World' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetSequencer, Key) == 0x000008, "Member 'SSEffectManager_GetSequencer::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_GetSequencer, ReturnValue) == 0x000010, "Member 'SSEffectManager_GetSequencer::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.IsExistExternalActorKey
// 0x000C (0x000C - 0x0000)
struct SSEffectManager_IsExistExternalActorKey final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_IsExistExternalActorKey) == 0x000004, "Wrong alignment on SSEffectManager_IsExistExternalActorKey");
static_assert(sizeof(SSEffectManager_IsExistExternalActorKey) == 0x00000C, "Wrong size on SSEffectManager_IsExistExternalActorKey");
static_assert(offsetof(SSEffectManager_IsExistExternalActorKey, Key) == 0x000000, "Member 'SSEffectManager_IsExistExternalActorKey::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_IsExistExternalActorKey, ReturnValue) == 0x000008, "Member 'SSEffectManager_IsExistExternalActorKey::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.IsExistKey
// 0x000C (0x000C - 0x0000)
struct SSEffectManager_IsExistKey final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_IsExistKey) == 0x000004, "Wrong alignment on SSEffectManager_IsExistKey");
static_assert(sizeof(SSEffectManager_IsExistKey) == 0x00000C, "Wrong size on SSEffectManager_IsExistKey");
static_assert(offsetof(SSEffectManager_IsExistKey, Key) == 0x000000, "Member 'SSEffectManager_IsExistKey::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_IsExistKey, ReturnValue) == 0x000008, "Member 'SSEffectManager_IsExistKey::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.IsExistSequencerKey
// 0x000C (0x000C - 0x0000)
struct SSEffectManager_IsExistSequencerKey final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_IsExistSequencerKey) == 0x000004, "Wrong alignment on SSEffectManager_IsExistSequencerKey");
static_assert(sizeof(SSEffectManager_IsExistSequencerKey) == 0x00000C, "Wrong size on SSEffectManager_IsExistSequencerKey");
static_assert(offsetof(SSEffectManager_IsExistSequencerKey, Key) == 0x000000, "Member 'SSEffectManager_IsExistSequencerKey::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_IsExistSequencerKey, ReturnValue) == 0x000008, "Member 'SSEffectManager_IsExistSequencerKey::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.RemoveEffectAll
// 0x0008 (0x0008 - 0x0000)
struct SSEffectManager_RemoveEffectAll final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_RemoveEffectAll) == 0x000008, "Wrong alignment on SSEffectManager_RemoveEffectAll");
static_assert(sizeof(SSEffectManager_RemoveEffectAll) == 0x000008, "Wrong size on SSEffectManager_RemoveEffectAll");
static_assert(offsetof(SSEffectManager_RemoveEffectAll, WorldContextObject) == 0x000000, "Member 'SSEffectManager_RemoveEffectAll::WorldContextObject' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.RemoveEffectKey
// 0x000C (0x000C - 0x0000)
struct SSEffectManager_RemoveEffectKey final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_RemoveEffectKey) == 0x000004, "Wrong alignment on SSEffectManager_RemoveEffectKey");
static_assert(sizeof(SSEffectManager_RemoveEffectKey) == 0x00000C, "Wrong size on SSEffectManager_RemoveEffectKey");
static_assert(offsetof(SSEffectManager_RemoveEffectKey, Key) == 0x000000, "Member 'SSEffectManager_RemoveEffectKey::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_RemoveEffectKey, ReturnValue) == 0x000008, "Member 'SSEffectManager_RemoveEffectKey::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.RemoveExternalActorAll
// 0x0008 (0x0008 - 0x0000)
struct SSEffectManager_RemoveExternalActorAll final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_RemoveExternalActorAll) == 0x000008, "Wrong alignment on SSEffectManager_RemoveExternalActorAll");
static_assert(sizeof(SSEffectManager_RemoveExternalActorAll) == 0x000008, "Wrong size on SSEffectManager_RemoveExternalActorAll");
static_assert(offsetof(SSEffectManager_RemoveExternalActorAll, WorldContextObject) == 0x000000, "Member 'SSEffectManager_RemoveExternalActorAll::WorldContextObject' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.RemoveExternalActorKey
// 0x000C (0x000C - 0x0000)
struct SSEffectManager_RemoveExternalActorKey final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_RemoveExternalActorKey) == 0x000004, "Wrong alignment on SSEffectManager_RemoveExternalActorKey");
static_assert(sizeof(SSEffectManager_RemoveExternalActorKey) == 0x00000C, "Wrong size on SSEffectManager_RemoveExternalActorKey");
static_assert(offsetof(SSEffectManager_RemoveExternalActorKey, Key) == 0x000000, "Member 'SSEffectManager_RemoveExternalActorKey::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_RemoveExternalActorKey, ReturnValue) == 0x000008, "Member 'SSEffectManager_RemoveExternalActorKey::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.RemoveExternalActorKeyByActor
// 0x0010 (0x0010 - 0x0000)
struct SSEffectManager_RemoveExternalActorKeyByActor final
{
public:
	class AActor*                                 ExtActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_RemoveExternalActorKeyByActor) == 0x000008, "Wrong alignment on SSEffectManager_RemoveExternalActorKeyByActor");
static_assert(sizeof(SSEffectManager_RemoveExternalActorKeyByActor) == 0x000010, "Wrong size on SSEffectManager_RemoveExternalActorKeyByActor");
static_assert(offsetof(SSEffectManager_RemoveExternalActorKeyByActor, ExtActor) == 0x000000, "Member 'SSEffectManager_RemoveExternalActorKeyByActor::ExtActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_RemoveExternalActorKeyByActor, ReturnValue) == 0x000008, "Member 'SSEffectManager_RemoveExternalActorKeyByActor::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.RemoveSequencerAll
// 0x0008 (0x0008 - 0x0000)
struct SSEffectManager_RemoveSequencerAll final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_RemoveSequencerAll) == 0x000008, "Wrong alignment on SSEffectManager_RemoveSequencerAll");
static_assert(sizeof(SSEffectManager_RemoveSequencerAll) == 0x000008, "Wrong size on SSEffectManager_RemoveSequencerAll");
static_assert(offsetof(SSEffectManager_RemoveSequencerAll, WorldContextObject) == 0x000000, "Member 'SSEffectManager_RemoveSequencerAll::WorldContextObject' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.RemoveSequencerKey
// 0x000C (0x000C - 0x0000)
struct SSEffectManager_RemoveSequencerKey final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_RemoveSequencerKey) == 0x000004, "Wrong alignment on SSEffectManager_RemoveSequencerKey");
static_assert(sizeof(SSEffectManager_RemoveSequencerKey) == 0x00000C, "Wrong size on SSEffectManager_RemoveSequencerKey");
static_assert(offsetof(SSEffectManager_RemoveSequencerKey, Key) == 0x000000, "Member 'SSEffectManager_RemoveSequencerKey::Key' has a wrong offset!");
static_assert(offsetof(SSEffectManager_RemoveSequencerKey, ReturnValue) == 0x000008, "Member 'SSEffectManager_RemoveSequencerKey::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SelectCharacterFreeTimeline
// 0x0020 (0x0020 - 0x0000)
struct SSEffectManager_SelectCharacterFreeTimeline final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineType                        TimelineType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CancelSequenceData;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_SelectCharacterFreeTimeline) == 0x000008, "Wrong alignment on SSEffectManager_SelectCharacterFreeTimeline");
static_assert(sizeof(SSEffectManager_SelectCharacterFreeTimeline) == 0x000020, "Wrong size on SSEffectManager_SelectCharacterFreeTimeline");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimeline, OwnerActor) == 0x000000, "Member 'SSEffectManager_SelectCharacterFreeTimeline::OwnerActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimeline, TimelineType) == 0x000008, "Member 'SSEffectManager_SelectCharacterFreeTimeline::TimelineType' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimeline, CancelSequenceData) == 0x000010, "Member 'SSEffectManager_SelectCharacterFreeTimeline::CancelSequenceData' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimeline, ReturnValue) == 0x000018, "Member 'SSEffectManager_SelectCharacterFreeTimeline::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SelectCharacterFreeTimelineAtb
// 0x0020 (0x0020 - 0x0000)
struct SSEffectManager_SelectCharacterFreeTimelineAtb final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineAtbType                     TimelineType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AtbName;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_SelectCharacterFreeTimelineAtb) == 0x000008, "Wrong alignment on SSEffectManager_SelectCharacterFreeTimelineAtb");
static_assert(sizeof(SSEffectManager_SelectCharacterFreeTimelineAtb) == 0x000020, "Wrong size on SSEffectManager_SelectCharacterFreeTimelineAtb");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimelineAtb, OwnerActor) == 0x000000, "Member 'SSEffectManager_SelectCharacterFreeTimelineAtb::OwnerActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimelineAtb, TimelineType) == 0x000008, "Member 'SSEffectManager_SelectCharacterFreeTimelineAtb::TimelineType' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimelineAtb, AtbName) == 0x00000C, "Member 'SSEffectManager_SelectCharacterFreeTimelineAtb::AtbName' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimelineAtb, ReturnValue) == 0x000018, "Member 'SSEffectManager_SelectCharacterFreeTimelineAtb::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SelectCharacterFreeTimelineAtbBrk
// 0x0020 (0x0020 - 0x0000)
struct SSEffectManager_SelectCharacterFreeTimelineAtbBrk final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineAtbBrkType                  TimelineType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AtbName;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_SelectCharacterFreeTimelineAtbBrk) == 0x000008, "Wrong alignment on SSEffectManager_SelectCharacterFreeTimelineAtbBrk");
static_assert(sizeof(SSEffectManager_SelectCharacterFreeTimelineAtbBrk) == 0x000020, "Wrong size on SSEffectManager_SelectCharacterFreeTimelineAtbBrk");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimelineAtbBrk, OwnerActor) == 0x000000, "Member 'SSEffectManager_SelectCharacterFreeTimelineAtbBrk::OwnerActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimelineAtbBrk, TimelineType) == 0x000008, "Member 'SSEffectManager_SelectCharacterFreeTimelineAtbBrk::TimelineType' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimelineAtbBrk, AtbName) == 0x00000C, "Member 'SSEffectManager_SelectCharacterFreeTimelineAtbBrk::AtbName' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SelectCharacterFreeTimelineAtbBrk, ReturnValue) == 0x000018, "Member 'SSEffectManager_SelectCharacterFreeTimelineAtbBrk::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SetCharacterOutline
// 0x0018 (0x0018 - 0x0000)
struct SSEffectManager_SetCharacterOutline final
{
public:
	class AActor*                                 InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InTypeName;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_SetCharacterOutline) == 0x000008, "Wrong alignment on SSEffectManager_SetCharacterOutline");
static_assert(sizeof(SSEffectManager_SetCharacterOutline) == 0x000018, "Wrong size on SSEffectManager_SetCharacterOutline");
static_assert(offsetof(SSEffectManager_SetCharacterOutline, InChara) == 0x000000, "Member 'SSEffectManager_SetCharacterOutline::InChara' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SetCharacterOutline, bEnable) == 0x000008, "Member 'SSEffectManager_SetCharacterOutline::bEnable' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SetCharacterOutline, InTypeName) == 0x00000C, "Member 'SSEffectManager_SetCharacterOutline::InTypeName' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SetCharacterOutlineFill
// 0x0010 (0x0010 - 0x0000)
struct SSEffectManager_SetCharacterOutlineFill final
{
public:
	class AActor*                                 InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_SetCharacterOutlineFill) == 0x000008, "Wrong alignment on SSEffectManager_SetCharacterOutlineFill");
static_assert(sizeof(SSEffectManager_SetCharacterOutlineFill) == 0x000010, "Wrong size on SSEffectManager_SetCharacterOutlineFill");
static_assert(offsetof(SSEffectManager_SetCharacterOutlineFill, InChara) == 0x000000, "Member 'SSEffectManager_SetCharacterOutlineFill::InChara' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SetCharacterOutlineFill, bEnable) == 0x000008, "Member 'SSEffectManager_SetCharacterOutlineFill::bEnable' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SetCharacterStencil
// 0x0010 (0x0010 - 0x0000)
struct SSEffectManager_SetCharacterStencil final
{
public:
	class AActor*                                 InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StencilIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_SetCharacterStencil) == 0x000008, "Wrong alignment on SSEffectManager_SetCharacterStencil");
static_assert(sizeof(SSEffectManager_SetCharacterStencil) == 0x000010, "Wrong size on SSEffectManager_SetCharacterStencil");
static_assert(offsetof(SSEffectManager_SetCharacterStencil, InChara) == 0x000000, "Member 'SSEffectManager_SetCharacterStencil::InChara' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SetCharacterStencil, StencilIndex) == 0x000008, "Member 'SSEffectManager_SetCharacterStencil::StencilIndex' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SetCharacterStencil, bEnable) == 0x00000C, "Member 'SSEffectManager_SetCharacterStencil::bEnable' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SpawnSequenceActor
// 0x00A0 (0x00A0 - 0x0000)
struct SSEffectManager_SpawnSequenceActor final
{
public:
	struct FSequenceActorSpawnParameters          InParameters;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ASSLevelSequenceActor*                  ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_SpawnSequenceActor) == 0x000010, "Wrong alignment on SSEffectManager_SpawnSequenceActor");
static_assert(sizeof(SSEffectManager_SpawnSequenceActor) == 0x0000A0, "Wrong size on SSEffectManager_SpawnSequenceActor");
static_assert(offsetof(SSEffectManager_SpawnSequenceActor, InParameters) == 0x000000, "Member 'SSEffectManager_SpawnSequenceActor::InParameters' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActor, ReturnValue) == 0x000090, "Member 'SSEffectManager_SpawnSequenceActor::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SpawnSequenceActorForFreeTimeline
// 0x0040 (0x0040 - 0x0000)
struct SSEffectManager_SpawnSequenceActorForFreeTimeline final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineType                        TimelineType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratSequencePlayInfo>         PlaySeq;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLooped;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ManagedID;                                         // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindPlayer;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSLevelSequenceActor*                  ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_SpawnSequenceActorForFreeTimeline) == 0x000008, "Wrong alignment on SSEffectManager_SpawnSequenceActorForFreeTimeline");
static_assert(sizeof(SSEffectManager_SpawnSequenceActorForFreeTimeline) == 0x000040, "Wrong size on SSEffectManager_SpawnSequenceActorForFreeTimeline");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimeline, OwnerActor) == 0x000000, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimeline::OwnerActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimeline, TimelineType) == 0x000008, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimeline::TimelineType' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimeline, PlaySeq) == 0x000010, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimeline::PlaySeq' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimeline, bLooped) == 0x000020, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimeline::bLooped' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimeline, bPauseAtEnd) == 0x000021, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimeline::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimeline, ManagedID) == 0x000024, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimeline::ManagedID' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimeline, StartFrame) == 0x00002C, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimeline::StartFrame' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimeline, bRebindPlayer) == 0x000030, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimeline::bRebindPlayer' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimeline, ReturnValue) == 0x000038, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimeline::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SpawnSequenceActorForFreeTimelineAtb
// 0x0040 (0x0040 - 0x0000)
struct SSEffectManager_SpawnSequenceActorForFreeTimelineAtb final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineAtbType                     TimelineType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratSequencePlayInfo>         PlaySeq;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLooped;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ManagedID;                                         // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindPlayer;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSLevelSequenceActor*                  ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb) == 0x000008, "Wrong alignment on SSEffectManager_SpawnSequenceActorForFreeTimelineAtb");
static_assert(sizeof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb) == 0x000040, "Wrong size on SSEffectManager_SpawnSequenceActorForFreeTimelineAtb");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb, OwnerActor) == 0x000000, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtb::OwnerActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb, TimelineType) == 0x000008, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtb::TimelineType' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb, PlaySeq) == 0x000010, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtb::PlaySeq' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb, bLooped) == 0x000020, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtb::bLooped' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb, bPauseAtEnd) == 0x000021, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtb::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb, ManagedID) == 0x000024, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtb::ManagedID' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb, StartFrame) == 0x00002C, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtb::StartFrame' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb, bRebindPlayer) == 0x000030, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtb::bRebindPlayer' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtb, ReturnValue) == 0x000038, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtb::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SpawnSequenceActorForFreeTimelineAtbBrk
// 0x0040 (0x0040 - 0x0000)
struct SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineAtbBrkType                  TimelineType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratSequencePlayInfo>         PlaySeq;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLooped;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ManagedID;                                         // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindPlayer;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSLevelSequenceActor*                  ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk) == 0x000008, "Wrong alignment on SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk");
static_assert(sizeof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk) == 0x000040, "Wrong size on SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk, OwnerActor) == 0x000000, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk::OwnerActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk, TimelineType) == 0x000008, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk::TimelineType' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk, PlaySeq) == 0x000010, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk::PlaySeq' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk, bLooped) == 0x000020, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk::bLooped' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk, bPauseAtEnd) == 0x000021, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk, ManagedID) == 0x000024, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk::ManagedID' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk, StartFrame) == 0x00002C, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk::StartFrame' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk, bRebindPlayer) == 0x000030, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk::bRebindPlayer' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk, ReturnValue) == 0x000038, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineAtbBrk::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SpawnSequenceActorForFreeTimelineDirect
// 0x0060 (0x0060 - 0x0000)
struct SSEffectManager_SpawnSequenceActorForFreeTimelineDirect final
{
public:
	class AActor*                                 BaseActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ManagedID;                                         // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindPlayer;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSLevelSequenceActor*                  ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_SpawnSequenceActorForFreeTimelineDirect) == 0x000010, "Wrong alignment on SSEffectManager_SpawnSequenceActorForFreeTimelineDirect");
static_assert(sizeof(SSEffectManager_SpawnSequenceActorForFreeTimelineDirect) == 0x000060, "Wrong size on SSEffectManager_SpawnSequenceActorForFreeTimelineDirect");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineDirect, BaseActor) == 0x000000, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineDirect::BaseActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineDirect, LevelSequence) == 0x000008, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineDirect::LevelSequence' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineDirect, Transform) == 0x000010, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineDirect::Transform' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineDirect, ManagedID) == 0x000040, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineDirect::ManagedID' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineDirect, bRebindPlayer) == 0x000048, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineDirect::bRebindPlayer' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorForFreeTimelineDirect, ReturnValue) == 0x000050, "Member 'SSEffectManager_SpawnSequenceActorForFreeTimelineDirect::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SpawnSequenceActorSyncFreeTimeline
// 0x0090 (0x0090 - 0x0000)
struct SSEffectManager_SpawnSequenceActorSyncFreeTimeline final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratSequencePlayInfo>         PlaySeq;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideTransform;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OverrideTransform;                                 // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ManagedID;                                         // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindPlayer;                                     // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayExec;                                         // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CancelSequence;                                    // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDataKey;                                     // 0x0078(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSLevelSequenceActor*                  ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline) == 0x000010, "Wrong alignment on SSEffectManager_SpawnSequenceActorSyncFreeTimeline");
static_assert(sizeof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline) == 0x000090, "Wrong size on SSEffectManager_SpawnSequenceActorSyncFreeTimeline");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, OwnerActor) == 0x000000, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::OwnerActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, LevelSequence) == 0x000008, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::LevelSequence' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, PlaySeq) == 0x000010, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::PlaySeq' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, bOverrideTransform) == 0x000020, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::bOverrideTransform' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, OverrideTransform) == 0x000030, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::OverrideTransform' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, ManagedID) == 0x000060, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::ManagedID' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, bRebindPlayer) == 0x000068, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::bRebindPlayer' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, bPlayExec) == 0x000069, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::bPlayExec' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, CancelSequence) == 0x000070, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::CancelSequence' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, ActionDataKey) == 0x000078, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::ActionDataKey' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncFreeTimeline, ReturnValue) == 0x000080, "Member 'SSEffectManager_SpawnSequenceActorSyncFreeTimeline::ReturnValue' has a wrong offset!");

// Function FreeTimeline.SSEffectManager.SpawnSequenceActorSyncMontage
// 0x0050 (0x0050 - 0x0000)
struct SSEffectManager_SpawnSequenceActorSyncMontage final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratSequencePlayInfo>         PlaySeq;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLooped;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ManagedID;                                         // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindPlayer;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayExec;                                         // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CancelSequence;                                    // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDataKey;                                     // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSLevelSequenceActor*                  ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SSEffectManager_SpawnSequenceActorSyncMontage) == 0x000008, "Wrong alignment on SSEffectManager_SpawnSequenceActorSyncMontage");
static_assert(sizeof(SSEffectManager_SpawnSequenceActorSyncMontage) == 0x000050, "Wrong size on SSEffectManager_SpawnSequenceActorSyncMontage");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, OwnerActor) == 0x000000, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::OwnerActor' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, LevelSequence) == 0x000008, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::LevelSequence' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, PlaySeq) == 0x000010, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::PlaySeq' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, bLooped) == 0x000020, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::bLooped' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, bPauseAtEnd) == 0x000021, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, ManagedID) == 0x000024, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::ManagedID' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, StartFrame) == 0x00002C, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::StartFrame' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, bRebindPlayer) == 0x000030, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::bRebindPlayer' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, bPlayExec) == 0x000031, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::bPlayExec' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, CancelSequence) == 0x000038, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::CancelSequence' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, ActionDataKey) == 0x000040, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::ActionDataKey' has a wrong offset!");
static_assert(offsetof(SSEffectManager_SpawnSequenceActorSyncMontage, ReturnValue) == 0x000048, "Member 'SSEffectManager_SpawnSequenceActorSyncMontage::ReturnValue' has a wrong offset!");

}

