#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RC

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "RC_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RC.RCUiWidget.PlayWidgetAnimation
// 0x0030 (0x0030 - 0x0000)
struct RCUiWidget_PlayWidgetAnimation final
{
public:
	class UWidgetAnimation*                       InOneShotAnimation;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       InLoopAnimation;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidgetAnimation*>               InOneShotAnimationArray;                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UWidgetAnimation*>               InLoopAnimationArray;                              // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiWidget_PlayWidgetAnimation) == 0x000008, "Wrong alignment on RCUiWidget_PlayWidgetAnimation");
static_assert(sizeof(RCUiWidget_PlayWidgetAnimation) == 0x000030, "Wrong size on RCUiWidget_PlayWidgetAnimation");
static_assert(offsetof(RCUiWidget_PlayWidgetAnimation, InOneShotAnimation) == 0x000000, "Member 'RCUiWidget_PlayWidgetAnimation::InOneShotAnimation' has a wrong offset!");
static_assert(offsetof(RCUiWidget_PlayWidgetAnimation, InLoopAnimation) == 0x000008, "Member 'RCUiWidget_PlayWidgetAnimation::InLoopAnimation' has a wrong offset!");
static_assert(offsetof(RCUiWidget_PlayWidgetAnimation, InOneShotAnimationArray) == 0x000010, "Member 'RCUiWidget_PlayWidgetAnimation::InOneShotAnimationArray' has a wrong offset!");
static_assert(offsetof(RCUiWidget_PlayWidgetAnimation, InLoopAnimationArray) == 0x000020, "Member 'RCUiWidget_PlayWidgetAnimation::InLoopAnimationArray' has a wrong offset!");

// Function RC.RCUiWidgetBase.IsWidgetPause
// 0x0001 (0x0001 - 0x0000)
struct RCUiWidgetBase_IsWidgetPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiWidgetBase_IsWidgetPause) == 0x000001, "Wrong alignment on RCUiWidgetBase_IsWidgetPause");
static_assert(sizeof(RCUiWidgetBase_IsWidgetPause) == 0x000001, "Wrong size on RCUiWidgetBase_IsWidgetPause");
static_assert(offsetof(RCUiWidgetBase_IsWidgetPause, ReturnValue) == 0x000000, "Member 'RCUiWidgetBase_IsWidgetPause::ReturnValue' has a wrong offset!");

// Function RC.RCUiWidgetBase.LoadCheck
// 0x0001 (0x0001 - 0x0000)
struct RCUiWidgetBase_LoadCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiWidgetBase_LoadCheck) == 0x000001, "Wrong alignment on RCUiWidgetBase_LoadCheck");
static_assert(sizeof(RCUiWidgetBase_LoadCheck) == 0x000001, "Wrong size on RCUiWidgetBase_LoadCheck");
static_assert(offsetof(RCUiWidgetBase_LoadCheck, ReturnValue) == 0x000000, "Member 'RCUiWidgetBase_LoadCheck::ReturnValue' has a wrong offset!");

// Function RC.RCUiWidgetBase.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct RCUiWidgetBase_SetPosition final
{
public:
	struct FVector2D                              In2DPosition;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiWidgetBase_SetPosition) == 0x000004, "Wrong alignment on RCUiWidgetBase_SetPosition");
static_assert(sizeof(RCUiWidgetBase_SetPosition) == 0x000008, "Wrong size on RCUiWidgetBase_SetPosition");
static_assert(offsetof(RCUiWidgetBase_SetPosition, In2DPosition) == 0x000000, "Member 'RCUiWidgetBase_SetPosition::In2DPosition' has a wrong offset!");

// Function RC.RCNzUiFinalePGLayoutWidget.GetPGLayoutLocationAndSize
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinalePGLayoutWidget_GetPGLayoutLocationAndSize final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePGLayoutWidget_GetPGLayoutLocationAndSize) == 0x000004, "Wrong alignment on RCNzUiFinalePGLayoutWidget_GetPGLayoutLocationAndSize");
static_assert(sizeof(RCNzUiFinalePGLayoutWidget_GetPGLayoutLocationAndSize) == 0x000010, "Wrong size on RCNzUiFinalePGLayoutWidget_GetPGLayoutLocationAndSize");
static_assert(offsetof(RCNzUiFinalePGLayoutWidget_GetPGLayoutLocationAndSize, Location) == 0x000000, "Member 'RCNzUiFinalePGLayoutWidget_GetPGLayoutLocationAndSize::Location' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePGLayoutWidget_GetPGLayoutLocationAndSize, Size) == 0x000008, "Member 'RCNzUiFinalePGLayoutWidget_GetPGLayoutLocationAndSize::Size' has a wrong offset!");

// Function RC.RCNzUiFinalePGLayoutWidget.InitializeButtonGuide
// 0x0003 (0x0003 - 0x0000)
struct RCNzUiFinalePGLayoutWidget_InitializeButtonGuide final
{
public:
	ERCInputKeyType                               keyL;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputKeyType                               keyR;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePGLayoutWidget_InitializeButtonGuide) == 0x000001, "Wrong alignment on RCNzUiFinalePGLayoutWidget_InitializeButtonGuide");
static_assert(sizeof(RCNzUiFinalePGLayoutWidget_InitializeButtonGuide) == 0x000003, "Wrong size on RCNzUiFinalePGLayoutWidget_InitializeButtonGuide");
static_assert(offsetof(RCNzUiFinalePGLayoutWidget_InitializeButtonGuide, keyL) == 0x000000, "Member 'RCNzUiFinalePGLayoutWidget_InitializeButtonGuide::keyL' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePGLayoutWidget_InitializeButtonGuide, keyR) == 0x000001, "Member 'RCNzUiFinalePGLayoutWidget_InitializeButtonGuide::keyR' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePGLayoutWidget_InitializeButtonGuide, ReturnValue) == 0x000002, "Member 'RCNzUiFinalePGLayoutWidget_InitializeButtonGuide::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePGLayoutWidget.InitializePGLayoutWidget
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinalePGLayoutWidget_InitializePGLayoutWidget final
{
public:
	TArray<EPageGuideType>                        PageList;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePGLayoutWidget_InitializePGLayoutWidget) == 0x000008, "Wrong alignment on RCNzUiFinalePGLayoutWidget_InitializePGLayoutWidget");
static_assert(sizeof(RCNzUiFinalePGLayoutWidget_InitializePGLayoutWidget) == 0x000010, "Wrong size on RCNzUiFinalePGLayoutWidget_InitializePGLayoutWidget");
static_assert(offsetof(RCNzUiFinalePGLayoutWidget_InitializePGLayoutWidget, PageList) == 0x000000, "Member 'RCNzUiFinalePGLayoutWidget_InitializePGLayoutWidget::PageList' has a wrong offset!");

// Function RC.RCNzUiFinalePGLayoutWidget.MovePage
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinalePGLayoutWidget_MovePage final
{
public:
	int32                                         targetIdx;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePGLayoutWidget_MovePage) == 0x000004, "Wrong alignment on RCNzUiFinalePGLayoutWidget_MovePage");
static_assert(sizeof(RCNzUiFinalePGLayoutWidget_MovePage) == 0x000004, "Wrong size on RCNzUiFinalePGLayoutWidget_MovePage");
static_assert(offsetof(RCNzUiFinalePGLayoutWidget_MovePage, targetIdx) == 0x000000, "Member 'RCNzUiFinalePGLayoutWidget_MovePage::targetIdx' has a wrong offset!");

// Function RC.RCNzUiFinalePGLayoutWidget.OnButtonGuideClick
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePGLayoutWidget_OnButtonGuideClick final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePGLayoutWidget_OnButtonGuideClick) == 0x000001, "Wrong alignment on RCNzUiFinalePGLayoutWidget_OnButtonGuideClick");
static_assert(sizeof(RCNzUiFinalePGLayoutWidget_OnButtonGuideClick) == 0x000001, "Wrong size on RCNzUiFinalePGLayoutWidget_OnButtonGuideClick");
static_assert(offsetof(RCNzUiFinalePGLayoutWidget_OnButtonGuideClick, KeyType) == 0x000000, "Member 'RCNzUiFinalePGLayoutWidget_OnButtonGuideClick::KeyType' has a wrong offset!");

// Function RC.RCNzUiFinalePGLayoutWidget.UpdatePageGuide
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinalePGLayoutWidget_UpdatePageGuide final
{
public:
	TArray<EPageGuideType>                        PageList;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePGLayoutWidget_UpdatePageGuide) == 0x000008, "Wrong alignment on RCNzUiFinalePGLayoutWidget_UpdatePageGuide");
static_assert(sizeof(RCNzUiFinalePGLayoutWidget_UpdatePageGuide) == 0x000010, "Wrong size on RCNzUiFinalePGLayoutWidget_UpdatePageGuide");
static_assert(offsetof(RCNzUiFinalePGLayoutWidget_UpdatePageGuide, PageList) == 0x000000, "Member 'RCNzUiFinalePGLayoutWidget_UpdatePageGuide::PageList' has a wrong offset!");

// Function RC.RCActor.GetActorName
// 0x0008 (0x0008 - 0x0000)
struct RCActor_GetActorName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActor_GetActorName) == 0x000004, "Wrong alignment on RCActor_GetActorName");
static_assert(sizeof(RCActor_GetActorName) == 0x000008, "Wrong size on RCActor_GetActorName");
static_assert(offsetof(RCActor_GetActorName, ReturnValue) == 0x000000, "Member 'RCActor_GetActorName::ReturnValue' has a wrong offset!");

// Function RC.RCActor.IsPause
// 0x0001 (0x0001 - 0x0000)
struct RCActor_IsPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActor_IsPause) == 0x000001, "Wrong alignment on RCActor_IsPause");
static_assert(sizeof(RCActor_IsPause) == 0x000001, "Wrong size on RCActor_IsPause");
static_assert(offsetof(RCActor_IsPause, ReturnValue) == 0x000000, "Member 'RCActor_IsPause::ReturnValue' has a wrong offset!");

// Function RC.RCActor.IsPauseCancelFlag
// 0x0001 (0x0001 - 0x0000)
struct RCActor_IsPauseCancelFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActor_IsPauseCancelFlag) == 0x000001, "Wrong alignment on RCActor_IsPauseCancelFlag");
static_assert(sizeof(RCActor_IsPauseCancelFlag) == 0x000001, "Wrong size on RCActor_IsPauseCancelFlag");
static_assert(offsetof(RCActor_IsPauseCancelFlag, ReturnValue) == 0x000000, "Member 'RCActor_IsPauseCancelFlag::ReturnValue' has a wrong offset!");

// Function RC.RCActor.IsVisibility
// 0x0001 (0x0001 - 0x0000)
struct RCActor_IsVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActor_IsVisibility) == 0x000001, "Wrong alignment on RCActor_IsVisibility");
static_assert(sizeof(RCActor_IsVisibility) == 0x000001, "Wrong size on RCActor_IsVisibility");
static_assert(offsetof(RCActor_IsVisibility, ReturnValue) == 0x000000, "Member 'RCActor_IsVisibility::ReturnValue' has a wrong offset!");

// Function RC.RCActor.SetPause
// 0x0002 (0x0002 - 0x0000)
struct RCActor_SetPause final
{
public:
	bool                                          bInPause;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActor_SetPause) == 0x000001, "Wrong alignment on RCActor_SetPause");
static_assert(sizeof(RCActor_SetPause) == 0x000002, "Wrong size on RCActor_SetPause");
static_assert(offsetof(RCActor_SetPause, bInPause) == 0x000000, "Member 'RCActor_SetPause::bInPause' has a wrong offset!");
static_assert(offsetof(RCActor_SetPause, bDirect) == 0x000001, "Member 'RCActor_SetPause::bDirect' has a wrong offset!");

// Function RC.RCActor.SetPauseCancelFlag
// 0x0001 (0x0001 - 0x0000)
struct RCActor_SetPauseCancelFlag final
{
public:
	bool                                          bInPauseCancel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActor_SetPauseCancelFlag) == 0x000001, "Wrong alignment on RCActor_SetPauseCancelFlag");
static_assert(sizeof(RCActor_SetPauseCancelFlag) == 0x000001, "Wrong size on RCActor_SetPauseCancelFlag");
static_assert(offsetof(RCActor_SetPauseCancelFlag, bInPauseCancel) == 0x000000, "Member 'RCActor_SetPauseCancelFlag::bInPauseCancel' has a wrong offset!");

// Function RC.RCActor.SetVisibility
// 0x0002 (0x0002 - 0x0000)
struct RCActor_SetVisibility final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActor_SetVisibility) == 0x000001, "Wrong alignment on RCActor_SetVisibility");
static_assert(sizeof(RCActor_SetVisibility) == 0x000002, "Wrong size on RCActor_SetVisibility");
static_assert(offsetof(RCActor_SetVisibility, bInVisible) == 0x000000, "Member 'RCActor_SetVisibility::bInVisible' has a wrong offset!");
static_assert(offsetof(RCActor_SetVisibility, bDirect) == 0x000001, "Member 'RCActor_SetVisibility::bDirect' has a wrong offset!");

// Function RC.RCAutoPlay.AutoPlay
// 0x0028 (0x0028 - 0x0000)
struct RCAutoPlay_AutoPlay final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Dist;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreZ;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAutoPlayCompletionPred                     Completion;                                        // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URCAutoPlay*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAutoPlay_AutoPlay) == 0x000008, "Wrong alignment on RCAutoPlay_AutoPlay");
static_assert(sizeof(RCAutoPlay_AutoPlay) == 0x000028, "Wrong size on RCAutoPlay_AutoPlay");
static_assert(offsetof(RCAutoPlay_AutoPlay, WorldContextObject) == 0x000000, "Member 'RCAutoPlay_AutoPlay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCAutoPlay_AutoPlay, Target) == 0x000008, "Member 'RCAutoPlay_AutoPlay::Target' has a wrong offset!");
static_assert(offsetof(RCAutoPlay_AutoPlay, Dist) == 0x000010, "Member 'RCAutoPlay_AutoPlay::Dist' has a wrong offset!");
static_assert(offsetof(RCAutoPlay_AutoPlay, Duration) == 0x000018, "Member 'RCAutoPlay_AutoPlay::Duration' has a wrong offset!");
static_assert(offsetof(RCAutoPlay_AutoPlay, IgnoreZ) == 0x00001C, "Member 'RCAutoPlay_AutoPlay::IgnoreZ' has a wrong offset!");
static_assert(offsetof(RCAutoPlay_AutoPlay, Completion) == 0x00001D, "Member 'RCAutoPlay_AutoPlay::Completion' has a wrong offset!");
static_assert(offsetof(RCAutoPlay_AutoPlay, ReturnValue) == 0x000020, "Member 'RCAutoPlay_AutoPlay::ReturnValue' has a wrong offset!");

// Function RC.RCAutoPlayActor.AutoPlayActor
// 0x0028 (0x0028 - 0x0000)
struct RCAutoPlayActor_AutoPlayActor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Dist;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreZ;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAutoPlayCompletionPred                     Completion;                                        // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCAutoPlayActor*                       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAutoPlayActor_AutoPlayActor) == 0x000008, "Wrong alignment on RCAutoPlayActor_AutoPlayActor");
static_assert(sizeof(RCAutoPlayActor_AutoPlayActor) == 0x000028, "Wrong size on RCAutoPlayActor_AutoPlayActor");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor, WorldContextObject) == 0x000000, "Member 'RCAutoPlayActor_AutoPlayActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor, Target) == 0x000008, "Member 'RCAutoPlayActor_AutoPlayActor::Target' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor, Dist) == 0x000010, "Member 'RCAutoPlayActor_AutoPlayActor::Dist' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor, Duration) == 0x000018, "Member 'RCAutoPlayActor_AutoPlayActor::Duration' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor, IgnoreZ) == 0x00001C, "Member 'RCAutoPlayActor_AutoPlayActor::IgnoreZ' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor, Completion) == 0x00001D, "Member 'RCAutoPlayActor_AutoPlayActor::Completion' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor, ReturnValue) == 0x000020, "Member 'RCAutoPlayActor_AutoPlayActor::ReturnValue' has a wrong offset!");

// Function RC.RCAutoPlayActor.AutoPlayActor2
// 0x0038 (0x0038 - 0x0000)
struct RCAutoPlayActor_AutoPlayActor2 final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDistPos;                                         // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InDistRot;                                         // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreZ;                                           // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAutoPlayCompletionPred                     Completion;                                        // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCAutoPlayActor*                       ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAutoPlayActor_AutoPlayActor2) == 0x000008, "Wrong alignment on RCAutoPlayActor_AutoPlayActor2");
static_assert(sizeof(RCAutoPlayActor_AutoPlayActor2) == 0x000038, "Wrong size on RCAutoPlayActor_AutoPlayActor2");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor2, WorldContextObject) == 0x000000, "Member 'RCAutoPlayActor_AutoPlayActor2::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor2, Target) == 0x000008, "Member 'RCAutoPlayActor_AutoPlayActor2::Target' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor2, InDistPos) == 0x000010, "Member 'RCAutoPlayActor_AutoPlayActor2::InDistPos' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor2, InDistRot) == 0x00001C, "Member 'RCAutoPlayActor_AutoPlayActor2::InDistRot' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor2, Duration) == 0x000028, "Member 'RCAutoPlayActor_AutoPlayActor2::Duration' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor2, IgnoreZ) == 0x00002C, "Member 'RCAutoPlayActor_AutoPlayActor2::IgnoreZ' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor2, Completion) == 0x00002D, "Member 'RCAutoPlayActor_AutoPlayActor2::Completion' has a wrong offset!");
static_assert(offsetof(RCAutoPlayActor_AutoPlayActor2, ReturnValue) == 0x000030, "Member 'RCAutoPlayActor_AutoPlayActor2::ReturnValue' has a wrong offset!");

// Function RC.RCGrassTransformer.StopUpdateInstance
// 0x0004 (0x0004 - 0x0000)
struct RCGrassTransformer_StopUpdateInstance final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGrassTransformer_StopUpdateInstance) == 0x000004, "Wrong alignment on RCGrassTransformer_StopUpdateInstance");
static_assert(sizeof(RCGrassTransformer_StopUpdateInstance) == 0x000004, "Wrong size on RCGrassTransformer_StopUpdateInstance");
static_assert(offsetof(RCGrassTransformer_StopUpdateInstance, InstanceIndex) == 0x000000, "Member 'RCGrassTransformer_StopUpdateInstance::InstanceIndex' has a wrong offset!");

// Function RC.RCCSVData.SetDataTable
// 0x0008 (0x0008 - 0x0000)
struct RCCSVData_SetDataTable final
{
public:
	class UDataTable*                             pDataTable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCSVData_SetDataTable) == 0x000008, "Wrong alignment on RCCSVData_SetDataTable");
static_assert(sizeof(RCCSVData_SetDataTable) == 0x000008, "Wrong size on RCCSVData_SetDataTable");
static_assert(offsetof(RCCSVData_SetDataTable, pDataTable) == 0x000000, "Member 'RCCSVData_SetDataTable::pDataTable' has a wrong offset!");

// Function RC.RCText3DActorBFL.GetText
// 0x0020 (0x0020 - 0x0000)
struct RCText3DActorBFL_GetText final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActorBFL_GetText) == 0x000008, "Wrong alignment on RCText3DActorBFL_GetText");
static_assert(sizeof(RCText3DActorBFL_GetText) == 0x000020, "Wrong size on RCText3DActorBFL_GetText");
static_assert(offsetof(RCText3DActorBFL_GetText, InActorName) == 0x000000, "Member 'RCText3DActorBFL_GetText::InActorName' has a wrong offset!");
static_assert(offsetof(RCText3DActorBFL_GetText, ReturnValue) == 0x000008, "Member 'RCText3DActorBFL_GetText::ReturnValue' has a wrong offset!");

// Function RC.RCText3DActorBFL.GetText3DActor
// 0x0010 (0x0010 - 0x0000)
struct RCText3DActorBFL_GetText3DActor final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCText3DActor*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActorBFL_GetText3DActor) == 0x000008, "Wrong alignment on RCText3DActorBFL_GetText3DActor");
static_assert(sizeof(RCText3DActorBFL_GetText3DActor) == 0x000010, "Wrong size on RCText3DActorBFL_GetText3DActor");
static_assert(offsetof(RCText3DActorBFL_GetText3DActor, InActorName) == 0x000000, "Member 'RCText3DActorBFL_GetText3DActor::InActorName' has a wrong offset!");
static_assert(offsetof(RCText3DActorBFL_GetText3DActor, ReturnValue) == 0x000008, "Member 'RCText3DActorBFL_GetText3DActor::ReturnValue' has a wrong offset!");

// Function RC.RCText3DActorBFL.GetTextID
// 0x0010 (0x0010 - 0x0000)
struct RCText3DActorBFL_GetTextID final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActorBFL_GetTextID) == 0x000004, "Wrong alignment on RCText3DActorBFL_GetTextID");
static_assert(sizeof(RCText3DActorBFL_GetTextID) == 0x000010, "Wrong size on RCText3DActorBFL_GetTextID");
static_assert(offsetof(RCText3DActorBFL_GetTextID, InActorName) == 0x000000, "Member 'RCText3DActorBFL_GetTextID::InActorName' has a wrong offset!");
static_assert(offsetof(RCText3DActorBFL_GetTextID, ReturnValue) == 0x000008, "Member 'RCText3DActorBFL_GetTextID::ReturnValue' has a wrong offset!");

// Function RC.RCText3DActorBFL.IsVisibility
// 0x000C (0x000C - 0x0000)
struct RCText3DActorBFL_IsVisibility final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCText3DActorBFL_IsVisibility) == 0x000004, "Wrong alignment on RCText3DActorBFL_IsVisibility");
static_assert(sizeof(RCText3DActorBFL_IsVisibility) == 0x00000C, "Wrong size on RCText3DActorBFL_IsVisibility");
static_assert(offsetof(RCText3DActorBFL_IsVisibility, InActorName) == 0x000000, "Member 'RCText3DActorBFL_IsVisibility::InActorName' has a wrong offset!");
static_assert(offsetof(RCText3DActorBFL_IsVisibility, ReturnValue) == 0x000008, "Member 'RCText3DActorBFL_IsVisibility::ReturnValue' has a wrong offset!");

// Function RC.RCText3DActorBFL.SetTextID
// 0x0010 (0x0010 - 0x0000)
struct RCText3DActorBFL_SetTextID final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActorBFL_SetTextID) == 0x000004, "Wrong alignment on RCText3DActorBFL_SetTextID");
static_assert(sizeof(RCText3DActorBFL_SetTextID) == 0x000010, "Wrong size on RCText3DActorBFL_SetTextID");
static_assert(offsetof(RCText3DActorBFL_SetTextID, InActorName) == 0x000000, "Member 'RCText3DActorBFL_SetTextID::InActorName' has a wrong offset!");
static_assert(offsetof(RCText3DActorBFL_SetTextID, InTextID) == 0x000008, "Member 'RCText3DActorBFL_SetTextID::InTextID' has a wrong offset!");

// Function RC.RCText3DActorBFL.SetVisibility
// 0x000C (0x000C - 0x0000)
struct RCText3DActorBFL_SetVisibility final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVisible;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCText3DActorBFL_SetVisibility) == 0x000004, "Wrong alignment on RCText3DActorBFL_SetVisibility");
static_assert(sizeof(RCText3DActorBFL_SetVisibility) == 0x00000C, "Wrong size on RCText3DActorBFL_SetVisibility");
static_assert(offsetof(RCText3DActorBFL_SetVisibility, InActorName) == 0x000000, "Member 'RCText3DActorBFL_SetVisibility::InActorName' has a wrong offset!");
static_assert(offsetof(RCText3DActorBFL_SetVisibility, bInVisible) == 0x000008, "Member 'RCText3DActorBFL_SetVisibility::bInVisible' has a wrong offset!");
static_assert(offsetof(RCText3DActorBFL_SetVisibility, bDirect) == 0x000009, "Member 'RCText3DActorBFL_SetVisibility::bDirect' has a wrong offset!");

// Function RC.RCBackDropActor.AddPoint
// 0x001C (0x001C - 0x0000)
struct RCBackDropActor_AddPoint final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         W;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         H;                                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xbrock;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ybrock;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBackDropActor_AddPoint) == 0x000004, "Wrong alignment on RCBackDropActor_AddPoint");
static_assert(sizeof(RCBackDropActor_AddPoint) == 0x00001C, "Wrong size on RCBackDropActor_AddPoint");
static_assert(offsetof(RCBackDropActor_AddPoint, Pos) == 0x000000, "Member 'RCBackDropActor_AddPoint::Pos' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_AddPoint, W) == 0x00000C, "Member 'RCBackDropActor_AddPoint::W' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_AddPoint, H) == 0x000010, "Member 'RCBackDropActor_AddPoint::H' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_AddPoint, Xbrock) == 0x000014, "Member 'RCBackDropActor_AddPoint::Xbrock' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_AddPoint, Ybrock) == 0x000018, "Member 'RCBackDropActor_AddPoint::Ybrock' has a wrong offset!");

// Function RC.RCBackDropActor.Bake
// 0x0004 (0x0004 - 0x0000)
struct RCBackDropActor_Bake final
{
public:
	int32                                         brockSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBackDropActor_Bake) == 0x000004, "Wrong alignment on RCBackDropActor_Bake");
static_assert(sizeof(RCBackDropActor_Bake) == 0x000004, "Wrong size on RCBackDropActor_Bake");
static_assert(offsetof(RCBackDropActor_Bake, brockSize) == 0x000000, "Member 'RCBackDropActor_Bake::brockSize' has a wrong offset!");

// Function RC.RCBackDropActor.MakeScanMap
// 0x0024 (0x0024 - 0x0000)
struct RCBackDropActor_MakeScanMap final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         startX;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         startY;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         endX;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         endY;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrockSizeX;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrockSizeY;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBackDropActor_MakeScanMap) == 0x000004, "Wrong alignment on RCBackDropActor_MakeScanMap");
static_assert(sizeof(RCBackDropActor_MakeScanMap) == 0x000024, "Wrong size on RCBackDropActor_MakeScanMap");
static_assert(offsetof(RCBackDropActor_MakeScanMap, Pos) == 0x000000, "Member 'RCBackDropActor_MakeScanMap::Pos' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_MakeScanMap, startX) == 0x00000C, "Member 'RCBackDropActor_MakeScanMap::startX' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_MakeScanMap, startY) == 0x000010, "Member 'RCBackDropActor_MakeScanMap::startY' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_MakeScanMap, endX) == 0x000014, "Member 'RCBackDropActor_MakeScanMap::endX' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_MakeScanMap, endY) == 0x000018, "Member 'RCBackDropActor_MakeScanMap::endY' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_MakeScanMap, BrockSizeX) == 0x00001C, "Member 'RCBackDropActor_MakeScanMap::BrockSizeX' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_MakeScanMap, BrockSizeY) == 0x000020, "Member 'RCBackDropActor_MakeScanMap::BrockSizeY' has a wrong offset!");

// Function RC.RCBackDropActor.NeedScap
// 0x0001 (0x0001 - 0x0000)
struct RCBackDropActor_NeedScap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBackDropActor_NeedScap) == 0x000001, "Wrong alignment on RCBackDropActor_NeedScap");
static_assert(sizeof(RCBackDropActor_NeedScap) == 0x000001, "Wrong size on RCBackDropActor_NeedScap");
static_assert(offsetof(RCBackDropActor_NeedScap, ReturnValue) == 0x000000, "Member 'RCBackDropActor_NeedScap::ReturnValue' has a wrong offset!");

// Function RC.RCBackDropActor.RGBA2Hight
// 0x0020 (0x0020 - 0x0000)
struct RCBackDropActor_RGBA2Hight final
{
public:
	struct FVector4                               col;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBackDropActor_RGBA2Hight) == 0x000010, "Wrong alignment on RCBackDropActor_RGBA2Hight");
static_assert(sizeof(RCBackDropActor_RGBA2Hight) == 0x000020, "Wrong size on RCBackDropActor_RGBA2Hight");
static_assert(offsetof(RCBackDropActor_RGBA2Hight, col) == 0x000000, "Member 'RCBackDropActor_RGBA2Hight::col' has a wrong offset!");
static_assert(offsetof(RCBackDropActor_RGBA2Hight, ReturnValue) == 0x000010, "Member 'RCBackDropActor_RGBA2Hight::ReturnValue' has a wrong offset!");

// Function RC.RCCharacter.IsPause
// 0x0001 (0x0001 - 0x0000)
struct RCCharacter_IsPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacter_IsPause) == 0x000001, "Wrong alignment on RCCharacter_IsPause");
static_assert(sizeof(RCCharacter_IsPause) == 0x000001, "Wrong size on RCCharacter_IsPause");
static_assert(offsetof(RCCharacter_IsPause, ReturnValue) == 0x000000, "Member 'RCCharacter_IsPause::ReturnValue' has a wrong offset!");

// Function RC.RCCharacter.IsPauseCancelFlag
// 0x0001 (0x0001 - 0x0000)
struct RCCharacter_IsPauseCancelFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacter_IsPauseCancelFlag) == 0x000001, "Wrong alignment on RCCharacter_IsPauseCancelFlag");
static_assert(sizeof(RCCharacter_IsPauseCancelFlag) == 0x000001, "Wrong size on RCCharacter_IsPauseCancelFlag");
static_assert(offsetof(RCCharacter_IsPauseCancelFlag, ReturnValue) == 0x000000, "Member 'RCCharacter_IsPauseCancelFlag::ReturnValue' has a wrong offset!");

// Function RC.RCCharacter.IsSimulatePhysicsFlag
// 0x0001 (0x0001 - 0x0000)
struct RCCharacter_IsSimulatePhysicsFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacter_IsSimulatePhysicsFlag) == 0x000001, "Wrong alignment on RCCharacter_IsSimulatePhysicsFlag");
static_assert(sizeof(RCCharacter_IsSimulatePhysicsFlag) == 0x000001, "Wrong size on RCCharacter_IsSimulatePhysicsFlag");
static_assert(offsetof(RCCharacter_IsSimulatePhysicsFlag, ReturnValue) == 0x000000, "Member 'RCCharacter_IsSimulatePhysicsFlag::ReturnValue' has a wrong offset!");

// Function RC.RCCharacter.IsVisibility
// 0x0001 (0x0001 - 0x0000)
struct RCCharacter_IsVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacter_IsVisibility) == 0x000001, "Wrong alignment on RCCharacter_IsVisibility");
static_assert(sizeof(RCCharacter_IsVisibility) == 0x000001, "Wrong size on RCCharacter_IsVisibility");
static_assert(offsetof(RCCharacter_IsVisibility, ReturnValue) == 0x000000, "Member 'RCCharacter_IsVisibility::ReturnValue' has a wrong offset!");

// Function RC.RCCharacter.SetPause
// 0x0002 (0x0002 - 0x0000)
struct RCCharacter_SetPause final
{
public:
	bool                                          bPauseFlag;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectFlag;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacter_SetPause) == 0x000001, "Wrong alignment on RCCharacter_SetPause");
static_assert(sizeof(RCCharacter_SetPause) == 0x000002, "Wrong size on RCCharacter_SetPause");
static_assert(offsetof(RCCharacter_SetPause, bPauseFlag) == 0x000000, "Member 'RCCharacter_SetPause::bPauseFlag' has a wrong offset!");
static_assert(offsetof(RCCharacter_SetPause, bDirectFlag) == 0x000001, "Member 'RCCharacter_SetPause::bDirectFlag' has a wrong offset!");

// Function RC.RCCharacter.SetPauseCancelFlag
// 0x0001 (0x0001 - 0x0000)
struct RCCharacter_SetPauseCancelFlag final
{
public:
	bool                                          bInPauseCancel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacter_SetPauseCancelFlag) == 0x000001, "Wrong alignment on RCCharacter_SetPauseCancelFlag");
static_assert(sizeof(RCCharacter_SetPauseCancelFlag) == 0x000001, "Wrong size on RCCharacter_SetPauseCancelFlag");
static_assert(offsetof(RCCharacter_SetPauseCancelFlag, bInPauseCancel) == 0x000000, "Member 'RCCharacter_SetPauseCancelFlag::bInPauseCancel' has a wrong offset!");

// Function RC.RCCharacter.SetSimulatePhysicsFlag
// 0x0002 (0x0002 - 0x0000)
struct RCCharacter_SetSimulatePhysicsFlag final
{
public:
	bool                                          bInSimulatePhysics;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDirect;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacter_SetSimulatePhysicsFlag) == 0x000001, "Wrong alignment on RCCharacter_SetSimulatePhysicsFlag");
static_assert(sizeof(RCCharacter_SetSimulatePhysicsFlag) == 0x000002, "Wrong size on RCCharacter_SetSimulatePhysicsFlag");
static_assert(offsetof(RCCharacter_SetSimulatePhysicsFlag, bInSimulatePhysics) == 0x000000, "Member 'RCCharacter_SetSimulatePhysicsFlag::bInSimulatePhysics' has a wrong offset!");
static_assert(offsetof(RCCharacter_SetSimulatePhysicsFlag, bInDirect) == 0x000001, "Member 'RCCharacter_SetSimulatePhysicsFlag::bInDirect' has a wrong offset!");

// Function RC.RCCharacter.SetVisibility
// 0x0003 (0x0003 - 0x0000)
struct RCCharacter_SetVisibility final
{
public:
	bool                                          bVisibleFlag;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectFlag;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCollision;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacter_SetVisibility) == 0x000001, "Wrong alignment on RCCharacter_SetVisibility");
static_assert(sizeof(RCCharacter_SetVisibility) == 0x000003, "Wrong size on RCCharacter_SetVisibility");
static_assert(offsetof(RCCharacter_SetVisibility, bVisibleFlag) == 0x000000, "Member 'RCCharacter_SetVisibility::bVisibleFlag' has a wrong offset!");
static_assert(offsetof(RCCharacter_SetVisibility, bDirectFlag) == 0x000001, "Member 'RCCharacter_SetVisibility::bDirectFlag' has a wrong offset!");
static_assert(offsetof(RCCharacter_SetVisibility, bIsCollision) == 0x000002, "Member 'RCCharacter_SetVisibility::bIsCollision' has a wrong offset!");

// Function RC.RCCharacterScript.GetActorLocationBalloon
// 0x000C (0x000C - 0x0000)
struct RCCharacterScript_GetActorLocationBalloon final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_GetActorLocationBalloon) == 0x000004, "Wrong alignment on RCCharacterScript_GetActorLocationBalloon");
static_assert(sizeof(RCCharacterScript_GetActorLocationBalloon) == 0x00000C, "Wrong size on RCCharacterScript_GetActorLocationBalloon");
static_assert(offsetof(RCCharacterScript_GetActorLocationBalloon, ReturnValue) == 0x000000, "Member 'RCCharacterScript_GetActorLocationBalloon::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterScript.GetActorLocationFoot
// 0x000C (0x000C - 0x0000)
struct RCCharacterScript_GetActorLocationFoot final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_GetActorLocationFoot) == 0x000004, "Wrong alignment on RCCharacterScript_GetActorLocationFoot");
static_assert(sizeof(RCCharacterScript_GetActorLocationFoot) == 0x00000C, "Wrong size on RCCharacterScript_GetActorLocationFoot");
static_assert(offsetof(RCCharacterScript_GetActorLocationFoot, ReturnValue) == 0x000000, "Member 'RCCharacterScript_GetActorLocationFoot::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterScript.GetDirectionAmount
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterScript_GetDirectionAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_GetDirectionAmount) == 0x000004, "Wrong alignment on RCCharacterScript_GetDirectionAmount");
static_assert(sizeof(RCCharacterScript_GetDirectionAmount) == 0x000004, "Wrong size on RCCharacterScript_GetDirectionAmount");
static_assert(offsetof(RCCharacterScript_GetDirectionAmount, ReturnValue) == 0x000000, "Member 'RCCharacterScript_GetDirectionAmount::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterScript.GetFootIKData
// 0x0064 (0x0064 - 0x0000)
struct RCCharacterScript_GetFootIKData final
{
public:
	struct FRCScriptActorFootIKData               ReturnValue;                                       // 0x0000(0x0064)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_GetFootIKData) == 0x000004, "Wrong alignment on RCCharacterScript_GetFootIKData");
static_assert(sizeof(RCCharacterScript_GetFootIKData) == 0x000064, "Wrong size on RCCharacterScript_GetFootIKData");
static_assert(offsetof(RCCharacterScript_GetFootIKData, ReturnValue) == 0x000000, "Member 'RCCharacterScript_GetFootIKData::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterScript.GetMaxVelocityLengthInFrames
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterScript_GetMaxVelocityLengthInFrames final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_GetMaxVelocityLengthInFrames) == 0x000004, "Wrong alignment on RCCharacterScript_GetMaxVelocityLengthInFrames");
static_assert(sizeof(RCCharacterScript_GetMaxVelocityLengthInFrames) == 0x000004, "Wrong size on RCCharacterScript_GetMaxVelocityLengthInFrames");
static_assert(offsetof(RCCharacterScript_GetMaxVelocityLengthInFrames, ReturnValue) == 0x000000, "Member 'RCCharacterScript_GetMaxVelocityLengthInFrames::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterScript.GetMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterScript_GetMoveSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_GetMoveSpeed) == 0x000004, "Wrong alignment on RCCharacterScript_GetMoveSpeed");
static_assert(sizeof(RCCharacterScript_GetMoveSpeed) == 0x000004, "Wrong size on RCCharacterScript_GetMoveSpeed");
static_assert(offsetof(RCCharacterScript_GetMoveSpeed, ReturnValue) == 0x000000, "Member 'RCCharacterScript_GetMoveSpeed::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterScript.IsMoveEnd
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterScript_IsMoveEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_IsMoveEnd) == 0x000001, "Wrong alignment on RCCharacterScript_IsMoveEnd");
static_assert(sizeof(RCCharacterScript_IsMoveEnd) == 0x000001, "Wrong size on RCCharacterScript_IsMoveEnd");
static_assert(offsetof(RCCharacterScript_IsMoveEnd, ReturnValue) == 0x000000, "Member 'RCCharacterScript_IsMoveEnd::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterScript.RestoreMovePosition
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterScript_RestoreMovePosition final
{
public:
	float                                         SpeedScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_RestoreMovePosition) == 0x000004, "Wrong alignment on RCCharacterScript_RestoreMovePosition");
static_assert(sizeof(RCCharacterScript_RestoreMovePosition) == 0x000004, "Wrong size on RCCharacterScript_RestoreMovePosition");
static_assert(offsetof(RCCharacterScript_RestoreMovePosition, SpeedScale) == 0x000000, "Member 'RCCharacterScript_RestoreMovePosition::SpeedScale' has a wrong offset!");

// Function RC.RCCharacterScript.RestoreRotationYaw
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterScript_RestoreRotationYaw final
{
public:
	float                                         SpeedScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterScript_RestoreRotationYaw) == 0x000004, "Wrong alignment on RCCharacterScript_RestoreRotationYaw");
static_assert(sizeof(RCCharacterScript_RestoreRotationYaw) == 0x000008, "Wrong size on RCCharacterScript_RestoreRotationYaw");
static_assert(offsetof(RCCharacterScript_RestoreRotationYaw, SpeedScale) == 0x000000, "Member 'RCCharacterScript_RestoreRotationYaw::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_RestoreRotationYaw, bDirect) == 0x000004, "Member 'RCCharacterScript_RestoreRotationYaw::bDirect' has a wrong offset!");

// Function RC.RCCharacterScript.SetMovePause
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterScript_SetMovePause final
{
public:
	bool                                          bInMovePause;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_SetMovePause) == 0x000001, "Wrong alignment on RCCharacterScript_SetMovePause");
static_assert(sizeof(RCCharacterScript_SetMovePause) == 0x000001, "Wrong size on RCCharacterScript_SetMovePause");
static_assert(offsetof(RCCharacterScript_SetMovePause, bInMovePause) == 0x000000, "Member 'RCCharacterScript_SetMovePause::bInMovePause' has a wrong offset!");

// Function RC.RCCharacterScript.SetMoveSpeed
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterScript_SetMoveSpeed final
{
public:
	float                                         InWalkSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRunSpeed;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_SetMoveSpeed) == 0x000004, "Wrong alignment on RCCharacterScript_SetMoveSpeed");
static_assert(sizeof(RCCharacterScript_SetMoveSpeed) == 0x000008, "Wrong size on RCCharacterScript_SetMoveSpeed");
static_assert(offsetof(RCCharacterScript_SetMoveSpeed, InWalkSpeed) == 0x000000, "Member 'RCCharacterScript_SetMoveSpeed::InWalkSpeed' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_SetMoveSpeed, InRunSpeed) == 0x000004, "Member 'RCCharacterScript_SetMoveSpeed::InRunSpeed' has a wrong offset!");

// Function RC.RCCharacterScript.SetOrientRotationtoMovementFlag
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterScript_SetOrientRotationtoMovementFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_SetOrientRotationtoMovementFlag) == 0x000001, "Wrong alignment on RCCharacterScript_SetOrientRotationtoMovementFlag");
static_assert(sizeof(RCCharacterScript_SetOrientRotationtoMovementFlag) == 0x000001, "Wrong size on RCCharacterScript_SetOrientRotationtoMovementFlag");
static_assert(offsetof(RCCharacterScript_SetOrientRotationtoMovementFlag, bFlag) == 0x000000, "Member 'RCCharacterScript_SetOrientRotationtoMovementFlag::bFlag' has a wrong offset!");

// Function RC.RCCharacterScript.SetPositionYaw
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterScript_SetPositionYaw final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_SetPositionYaw) == 0x000004, "Wrong alignment on RCCharacterScript_SetPositionYaw");
static_assert(sizeof(RCCharacterScript_SetPositionYaw) == 0x000010, "Wrong size on RCCharacterScript_SetPositionYaw");
static_assert(offsetof(RCCharacterScript_SetPositionYaw, InPosition) == 0x000000, "Member 'RCCharacterScript_SetPositionYaw::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_SetPositionYaw, InYaw) == 0x00000C, "Member 'RCCharacterScript_SetPositionYaw::InYaw' has a wrong offset!");

// Function RC.RCCharacterScript.SetTransformPlayerStartName
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterScript_SetTransformPlayerStartName final
{
public:
	class FName                                   InPlayerStartTagName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_SetTransformPlayerStartName) == 0x000004, "Wrong alignment on RCCharacterScript_SetTransformPlayerStartName");
static_assert(sizeof(RCCharacterScript_SetTransformPlayerStartName) == 0x000018, "Wrong size on RCCharacterScript_SetTransformPlayerStartName");
static_assert(offsetof(RCCharacterScript_SetTransformPlayerStartName, InPlayerStartTagName) == 0x000000, "Member 'RCCharacterScript_SetTransformPlayerStartName::InPlayerStartTagName' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_SetTransformPlayerStartName, InOffsetPos) == 0x000008, "Member 'RCCharacterScript_SetTransformPlayerStartName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_SetTransformPlayerStartName, InOffsetYaw) == 0x000014, "Member 'RCCharacterScript_SetTransformPlayerStartName::InOffsetYaw' has a wrong offset!");

// Function RC.RCCharacterScript.SetTransformTargetPointName
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterScript_SetTransformTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_SetTransformTargetPointName) == 0x000004, "Wrong alignment on RCCharacterScript_SetTransformTargetPointName");
static_assert(sizeof(RCCharacterScript_SetTransformTargetPointName) == 0x000018, "Wrong size on RCCharacterScript_SetTransformTargetPointName");
static_assert(offsetof(RCCharacterScript_SetTransformTargetPointName, InPointName) == 0x000000, "Member 'RCCharacterScript_SetTransformTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_SetTransformTargetPointName, InOffsetPos) == 0x000008, "Member 'RCCharacterScript_SetTransformTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_SetTransformTargetPointName, InOffsetYaw) == 0x000014, "Member 'RCCharacterScript_SetTransformTargetPointName::InOffsetYaw' has a wrong offset!");

// Function RC.RCCharacterScript.StartMoveFromPlayer
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterScript_StartMoveFromPlayer final
{
public:
	float                                         InLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndPlayerYaw;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnSpeedScale;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_StartMoveFromPlayer) == 0x000004, "Wrong alignment on RCCharacterScript_StartMoveFromPlayer");
static_assert(sizeof(RCCharacterScript_StartMoveFromPlayer) == 0x000018, "Wrong size on RCCharacterScript_StartMoveFromPlayer");
static_assert(offsetof(RCCharacterScript_StartMoveFromPlayer, InLength) == 0x000000, "Member 'RCCharacterScript_StartMoveFromPlayer::InLength' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPlayer, InAngle) == 0x000004, "Member 'RCCharacterScript_StartMoveFromPlayer::InAngle' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPlayer, InHeight) == 0x000008, "Member 'RCCharacterScript_StartMoveFromPlayer::InHeight' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPlayer, SpeedScale) == 0x00000C, "Member 'RCCharacterScript_StartMoveFromPlayer::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPlayer, bEndPlayerYaw) == 0x000010, "Member 'RCCharacterScript_StartMoveFromPlayer::bEndPlayerYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPlayer, TurnSpeedScale) == 0x000014, "Member 'RCCharacterScript_StartMoveFromPlayer::TurnSpeedScale' has a wrong offset!");

// Function RC.RCCharacterScript.StartMoveFromPosition
// 0x002C (0x002C - 0x0000)
struct RCCharacterScript_StartMoveFromPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndChangeYawPosition;                              // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnSpeedScale;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_StartMoveFromPosition) == 0x000004, "Wrong alignment on RCCharacterScript_StartMoveFromPosition");
static_assert(sizeof(RCCharacterScript_StartMoveFromPosition) == 0x00002C, "Wrong size on RCCharacterScript_StartMoveFromPosition");
static_assert(offsetof(RCCharacterScript_StartMoveFromPosition, InPosition) == 0x000000, "Member 'RCCharacterScript_StartMoveFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPosition, SpeedScale) == 0x00000C, "Member 'RCCharacterScript_StartMoveFromPosition::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPosition, InOffsetYaw) == 0x000010, "Member 'RCCharacterScript_StartMoveFromPosition::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPosition, bEndChangeYaw) == 0x000014, "Member 'RCCharacterScript_StartMoveFromPosition::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPosition, EndChangeYawPosition) == 0x000018, "Member 'RCCharacterScript_StartMoveFromPosition::EndChangeYawPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPosition, bPlayerCheck) == 0x000024, "Member 'RCCharacterScript_StartMoveFromPosition::bPlayerCheck' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPosition, TurnSpeedScale) == 0x000028, "Member 'RCCharacterScript_StartMoveFromPosition::TurnSpeedScale' has a wrong offset!");

// Function RC.RCCharacterScript.StartMoveFromPositionList
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterScript_StartMoveFromPositionList final
{
public:
	TArray<struct FRCScriptActorMoveInfo>         InMoveInfoList;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartMoveInfoNum;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstWarp;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterScript_StartMoveFromPositionList) == 0x000008, "Wrong alignment on RCCharacterScript_StartMoveFromPositionList");
static_assert(sizeof(RCCharacterScript_StartMoveFromPositionList) == 0x000020, "Wrong size on RCCharacterScript_StartMoveFromPositionList");
static_assert(offsetof(RCCharacterScript_StartMoveFromPositionList, InMoveInfoList) == 0x000000, "Member 'RCCharacterScript_StartMoveFromPositionList::InMoveInfoList' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPositionList, StartMoveInfoNum) == 0x000010, "Member 'RCCharacterScript_StartMoveFromPositionList::StartMoveInfoNum' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPositionList, bEndChangeYaw) == 0x000014, "Member 'RCCharacterScript_StartMoveFromPositionList::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPositionList, InOffsetYaw) == 0x000018, "Member 'RCCharacterScript_StartMoveFromPositionList::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPositionList, bFirstWarp) == 0x00001C, "Member 'RCCharacterScript_StartMoveFromPositionList::bFirstWarp' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPositionList, bLoop) == 0x00001D, "Member 'RCCharacterScript_StartMoveFromPositionList::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromPositionList, bPlayerCheck) == 0x00001E, "Member 'RCCharacterScript_StartMoveFromPositionList::bPlayerCheck' has a wrong offset!");

// Function RC.RCCharacterScript.StartMoveFromSplineName
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterScript_StartMoveFromSplineName final
{
public:
	class FName                                   InSplineName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistanceRange;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstWarp;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterScript_StartMoveFromSplineName) == 0x000004, "Wrong alignment on RCCharacterScript_StartMoveFromSplineName");
static_assert(sizeof(RCCharacterScript_StartMoveFromSplineName) == 0x000018, "Wrong size on RCCharacterScript_StartMoveFromSplineName");
static_assert(offsetof(RCCharacterScript_StartMoveFromSplineName, InSplineName) == 0x000000, "Member 'RCCharacterScript_StartMoveFromSplineName::InSplineName' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromSplineName, StartDistanceRange) == 0x000008, "Member 'RCCharacterScript_StartMoveFromSplineName::StartDistanceRange' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromSplineName, bReverse) == 0x00000C, "Member 'RCCharacterScript_StartMoveFromSplineName::bReverse' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromSplineName, bEndChangeYaw) == 0x00000D, "Member 'RCCharacterScript_StartMoveFromSplineName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromSplineName, InOffsetYaw) == 0x000010, "Member 'RCCharacterScript_StartMoveFromSplineName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromSplineName, bFirstWarp) == 0x000014, "Member 'RCCharacterScript_StartMoveFromSplineName::bFirstWarp' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromSplineName, bLoop) == 0x000015, "Member 'RCCharacterScript_StartMoveFromSplineName::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromSplineName, bPlayerCheck) == 0x000016, "Member 'RCCharacterScript_StartMoveFromSplineName::bPlayerCheck' has a wrong offset!");

// Function RC.RCCharacterScript.StartMoveFromTargetPointName
// 0x002C (0x002C - 0x0000)
struct RCCharacterScript_StartMoveFromTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InChangeYawSpeedScale;                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnSpeedScale;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_StartMoveFromTargetPointName) == 0x000004, "Wrong alignment on RCCharacterScript_StartMoveFromTargetPointName");
static_assert(sizeof(RCCharacterScript_StartMoveFromTargetPointName) == 0x00002C, "Wrong size on RCCharacterScript_StartMoveFromTargetPointName");
static_assert(offsetof(RCCharacterScript_StartMoveFromTargetPointName, InPointName) == 0x000000, "Member 'RCCharacterScript_StartMoveFromTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromTargetPointName, SpeedScale) == 0x000008, "Member 'RCCharacterScript_StartMoveFromTargetPointName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromTargetPointName, InOffsetPos) == 0x00000C, "Member 'RCCharacterScript_StartMoveFromTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromTargetPointName, bEndChangeYaw) == 0x000018, "Member 'RCCharacterScript_StartMoveFromTargetPointName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromTargetPointName, InOffsetYaw) == 0x00001C, "Member 'RCCharacterScript_StartMoveFromTargetPointName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromTargetPointName, InChangeYawSpeedScale) == 0x000020, "Member 'RCCharacterScript_StartMoveFromTargetPointName::InChangeYawSpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromTargetPointName, bPlayerCheck) == 0x000024, "Member 'RCCharacterScript_StartMoveFromTargetPointName::bPlayerCheck' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartMoveFromTargetPointName, TurnSpeedScale) == 0x000028, "Member 'RCCharacterScript_StartMoveFromTargetPointName::TurnSpeedScale' has a wrong offset!");

// Function RC.RCCharacterScript.StartRotationFromCharacter
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterScript_StartRotationFromCharacter final
{
public:
	class FName                                   InTargetCharacterName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterScript_StartRotationFromCharacter) == 0x000004, "Wrong alignment on RCCharacterScript_StartRotationFromCharacter");
static_assert(sizeof(RCCharacterScript_StartRotationFromCharacter) == 0x000020, "Wrong size on RCCharacterScript_StartRotationFromCharacter");
static_assert(offsetof(RCCharacterScript_StartRotationFromCharacter, InTargetCharacterName) == 0x000000, "Member 'RCCharacterScript_StartRotationFromCharacter::InTargetCharacterName' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromCharacter, SpeedScale) == 0x000008, "Member 'RCCharacterScript_StartRotationFromCharacter::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromCharacter, InOffsetPos) == 0x00000C, "Member 'RCCharacterScript_StartRotationFromCharacter::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromCharacter, InOffsetYaw) == 0x000018, "Member 'RCCharacterScript_StartRotationFromCharacter::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromCharacter, bDirect) == 0x00001C, "Member 'RCCharacterScript_StartRotationFromCharacter::bDirect' has a wrong offset!");

// Function RC.RCCharacterScript.StartRotationFromPosition
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterScript_StartRotationFromPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterScript_StartRotationFromPosition) == 0x000004, "Wrong alignment on RCCharacterScript_StartRotationFromPosition");
static_assert(sizeof(RCCharacterScript_StartRotationFromPosition) == 0x000018, "Wrong size on RCCharacterScript_StartRotationFromPosition");
static_assert(offsetof(RCCharacterScript_StartRotationFromPosition, InPosition) == 0x000000, "Member 'RCCharacterScript_StartRotationFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromPosition, SpeedScale) == 0x00000C, "Member 'RCCharacterScript_StartRotationFromPosition::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromPosition, InOffsetYaw) == 0x000010, "Member 'RCCharacterScript_StartRotationFromPosition::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromPosition, bDirect) == 0x000014, "Member 'RCCharacterScript_StartRotationFromPosition::bDirect' has a wrong offset!");

// Function RC.RCCharacterScript.StartRotationFromTargetPointName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterScript_StartRotationFromTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterScript_StartRotationFromTargetPointName) == 0x000004, "Wrong alignment on RCCharacterScript_StartRotationFromTargetPointName");
static_assert(sizeof(RCCharacterScript_StartRotationFromTargetPointName) == 0x000020, "Wrong size on RCCharacterScript_StartRotationFromTargetPointName");
static_assert(offsetof(RCCharacterScript_StartRotationFromTargetPointName, InPointName) == 0x000000, "Member 'RCCharacterScript_StartRotationFromTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromTargetPointName, SpeedScale) == 0x000008, "Member 'RCCharacterScript_StartRotationFromTargetPointName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromTargetPointName, InOffsetPos) == 0x00000C, "Member 'RCCharacterScript_StartRotationFromTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromTargetPointName, InOffsetYaw) == 0x000018, "Member 'RCCharacterScript_StartRotationFromTargetPointName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationFromTargetPointName, bDirect) == 0x00001C, "Member 'RCCharacterScript_StartRotationFromTargetPointName::bDirect' has a wrong offset!");

// Function RC.RCCharacterScript.StartRotationYaw
// 0x000C (0x000C - 0x0000)
struct RCCharacterScript_StartRotationYaw final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterScript_StartRotationYaw) == 0x000004, "Wrong alignment on RCCharacterScript_StartRotationYaw");
static_assert(sizeof(RCCharacterScript_StartRotationYaw) == 0x00000C, "Wrong size on RCCharacterScript_StartRotationYaw");
static_assert(offsetof(RCCharacterScript_StartRotationYaw, Yaw) == 0x000000, "Member 'RCCharacterScript_StartRotationYaw::Yaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationYaw, SpeedScale) == 0x000004, "Member 'RCCharacterScript_StartRotationYaw::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartRotationYaw, bDirect) == 0x000008, "Member 'RCCharacterScript_StartRotationYaw::bDirect' has a wrong offset!");

// Function RC.RCCharacterScript.StartTurn
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterScript_StartTurn final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeedScale;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_StartTurn) == 0x000004, "Wrong alignment on RCCharacterScript_StartTurn");
static_assert(sizeof(RCCharacterScript_StartTurn) == 0x000008, "Wrong size on RCCharacterScript_StartTurn");
static_assert(offsetof(RCCharacterScript_StartTurn, InAngle) == 0x000000, "Member 'RCCharacterScript_StartTurn::InAngle' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurn, InSpeedScale) == 0x000004, "Member 'RCCharacterScript_StartTurn::InSpeedScale' has a wrong offset!");

// Function RC.RCCharacterScript.StartTurnFromCharacter
// 0x001C (0x001C - 0x0000)
struct RCCharacterScript_StartTurnFromCharacter final
{
public:
	class FName                                   InTargetCharacterName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeedScale;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_StartTurnFromCharacter) == 0x000004, "Wrong alignment on RCCharacterScript_StartTurnFromCharacter");
static_assert(sizeof(RCCharacterScript_StartTurnFromCharacter) == 0x00001C, "Wrong size on RCCharacterScript_StartTurnFromCharacter");
static_assert(offsetof(RCCharacterScript_StartTurnFromCharacter, InTargetCharacterName) == 0x000000, "Member 'RCCharacterScript_StartTurnFromCharacter::InTargetCharacterName' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnFromCharacter, InSpeedScale) == 0x000008, "Member 'RCCharacterScript_StartTurnFromCharacter::InSpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnFromCharacter, InOffsetPos) == 0x00000C, "Member 'RCCharacterScript_StartTurnFromCharacter::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnFromCharacter, InOffsetYaw) == 0x000018, "Member 'RCCharacterScript_StartTurnFromCharacter::InOffsetYaw' has a wrong offset!");

// Function RC.RCCharacterScript.StartTurnFromPosition
// 0x0014 (0x0014 - 0x0000)
struct RCCharacterScript_StartTurnFromPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeedScale;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_StartTurnFromPosition) == 0x000004, "Wrong alignment on RCCharacterScript_StartTurnFromPosition");
static_assert(sizeof(RCCharacterScript_StartTurnFromPosition) == 0x000014, "Wrong size on RCCharacterScript_StartTurnFromPosition");
static_assert(offsetof(RCCharacterScript_StartTurnFromPosition, InPosition) == 0x000000, "Member 'RCCharacterScript_StartTurnFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnFromPosition, InSpeedScale) == 0x00000C, "Member 'RCCharacterScript_StartTurnFromPosition::InSpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnFromPosition, InOffsetYaw) == 0x000010, "Member 'RCCharacterScript_StartTurnFromPosition::InOffsetYaw' has a wrong offset!");

// Function RC.RCCharacterScript.StartTurnFromTargetPointName
// 0x001C (0x001C - 0x0000)
struct RCCharacterScript_StartTurnFromTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeedScale;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_StartTurnFromTargetPointName) == 0x000004, "Wrong alignment on RCCharacterScript_StartTurnFromTargetPointName");
static_assert(sizeof(RCCharacterScript_StartTurnFromTargetPointName) == 0x00001C, "Wrong size on RCCharacterScript_StartTurnFromTargetPointName");
static_assert(offsetof(RCCharacterScript_StartTurnFromTargetPointName, InPointName) == 0x000000, "Member 'RCCharacterScript_StartTurnFromTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnFromTargetPointName, InSpeedScale) == 0x000008, "Member 'RCCharacterScript_StartTurnFromTargetPointName::InSpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnFromTargetPointName, InOffsetPos) == 0x00000C, "Member 'RCCharacterScript_StartTurnFromTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnFromTargetPointName, InOffsetYaw) == 0x000018, "Member 'RCCharacterScript_StartTurnFromTargetPointName::InOffsetYaw' has a wrong offset!");

// Function RC.RCCharacterScript.StartTurnWorldDirection
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterScript_StartTurnWorldDirection final
{
public:
	struct FVector                                InTurnDirection;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeedScale;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_StartTurnWorldDirection) == 0x000004, "Wrong alignment on RCCharacterScript_StartTurnWorldDirection");
static_assert(sizeof(RCCharacterScript_StartTurnWorldDirection) == 0x000010, "Wrong size on RCCharacterScript_StartTurnWorldDirection");
static_assert(offsetof(RCCharacterScript_StartTurnWorldDirection, InTurnDirection) == 0x000000, "Member 'RCCharacterScript_StartTurnWorldDirection::InTurnDirection' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnWorldDirection, InSpeedScale) == 0x00000C, "Member 'RCCharacterScript_StartTurnWorldDirection::InSpeedScale' has a wrong offset!");

// Function RC.RCCharacterScript.StartTurnYaw
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterScript_StartTurnYaw final
{
public:
	float                                         InYaw;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeedScale;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_StartTurnYaw) == 0x000004, "Wrong alignment on RCCharacterScript_StartTurnYaw");
static_assert(sizeof(RCCharacterScript_StartTurnYaw) == 0x000008, "Wrong size on RCCharacterScript_StartTurnYaw");
static_assert(offsetof(RCCharacterScript_StartTurnYaw, InYaw) == 0x000000, "Member 'RCCharacterScript_StartTurnYaw::InYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterScript_StartTurnYaw, InSpeedScale) == 0x000004, "Member 'RCCharacterScript_StartTurnYaw::InSpeedScale' has a wrong offset!");

// Function RC.RCCharacterScript.GetRCCharacterMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterScript_GetRCCharacterMovementComponent final
{
public:
	class URCCharacterMovementComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterScript_GetRCCharacterMovementComponent) == 0x000008, "Wrong alignment on RCCharacterScript_GetRCCharacterMovementComponent");
static_assert(sizeof(RCCharacterScript_GetRCCharacterMovementComponent) == 0x000008, "Wrong size on RCCharacterScript_GetRCCharacterMovementComponent");
static_assert(offsetof(RCCharacterScript_GetRCCharacterMovementComponent, ReturnValue) == 0x000000, "Member 'RCCharacterScript_GetRCCharacterMovementComponent::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterRender.ChangeColorOfMaterials
// 0x0024 (0x0024 - 0x0000)
struct RCCharacterRender_ChangeColorOfMaterials final
{
public:
	struct FLinearColor                           InAmbientColor;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InDirectionalColor;                                // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationSec;                                     // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_ChangeColorOfMaterials) == 0x000004, "Wrong alignment on RCCharacterRender_ChangeColorOfMaterials");
static_assert(sizeof(RCCharacterRender_ChangeColorOfMaterials) == 0x000024, "Wrong size on RCCharacterRender_ChangeColorOfMaterials");
static_assert(offsetof(RCCharacterRender_ChangeColorOfMaterials, InAmbientColor) == 0x000000, "Member 'RCCharacterRender_ChangeColorOfMaterials::InAmbientColor' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_ChangeColorOfMaterials, InDirectionalColor) == 0x000010, "Member 'RCCharacterRender_ChangeColorOfMaterials::InDirectionalColor' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_ChangeColorOfMaterials, InDurationSec) == 0x000020, "Member 'RCCharacterRender_ChangeColorOfMaterials::InDurationSec' has a wrong offset!");

// Function RC.RCCharacterRender.ChangeParameterOfEmissiveMaterials
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterRender_ChangeParameterOfEmissiveMaterials final
{
public:
	float                                         InEmissiveIntensityValue;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationSec;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_ChangeParameterOfEmissiveMaterials) == 0x000004, "Wrong alignment on RCCharacterRender_ChangeParameterOfEmissiveMaterials");
static_assert(sizeof(RCCharacterRender_ChangeParameterOfEmissiveMaterials) == 0x000008, "Wrong size on RCCharacterRender_ChangeParameterOfEmissiveMaterials");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfEmissiveMaterials, InEmissiveIntensityValue) == 0x000000, "Member 'RCCharacterRender_ChangeParameterOfEmissiveMaterials::InEmissiveIntensityValue' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfEmissiveMaterials, InDurationSec) == 0x000004, "Member 'RCCharacterRender_ChangeParameterOfEmissiveMaterials::InDurationSec' has a wrong offset!");

// Function RC.RCCharacterRender.ChangeParameterOfRainMaterials
// 0x000C (0x000C - 0x0000)
struct RCCharacterRender_ChangeParameterOfRainMaterials final
{
public:
	float                                         InRainIntensityValue;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWetIntensityValue;                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWetDurationSec;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_ChangeParameterOfRainMaterials) == 0x000004, "Wrong alignment on RCCharacterRender_ChangeParameterOfRainMaterials");
static_assert(sizeof(RCCharacterRender_ChangeParameterOfRainMaterials) == 0x00000C, "Wrong size on RCCharacterRender_ChangeParameterOfRainMaterials");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfRainMaterials, InRainIntensityValue) == 0x000000, "Member 'RCCharacterRender_ChangeParameterOfRainMaterials::InRainIntensityValue' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfRainMaterials, InWetIntensityValue) == 0x000004, "Member 'RCCharacterRender_ChangeParameterOfRainMaterials::InWetIntensityValue' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfRainMaterials, InWetDurationSec) == 0x000008, "Member 'RCCharacterRender_ChangeParameterOfRainMaterials::InWetDurationSec' has a wrong offset!");

// Function RC.RCCharacterRender.ChangeParameterOfRimLightMaterials
// 0x001C (0x001C - 0x0000)
struct RCCharacterRender_ChangeParameterOfRimLightMaterials final
{
public:
	struct FLinearColor                           InOutlineColor;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOutlineCoverageValue;                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOutlineSmoothValue;                              // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRimLightDurationSec;                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_ChangeParameterOfRimLightMaterials) == 0x000004, "Wrong alignment on RCCharacterRender_ChangeParameterOfRimLightMaterials");
static_assert(sizeof(RCCharacterRender_ChangeParameterOfRimLightMaterials) == 0x00001C, "Wrong size on RCCharacterRender_ChangeParameterOfRimLightMaterials");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfRimLightMaterials, InOutlineColor) == 0x000000, "Member 'RCCharacterRender_ChangeParameterOfRimLightMaterials::InOutlineColor' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfRimLightMaterials, InOutlineCoverageValue) == 0x000010, "Member 'RCCharacterRender_ChangeParameterOfRimLightMaterials::InOutlineCoverageValue' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfRimLightMaterials, InOutlineSmoothValue) == 0x000014, "Member 'RCCharacterRender_ChangeParameterOfRimLightMaterials::InOutlineSmoothValue' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfRimLightMaterials, InRimLightDurationSec) == 0x000018, "Member 'RCCharacterRender_ChangeParameterOfRimLightMaterials::InRimLightDurationSec' has a wrong offset!");

// Function RC.RCCharacterRender.ChangeParameterOfTranslucentMaterials
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterRender_ChangeParameterOfTranslucentMaterials final
{
public:
	float                                         InTranslucentIntensityValue;                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationSec;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_ChangeParameterOfTranslucentMaterials) == 0x000004, "Wrong alignment on RCCharacterRender_ChangeParameterOfTranslucentMaterials");
static_assert(sizeof(RCCharacterRender_ChangeParameterOfTranslucentMaterials) == 0x000008, "Wrong size on RCCharacterRender_ChangeParameterOfTranslucentMaterials");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfTranslucentMaterials, InTranslucentIntensityValue) == 0x000000, "Member 'RCCharacterRender_ChangeParameterOfTranslucentMaterials::InTranslucentIntensityValue' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_ChangeParameterOfTranslucentMaterials, InDurationSec) == 0x000004, "Member 'RCCharacterRender_ChangeParameterOfTranslucentMaterials::InDurationSec' has a wrong offset!");

// Function RC.RCCharacterRender.GetFinishChangeRimLight
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterRender_GetFinishChangeRimLight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_GetFinishChangeRimLight) == 0x000001, "Wrong alignment on RCCharacterRender_GetFinishChangeRimLight");
static_assert(sizeof(RCCharacterRender_GetFinishChangeRimLight) == 0x000001, "Wrong size on RCCharacterRender_GetFinishChangeRimLight");
static_assert(offsetof(RCCharacterRender_GetFinishChangeRimLight, ReturnValue) == 0x000000, "Member 'RCCharacterRender_GetFinishChangeRimLight::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterRender.IsCameraFadeEnable
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterRender_IsCameraFadeEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_IsCameraFadeEnable) == 0x000001, "Wrong alignment on RCCharacterRender_IsCameraFadeEnable");
static_assert(sizeof(RCCharacterRender_IsCameraFadeEnable) == 0x000001, "Wrong size on RCCharacterRender_IsCameraFadeEnable");
static_assert(offsetof(RCCharacterRender_IsCameraFadeEnable, ReturnValue) == 0x000000, "Member 'RCCharacterRender_IsCameraFadeEnable::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterRender.IsFadeEnd
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterRender_IsFadeEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_IsFadeEnd) == 0x000001, "Wrong alignment on RCCharacterRender_IsFadeEnd");
static_assert(sizeof(RCCharacterRender_IsFadeEnd) == 0x000001, "Wrong size on RCCharacterRender_IsFadeEnd");
static_assert(offsetof(RCCharacterRender_IsFadeEnd, ReturnValue) == 0x000000, "Member 'RCCharacterRender_IsFadeEnd::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterRender.SetCameraFadeEnable
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterRender_SetCameraFadeEnable final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_SetCameraFadeEnable) == 0x000001, "Wrong alignment on RCCharacterRender_SetCameraFadeEnable");
static_assert(sizeof(RCCharacterRender_SetCameraFadeEnable) == 0x000001, "Wrong size on RCCharacterRender_SetCameraFadeEnable");
static_assert(offsetof(RCCharacterRender_SetCameraFadeEnable, bFlag) == 0x000000, "Member 'RCCharacterRender_SetCameraFadeEnable::bFlag' has a wrong offset!");

// Function RC.RCCharacterRender.SetDither
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterRender_SetDither final
{
public:
	float                                         InDitherAlphaValue;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_SetDither) == 0x000004, "Wrong alignment on RCCharacterRender_SetDither");
static_assert(sizeof(RCCharacterRender_SetDither) == 0x000004, "Wrong size on RCCharacterRender_SetDither");
static_assert(offsetof(RCCharacterRender_SetDither, InDitherAlphaValue) == 0x000000, "Member 'RCCharacterRender_SetDither::InDitherAlphaValue' has a wrong offset!");

// Function RC.RCCharacterRender.SetFakeSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterRender_SetFakeSpeed final
{
public:
	float                                         FakeSpeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_SetFakeSpeed) == 0x000004, "Wrong alignment on RCCharacterRender_SetFakeSpeed");
static_assert(sizeof(RCCharacterRender_SetFakeSpeed) == 0x000004, "Wrong size on RCCharacterRender_SetFakeSpeed");
static_assert(offsetof(RCCharacterRender_SetFakeSpeed, FakeSpeed) == 0x000000, "Member 'RCCharacterRender_SetFakeSpeed::FakeSpeed' has a wrong offset!");

// Function RC.RCCharacterRender.SetupBgCharacterMaterial
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterRender_SetupBgCharacterMaterial final
{
public:
	float                                         InDurationSec;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_SetupBgCharacterMaterial) == 0x000004, "Wrong alignment on RCCharacterRender_SetupBgCharacterMaterial");
static_assert(sizeof(RCCharacterRender_SetupBgCharacterMaterial) == 0x000004, "Wrong size on RCCharacterRender_SetupBgCharacterMaterial");
static_assert(offsetof(RCCharacterRender_SetupBgCharacterMaterial, InDurationSec) == 0x000000, "Member 'RCCharacterRender_SetupBgCharacterMaterial::InDurationSec' has a wrong offset!");

// Function RC.RCCharacterRender.SetUseFakeSpeedFlag
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterRender_SetUseFakeSpeedFlag final
{
public:
	bool                                          bUseFakeSpeed;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_SetUseFakeSpeedFlag) == 0x000001, "Wrong alignment on RCCharacterRender_SetUseFakeSpeedFlag");
static_assert(sizeof(RCCharacterRender_SetUseFakeSpeedFlag) == 0x000001, "Wrong size on RCCharacterRender_SetUseFakeSpeedFlag");
static_assert(offsetof(RCCharacterRender_SetUseFakeSpeedFlag, bUseFakeSpeed) == 0x000000, "Member 'RCCharacterRender_SetUseFakeSpeedFlag::bUseFakeSpeed' has a wrong offset!");

// Function RC.RCCharacterRender.StartFadeIn
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterRender_StartFadeIn final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDirect;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterRender_StartFadeIn) == 0x000004, "Wrong alignment on RCCharacterRender_StartFadeIn");
static_assert(sizeof(RCCharacterRender_StartFadeIn) == 0x000008, "Wrong size on RCCharacterRender_StartFadeIn");
static_assert(offsetof(RCCharacterRender_StartFadeIn, InTime) == 0x000000, "Member 'RCCharacterRender_StartFadeIn::InTime' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_StartFadeIn, InDirect) == 0x000004, "Member 'RCCharacterRender_StartFadeIn::InDirect' has a wrong offset!");

// Function RC.RCCharacterRender.StartFadeOut
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterRender_StartFadeOut final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDirect;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterRender_StartFadeOut) == 0x000004, "Wrong alignment on RCCharacterRender_StartFadeOut");
static_assert(sizeof(RCCharacterRender_StartFadeOut) == 0x000008, "Wrong size on RCCharacterRender_StartFadeOut");
static_assert(offsetof(RCCharacterRender_StartFadeOut, InTime) == 0x000000, "Member 'RCCharacterRender_StartFadeOut::InTime' has a wrong offset!");
static_assert(offsetof(RCCharacterRender_StartFadeOut, InDirect) == 0x000004, "Member 'RCCharacterRender_StartFadeOut::InDirect' has a wrong offset!");

// Function RC.RCCharacterRender.UndoParameterOfRimLightMaterials
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterRender_UndoParameterOfRimLightMaterials final
{
public:
	float                                         InRimLightDurationSec;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterRender_UndoParameterOfRimLightMaterials) == 0x000004, "Wrong alignment on RCCharacterRender_UndoParameterOfRimLightMaterials");
static_assert(sizeof(RCCharacterRender_UndoParameterOfRimLightMaterials) == 0x000004, "Wrong size on RCCharacterRender_UndoParameterOfRimLightMaterials");
static_assert(offsetof(RCCharacterRender_UndoParameterOfRimLightMaterials, InRimLightDurationSec) == 0x000000, "Member 'RCCharacterRender_UndoParameterOfRimLightMaterials::InRimLightDurationSec' has a wrong offset!");

// Function RC.RCOptionCharaShinigami.GetShinigamiFrame
// 0x0004 (0x0004 - 0x0000)
struct RCOptionCharaShinigami_GetShinigamiFrame final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCOptionCharaShinigami_GetShinigamiFrame) == 0x000004, "Wrong alignment on RCOptionCharaShinigami_GetShinigamiFrame");
static_assert(sizeof(RCOptionCharaShinigami_GetShinigamiFrame) == 0x000004, "Wrong size on RCOptionCharaShinigami_GetShinigamiFrame");
static_assert(offsetof(RCOptionCharaShinigami_GetShinigamiFrame, ReturnValue) == 0x000000, "Member 'RCOptionCharaShinigami_GetShinigamiFrame::ReturnValue' has a wrong offset!");

// Function RC.RCOptionCharaShinigami.GetShinigamiSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCOptionCharaShinigami_GetShinigamiSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCOptionCharaShinigami_GetShinigamiSpeed) == 0x000004, "Wrong alignment on RCOptionCharaShinigami_GetShinigamiSpeed");
static_assert(sizeof(RCOptionCharaShinigami_GetShinigamiSpeed) == 0x000004, "Wrong size on RCOptionCharaShinigami_GetShinigamiSpeed");
static_assert(offsetof(RCOptionCharaShinigami_GetShinigamiSpeed, ReturnValue) == 0x000000, "Member 'RCOptionCharaShinigami_GetShinigamiSpeed::ReturnValue' has a wrong offset!");

// Function RC.RCOptionCharaShinigami.GetShinigamiStat
// 0x0004 (0x0004 - 0x0000)
struct RCOptionCharaShinigami_GetShinigamiStat final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCOptionCharaShinigami_GetShinigamiStat) == 0x000004, "Wrong alignment on RCOptionCharaShinigami_GetShinigamiStat");
static_assert(sizeof(RCOptionCharaShinigami_GetShinigamiStat) == 0x000004, "Wrong size on RCOptionCharaShinigami_GetShinigamiStat");
static_assert(offsetof(RCOptionCharaShinigami_GetShinigamiStat, ReturnValue) == 0x000000, "Member 'RCOptionCharaShinigami_GetShinigamiStat::ReturnValue' has a wrong offset!");

// Function RC.RCOptionCharaShinigami.GetShinigamiTilt
// 0x0004 (0x0004 - 0x0000)
struct RCOptionCharaShinigami_GetShinigamiTilt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCOptionCharaShinigami_GetShinigamiTilt) == 0x000004, "Wrong alignment on RCOptionCharaShinigami_GetShinigamiTilt");
static_assert(sizeof(RCOptionCharaShinigami_GetShinigamiTilt) == 0x000004, "Wrong size on RCOptionCharaShinigami_GetShinigamiTilt");
static_assert(offsetof(RCOptionCharaShinigami_GetShinigamiTilt, ReturnValue) == 0x000000, "Member 'RCOptionCharaShinigami_GetShinigamiTilt::ReturnValue' has a wrong offset!");

// Function RC.RCOptionCharaShinigami.IsUseAI
// 0x0001 (0x0001 - 0x0000)
struct RCOptionCharaShinigami_IsUseAI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCOptionCharaShinigami_IsUseAI) == 0x000001, "Wrong alignment on RCOptionCharaShinigami_IsUseAI");
static_assert(sizeof(RCOptionCharaShinigami_IsUseAI) == 0x000001, "Wrong size on RCOptionCharaShinigami_IsUseAI");
static_assert(offsetof(RCOptionCharaShinigami_IsUseAI, ReturnValue) == 0x000000, "Member 'RCOptionCharaShinigami_IsUseAI::ReturnValue' has a wrong offset!");

// Function RC.RCOptionCharaShinigami.SetUseAI
// 0x0001 (0x0001 - 0x0000)
struct RCOptionCharaShinigami_SetUseAI final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCOptionCharaShinigami_SetUseAI) == 0x000001, "Wrong alignment on RCOptionCharaShinigami_SetUseAI");
static_assert(sizeof(RCOptionCharaShinigami_SetUseAI) == 0x000001, "Wrong size on RCOptionCharaShinigami_SetUseAI");
static_assert(offsetof(RCOptionCharaShinigami_SetUseAI, bFlag) == 0x000000, "Member 'RCOptionCharaShinigami_SetUseAI::bFlag' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.CallChangeSelectPieceDelegate
// 0x0060 (0x0060 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_CallChangeSelectPieceDelegate final
{
public:
	struct FRCNzFinalePieceObjectInfo             Info;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          isUnlock;                                          // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_CallChangeSelectPieceDelegate) == 0x000008, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_CallChangeSelectPieceDelegate");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_CallChangeSelectPieceDelegate) == 0x000060, "Wrong size on RCNzUiFinalePieceLayoutWidget_CallChangeSelectPieceDelegate");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_CallChangeSelectPieceDelegate, Info) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_CallChangeSelectPieceDelegate::Info' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_CallChangeSelectPieceDelegate, isUnlock) == 0x000058, "Member 'RCNzUiFinalePieceLayoutWidget_CallChangeSelectPieceDelegate::isUnlock' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetCurrentSelectedInfo
// 0x0058 (0x0058 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedInfo final
{
public:
	struct FRCNzFinalePieceObjectInfo             ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedInfo) == 0x000008, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedInfo");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedInfo) == 0x000058, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedInfo");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedInfo, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedInfo::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetCurrentSelectedPieceIdx
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedPieceIdx final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedPieceIdx) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedPieceIdx");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedPieceIdx) == 0x000004, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedPieceIdx");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedPieceIdx, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetCurrentSelectedPieceIdx::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetIsHoverdPieceList
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetIsHoverdPieceList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetIsHoverdPieceList) == 0x000001, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetIsHoverdPieceList");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetIsHoverdPieceList) == 0x000001, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetIsHoverdPieceList");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetIsHoverdPieceList, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetIsHoverdPieceList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetOneLinePieceItemNum
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetOneLinePieceItemNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetOneLinePieceItemNum) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetOneLinePieceItemNum");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetOneLinePieceItemNum) == 0x000004, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetOneLinePieceItemNum");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetOneLinePieceItemNum, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetOneLinePieceItemNum::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetPieceListItemLArray
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetPieceListItemLArray final
{
public:
	TArray<class URCNzUiFinalePieceList_PieceBase*> ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetPieceListItemLArray) == 0x000008, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetPieceListItemLArray");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetPieceListItemLArray) == 0x000010, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetPieceListItemLArray");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceListItemLArray, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceListItemLArray::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetPieceListLAngle
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetPieceListLAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetPieceListLAngle) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetPieceListLAngle");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetPieceListLAngle) == 0x000004, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetPieceListLAngle");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceListLAngle, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceListLAngle::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetPieceListLParentSize
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetPieceListLParentSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetPieceListLParentSize) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetPieceListLParentSize");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetPieceListLParentSize) == 0x000008, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetPieceListLParentSize");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceListLParentSize, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceListLParentSize::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetPieceListLScale
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetPieceListLScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetPieceListLScale) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetPieceListLScale");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetPieceListLScale) == 0x000008, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetPieceListLScale");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceListLScale, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceListLScale::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetPieceSListParentLocAndSize
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetPieceSListParentLocAndSize final
{
public:
	struct FVector2D                              Loc;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetPieceSListParentLocAndSize) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetPieceSListParentLocAndSize");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetPieceSListParentLocAndSize) == 0x000010, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetPieceSListParentLocAndSize");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceSListParentLocAndSize, Loc) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceSListParentLocAndSize::Loc' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceSListParentLocAndSize, Size) == 0x000008, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceSListParentLocAndSize::Size' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetPieceSLocAndSize
// 0x0014 (0x0014 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Loc;                                               // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize) == 0x000014, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize, idx) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize::idx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize, Loc) == 0x000004, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize::Loc' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize, Size) == 0x00000C, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceSLocAndSize::Size' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetPlayUnlockAnimPieceLList
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetPlayUnlockAnimPieceLList final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetPlayUnlockAnimPieceLList) == 0x000008, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetPlayUnlockAnimPieceLList");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetPlayUnlockAnimPieceLList) == 0x000018, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetPlayUnlockAnimPieceLList");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPlayUnlockAnimPieceLList, Result) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetPlayUnlockAnimPieceLList::Result' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPlayUnlockAnimPieceLList, ReturnValue) == 0x000008, "Member 'RCNzUiFinalePieceLayoutWidget_GetPlayUnlockAnimPieceLList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetRockNumTexture
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetRockNumTexture final
{
public:
	int32                                         RockNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSmall;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetRockNumTexture) == 0x000008, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetRockNumTexture");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetRockNumTexture) == 0x000010, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetRockNumTexture");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetRockNumTexture, RockNum) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetRockNumTexture::RockNum' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetRockNumTexture, isSmall) == 0x000004, "Member 'RCNzUiFinalePieceLayoutWidget_GetRockNumTexture::isSmall' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetRockNumTexture, ReturnValue) == 0x000008, "Member 'RCNzUiFinalePieceLayoutWidget_GetRockNumTexture::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.IsDetailPieceListMode
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_IsDetailPieceListMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_IsDetailPieceListMode) == 0x000001, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_IsDetailPieceListMode");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_IsDetailPieceListMode) == 0x000001, "Wrong size on RCNzUiFinalePieceLayoutWidget_IsDetailPieceListMode");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_IsDetailPieceListMode, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_IsDetailPieceListMode::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.IsVisiblePieceList
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_IsVisiblePieceList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_IsVisiblePieceList) == 0x000001, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_IsVisiblePieceList");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_IsVisiblePieceList) == 0x000001, "Wrong size on RCNzUiFinalePieceLayoutWidget_IsVisiblePieceList");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_IsVisiblePieceList, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_IsVisiblePieceList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.LoadPieceImage
// 0x00C0 (0x00C0 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_LoadPieceImage final
{
public:
	class ARCNzFinaleManagerBase*                 FinaleManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCNzFinalePieceObjectInfo             targetInfo;                                        // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          isSmall;                                           // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNzFinalePieceObjectInfo             ReturnValue;                                       // 0x0068(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_LoadPieceImage) == 0x000008, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_LoadPieceImage");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_LoadPieceImage) == 0x0000C0, "Wrong size on RCNzUiFinalePieceLayoutWidget_LoadPieceImage");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_LoadPieceImage, FinaleManager) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_LoadPieceImage::FinaleManager' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_LoadPieceImage, targetInfo) == 0x000008, "Member 'RCNzUiFinalePieceLayoutWidget_LoadPieceImage::targetInfo' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_LoadPieceImage, isSmall) == 0x000060, "Member 'RCNzUiFinalePieceLayoutWidget_LoadPieceImage::isSmall' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_LoadPieceImage, ReturnValue) == 0x000068, "Member 'RCNzUiFinalePieceLayoutWidget_LoadPieceImage::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.SetDelayUnLockAnimTime
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_SetDelayUnLockAnimTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_SetDelayUnLockAnimTime) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_SetDelayUnLockAnimTime");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_SetDelayUnLockAnimTime) == 0x000004, "Wrong size on RCNzUiFinalePieceLayoutWidget_SetDelayUnLockAnimTime");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_SetDelayUnLockAnimTime, Time) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_SetDelayUnLockAnimTime::Time' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.SetIsHoverdPieceList
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_SetIsHoverdPieceList final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_SetIsHoverdPieceList) == 0x000001, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_SetIsHoverdPieceList");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_SetIsHoverdPieceList) == 0x000001, "Wrong size on RCNzUiFinalePieceLayoutWidget_SetIsHoverdPieceList");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_SetIsHoverdPieceList, Val) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_SetIsHoverdPieceList::Val' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.StartUnlockAnimPieceList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceList final
{
public:
	TArray<int32>                                 pieceList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceList) == 0x000008, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceList");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceList) == 0x000010, "Wrong size on RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceList");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceList, pieceList) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceList::pieceList' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.StartUnlockAnimPieceSlist
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceSlist final
{
public:
	TArray<int32>                                 pieceList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceSlist) == 0x000008, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceSlist");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceSlist) == 0x000010, "Wrong size on RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceSlist");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceSlist, pieceList) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_StartUnlockAnimPieceSlist::pieceList' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.UdpatePieceLayoutBtnGuide
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_UdpatePieceLayoutBtnGuide final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_UdpatePieceLayoutBtnGuide) == 0x000001, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_UdpatePieceLayoutBtnGuide");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_UdpatePieceLayoutBtnGuide) == 0x000001, "Wrong size on RCNzUiFinalePieceLayoutWidget_UdpatePieceLayoutBtnGuide");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_UdpatePieceLayoutBtnGuide, KeyType) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_UdpatePieceLayoutBtnGuide::KeyType' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.UpdateSelectPieceIdx
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_UpdateSelectPieceIdx final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_UpdateSelectPieceIdx) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_UpdateSelectPieceIdx");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_UpdateSelectPieceIdx) == 0x000004, "Wrong size on RCNzUiFinalePieceLayoutWidget_UpdateSelectPieceIdx");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_UpdateSelectPieceIdx, idx) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_UpdateSelectPieceIdx::idx' has a wrong offset!");

// Function RC.RCNzUiFinalePieceLayoutWidget.GetPieceLCenterPosition
// 0x000C (0x000C - 0x0000)
struct RCNzUiFinalePieceLayoutWidget_GetPieceLCenterPosition final
{
public:
	int32                                         ind;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceLayoutWidget_GetPieceLCenterPosition) == 0x000004, "Wrong alignment on RCNzUiFinalePieceLayoutWidget_GetPieceLCenterPosition");
static_assert(sizeof(RCNzUiFinalePieceLayoutWidget_GetPieceLCenterPosition) == 0x00000C, "Wrong size on RCNzUiFinalePieceLayoutWidget_GetPieceLCenterPosition");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceLCenterPosition, ind) == 0x000000, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceLCenterPosition::ind' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceLayoutWidget_GetPieceLCenterPosition, ReturnValue) == 0x000004, "Member 'RCNzUiFinalePieceLayoutWidget_GetPieceLCenterPosition::ReturnValue' has a wrong offset!");

// Function RC.RCUiOptionBarVolume.SynchronizeToSlider
// 0x0004 (0x0004 - 0x0000)
struct RCUiOptionBarVolume_SynchronizeToSlider final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionBarVolume_SynchronizeToSlider) == 0x000004, "Wrong alignment on RCUiOptionBarVolume_SynchronizeToSlider");
static_assert(sizeof(RCUiOptionBarVolume_SynchronizeToSlider) == 0x000004, "Wrong size on RCUiOptionBarVolume_SynchronizeToSlider");
static_assert(offsetof(RCUiOptionBarVolume_SynchronizeToSlider, Value) == 0x000000, "Member 'RCUiOptionBarVolume_SynchronizeToSlider::Value' has a wrong offset!");

// Function RC.RCAchievementBFL.Unlock
// 0x0001 (0x0001 - 0x0000)
struct RCAchievementBFL_Unlock final
{
public:
	ERCAchievementID                              InAchievementID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAchievementBFL_Unlock) == 0x000001, "Wrong alignment on RCAchievementBFL_Unlock");
static_assert(sizeof(RCAchievementBFL_Unlock) == 0x000001, "Wrong size on RCAchievementBFL_Unlock");
static_assert(offsetof(RCAchievementBFL_Unlock, InAchievementID) == 0x000000, "Member 'RCAchievementBFL_Unlock::InAchievementID' has a wrong offset!");

// Function RC.RCAchievementBFL.UnlockByOperationID
// 0x0008 (0x0008 - 0x0000)
struct RCAchievementBFL_UnlockByOperationID final
{
public:
	ERCAchievementOperationID                     InAchievementOperationID;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAchievementBFL_UnlockByOperationID) == 0x000004, "Wrong alignment on RCAchievementBFL_UnlockByOperationID");
static_assert(sizeof(RCAchievementBFL_UnlockByOperationID) == 0x000008, "Wrong size on RCAchievementBFL_UnlockByOperationID");
static_assert(offsetof(RCAchievementBFL_UnlockByOperationID, InAchievementOperationID) == 0x000000, "Member 'RCAchievementBFL_UnlockByOperationID::InAchievementOperationID' has a wrong offset!");
static_assert(offsetof(RCAchievementBFL_UnlockByOperationID, Num) == 0x000004, "Member 'RCAchievementBFL_UnlockByOperationID::Num' has a wrong offset!");

// Function RC.RCInputBFL.ChangeInputMode
// 0x000C (0x000C - 0x0000)
struct RCInputBFL_ChangeInputMode final
{
public:
	ERCInputMode                                  InInputMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InModeName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_ChangeInputMode) == 0x000004, "Wrong alignment on RCInputBFL_ChangeInputMode");
static_assert(sizeof(RCInputBFL_ChangeInputMode) == 0x00000C, "Wrong size on RCInputBFL_ChangeInputMode");
static_assert(offsetof(RCInputBFL_ChangeInputMode, InInputMode) == 0x000000, "Member 'RCInputBFL_ChangeInputMode::InInputMode' has a wrong offset!");
static_assert(offsetof(RCInputBFL_ChangeInputMode, InModeName) == 0x000004, "Member 'RCInputBFL_ChangeInputMode::InModeName' has a wrong offset!");

// Function RC.RCInputBFL.GetAmatanMoveFront
// 0x0004 (0x0004 - 0x0000)
struct RCInputBFL_GetAmatanMoveFront final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetAmatanMoveFront) == 0x000004, "Wrong alignment on RCInputBFL_GetAmatanMoveFront");
static_assert(sizeof(RCInputBFL_GetAmatanMoveFront) == 0x000004, "Wrong size on RCInputBFL_GetAmatanMoveFront");
static_assert(offsetof(RCInputBFL_GetAmatanMoveFront, ReturnValue) == 0x000000, "Member 'RCInputBFL_GetAmatanMoveFront::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetAmatanMoveTurn
// 0x0004 (0x0004 - 0x0000)
struct RCInputBFL_GetAmatanMoveTurn final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetAmatanMoveTurn) == 0x000004, "Wrong alignment on RCInputBFL_GetAmatanMoveTurn");
static_assert(sizeof(RCInputBFL_GetAmatanMoveTurn) == 0x000004, "Wrong size on RCInputBFL_GetAmatanMoveTurn");
static_assert(offsetof(RCInputBFL_GetAmatanMoveTurn, ReturnValue) == 0x000000, "Member 'RCInputBFL_GetAmatanMoveTurn::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetCameraMovePitch
// 0x0008 (0x0008 - 0x0000)
struct RCInputBFL_GetCameraMovePitch final
{
public:
	bool                                          bInSurvey;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetCameraMovePitch) == 0x000004, "Wrong alignment on RCInputBFL_GetCameraMovePitch");
static_assert(sizeof(RCInputBFL_GetCameraMovePitch) == 0x000008, "Wrong size on RCInputBFL_GetCameraMovePitch");
static_assert(offsetof(RCInputBFL_GetCameraMovePitch, bInSurvey) == 0x000000, "Member 'RCInputBFL_GetCameraMovePitch::bInSurvey' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetCameraMovePitch, ReturnValue) == 0x000004, "Member 'RCInputBFL_GetCameraMovePitch::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetCameraMoveYaw
// 0x0008 (0x0008 - 0x0000)
struct RCInputBFL_GetCameraMoveYaw final
{
public:
	bool                                          bInSurvey;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetCameraMoveYaw) == 0x000004, "Wrong alignment on RCInputBFL_GetCameraMoveYaw");
static_assert(sizeof(RCInputBFL_GetCameraMoveYaw) == 0x000008, "Wrong size on RCInputBFL_GetCameraMoveYaw");
static_assert(offsetof(RCInputBFL_GetCameraMoveYaw, bInSurvey) == 0x000000, "Member 'RCInputBFL_GetCameraMoveYaw::bInSurvey' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetCameraMoveYaw, ReturnValue) == 0x000004, "Member 'RCInputBFL_GetCameraMoveYaw::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetCameraMoveZoon
// 0x0004 (0x0004 - 0x0000)
struct RCInputBFL_GetCameraMoveZoon final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetCameraMoveZoon) == 0x000004, "Wrong alignment on RCInputBFL_GetCameraMoveZoon");
static_assert(sizeof(RCInputBFL_GetCameraMoveZoon) == 0x000004, "Wrong size on RCInputBFL_GetCameraMoveZoon");
static_assert(offsetof(RCInputBFL_GetCameraMoveZoon, ReturnValue) == 0x000000, "Member 'RCInputBFL_GetCameraMoveZoon::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetCursolPointerInfo
// 0x0018 (0x0018 - 0x0000)
struct RCInputBFL_GetCursolPointerInfo final
{
public:
	ERCInputCursolInfoType                        OutInputType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OutScreenPosition;                                 // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutMove;                                           // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSurvey;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInputBFL_GetCursolPointerInfo) == 0x000004, "Wrong alignment on RCInputBFL_GetCursolPointerInfo");
static_assert(sizeof(RCInputBFL_GetCursolPointerInfo) == 0x000018, "Wrong size on RCInputBFL_GetCursolPointerInfo");
static_assert(offsetof(RCInputBFL_GetCursolPointerInfo, OutInputType) == 0x000000, "Member 'RCInputBFL_GetCursolPointerInfo::OutInputType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetCursolPointerInfo, OutScreenPosition) == 0x000004, "Member 'RCInputBFL_GetCursolPointerInfo::OutScreenPosition' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetCursolPointerInfo, OutMove) == 0x00000C, "Member 'RCInputBFL_GetCursolPointerInfo::OutMove' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetCursolPointerInfo, bInSurvey) == 0x000014, "Member 'RCInputBFL_GetCursolPointerInfo::bInSurvey' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetCursolPointerInfo, ReturnValue) == 0x000015, "Member 'RCInputBFL_GetCursolPointerInfo::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetDrawKey
// 0x0020 (0x0020 - 0x0000)
struct RCInputBFL_GetDrawKey final
{
public:
	struct FKey                                   OutKey;                                            // 0x0000(0x0018)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputButtonType                            OutKyeType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputKeyType                               KyeType;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInputBFL_GetDrawKey) == 0x000008, "Wrong alignment on RCInputBFL_GetDrawKey");
static_assert(sizeof(RCInputBFL_GetDrawKey) == 0x000020, "Wrong size on RCInputBFL_GetDrawKey");
static_assert(offsetof(RCInputBFL_GetDrawKey, OutKey) == 0x000000, "Member 'RCInputBFL_GetDrawKey::OutKey' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetDrawKey, OutKyeType) == 0x000018, "Member 'RCInputBFL_GetDrawKey::OutKyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetDrawKey, KyeType) == 0x000019, "Member 'RCInputBFL_GetDrawKey::KyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetDrawKey, ReturnValue) == 0x00001A, "Member 'RCInputBFL_GetDrawKey::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetFinaleCursolPointerInfo
// 0x0018 (0x0018 - 0x0000)
struct RCInputBFL_GetFinaleCursolPointerInfo final
{
public:
	ERCInputCursolInfoType                        OutInputType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OutScreenPosition;                                 // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutMove;                                           // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInputBFL_GetFinaleCursolPointerInfo) == 0x000004, "Wrong alignment on RCInputBFL_GetFinaleCursolPointerInfo");
static_assert(sizeof(RCInputBFL_GetFinaleCursolPointerInfo) == 0x000018, "Wrong size on RCInputBFL_GetFinaleCursolPointerInfo");
static_assert(offsetof(RCInputBFL_GetFinaleCursolPointerInfo, OutInputType) == 0x000000, "Member 'RCInputBFL_GetFinaleCursolPointerInfo::OutInputType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetFinaleCursolPointerInfo, OutScreenPosition) == 0x000004, "Member 'RCInputBFL_GetFinaleCursolPointerInfo::OutScreenPosition' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetFinaleCursolPointerInfo, OutMove) == 0x00000C, "Member 'RCInputBFL_GetFinaleCursolPointerInfo::OutMove' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetFinaleCursolPointerInfo, ReturnValue) == 0x000014, "Member 'RCInputBFL_GetFinaleCursolPointerInfo::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetInputPlatform
// 0x0001 (0x0001 - 0x0000)
struct RCInputBFL_GetInputPlatform final
{
public:
	ERCInputPlatform                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetInputPlatform) == 0x000001, "Wrong alignment on RCInputBFL_GetInputPlatform");
static_assert(sizeof(RCInputBFL_GetInputPlatform) == 0x000001, "Wrong size on RCInputBFL_GetInputPlatform");
static_assert(offsetof(RCInputBFL_GetInputPlatform, ReturnValue) == 0x000000, "Member 'RCInputBFL_GetInputPlatform::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetKey
// 0x0020 (0x0020 - 0x0000)
struct RCInputBFL_GetKey final
{
public:
	struct FKey                                   OutKey;                                            // 0x0000(0x0018)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputButtonType                            OutKyeType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputKeyType                               KyeType;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputHardwareType                          InInputHardwareType;                               // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInputBFL_GetKey) == 0x000008, "Wrong alignment on RCInputBFL_GetKey");
static_assert(sizeof(RCInputBFL_GetKey) == 0x000020, "Wrong size on RCInputBFL_GetKey");
static_assert(offsetof(RCInputBFL_GetKey, OutKey) == 0x000000, "Member 'RCInputBFL_GetKey::OutKey' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetKey, OutKyeType) == 0x000018, "Member 'RCInputBFL_GetKey::OutKyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetKey, KyeType) == 0x000019, "Member 'RCInputBFL_GetKey::KyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetKey, InInputHardwareType) == 0x00001A, "Member 'RCInputBFL_GetKey::InInputHardwareType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetKey, ReturnValue) == 0x00001B, "Member 'RCInputBFL_GetKey::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetLeverValue
// 0x0008 (0x0008 - 0x0000)
struct RCInputBFL_GetLeverValue final
{
public:
	ERCInputKeyType                               KyeType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetLeverValue) == 0x000004, "Wrong alignment on RCInputBFL_GetLeverValue");
static_assert(sizeof(RCInputBFL_GetLeverValue) == 0x000008, "Wrong size on RCInputBFL_GetLeverValue");
static_assert(offsetof(RCInputBFL_GetLeverValue, KyeType) == 0x000000, "Member 'RCInputBFL_GetLeverValue::KyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetLeverValue, ReturnValue) == 0x000004, "Member 'RCInputBFL_GetLeverValue::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetPlayerMoveFront
// 0x0004 (0x0004 - 0x0000)
struct RCInputBFL_GetPlayerMoveFront final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetPlayerMoveFront) == 0x000004, "Wrong alignment on RCInputBFL_GetPlayerMoveFront");
static_assert(sizeof(RCInputBFL_GetPlayerMoveFront) == 0x000004, "Wrong size on RCInputBFL_GetPlayerMoveFront");
static_assert(offsetof(RCInputBFL_GetPlayerMoveFront, ReturnValue) == 0x000000, "Member 'RCInputBFL_GetPlayerMoveFront::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetPlayerMoveSide
// 0x0004 (0x0004 - 0x0000)
struct RCInputBFL_GetPlayerMoveSide final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetPlayerMoveSide) == 0x000004, "Wrong alignment on RCInputBFL_GetPlayerMoveSide");
static_assert(sizeof(RCInputBFL_GetPlayerMoveSide) == 0x000004, "Wrong size on RCInputBFL_GetPlayerMoveSide");
static_assert(offsetof(RCInputBFL_GetPlayerMoveSide, ReturnValue) == 0x000000, "Member 'RCInputBFL_GetPlayerMoveSide::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.GetPointerValue
// 0x0008 (0x0008 - 0x0000)
struct RCInputBFL_GetPointerValue final
{
public:
	ERCInputKeyType                               KyeType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_GetPointerValue) == 0x000004, "Wrong alignment on RCInputBFL_GetPointerValue");
static_assert(sizeof(RCInputBFL_GetPointerValue) == 0x000008, "Wrong size on RCInputBFL_GetPointerValue");
static_assert(offsetof(RCInputBFL_GetPointerValue, KyeType) == 0x000000, "Member 'RCInputBFL_GetPointerValue::KyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_GetPointerValue, ReturnValue) == 0x000004, "Member 'RCInputBFL_GetPointerValue::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.IsDebugGameClear
// 0x0001 (0x0001 - 0x0000)
struct RCInputBFL_IsDebugGameClear final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_IsDebugGameClear) == 0x000001, "Wrong alignment on RCInputBFL_IsDebugGameClear");
static_assert(sizeof(RCInputBFL_IsDebugGameClear) == 0x000001, "Wrong size on RCInputBFL_IsDebugGameClear");
static_assert(offsetof(RCInputBFL_IsDebugGameClear, ReturnValue) == 0x000000, "Member 'RCInputBFL_IsDebugGameClear::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.IsDebugGameTimeUp
// 0x0001 (0x0001 - 0x0000)
struct RCInputBFL_IsDebugGameTimeUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_IsDebugGameTimeUp) == 0x000001, "Wrong alignment on RCInputBFL_IsDebugGameTimeUp");
static_assert(sizeof(RCInputBFL_IsDebugGameTimeUp) == 0x000001, "Wrong size on RCInputBFL_IsDebugGameTimeUp");
static_assert(offsetof(RCInputBFL_IsDebugGameTimeUp, ReturnValue) == 0x000000, "Member 'RCInputBFL_IsDebugGameTimeUp::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.IsDebugMenuTrigger
// 0x0001 (0x0001 - 0x0000)
struct RCInputBFL_IsDebugMenuTrigger final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_IsDebugMenuTrigger) == 0x000001, "Wrong alignment on RCInputBFL_IsDebugMenuTrigger");
static_assert(sizeof(RCInputBFL_IsDebugMenuTrigger) == 0x000001, "Wrong size on RCInputBFL_IsDebugMenuTrigger");
static_assert(offsetof(RCInputBFL_IsDebugMenuTrigger, ReturnValue) == 0x000000, "Member 'RCInputBFL_IsDebugMenuTrigger::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.IsDown
// 0x0002 (0x0002 - 0x0000)
struct RCInputBFL_IsDown final
{
public:
	ERCInputKeyType                               KyeType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_IsDown) == 0x000001, "Wrong alignment on RCInputBFL_IsDown");
static_assert(sizeof(RCInputBFL_IsDown) == 0x000002, "Wrong size on RCInputBFL_IsDown");
static_assert(offsetof(RCInputBFL_IsDown, KyeType) == 0x000000, "Member 'RCInputBFL_IsDown::KyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_IsDown, ReturnValue) == 0x000001, "Member 'RCInputBFL_IsDown::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.IsMove
// 0x0002 (0x0002 - 0x0000)
struct RCInputBFL_IsMove final
{
public:
	ERCInputKeyType                               KyeType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_IsMove) == 0x000001, "Wrong alignment on RCInputBFL_IsMove");
static_assert(sizeof(RCInputBFL_IsMove) == 0x000002, "Wrong size on RCInputBFL_IsMove");
static_assert(offsetof(RCInputBFL_IsMove, KyeType) == 0x000000, "Member 'RCInputBFL_IsMove::KyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_IsMove, ReturnValue) == 0x000001, "Member 'RCInputBFL_IsMove::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.IsPressed
// 0x0002 (0x0002 - 0x0000)
struct RCInputBFL_IsPressed final
{
public:
	ERCInputKeyType                               KyeType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_IsPressed) == 0x000001, "Wrong alignment on RCInputBFL_IsPressed");
static_assert(sizeof(RCInputBFL_IsPressed) == 0x000002, "Wrong size on RCInputBFL_IsPressed");
static_assert(offsetof(RCInputBFL_IsPressed, KyeType) == 0x000000, "Member 'RCInputBFL_IsPressed::KyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_IsPressed, ReturnValue) == 0x000001, "Member 'RCInputBFL_IsPressed::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.IsReleased
// 0x0002 (0x0002 - 0x0000)
struct RCInputBFL_IsReleased final
{
public:
	ERCInputKeyType                               KyeType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_IsReleased) == 0x000001, "Wrong alignment on RCInputBFL_IsReleased");
static_assert(sizeof(RCInputBFL_IsReleased) == 0x000002, "Wrong size on RCInputBFL_IsReleased");
static_assert(offsetof(RCInputBFL_IsReleased, KyeType) == 0x000000, "Member 'RCInputBFL_IsReleased::KyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_IsReleased, ReturnValue) == 0x000001, "Member 'RCInputBFL_IsReleased::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.IsRepeat
// 0x0002 (0x0002 - 0x0000)
struct RCInputBFL_IsRepeat final
{
public:
	ERCInputKeyType                               KyeType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_IsRepeat) == 0x000001, "Wrong alignment on RCInputBFL_IsRepeat");
static_assert(sizeof(RCInputBFL_IsRepeat) == 0x000002, "Wrong size on RCInputBFL_IsRepeat");
static_assert(offsetof(RCInputBFL_IsRepeat, KyeType) == 0x000000, "Member 'RCInputBFL_IsRepeat::KyeType' has a wrong offset!");
static_assert(offsetof(RCInputBFL_IsRepeat, ReturnValue) == 0x000001, "Member 'RCInputBFL_IsRepeat::ReturnValue' has a wrong offset!");

// Function RC.RCInputBFL.PopInputMode
// 0x000C (0x000C - 0x0000)
struct RCInputBFL_PopInputMode final
{
public:
	class FName                                   InModeName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAllPop;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInputBFL_PopInputMode) == 0x000004, "Wrong alignment on RCInputBFL_PopInputMode");
static_assert(sizeof(RCInputBFL_PopInputMode) == 0x00000C, "Wrong size on RCInputBFL_PopInputMode");
static_assert(offsetof(RCInputBFL_PopInputMode, InModeName) == 0x000000, "Member 'RCInputBFL_PopInputMode::InModeName' has a wrong offset!");
static_assert(offsetof(RCInputBFL_PopInputMode, InAllPop) == 0x000008, "Member 'RCInputBFL_PopInputMode::InAllPop' has a wrong offset!");

// Function RC.RCInputBFL.PushInputMode
// 0x000C (0x000C - 0x0000)
struct RCInputBFL_PushInputMode final
{
public:
	ERCInputMode                                  InInputMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InModeName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_PushInputMode) == 0x000004, "Wrong alignment on RCInputBFL_PushInputMode");
static_assert(sizeof(RCInputBFL_PushInputMode) == 0x00000C, "Wrong size on RCInputBFL_PushInputMode");
static_assert(offsetof(RCInputBFL_PushInputMode, InInputMode) == 0x000000, "Member 'RCInputBFL_PushInputMode::InInputMode' has a wrong offset!");
static_assert(offsetof(RCInputBFL_PushInputMode, InModeName) == 0x000004, "Member 'RCInputBFL_PushInputMode::InModeName' has a wrong offset!");

// Function RC.RCInputBFL.SetPressedDebug
// 0x0001 (0x0001 - 0x0000)
struct RCInputBFL_SetPressedDebug final
{
public:
	ERCInputKeyType                               KyeType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInputBFL_SetPressedDebug) == 0x000001, "Wrong alignment on RCInputBFL_SetPressedDebug");
static_assert(sizeof(RCInputBFL_SetPressedDebug) == 0x000001, "Wrong size on RCInputBFL_SetPressedDebug");
static_assert(offsetof(RCInputBFL_SetPressedDebug, KyeType) == 0x000000, "Member 'RCInputBFL_SetPressedDebug::KyeType' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectParts.PlayAnim
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectParts_PlayAnim final
{
public:
	ERCNzUiBattleKaiKagiSelectPartsAnimType       AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectParts_PlayAnim) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectParts_PlayAnim");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectParts_PlayAnim) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectParts_PlayAnim");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectParts_PlayAnim, AnimType) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectParts_PlayAnim::AnimType' has a wrong offset!");

// Function RC.RCSpiritMiniGameBFL.GetCheckPoint
// 0x000C (0x000C - 0x0000)
struct RCSpiritMiniGameBFL_GetCheckPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSpiritMiniGameBFL_GetCheckPoint) == 0x000004, "Wrong alignment on RCSpiritMiniGameBFL_GetCheckPoint");
static_assert(sizeof(RCSpiritMiniGameBFL_GetCheckPoint) == 0x00000C, "Wrong size on RCSpiritMiniGameBFL_GetCheckPoint");
static_assert(offsetof(RCSpiritMiniGameBFL_GetCheckPoint, ReturnValue) == 0x000000, "Member 'RCSpiritMiniGameBFL_GetCheckPoint::ReturnValue' has a wrong offset!");

// Function RC.RCSpiritMiniGameBFL.GetCheckPointNumber
// 0x0004 (0x0004 - 0x0000)
struct RCSpiritMiniGameBFL_GetCheckPointNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSpiritMiniGameBFL_GetCheckPointNumber) == 0x000004, "Wrong alignment on RCSpiritMiniGameBFL_GetCheckPointNumber");
static_assert(sizeof(RCSpiritMiniGameBFL_GetCheckPointNumber) == 0x000004, "Wrong size on RCSpiritMiniGameBFL_GetCheckPointNumber");
static_assert(offsetof(RCSpiritMiniGameBFL_GetCheckPointNumber, ReturnValue) == 0x000000, "Member 'RCSpiritMiniGameBFL_GetCheckPointNumber::ReturnValue' has a wrong offset!");

// Function RC.RCSpiritMiniGameBFL.GetHitWanderingSpirit
// 0x0001 (0x0001 - 0x0000)
struct RCSpiritMiniGameBFL_GetHitWanderingSpirit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSpiritMiniGameBFL_GetHitWanderingSpirit) == 0x000001, "Wrong alignment on RCSpiritMiniGameBFL_GetHitWanderingSpirit");
static_assert(sizeof(RCSpiritMiniGameBFL_GetHitWanderingSpirit) == 0x000001, "Wrong size on RCSpiritMiniGameBFL_GetHitWanderingSpirit");
static_assert(offsetof(RCSpiritMiniGameBFL_GetHitWanderingSpirit, ReturnValue) == 0x000000, "Member 'RCSpiritMiniGameBFL_GetHitWanderingSpirit::ReturnValue' has a wrong offset!");

// Function RC.RCSpiritMiniGameBFL.GetHitWanderingSpiritPos
// 0x000C (0x000C - 0x0000)
struct RCSpiritMiniGameBFL_GetHitWanderingSpiritPos final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSpiritMiniGameBFL_GetHitWanderingSpiritPos) == 0x000004, "Wrong alignment on RCSpiritMiniGameBFL_GetHitWanderingSpiritPos");
static_assert(sizeof(RCSpiritMiniGameBFL_GetHitWanderingSpiritPos) == 0x00000C, "Wrong size on RCSpiritMiniGameBFL_GetHitWanderingSpiritPos");
static_assert(offsetof(RCSpiritMiniGameBFL_GetHitWanderingSpiritPos, ReturnValue) == 0x000000, "Member 'RCSpiritMiniGameBFL_GetHitWanderingSpiritPos::ReturnValue' has a wrong offset!");

// Function RC.RCSpiritMiniGameBFL.GetResume
// 0x0001 (0x0001 - 0x0000)
struct RCSpiritMiniGameBFL_GetResume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSpiritMiniGameBFL_GetResume) == 0x000001, "Wrong alignment on RCSpiritMiniGameBFL_GetResume");
static_assert(sizeof(RCSpiritMiniGameBFL_GetResume) == 0x000001, "Wrong size on RCSpiritMiniGameBFL_GetResume");
static_assert(offsetof(RCSpiritMiniGameBFL_GetResume, ReturnValue) == 0x000000, "Member 'RCSpiritMiniGameBFL_GetResume::ReturnValue' has a wrong offset!");

// Function RC.RCSpiritMiniGameBFL.GetSpiritMiniGameManager
// 0x0008 (0x0008 - 0x0000)
struct RCSpiritMiniGameBFL_GetSpiritMiniGameManager final
{
public:
	class ARCSpiritMiniGameManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSpiritMiniGameBFL_GetSpiritMiniGameManager) == 0x000008, "Wrong alignment on RCSpiritMiniGameBFL_GetSpiritMiniGameManager");
static_assert(sizeof(RCSpiritMiniGameBFL_GetSpiritMiniGameManager) == 0x000008, "Wrong size on RCSpiritMiniGameBFL_GetSpiritMiniGameManager");
static_assert(offsetof(RCSpiritMiniGameBFL_GetSpiritMiniGameManager, ReturnValue) == 0x000000, "Member 'RCSpiritMiniGameBFL_GetSpiritMiniGameManager::ReturnValue' has a wrong offset!");

// Function RC.RCSpiritMiniGameBFL.ResumeSpiritMiniGameData
// 0x0004 (0x0004 - 0x0000)
struct RCSpiritMiniGameBFL_ResumeSpiritMiniGameData final
{
public:
	int32                                         InResumeCheckPointNumber;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSpiritMiniGameBFL_ResumeSpiritMiniGameData) == 0x000004, "Wrong alignment on RCSpiritMiniGameBFL_ResumeSpiritMiniGameData");
static_assert(sizeof(RCSpiritMiniGameBFL_ResumeSpiritMiniGameData) == 0x000004, "Wrong size on RCSpiritMiniGameBFL_ResumeSpiritMiniGameData");
static_assert(offsetof(RCSpiritMiniGameBFL_ResumeSpiritMiniGameData, InResumeCheckPointNumber) == 0x000000, "Member 'RCSpiritMiniGameBFL_ResumeSpiritMiniGameData::InResumeCheckPointNumber' has a wrong offset!");

// Function RC.RCSpiritMiniGameBFL.SetSpiritMiniGameEnvironment
// 0x0008 (0x0008 - 0x0000)
struct RCSpiritMiniGameBFL_SetSpiritMiniGameEnvironment final
{
public:
	class ARCSpiritMiniGameManager*               InSpiritMiniGameManager;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSpiritMiniGameBFL_SetSpiritMiniGameEnvironment) == 0x000008, "Wrong alignment on RCSpiritMiniGameBFL_SetSpiritMiniGameEnvironment");
static_assert(sizeof(RCSpiritMiniGameBFL_SetSpiritMiniGameEnvironment) == 0x000008, "Wrong size on RCSpiritMiniGameBFL_SetSpiritMiniGameEnvironment");
static_assert(offsetof(RCSpiritMiniGameBFL_SetSpiritMiniGameEnvironment, InSpiritMiniGameManager) == 0x000000, "Member 'RCSpiritMiniGameBFL_SetSpiritMiniGameEnvironment::InSpiritMiniGameManager' has a wrong offset!");

// Function RC.RCActionButton.KillAfter
// 0x0004 (0x0004 - 0x0000)
struct RCActionButton_KillAfter final
{
public:
	float                                         in_sec;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_KillAfter) == 0x000004, "Wrong alignment on RCActionButton_KillAfter");
static_assert(sizeof(RCActionButton_KillAfter) == 0x000004, "Wrong size on RCActionButton_KillAfter");
static_assert(offsetof(RCActionButton_KillAfter, in_sec) == 0x000000, "Member 'RCActionButton_KillAfter::in_sec' has a wrong offset!");

// Function RC.RCActionButton.OnChangedPauseState
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_OnChangedPauseState final
{
public:
	bool                                          NewPauseState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_OnChangedPauseState) == 0x000001, "Wrong alignment on RCActionButton_OnChangedPauseState");
static_assert(sizeof(RCActionButton_OnChangedPauseState) == 0x000001, "Wrong size on RCActionButton_OnChangedPauseState");
static_assert(offsetof(RCActionButton_OnChangedPauseState, NewPauseState) == 0x000000, "Member 'RCActionButton_OnChangedPauseState::NewPauseState' has a wrong offset!");

// Function RC.RCActionButton.OnChangeInputPlatform
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_OnChangeInputPlatform final
{
public:
	ERCInputPlatform                              InInputPlatform;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_OnChangeInputPlatform) == 0x000001, "Wrong alignment on RCActionButton_OnChangeInputPlatform");
static_assert(sizeof(RCActionButton_OnChangeInputPlatform) == 0x000001, "Wrong size on RCActionButton_OnChangeInputPlatform");
static_assert(offsetof(RCActionButton_OnChangeInputPlatform, InInputPlatform) == 0x000000, "Member 'RCActionButton_OnChangeInputPlatform::InInputPlatform' has a wrong offset!");

// Function RC.RCActionButton.OnFailed
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_OnFailed final
{
public:
	ERCActionFailureReason                        reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_OnFailed) == 0x000001, "Wrong alignment on RCActionButton_OnFailed");
static_assert(sizeof(RCActionButton_OnFailed) == 0x000001, "Wrong size on RCActionButton_OnFailed");
static_assert(offsetof(RCActionButton_OnFailed, reason) == 0x000000, "Member 'RCActionButton_OnFailed::reason' has a wrong offset!");

// Function RC.RCActionButton.SetDecision
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_SetDecision final
{
public:
	bool                                          ForcePasse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_SetDecision) == 0x000001, "Wrong alignment on RCActionButton_SetDecision");
static_assert(sizeof(RCActionButton_SetDecision) == 0x000001, "Wrong size on RCActionButton_SetDecision");
static_assert(offsetof(RCActionButton_SetDecision, ForcePasse) == 0x000000, "Member 'RCActionButton_SetDecision::ForcePasse' has a wrong offset!");

// Function RC.RCActionButton.SetExpectKey
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_SetExpectKey final
{
public:
	ERCActionKeyType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_SetExpectKey) == 0x000001, "Wrong alignment on RCActionButton_SetExpectKey");
static_assert(sizeof(RCActionButton_SetExpectKey) == 0x000001, "Wrong size on RCActionButton_SetExpectKey");
static_assert(offsetof(RCActionButton_SetExpectKey, Key) == 0x000000, "Member 'RCActionButton_SetExpectKey::Key' has a wrong offset!");

// Function RC.RCActionButton.SetMockup
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_SetMockup final
{
public:
	bool                                          Mock;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_SetMockup) == 0x000001, "Wrong alignment on RCActionButton_SetMockup");
static_assert(sizeof(RCActionButton_SetMockup) == 0x000001, "Wrong size on RCActionButton_SetMockup");
static_assert(offsetof(RCActionButton_SetMockup, Mock) == 0x000000, "Member 'RCActionButton_SetMockup::Mock' has a wrong offset!");

// Function RC.RCActionButton.SetSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_SetSelectionMode final
{
public:
	bool                                          EnableSelection;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_SetSelectionMode) == 0x000001, "Wrong alignment on RCActionButton_SetSelectionMode");
static_assert(sizeof(RCActionButton_SetSelectionMode) == 0x000001, "Wrong size on RCActionButton_SetSelectionMode");
static_assert(offsetof(RCActionButton_SetSelectionMode, EnableSelection) == 0x000000, "Member 'RCActionButton_SetSelectionMode::EnableSelection' has a wrong offset!");

// Function RC.RCActionButton.SetSoundEnabled
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_SetSoundEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_SetSoundEnabled) == 0x000001, "Wrong alignment on RCActionButton_SetSoundEnabled");
static_assert(sizeof(RCActionButton_SetSoundEnabled) == 0x000001, "Wrong size on RCActionButton_SetSoundEnabled");
static_assert(offsetof(RCActionButton_SetSoundEnabled, Enable) == 0x000000, "Member 'RCActionButton_SetSoundEnabled::Enable' has a wrong offset!");

// Function RC.RCActionButton.GetLastDecisionTime
// 0x0004 (0x0004 - 0x0000)
struct RCActionButton_GetLastDecisionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_GetLastDecisionTime) == 0x000004, "Wrong alignment on RCActionButton_GetLastDecisionTime");
static_assert(sizeof(RCActionButton_GetLastDecisionTime) == 0x000004, "Wrong size on RCActionButton_GetLastDecisionTime");
static_assert(offsetof(RCActionButton_GetLastDecisionTime, ReturnValue) == 0x000000, "Member 'RCActionButton_GetLastDecisionTime::ReturnValue' has a wrong offset!");

// Function RC.RCActionButton.GetMockup
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_GetMockup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_GetMockup) == 0x000001, "Wrong alignment on RCActionButton_GetMockup");
static_assert(sizeof(RCActionButton_GetMockup) == 0x000001, "Wrong size on RCActionButton_GetMockup");
static_assert(offsetof(RCActionButton_GetMockup, ReturnValue) == 0x000000, "Member 'RCActionButton_GetMockup::ReturnValue' has a wrong offset!");

// Function RC.RCActionButton.IsActivated
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_IsActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_IsActivated) == 0x000001, "Wrong alignment on RCActionButton_IsActivated");
static_assert(sizeof(RCActionButton_IsActivated) == 0x000001, "Wrong size on RCActionButton_IsActivated");
static_assert(offsetof(RCActionButton_IsActivated, ReturnValue) == 0x000000, "Member 'RCActionButton_IsActivated::ReturnValue' has a wrong offset!");

// Function RC.RCActionButton.IsDecieded
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_IsDecieded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_IsDecieded) == 0x000001, "Wrong alignment on RCActionButton_IsDecieded");
static_assert(sizeof(RCActionButton_IsDecieded) == 0x000001, "Wrong size on RCActionButton_IsDecieded");
static_assert(offsetof(RCActionButton_IsDecieded, ReturnValue) == 0x000000, "Member 'RCActionButton_IsDecieded::ReturnValue' has a wrong offset!");

// Function RC.RCActionButton.IsPassed
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_IsPassed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_IsPassed) == 0x000001, "Wrong alignment on RCActionButton_IsPassed");
static_assert(sizeof(RCActionButton_IsPassed) == 0x000001, "Wrong size on RCActionButton_IsPassed");
static_assert(offsetof(RCActionButton_IsPassed, ReturnValue) == 0x000000, "Member 'RCActionButton_IsPassed::ReturnValue' has a wrong offset!");

// Function RC.RCActionButton.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct RCActionButton_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButton_IsPaused) == 0x000001, "Wrong alignment on RCActionButton_IsPaused");
static_assert(sizeof(RCActionButton_IsPaused) == 0x000001, "Wrong size on RCActionButton_IsPaused");
static_assert(offsetof(RCActionButton_IsPaused, ReturnValue) == 0x000000, "Member 'RCActionButton_IsPaused::ReturnValue' has a wrong offset!");

// Function RC.RCActionButtonEventDispatcher.CallOnActivate
// 0x0010 (0x0010 - 0x0000)
struct RCActionButtonEventDispatcher_CallOnActivate final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCActionButton*                        Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButtonEventDispatcher_CallOnActivate) == 0x000008, "Wrong alignment on RCActionButtonEventDispatcher_CallOnActivate");
static_assert(sizeof(RCActionButtonEventDispatcher_CallOnActivate) == 0x000010, "Wrong size on RCActionButtonEventDispatcher_CallOnActivate");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnActivate, ID) == 0x000000, "Member 'RCActionButtonEventDispatcher_CallOnActivate::ID' has a wrong offset!");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnActivate, Actor) == 0x000008, "Member 'RCActionButtonEventDispatcher_CallOnActivate::Actor' has a wrong offset!");

// Function RC.RCActionButtonEventDispatcher.CallOnDeactivate
// 0x0010 (0x0010 - 0x0000)
struct RCActionButtonEventDispatcher_CallOnDeactivate final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCActionButton*                        Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButtonEventDispatcher_CallOnDeactivate) == 0x000008, "Wrong alignment on RCActionButtonEventDispatcher_CallOnDeactivate");
static_assert(sizeof(RCActionButtonEventDispatcher_CallOnDeactivate) == 0x000010, "Wrong size on RCActionButtonEventDispatcher_CallOnDeactivate");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnDeactivate, ID) == 0x000000, "Member 'RCActionButtonEventDispatcher_CallOnDeactivate::ID' has a wrong offset!");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnDeactivate, Actor) == 0x000008, "Member 'RCActionButtonEventDispatcher_CallOnDeactivate::Actor' has a wrong offset!");

// Function RC.RCActionButtonEventDispatcher.CallOnFailed
// 0x0018 (0x0018 - 0x0000)
struct RCActionButtonEventDispatcher_CallOnFailed final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCActionButton*                        Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCActionFailureReason                        reason;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCActionButtonEventDispatcher_CallOnFailed) == 0x000008, "Wrong alignment on RCActionButtonEventDispatcher_CallOnFailed");
static_assert(sizeof(RCActionButtonEventDispatcher_CallOnFailed) == 0x000018, "Wrong size on RCActionButtonEventDispatcher_CallOnFailed");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnFailed, ID) == 0x000000, "Member 'RCActionButtonEventDispatcher_CallOnFailed::ID' has a wrong offset!");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnFailed, Actor) == 0x000008, "Member 'RCActionButtonEventDispatcher_CallOnFailed::Actor' has a wrong offset!");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnFailed, reason) == 0x000010, "Member 'RCActionButtonEventDispatcher_CallOnFailed::reason' has a wrong offset!");

// Function RC.RCActionButtonEventDispatcher.CallOnPassed
// 0x0010 (0x0010 - 0x0000)
struct RCActionButtonEventDispatcher_CallOnPassed final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCActionButton*                        Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActionButtonEventDispatcher_CallOnPassed) == 0x000008, "Wrong alignment on RCActionButtonEventDispatcher_CallOnPassed");
static_assert(sizeof(RCActionButtonEventDispatcher_CallOnPassed) == 0x000010, "Wrong size on RCActionButtonEventDispatcher_CallOnPassed");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnPassed, ID) == 0x000000, "Member 'RCActionButtonEventDispatcher_CallOnPassed::ID' has a wrong offset!");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnPassed, Actor) == 0x000008, "Member 'RCActionButtonEventDispatcher_CallOnPassed::Actor' has a wrong offset!");

// Function RC.RCActionButtonEventDispatcher.CallOnPending
// 0x0018 (0x0018 - 0x0000)
struct RCActionButtonEventDispatcher_CallOnPending final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCActionButton*                        Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Times;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCActionButtonEventDispatcher_CallOnPending) == 0x000008, "Wrong alignment on RCActionButtonEventDispatcher_CallOnPending");
static_assert(sizeof(RCActionButtonEventDispatcher_CallOnPending) == 0x000018, "Wrong size on RCActionButtonEventDispatcher_CallOnPending");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnPending, ID) == 0x000000, "Member 'RCActionButtonEventDispatcher_CallOnPending::ID' has a wrong offset!");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnPending, Actor) == 0x000008, "Member 'RCActionButtonEventDispatcher_CallOnPending::Actor' has a wrong offset!");
static_assert(offsetof(RCActionButtonEventDispatcher_CallOnPending, Times) == 0x000010, "Member 'RCActionButtonEventDispatcher_CallOnPending::Times' has a wrong offset!");

// Function RC.RCActivityBFL.GetActivityContinue
// 0x0001 (0x0001 - 0x0000)
struct RCActivityBFL_GetActivityContinue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActivityBFL_GetActivityContinue) == 0x000001, "Wrong alignment on RCActivityBFL_GetActivityContinue");
static_assert(sizeof(RCActivityBFL_GetActivityContinue) == 0x000001, "Wrong size on RCActivityBFL_GetActivityContinue");
static_assert(offsetof(RCActivityBFL_GetActivityContinue, ReturnValue) == 0x000000, "Member 'RCActivityBFL_GetActivityContinue::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleBackgroundWidget.ChangeBackgroundImg
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleBackgroundWidget_ChangeBackgroundImg final
{
public:
	const class UTexture2D*                       Texture;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleBackgroundWidget_ChangeBackgroundImg) == 0x000008, "Wrong alignment on RCNzUiFinaleBackgroundWidget_ChangeBackgroundImg");
static_assert(sizeof(RCNzUiFinaleBackgroundWidget_ChangeBackgroundImg) == 0x000008, "Wrong size on RCNzUiFinaleBackgroundWidget_ChangeBackgroundImg");
static_assert(offsetof(RCNzUiFinaleBackgroundWidget_ChangeBackgroundImg, Texture) == 0x000000, "Member 'RCNzUiFinaleBackgroundWidget_ChangeBackgroundImg::Texture' has a wrong offset!");

// Function RC.RCWidgetActor.GetWidget
// 0x0008 (0x0008 - 0x0000)
struct RCWidgetActor_GetWidget final
{
public:
	class URCUiWidgetBase*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWidgetActor_GetWidget) == 0x000008, "Wrong alignment on RCWidgetActor_GetWidget");
static_assert(sizeof(RCWidgetActor_GetWidget) == 0x000008, "Wrong size on RCWidgetActor_GetWidget");
static_assert(offsetof(RCWidgetActor_GetWidget, ReturnValue) == 0x000000, "Member 'RCWidgetActor_GetWidget::ReturnValue' has a wrong offset!");

// Function RC.RCWidgetActor.SetActorVisibility
// 0x0001 (0x0001 - 0x0000)
struct RCWidgetActor_SetActorVisibility final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWidgetActor_SetActorVisibility) == 0x000001, "Wrong alignment on RCWidgetActor_SetActorVisibility");
static_assert(sizeof(RCWidgetActor_SetActorVisibility) == 0x000001, "Wrong size on RCWidgetActor_SetActorVisibility");
static_assert(offsetof(RCWidgetActor_SetActorVisibility, bInShow) == 0x000000, "Member 'RCWidgetActor_SetActorVisibility::bInShow' has a wrong offset!");

// Function RC.RCWidgetActor.SetWidget
// 0x0008 (0x0008 - 0x0000)
struct RCWidgetActor_SetWidget final
{
public:
	class URCUiWidgetBase*                        InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWidgetActor_SetWidget) == 0x000008, "Wrong alignment on RCWidgetActor_SetWidget");
static_assert(sizeof(RCWidgetActor_SetWidget) == 0x000008, "Wrong size on RCWidgetActor_SetWidget");
static_assert(offsetof(RCWidgetActor_SetWidget, InWidget) == 0x000000, "Member 'RCWidgetActor_SetWidget::InWidget' has a wrong offset!");

// Function RC.RCActorScript.IsMoveEnd
// 0x0001 (0x0001 - 0x0000)
struct RCActorScript_IsMoveEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActorScript_IsMoveEnd) == 0x000001, "Wrong alignment on RCActorScript_IsMoveEnd");
static_assert(sizeof(RCActorScript_IsMoveEnd) == 0x000001, "Wrong size on RCActorScript_IsMoveEnd");
static_assert(offsetof(RCActorScript_IsMoveEnd, ReturnValue) == 0x000000, "Member 'RCActorScript_IsMoveEnd::ReturnValue' has a wrong offset!");

// Function RC.RCActorScript.RestoreMovePosition
// 0x0004 (0x0004 - 0x0000)
struct RCActorScript_RestoreMovePosition final
{
public:
	float                                         SpeedScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActorScript_RestoreMovePosition) == 0x000004, "Wrong alignment on RCActorScript_RestoreMovePosition");
static_assert(sizeof(RCActorScript_RestoreMovePosition) == 0x000004, "Wrong size on RCActorScript_RestoreMovePosition");
static_assert(offsetof(RCActorScript_RestoreMovePosition, SpeedScale) == 0x000000, "Member 'RCActorScript_RestoreMovePosition::SpeedScale' has a wrong offset!");

// Function RC.RCActorScript.RestoreRotationYaw
// 0x0008 (0x0008 - 0x0000)
struct RCActorScript_RestoreRotationYaw final
{
public:
	float                                         SpeedScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCActorScript_RestoreRotationYaw) == 0x000004, "Wrong alignment on RCActorScript_RestoreRotationYaw");
static_assert(sizeof(RCActorScript_RestoreRotationYaw) == 0x000008, "Wrong size on RCActorScript_RestoreRotationYaw");
static_assert(offsetof(RCActorScript_RestoreRotationYaw, SpeedScale) == 0x000000, "Member 'RCActorScript_RestoreRotationYaw::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCActorScript_RestoreRotationYaw, bDirect) == 0x000004, "Member 'RCActorScript_RestoreRotationYaw::bDirect' has a wrong offset!");

// Function RC.RCActorScript.SetMovePause
// 0x0001 (0x0001 - 0x0000)
struct RCActorScript_SetMovePause final
{
public:
	bool                                          bInMovePause;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActorScript_SetMovePause) == 0x000001, "Wrong alignment on RCActorScript_SetMovePause");
static_assert(sizeof(RCActorScript_SetMovePause) == 0x000001, "Wrong size on RCActorScript_SetMovePause");
static_assert(offsetof(RCActorScript_SetMovePause, bInMovePause) == 0x000000, "Member 'RCActorScript_SetMovePause::bInMovePause' has a wrong offset!");

// Function RC.RCActorScript.SetMoveSpeed
// 0x0008 (0x0008 - 0x0000)
struct RCActorScript_SetMoveSpeed final
{
public:
	float                                         InWalkSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRunSpeed;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActorScript_SetMoveSpeed) == 0x000004, "Wrong alignment on RCActorScript_SetMoveSpeed");
static_assert(sizeof(RCActorScript_SetMoveSpeed) == 0x000008, "Wrong size on RCActorScript_SetMoveSpeed");
static_assert(offsetof(RCActorScript_SetMoveSpeed, InWalkSpeed) == 0x000000, "Member 'RCActorScript_SetMoveSpeed::InWalkSpeed' has a wrong offset!");
static_assert(offsetof(RCActorScript_SetMoveSpeed, InRunSpeed) == 0x000004, "Member 'RCActorScript_SetMoveSpeed::InRunSpeed' has a wrong offset!");

// Function RC.RCActorScript.SetPositionYaw
// 0x0010 (0x0010 - 0x0000)
struct RCActorScript_SetPositionYaw final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActorScript_SetPositionYaw) == 0x000004, "Wrong alignment on RCActorScript_SetPositionYaw");
static_assert(sizeof(RCActorScript_SetPositionYaw) == 0x000010, "Wrong size on RCActorScript_SetPositionYaw");
static_assert(offsetof(RCActorScript_SetPositionYaw, InPosition) == 0x000000, "Member 'RCActorScript_SetPositionYaw::InPosition' has a wrong offset!");
static_assert(offsetof(RCActorScript_SetPositionYaw, InYaw) == 0x00000C, "Member 'RCActorScript_SetPositionYaw::InYaw' has a wrong offset!");

// Function RC.RCActorScript.SetTransformPlayerStartName
// 0x0018 (0x0018 - 0x0000)
struct RCActorScript_SetTransformPlayerStartName final
{
public:
	class FName                                   InPlayerStartTagName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActorScript_SetTransformPlayerStartName) == 0x000004, "Wrong alignment on RCActorScript_SetTransformPlayerStartName");
static_assert(sizeof(RCActorScript_SetTransformPlayerStartName) == 0x000018, "Wrong size on RCActorScript_SetTransformPlayerStartName");
static_assert(offsetof(RCActorScript_SetTransformPlayerStartName, InPlayerStartTagName) == 0x000000, "Member 'RCActorScript_SetTransformPlayerStartName::InPlayerStartTagName' has a wrong offset!");
static_assert(offsetof(RCActorScript_SetTransformPlayerStartName, InOffsetPos) == 0x000008, "Member 'RCActorScript_SetTransformPlayerStartName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCActorScript_SetTransformPlayerStartName, InOffsetYaw) == 0x000014, "Member 'RCActorScript_SetTransformPlayerStartName::InOffsetYaw' has a wrong offset!");

// Function RC.RCActorScript.SetTransformTargetPointName
// 0x0018 (0x0018 - 0x0000)
struct RCActorScript_SetTransformTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActorScript_SetTransformTargetPointName) == 0x000004, "Wrong alignment on RCActorScript_SetTransformTargetPointName");
static_assert(sizeof(RCActorScript_SetTransformTargetPointName) == 0x000018, "Wrong size on RCActorScript_SetTransformTargetPointName");
static_assert(offsetof(RCActorScript_SetTransformTargetPointName, InPointName) == 0x000000, "Member 'RCActorScript_SetTransformTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCActorScript_SetTransformTargetPointName, InOffsetPos) == 0x000008, "Member 'RCActorScript_SetTransformTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCActorScript_SetTransformTargetPointName, InOffsetYaw) == 0x000014, "Member 'RCActorScript_SetTransformTargetPointName::InOffsetYaw' has a wrong offset!");

// Function RC.RCActorScript.StartMoveFromPlayer
// 0x0014 (0x0014 - 0x0000)
struct RCActorScript_StartMoveFromPlayer final
{
public:
	float                                         InLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndPlayerYaw;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCActorScript_StartMoveFromPlayer) == 0x000004, "Wrong alignment on RCActorScript_StartMoveFromPlayer");
static_assert(sizeof(RCActorScript_StartMoveFromPlayer) == 0x000014, "Wrong size on RCActorScript_StartMoveFromPlayer");
static_assert(offsetof(RCActorScript_StartMoveFromPlayer, InLength) == 0x000000, "Member 'RCActorScript_StartMoveFromPlayer::InLength' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPlayer, InAngle) == 0x000004, "Member 'RCActorScript_StartMoveFromPlayer::InAngle' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPlayer, InHeight) == 0x000008, "Member 'RCActorScript_StartMoveFromPlayer::InHeight' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPlayer, SpeedScale) == 0x00000C, "Member 'RCActorScript_StartMoveFromPlayer::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPlayer, bEndPlayerYaw) == 0x000010, "Member 'RCActorScript_StartMoveFromPlayer::bEndPlayerYaw' has a wrong offset!");

// Function RC.RCActorScript.StartMoveFromPosition
// 0x0024 (0x0024 - 0x0000)
struct RCActorScript_StartMoveFromPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndChangeYawPosition;                              // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActorScript_StartMoveFromPosition) == 0x000004, "Wrong alignment on RCActorScript_StartMoveFromPosition");
static_assert(sizeof(RCActorScript_StartMoveFromPosition) == 0x000024, "Wrong size on RCActorScript_StartMoveFromPosition");
static_assert(offsetof(RCActorScript_StartMoveFromPosition, InPosition) == 0x000000, "Member 'RCActorScript_StartMoveFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPosition, SpeedScale) == 0x00000C, "Member 'RCActorScript_StartMoveFromPosition::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPosition, InOffsetYaw) == 0x000010, "Member 'RCActorScript_StartMoveFromPosition::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPosition, bEndChangeYaw) == 0x000014, "Member 'RCActorScript_StartMoveFromPosition::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPosition, EndChangeYawPosition) == 0x000018, "Member 'RCActorScript_StartMoveFromPosition::EndChangeYawPosition' has a wrong offset!");

// Function RC.RCActorScript.StartMoveFromPositionList
// 0x0020 (0x0020 - 0x0000)
struct RCActorScript_StartMoveFromPositionList final
{
public:
	TArray<struct FRCScriptActorMoveInfo>         InMoveInfoList;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartMoveInfoNum;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstWarp;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCActorScript_StartMoveFromPositionList) == 0x000008, "Wrong alignment on RCActorScript_StartMoveFromPositionList");
static_assert(sizeof(RCActorScript_StartMoveFromPositionList) == 0x000020, "Wrong size on RCActorScript_StartMoveFromPositionList");
static_assert(offsetof(RCActorScript_StartMoveFromPositionList, InMoveInfoList) == 0x000000, "Member 'RCActorScript_StartMoveFromPositionList::InMoveInfoList' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPositionList, StartMoveInfoNum) == 0x000010, "Member 'RCActorScript_StartMoveFromPositionList::StartMoveInfoNum' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPositionList, bEndChangeYaw) == 0x000014, "Member 'RCActorScript_StartMoveFromPositionList::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPositionList, InOffsetYaw) == 0x000018, "Member 'RCActorScript_StartMoveFromPositionList::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPositionList, bFirstWarp) == 0x00001C, "Member 'RCActorScript_StartMoveFromPositionList::bFirstWarp' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromPositionList, bLoop) == 0x00001D, "Member 'RCActorScript_StartMoveFromPositionList::bLoop' has a wrong offset!");

// Function RC.RCActorScript.StartMoveFromTargetPointName
// 0x0024 (0x0024 - 0x0000)
struct RCActorScript_StartMoveFromTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InChangeYawSpeedScale;                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCActorScript_StartMoveFromTargetPointName) == 0x000004, "Wrong alignment on RCActorScript_StartMoveFromTargetPointName");
static_assert(sizeof(RCActorScript_StartMoveFromTargetPointName) == 0x000024, "Wrong size on RCActorScript_StartMoveFromTargetPointName");
static_assert(offsetof(RCActorScript_StartMoveFromTargetPointName, InPointName) == 0x000000, "Member 'RCActorScript_StartMoveFromTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromTargetPointName, SpeedScale) == 0x000008, "Member 'RCActorScript_StartMoveFromTargetPointName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromTargetPointName, InOffsetPos) == 0x00000C, "Member 'RCActorScript_StartMoveFromTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromTargetPointName, bEndChangeYaw) == 0x000018, "Member 'RCActorScript_StartMoveFromTargetPointName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromTargetPointName, InOffsetYaw) == 0x00001C, "Member 'RCActorScript_StartMoveFromTargetPointName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartMoveFromTargetPointName, InChangeYawSpeedScale) == 0x000020, "Member 'RCActorScript_StartMoveFromTargetPointName::InChangeYawSpeedScale' has a wrong offset!");

// Function RC.RCActorScript.StartRotationFromCharacter
// 0x0020 (0x0020 - 0x0000)
struct RCActorScript_StartRotationFromCharacter final
{
public:
	class FName                                   InTargetCharacterName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCActorScript_StartRotationFromCharacter) == 0x000004, "Wrong alignment on RCActorScript_StartRotationFromCharacter");
static_assert(sizeof(RCActorScript_StartRotationFromCharacter) == 0x000020, "Wrong size on RCActorScript_StartRotationFromCharacter");
static_assert(offsetof(RCActorScript_StartRotationFromCharacter, InTargetCharacterName) == 0x000000, "Member 'RCActorScript_StartRotationFromCharacter::InTargetCharacterName' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromCharacter, SpeedScale) == 0x000008, "Member 'RCActorScript_StartRotationFromCharacter::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromCharacter, InOffsetPos) == 0x00000C, "Member 'RCActorScript_StartRotationFromCharacter::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromCharacter, InOffsetYaw) == 0x000018, "Member 'RCActorScript_StartRotationFromCharacter::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromCharacter, bDirect) == 0x00001C, "Member 'RCActorScript_StartRotationFromCharacter::bDirect' has a wrong offset!");

// Function RC.RCActorScript.StartRotationFromPosition
// 0x0018 (0x0018 - 0x0000)
struct RCActorScript_StartRotationFromPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCActorScript_StartRotationFromPosition) == 0x000004, "Wrong alignment on RCActorScript_StartRotationFromPosition");
static_assert(sizeof(RCActorScript_StartRotationFromPosition) == 0x000018, "Wrong size on RCActorScript_StartRotationFromPosition");
static_assert(offsetof(RCActorScript_StartRotationFromPosition, InPosition) == 0x000000, "Member 'RCActorScript_StartRotationFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromPosition, SpeedScale) == 0x00000C, "Member 'RCActorScript_StartRotationFromPosition::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromPosition, InOffsetYaw) == 0x000010, "Member 'RCActorScript_StartRotationFromPosition::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromPosition, bDirect) == 0x000014, "Member 'RCActorScript_StartRotationFromPosition::bDirect' has a wrong offset!");

// Function RC.RCActorScript.StartRotationFromTargetPointName
// 0x0020 (0x0020 - 0x0000)
struct RCActorScript_StartRotationFromTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCActorScript_StartRotationFromTargetPointName) == 0x000004, "Wrong alignment on RCActorScript_StartRotationFromTargetPointName");
static_assert(sizeof(RCActorScript_StartRotationFromTargetPointName) == 0x000020, "Wrong size on RCActorScript_StartRotationFromTargetPointName");
static_assert(offsetof(RCActorScript_StartRotationFromTargetPointName, InPointName) == 0x000000, "Member 'RCActorScript_StartRotationFromTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromTargetPointName, SpeedScale) == 0x000008, "Member 'RCActorScript_StartRotationFromTargetPointName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromTargetPointName, InOffsetPos) == 0x00000C, "Member 'RCActorScript_StartRotationFromTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromTargetPointName, InOffsetYaw) == 0x000018, "Member 'RCActorScript_StartRotationFromTargetPointName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationFromTargetPointName, bDirect) == 0x00001C, "Member 'RCActorScript_StartRotationFromTargetPointName::bDirect' has a wrong offset!");

// Function RC.RCActorScript.StartRotationYaw
// 0x000C (0x000C - 0x0000)
struct RCActorScript_StartRotationYaw final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCActorScript_StartRotationYaw) == 0x000004, "Wrong alignment on RCActorScript_StartRotationYaw");
static_assert(sizeof(RCActorScript_StartRotationYaw) == 0x00000C, "Wrong size on RCActorScript_StartRotationYaw");
static_assert(offsetof(RCActorScript_StartRotationYaw, Yaw) == 0x000000, "Member 'RCActorScript_StartRotationYaw::Yaw' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationYaw, SpeedScale) == 0x000004, "Member 'RCActorScript_StartRotationYaw::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCActorScript_StartRotationYaw, bDirect) == 0x000008, "Member 'RCActorScript_StartRotationYaw::bDirect' has a wrong offset!");

// Function RC.RCStartupWidget.IsPlayingFinishAnimation
// 0x0001 (0x0001 - 0x0000)
struct RCStartupWidget_IsPlayingFinishAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCStartupWidget_IsPlayingFinishAnimation) == 0x000001, "Wrong alignment on RCStartupWidget_IsPlayingFinishAnimation");
static_assert(sizeof(RCStartupWidget_IsPlayingFinishAnimation) == 0x000001, "Wrong size on RCStartupWidget_IsPlayingFinishAnimation");
static_assert(offsetof(RCStartupWidget_IsPlayingFinishAnimation, ReturnValue) == 0x000000, "Member 'RCStartupWidget_IsPlayingFinishAnimation::ReturnValue' has a wrong offset!");

// Function RC.RCStartupWidget.IsPlayingStartAnimation
// 0x0001 (0x0001 - 0x0000)
struct RCStartupWidget_IsPlayingStartAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCStartupWidget_IsPlayingStartAnimation) == 0x000001, "Wrong alignment on RCStartupWidget_IsPlayingStartAnimation");
static_assert(sizeof(RCStartupWidget_IsPlayingStartAnimation) == 0x000001, "Wrong size on RCStartupWidget_IsPlayingStartAnimation");
static_assert(offsetof(RCStartupWidget_IsPlayingStartAnimation, ReturnValue) == 0x000000, "Member 'RCStartupWidget_IsPlayingStartAnimation::ReturnValue' has a wrong offset!");

// Function RC.RCStartupWidget.IsPlayingWaitAnimation
// 0x0001 (0x0001 - 0x0000)
struct RCStartupWidget_IsPlayingWaitAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCStartupWidget_IsPlayingWaitAnimation) == 0x000001, "Wrong alignment on RCStartupWidget_IsPlayingWaitAnimation");
static_assert(sizeof(RCStartupWidget_IsPlayingWaitAnimation) == 0x000001, "Wrong size on RCStartupWidget_IsPlayingWaitAnimation");
static_assert(offsetof(RCStartupWidget_IsPlayingWaitAnimation, ReturnValue) == 0x000000, "Member 'RCStartupWidget_IsPlayingWaitAnimation::ReturnValue' has a wrong offset!");

// Function RC.RCStartupWidget.IsSkip
// 0x0001 (0x0001 - 0x0000)
struct RCStartupWidget_IsSkip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCStartupWidget_IsSkip) == 0x000001, "Wrong alignment on RCStartupWidget_IsSkip");
static_assert(sizeof(RCStartupWidget_IsSkip) == 0x000001, "Wrong size on RCStartupWidget_IsSkip");
static_assert(offsetof(RCStartupWidget_IsSkip, ReturnValue) == 0x000000, "Member 'RCStartupWidget_IsSkip::ReturnValue' has a wrong offset!");

// Function RC.RCStartupWidget.SetSkippableTime
// 0x0004 (0x0004 - 0x0000)
struct RCStartupWidget_SetSkippableTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCStartupWidget_SetSkippableTime) == 0x000004, "Wrong alignment on RCStartupWidget_SetSkippableTime");
static_assert(sizeof(RCStartupWidget_SetSkippableTime) == 0x000004, "Wrong size on RCStartupWidget_SetSkippableTime");
static_assert(offsetof(RCStartupWidget_SetSkippableTime, Time) == 0x000000, "Member 'RCStartupWidget_SetSkippableTime::Time' has a wrong offset!");

// Function RC.RCStartupWidget.SetTimeCount
// 0x0001 (0x0001 - 0x0000)
struct RCStartupWidget_SetTimeCount final
{
public:
	bool                                          isCount;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCStartupWidget_SetTimeCount) == 0x000001, "Wrong alignment on RCStartupWidget_SetTimeCount");
static_assert(sizeof(RCStartupWidget_SetTimeCount) == 0x000001, "Wrong size on RCStartupWidget_SetTimeCount");
static_assert(offsetof(RCStartupWidget_SetTimeCount, isCount) == 0x000000, "Member 'RCStartupWidget_SetTimeCount::isCount' has a wrong offset!");

// Function RC.RCStartupAutoSave.IsHyoukaban
// 0x0001 (0x0001 - 0x0000)
struct RCStartupAutoSave_IsHyoukaban final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCStartupAutoSave_IsHyoukaban) == 0x000001, "Wrong alignment on RCStartupAutoSave_IsHyoukaban");
static_assert(sizeof(RCStartupAutoSave_IsHyoukaban) == 0x000001, "Wrong size on RCStartupAutoSave_IsHyoukaban");
static_assert(offsetof(RCStartupAutoSave_IsHyoukaban, ReturnValue) == 0x000000, "Member 'RCStartupAutoSave_IsHyoukaban::ReturnValue' has a wrong offset!");

// Function RC.RCHUD.DebugCheckDrawHUD
// 0x0001 (0x0001 - 0x0000)
struct RCHUD_DebugCheckDrawHUD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCHUD_DebugCheckDrawHUD) == 0x000001, "Wrong alignment on RCHUD_DebugCheckDrawHUD");
static_assert(sizeof(RCHUD_DebugCheckDrawHUD) == 0x000001, "Wrong size on RCHUD_DebugCheckDrawHUD");
static_assert(offsetof(RCHUD_DebugCheckDrawHUD, ReturnValue) == 0x000000, "Member 'RCHUD_DebugCheckDrawHUD::ReturnValue' has a wrong offset!");

// Function RC.RCHUD.DebugSetDrawHUD
// 0x0001 (0x0001 - 0x0000)
struct RCHUD_DebugSetDrawHUD final
{
public:
	bool                                          in_bDraw;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCHUD_DebugSetDrawHUD) == 0x000001, "Wrong alignment on RCHUD_DebugSetDrawHUD");
static_assert(sizeof(RCHUD_DebugSetDrawHUD) == 0x000001, "Wrong size on RCHUD_DebugSetDrawHUD");
static_assert(offsetof(RCHUD_DebugSetDrawHUD, in_bDraw) == 0x000000, "Member 'RCHUD_DebugSetDrawHUD::in_bDraw' has a wrong offset!");

// Function RC.RCUiFaderHUD.CheckSaveLoadFinished
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_CheckSaveLoadFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_CheckSaveLoadFinished) == 0x000001, "Wrong alignment on RCUiFaderHUD_CheckSaveLoadFinished");
static_assert(sizeof(RCUiFaderHUD_CheckSaveLoadFinished) == 0x000001, "Wrong size on RCUiFaderHUD_CheckSaveLoadFinished");
static_assert(offsetof(RCUiFaderHUD_CheckSaveLoadFinished, ReturnValue) == 0x000000, "Member 'RCUiFaderHUD_CheckSaveLoadFinished::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUD.IsAllWidgetsHidden
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_IsAllWidgetsHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_IsAllWidgetsHidden) == 0x000001, "Wrong alignment on RCUiFaderHUD_IsAllWidgetsHidden");
static_assert(sizeof(RCUiFaderHUD_IsAllWidgetsHidden) == 0x000001, "Wrong size on RCUiFaderHUD_IsAllWidgetsHidden");
static_assert(offsetof(RCUiFaderHUD_IsAllWidgetsHidden, ReturnValue) == 0x000000, "Member 'RCUiFaderHUD_IsAllWidgetsHidden::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUD.IsAllWidgetsHiddenEnable
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_IsAllWidgetsHiddenEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_IsAllWidgetsHiddenEnable) == 0x000001, "Wrong alignment on RCUiFaderHUD_IsAllWidgetsHiddenEnable");
static_assert(sizeof(RCUiFaderHUD_IsAllWidgetsHiddenEnable) == 0x000001, "Wrong size on RCUiFaderHUD_IsAllWidgetsHiddenEnable");
static_assert(offsetof(RCUiFaderHUD_IsAllWidgetsHiddenEnable, ReturnValue) == 0x000000, "Member 'RCUiFaderHUD_IsAllWidgetsHiddenEnable::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUD.Option_CreateWidget
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_Option_CreateWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_Option_CreateWidget) == 0x000001, "Wrong alignment on RCUiFaderHUD_Option_CreateWidget");
static_assert(sizeof(RCUiFaderHUD_Option_CreateWidget) == 0x000001, "Wrong size on RCUiFaderHUD_Option_CreateWidget");
static_assert(offsetof(RCUiFaderHUD_Option_CreateWidget, ReturnValue) == 0x000000, "Member 'RCUiFaderHUD_Option_CreateWidget::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUD.Option_IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_Option_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_Option_IsFinished) == 0x000001, "Wrong alignment on RCUiFaderHUD_Option_IsFinished");
static_assert(sizeof(RCUiFaderHUD_Option_IsFinished) == 0x000001, "Wrong size on RCUiFaderHUD_Option_IsFinished");
static_assert(offsetof(RCUiFaderHUD_Option_IsFinished, ReturnValue) == 0x000000, "Member 'RCUiFaderHUD_Option_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUD.Option_Load
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_Option_Load final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_Option_Load) == 0x000001, "Wrong alignment on RCUiFaderHUD_Option_Load");
static_assert(sizeof(RCUiFaderHUD_Option_Load) == 0x000001, "Wrong size on RCUiFaderHUD_Option_Load");
static_assert(offsetof(RCUiFaderHUD_Option_Load, ReturnValue) == 0x000000, "Member 'RCUiFaderHUD_Option_Load::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUD.SaveLoadFinish
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_SaveLoadFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_SaveLoadFinish) == 0x000001, "Wrong alignment on RCUiFaderHUD_SaveLoadFinish");
static_assert(sizeof(RCUiFaderHUD_SaveLoadFinish) == 0x000001, "Wrong size on RCUiFaderHUD_SaveLoadFinish");
static_assert(offsetof(RCUiFaderHUD_SaveLoadFinish, ReturnValue) == 0x000000, "Member 'RCUiFaderHUD_SaveLoadFinish::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUD.SetAllWidgetsHidden
// 0x0002 (0x0002 - 0x0000)
struct RCUiFaderHUD_SetAllWidgetsHidden final
{
public:
	bool                                          bInHidden;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_SetAllWidgetsHidden) == 0x000001, "Wrong alignment on RCUiFaderHUD_SetAllWidgetsHidden");
static_assert(sizeof(RCUiFaderHUD_SetAllWidgetsHidden) == 0x000002, "Wrong size on RCUiFaderHUD_SetAllWidgetsHidden");
static_assert(offsetof(RCUiFaderHUD_SetAllWidgetsHidden, bInHidden) == 0x000000, "Member 'RCUiFaderHUD_SetAllWidgetsHidden::bInHidden' has a wrong offset!");
static_assert(offsetof(RCUiFaderHUD_SetAllWidgetsHidden, ReturnValue) == 0x000001, "Member 'RCUiFaderHUD_SetAllWidgetsHidden::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUD.SetAllWidgetsHiddenEnable
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_SetAllWidgetsHiddenEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_SetAllWidgetsHiddenEnable) == 0x000001, "Wrong alignment on RCUiFaderHUD_SetAllWidgetsHiddenEnable");
static_assert(sizeof(RCUiFaderHUD_SetAllWidgetsHiddenEnable) == 0x000001, "Wrong size on RCUiFaderHUD_SetAllWidgetsHiddenEnable");
static_assert(offsetof(RCUiFaderHUD_SetAllWidgetsHiddenEnable, bInEnable) == 0x000000, "Member 'RCUiFaderHUD_SetAllWidgetsHiddenEnable::bInEnable' has a wrong offset!");

// Function RC.RCUiFaderHUD.SetSaveLoadFinished
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_SetSaveLoadFinished final
{
public:
	bool                                          isFinish;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_SetSaveLoadFinished) == 0x000001, "Wrong alignment on RCUiFaderHUD_SetSaveLoadFinished");
static_assert(sizeof(RCUiFaderHUD_SetSaveLoadFinished) == 0x000001, "Wrong size on RCUiFaderHUD_SetSaveLoadFinished");
static_assert(offsetof(RCUiFaderHUD_SetSaveLoadFinished, isFinish) == 0x000000, "Member 'RCUiFaderHUD_SetSaveLoadFinished::isFinish' has a wrong offset!");

// Function RC.RCUiFaderHUD.StartSceneChange
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUD_StartSceneChange final
{
public:
	ERCSceneChangeType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUD_StartSceneChange) == 0x000001, "Wrong alignment on RCUiFaderHUD_StartSceneChange");
static_assert(sizeof(RCUiFaderHUD_StartSceneChange) == 0x000001, "Wrong size on RCUiFaderHUD_StartSceneChange");
static_assert(offsetof(RCUiFaderHUD_StartSceneChange, Type) == 0x000000, "Member 'RCUiFaderHUD_StartSceneChange::Type' has a wrong offset!");

// Function RC.RCNzUiMessageWindow.GetMessStatusInt
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiMessageWindow_GetMessStatusInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiMessageWindow_GetMessStatusInt) == 0x000004, "Wrong alignment on RCNzUiMessageWindow_GetMessStatusInt");
static_assert(sizeof(RCNzUiMessageWindow_GetMessStatusInt) == 0x000004, "Wrong size on RCNzUiMessageWindow_GetMessStatusInt");
static_assert(offsetof(RCNzUiMessageWindow_GetMessStatusInt, ReturnValue) == 0x000000, "Member 'RCNzUiMessageWindow_GetMessStatusInt::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiMessageWindow.GetSkipTyping
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiMessageWindow_GetSkipTyping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiMessageWindow_GetSkipTyping) == 0x000001, "Wrong alignment on RCNzUiMessageWindow_GetSkipTyping");
static_assert(sizeof(RCNzUiMessageWindow_GetSkipTyping) == 0x000001, "Wrong size on RCNzUiMessageWindow_GetSkipTyping");
static_assert(offsetof(RCNzUiMessageWindow_GetSkipTyping, ReturnValue) == 0x000000, "Member 'RCNzUiMessageWindow_GetSkipTyping::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiMessageWindow.Open
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiMessageWindow_Open final
{
public:
	class FName                                   InNameID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFacialID;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiMessageWindow_Open) == 0x000004, "Wrong alignment on RCNzUiMessageWindow_Open");
static_assert(sizeof(RCNzUiMessageWindow_Open) == 0x000010, "Wrong size on RCNzUiMessageWindow_Open");
static_assert(offsetof(RCNzUiMessageWindow_Open, InNameID) == 0x000000, "Member 'RCNzUiMessageWindow_Open::InNameID' has a wrong offset!");
static_assert(offsetof(RCNzUiMessageWindow_Open, InFacialID) == 0x000008, "Member 'RCNzUiMessageWindow_Open::InFacialID' has a wrong offset!");

// Function RC.RCNzUiMessageWindow.SetShakeData
// 0x000C (0x000C - 0x0000)
struct RCNzUiMessageWindow_SetShakeData final
{
public:
	float                                         InWidthX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWidthY;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InInterval;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiMessageWindow_SetShakeData) == 0x000004, "Wrong alignment on RCNzUiMessageWindow_SetShakeData");
static_assert(sizeof(RCNzUiMessageWindow_SetShakeData) == 0x00000C, "Wrong size on RCNzUiMessageWindow_SetShakeData");
static_assert(offsetof(RCNzUiMessageWindow_SetShakeData, InWidthX) == 0x000000, "Member 'RCNzUiMessageWindow_SetShakeData::InWidthX' has a wrong offset!");
static_assert(offsetof(RCNzUiMessageWindow_SetShakeData, InWidthY) == 0x000004, "Member 'RCNzUiMessageWindow_SetShakeData::InWidthY' has a wrong offset!");
static_assert(offsetof(RCNzUiMessageWindow_SetShakeData, InInterval) == 0x000008, "Member 'RCNzUiMessageWindow_SetShakeData::InInterval' has a wrong offset!");

// Function RC.RCAdvHUD.GetPressedDecideButtonSimpleResult
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_GetPressedDecideButtonSimpleResult final
{
public:
	ERCAdvHUDPressedDecideResult                  InResult;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetPressedDecideButtonSimpleResult) == 0x000001, "Wrong alignment on RCAdvHUD_GetPressedDecideButtonSimpleResult");
static_assert(sizeof(RCAdvHUD_GetPressedDecideButtonSimpleResult) == 0x000002, "Wrong size on RCAdvHUD_GetPressedDecideButtonSimpleResult");
static_assert(offsetof(RCAdvHUD_GetPressedDecideButtonSimpleResult, InResult) == 0x000000, "Member 'RCAdvHUD_GetPressedDecideButtonSimpleResult::InResult' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_GetPressedDecideButtonSimpleResult, ReturnValue) == 0x000001, "Member 'RCAdvHUD_GetPressedDecideButtonSimpleResult::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.AddLogAtSkip
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_AddLogAtSkip final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_AddLogAtSkip) == 0x000004, "Wrong alignment on RCAdvHUD_AddLogAtSkip");
static_assert(sizeof(RCAdvHUD_AddLogAtSkip) == 0x000008, "Wrong size on RCAdvHUD_AddLogAtSkip");
static_assert(offsetof(RCAdvHUD_AddLogAtSkip, InTextID) == 0x000000, "Member 'RCAdvHUD_AddLogAtSkip::InTextID' has a wrong offset!");

// Function RC.RCAdvHUD.AreaMapMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_AreaMapMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_AreaMapMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_AreaMapMenuFinish");
static_assert(sizeof(RCAdvHUD_AreaMapMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_AreaMapMenuFinish");
static_assert(offsetof(RCAdvHUD_AreaMapMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_AreaMapMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.AreaMapMenuStart
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_AreaMapMenuStart final
{
public:
	bool                                          bShortcut;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InLocationID;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_AreaMapMenuStart) == 0x000004, "Wrong alignment on RCAdvHUD_AreaMapMenuStart");
static_assert(sizeof(RCAdvHUD_AreaMapMenuStart) == 0x000010, "Wrong size on RCAdvHUD_AreaMapMenuStart");
static_assert(offsetof(RCAdvHUD_AreaMapMenuStart, bShortcut) == 0x000000, "Member 'RCAdvHUD_AreaMapMenuStart::bShortcut' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_AreaMapMenuStart, InLocationID) == 0x000004, "Member 'RCAdvHUD_AreaMapMenuStart::InLocationID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_AreaMapMenuStart, ReturnValue) == 0x00000C, "Member 'RCAdvHUD_AreaMapMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.BackLogFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_BackLogFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_BackLogFinish) == 0x000001, "Wrong alignment on RCAdvHUD_BackLogFinish");
static_assert(sizeof(RCAdvHUD_BackLogFinish) == 0x000001, "Wrong size on RCAdvHUD_BackLogFinish");
static_assert(offsetof(RCAdvHUD_BackLogFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_BackLogFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.BackLogStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_BackLogStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_BackLogStart) == 0x000001, "Wrong alignment on RCAdvHUD_BackLogStart");
static_assert(sizeof(RCAdvHUD_BackLogStart) == 0x000001, "Wrong size on RCAdvHUD_BackLogStart");
static_assert(offsetof(RCAdvHUD_BackLogStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_BackLogStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.BattleKagiSelectMenuStart
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_BattleKagiSelectMenuStart final
{
public:
	TArray<class FName>                           InKaiKagiIDArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InFocusIndex;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_BattleKagiSelectMenuStart) == 0x000008, "Wrong alignment on RCAdvHUD_BattleKagiSelectMenuStart");
static_assert(sizeof(RCAdvHUD_BattleKagiSelectMenuStart) == 0x000018, "Wrong size on RCAdvHUD_BattleKagiSelectMenuStart");
static_assert(offsetof(RCAdvHUD_BattleKagiSelectMenuStart, InKaiKagiIDArray) == 0x000000, "Member 'RCAdvHUD_BattleKagiSelectMenuStart::InKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BattleKagiSelectMenuStart, InFocusIndex) == 0x000010, "Member 'RCAdvHUD_BattleKagiSelectMenuStart::InFocusIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BattleKagiSelectMenuStart, ReturnValue) == 0x000014, "Member 'RCAdvHUD_BattleKagiSelectMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.BusStop_IsVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_BusStop_IsVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_BusStop_IsVisible) == 0x000008, "Wrong alignment on RCAdvHUD_BusStop_IsVisible");
static_assert(sizeof(RCAdvHUD_BusStop_IsVisible) == 0x000010, "Wrong size on RCAdvHUD_BusStop_IsVisible");
static_assert(offsetof(RCAdvHUD_BusStop_IsVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUD_BusStop_IsVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BusStop_IsVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUD_BusStop_IsVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.BusStop_SetData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUD_BusStop_SetData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLooksLikeUsable;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_BusStop_SetData) == 0x000008, "Wrong alignment on RCAdvHUD_BusStop_SetData");
static_assert(sizeof(RCAdvHUD_BusStop_SetData) == 0x000020, "Wrong size on RCAdvHUD_BusStop_SetData");
static_assert(offsetof(RCAdvHUD_BusStop_SetData, InCheckActor) == 0x000000, "Member 'RCAdvHUD_BusStop_SetData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BusStop_SetData, InTextID) == 0x000008, "Member 'RCAdvHUD_BusStop_SetData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BusStop_SetData, bInDraw) == 0x000010, "Member 'RCAdvHUD_BusStop_SetData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BusStop_SetData, bInLooksLikeUsable) == 0x000011, "Member 'RCAdvHUD_BusStop_SetData::bInLooksLikeUsable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BusStop_SetData, bInAccessable) == 0x000012, "Member 'RCAdvHUD_BusStop_SetData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BusStop_SetData, InScale) == 0x000014, "Member 'RCAdvHUD_BusStop_SetData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BusStop_SetData, ReturnValue) == 0x000018, "Member 'RCAdvHUD_BusStop_SetData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.BusStop_SetEnable
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_BusStop_SetEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_BusStop_SetEnable) == 0x000001, "Wrong alignment on RCAdvHUD_BusStop_SetEnable");
static_assert(sizeof(RCAdvHUD_BusStop_SetEnable) == 0x000002, "Wrong size on RCAdvHUD_BusStop_SetEnable");
static_assert(offsetof(RCAdvHUD_BusStop_SetEnable, bInEnable) == 0x000000, "Member 'RCAdvHUD_BusStop_SetEnable::bInEnable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_BusStop_SetEnable, ReturnValue) == 0x000001, "Member 'RCAdvHUD_BusStop_SetEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ButtonGuideCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ButtonGuideCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ButtonGuideCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_ButtonGuideCheckFinished");
static_assert(sizeof(RCAdvHUD_ButtonGuideCheckFinished) == 0x000001, "Wrong size on RCAdvHUD_ButtonGuideCheckFinished");
static_assert(offsetof(RCAdvHUD_ButtonGuideCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ButtonGuideCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ButtonGuideCheckStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ButtonGuideCheckStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ButtonGuideCheckStarted) == 0x000001, "Wrong alignment on RCAdvHUD_ButtonGuideCheckStarted");
static_assert(sizeof(RCAdvHUD_ButtonGuideCheckStarted) == 0x000001, "Wrong size on RCAdvHUD_ButtonGuideCheckStarted");
static_assert(offsetof(RCAdvHUD_ButtonGuideCheckStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ButtonGuideCheckStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ButtonGuideFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ButtonGuideFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ButtonGuideFinish) == 0x000001, "Wrong alignment on RCAdvHUD_ButtonGuideFinish");
static_assert(sizeof(RCAdvHUD_ButtonGuideFinish) == 0x000001, "Wrong size on RCAdvHUD_ButtonGuideFinish");
static_assert(offsetof(RCAdvHUD_ButtonGuideFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ButtonGuideFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ButtonGuideStart
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_ButtonGuideStart final
{
public:
	class FName                                   InModeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ButtonGuideStart) == 0x000004, "Wrong alignment on RCAdvHUD_ButtonGuideStart");
static_assert(sizeof(RCAdvHUD_ButtonGuideStart) == 0x00000C, "Wrong size on RCAdvHUD_ButtonGuideStart");
static_assert(offsetof(RCAdvHUD_ButtonGuideStart, InModeID) == 0x000000, "Member 'RCAdvHUD_ButtonGuideStart::InModeID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ButtonGuideStart, ReturnValue) == 0x000008, "Member 'RCAdvHUD_ButtonGuideStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ChangeArea_IsVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_ChangeArea_IsVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ChangeArea_IsVisible) == 0x000008, "Wrong alignment on RCAdvHUD_ChangeArea_IsVisible");
static_assert(sizeof(RCAdvHUD_ChangeArea_IsVisible) == 0x000010, "Wrong size on RCAdvHUD_ChangeArea_IsVisible");
static_assert(offsetof(RCAdvHUD_ChangeArea_IsVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUD_ChangeArea_IsVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ChangeArea_IsVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUD_ChangeArea_IsVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ChangeArea_SetData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUD_ChangeArea_SetData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDrawText;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ChangeArea_SetData) == 0x000008, "Wrong alignment on RCAdvHUD_ChangeArea_SetData");
static_assert(sizeof(RCAdvHUD_ChangeArea_SetData) == 0x000020, "Wrong size on RCAdvHUD_ChangeArea_SetData");
static_assert(offsetof(RCAdvHUD_ChangeArea_SetData, InCheckActor) == 0x000000, "Member 'RCAdvHUD_ChangeArea_SetData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ChangeArea_SetData, InTextID) == 0x000008, "Member 'RCAdvHUD_ChangeArea_SetData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ChangeArea_SetData, bInDraw) == 0x000010, "Member 'RCAdvHUD_ChangeArea_SetData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ChangeArea_SetData, bInDrawText) == 0x000011, "Member 'RCAdvHUD_ChangeArea_SetData::bInDrawText' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ChangeArea_SetData, InScale) == 0x000014, "Member 'RCAdvHUD_ChangeArea_SetData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ChangeArea_SetData, ReturnValue) == 0x000018, "Member 'RCAdvHUD_ChangeArea_SetData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ChangeArea_SetEnable
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_ChangeArea_SetEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ChangeArea_SetEnable) == 0x000001, "Wrong alignment on RCAdvHUD_ChangeArea_SetEnable");
static_assert(sizeof(RCAdvHUD_ChangeArea_SetEnable) == 0x000002, "Wrong size on RCAdvHUD_ChangeArea_SetEnable");
static_assert(offsetof(RCAdvHUD_ChangeArea_SetEnable, bInEnable) == 0x000000, "Member 'RCAdvHUD_ChangeArea_SetEnable::bInEnable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ChangeArea_SetEnable, ReturnValue) == 0x000001, "Member 'RCAdvHUD_ChangeArea_SetEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CharacterMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CharacterMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CharacterMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_CharacterMenuFinish");
static_assert(sizeof(RCAdvHUD_CharacterMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_CharacterMenuFinish");
static_assert(offsetof(RCAdvHUD_CharacterMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CharacterMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CharacterMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CharacterMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CharacterMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_CharacterMenuStart");
static_assert(sizeof(RCAdvHUD_CharacterMenuStart) == 0x000001, "Wrong size on RCAdvHUD_CharacterMenuStart");
static_assert(offsetof(RCAdvHUD_CharacterMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CharacterMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckAccessableWidgetReady
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckAccessableWidgetReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckAccessableWidgetReady) == 0x000001, "Wrong alignment on RCAdvHUD_CheckAccessableWidgetReady");
static_assert(sizeof(RCAdvHUD_CheckAccessableWidgetReady) == 0x000001, "Wrong size on RCAdvHUD_CheckAccessableWidgetReady");
static_assert(offsetof(RCAdvHUD_CheckAccessableWidgetReady, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckAccessableWidgetReady::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckAccessedWidgetWait
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckAccessedWidgetWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckAccessedWidgetWait) == 0x000001, "Wrong alignment on RCAdvHUD_CheckAccessedWidgetWait");
static_assert(sizeof(RCAdvHUD_CheckAccessedWidgetWait) == 0x000001, "Wrong size on RCAdvHUD_CheckAccessedWidgetWait");
static_assert(offsetof(RCAdvHUD_CheckAccessedWidgetWait, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckAccessedWidgetWait::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckAllAccessableWidgetsClosed
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_CheckAllAccessableWidgetsClosed final
{
public:
	bool                                          bInContainClosing;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckAllAccessableWidgetsClosed) == 0x000001, "Wrong alignment on RCAdvHUD_CheckAllAccessableWidgetsClosed");
static_assert(sizeof(RCAdvHUD_CheckAllAccessableWidgetsClosed) == 0x000002, "Wrong size on RCAdvHUD_CheckAllAccessableWidgetsClosed");
static_assert(offsetof(RCAdvHUD_CheckAllAccessableWidgetsClosed, bInContainClosing) == 0x000000, "Member 'RCAdvHUD_CheckAllAccessableWidgetsClosed::bInContainClosing' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CheckAllAccessableWidgetsClosed, ReturnValue) == 0x000001, "Member 'RCAdvHUD_CheckAllAccessableWidgetsClosed::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckAllAccessableWidgetsOpened
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckAllAccessableWidgetsOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckAllAccessableWidgetsOpened) == 0x000001, "Wrong alignment on RCAdvHUD_CheckAllAccessableWidgetsOpened");
static_assert(sizeof(RCAdvHUD_CheckAllAccessableWidgetsOpened) == 0x000001, "Wrong size on RCAdvHUD_CheckAllAccessableWidgetsOpened");
static_assert(offsetof(RCAdvHUD_CheckAllAccessableWidgetsOpened, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckAllAccessableWidgetsOpened::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckAllWidgetsClosed
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckAllWidgetsClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckAllWidgetsClosed) == 0x000001, "Wrong alignment on RCAdvHUD_CheckAllWidgetsClosed");
static_assert(sizeof(RCAdvHUD_CheckAllWidgetsClosed) == 0x000001, "Wrong size on RCAdvHUD_CheckAllWidgetsClosed");
static_assert(offsetof(RCAdvHUD_CheckAllWidgetsClosed, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckAllWidgetsClosed::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckAreaMapMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckAreaMapMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckAreaMapMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckAreaMapMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckAreaMapMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckAreaMapMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckAreaMapMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckAreaMapMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckAreaMapMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckAreaMapMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckAreaMapMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckAreaMapMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckAreaMapMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckAreaMapMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckAreaMapMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckAreaMapMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCharacterMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCharacterMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCharacterMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCharacterMenuClose");
static_assert(sizeof(RCAdvHUD_CheckCharacterMenuClose) == 0x000001, "Wrong size on RCAdvHUD_CheckCharacterMenuClose");
static_assert(offsetof(RCAdvHUD_CheckCharacterMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCharacterMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCharacterMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCharacterMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCharacterMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCharacterMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckCharacterMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckCharacterMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckCharacterMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCharacterMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCharacterMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCharacterMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCharacterMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCharacterMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckCharacterMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckCharacterMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckCharacterMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCharacterMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCollectionMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCollectionMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCollectionMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCollectionMenuClose");
static_assert(sizeof(RCAdvHUD_CheckCollectionMenuClose) == 0x000001, "Wrong size on RCAdvHUD_CheckCollectionMenuClose");
static_assert(offsetof(RCAdvHUD_CheckCollectionMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCollectionMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCollectionMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCollectionMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCollectionMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCollectionMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckCollectionMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckCollectionMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckCollectionMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCollectionMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCollectionMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCollectionMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCollectionMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCollectionMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckCollectionMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckCollectionMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckCollectionMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCollectionMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCollectionWindowStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCollectionWindowStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCollectionWindowStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCollectionWindowStarted");
static_assert(sizeof(RCAdvHUD_CheckCollectionWindowStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckCollectionWindowStarted");
static_assert(offsetof(RCAdvHUD_CheckCollectionWindowStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCollectionWindowStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCutInAnimFinishedAnim
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCutInAnimFinishedAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCutInAnimFinishedAnim) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCutInAnimFinishedAnim");
static_assert(sizeof(RCAdvHUD_CheckCutInAnimFinishedAnim) == 0x000001, "Wrong size on RCAdvHUD_CheckCutInAnimFinishedAnim");
static_assert(offsetof(RCAdvHUD_CheckCutInAnimFinishedAnim, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCutInAnimFinishedAnim::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCutInAnimLoadCompleted
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_CheckCutInAnimLoadCompleted final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_CheckCutInAnimLoadCompleted) == 0x000004, "Wrong alignment on RCAdvHUD_CheckCutInAnimLoadCompleted");
static_assert(sizeof(RCAdvHUD_CheckCutInAnimLoadCompleted) == 0x00000C, "Wrong size on RCAdvHUD_CheckCutInAnimLoadCompleted");
static_assert(offsetof(RCAdvHUD_CheckCutInAnimLoadCompleted, InCutInID) == 0x000000, "Member 'RCAdvHUD_CheckCutInAnimLoadCompleted::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CheckCutInAnimLoadCompleted, ReturnValue) == 0x000008, "Member 'RCAdvHUD_CheckCutInAnimLoadCompleted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCutInAnimNextEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCutInAnimNextEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCutInAnimNextEnable) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCutInAnimNextEnable");
static_assert(sizeof(RCAdvHUD_CheckCutInAnimNextEnable) == 0x000001, "Wrong size on RCAdvHUD_CheckCutInAnimNextEnable");
static_assert(offsetof(RCAdvHUD_CheckCutInAnimNextEnable, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCutInAnimNextEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCutInCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCutInCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCutInCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCutInCheckFinished");
static_assert(sizeof(RCAdvHUD_CheckCutInCheckFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckCutInCheckFinished");
static_assert(offsetof(RCAdvHUD_CheckCutInCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCutInCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckCutInCheckStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckCutInCheckStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckCutInCheckStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckCutInCheckStarted");
static_assert(sizeof(RCAdvHUD_CheckCutInCheckStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckCutInCheckStarted");
static_assert(offsetof(RCAdvHUD_CheckCutInCheckStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckCutInCheckStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckDetPointCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckDetPointCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckDetPointCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckDetPointCheckFinished");
static_assert(sizeof(RCAdvHUD_CheckDetPointCheckFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckDetPointCheckFinished");
static_assert(offsetof(RCAdvHUD_CheckDetPointCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckDetPointCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckDetPointCheckStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckDetPointCheckStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckDetPointCheckStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckDetPointCheckStarted");
static_assert(sizeof(RCAdvHUD_CheckDetPointCheckStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckDetPointCheckStarted");
static_assert(offsetof(RCAdvHUD_CheckDetPointCheckStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckDetPointCheckStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckFinishedKaiKagiSelect
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckFinishedKaiKagiSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckFinishedKaiKagiSelect) == 0x000001, "Wrong alignment on RCAdvHUD_CheckFinishedKaiKagiSelect");
static_assert(sizeof(RCAdvHUD_CheckFinishedKaiKagiSelect) == 0x000001, "Wrong size on RCAdvHUD_CheckFinishedKaiKagiSelect");
static_assert(offsetof(RCAdvHUD_CheckFinishedKaiKagiSelect, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckFinishedKaiKagiSelect::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckGlossaryMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckGlossaryMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckGlossaryMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckGlossaryMenuClose");
static_assert(sizeof(RCAdvHUD_CheckGlossaryMenuClose) == 0x000001, "Wrong size on RCAdvHUD_CheckGlossaryMenuClose");
static_assert(offsetof(RCAdvHUD_CheckGlossaryMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckGlossaryMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckGlossaryMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckGlossaryMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckGlossaryMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckGlossaryMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckGlossaryMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckGlossaryMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckGlossaryMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckGlossaryMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckGlossaryMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckGlossaryMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckGlossaryMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckGlossaryMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckGlossaryMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckGlossaryMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckGlossaryMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckGlossaryMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckInitialized) == 0x000001, "Wrong alignment on RCAdvHUD_CheckInitialized");
static_assert(sizeof(RCAdvHUD_CheckInitialized) == 0x000001, "Wrong size on RCAdvHUD_CheckInitialized");
static_assert(offsetof(RCAdvHUD_CheckInitialized, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckKagiMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckKagiMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckKagiMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckKagiMenuClose");
static_assert(sizeof(RCAdvHUD_CheckKagiMenuClose) == 0x000001, "Wrong size on RCAdvHUD_CheckKagiMenuClose");
static_assert(offsetof(RCAdvHUD_CheckKagiMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckKagiMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckKagiMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckKagiMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckKagiMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckKagiMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckKagiMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckKagiMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckKagiMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckKagiMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckKagiMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckKagiMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckKagiMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckKagiMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckKagiMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckKagiMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckKagiMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckKagiMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckKagiSelectMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckKagiSelectMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckKagiSelectMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckKagiSelectMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckKagiSelectMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckKagiSelectMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckKagiSelectMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckKagiSelectMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckKagiSelectMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckKagiSelectMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckKagiSelectMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckKagiSelectMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckKagiSelectMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckKagiSelectMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckKagiSelectMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckKagiSelectMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckMainQuestMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckMainQuestMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckMainQuestMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckMainQuestMenuClose");
static_assert(sizeof(RCAdvHUD_CheckMainQuestMenuClose) == 0x000001, "Wrong size on RCAdvHUD_CheckMainQuestMenuClose");
static_assert(offsetof(RCAdvHUD_CheckMainQuestMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckMainQuestMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckMainQuestMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckMainQuestMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckMainQuestMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckMainQuestMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckMainQuestMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckMainQuestMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckMainQuestMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckMainQuestMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckMainQuestMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckMainQuestMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckMainQuestMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckMainQuestMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckMainQuestMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckMainQuestMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckMainQuestMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckMainQuestMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckMenuGuideFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckMenuGuideFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckMenuGuideFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckMenuGuideFinished");
static_assert(sizeof(RCAdvHUD_CheckMenuGuideFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckMenuGuideFinished");
static_assert(offsetof(RCAdvHUD_CheckMenuGuideFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckMenuGuideFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckMenuGuideStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckMenuGuideStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckMenuGuideStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckMenuGuideStarted");
static_assert(sizeof(RCAdvHUD_CheckMenuGuideStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckMenuGuideStarted");
static_assert(offsetof(RCAdvHUD_CheckMenuGuideStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckMenuGuideStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckMovieSkipFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckMovieSkipFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckMovieSkipFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckMovieSkipFinished");
static_assert(sizeof(RCAdvHUD_CheckMovieSkipFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckMovieSkipFinished");
static_assert(offsetof(RCAdvHUD_CheckMovieSkipFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckMovieSkipFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckMovieSkipStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckMovieSkipStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckMovieSkipStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckMovieSkipStarted");
static_assert(sizeof(RCAdvHUD_CheckMovieSkipStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckMovieSkipStarted");
static_assert(offsetof(RCAdvHUD_CheckMovieSkipStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckMovieSkipStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckNzResultClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckNzResultClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckNzResultClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckNzResultClose");
static_assert(sizeof(RCAdvHUD_CheckNzResultClose) == 0x000001, "Wrong size on RCAdvHUD_CheckNzResultClose");
static_assert(offsetof(RCAdvHUD_CheckNzResultClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckNzResultClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckNzResultFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckNzResultFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckNzResultFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckNzResultFinished");
static_assert(sizeof(RCAdvHUD_CheckNzResultFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckNzResultFinished");
static_assert(offsetof(RCAdvHUD_CheckNzResultFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckNzResultFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckNzResultStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckNzResultStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckNzResultStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckNzResultStarted");
static_assert(sizeof(RCAdvHUD_CheckNzResultStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckNzResultStarted");
static_assert(offsetof(RCAdvHUD_CheckNzResultStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckNzResultStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckResearch
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckResearch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckResearch) == 0x000001, "Wrong alignment on RCAdvHUD_CheckResearch");
static_assert(sizeof(RCAdvHUD_CheckResearch) == 0x000001, "Wrong size on RCAdvHUD_CheckResearch");
static_assert(offsetof(RCAdvHUD_CheckResearch, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckResearch::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckResearchDetail
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckResearchDetail final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckResearchDetail) == 0x000001, "Wrong alignment on RCAdvHUD_CheckResearchDetail");
static_assert(sizeof(RCAdvHUD_CheckResearchDetail) == 0x000001, "Wrong size on RCAdvHUD_CheckResearchDetail");
static_assert(offsetof(RCAdvHUD_CheckResearchDetail, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckResearchDetail::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckResearchModeFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckResearchModeFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckResearchModeFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckResearchModeFinished");
static_assert(sizeof(RCAdvHUD_CheckResearchModeFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckResearchModeFinished");
static_assert(offsetof(RCAdvHUD_CheckResearchModeFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckResearchModeFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialSubtitle
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSequentialSubtitle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSequentialSubtitle) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSequentialSubtitle");
static_assert(sizeof(RCAdvHUD_CheckSequentialSubtitle) == 0x000001, "Wrong size on RCAdvHUD_CheckSequentialSubtitle");
static_assert(offsetof(RCAdvHUD_CheckSequentialSubtitle, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSequentialSubtitle::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialSubtitleCloseAtAllEnd
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSequentialSubtitleCloseAtAllEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSequentialSubtitleCloseAtAllEnd) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSequentialSubtitleCloseAtAllEnd");
static_assert(sizeof(RCAdvHUD_CheckSequentialSubtitleCloseAtAllEnd) == 0x000001, "Wrong size on RCAdvHUD_CheckSequentialSubtitleCloseAtAllEnd");
static_assert(offsetof(RCAdvHUD_CheckSequentialSubtitleCloseAtAllEnd, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSequentialSubtitleCloseAtAllEnd::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialSubtitleFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSequentialSubtitleFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSequentialSubtitleFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSequentialSubtitleFinished");
static_assert(sizeof(RCAdvHUD_CheckSequentialSubtitleFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckSequentialSubtitleFinished");
static_assert(offsetof(RCAdvHUD_CheckSequentialSubtitleFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSequentialSubtitleFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialSubtitleFinishedLastText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSequentialSubtitleFinishedLastText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSequentialSubtitleFinishedLastText) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSequentialSubtitleFinishedLastText");
static_assert(sizeof(RCAdvHUD_CheckSequentialSubtitleFinishedLastText) == 0x000001, "Wrong size on RCAdvHUD_CheckSequentialSubtitleFinishedLastText");
static_assert(offsetof(RCAdvHUD_CheckSequentialSubtitleFinishedLastText, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSequentialSubtitleFinishedLastText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialSubtitleFromSubtitleID
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_CheckSequentialSubtitleFromSubtitleID final
{
public:
	class FName                                   InSubtitleID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_CheckSequentialSubtitleFromSubtitleID) == 0x000004, "Wrong alignment on RCAdvHUD_CheckSequentialSubtitleFromSubtitleID");
static_assert(sizeof(RCAdvHUD_CheckSequentialSubtitleFromSubtitleID) == 0x00000C, "Wrong size on RCAdvHUD_CheckSequentialSubtitleFromSubtitleID");
static_assert(offsetof(RCAdvHUD_CheckSequentialSubtitleFromSubtitleID, InSubtitleID) == 0x000000, "Member 'RCAdvHUD_CheckSequentialSubtitleFromSubtitleID::InSubtitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CheckSequentialSubtitleFromSubtitleID, ReturnValue) == 0x000008, "Member 'RCAdvHUD_CheckSequentialSubtitleFromSubtitleID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialTalk
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSequentialTalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSequentialTalk) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSequentialTalk");
static_assert(sizeof(RCAdvHUD_CheckSequentialTalk) == 0x000001, "Wrong size on RCAdvHUD_CheckSequentialTalk");
static_assert(offsetof(RCAdvHUD_CheckSequentialTalk, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSequentialTalk::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialTalkCloseAtAllEnd
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSequentialTalkCloseAtAllEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSequentialTalkCloseAtAllEnd) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSequentialTalkCloseAtAllEnd");
static_assert(sizeof(RCAdvHUD_CheckSequentialTalkCloseAtAllEnd) == 0x000001, "Wrong size on RCAdvHUD_CheckSequentialTalkCloseAtAllEnd");
static_assert(offsetof(RCAdvHUD_CheckSequentialTalkCloseAtAllEnd, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSequentialTalkCloseAtAllEnd::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialTalkFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSequentialTalkFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSequentialTalkFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSequentialTalkFinished");
static_assert(sizeof(RCAdvHUD_CheckSequentialTalkFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckSequentialTalkFinished");
static_assert(offsetof(RCAdvHUD_CheckSequentialTalkFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSequentialTalkFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialTalkFinishedLastText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSequentialTalkFinishedLastText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSequentialTalkFinishedLastText) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSequentialTalkFinishedLastText");
static_assert(sizeof(RCAdvHUD_CheckSequentialTalkFinishedLastText) == 0x000001, "Wrong size on RCAdvHUD_CheckSequentialTalkFinishedLastText");
static_assert(offsetof(RCAdvHUD_CheckSequentialTalkFinishedLastText, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSequentialTalkFinishedLastText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialTalkFromTalkID
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_CheckSequentialTalkFromTalkID final
{
public:
	class FName                                   InTalkID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_CheckSequentialTalkFromTalkID) == 0x000004, "Wrong alignment on RCAdvHUD_CheckSequentialTalkFromTalkID");
static_assert(sizeof(RCAdvHUD_CheckSequentialTalkFromTalkID) == 0x00000C, "Wrong size on RCAdvHUD_CheckSequentialTalkFromTalkID");
static_assert(offsetof(RCAdvHUD_CheckSequentialTalkFromTalkID, InTalkID) == 0x000000, "Member 'RCAdvHUD_CheckSequentialTalkFromTalkID::InTalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CheckSequentialTalkFromTalkID, ReturnValue) == 0x000008, "Member 'RCAdvHUD_CheckSequentialTalkFromTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSequentialTalkSuspending
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSequentialTalkSuspending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSequentialTalkSuspending) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSequentialTalkSuspending");
static_assert(sizeof(RCAdvHUD_CheckSequentialTalkSuspending) == 0x000001, "Wrong size on RCAdvHUD_CheckSequentialTalkSuspending");
static_assert(offsetof(RCAdvHUD_CheckSequentialTalkSuspending, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSequentialTalkSuspending::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSkillGetInterval
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSkillGetInterval final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSkillGetInterval) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSkillGetInterval");
static_assert(sizeof(RCAdvHUD_CheckSkillGetInterval) == 0x000001, "Wrong size on RCAdvHUD_CheckSkillGetInterval");
static_assert(offsetof(RCAdvHUD_CheckSkillGetInterval, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSkillGetInterval::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSkillMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSkillMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSkillMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSkillMenuClose");
static_assert(sizeof(RCAdvHUD_CheckSkillMenuClose) == 0x000001, "Wrong size on RCAdvHUD_CheckSkillMenuClose");
static_assert(offsetof(RCAdvHUD_CheckSkillMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSkillMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSkillMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSkillMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSkillMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSkillMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckSkillMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckSkillMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckSkillMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSkillMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSkillMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSkillMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSkillMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSkillMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckSkillMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckSkillMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckSkillMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSkillMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSkillSelectMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSkillSelectMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSkillSelectMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSkillSelectMenuClose");
static_assert(sizeof(RCAdvHUD_CheckSkillSelectMenuClose) == 0x000001, "Wrong size on RCAdvHUD_CheckSkillSelectMenuClose");
static_assert(offsetof(RCAdvHUD_CheckSkillSelectMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSkillSelectMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSkillSelectMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSkillSelectMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSkillSelectMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSkillSelectMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckSkillSelectMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckSkillSelectMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckSkillSelectMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSkillSelectMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSkillSelectMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSkillSelectMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSkillSelectMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSkillSelectMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckSkillSelectMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckSkillSelectMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckSkillSelectMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSkillSelectMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSubQuestMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSubQuestMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSubQuestMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSubQuestMenuClose");
static_assert(sizeof(RCAdvHUD_CheckSubQuestMenuClose) == 0x000001, "Wrong size on RCAdvHUD_CheckSubQuestMenuClose");
static_assert(offsetof(RCAdvHUD_CheckSubQuestMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSubQuestMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSubQuestMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSubQuestMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSubQuestMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSubQuestMenuFinished");
static_assert(sizeof(RCAdvHUD_CheckSubQuestMenuFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckSubQuestMenuFinished");
static_assert(offsetof(RCAdvHUD_CheckSubQuestMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSubQuestMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSubQuestMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSubQuestMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSubQuestMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSubQuestMenuStarted");
static_assert(sizeof(RCAdvHUD_CheckSubQuestMenuStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckSubQuestMenuStarted");
static_assert(offsetof(RCAdvHUD_CheckSubQuestMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSubQuestMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckSubtitleEndDelay
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckSubtitleEndDelay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckSubtitleEndDelay) == 0x000001, "Wrong alignment on RCAdvHUD_CheckSubtitleEndDelay");
static_assert(sizeof(RCAdvHUD_CheckSubtitleEndDelay) == 0x000001, "Wrong size on RCAdvHUD_CheckSubtitleEndDelay");
static_assert(offsetof(RCAdvHUD_CheckSubtitleEndDelay, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckSubtitleEndDelay::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckTalkEndText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckTalkEndText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckTalkEndText) == 0x000001, "Wrong alignment on RCAdvHUD_CheckTalkEndText");
static_assert(sizeof(RCAdvHUD_CheckTalkEndText) == 0x000001, "Wrong size on RCAdvHUD_CheckTalkEndText");
static_assert(offsetof(RCAdvHUD_CheckTalkEndText, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckTalkEndText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckTalkFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckTalkFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckTalkFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckTalkFinished");
static_assert(sizeof(RCAdvHUD_CheckTalkFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckTalkFinished");
static_assert(offsetof(RCAdvHUD_CheckTalkFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckTalkFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckTalkSkipVoice
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_CheckTalkSkipVoice final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_CheckTalkSkipVoice) == 0x000004, "Wrong alignment on RCAdvHUD_CheckTalkSkipVoice");
static_assert(sizeof(RCAdvHUD_CheckTalkSkipVoice) == 0x00000C, "Wrong size on RCAdvHUD_CheckTalkSkipVoice");
static_assert(offsetof(RCAdvHUD_CheckTalkSkipVoice, InTextID) == 0x000000, "Member 'RCAdvHUD_CheckTalkSkipVoice::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CheckTalkSkipVoice, ReturnValue) == 0x000008, "Member 'RCAdvHUD_CheckTalkSkipVoice::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckTalkStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckTalkStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckTalkStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckTalkStarted");
static_assert(sizeof(RCAdvHUD_CheckTalkStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckTalkStarted");
static_assert(offsetof(RCAdvHUD_CheckTalkStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckTalkStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckTalkWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckTalkWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckTalkWindow) == 0x000001, "Wrong alignment on RCAdvHUD_CheckTalkWindow");
static_assert(sizeof(RCAdvHUD_CheckTalkWindow) == 0x000001, "Wrong size on RCAdvHUD_CheckTalkWindow");
static_assert(offsetof(RCAdvHUD_CheckTalkWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckTalkWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckTalkWindowClosed
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_CheckTalkWindowClosed final
{
public:
	ERCAdvHUDTalkWindowType                       InWindowType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckTalkWindowClosed) == 0x000001, "Wrong alignment on RCAdvHUD_CheckTalkWindowClosed");
static_assert(sizeof(RCAdvHUD_CheckTalkWindowClosed) == 0x000002, "Wrong size on RCAdvHUD_CheckTalkWindowClosed");
static_assert(offsetof(RCAdvHUD_CheckTalkWindowClosed, InWindowType) == 0x000000, "Member 'RCAdvHUD_CheckTalkWindowClosed::InWindowType' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CheckTalkWindowClosed, ReturnValue) == 0x000001, "Member 'RCAdvHUD_CheckTalkWindowClosed::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckTopMenuCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckTopMenuCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckTopMenuCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_CheckTopMenuCheckFinished");
static_assert(sizeof(RCAdvHUD_CheckTopMenuCheckFinished) == 0x000001, "Wrong size on RCAdvHUD_CheckTopMenuCheckFinished");
static_assert(offsetof(RCAdvHUD_CheckTopMenuCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckTopMenuCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckTopMenuCheckStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckTopMenuCheckStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckTopMenuCheckStarted) == 0x000001, "Wrong alignment on RCAdvHUD_CheckTopMenuCheckStarted");
static_assert(sizeof(RCAdvHUD_CheckTopMenuCheckStarted) == 0x000001, "Wrong size on RCAdvHUD_CheckTopMenuCheckStarted");
static_assert(offsetof(RCAdvHUD_CheckTopMenuCheckStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckTopMenuCheckStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CheckTopMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CheckTopMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CheckTopMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_CheckTopMenuClose");
static_assert(sizeof(RCAdvHUD_CheckTopMenuClose) == 0x000001, "Wrong size on RCAdvHUD_CheckTopMenuClose");
static_assert(offsetof(RCAdvHUD_CheckTopMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CheckTopMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ClearMenuHelpText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ClearMenuHelpText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ClearMenuHelpText) == 0x000001, "Wrong alignment on RCAdvHUD_ClearMenuHelpText");
static_assert(sizeof(RCAdvHUD_ClearMenuHelpText) == 0x000001, "Wrong size on RCAdvHUD_ClearMenuHelpText");
static_assert(offsetof(RCAdvHUD_ClearMenuHelpText, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ClearMenuHelpText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CollectionMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CollectionMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CollectionMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_CollectionMenuFinish");
static_assert(sizeof(RCAdvHUD_CollectionMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_CollectionMenuFinish");
static_assert(offsetof(RCAdvHUD_CollectionMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CollectionMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CollectionMenuFinishForFooterAnimation
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CollectionMenuFinishForFooterAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CollectionMenuFinishForFooterAnimation) == 0x000001, "Wrong alignment on RCAdvHUD_CollectionMenuFinishForFooterAnimation");
static_assert(sizeof(RCAdvHUD_CollectionMenuFinishForFooterAnimation) == 0x000001, "Wrong size on RCAdvHUD_CollectionMenuFinishForFooterAnimation");
static_assert(offsetof(RCAdvHUD_CollectionMenuFinishForFooterAnimation, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CollectionMenuFinishForFooterAnimation::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CollectionMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CollectionMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CollectionMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_CollectionMenuStart");
static_assert(sizeof(RCAdvHUD_CollectionMenuStart) == 0x000001, "Wrong size on RCAdvHUD_CollectionMenuStart");
static_assert(offsetof(RCAdvHUD_CollectionMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CollectionMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CollectionWindowFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CollectionWindowFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CollectionWindowFinish) == 0x000001, "Wrong alignment on RCAdvHUD_CollectionWindowFinish");
static_assert(sizeof(RCAdvHUD_CollectionWindowFinish) == 0x000001, "Wrong size on RCAdvHUD_CollectionWindowFinish");
static_assert(offsetof(RCAdvHUD_CollectionWindowFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CollectionWindowFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CutInAnimAllRelease
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CutInAnimAllRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CutInAnimAllRelease) == 0x000001, "Wrong alignment on RCAdvHUD_CutInAnimAllRelease");
static_assert(sizeof(RCAdvHUD_CutInAnimAllRelease) == 0x000001, "Wrong size on RCAdvHUD_CutInAnimAllRelease");
static_assert(offsetof(RCAdvHUD_CutInAnimAllRelease, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CutInAnimAllRelease::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CutInAnimNext
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CutInAnimNext final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CutInAnimNext) == 0x000001, "Wrong alignment on RCAdvHUD_CutInAnimNext");
static_assert(sizeof(RCAdvHUD_CutInAnimNext) == 0x000001, "Wrong size on RCAdvHUD_CutInAnimNext");
static_assert(offsetof(RCAdvHUD_CutInAnimNext, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CutInAnimNext::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CutInAnimRelease
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_CutInAnimRelease final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_CutInAnimRelease) == 0x000004, "Wrong alignment on RCAdvHUD_CutInAnimRelease");
static_assert(sizeof(RCAdvHUD_CutInAnimRelease) == 0x00000C, "Wrong size on RCAdvHUD_CutInAnimRelease");
static_assert(offsetof(RCAdvHUD_CutInAnimRelease, InCutInID) == 0x000000, "Member 'RCAdvHUD_CutInAnimRelease::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CutInAnimRelease, ReturnValue) == 0x000008, "Member 'RCAdvHUD_CutInAnimRelease::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CutInAnimStart
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_CutInAnimStart final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInReleaseWBPAtFinished;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_CutInAnimStart) == 0x000004, "Wrong alignment on RCAdvHUD_CutInAnimStart");
static_assert(sizeof(RCAdvHUD_CutInAnimStart) == 0x00000C, "Wrong size on RCAdvHUD_CutInAnimStart");
static_assert(offsetof(RCAdvHUD_CutInAnimStart, InCutInID) == 0x000000, "Member 'RCAdvHUD_CutInAnimStart::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CutInAnimStart, bInReleaseWBPAtFinished) == 0x000008, "Member 'RCAdvHUD_CutInAnimStart::bInReleaseWBPAtFinished' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CutInAnimStart, ReturnValue) == 0x000009, "Member 'RCAdvHUD_CutInAnimStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CutInAnimStartLoad
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_CutInAnimStartLoad final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_CutInAnimStartLoad) == 0x000004, "Wrong alignment on RCAdvHUD_CutInAnimStartLoad");
static_assert(sizeof(RCAdvHUD_CutInAnimStartLoad) == 0x00000C, "Wrong size on RCAdvHUD_CutInAnimStartLoad");
static_assert(offsetof(RCAdvHUD_CutInAnimStartLoad, InCutInID) == 0x000000, "Member 'RCAdvHUD_CutInAnimStartLoad::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CutInAnimStartLoad, ReturnValue) == 0x000008, "Member 'RCAdvHUD_CutInAnimStartLoad::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CutInFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_CutInFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_CutInFinish) == 0x000001, "Wrong alignment on RCAdvHUD_CutInFinish");
static_assert(sizeof(RCAdvHUD_CutInFinish) == 0x000001, "Wrong size on RCAdvHUD_CutInFinish");
static_assert(offsetof(RCAdvHUD_CutInFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_CutInFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.CutInStart
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_CutInStart final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_CutInStart) == 0x000004, "Wrong alignment on RCAdvHUD_CutInStart");
static_assert(sizeof(RCAdvHUD_CutInStart) == 0x00000C, "Wrong size on RCAdvHUD_CutInStart");
static_assert(offsetof(RCAdvHUD_CutInStart, InCutInID) == 0x000000, "Member 'RCAdvHUD_CutInStart::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_CutInStart, ReturnValue) == 0x000008, "Member 'RCAdvHUD_CutInStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.DetPointFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_DetPointFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_DetPointFinish) == 0x000001, "Wrong alignment on RCAdvHUD_DetPointFinish");
static_assert(sizeof(RCAdvHUD_DetPointFinish) == 0x000001, "Wrong size on RCAdvHUD_DetPointFinish");
static_assert(offsetof(RCAdvHUD_DetPointFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_DetPointFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.DetPointStart
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_DetPointStart final
{
public:
	int32                                         InPoint;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_DetPointStart) == 0x000004, "Wrong alignment on RCAdvHUD_DetPointStart");
static_assert(sizeof(RCAdvHUD_DetPointStart) == 0x000008, "Wrong size on RCAdvHUD_DetPointStart");
static_assert(offsetof(RCAdvHUD_DetPointStart, InPoint) == 0x000000, "Member 'RCAdvHUD_DetPointStart::InPoint' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_DetPointStart, ReturnValue) == 0x000004, "Member 'RCAdvHUD_DetPointStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.EnterBuilding_IsVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_EnterBuilding_IsVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_EnterBuilding_IsVisible) == 0x000008, "Wrong alignment on RCAdvHUD_EnterBuilding_IsVisible");
static_assert(sizeof(RCAdvHUD_EnterBuilding_IsVisible) == 0x000010, "Wrong size on RCAdvHUD_EnterBuilding_IsVisible");
static_assert(offsetof(RCAdvHUD_EnterBuilding_IsVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUD_EnterBuilding_IsVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_EnterBuilding_IsVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUD_EnterBuilding_IsVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.EnterBuilding_SetData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUD_EnterBuilding_SetData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_EnterBuilding_SetData) == 0x000008, "Wrong alignment on RCAdvHUD_EnterBuilding_SetData");
static_assert(sizeof(RCAdvHUD_EnterBuilding_SetData) == 0x000020, "Wrong size on RCAdvHUD_EnterBuilding_SetData");
static_assert(offsetof(RCAdvHUD_EnterBuilding_SetData, InCheckActor) == 0x000000, "Member 'RCAdvHUD_EnterBuilding_SetData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_EnterBuilding_SetData, InTextID) == 0x000008, "Member 'RCAdvHUD_EnterBuilding_SetData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_EnterBuilding_SetData, bInDraw) == 0x000010, "Member 'RCAdvHUD_EnterBuilding_SetData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_EnterBuilding_SetData, bInAccessable) == 0x000011, "Member 'RCAdvHUD_EnterBuilding_SetData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_EnterBuilding_SetData, InScale) == 0x000014, "Member 'RCAdvHUD_EnterBuilding_SetData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_EnterBuilding_SetData, ReturnValue) == 0x000018, "Member 'RCAdvHUD_EnterBuilding_SetData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.EnterBuilding_SetEnable
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_EnterBuilding_SetEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_EnterBuilding_SetEnable) == 0x000001, "Wrong alignment on RCAdvHUD_EnterBuilding_SetEnable");
static_assert(sizeof(RCAdvHUD_EnterBuilding_SetEnable) == 0x000002, "Wrong size on RCAdvHUD_EnterBuilding_SetEnable");
static_assert(offsetof(RCAdvHUD_EnterBuilding_SetEnable, bInEnable) == 0x000000, "Member 'RCAdvHUD_EnterBuilding_SetEnable::bInEnable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_EnterBuilding_SetEnable, ReturnValue) == 0x000001, "Member 'RCAdvHUD_EnterBuilding_SetEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ForceFinishKaiKagiSelect
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ForceFinishKaiKagiSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ForceFinishKaiKagiSelect) == 0x000001, "Wrong alignment on RCAdvHUD_ForceFinishKaiKagiSelect");
static_assert(sizeof(RCAdvHUD_ForceFinishKaiKagiSelect) == 0x000001, "Wrong size on RCAdvHUD_ForceFinishKaiKagiSelect");
static_assert(offsetof(RCAdvHUD_ForceFinishKaiKagiSelect, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ForceFinishKaiKagiSelect::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetAccessedCharacter
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_GetAccessedCharacter final
{
public:
	class ARCCharacterRender*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetAccessedCharacter) == 0x000008, "Wrong alignment on RCAdvHUD_GetAccessedCharacter");
static_assert(sizeof(RCAdvHUD_GetAccessedCharacter) == 0x000008, "Wrong size on RCAdvHUD_GetAccessedCharacter");
static_assert(offsetof(RCAdvHUD_GetAccessedCharacter, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetAccessedCharacter::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetAccessedCheckActor
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_GetAccessedCheckActor final
{
public:
	class ARCCheckActor*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetAccessedCheckActor) == 0x000008, "Wrong alignment on RCAdvHUD_GetAccessedCheckActor");
static_assert(sizeof(RCAdvHUD_GetAccessedCheckActor) == 0x000008, "Wrong size on RCAdvHUD_GetAccessedCheckActor");
static_assert(offsetof(RCAdvHUD_GetAccessedCheckActor, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetAccessedCheckActor::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetAccessedNPC
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_GetAccessedNPC final
{
public:
	class ARCPawnRender*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetAccessedNPC) == 0x000008, "Wrong alignment on RCAdvHUD_GetAccessedNPC");
static_assert(sizeof(RCAdvHUD_GetAccessedNPC) == 0x000008, "Wrong size on RCAdvHUD_GetAccessedNPC");
static_assert(offsetof(RCAdvHUD_GetAccessedNPC, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetAccessedNPC::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetAreaMapID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_GetAreaMapID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetAreaMapID) == 0x000004, "Wrong alignment on RCAdvHUD_GetAreaMapID");
static_assert(sizeof(RCAdvHUD_GetAreaMapID) == 0x000008, "Wrong size on RCAdvHUD_GetAreaMapID");
static_assert(offsetof(RCAdvHUD_GetAreaMapID, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetAreaMapID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetAreaMapMenuCancel
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GetAreaMapMenuCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetAreaMapMenuCancel) == 0x000001, "Wrong alignment on RCAdvHUD_GetAreaMapMenuCancel");
static_assert(sizeof(RCAdvHUD_GetAreaMapMenuCancel) == 0x000001, "Wrong size on RCAdvHUD_GetAreaMapMenuCancel");
static_assert(offsetof(RCAdvHUD_GetAreaMapMenuCancel, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetAreaMapMenuCancel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetAreaMapMenuEnableFastTravel
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_GetAreaMapMenuEnableFastTravel final
{
public:
	class FName                                   InWorldMapID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_GetAreaMapMenuEnableFastTravel) == 0x000004, "Wrong alignment on RCAdvHUD_GetAreaMapMenuEnableFastTravel");
static_assert(sizeof(RCAdvHUD_GetAreaMapMenuEnableFastTravel) == 0x00000C, "Wrong size on RCAdvHUD_GetAreaMapMenuEnableFastTravel");
static_assert(offsetof(RCAdvHUD_GetAreaMapMenuEnableFastTravel, InWorldMapID) == 0x000000, "Member 'RCAdvHUD_GetAreaMapMenuEnableFastTravel::InWorldMapID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_GetAreaMapMenuEnableFastTravel, ReturnValue) == 0x000008, "Member 'RCAdvHUD_GetAreaMapMenuEnableFastTravel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetAreaMapMenuGoFastTravel
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GetAreaMapMenuGoFastTravel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetAreaMapMenuGoFastTravel) == 0x000001, "Wrong alignment on RCAdvHUD_GetAreaMapMenuGoFastTravel");
static_assert(sizeof(RCAdvHUD_GetAreaMapMenuGoFastTravel) == 0x000001, "Wrong size on RCAdvHUD_GetAreaMapMenuGoFastTravel");
static_assert(offsetof(RCAdvHUD_GetAreaMapMenuGoFastTravel, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetAreaMapMenuGoFastTravel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetAreaMapMenuNewAreaSePlayed
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GetAreaMapMenuNewAreaSePlayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetAreaMapMenuNewAreaSePlayed) == 0x000001, "Wrong alignment on RCAdvHUD_GetAreaMapMenuNewAreaSePlayed");
static_assert(sizeof(RCAdvHUD_GetAreaMapMenuNewAreaSePlayed) == 0x000001, "Wrong size on RCAdvHUD_GetAreaMapMenuNewAreaSePlayed");
static_assert(offsetof(RCAdvHUD_GetAreaMapMenuNewAreaSePlayed, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetAreaMapMenuNewAreaSePlayed::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetAreaMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GetAreaMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetAreaMenuOpen) == 0x000001, "Wrong alignment on RCAdvHUD_GetAreaMenuOpen");
static_assert(sizeof(RCAdvHUD_GetAreaMenuOpen) == 0x000001, "Wrong size on RCAdvHUD_GetAreaMenuOpen");
static_assert(offsetof(RCAdvHUD_GetAreaMenuOpen, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetAreaMenuOpen::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetBattleKagiMenuIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUD_GetBattleKagiMenuIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetBattleKagiMenuIndex) == 0x000004, "Wrong alignment on RCAdvHUD_GetBattleKagiMenuIndex");
static_assert(sizeof(RCAdvHUD_GetBattleKagiMenuIndex) == 0x000004, "Wrong size on RCAdvHUD_GetBattleKagiMenuIndex");
static_assert(offsetof(RCAdvHUD_GetBattleKagiMenuIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetBattleKagiMenuIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetBusMenuCancel
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GetBusMenuCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetBusMenuCancel) == 0x000001, "Wrong alignment on RCAdvHUD_GetBusMenuCancel");
static_assert(sizeof(RCAdvHUD_GetBusMenuCancel) == 0x000001, "Wrong size on RCAdvHUD_GetBusMenuCancel");
static_assert(offsetof(RCAdvHUD_GetBusMenuCancel, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetBusMenuCancel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetInputMenuButtonGuideKeyType
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_GetInputMenuButtonGuideKeyType final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetInputMenuButtonGuideKeyType) == 0x000001, "Wrong alignment on RCAdvHUD_GetInputMenuButtonGuideKeyType");
static_assert(sizeof(RCAdvHUD_GetInputMenuButtonGuideKeyType) == 0x000002, "Wrong size on RCAdvHUD_GetInputMenuButtonGuideKeyType");
static_assert(offsetof(RCAdvHUD_GetInputMenuButtonGuideKeyType, InKeyType) == 0x000000, "Member 'RCAdvHUD_GetInputMenuButtonGuideKeyType::InKeyType' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_GetInputMenuButtonGuideKeyType, ReturnValue) == 0x000001, "Member 'RCAdvHUD_GetInputMenuButtonGuideKeyType::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetKagiSelectMenuIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUD_GetKagiSelectMenuIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetKagiSelectMenuIndex) == 0x000004, "Wrong alignment on RCAdvHUD_GetKagiSelectMenuIndex");
static_assert(sizeof(RCAdvHUD_GetKagiSelectMenuIndex) == 0x000004, "Wrong size on RCAdvHUD_GetKagiSelectMenuIndex");
static_assert(offsetof(RCAdvHUD_GetKagiSelectMenuIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetKagiSelectMenuIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetKaiKagiSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUD_GetKaiKagiSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetKaiKagiSelectIndex) == 0x000004, "Wrong alignment on RCAdvHUD_GetKaiKagiSelectIndex");
static_assert(sizeof(RCAdvHUD_GetKaiKagiSelectIndex) == 0x000004, "Wrong size on RCAdvHUD_GetKaiKagiSelectIndex");
static_assert(offsetof(RCAdvHUD_GetKaiKagiSelectIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetKaiKagiSelectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetKaiKagiSelectKaiKagiIDArray
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_GetKaiKagiSelectKaiKagiIDArray final
{
public:
	TArray<class FName>                           OutKaiKagiIDArray;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetKaiKagiSelectKaiKagiIDArray) == 0x000008, "Wrong alignment on RCAdvHUD_GetKaiKagiSelectKaiKagiIDArray");
static_assert(sizeof(RCAdvHUD_GetKaiKagiSelectKaiKagiIDArray) == 0x000010, "Wrong size on RCAdvHUD_GetKaiKagiSelectKaiKagiIDArray");
static_assert(offsetof(RCAdvHUD_GetKaiKagiSelectKaiKagiIDArray, OutKaiKagiIDArray) == 0x000000, "Member 'RCAdvHUD_GetKaiKagiSelectKaiKagiIDArray::OutKaiKagiIDArray' has a wrong offset!");

// Function RC.RCAdvHUD.GetMovieSkipUi
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_GetMovieSkipUi final
{
public:
	class URCUiMovieSkip*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetMovieSkipUi) == 0x000008, "Wrong alignment on RCAdvHUD_GetMovieSkipUi");
static_assert(sizeof(RCAdvHUD_GetMovieSkipUi) == 0x000008, "Wrong size on RCAdvHUD_GetMovieSkipUi");
static_assert(offsetof(RCAdvHUD_GetMovieSkipUi, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetMovieSkipUi::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetNotClosedWidgetNames
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_GetNotClosedWidgetNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetNotClosedWidgetNames) == 0x000008, "Wrong alignment on RCAdvHUD_GetNotClosedWidgetNames");
static_assert(sizeof(RCAdvHUD_GetNotClosedWidgetNames) == 0x000010, "Wrong size on RCAdvHUD_GetNotClosedWidgetNames");
static_assert(offsetof(RCAdvHUD_GetNotClosedWidgetNames, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetNotClosedWidgetNames::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetSelectedMapID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_GetSelectedMapID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetSelectedMapID) == 0x000004, "Wrong alignment on RCAdvHUD_GetSelectedMapID");
static_assert(sizeof(RCAdvHUD_GetSelectedMapID) == 0x000008, "Wrong size on RCAdvHUD_GetSelectedMapID");
static_assert(offsetof(RCAdvHUD_GetSelectedMapID, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetSelectedMapID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetSequentialSubtitleVoiceCharacterID
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUD_GetSequentialSubtitleVoiceCharacterID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetSequentialSubtitleVoiceCharacterID) == 0x000004, "Wrong alignment on RCAdvHUD_GetSequentialSubtitleVoiceCharacterID");
static_assert(sizeof(RCAdvHUD_GetSequentialSubtitleVoiceCharacterID) == 0x000004, "Wrong size on RCAdvHUD_GetSequentialSubtitleVoiceCharacterID");
static_assert(offsetof(RCAdvHUD_GetSequentialSubtitleVoiceCharacterID, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetSequentialSubtitleVoiceCharacterID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetSequentialTalkVoiceCharacterID
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUD_GetSequentialTalkVoiceCharacterID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetSequentialTalkVoiceCharacterID) == 0x000004, "Wrong alignment on RCAdvHUD_GetSequentialTalkVoiceCharacterID");
static_assert(sizeof(RCAdvHUD_GetSequentialTalkVoiceCharacterID) == 0x000004, "Wrong size on RCAdvHUD_GetSequentialTalkVoiceCharacterID");
static_assert(offsetof(RCAdvHUD_GetSequentialTalkVoiceCharacterID, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetSequentialTalkVoiceCharacterID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetSkillMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GetSkillMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetSkillMenuOpen) == 0x000001, "Wrong alignment on RCAdvHUD_GetSkillMenuOpen");
static_assert(sizeof(RCAdvHUD_GetSkillMenuOpen) == 0x000001, "Wrong size on RCAdvHUD_GetSkillMenuOpen");
static_assert(offsetof(RCAdvHUD_GetSkillMenuOpen, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetSkillMenuOpen::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetSkillSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUD_GetSkillSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetSkillSelectIndex) == 0x000004, "Wrong alignment on RCAdvHUD_GetSkillSelectIndex");
static_assert(sizeof(RCAdvHUD_GetSkillSelectIndex) == 0x000004, "Wrong size on RCAdvHUD_GetSkillSelectIndex");
static_assert(offsetof(RCAdvHUD_GetSkillSelectIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetSkillSelectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetUsingTalkWidgetOldState
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GetUsingTalkWidgetOldState final
{
public:
	ERCAdvHUDWidgetState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetUsingTalkWidgetOldState) == 0x000001, "Wrong alignment on RCAdvHUD_GetUsingTalkWidgetOldState");
static_assert(sizeof(RCAdvHUD_GetUsingTalkWidgetOldState) == 0x000001, "Wrong size on RCAdvHUD_GetUsingTalkWidgetOldState");
static_assert(offsetof(RCAdvHUD_GetUsingTalkWidgetOldState, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetUsingTalkWidgetOldState::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GetUsingTalkWidgetState
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GetUsingTalkWidgetState final
{
public:
	ERCAdvHUDWidgetState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GetUsingTalkWidgetState) == 0x000001, "Wrong alignment on RCAdvHUD_GetUsingTalkWidgetState");
static_assert(sizeof(RCAdvHUD_GetUsingTalkWidgetState) == 0x000001, "Wrong size on RCAdvHUD_GetUsingTalkWidgetState");
static_assert(offsetof(RCAdvHUD_GetUsingTalkWidgetState, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GetUsingTalkWidgetState::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GlossaryMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GlossaryMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GlossaryMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_GlossaryMenuFinish");
static_assert(sizeof(RCAdvHUD_GlossaryMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_GlossaryMenuFinish");
static_assert(offsetof(RCAdvHUD_GlossaryMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GlossaryMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.GlossaryMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_GlossaryMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_GlossaryMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_GlossaryMenuStart");
static_assert(sizeof(RCAdvHUD_GlossaryMenuStart) == 0x000001, "Wrong size on RCAdvHUD_GlossaryMenuStart");
static_assert(offsetof(RCAdvHUD_GlossaryMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_GlossaryMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsBackLogFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_IsBackLogFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_IsBackLogFinish) == 0x000001, "Wrong alignment on RCAdvHUD_IsBackLogFinish");
static_assert(sizeof(RCAdvHUD_IsBackLogFinish) == 0x000001, "Wrong size on RCAdvHUD_IsBackLogFinish");
static_assert(offsetof(RCAdvHUD_IsBackLogFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_IsBackLogFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsBackLogStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_IsBackLogStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_IsBackLogStarted) == 0x000001, "Wrong alignment on RCAdvHUD_IsBackLogStarted");
static_assert(sizeof(RCAdvHUD_IsBackLogStarted) == 0x000001, "Wrong size on RCAdvHUD_IsBackLogStarted");
static_assert(offsetof(RCAdvHUD_IsBackLogStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUD_IsBackLogStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsBalloonVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_IsBalloonVisible final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_IsBalloonVisible) == 0x000008, "Wrong alignment on RCAdvHUD_IsBalloonVisible");
static_assert(sizeof(RCAdvHUD_IsBalloonVisible) == 0x000010, "Wrong size on RCAdvHUD_IsBalloonVisible");
static_assert(offsetof(RCAdvHUD_IsBalloonVisible, InPawn) == 0x000000, "Member 'RCAdvHUD_IsBalloonVisible::InPawn' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_IsBalloonVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUD_IsBalloonVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsBattleKagiMenu
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_IsBattleKagiMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_IsBattleKagiMenu) == 0x000001, "Wrong alignment on RCAdvHUD_IsBattleKagiMenu");
static_assert(sizeof(RCAdvHUD_IsBattleKagiMenu) == 0x000001, "Wrong size on RCAdvHUD_IsBattleKagiMenu");
static_assert(offsetof(RCAdvHUD_IsBattleKagiMenu, ReturnValue) == 0x000000, "Member 'RCAdvHUD_IsBattleKagiMenu::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsBusMenu
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_IsBusMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_IsBusMenu) == 0x000001, "Wrong alignment on RCAdvHUD_IsBusMenu");
static_assert(sizeof(RCAdvHUD_IsBusMenu) == 0x000001, "Wrong size on RCAdvHUD_IsBusMenu");
static_assert(offsetof(RCAdvHUD_IsBusMenu, ReturnValue) == 0x000000, "Member 'RCAdvHUD_IsBusMenu::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsCanGlossaryMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_IsCanGlossaryMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_IsCanGlossaryMenuClose) == 0x000001, "Wrong alignment on RCAdvHUD_IsCanGlossaryMenuClose");
static_assert(sizeof(RCAdvHUD_IsCanGlossaryMenuClose) == 0x000001, "Wrong size on RCAdvHUD_IsCanGlossaryMenuClose");
static_assert(offsetof(RCAdvHUD_IsCanGlossaryMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUD_IsCanGlossaryMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsCollectionWindowFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_IsCollectionWindowFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_IsCollectionWindowFinished) == 0x000001, "Wrong alignment on RCAdvHUD_IsCollectionWindowFinished");
static_assert(sizeof(RCAdvHUD_IsCollectionWindowFinished) == 0x000001, "Wrong size on RCAdvHUD_IsCollectionWindowFinished");
static_assert(offsetof(RCAdvHUD_IsCollectionWindowFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_IsCollectionWindowFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsKagiMenuLarge
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_IsKagiMenuLarge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_IsKagiMenuLarge) == 0x000001, "Wrong alignment on RCAdvHUD_IsKagiMenuLarge");
static_assert(sizeof(RCAdvHUD_IsKagiMenuLarge) == 0x000001, "Wrong size on RCAdvHUD_IsKagiMenuLarge");
static_assert(offsetof(RCAdvHUD_IsKagiMenuLarge, ReturnValue) == 0x000000, "Member 'RCAdvHUD_IsKagiMenuLarge::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsKagiSelectMenu
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_IsKagiSelectMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_IsKagiSelectMenu) == 0x000001, "Wrong alignment on RCAdvHUD_IsKagiSelectMenu");
static_assert(sizeof(RCAdvHUD_IsKagiSelectMenu) == 0x000001, "Wrong size on RCAdvHUD_IsKagiSelectMenu");
static_assert(offsetof(RCAdvHUD_IsKagiSelectMenu, ReturnValue) == 0x000000, "Member 'RCAdvHUD_IsKagiSelectMenu::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsKagiSelectMenuLarge
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_IsKagiSelectMenuLarge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_IsKagiSelectMenuLarge) == 0x000001, "Wrong alignment on RCAdvHUD_IsKagiSelectMenuLarge");
static_assert(sizeof(RCAdvHUD_IsKagiSelectMenuLarge) == 0x000001, "Wrong size on RCAdvHUD_IsKagiSelectMenuLarge");
static_assert(offsetof(RCAdvHUD_IsKagiSelectMenuLarge, ReturnValue) == 0x000000, "Member 'RCAdvHUD_IsKagiSelectMenuLarge::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsMarkerVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_IsMarkerVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_IsMarkerVisible) == 0x000008, "Wrong alignment on RCAdvHUD_IsMarkerVisible");
static_assert(sizeof(RCAdvHUD_IsMarkerVisible) == 0x000010, "Wrong size on RCAdvHUD_IsMarkerVisible");
static_assert(offsetof(RCAdvHUD_IsMarkerVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUD_IsMarkerVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_IsMarkerVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUD_IsMarkerVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.IsTalkIconVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_IsTalkIconVisible final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_IsTalkIconVisible) == 0x000008, "Wrong alignment on RCAdvHUD_IsTalkIconVisible");
static_assert(sizeof(RCAdvHUD_IsTalkIconVisible) == 0x000010, "Wrong size on RCAdvHUD_IsTalkIconVisible");
static_assert(offsetof(RCAdvHUD_IsTalkIconVisible, InPawn) == 0x000000, "Member 'RCAdvHUD_IsTalkIconVisible::InPawn' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_IsTalkIconVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUD_IsTalkIconVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.KagiMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_KagiMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_KagiMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_KagiMenuFinish");
static_assert(sizeof(RCAdvHUD_KagiMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_KagiMenuFinish");
static_assert(offsetof(RCAdvHUD_KagiMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_KagiMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.KagiMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_KagiMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_KagiMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_KagiMenuStart");
static_assert(sizeof(RCAdvHUD_KagiMenuStart) == 0x000001, "Wrong size on RCAdvHUD_KagiMenuStart");
static_assert(offsetof(RCAdvHUD_KagiMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_KagiMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.KagiSelectMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_KagiSelectMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_KagiSelectMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_KagiSelectMenuFinish");
static_assert(sizeof(RCAdvHUD_KagiSelectMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_KagiSelectMenuFinish");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_KagiSelectMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.KagiSelectMenuStart
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_KagiSelectMenuStart final
{
public:
	TArray<class FName>                           InKaiKagiIDArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInNotPause;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_KagiSelectMenuStart) == 0x000008, "Wrong alignment on RCAdvHUD_KagiSelectMenuStart");
static_assert(sizeof(RCAdvHUD_KagiSelectMenuStart) == 0x000018, "Wrong size on RCAdvHUD_KagiSelectMenuStart");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuStart, InKaiKagiIDArray) == 0x000000, "Member 'RCAdvHUD_KagiSelectMenuStart::InKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuStart, bInNotPause) == 0x000010, "Member 'RCAdvHUD_KagiSelectMenuStart::bInNotPause' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuStart, ReturnValue) == 0x000011, "Member 'RCAdvHUD_KagiSelectMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.KagiSelectMenuStart2
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUD_KagiSelectMenuStart2 final
{
public:
	TArray<class FName>                           InKaiKagiIDArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InQuestionTextID;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInNotPause;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAcceptCancel;                                   // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InDebugCorrectIndex;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_KagiSelectMenuStart2) == 0x000008, "Wrong alignment on RCAdvHUD_KagiSelectMenuStart2");
static_assert(sizeof(RCAdvHUD_KagiSelectMenuStart2) == 0x000028, "Wrong size on RCAdvHUD_KagiSelectMenuStart2");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuStart2, InKaiKagiIDArray) == 0x000000, "Member 'RCAdvHUD_KagiSelectMenuStart2::InKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuStart2, InQuestionTextID) == 0x000010, "Member 'RCAdvHUD_KagiSelectMenuStart2::InQuestionTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuStart2, bInNotPause) == 0x000018, "Member 'RCAdvHUD_KagiSelectMenuStart2::bInNotPause' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuStart2, bInAcceptCancel) == 0x000019, "Member 'RCAdvHUD_KagiSelectMenuStart2::bInAcceptCancel' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuStart2, InDebugCorrectIndex) == 0x00001C, "Member 'RCAdvHUD_KagiSelectMenuStart2::InDebugCorrectIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_KagiSelectMenuStart2, ReturnValue) == 0x000020, "Member 'RCAdvHUD_KagiSelectMenuStart2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.MainQuestMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_MainQuestMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_MainQuestMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_MainQuestMenuFinish");
static_assert(sizeof(RCAdvHUD_MainQuestMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_MainQuestMenuFinish");
static_assert(offsetof(RCAdvHUD_MainQuestMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_MainQuestMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.MainQuestMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_MainQuestMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_MainQuestMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_MainQuestMenuStart");
static_assert(sizeof(RCAdvHUD_MainQuestMenuStart) == 0x000001, "Wrong size on RCAdvHUD_MainQuestMenuStart");
static_assert(offsetof(RCAdvHUD_MainQuestMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_MainQuestMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.MenuGuideFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_MenuGuideFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_MenuGuideFinish) == 0x000001, "Wrong alignment on RCAdvHUD_MenuGuideFinish");
static_assert(sizeof(RCAdvHUD_MenuGuideFinish) == 0x000001, "Wrong size on RCAdvHUD_MenuGuideFinish");
static_assert(offsetof(RCAdvHUD_MenuGuideFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_MenuGuideFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.MenuGuideStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_MenuGuideStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_MenuGuideStart) == 0x000001, "Wrong alignment on RCAdvHUD_MenuGuideStart");
static_assert(sizeof(RCAdvHUD_MenuGuideStart) == 0x000001, "Wrong size on RCAdvHUD_MenuGuideStart");
static_assert(offsetof(RCAdvHUD_MenuGuideStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_MenuGuideStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.MovieSkipFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_MovieSkipFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_MovieSkipFinish) == 0x000001, "Wrong alignment on RCAdvHUD_MovieSkipFinish");
static_assert(sizeof(RCAdvHUD_MovieSkipFinish) == 0x000001, "Wrong size on RCAdvHUD_MovieSkipFinish");
static_assert(offsetof(RCAdvHUD_MovieSkipFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_MovieSkipFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.MovieSkipStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_MovieSkipStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_MovieSkipStart) == 0x000001, "Wrong alignment on RCAdvHUD_MovieSkipStart");
static_assert(sizeof(RCAdvHUD_MovieSkipStart) == 0x000001, "Wrong size on RCAdvHUD_MovieSkipStart");
static_assert(offsetof(RCAdvHUD_MovieSkipStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_MovieSkipStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.NzResultFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_NzResultFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_NzResultFinish) == 0x000001, "Wrong alignment on RCAdvHUD_NzResultFinish");
static_assert(sizeof(RCAdvHUD_NzResultFinish) == 0x000001, "Wrong size on RCAdvHUD_NzResultFinish");
static_assert(offsetof(RCAdvHUD_NzResultFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_NzResultFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.NzResultStart
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_NzResultStart final
{
public:
	int32                                         InChapterNumber;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_NzResultStart) == 0x000004, "Wrong alignment on RCAdvHUD_NzResultStart");
static_assert(sizeof(RCAdvHUD_NzResultStart) == 0x000008, "Wrong size on RCAdvHUD_NzResultStart");
static_assert(offsetof(RCAdvHUD_NzResultStart, InChapterNumber) == 0x000000, "Member 'RCAdvHUD_NzResultStart::InChapterNumber' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_NzResultStart, ReturnValue) == 0x000004, "Member 'RCAdvHUD_NzResultStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.OnButtonGuideClick_ADV2StepResearchBack
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_OnButtonGuideClick_ADV2StepResearchBack final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_OnButtonGuideClick_ADV2StepResearchBack) == 0x000001, "Wrong alignment on RCAdvHUD_OnButtonGuideClick_ADV2StepResearchBack");
static_assert(sizeof(RCAdvHUD_OnButtonGuideClick_ADV2StepResearchBack) == 0x000001, "Wrong size on RCAdvHUD_OnButtonGuideClick_ADV2StepResearchBack");
static_assert(offsetof(RCAdvHUD_OnButtonGuideClick_ADV2StepResearchBack, InKeyType) == 0x000000, "Member 'RCAdvHUD_OnButtonGuideClick_ADV2StepResearchBack::InKeyType' has a wrong offset!");

// Function RC.RCAdvHUD.OnButtonGuideClick_ADVHolding
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_OnButtonGuideClick_ADVHolding final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_OnButtonGuideClick_ADVHolding) == 0x000001, "Wrong alignment on RCAdvHUD_OnButtonGuideClick_ADVHolding");
static_assert(sizeof(RCAdvHUD_OnButtonGuideClick_ADVHolding) == 0x000001, "Wrong size on RCAdvHUD_OnButtonGuideClick_ADVHolding");
static_assert(offsetof(RCAdvHUD_OnButtonGuideClick_ADVHolding, InKeyType) == 0x000000, "Member 'RCAdvHUD_OnButtonGuideClick_ADVHolding::InKeyType' has a wrong offset!");

// Function RC.RCAdvHUD.OpenCollectionWindowStart
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_OpenCollectionWindowStart final
{
public:
	TArray<class FString>                         TextArray;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_OpenCollectionWindowStart) == 0x000008, "Wrong alignment on RCAdvHUD_OpenCollectionWindowStart");
static_assert(sizeof(RCAdvHUD_OpenCollectionWindowStart) == 0x000018, "Wrong size on RCAdvHUD_OpenCollectionWindowStart");
static_assert(offsetof(RCAdvHUD_OpenCollectionWindowStart, TextArray) == 0x000000, "Member 'RCAdvHUD_OpenCollectionWindowStart::TextArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_OpenCollectionWindowStart, ReturnValue) == 0x000010, "Member 'RCAdvHUD_OpenCollectionWindowStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.PressedDecideButton
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_PressedDecideButton final
{
public:
	ERCAdvHUDPressedDecideResult                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_PressedDecideButton) == 0x000001, "Wrong alignment on RCAdvHUD_PressedDecideButton");
static_assert(sizeof(RCAdvHUD_PressedDecideButton) == 0x000001, "Wrong size on RCAdvHUD_PressedDecideButton");
static_assert(offsetof(RCAdvHUD_PressedDecideButton, ReturnValue) == 0x000000, "Member 'RCAdvHUD_PressedDecideButton::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.PressedDecideButtonSimple
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_PressedDecideButtonSimple final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_PressedDecideButtonSimple) == 0x000001, "Wrong alignment on RCAdvHUD_PressedDecideButtonSimple");
static_assert(sizeof(RCAdvHUD_PressedDecideButtonSimple) == 0x000001, "Wrong size on RCAdvHUD_PressedDecideButtonSimple");
static_assert(offsetof(RCAdvHUD_PressedDecideButtonSimple, ReturnValue) == 0x000000, "Member 'RCAdvHUD_PressedDecideButtonSimple::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchDetailAutoSelectCheckActorMoveStart
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_ResearchDetailAutoSelectCheckActorMoveStart final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchDetailAutoSelectCheckActorMoveStart) == 0x000008, "Wrong alignment on RCAdvHUD_ResearchDetailAutoSelectCheckActorMoveStart");
static_assert(sizeof(RCAdvHUD_ResearchDetailAutoSelectCheckActorMoveStart) == 0x000010, "Wrong size on RCAdvHUD_ResearchDetailAutoSelectCheckActorMoveStart");
static_assert(offsetof(RCAdvHUD_ResearchDetailAutoSelectCheckActorMoveStart, InCheckActor) == 0x000000, "Member 'RCAdvHUD_ResearchDetailAutoSelectCheckActorMoveStart::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchDetailAutoSelectCheckActorMoveStart, ReturnValue) == 0x000008, "Member 'RCAdvHUD_ResearchDetailAutoSelectCheckActorMoveStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchDetailAutoSelectMoveStart
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_ResearchDetailAutoSelectMoveStart final
{
public:
	int32                                         InMarkerDataIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchDetailAutoSelectMoveStart) == 0x000004, "Wrong alignment on RCAdvHUD_ResearchDetailAutoSelectMoveStart");
static_assert(sizeof(RCAdvHUD_ResearchDetailAutoSelectMoveStart) == 0x000008, "Wrong size on RCAdvHUD_ResearchDetailAutoSelectMoveStart");
static_assert(offsetof(RCAdvHUD_ResearchDetailAutoSelectMoveStart, InMarkerDataIndex) == 0x000000, "Member 'RCAdvHUD_ResearchDetailAutoSelectMoveStart::InMarkerDataIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchDetailAutoSelectMoveStart, ReturnValue) == 0x000004, "Member 'RCAdvHUD_ResearchDetailAutoSelectMoveStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchDetailCheckAutoSelectMoveFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchDetailCheckAutoSelectMoveFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchDetailCheckAutoSelectMoveFinished) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchDetailCheckAutoSelectMoveFinished");
static_assert(sizeof(RCAdvHUD_ResearchDetailCheckAutoSelectMoveFinished) == 0x000001, "Wrong size on RCAdvHUD_ResearchDetailCheckAutoSelectMoveFinished");
static_assert(offsetof(RCAdvHUD_ResearchDetailCheckAutoSelectMoveFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchDetailCheckAutoSelectMoveFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchDetailFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchDetailFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchDetailFinish) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchDetailFinish");
static_assert(sizeof(RCAdvHUD_ResearchDetailFinish) == 0x000001, "Wrong size on RCAdvHUD_ResearchDetailFinish");
static_assert(offsetof(RCAdvHUD_ResearchDetailFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchDetailFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchDetailGetAccessedIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUD_ResearchDetailGetAccessedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchDetailGetAccessedIndex) == 0x000004, "Wrong alignment on RCAdvHUD_ResearchDetailGetAccessedIndex");
static_assert(sizeof(RCAdvHUD_ResearchDetailGetAccessedIndex) == 0x000004, "Wrong size on RCAdvHUD_ResearchDetailGetAccessedIndex");
static_assert(offsetof(RCAdvHUD_ResearchDetailGetAccessedIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchDetailGetAccessedIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchDetailGetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUD_ResearchDetailGetSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchDetailGetSelectIndex) == 0x000004, "Wrong alignment on RCAdvHUD_ResearchDetailGetSelectIndex");
static_assert(sizeof(RCAdvHUD_ResearchDetailGetSelectIndex) == 0x000004, "Wrong size on RCAdvHUD_ResearchDetailGetSelectIndex");
static_assert(offsetof(RCAdvHUD_ResearchDetailGetSelectIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchDetailGetSelectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchDetailPastVisionStart
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUD_ResearchDetailPastVisionStart final
{
public:
	struct FRCAdvHUDResearchDetailStartData       InStartData;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bInPast;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableFinish;                                   // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchDetailPastVisionStart) == 0x000008, "Wrong alignment on RCAdvHUD_ResearchDetailPastVisionStart");
static_assert(sizeof(RCAdvHUD_ResearchDetailPastVisionStart) == 0x000028, "Wrong size on RCAdvHUD_ResearchDetailPastVisionStart");
static_assert(offsetof(RCAdvHUD_ResearchDetailPastVisionStart, InStartData) == 0x000000, "Member 'RCAdvHUD_ResearchDetailPastVisionStart::InStartData' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchDetailPastVisionStart, bInPast) == 0x000020, "Member 'RCAdvHUD_ResearchDetailPastVisionStart::bInPast' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchDetailPastVisionStart, bInEnableFinish) == 0x000021, "Member 'RCAdvHUD_ResearchDetailPastVisionStart::bInEnableFinish' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchDetailPastVisionStart, ReturnValue) == 0x000022, "Member 'RCAdvHUD_ResearchDetailPastVisionStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchDetailSpotSelectStart
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUD_ResearchDetailSpotSelectStart final
{
public:
	struct FRCAdvHUDResearchDetailStartData       InStartData;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchDetailSpotSelectStart) == 0x000008, "Wrong alignment on RCAdvHUD_ResearchDetailSpotSelectStart");
static_assert(sizeof(RCAdvHUD_ResearchDetailSpotSelectStart) == 0x000028, "Wrong size on RCAdvHUD_ResearchDetailSpotSelectStart");
static_assert(offsetof(RCAdvHUD_ResearchDetailSpotSelectStart, InStartData) == 0x000000, "Member 'RCAdvHUD_ResearchDetailSpotSelectStart::InStartData' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchDetailSpotSelectStart, ReturnValue) == 0x000020, "Member 'RCAdvHUD_ResearchDetailSpotSelectStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchDetailStart
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUD_ResearchDetailStart final
{
public:
	struct FRCAdvHUDResearchDetailStartData       InStartData;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchDetailStart) == 0x000008, "Wrong alignment on RCAdvHUD_ResearchDetailStart");
static_assert(sizeof(RCAdvHUD_ResearchDetailStart) == 0x000028, "Wrong size on RCAdvHUD_ResearchDetailStart");
static_assert(offsetof(RCAdvHUD_ResearchDetailStart, InStartData) == 0x000000, "Member 'RCAdvHUD_ResearchDetailStart::InStartData' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchDetailStart, ReturnValue) == 0x000020, "Member 'RCAdvHUD_ResearchDetailStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchFinish) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchFinish");
static_assert(sizeof(RCAdvHUD_ResearchFinish) == 0x000001, "Wrong size on RCAdvHUD_ResearchFinish");
static_assert(offsetof(RCAdvHUD_ResearchFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchFinishTelop_CheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchFinishTelop_CheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchFinishTelop_CheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchFinishTelop_CheckFinished");
static_assert(sizeof(RCAdvHUD_ResearchFinishTelop_CheckFinished) == 0x000001, "Wrong size on RCAdvHUD_ResearchFinishTelop_CheckFinished");
static_assert(offsetof(RCAdvHUD_ResearchFinishTelop_CheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchFinishTelop_CheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchFinishTelop_Start
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchFinishTelop_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchFinishTelop_Start) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchFinishTelop_Start");
static_assert(sizeof(RCAdvHUD_ResearchFinishTelop_Start) == 0x000001, "Wrong size on RCAdvHUD_ResearchFinishTelop_Start");
static_assert(offsetof(RCAdvHUD_ResearchFinishTelop_Start, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchFinishTelop_Start::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchGetKagi_CheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchGetKagi_CheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchGetKagi_CheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchGetKagi_CheckFinished");
static_assert(sizeof(RCAdvHUD_ResearchGetKagi_CheckFinished) == 0x000001, "Wrong size on RCAdvHUD_ResearchGetKagi_CheckFinished");
static_assert(offsetof(RCAdvHUD_ResearchGetKagi_CheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchGetKagi_CheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchGetKagi_StartFromKagiID
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_ResearchGetKagi_StartFromKagiID final
{
public:
	class FName                                   InKagiID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPhase;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchGetKagi_StartFromKagiID) == 0x000004, "Wrong alignment on RCAdvHUD_ResearchGetKagi_StartFromKagiID");
static_assert(sizeof(RCAdvHUD_ResearchGetKagi_StartFromKagiID) == 0x000010, "Wrong size on RCAdvHUD_ResearchGetKagi_StartFromKagiID");
static_assert(offsetof(RCAdvHUD_ResearchGetKagi_StartFromKagiID, InKagiID) == 0x000000, "Member 'RCAdvHUD_ResearchGetKagi_StartFromKagiID::InKagiID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchGetKagi_StartFromKagiID, InPhase) == 0x000008, "Member 'RCAdvHUD_ResearchGetKagi_StartFromKagiID::InPhase' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchGetKagi_StartFromKagiID, ReturnValue) == 0x00000C, "Member 'RCAdvHUD_ResearchGetKagi_StartFromKagiID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchLocation_CheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchLocation_CheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchLocation_CheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchLocation_CheckFinished");
static_assert(sizeof(RCAdvHUD_ResearchLocation_CheckFinished) == 0x000001, "Wrong size on RCAdvHUD_ResearchLocation_CheckFinished");
static_assert(offsetof(RCAdvHUD_ResearchLocation_CheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchLocation_CheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchLocation_Finish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchLocation_Finish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchLocation_Finish) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchLocation_Finish");
static_assert(sizeof(RCAdvHUD_ResearchLocation_Finish) == 0x000001, "Wrong size on RCAdvHUD_ResearchLocation_Finish");
static_assert(offsetof(RCAdvHUD_ResearchLocation_Finish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchLocation_Finish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchLocation_Start
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUD_ResearchLocation_Start final
{
public:
	class FName                                   InLocationID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLocationTextID;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchLocation_Start) == 0x000004, "Wrong alignment on RCAdvHUD_ResearchLocation_Start");
static_assert(sizeof(RCAdvHUD_ResearchLocation_Start) == 0x000014, "Wrong size on RCAdvHUD_ResearchLocation_Start");
static_assert(offsetof(RCAdvHUD_ResearchLocation_Start, InLocationID) == 0x000000, "Member 'RCAdvHUD_ResearchLocation_Start::InLocationID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchLocation_Start, InLocationTextID) == 0x000008, "Member 'RCAdvHUD_ResearchLocation_Start::InLocationTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchLocation_Start, ReturnValue) == 0x000010, "Member 'RCAdvHUD_ResearchLocation_Start::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchMarker_IsMarkerVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_ResearchMarker_IsMarkerVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchMarker_IsMarkerVisible) == 0x000008, "Wrong alignment on RCAdvHUD_ResearchMarker_IsMarkerVisible");
static_assert(sizeof(RCAdvHUD_ResearchMarker_IsMarkerVisible) == 0x000010, "Wrong size on RCAdvHUD_ResearchMarker_IsMarkerVisible");
static_assert(offsetof(RCAdvHUD_ResearchMarker_IsMarkerVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUD_ResearchMarker_IsMarkerVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchMarker_IsMarkerVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUD_ResearchMarker_IsMarkerVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchMarker_SetEnable
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_ResearchMarker_SetEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchMarker_SetEnable) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchMarker_SetEnable");
static_assert(sizeof(RCAdvHUD_ResearchMarker_SetEnable) == 0x000002, "Wrong size on RCAdvHUD_ResearchMarker_SetEnable");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetEnable, bInEnable) == 0x000000, "Member 'RCAdvHUD_ResearchMarker_SetEnable::bInEnable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetEnable, ReturnValue) == 0x000001, "Member 'RCAdvHUD_ResearchMarker_SetEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchMarker_SetMarkerData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUD_ResearchMarker_SetMarkerData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInNameDraw;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInResearched;                                     // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchMarker_SetMarkerData) == 0x000008, "Wrong alignment on RCAdvHUD_ResearchMarker_SetMarkerData");
static_assert(sizeof(RCAdvHUD_ResearchMarker_SetMarkerData) == 0x000020, "Wrong size on RCAdvHUD_ResearchMarker_SetMarkerData");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetMarkerData, InCheckActor) == 0x000000, "Member 'RCAdvHUD_ResearchMarker_SetMarkerData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetMarkerData, InTextID) == 0x000008, "Member 'RCAdvHUD_ResearchMarker_SetMarkerData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetMarkerData, bInDraw) == 0x000010, "Member 'RCAdvHUD_ResearchMarker_SetMarkerData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetMarkerData, bInNameDraw) == 0x000011, "Member 'RCAdvHUD_ResearchMarker_SetMarkerData::bInNameDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetMarkerData, bInResearched) == 0x000012, "Member 'RCAdvHUD_ResearchMarker_SetMarkerData::bInResearched' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetMarkerData, bInAccessable) == 0x000013, "Member 'RCAdvHUD_ResearchMarker_SetMarkerData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetMarkerData, InScale) == 0x000014, "Member 'RCAdvHUD_ResearchMarker_SetMarkerData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchMarker_SetMarkerData, ReturnValue) == 0x000018, "Member 'RCAdvHUD_ResearchMarker_SetMarkerData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchModeFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchModeFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchModeFinish) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchModeFinish");
static_assert(sizeof(RCAdvHUD_ResearchModeFinish) == 0x000001, "Wrong size on RCAdvHUD_ResearchModeFinish");
static_assert(offsetof(RCAdvHUD_ResearchModeFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchModeFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchQuestionText_Finish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchQuestionText_Finish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchQuestionText_Finish) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchQuestionText_Finish");
static_assert(sizeof(RCAdvHUD_ResearchQuestionText_Finish) == 0x000001, "Wrong size on RCAdvHUD_ResearchQuestionText_Finish");
static_assert(offsetof(RCAdvHUD_ResearchQuestionText_Finish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchQuestionText_Finish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchQuestionText_SetText
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_ResearchQuestionText_SetText final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchQuestionText_SetText) == 0x000004, "Wrong alignment on RCAdvHUD_ResearchQuestionText_SetText");
static_assert(sizeof(RCAdvHUD_ResearchQuestionText_SetText) == 0x00000C, "Wrong size on RCAdvHUD_ResearchQuestionText_SetText");
static_assert(offsetof(RCAdvHUD_ResearchQuestionText_SetText, InTextID) == 0x000000, "Member 'RCAdvHUD_ResearchQuestionText_SetText::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchQuestionText_SetText, ReturnValue) == 0x000008, "Member 'RCAdvHUD_ResearchQuestionText_SetText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchQuestionText_Start
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_ResearchQuestionText_Start final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchQuestionText_Start) == 0x000004, "Wrong alignment on RCAdvHUD_ResearchQuestionText_Start");
static_assert(sizeof(RCAdvHUD_ResearchQuestionText_Start) == 0x00000C, "Wrong size on RCAdvHUD_ResearchQuestionText_Start");
static_assert(offsetof(RCAdvHUD_ResearchQuestionText_Start, InTextID) == 0x000000, "Member 'RCAdvHUD_ResearchQuestionText_Start::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchQuestionText_Start, ReturnValue) == 0x000008, "Member 'RCAdvHUD_ResearchQuestionText_Start::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchSpotJudgeTelop_CheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchSpotJudgeTelop_CheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchSpotJudgeTelop_CheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchSpotJudgeTelop_CheckFinished");
static_assert(sizeof(RCAdvHUD_ResearchSpotJudgeTelop_CheckFinished) == 0x000001, "Wrong size on RCAdvHUD_ResearchSpotJudgeTelop_CheckFinished");
static_assert(offsetof(RCAdvHUD_ResearchSpotJudgeTelop_CheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchSpotJudgeTelop_CheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchSpotJudgeTelopCorrect_Start
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchSpotJudgeTelopCorrect_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchSpotJudgeTelopCorrect_Start) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchSpotJudgeTelopCorrect_Start");
static_assert(sizeof(RCAdvHUD_ResearchSpotJudgeTelopCorrect_Start) == 0x000001, "Wrong size on RCAdvHUD_ResearchSpotJudgeTelopCorrect_Start");
static_assert(offsetof(RCAdvHUD_ResearchSpotJudgeTelopCorrect_Start, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchSpotJudgeTelopCorrect_Start::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchSpotJudgeTelopMistake_Start
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchSpotJudgeTelopMistake_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchSpotJudgeTelopMistake_Start) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchSpotJudgeTelopMistake_Start");
static_assert(sizeof(RCAdvHUD_ResearchSpotJudgeTelopMistake_Start) == 0x000001, "Wrong size on RCAdvHUD_ResearchSpotJudgeTelopMistake_Start");
static_assert(offsetof(RCAdvHUD_ResearchSpotJudgeTelopMistake_Start, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchSpotJudgeTelopMistake_Start::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchSpotSelectStartTelop_CheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchSpotSelectStartTelop_CheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchSpotSelectStartTelop_CheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchSpotSelectStartTelop_CheckFinished");
static_assert(sizeof(RCAdvHUD_ResearchSpotSelectStartTelop_CheckFinished) == 0x000001, "Wrong size on RCAdvHUD_ResearchSpotSelectStartTelop_CheckFinished");
static_assert(offsetof(RCAdvHUD_ResearchSpotSelectStartTelop_CheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchSpotSelectStartTelop_CheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchSpotSelectStartTelop_Start
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchSpotSelectStartTelop_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchSpotSelectStartTelop_Start) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchSpotSelectStartTelop_Start");
static_assert(sizeof(RCAdvHUD_ResearchSpotSelectStartTelop_Start) == 0x000001, "Wrong size on RCAdvHUD_ResearchSpotSelectStartTelop_Start");
static_assert(offsetof(RCAdvHUD_ResearchSpotSelectStartTelop_Start, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchSpotSelectStartTelop_Start::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchStart
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUD_ResearchStart final
{
public:
	bool                                          bInShowLocation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableFinish;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMiniMap;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchStart) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchStart");
static_assert(sizeof(RCAdvHUD_ResearchStart) == 0x000004, "Wrong size on RCAdvHUD_ResearchStart");
static_assert(offsetof(RCAdvHUD_ResearchStart, bInShowLocation) == 0x000000, "Member 'RCAdvHUD_ResearchStart::bInShowLocation' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchStart, bInEnableFinish) == 0x000001, "Member 'RCAdvHUD_ResearchStart::bInEnableFinish' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchStart, bInMiniMap) == 0x000002, "Member 'RCAdvHUD_ResearchStart::bInMiniMap' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchStart, ReturnValue) == 0x000003, "Member 'RCAdvHUD_ResearchStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchStartTelop_CheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchStartTelop_CheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchStartTelop_CheckFinished) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchStartTelop_CheckFinished");
static_assert(sizeof(RCAdvHUD_ResearchStartTelop_CheckFinished) == 0x000001, "Wrong size on RCAdvHUD_ResearchStartTelop_CheckFinished");
static_assert(offsetof(RCAdvHUD_ResearchStartTelop_CheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchStartTelop_CheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchStartTelop_Start
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResearchStartTelop_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResearchStartTelop_Start) == 0x000001, "Wrong alignment on RCAdvHUD_ResearchStartTelop_Start");
static_assert(sizeof(RCAdvHUD_ResearchStartTelop_Start) == 0x000001, "Wrong size on RCAdvHUD_ResearchStartTelop_Start");
static_assert(offsetof(RCAdvHUD_ResearchStartTelop_Start, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResearchStartTelop_Start::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResearchStartWithQuestionText
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_ResearchStartWithQuestionText final
{
public:
	class FName                                   InQuestionTextID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableFinish;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMiniMap;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_ResearchStartWithQuestionText) == 0x000004, "Wrong alignment on RCAdvHUD_ResearchStartWithQuestionText");
static_assert(sizeof(RCAdvHUD_ResearchStartWithQuestionText) == 0x00000C, "Wrong size on RCAdvHUD_ResearchStartWithQuestionText");
static_assert(offsetof(RCAdvHUD_ResearchStartWithQuestionText, InQuestionTextID) == 0x000000, "Member 'RCAdvHUD_ResearchStartWithQuestionText::InQuestionTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchStartWithQuestionText, bInEnableFinish) == 0x000008, "Member 'RCAdvHUD_ResearchStartWithQuestionText::bInEnableFinish' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchStartWithQuestionText, bInMiniMap) == 0x000009, "Member 'RCAdvHUD_ResearchStartWithQuestionText::bInMiniMap' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_ResearchStartWithQuestionText, ReturnValue) == 0x00000A, "Member 'RCAdvHUD_ResearchStartWithQuestionText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.ResetSkillSelectFocus
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_ResetSkillSelectFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_ResetSkillSelectFocus) == 0x000001, "Wrong alignment on RCAdvHUD_ResetSkillSelectFocus");
static_assert(sizeof(RCAdvHUD_ResetSkillSelectFocus) == 0x000001, "Wrong size on RCAdvHUD_ResetSkillSelectFocus");
static_assert(offsetof(RCAdvHUD_ResetSkillSelectFocus, ReturnValue) == 0x000000, "Member 'RCAdvHUD_ResetSkillSelectFocus::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialSubtitleCancel
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_SequentialSubtitleCancel final
{
public:
	bool                                          bInStopVoice;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SequentialSubtitleCancel) == 0x000001, "Wrong alignment on RCAdvHUD_SequentialSubtitleCancel");
static_assert(sizeof(RCAdvHUD_SequentialSubtitleCancel) == 0x000002, "Wrong size on RCAdvHUD_SequentialSubtitleCancel");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleCancel, bInStopVoice) == 0x000000, "Member 'RCAdvHUD_SequentialSubtitleCancel::bInStopVoice' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleCancel, ReturnValue) == 0x000001, "Member 'RCAdvHUD_SequentialSubtitleCancel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialSubtitleFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SequentialSubtitleFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SequentialSubtitleFinish) == 0x000001, "Wrong alignment on RCAdvHUD_SequentialSubtitleFinish");
static_assert(sizeof(RCAdvHUD_SequentialSubtitleFinish) == 0x000001, "Wrong size on RCAdvHUD_SequentialSubtitleFinish");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SequentialSubtitleFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialSubtitleStart2
// 0x0040 (0x0040 - 0x0000)
struct RCAdvHUD_SequentialSubtitleStart2 final
{
public:
	class FName                                   InSubtitleID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCSubtitleData                        InSubtitleData;                                    // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	float                                         InDelayAtEnd;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayToNext;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCloseAtAllEnd;                                  // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisableSave;                                    // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialSubtitleStart2) == 0x000008, "Wrong alignment on RCAdvHUD_SequentialSubtitleStart2");
static_assert(sizeof(RCAdvHUD_SequentialSubtitleStart2) == 0x000040, "Wrong size on RCAdvHUD_SequentialSubtitleStart2");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2, InSubtitleID) == 0x000000, "Member 'RCAdvHUD_SequentialSubtitleStart2::InSubtitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2, InSubtitleData) == 0x000008, "Member 'RCAdvHUD_SequentialSubtitleStart2::InSubtitleData' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2, InDelayAtEnd) == 0x000030, "Member 'RCAdvHUD_SequentialSubtitleStart2::InDelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2, InDelayToNext) == 0x000034, "Member 'RCAdvHUD_SequentialSubtitleStart2::InDelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2, bInCloseAtAllEnd) == 0x000038, "Member 'RCAdvHUD_SequentialSubtitleStart2::bInCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2, bInDisableSave) == 0x000039, "Member 'RCAdvHUD_SequentialSubtitleStart2::bInDisableSave' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2, ReturnValue) == 0x00003A, "Member 'RCAdvHUD_SequentialSubtitleStart2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialSubtitleStart2NoVoice
// 0x0040 (0x0040 - 0x0000)
struct RCAdvHUD_SequentialSubtitleStart2NoVoice final
{
public:
	class FName                                   InSubtitleID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCSubtitleData                        InSubtitleData;                                    // 0x0008(0x0028)(Parm, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         InDelayAtEnd;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayToNext;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCloseAtAllEnd;                                  // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisableSave;                                    // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialSubtitleStart2NoVoice) == 0x000008, "Wrong alignment on RCAdvHUD_SequentialSubtitleStart2NoVoice");
static_assert(sizeof(RCAdvHUD_SequentialSubtitleStart2NoVoice) == 0x000040, "Wrong size on RCAdvHUD_SequentialSubtitleStart2NoVoice");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2NoVoice, InSubtitleID) == 0x000000, "Member 'RCAdvHUD_SequentialSubtitleStart2NoVoice::InSubtitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2NoVoice, InSubtitleData) == 0x000008, "Member 'RCAdvHUD_SequentialSubtitleStart2NoVoice::InSubtitleData' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2NoVoice, InDelayAtEnd) == 0x000030, "Member 'RCAdvHUD_SequentialSubtitleStart2NoVoice::InDelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2NoVoice, InDelayToNext) == 0x000034, "Member 'RCAdvHUD_SequentialSubtitleStart2NoVoice::InDelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2NoVoice, bInCloseAtAllEnd) == 0x000038, "Member 'RCAdvHUD_SequentialSubtitleStart2NoVoice::bInCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2NoVoice, bInDisableSave) == 0x000039, "Member 'RCAdvHUD_SequentialSubtitleStart2NoVoice::bInDisableSave' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStart2NoVoice, ReturnValue) == 0x00003A, "Member 'RCAdvHUD_SequentialSubtitleStart2NoVoice::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialSubtitleStartFromData2
// 0x0038 (0x0038 - 0x0000)
struct RCAdvHUD_SequentialSubtitleStartFromData2 final
{
public:
	struct FRCSubtitleData                        InSubtitleData;                                    // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	float                                         InDelayAtEnd;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayToNext;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCloseAtAllEnd;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisableSave;                                    // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialSubtitleStartFromData2) == 0x000008, "Wrong alignment on RCAdvHUD_SequentialSubtitleStartFromData2");
static_assert(sizeof(RCAdvHUD_SequentialSubtitleStartFromData2) == 0x000038, "Wrong size on RCAdvHUD_SequentialSubtitleStartFromData2");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromData2, InSubtitleData) == 0x000000, "Member 'RCAdvHUD_SequentialSubtitleStartFromData2::InSubtitleData' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromData2, InDelayAtEnd) == 0x000028, "Member 'RCAdvHUD_SequentialSubtitleStartFromData2::InDelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromData2, InDelayToNext) == 0x00002C, "Member 'RCAdvHUD_SequentialSubtitleStartFromData2::InDelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromData2, bInCloseAtAllEnd) == 0x000030, "Member 'RCAdvHUD_SequentialSubtitleStartFromData2::bInCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromData2, bInDisableSave) == 0x000031, "Member 'RCAdvHUD_SequentialSubtitleStartFromData2::bInDisableSave' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromData2, ReturnValue) == 0x000032, "Member 'RCAdvHUD_SequentialSubtitleStartFromData2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialSubtitleStartFromDataTable
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUD_SequentialSubtitleStartFromDataTable final
{
public:
	class UDataTable*                             InTable;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSubtitleID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEnd;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayToNext;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCloseAtAllEnd;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisableSave;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialSubtitleStartFromDataTable) == 0x000008, "Wrong alignment on RCAdvHUD_SequentialSubtitleStartFromDataTable");
static_assert(sizeof(RCAdvHUD_SequentialSubtitleStartFromDataTable) == 0x000020, "Wrong size on RCAdvHUD_SequentialSubtitleStartFromDataTable");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable, InTable) == 0x000000, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable::InTable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable, InSubtitleID) == 0x000008, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable::InSubtitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable, InDelayAtEnd) == 0x000010, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable::InDelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable, InDelayToNext) == 0x000014, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable::InDelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable, bInCloseAtAllEnd) == 0x000018, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable::bInCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable, bInDisableSave) == 0x000019, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable::bInDisableSave' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable, ReturnValue) == 0x00001A, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialSubtitleStartFromDataTable_WaitPush
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush final
{
public:
	class UDataTable*                             InTable;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSubtitleID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEnd;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayToNext;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCloseAtAllEnd;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisableSave;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush) == 0x000008, "Wrong alignment on RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush");
static_assert(sizeof(RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush) == 0x000020, "Wrong size on RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush, InTable) == 0x000000, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush::InTable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush, InSubtitleID) == 0x000008, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush::InSubtitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush, InDelayAtEnd) == 0x000010, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush::InDelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush, InDelayToNext) == 0x000014, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush::InDelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush, bInCloseAtAllEnd) == 0x000018, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush::bInCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush, bInDisableSave) == 0x000019, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush::bInDisableSave' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush, ReturnValue) == 0x00001A, "Member 'RCAdvHUD_SequentialSubtitleStartFromDataTable_WaitPush::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialSubtitleStartFromSubtitleID
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUD_SequentialSubtitleStartFromSubtitleID final
{
public:
	class FName                                   InSubtitleID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEnd;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayToNext;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCloseAtAllEnd;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisableSave;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialSubtitleStartFromSubtitleID) == 0x000004, "Wrong alignment on RCAdvHUD_SequentialSubtitleStartFromSubtitleID");
static_assert(sizeof(RCAdvHUD_SequentialSubtitleStartFromSubtitleID) == 0x000014, "Wrong size on RCAdvHUD_SequentialSubtitleStartFromSubtitleID");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleID, InSubtitleID) == 0x000000, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleID::InSubtitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleID, InDelayAtEnd) == 0x000008, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleID::InDelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleID, InDelayToNext) == 0x00000C, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleID::InDelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleID, bInCloseAtAllEnd) == 0x000010, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleID::bInCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleID, bInDisableSave) == 0x000011, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleID::bInDisableSave' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleID, ReturnValue) == 0x000012, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialSubtitleStartFromSubtitleIDForMovie
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie final
{
public:
	class FName                                   InSubtitleID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEnd;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayToNext;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCloseAtAllEnd;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisableSave;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie) == 0x000004, "Wrong alignment on RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie");
static_assert(sizeof(RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie) == 0x000014, "Wrong size on RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie, InSubtitleID) == 0x000000, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie::InSubtitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie, InDelayAtEnd) == 0x000008, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie::InDelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie, InDelayToNext) == 0x00000C, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie::InDelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie, bInCloseAtAllEnd) == 0x000010, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie::bInCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie, bInDisableSave) == 0x000011, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie::bInDisableSave' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie, ReturnValue) == 0x000012, "Member 'RCAdvHUD_SequentialSubtitleStartFromSubtitleIDForMovie::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialTalkFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SequentialTalkFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SequentialTalkFinish) == 0x000001, "Wrong alignment on RCAdvHUD_SequentialTalkFinish");
static_assert(sizeof(RCAdvHUD_SequentialTalkFinish) == 0x000001, "Wrong size on RCAdvHUD_SequentialTalkFinish");
static_assert(offsetof(RCAdvHUD_SequentialTalkFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SequentialTalkFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialTalkForceFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SequentialTalkForceFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SequentialTalkForceFinish) == 0x000001, "Wrong alignment on RCAdvHUD_SequentialTalkForceFinish");
static_assert(sizeof(RCAdvHUD_SequentialTalkForceFinish) == 0x000001, "Wrong size on RCAdvHUD_SequentialTalkForceFinish");
static_assert(offsetof(RCAdvHUD_SequentialTalkForceFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SequentialTalkForceFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialTalkRequestSuspend
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SequentialTalkRequestSuspend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SequentialTalkRequestSuspend) == 0x000001, "Wrong alignment on RCAdvHUD_SequentialTalkRequestSuspend");
static_assert(sizeof(RCAdvHUD_SequentialTalkRequestSuspend) == 0x000001, "Wrong size on RCAdvHUD_SequentialTalkRequestSuspend");
static_assert(offsetof(RCAdvHUD_SequentialTalkRequestSuspend, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SequentialTalkRequestSuspend::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialTalkResume
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SequentialTalkResume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SequentialTalkResume) == 0x000001, "Wrong alignment on RCAdvHUD_SequentialTalkResume");
static_assert(sizeof(RCAdvHUD_SequentialTalkResume) == 0x000001, "Wrong size on RCAdvHUD_SequentialTalkResume");
static_assert(offsetof(RCAdvHUD_SequentialTalkResume, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SequentialTalkResume::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialTalkStart2
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUD_SequentialTalkStart2 final
{
public:
	class FName                                   InTalkID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCTalkData                            InTalkData;                                        // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bInForceAutoPlay;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialTalkStart2) == 0x000008, "Wrong alignment on RCAdvHUD_SequentialTalkStart2");
static_assert(sizeof(RCAdvHUD_SequentialTalkStart2) == 0x000028, "Wrong size on RCAdvHUD_SequentialTalkStart2");
static_assert(offsetof(RCAdvHUD_SequentialTalkStart2, InTalkID) == 0x000000, "Member 'RCAdvHUD_SequentialTalkStart2::InTalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStart2, InTalkData) == 0x000008, "Member 'RCAdvHUD_SequentialTalkStart2::InTalkData' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStart2, bInForceAutoPlay) == 0x000020, "Member 'RCAdvHUD_SequentialTalkStart2::bInForceAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStart2, ReturnValue) == 0x000021, "Member 'RCAdvHUD_SequentialTalkStart2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialTalkStartFromData2
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUD_SequentialTalkStartFromData2 final
{
public:
	struct FRCTalkData                            InTalkData;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bInForceAutoPlay;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialTalkStartFromData2) == 0x000008, "Wrong alignment on RCAdvHUD_SequentialTalkStartFromData2");
static_assert(sizeof(RCAdvHUD_SequentialTalkStartFromData2) == 0x000020, "Wrong size on RCAdvHUD_SequentialTalkStartFromData2");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromData2, InTalkData) == 0x000000, "Member 'RCAdvHUD_SequentialTalkStartFromData2::InTalkData' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromData2, bInForceAutoPlay) == 0x000018, "Member 'RCAdvHUD_SequentialTalkStartFromData2::bInForceAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromData2, ReturnValue) == 0x000019, "Member 'RCAdvHUD_SequentialTalkStartFromData2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialTalkStartFromDataTable
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_SequentialTalkStartFromDataTable final
{
public:
	class UDataTable*                             InTable;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTalkID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceAutoPlay;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialTalkStartFromDataTable) == 0x000008, "Wrong alignment on RCAdvHUD_SequentialTalkStartFromDataTable");
static_assert(sizeof(RCAdvHUD_SequentialTalkStartFromDataTable) == 0x000018, "Wrong size on RCAdvHUD_SequentialTalkStartFromDataTable");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromDataTable, InTable) == 0x000000, "Member 'RCAdvHUD_SequentialTalkStartFromDataTable::InTable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromDataTable, InTalkID) == 0x000008, "Member 'RCAdvHUD_SequentialTalkStartFromDataTable::InTalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromDataTable, bInForceAutoPlay) == 0x000010, "Member 'RCAdvHUD_SequentialTalkStartFromDataTable::bInForceAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromDataTable, ReturnValue) == 0x000011, "Member 'RCAdvHUD_SequentialTalkStartFromDataTable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SequentialTalkStartFromTalkID
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_SequentialTalkStartFromTalkID final
{
public:
	class FName                                   InTalkID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceAutoPlay;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SequentialTalkStartFromTalkID) == 0x000004, "Wrong alignment on RCAdvHUD_SequentialTalkStartFromTalkID");
static_assert(sizeof(RCAdvHUD_SequentialTalkStartFromTalkID) == 0x00000C, "Wrong size on RCAdvHUD_SequentialTalkStartFromTalkID");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromTalkID, InTalkID) == 0x000000, "Member 'RCAdvHUD_SequentialTalkStartFromTalkID::InTalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromTalkID, bInForceAutoPlay) == 0x000008, "Member 'RCAdvHUD_SequentialTalkStartFromTalkID::bInForceAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SequentialTalkStartFromTalkID, ReturnValue) == 0x000009, "Member 'RCAdvHUD_SequentialTalkStartFromTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SetAreaMapMenuNewAreaSePlayed
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SetAreaMapMenuNewAreaSePlayed final
{
public:
	bool                                          bInPlayedNewAreaSE;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SetAreaMapMenuNewAreaSePlayed) == 0x000001, "Wrong alignment on RCAdvHUD_SetAreaMapMenuNewAreaSePlayed");
static_assert(sizeof(RCAdvHUD_SetAreaMapMenuNewAreaSePlayed) == 0x000001, "Wrong size on RCAdvHUD_SetAreaMapMenuNewAreaSePlayed");
static_assert(offsetof(RCAdvHUD_SetAreaMapMenuNewAreaSePlayed, bInPlayedNewAreaSE) == 0x000000, "Member 'RCAdvHUD_SetAreaMapMenuNewAreaSePlayed::bInPlayedNewAreaSE' has a wrong offset!");

// Function RC.RCAdvHUD.SetBalloonData
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_SetBalloonData final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCBaloonFrame                                InBalloonFrameType;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCBaloonType                                 InBalloonContentType;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InTextID;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInBalloonDraw;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInTextDraw;                                       // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SetBalloonData) == 0x000008, "Wrong alignment on RCAdvHUD_SetBalloonData");
static_assert(sizeof(RCAdvHUD_SetBalloonData) == 0x000018, "Wrong size on RCAdvHUD_SetBalloonData");
static_assert(offsetof(RCAdvHUD_SetBalloonData, InPawn) == 0x000000, "Member 'RCAdvHUD_SetBalloonData::InPawn' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetBalloonData, InBalloonFrameType) == 0x000008, "Member 'RCAdvHUD_SetBalloonData::InBalloonFrameType' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetBalloonData, InBalloonContentType) == 0x000009, "Member 'RCAdvHUD_SetBalloonData::InBalloonContentType' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetBalloonData, InTextID) == 0x00000C, "Member 'RCAdvHUD_SetBalloonData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetBalloonData, bInBalloonDraw) == 0x000014, "Member 'RCAdvHUD_SetBalloonData::bInBalloonDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetBalloonData, bInTextDraw) == 0x000015, "Member 'RCAdvHUD_SetBalloonData::bInTextDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetBalloonData, ReturnValue) == 0x000016, "Member 'RCAdvHUD_SetBalloonData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SetMarkerData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUD_SetMarkerData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSubquest;                                       // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInGoal;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SetMarkerData) == 0x000008, "Wrong alignment on RCAdvHUD_SetMarkerData");
static_assert(sizeof(RCAdvHUD_SetMarkerData) == 0x000020, "Wrong size on RCAdvHUD_SetMarkerData");
static_assert(offsetof(RCAdvHUD_SetMarkerData, InCheckActor) == 0x000000, "Member 'RCAdvHUD_SetMarkerData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMarkerData, InTextID) == 0x000008, "Member 'RCAdvHUD_SetMarkerData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMarkerData, bInDraw) == 0x000010, "Member 'RCAdvHUD_SetMarkerData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMarkerData, bInAccessable) == 0x000011, "Member 'RCAdvHUD_SetMarkerData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMarkerData, bInSubquest) == 0x000012, "Member 'RCAdvHUD_SetMarkerData::bInSubquest' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMarkerData, InScale) == 0x000014, "Member 'RCAdvHUD_SetMarkerData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMarkerData, bInGoal) == 0x000018, "Member 'RCAdvHUD_SetMarkerData::bInGoal' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMarkerData, ReturnValue) == 0x000019, "Member 'RCAdvHUD_SetMarkerData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SetMenuButtonGuide
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_SetMenuButtonGuide final
{
public:
	class FName                                   InModeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOpenAnim;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SetMenuButtonGuide) == 0x000004, "Wrong alignment on RCAdvHUD_SetMenuButtonGuide");
static_assert(sizeof(RCAdvHUD_SetMenuButtonGuide) == 0x00000C, "Wrong size on RCAdvHUD_SetMenuButtonGuide");
static_assert(offsetof(RCAdvHUD_SetMenuButtonGuide, InModeID) == 0x000000, "Member 'RCAdvHUD_SetMenuButtonGuide::InModeID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMenuButtonGuide, bPlayOpenAnim) == 0x000008, "Member 'RCAdvHUD_SetMenuButtonGuide::bPlayOpenAnim' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMenuButtonGuide, ReturnValue) == 0x000009, "Member 'RCAdvHUD_SetMenuButtonGuide::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SetMenuButtonGuideResetKeyType
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SetMenuButtonGuideResetKeyType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SetMenuButtonGuideResetKeyType) == 0x000001, "Wrong alignment on RCAdvHUD_SetMenuButtonGuideResetKeyType");
static_assert(sizeof(RCAdvHUD_SetMenuButtonGuideResetKeyType) == 0x000001, "Wrong size on RCAdvHUD_SetMenuButtonGuideResetKeyType");
static_assert(offsetof(RCAdvHUD_SetMenuButtonGuideResetKeyType, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SetMenuButtonGuideResetKeyType::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SetMenuHelpText
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_SetMenuHelpText final
{
public:
	class FName                                   InHelpTextID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SetMenuHelpText) == 0x000004, "Wrong alignment on RCAdvHUD_SetMenuHelpText");
static_assert(sizeof(RCAdvHUD_SetMenuHelpText) == 0x00000C, "Wrong size on RCAdvHUD_SetMenuHelpText");
static_assert(offsetof(RCAdvHUD_SetMenuHelpText, InHelpTextID) == 0x000000, "Member 'RCAdvHUD_SetMenuHelpText::InHelpTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetMenuHelpText, ReturnValue) == 0x000008, "Member 'RCAdvHUD_SetMenuHelpText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SetShinigamiActor
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_SetShinigamiActor final
{
public:
	class ARCCharacterRender*                     InShinigamiActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SetShinigamiActor) == 0x000008, "Wrong alignment on RCAdvHUD_SetShinigamiActor");
static_assert(sizeof(RCAdvHUD_SetShinigamiActor) == 0x000008, "Wrong size on RCAdvHUD_SetShinigamiActor");
static_assert(offsetof(RCAdvHUD_SetShinigamiActor, InShinigamiActor) == 0x000000, "Member 'RCAdvHUD_SetShinigamiActor::InShinigamiActor' has a wrong offset!");

// Function RC.RCAdvHUD.SetTalkIconData
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_SetTalkIconData final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSubquest;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInGoal;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SetTalkIconData) == 0x000008, "Wrong alignment on RCAdvHUD_SetTalkIconData");
static_assert(sizeof(RCAdvHUD_SetTalkIconData) == 0x000018, "Wrong size on RCAdvHUD_SetTalkIconData");
static_assert(offsetof(RCAdvHUD_SetTalkIconData, InPawn) == 0x000000, "Member 'RCAdvHUD_SetTalkIconData::InPawn' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetTalkIconData, bInDraw) == 0x000008, "Member 'RCAdvHUD_SetTalkIconData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetTalkIconData, bInAccessable) == 0x000009, "Member 'RCAdvHUD_SetTalkIconData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetTalkIconData, bInSubquest) == 0x00000A, "Member 'RCAdvHUD_SetTalkIconData::bInSubquest' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetTalkIconData, InScale) == 0x00000C, "Member 'RCAdvHUD_SetTalkIconData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetTalkIconData, bInGoal) == 0x000010, "Member 'RCAdvHUD_SetTalkIconData::bInGoal' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SetTalkIconData, ReturnValue) == 0x000011, "Member 'RCAdvHUD_SetTalkIconData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SkillMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SkillMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SkillMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_SkillMenuFinish");
static_assert(sizeof(RCAdvHUD_SkillMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_SkillMenuFinish");
static_assert(offsetof(RCAdvHUD_SkillMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SkillMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SkillMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SkillMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SkillMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_SkillMenuStart");
static_assert(sizeof(RCAdvHUD_SkillMenuStart) == 0x000001, "Wrong size on RCAdvHUD_SkillMenuStart");
static_assert(offsetof(RCAdvHUD_SkillMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SkillMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SkillSelectMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SkillSelectMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SkillSelectMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_SkillSelectMenuFinish");
static_assert(sizeof(RCAdvHUD_SkillSelectMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_SkillSelectMenuFinish");
static_assert(offsetof(RCAdvHUD_SkillSelectMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SkillSelectMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SkillSelectMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SkillSelectMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SkillSelectMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_SkillSelectMenuStart");
static_assert(sizeof(RCAdvHUD_SkillSelectMenuStart) == 0x000001, "Wrong size on RCAdvHUD_SkillSelectMenuStart");
static_assert(offsetof(RCAdvHUD_SkillSelectMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SkillSelectMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.StartKaiKagiSelect
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUD_StartKaiKagiSelect final
{
public:
	TArray<class FName>                           InKaiKagiIDArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InCorrectKaiKagiID;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInNotPause;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_StartKaiKagiSelect) == 0x000008, "Wrong alignment on RCAdvHUD_StartKaiKagiSelect");
static_assert(sizeof(RCAdvHUD_StartKaiKagiSelect) == 0x000020, "Wrong size on RCAdvHUD_StartKaiKagiSelect");
static_assert(offsetof(RCAdvHUD_StartKaiKagiSelect, InKaiKagiIDArray) == 0x000000, "Member 'RCAdvHUD_StartKaiKagiSelect::InKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_StartKaiKagiSelect, InCorrectKaiKagiID) == 0x000010, "Member 'RCAdvHUD_StartKaiKagiSelect::InCorrectKaiKagiID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_StartKaiKagiSelect, bInNotPause) == 0x000018, "Member 'RCAdvHUD_StartKaiKagiSelect::bInNotPause' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_StartKaiKagiSelect, ReturnValue) == 0x000019, "Member 'RCAdvHUD_StartKaiKagiSelect::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SubQuestMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SubQuestMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SubQuestMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_SubQuestMenuFinish");
static_assert(sizeof(RCAdvHUD_SubQuestMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_SubQuestMenuFinish");
static_assert(offsetof(RCAdvHUD_SubQuestMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SubQuestMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SubQuestMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SubQuestMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SubQuestMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_SubQuestMenuStart");
static_assert(sizeof(RCAdvHUD_SubQuestMenuStart) == 0x000001, "Wrong size on RCAdvHUD_SubQuestMenuStart");
static_assert(offsetof(RCAdvHUD_SubQuestMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SubQuestMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SubtitleCancel
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SubtitleCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SubtitleCancel) == 0x000001, "Wrong alignment on RCAdvHUD_SubtitleCancel");
static_assert(sizeof(RCAdvHUD_SubtitleCancel) == 0x000001, "Wrong size on RCAdvHUD_SubtitleCancel");
static_assert(offsetof(RCAdvHUD_SubtitleCancel, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SubtitleCancel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SubtitleFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SubtitleFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SubtitleFinish) == 0x000001, "Wrong alignment on RCAdvHUD_SubtitleFinish");
static_assert(sizeof(RCAdvHUD_SubtitleFinish) == 0x000001, "Wrong size on RCAdvHUD_SubtitleFinish");
static_assert(offsetof(RCAdvHUD_SubtitleFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SubtitleFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SubtitleStart
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_SubtitleStart final
{
public:
	class FName                                   InNameID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEndVoice;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SubtitleStart) == 0x000004, "Wrong alignment on RCAdvHUD_SubtitleStart");
static_assert(sizeof(RCAdvHUD_SubtitleStart) == 0x000018, "Wrong size on RCAdvHUD_SubtitleStart");
static_assert(offsetof(RCAdvHUD_SubtitleStart, InNameID) == 0x000000, "Member 'RCAdvHUD_SubtitleStart::InNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStart, InTextID) == 0x000008, "Member 'RCAdvHUD_SubtitleStart::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStart, InDelayAtEndVoice) == 0x000010, "Member 'RCAdvHUD_SubtitleStart::InDelayAtEndVoice' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStart, ReturnValue) == 0x000014, "Member 'RCAdvHUD_SubtitleStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SubtitleStart_OnlyCursor
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_SubtitleStart_OnlyCursor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_SubtitleStart_OnlyCursor) == 0x000001, "Wrong alignment on RCAdvHUD_SubtitleStart_OnlyCursor");
static_assert(sizeof(RCAdvHUD_SubtitleStart_OnlyCursor) == 0x000001, "Wrong size on RCAdvHUD_SubtitleStart_OnlyCursor");
static_assert(offsetof(RCAdvHUD_SubtitleStart_OnlyCursor, ReturnValue) == 0x000000, "Member 'RCAdvHUD_SubtitleStart_OnlyCursor::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SubtitleStart_WaitPush
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_SubtitleStart_WaitPush final
{
public:
	class FName                                   InNameID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEndVoice;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SubtitleStart_WaitPush) == 0x000004, "Wrong alignment on RCAdvHUD_SubtitleStart_WaitPush");
static_assert(sizeof(RCAdvHUD_SubtitleStart_WaitPush) == 0x000018, "Wrong size on RCAdvHUD_SubtitleStart_WaitPush");
static_assert(offsetof(RCAdvHUD_SubtitleStart_WaitPush, InNameID) == 0x000000, "Member 'RCAdvHUD_SubtitleStart_WaitPush::InNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStart_WaitPush, InTextID) == 0x000008, "Member 'RCAdvHUD_SubtitleStart_WaitPush::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStart_WaitPush, InDelayAtEndVoice) == 0x000010, "Member 'RCAdvHUD_SubtitleStart_WaitPush::InDelayAtEndVoice' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStart_WaitPush, ReturnValue) == 0x000014, "Member 'RCAdvHUD_SubtitleStart_WaitPush::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SubtitleStartFromCharacterID
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_SubtitleStartFromCharacterID final
{
public:
	int32                                         InCharacterNameID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterNameSubID;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEndVoice;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SubtitleStartFromCharacterID) == 0x000004, "Wrong alignment on RCAdvHUD_SubtitleStartFromCharacterID");
static_assert(sizeof(RCAdvHUD_SubtitleStartFromCharacterID) == 0x000018, "Wrong size on RCAdvHUD_SubtitleStartFromCharacterID");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID, InCharacterNameID) == 0x000000, "Member 'RCAdvHUD_SubtitleStartFromCharacterID::InCharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID, InCharacterNameSubID) == 0x000004, "Member 'RCAdvHUD_SubtitleStartFromCharacterID::InCharacterNameSubID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID, InTextID) == 0x000008, "Member 'RCAdvHUD_SubtitleStartFromCharacterID::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID, InDelayAtEndVoice) == 0x000010, "Member 'RCAdvHUD_SubtitleStartFromCharacterID::InDelayAtEndVoice' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID, ReturnValue) == 0x000014, "Member 'RCAdvHUD_SubtitleStartFromCharacterID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.SubtitleStartFromCharacterID_WaitPush
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_SubtitleStartFromCharacterID_WaitPush final
{
public:
	int32                                         InCharacterNameID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterNameSubID;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEndVoice;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_SubtitleStartFromCharacterID_WaitPush) == 0x000004, "Wrong alignment on RCAdvHUD_SubtitleStartFromCharacterID_WaitPush");
static_assert(sizeof(RCAdvHUD_SubtitleStartFromCharacterID_WaitPush) == 0x000018, "Wrong size on RCAdvHUD_SubtitleStartFromCharacterID_WaitPush");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID_WaitPush, InCharacterNameID) == 0x000000, "Member 'RCAdvHUD_SubtitleStartFromCharacterID_WaitPush::InCharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID_WaitPush, InCharacterNameSubID) == 0x000004, "Member 'RCAdvHUD_SubtitleStartFromCharacterID_WaitPush::InCharacterNameSubID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID_WaitPush, InTextID) == 0x000008, "Member 'RCAdvHUD_SubtitleStartFromCharacterID_WaitPush::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID_WaitPush, InDelayAtEndVoice) == 0x000010, "Member 'RCAdvHUD_SubtitleStartFromCharacterID_WaitPush::InDelayAtEndVoice' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_SubtitleStartFromCharacterID_WaitPush, ReturnValue) == 0x000014, "Member 'RCAdvHUD_SubtitleStartFromCharacterID_WaitPush::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_TalkFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_TalkFinish) == 0x000001, "Wrong alignment on RCAdvHUD_TalkFinish");
static_assert(sizeof(RCAdvHUD_TalkFinish) == 0x000001, "Wrong size on RCAdvHUD_TalkFinish");
static_assert(offsetof(RCAdvHUD_TalkFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_TalkFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkForceFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_TalkForceFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_TalkForceFinish) == 0x000001, "Wrong alignment on RCAdvHUD_TalkForceFinish");
static_assert(sizeof(RCAdvHUD_TalkForceFinish) == 0x000001, "Wrong size on RCAdvHUD_TalkForceFinish");
static_assert(offsetof(RCAdvHUD_TalkForceFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_TalkForceFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkLoadCharacterData
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUD_TalkLoadCharacterData final
{
public:
	int32                                         InCharacterNameID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterNameSubID;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFaceID;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkLoadCharacterData) == 0x000004, "Wrong alignment on RCAdvHUD_TalkLoadCharacterData");
static_assert(sizeof(RCAdvHUD_TalkLoadCharacterData) == 0x000014, "Wrong size on RCAdvHUD_TalkLoadCharacterData");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData, InCharacterNameID) == 0x000000, "Member 'RCAdvHUD_TalkLoadCharacterData::InCharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData, InCharacterNameSubID) == 0x000004, "Member 'RCAdvHUD_TalkLoadCharacterData::InCharacterNameSubID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData, InCharacterFaceID) == 0x000008, "Member 'RCAdvHUD_TalkLoadCharacterData::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData, InCharacterFacialID) == 0x00000C, "Member 'RCAdvHUD_TalkLoadCharacterData::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData, ReturnValue) == 0x000010, "Member 'RCAdvHUD_TalkLoadCharacterData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkLoadCharacterData2
// 0x0038 (0x0038 - 0x0000)
struct RCAdvHUD_TalkLoadCharacterData2 final
{
public:
	int32                                         InCharacterNameID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InCharacterNameSubIDs;                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCharacterFaceID;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InCharacterFacialIDs;                              // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkLoadCharacterData2) == 0x000008, "Wrong alignment on RCAdvHUD_TalkLoadCharacterData2");
static_assert(sizeof(RCAdvHUD_TalkLoadCharacterData2) == 0x000038, "Wrong size on RCAdvHUD_TalkLoadCharacterData2");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData2, InCharacterNameID) == 0x000000, "Member 'RCAdvHUD_TalkLoadCharacterData2::InCharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData2, InCharacterNameSubIDs) == 0x000008, "Member 'RCAdvHUD_TalkLoadCharacterData2::InCharacterNameSubIDs' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData2, InCharacterFaceID) == 0x000018, "Member 'RCAdvHUD_TalkLoadCharacterData2::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData2, InCharacterFacialIDs) == 0x000020, "Member 'RCAdvHUD_TalkLoadCharacterData2::InCharacterFacialIDs' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadCharacterData2, ReturnValue) == 0x000030, "Member 'RCAdvHUD_TalkLoadCharacterData2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkLoadFaceData
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_TalkLoadFaceData final
{
public:
	int32                                         InCharacterFaceID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkLoadFaceData) == 0x000004, "Wrong alignment on RCAdvHUD_TalkLoadFaceData");
static_assert(sizeof(RCAdvHUD_TalkLoadFaceData) == 0x00000C, "Wrong size on RCAdvHUD_TalkLoadFaceData");
static_assert(offsetof(RCAdvHUD_TalkLoadFaceData, InCharacterFaceID) == 0x000000, "Member 'RCAdvHUD_TalkLoadFaceData::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadFaceData, InCharacterFacialID) == 0x000004, "Member 'RCAdvHUD_TalkLoadFaceData::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadFaceData, ReturnValue) == 0x000008, "Member 'RCAdvHUD_TalkLoadFaceData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkLoadNameplateData
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_TalkLoadNameplateData final
{
public:
	int32                                         InCharacterNameID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterNameSubID;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkLoadNameplateData) == 0x000004, "Wrong alignment on RCAdvHUD_TalkLoadNameplateData");
static_assert(sizeof(RCAdvHUD_TalkLoadNameplateData) == 0x00000C, "Wrong size on RCAdvHUD_TalkLoadNameplateData");
static_assert(offsetof(RCAdvHUD_TalkLoadNameplateData, InCharacterNameID) == 0x000000, "Member 'RCAdvHUD_TalkLoadNameplateData::InCharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadNameplateData, InCharacterNameSubID) == 0x000004, "Member 'RCAdvHUD_TalkLoadNameplateData::InCharacterNameSubID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkLoadNameplateData, ReturnValue) == 0x000008, "Member 'RCAdvHUD_TalkLoadNameplateData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkSetAuto
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_TalkSetAuto final
{
public:
	bool                                          bInAutoPlay;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_TalkSetAuto) == 0x000001, "Wrong alignment on RCAdvHUD_TalkSetAuto");
static_assert(sizeof(RCAdvHUD_TalkSetAuto) == 0x000002, "Wrong size on RCAdvHUD_TalkSetAuto");
static_assert(offsetof(RCAdvHUD_TalkSetAuto, bInAutoPlay) == 0x000000, "Member 'RCAdvHUD_TalkSetAuto::bInAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetAuto, ReturnValue) == 0x000001, "Member 'RCAdvHUD_TalkSetAuto::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkSetForceTextSpeedSettings
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_TalkSetForceTextSpeedSettings final
{
public:
	bool                                          bInIsForceTextSpeed;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InForceTextSpeed;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkSetForceTextSpeedSettings) == 0x000004, "Wrong alignment on RCAdvHUD_TalkSetForceTextSpeedSettings");
static_assert(sizeof(RCAdvHUD_TalkSetForceTextSpeedSettings) == 0x00000C, "Wrong size on RCAdvHUD_TalkSetForceTextSpeedSettings");
static_assert(offsetof(RCAdvHUD_TalkSetForceTextSpeedSettings, bInIsForceTextSpeed) == 0x000000, "Member 'RCAdvHUD_TalkSetForceTextSpeedSettings::bInIsForceTextSpeed' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetForceTextSpeedSettings, InForceTextSpeed) == 0x000004, "Member 'RCAdvHUD_TalkSetForceTextSpeedSettings::InForceTextSpeed' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetForceTextSpeedSettings, ReturnValue) == 0x000008, "Member 'RCAdvHUD_TalkSetForceTextSpeedSettings::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkSetGradationFilter
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_TalkSetGradationFilter final
{
public:
	class FName                                   InFilterID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkSetGradationFilter) == 0x000004, "Wrong alignment on RCAdvHUD_TalkSetGradationFilter");
static_assert(sizeof(RCAdvHUD_TalkSetGradationFilter) == 0x00000C, "Wrong size on RCAdvHUD_TalkSetGradationFilter");
static_assert(offsetof(RCAdvHUD_TalkSetGradationFilter, InFilterID) == 0x000000, "Member 'RCAdvHUD_TalkSetGradationFilter::InFilterID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetGradationFilter, ReturnValue) == 0x000008, "Member 'RCAdvHUD_TalkSetGradationFilter::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkSetText2
// 0x002C (0x002C - 0x0000)
struct RCAdvHUD_TalkSetText2 final
{
public:
	int32                                         InCharacterFaceID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacter3DID;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCharacter3DFacialID;                             // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVoiceID;                                         // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEndText;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkSetText2) == 0x000004, "Wrong alignment on RCAdvHUD_TalkSetText2");
static_assert(sizeof(RCAdvHUD_TalkSetText2) == 0x00002C, "Wrong size on RCAdvHUD_TalkSetText2");
static_assert(offsetof(RCAdvHUD_TalkSetText2, InCharacterFaceID) == 0x000000, "Member 'RCAdvHUD_TalkSetText2::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetText2, InCharacterFacialID) == 0x000004, "Member 'RCAdvHUD_TalkSetText2::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetText2, InTextID) == 0x000008, "Member 'RCAdvHUD_TalkSetText2::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetText2, InCharacter3DID) == 0x000010, "Member 'RCAdvHUD_TalkSetText2::InCharacter3DID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetText2, InCharacter3DFacialID) == 0x000014, "Member 'RCAdvHUD_TalkSetText2::InCharacter3DFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetText2, InVoiceID) == 0x00001C, "Member 'RCAdvHUD_TalkSetText2::InVoiceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetText2, InDelayAtEndText) == 0x000024, "Member 'RCAdvHUD_TalkSetText2::InDelayAtEndText' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetText2, ReturnValue) == 0x000028, "Member 'RCAdvHUD_TalkSetText2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkSetTextData
// 0x0034 (0x0034 - 0x0000)
struct RCAdvHUD_TalkSetTextData final
{
public:
	struct FRCAdvHUDTalkTextData                  InTextData;                                        // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkSetTextData) == 0x000004, "Wrong alignment on RCAdvHUD_TalkSetTextData");
static_assert(sizeof(RCAdvHUD_TalkSetTextData) == 0x000034, "Wrong size on RCAdvHUD_TalkSetTextData");
static_assert(offsetof(RCAdvHUD_TalkSetTextData, InTextData) == 0x000000, "Member 'RCAdvHUD_TalkSetTextData::InTextData' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetTextData, ReturnValue) == 0x000030, "Member 'RCAdvHUD_TalkSetTextData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkSetTextSimple
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUD_TalkSetTextSimple final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEndText;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkSetTextSimple) == 0x000004, "Wrong alignment on RCAdvHUD_TalkSetTextSimple");
static_assert(sizeof(RCAdvHUD_TalkSetTextSimple) == 0x000010, "Wrong size on RCAdvHUD_TalkSetTextSimple");
static_assert(offsetof(RCAdvHUD_TalkSetTextSimple, InTextID) == 0x000000, "Member 'RCAdvHUD_TalkSetTextSimple::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetTextSimple, InDelayAtEndText) == 0x000008, "Member 'RCAdvHUD_TalkSetTextSimple::InDelayAtEndText' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkSetTextSimple, ReturnValue) == 0x00000C, "Member 'RCAdvHUD_TalkSetTextSimple::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkStart2
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUD_TalkStart2 final
{
public:
	ERCAdvHUDTalkWindowType                       InWindowType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InTextID;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFaceID;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoPlay;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_TalkStart2) == 0x000004, "Wrong alignment on RCAdvHUD_TalkStart2");
static_assert(sizeof(RCAdvHUD_TalkStart2) == 0x000018, "Wrong size on RCAdvHUD_TalkStart2");
static_assert(offsetof(RCAdvHUD_TalkStart2, InWindowType) == 0x000000, "Member 'RCAdvHUD_TalkStart2::InWindowType' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkStart2, InTextID) == 0x000004, "Member 'RCAdvHUD_TalkStart2::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkStart2, InCharacterFaceID) == 0x00000C, "Member 'RCAdvHUD_TalkStart2::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkStart2, InCharacterFacialID) == 0x000010, "Member 'RCAdvHUD_TalkStart2::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkStart2, bInAutoPlay) == 0x000014, "Member 'RCAdvHUD_TalkStart2::bInAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkStart2, ReturnValue) == 0x000015, "Member 'RCAdvHUD_TalkStart2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkStartSimple
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_TalkStartSimple final
{
public:
	ERCAdvHUDTalkWindowType                       InWindowType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_TalkStartSimple) == 0x000001, "Wrong alignment on RCAdvHUD_TalkStartSimple");
static_assert(sizeof(RCAdvHUD_TalkStartSimple) == 0x000002, "Wrong size on RCAdvHUD_TalkStartSimple");
static_assert(offsetof(RCAdvHUD_TalkStartSimple, InWindowType) == 0x000000, "Member 'RCAdvHUD_TalkStartSimple::InWindowType' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkStartSimple, ReturnValue) == 0x000001, "Member 'RCAdvHUD_TalkStartSimple::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TalkWindowClose
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUD_TalkWindowClose final
{
public:
	ERCAdvHUDTalkWindowType                       InWindowType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_TalkWindowClose) == 0x000001, "Wrong alignment on RCAdvHUD_TalkWindowClose");
static_assert(sizeof(RCAdvHUD_TalkWindowClose) == 0x000002, "Wrong size on RCAdvHUD_TalkWindowClose");
static_assert(offsetof(RCAdvHUD_TalkWindowClose, InWindowType) == 0x000000, "Member 'RCAdvHUD_TalkWindowClose::InWindowType' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_TalkWindowClose, ReturnValue) == 0x000001, "Member 'RCAdvHUD_TalkWindowClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TopMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_TopMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_TopMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_TopMenuFinish");
static_assert(sizeof(RCAdvHUD_TopMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_TopMenuFinish");
static_assert(offsetof(RCAdvHUD_TopMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_TopMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.TopMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_TopMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_TopMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_TopMenuStart");
static_assert(sizeof(RCAdvHUD_TopMenuStart) == 0x000001, "Wrong size on RCAdvHUD_TopMenuStart");
static_assert(offsetof(RCAdvHUD_TopMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_TopMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.Tutorial_CreateWidget
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_Tutorial_CreateWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_Tutorial_CreateWidget) == 0x000001, "Wrong alignment on RCAdvHUD_Tutorial_CreateWidget");
static_assert(sizeof(RCAdvHUD_Tutorial_CreateWidget) == 0x000001, "Wrong size on RCAdvHUD_Tutorial_CreateWidget");
static_assert(offsetof(RCAdvHUD_Tutorial_CreateWidget, ReturnValue) == 0x000000, "Member 'RCAdvHUD_Tutorial_CreateWidget::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.Tutorial_IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_Tutorial_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_Tutorial_IsFinished) == 0x000001, "Wrong alignment on RCAdvHUD_Tutorial_IsFinished");
static_assert(sizeof(RCAdvHUD_Tutorial_IsFinished) == 0x000001, "Wrong size on RCAdvHUD_Tutorial_IsFinished");
static_assert(offsetof(RCAdvHUD_Tutorial_IsFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUD_Tutorial_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.Tutorial_IsShowWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_Tutorial_IsShowWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_Tutorial_IsShowWindow) == 0x000001, "Wrong alignment on RCAdvHUD_Tutorial_IsShowWindow");
static_assert(sizeof(RCAdvHUD_Tutorial_IsShowWindow) == 0x000001, "Wrong size on RCAdvHUD_Tutorial_IsShowWindow");
static_assert(offsetof(RCAdvHUD_Tutorial_IsShowWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUD_Tutorial_IsShowWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.Tutorial_Load
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_Tutorial_Load final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_Tutorial_Load) == 0x000001, "Wrong alignment on RCAdvHUD_Tutorial_Load");
static_assert(sizeof(RCAdvHUD_Tutorial_Load) == 0x000001, "Wrong size on RCAdvHUD_Tutorial_Load");
static_assert(offsetof(RCAdvHUD_Tutorial_Load, ReturnValue) == 0x000000, "Member 'RCAdvHUD_Tutorial_Load::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.Tutorial_StartTutorial
// 0x000C (0x000C - 0x0000)
struct RCAdvHUD_Tutorial_StartTutorial final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAnytimeClosable;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUD_Tutorial_StartTutorial) == 0x000004, "Wrong alignment on RCAdvHUD_Tutorial_StartTutorial");
static_assert(sizeof(RCAdvHUD_Tutorial_StartTutorial) == 0x00000C, "Wrong size on RCAdvHUD_Tutorial_StartTutorial");
static_assert(offsetof(RCAdvHUD_Tutorial_StartTutorial, ID) == 0x000000, "Member 'RCAdvHUD_Tutorial_StartTutorial::ID' has a wrong offset!");
static_assert(offsetof(RCAdvHUD_Tutorial_StartTutorial, isAnytimeClosable) == 0x000008, "Member 'RCAdvHUD_Tutorial_StartTutorial::isAnytimeClosable' has a wrong offset!");

// Function RC.RCAdvHUD.UpdateCollectionFlag
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUD_UpdateCollectionFlag final
{
public:
	class FName                                   CharaID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_UpdateCollectionFlag) == 0x000004, "Wrong alignment on RCAdvHUD_UpdateCollectionFlag");
static_assert(sizeof(RCAdvHUD_UpdateCollectionFlag) == 0x000008, "Wrong size on RCAdvHUD_UpdateCollectionFlag");
static_assert(offsetof(RCAdvHUD_UpdateCollectionFlag, CharaID) == 0x000000, "Member 'RCAdvHUD_UpdateCollectionFlag::CharaID' has a wrong offset!");

// Function RC.RCAdvHUD.WorldMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_WorldMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_WorldMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUD_WorldMenuFinish");
static_assert(sizeof(RCAdvHUD_WorldMenuFinish) == 0x000001, "Wrong size on RCAdvHUD_WorldMenuFinish");
static_assert(offsetof(RCAdvHUD_WorldMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUD_WorldMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUD.WorldMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUD_WorldMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUD_WorldMenuStart) == 0x000001, "Wrong alignment on RCAdvHUD_WorldMenuStart");
static_assert(sizeof(RCAdvHUD_WorldMenuStart) == 0x000001, "Wrong size on RCAdvHUD_WorldMenuStart");
static_assert(offsetof(RCAdvHUD_WorldMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUD_WorldMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CheckCutInAnimFinishedAnim
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_CheckCutInAnimFinishedAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_CheckCutInAnimFinishedAnim) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_CheckCutInAnimFinishedAnim");
static_assert(sizeof(RCAdvHUDAdvComponent_CheckCutInAnimFinishedAnim) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_CheckCutInAnimFinishedAnim");
static_assert(offsetof(RCAdvHUDAdvComponent_CheckCutInAnimFinishedAnim, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_CheckCutInAnimFinishedAnim::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CheckCutInAnimLoadCompleted
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDAdvComponent_CheckCutInAnimLoadCompleted final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDAdvComponent_CheckCutInAnimLoadCompleted) == 0x000004, "Wrong alignment on RCAdvHUDAdvComponent_CheckCutInAnimLoadCompleted");
static_assert(sizeof(RCAdvHUDAdvComponent_CheckCutInAnimLoadCompleted) == 0x00000C, "Wrong size on RCAdvHUDAdvComponent_CheckCutInAnimLoadCompleted");
static_assert(offsetof(RCAdvHUDAdvComponent_CheckCutInAnimLoadCompleted, InCutInID) == 0x000000, "Member 'RCAdvHUDAdvComponent_CheckCutInAnimLoadCompleted::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_CheckCutInAnimLoadCompleted, ReturnValue) == 0x000008, "Member 'RCAdvHUDAdvComponent_CheckCutInAnimLoadCompleted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CheckCutInAnimNextEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_CheckCutInAnimNextEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_CheckCutInAnimNextEnable) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_CheckCutInAnimNextEnable");
static_assert(sizeof(RCAdvHUDAdvComponent_CheckCutInAnimNextEnable) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_CheckCutInAnimNextEnable");
static_assert(offsetof(RCAdvHUDAdvComponent_CheckCutInAnimNextEnable, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_CheckCutInAnimNextEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CheckCutInFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_CheckCutInFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_CheckCutInFinished) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_CheckCutInFinished");
static_assert(sizeof(RCAdvHUDAdvComponent_CheckCutInFinished) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_CheckCutInFinished");
static_assert(offsetof(RCAdvHUDAdvComponent_CheckCutInFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_CheckCutInFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CheckCutInStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_CheckCutInStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_CheckCutInStarted) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_CheckCutInStarted");
static_assert(sizeof(RCAdvHUDAdvComponent_CheckCutInStarted) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_CheckCutInStarted");
static_assert(offsetof(RCAdvHUDAdvComponent_CheckCutInStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_CheckCutInStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CheckDetPointCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_CheckDetPointCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_CheckDetPointCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_CheckDetPointCheckFinished");
static_assert(sizeof(RCAdvHUDAdvComponent_CheckDetPointCheckFinished) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_CheckDetPointCheckFinished");
static_assert(offsetof(RCAdvHUDAdvComponent_CheckDetPointCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_CheckDetPointCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CheckDetPointCheckStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_CheckDetPointCheckStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_CheckDetPointCheckStarted) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_CheckDetPointCheckStarted");
static_assert(sizeof(RCAdvHUDAdvComponent_CheckDetPointCheckStarted) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_CheckDetPointCheckStarted");
static_assert(offsetof(RCAdvHUDAdvComponent_CheckDetPointCheckStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_CheckDetPointCheckStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CutInAnimAllRelease
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_CutInAnimAllRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_CutInAnimAllRelease) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_CutInAnimAllRelease");
static_assert(sizeof(RCAdvHUDAdvComponent_CutInAnimAllRelease) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_CutInAnimAllRelease");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInAnimAllRelease, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_CutInAnimAllRelease::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CutInAnimNext
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_CutInAnimNext final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_CutInAnimNext) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_CutInAnimNext");
static_assert(sizeof(RCAdvHUDAdvComponent_CutInAnimNext) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_CutInAnimNext");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInAnimNext, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_CutInAnimNext::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CutInAnimRelease
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDAdvComponent_CutInAnimRelease final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDAdvComponent_CutInAnimRelease) == 0x000004, "Wrong alignment on RCAdvHUDAdvComponent_CutInAnimRelease");
static_assert(sizeof(RCAdvHUDAdvComponent_CutInAnimRelease) == 0x00000C, "Wrong size on RCAdvHUDAdvComponent_CutInAnimRelease");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInAnimRelease, InCutInID) == 0x000000, "Member 'RCAdvHUDAdvComponent_CutInAnimRelease::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInAnimRelease, ReturnValue) == 0x000008, "Member 'RCAdvHUDAdvComponent_CutInAnimRelease::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CutInAnimStart
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDAdvComponent_CutInAnimStart final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInReleaseWBPAtFinished;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDAdvComponent_CutInAnimStart) == 0x000004, "Wrong alignment on RCAdvHUDAdvComponent_CutInAnimStart");
static_assert(sizeof(RCAdvHUDAdvComponent_CutInAnimStart) == 0x00000C, "Wrong size on RCAdvHUDAdvComponent_CutInAnimStart");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInAnimStart, InCutInID) == 0x000000, "Member 'RCAdvHUDAdvComponent_CutInAnimStart::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInAnimStart, bInReleaseWBPAtFinished) == 0x000008, "Member 'RCAdvHUDAdvComponent_CutInAnimStart::bInReleaseWBPAtFinished' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInAnimStart, ReturnValue) == 0x000009, "Member 'RCAdvHUDAdvComponent_CutInAnimStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CutInAnimStartLoad
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDAdvComponent_CutInAnimStartLoad final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDAdvComponent_CutInAnimStartLoad) == 0x000004, "Wrong alignment on RCAdvHUDAdvComponent_CutInAnimStartLoad");
static_assert(sizeof(RCAdvHUDAdvComponent_CutInAnimStartLoad) == 0x00000C, "Wrong size on RCAdvHUDAdvComponent_CutInAnimStartLoad");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInAnimStartLoad, InCutInID) == 0x000000, "Member 'RCAdvHUDAdvComponent_CutInAnimStartLoad::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInAnimStartLoad, ReturnValue) == 0x000008, "Member 'RCAdvHUDAdvComponent_CutInAnimStartLoad::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CutInFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_CutInFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_CutInFinish) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_CutInFinish");
static_assert(sizeof(RCAdvHUDAdvComponent_CutInFinish) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_CutInFinish");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_CutInFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.CutInStart
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDAdvComponent_CutInStart final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDAdvComponent_CutInStart) == 0x000004, "Wrong alignment on RCAdvHUDAdvComponent_CutInStart");
static_assert(sizeof(RCAdvHUDAdvComponent_CutInStart) == 0x00000C, "Wrong size on RCAdvHUDAdvComponent_CutInStart");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInStart, InCutInID) == 0x000000, "Member 'RCAdvHUDAdvComponent_CutInStart::InCutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_CutInStart, ReturnValue) == 0x000008, "Member 'RCAdvHUDAdvComponent_CutInStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.DetPointFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDAdvComponent_DetPointFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_DetPointFinish) == 0x000001, "Wrong alignment on RCAdvHUDAdvComponent_DetPointFinish");
static_assert(sizeof(RCAdvHUDAdvComponent_DetPointFinish) == 0x000001, "Wrong size on RCAdvHUDAdvComponent_DetPointFinish");
static_assert(offsetof(RCAdvHUDAdvComponent_DetPointFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_DetPointFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.DetPointStart
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDAdvComponent_DetPointStart final
{
public:
	int32                                         InPoint;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsOpenedNzResult;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDAdvComponent_DetPointStart) == 0x000004, "Wrong alignment on RCAdvHUDAdvComponent_DetPointStart");
static_assert(sizeof(RCAdvHUDAdvComponent_DetPointStart) == 0x000008, "Wrong size on RCAdvHUDAdvComponent_DetPointStart");
static_assert(offsetof(RCAdvHUDAdvComponent_DetPointStart, InPoint) == 0x000000, "Member 'RCAdvHUDAdvComponent_DetPointStart::InPoint' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_DetPointStart, InIsOpenedNzResult) == 0x000004, "Member 'RCAdvHUDAdvComponent_DetPointStart::InIsOpenedNzResult' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_DetPointStart, ReturnValue) == 0x000005, "Member 'RCAdvHUDAdvComponent_DetPointStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.GetMarkerData
// 0x0080 (0x0080 - 0x0000)
struct RCAdvHUDAdvComponent_GetMarkerData final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDMarkerData                    OutMarkerData;                                     // 0x0008(0x0070)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDAdvComponent_GetMarkerData) == 0x000008, "Wrong alignment on RCAdvHUDAdvComponent_GetMarkerData");
static_assert(sizeof(RCAdvHUDAdvComponent_GetMarkerData) == 0x000080, "Wrong size on RCAdvHUDAdvComponent_GetMarkerData");
static_assert(offsetof(RCAdvHUDAdvComponent_GetMarkerData, InIndex) == 0x000000, "Member 'RCAdvHUDAdvComponent_GetMarkerData::InIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_GetMarkerData, OutMarkerData) == 0x000008, "Member 'RCAdvHUDAdvComponent_GetMarkerData::OutMarkerData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_GetMarkerData, ReturnValue) == 0x000078, "Member 'RCAdvHUDAdvComponent_GetMarkerData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.GetMarkerDataNum
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDAdvComponent_GetMarkerDataNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDAdvComponent_GetMarkerDataNum) == 0x000004, "Wrong alignment on RCAdvHUDAdvComponent_GetMarkerDataNum");
static_assert(sizeof(RCAdvHUDAdvComponent_GetMarkerDataNum) == 0x000004, "Wrong size on RCAdvHUDAdvComponent_GetMarkerDataNum");
static_assert(offsetof(RCAdvHUDAdvComponent_GetMarkerDataNum, ReturnValue) == 0x000000, "Member 'RCAdvHUDAdvComponent_GetMarkerDataNum::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.IsMarkerVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDAdvComponent_IsMarkerVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDAdvComponent_IsMarkerVisible) == 0x000008, "Wrong alignment on RCAdvHUDAdvComponent_IsMarkerVisible");
static_assert(sizeof(RCAdvHUDAdvComponent_IsMarkerVisible) == 0x000010, "Wrong size on RCAdvHUDAdvComponent_IsMarkerVisible");
static_assert(offsetof(RCAdvHUDAdvComponent_IsMarkerVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUDAdvComponent_IsMarkerVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_IsMarkerVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUDAdvComponent_IsMarkerVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDAdvComponent.SetMarkerData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUDAdvComponent_SetMarkerData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSubquest;                                       // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInGoal;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDAdvComponent_SetMarkerData) == 0x000008, "Wrong alignment on RCAdvHUDAdvComponent_SetMarkerData");
static_assert(sizeof(RCAdvHUDAdvComponent_SetMarkerData) == 0x000020, "Wrong size on RCAdvHUDAdvComponent_SetMarkerData");
static_assert(offsetof(RCAdvHUDAdvComponent_SetMarkerData, InCheckActor) == 0x000000, "Member 'RCAdvHUDAdvComponent_SetMarkerData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_SetMarkerData, InTextID) == 0x000008, "Member 'RCAdvHUDAdvComponent_SetMarkerData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_SetMarkerData, bInDraw) == 0x000010, "Member 'RCAdvHUDAdvComponent_SetMarkerData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_SetMarkerData, bInAccessable) == 0x000011, "Member 'RCAdvHUDAdvComponent_SetMarkerData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_SetMarkerData, bInSubquest) == 0x000012, "Member 'RCAdvHUDAdvComponent_SetMarkerData::bInSubquest' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_SetMarkerData, InScale) == 0x000014, "Member 'RCAdvHUDAdvComponent_SetMarkerData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_SetMarkerData, bInGoal) == 0x000018, "Member 'RCAdvHUDAdvComponent_SetMarkerData::bInGoal' has a wrong offset!");
static_assert(offsetof(RCAdvHUDAdvComponent_SetMarkerData, ReturnValue) == 0x000019, "Member 'RCAdvHUDAdvComponent_SetMarkerData::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTBManagerBase.AddKaikagi
// 0x000C (0x000C - 0x0000)
struct RCNzMTBManagerBase_AddKaikagi final
{
public:
	class FName                                   NewKaikagiID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzMTBManagerBase_AddKaikagi) == 0x000004, "Wrong alignment on RCNzMTBManagerBase_AddKaikagi");
static_assert(sizeof(RCNzMTBManagerBase_AddKaikagi) == 0x00000C, "Wrong size on RCNzMTBManagerBase_AddKaikagi");
static_assert(offsetof(RCNzMTBManagerBase_AddKaikagi, NewKaikagiID) == 0x000000, "Member 'RCNzMTBManagerBase_AddKaikagi::NewKaikagiID' has a wrong offset!");
static_assert(offsetof(RCNzMTBManagerBase_AddKaikagi, ReturnValue) == 0x000008, "Member 'RCNzMTBManagerBase_AddKaikagi::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTBManagerBase.ChangeKaikagiList
// 0x0008 (0x0008 - 0x0000)
struct RCNzMTBManagerBase_ChangeKaikagiList final
{
public:
	class FName                                   NewKaikagiListID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTBManagerBase_ChangeKaikagiList) == 0x000004, "Wrong alignment on RCNzMTBManagerBase_ChangeKaikagiList");
static_assert(sizeof(RCNzMTBManagerBase_ChangeKaikagiList) == 0x000008, "Wrong size on RCNzMTBManagerBase_ChangeKaikagiList");
static_assert(offsetof(RCNzMTBManagerBase_ChangeKaikagiList, NewKaikagiListID) == 0x000000, "Member 'RCNzMTBManagerBase_ChangeKaikagiList::NewKaikagiListID' has a wrong offset!");

// Function RC.RCNzMTBManagerBase.CheckAnswerKaikagiID
// 0x0001 (0x0001 - 0x0000)
struct RCNzMTBManagerBase_CheckAnswerKaikagiID final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTBManagerBase_CheckAnswerKaikagiID) == 0x000001, "Wrong alignment on RCNzMTBManagerBase_CheckAnswerKaikagiID");
static_assert(sizeof(RCNzMTBManagerBase_CheckAnswerKaikagiID) == 0x000001, "Wrong size on RCNzMTBManagerBase_CheckAnswerKaikagiID");
static_assert(offsetof(RCNzMTBManagerBase_CheckAnswerKaikagiID, ReturnValue) == 0x000000, "Member 'RCNzMTBManagerBase_CheckAnswerKaikagiID::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTBManagerBase.DebugSetMaxVolumeMode
// 0x0001 (0x0001 - 0x0000)
struct RCNzMTBManagerBase_DebugSetMaxVolumeMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTBManagerBase_DebugSetMaxVolumeMode) == 0x000001, "Wrong alignment on RCNzMTBManagerBase_DebugSetMaxVolumeMode");
static_assert(sizeof(RCNzMTBManagerBase_DebugSetMaxVolumeMode) == 0x000001, "Wrong size on RCNzMTBManagerBase_DebugSetMaxVolumeMode");
static_assert(offsetof(RCNzMTBManagerBase_DebugSetMaxVolumeMode, Enable) == 0x000000, "Member 'RCNzMTBManagerBase_DebugSetMaxVolumeMode::Enable' has a wrong offset!");

// Function RC.RCNzMTBManagerBase.GetCurrentSelectKaikagiID
// 0x0008 (0x0008 - 0x0000)
struct RCNzMTBManagerBase_GetCurrentSelectKaikagiID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTBManagerBase_GetCurrentSelectKaikagiID) == 0x000004, "Wrong alignment on RCNzMTBManagerBase_GetCurrentSelectKaikagiID");
static_assert(sizeof(RCNzMTBManagerBase_GetCurrentSelectKaikagiID) == 0x000008, "Wrong size on RCNzMTBManagerBase_GetCurrentSelectKaikagiID");
static_assert(offsetof(RCNzMTBManagerBase_GetCurrentSelectKaikagiID, ReturnValue) == 0x000000, "Member 'RCNzMTBManagerBase_GetCurrentSelectKaikagiID::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTBManagerBase.GetHP
// 0x0004 (0x0004 - 0x0000)
struct RCNzMTBManagerBase_GetHP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTBManagerBase_GetHP) == 0x000004, "Wrong alignment on RCNzMTBManagerBase_GetHP");
static_assert(sizeof(RCNzMTBManagerBase_GetHP) == 0x000004, "Wrong size on RCNzMTBManagerBase_GetHP");
static_assert(offsetof(RCNzMTBManagerBase_GetHP, ReturnValue) == 0x000000, "Member 'RCNzMTBManagerBase_GetHP::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTBManagerBase.SetDamage
// 0x0010 (0x0010 - 0x0000)
struct RCNzMTBManagerBase_SetDamage final
{
public:
	int32                                         InDamage;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldHP;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewHP;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzMTBManagerBase_SetDamage) == 0x000004, "Wrong alignment on RCNzMTBManagerBase_SetDamage");
static_assert(sizeof(RCNzMTBManagerBase_SetDamage) == 0x000010, "Wrong size on RCNzMTBManagerBase_SetDamage");
static_assert(offsetof(RCNzMTBManagerBase_SetDamage, InDamage) == 0x000000, "Member 'RCNzMTBManagerBase_SetDamage::InDamage' has a wrong offset!");
static_assert(offsetof(RCNzMTBManagerBase_SetDamage, OldHP) == 0x000004, "Member 'RCNzMTBManagerBase_SetDamage::OldHP' has a wrong offset!");
static_assert(offsetof(RCNzMTBManagerBase_SetDamage, NewHP) == 0x000008, "Member 'RCNzMTBManagerBase_SetDamage::NewHP' has a wrong offset!");
static_assert(offsetof(RCNzMTBManagerBase_SetDamage, ReturnValue) == 0x00000C, "Member 'RCNzMTBManagerBase_SetDamage::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.AddLogAtSkip
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDBFL_AddLogAtSkip final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_AddLogAtSkip) == 0x000004, "Wrong alignment on RCAdvHUDBFL_AddLogAtSkip");
static_assert(sizeof(RCAdvHUDBFL_AddLogAtSkip) == 0x000008, "Wrong size on RCAdvHUDBFL_AddLogAtSkip");
static_assert(offsetof(RCAdvHUDBFL_AddLogAtSkip, TextID) == 0x000000, "Member 'RCAdvHUDBFL_AddLogAtSkip::TextID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.AreaMapMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_AreaMapMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_AreaMapMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_AreaMapMenuFinish");
static_assert(sizeof(RCAdvHUDBFL_AreaMapMenuFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_AreaMapMenuFinish");
static_assert(offsetof(RCAdvHUDBFL_AreaMapMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_AreaMapMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.AreaMapMenuStart
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDBFL_AreaMapMenuStart final
{
public:
	bool                                          bShortcut;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InLocationID;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_AreaMapMenuStart) == 0x000004, "Wrong alignment on RCAdvHUDBFL_AreaMapMenuStart");
static_assert(sizeof(RCAdvHUDBFL_AreaMapMenuStart) == 0x000010, "Wrong size on RCAdvHUDBFL_AreaMapMenuStart");
static_assert(offsetof(RCAdvHUDBFL_AreaMapMenuStart, bShortcut) == 0x000000, "Member 'RCAdvHUDBFL_AreaMapMenuStart::bShortcut' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_AreaMapMenuStart, InLocationID) == 0x000004, "Member 'RCAdvHUDBFL_AreaMapMenuStart::InLocationID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_AreaMapMenuStart, ReturnValue) == 0x00000C, "Member 'RCAdvHUDBFL_AreaMapMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CharacterMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CharacterMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CharacterMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CharacterMenuFinish");
static_assert(sizeof(RCAdvHUDBFL_CharacterMenuFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_CharacterMenuFinish");
static_assert(offsetof(RCAdvHUDBFL_CharacterMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CharacterMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CharacterMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CharacterMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CharacterMenuStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CharacterMenuStart");
static_assert(sizeof(RCAdvHUDBFL_CharacterMenuStart) == 0x000001, "Wrong size on RCAdvHUDBFL_CharacterMenuStart");
static_assert(offsetof(RCAdvHUDBFL_CharacterMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CharacterMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CharaIntegrationIDToFaceID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDBFL_CharaIntegrationIDToFaceID final
{
public:
	int32                                         IntegrationID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CharaIntegrationIDToFaceID) == 0x000004, "Wrong alignment on RCAdvHUDBFL_CharaIntegrationIDToFaceID");
static_assert(sizeof(RCAdvHUDBFL_CharaIntegrationIDToFaceID) == 0x000008, "Wrong size on RCAdvHUDBFL_CharaIntegrationIDToFaceID");
static_assert(offsetof(RCAdvHUDBFL_CharaIntegrationIDToFaceID, IntegrationID) == 0x000000, "Member 'RCAdvHUDBFL_CharaIntegrationIDToFaceID::IntegrationID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_CharaIntegrationIDToFaceID, ReturnValue) == 0x000004, "Member 'RCAdvHUDBFL_CharaIntegrationIDToFaceID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckAreaMapMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckAreaMapMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckAreaMapMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckAreaMapMenuFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckAreaMapMenuFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckAreaMapMenuFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckAreaMapMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckAreaMapMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckAreaMapMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckAreaMapMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckAreaMapMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckAreaMapMenuStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckAreaMapMenuStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckAreaMapMenuStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckAreaMapMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckAreaMapMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCharacterMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCharacterMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCharacterMenuClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCharacterMenuClose");
static_assert(sizeof(RCAdvHUDBFL_CheckCharacterMenuClose) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCharacterMenuClose");
static_assert(offsetof(RCAdvHUDBFL_CheckCharacterMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckCharacterMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCharacterMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCharacterMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCharacterMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCharacterMenuFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckCharacterMenuFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCharacterMenuFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckCharacterMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckCharacterMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCharacterMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCharacterMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCharacterMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCharacterMenuStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckCharacterMenuStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCharacterMenuStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckCharacterMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckCharacterMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCollectionMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCollectionMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCollectionMenuClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCollectionMenuClose");
static_assert(sizeof(RCAdvHUDBFL_CheckCollectionMenuClose) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCollectionMenuClose");
static_assert(offsetof(RCAdvHUDBFL_CheckCollectionMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckCollectionMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCollectionMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCollectionMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCollectionMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCollectionMenuFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckCollectionMenuFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCollectionMenuFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckCollectionMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckCollectionMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCollectionMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCollectionMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCollectionMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCollectionMenuStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckCollectionMenuStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCollectionMenuStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckCollectionMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckCollectionMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCutInAnimFinishedAnim
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCutInAnimFinishedAnim final
{
public:
	bool                                          bNextEnable;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCutInAnimFinishedAnim) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCutInAnimFinishedAnim");
static_assert(sizeof(RCAdvHUDBFL_CheckCutInAnimFinishedAnim) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCutInAnimFinishedAnim");
static_assert(offsetof(RCAdvHUDBFL_CheckCutInAnimFinishedAnim, bNextEnable) == 0x000000, "Member 'RCAdvHUDBFL_CheckCutInAnimFinishedAnim::bNextEnable' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCutInAnimLoadCompleted
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_CheckCutInAnimLoadCompleted final
{
public:
	bool                                          bLoaded;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CutInID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCutInAnimLoadCompleted) == 0x000004, "Wrong alignment on RCAdvHUDBFL_CheckCutInAnimLoadCompleted");
static_assert(sizeof(RCAdvHUDBFL_CheckCutInAnimLoadCompleted) == 0x00000C, "Wrong size on RCAdvHUDBFL_CheckCutInAnimLoadCompleted");
static_assert(offsetof(RCAdvHUDBFL_CheckCutInAnimLoadCompleted, bLoaded) == 0x000000, "Member 'RCAdvHUDBFL_CheckCutInAnimLoadCompleted::bLoaded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_CheckCutInAnimLoadCompleted, CutInID) == 0x000004, "Member 'RCAdvHUDBFL_CheckCutInAnimLoadCompleted::CutInID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCutInAnimNextEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCutInAnimNextEnable final
{
public:
	bool                                          bNextEnable;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCutInAnimNextEnable) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCutInAnimNextEnable");
static_assert(sizeof(RCAdvHUDBFL_CheckCutInAnimNextEnable) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCutInAnimNextEnable");
static_assert(offsetof(RCAdvHUDBFL_CheckCutInAnimNextEnable, bNextEnable) == 0x000000, "Member 'RCAdvHUDBFL_CheckCutInAnimNextEnable::bNextEnable' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCutInCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCutInCheckFinished final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCutInCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCutInCheckFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckCutInCheckFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCutInCheckFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckCutInCheckFinished, bFinished) == 0x000000, "Member 'RCAdvHUDBFL_CheckCutInCheckFinished::bFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckCutInCheckStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckCutInCheckStarted final
{
public:
	bool                                          bStarted;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckCutInCheckStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckCutInCheckStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckCutInCheckStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckCutInCheckStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckCutInCheckStarted, bStarted) == 0x000000, "Member 'RCAdvHUDBFL_CheckCutInCheckStarted::bStarted' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckDetPointCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckDetPointCheckFinished final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckDetPointCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckDetPointCheckFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckDetPointCheckFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckDetPointCheckFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckDetPointCheckFinished, bFinished) == 0x000000, "Member 'RCAdvHUDBFL_CheckDetPointCheckFinished::bFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckDetPointCheckStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckDetPointCheckStarted final
{
public:
	bool                                          bStarted;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckDetPointCheckStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckDetPointCheckStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckDetPointCheckStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckDetPointCheckStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckDetPointCheckStarted, bStarted) == 0x000000, "Member 'RCAdvHUDBFL_CheckDetPointCheckStarted::bStarted' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckFinishedKaiKagiSelect
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckFinishedKaiKagiSelect final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckFinishedKaiKagiSelect) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckFinishedKaiKagiSelect");
static_assert(sizeof(RCAdvHUDBFL_CheckFinishedKaiKagiSelect) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckFinishedKaiKagiSelect");
static_assert(offsetof(RCAdvHUDBFL_CheckFinishedKaiKagiSelect, bFinished) == 0x000000, "Member 'RCAdvHUDBFL_CheckFinishedKaiKagiSelect::bFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckGlossaryMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckGlossaryMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckGlossaryMenuClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckGlossaryMenuClose");
static_assert(sizeof(RCAdvHUDBFL_CheckGlossaryMenuClose) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckGlossaryMenuClose");
static_assert(offsetof(RCAdvHUDBFL_CheckGlossaryMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckGlossaryMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckGlossaryMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckGlossaryMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckGlossaryMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckGlossaryMenuFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckGlossaryMenuFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckGlossaryMenuFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckGlossaryMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckGlossaryMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckGlossaryMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckGlossaryMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckGlossaryMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckGlossaryMenuStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckGlossaryMenuStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckGlossaryMenuStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckGlossaryMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckGlossaryMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckInitialized) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckInitialized");
static_assert(sizeof(RCAdvHUDBFL_CheckInitialized) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckInitialized");
static_assert(offsetof(RCAdvHUDBFL_CheckInitialized, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckKagiMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckKagiMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckKagiMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckKagiMenuFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckKagiMenuFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckKagiMenuFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckKagiMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckKagiMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckKagiMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckKagiMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckKagiMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckKagiMenuStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckKagiMenuStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckKagiMenuStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckKagiMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckKagiMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckMainQuestMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckMainQuestMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckMainQuestMenuClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckMainQuestMenuClose");
static_assert(sizeof(RCAdvHUDBFL_CheckMainQuestMenuClose) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckMainQuestMenuClose");
static_assert(offsetof(RCAdvHUDBFL_CheckMainQuestMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckMainQuestMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckMainQuestMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckMainQuestMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckMainQuestMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckMainQuestMenuFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckMainQuestMenuFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckMainQuestMenuFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckMainQuestMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckMainQuestMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckMainQuestMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckMainQuestMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckMainQuestMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckMainQuestMenuStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckMainQuestMenuStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckMainQuestMenuStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckMainQuestMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckMainQuestMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckMenuGuideFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckMenuGuideFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckMenuGuideFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckMenuGuideFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckMenuGuideFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckMenuGuideFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckMenuGuideFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckMenuGuideFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckMenuGuideStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckMenuGuideStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckMenuGuideStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckMenuGuideStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckMenuGuideStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckMenuGuideStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckMenuGuideStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckMenuGuideStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckNzResultClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckNzResultClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckNzResultClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckNzResultClose");
static_assert(sizeof(RCAdvHUDBFL_CheckNzResultClose) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckNzResultClose");
static_assert(offsetof(RCAdvHUDBFL_CheckNzResultClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckNzResultClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckNzResultFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckNzResultFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckNzResultFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckNzResultFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckNzResultFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckNzResultFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckNzResultFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckNzResultFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckNzResultStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckNzResultStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckNzResultStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckNzResultStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckNzResultStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckNzResultStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckNzResultStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckNzResultStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSequentialSubtitle
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSequentialSubtitle final
{
public:
	bool                                          bRunning;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSequentialSubtitle) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSequentialSubtitle");
static_assert(sizeof(RCAdvHUDBFL_CheckSequentialSubtitle) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSequentialSubtitle");
static_assert(offsetof(RCAdvHUDBFL_CheckSequentialSubtitle, bRunning) == 0x000000, "Member 'RCAdvHUDBFL_CheckSequentialSubtitle::bRunning' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSequentialSubtitleCloseAtAllEnd
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSequentialSubtitleCloseAtAllEnd final
{
public:
	bool                                          bClose;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSequentialSubtitleCloseAtAllEnd) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSequentialSubtitleCloseAtAllEnd");
static_assert(sizeof(RCAdvHUDBFL_CheckSequentialSubtitleCloseAtAllEnd) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSequentialSubtitleCloseAtAllEnd");
static_assert(offsetof(RCAdvHUDBFL_CheckSequentialSubtitleCloseAtAllEnd, bClose) == 0x000000, "Member 'RCAdvHUDBFL_CheckSequentialSubtitleCloseAtAllEnd::bClose' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSequentialSubtitleFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSequentialSubtitleFinished final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSequentialSubtitleFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSequentialSubtitleFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckSequentialSubtitleFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSequentialSubtitleFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckSequentialSubtitleFinished, bFinished) == 0x000000, "Member 'RCAdvHUDBFL_CheckSequentialSubtitleFinished::bFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSequentialSubtitleFinishedLastText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSequentialSubtitleFinishedLastText final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSequentialSubtitleFinishedLastText) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSequentialSubtitleFinishedLastText");
static_assert(sizeof(RCAdvHUDBFL_CheckSequentialSubtitleFinishedLastText) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSequentialSubtitleFinishedLastText");
static_assert(offsetof(RCAdvHUDBFL_CheckSequentialSubtitleFinishedLastText, bFinished) == 0x000000, "Member 'RCAdvHUDBFL_CheckSequentialSubtitleFinishedLastText::bFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSequentialTalk
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSequentialTalk final
{
public:
	bool                                          bRunning;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSequentialTalk) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSequentialTalk");
static_assert(sizeof(RCAdvHUDBFL_CheckSequentialTalk) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSequentialTalk");
static_assert(offsetof(RCAdvHUDBFL_CheckSequentialTalk, bRunning) == 0x000000, "Member 'RCAdvHUDBFL_CheckSequentialTalk::bRunning' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSequentialTalkCloseAtAllEnd
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSequentialTalkCloseAtAllEnd final
{
public:
	bool                                          bClose;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSequentialTalkCloseAtAllEnd) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSequentialTalkCloseAtAllEnd");
static_assert(sizeof(RCAdvHUDBFL_CheckSequentialTalkCloseAtAllEnd) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSequentialTalkCloseAtAllEnd");
static_assert(offsetof(RCAdvHUDBFL_CheckSequentialTalkCloseAtAllEnd, bClose) == 0x000000, "Member 'RCAdvHUDBFL_CheckSequentialTalkCloseAtAllEnd::bClose' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSequentialTalkFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSequentialTalkFinished final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSequentialTalkFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSequentialTalkFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckSequentialTalkFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSequentialTalkFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckSequentialTalkFinished, bFinished) == 0x000000, "Member 'RCAdvHUDBFL_CheckSequentialTalkFinished::bFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSequentialTalkFinishedLastText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSequentialTalkFinishedLastText final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSequentialTalkFinishedLastText) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSequentialTalkFinishedLastText");
static_assert(sizeof(RCAdvHUDBFL_CheckSequentialTalkFinishedLastText) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSequentialTalkFinishedLastText");
static_assert(offsetof(RCAdvHUDBFL_CheckSequentialTalkFinishedLastText, bFinished) == 0x000000, "Member 'RCAdvHUDBFL_CheckSequentialTalkFinishedLastText::bFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSkillGetInterval
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSkillGetInterval final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSkillGetInterval) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSkillGetInterval");
static_assert(sizeof(RCAdvHUDBFL_CheckSkillGetInterval) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSkillGetInterval");
static_assert(offsetof(RCAdvHUDBFL_CheckSkillGetInterval, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSkillGetInterval::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSkillMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSkillMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSkillMenuClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSkillMenuClose");
static_assert(sizeof(RCAdvHUDBFL_CheckSkillMenuClose) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSkillMenuClose");
static_assert(offsetof(RCAdvHUDBFL_CheckSkillMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSkillMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSkillMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSkillMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSkillMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSkillMenuFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckSkillMenuFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSkillMenuFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckSkillMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSkillMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSkillMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSkillMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSkillMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSkillMenuStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckSkillMenuStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSkillMenuStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckSkillMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSkillMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSkillSelectMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSkillSelectMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSkillSelectMenuClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSkillSelectMenuClose");
static_assert(sizeof(RCAdvHUDBFL_CheckSkillSelectMenuClose) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSkillSelectMenuClose");
static_assert(offsetof(RCAdvHUDBFL_CheckSkillSelectMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSkillSelectMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSkillSelectMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSkillSelectMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSkillSelectMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSkillSelectMenuFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckSkillSelectMenuFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSkillSelectMenuFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckSkillSelectMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSkillSelectMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSkillSelectMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSkillSelectMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSkillSelectMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSkillSelectMenuStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckSkillSelectMenuStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSkillSelectMenuStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckSkillSelectMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSkillSelectMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSubQuestMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSubQuestMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSubQuestMenuClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSubQuestMenuClose");
static_assert(sizeof(RCAdvHUDBFL_CheckSubQuestMenuClose) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSubQuestMenuClose");
static_assert(offsetof(RCAdvHUDBFL_CheckSubQuestMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSubQuestMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSubQuestMenuFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSubQuestMenuFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSubQuestMenuFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSubQuestMenuFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckSubQuestMenuFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSubQuestMenuFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckSubQuestMenuFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSubQuestMenuFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSubQuestMenuStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSubQuestMenuStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSubQuestMenuStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSubQuestMenuStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckSubQuestMenuStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSubQuestMenuStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckSubQuestMenuStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckSubQuestMenuStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckSubtitleEndDelay
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckSubtitleEndDelay final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckSubtitleEndDelay) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckSubtitleEndDelay");
static_assert(sizeof(RCAdvHUDBFL_CheckSubtitleEndDelay) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckSubtitleEndDelay");
static_assert(offsetof(RCAdvHUDBFL_CheckSubtitleEndDelay, bFinished) == 0x000000, "Member 'RCAdvHUDBFL_CheckSubtitleEndDelay::bFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckTalkEndText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckTalkEndText final
{
public:
	bool                                          bEnded;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckTalkEndText) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckTalkEndText");
static_assert(sizeof(RCAdvHUDBFL_CheckTalkEndText) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckTalkEndText");
static_assert(offsetof(RCAdvHUDBFL_CheckTalkEndText, bEnded) == 0x000000, "Member 'RCAdvHUDBFL_CheckTalkEndText::bEnded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckTalkFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckTalkFinished final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckTalkFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckTalkFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckTalkFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckTalkFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckTalkFinished, bFinished) == 0x000000, "Member 'RCAdvHUDBFL_CheckTalkFinished::bFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckTalkStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckTalkStarted final
{
public:
	bool                                          bStarted;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckTalkStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckTalkStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckTalkStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckTalkStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckTalkStarted, bStarted) == 0x000000, "Member 'RCAdvHUDBFL_CheckTalkStarted::bStarted' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckTalkWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckTalkWindow final
{
public:
	bool                                          bRunning;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckTalkWindow) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckTalkWindow");
static_assert(sizeof(RCAdvHUDBFL_CheckTalkWindow) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckTalkWindow");
static_assert(offsetof(RCAdvHUDBFL_CheckTalkWindow, bRunning) == 0x000000, "Member 'RCAdvHUDBFL_CheckTalkWindow::bRunning' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckTopMenuCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckTopMenuCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckTopMenuCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckTopMenuCheckFinished");
static_assert(sizeof(RCAdvHUDBFL_CheckTopMenuCheckFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckTopMenuCheckFinished");
static_assert(offsetof(RCAdvHUDBFL_CheckTopMenuCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckTopMenuCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckTopMenuCheckStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckTopMenuCheckStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckTopMenuCheckStarted) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckTopMenuCheckStarted");
static_assert(sizeof(RCAdvHUDBFL_CheckTopMenuCheckStarted) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckTopMenuCheckStarted");
static_assert(offsetof(RCAdvHUDBFL_CheckTopMenuCheckStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckTopMenuCheckStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CheckTopMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CheckTopMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CheckTopMenuClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CheckTopMenuClose");
static_assert(sizeof(RCAdvHUDBFL_CheckTopMenuClose) == 0x000001, "Wrong size on RCAdvHUDBFL_CheckTopMenuClose");
static_assert(offsetof(RCAdvHUDBFL_CheckTopMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CheckTopMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.ClearMenuHelpText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_ClearMenuHelpText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_ClearMenuHelpText) == 0x000001, "Wrong alignment on RCAdvHUDBFL_ClearMenuHelpText");
static_assert(sizeof(RCAdvHUDBFL_ClearMenuHelpText) == 0x000001, "Wrong size on RCAdvHUDBFL_ClearMenuHelpText");
static_assert(offsetof(RCAdvHUDBFL_ClearMenuHelpText, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_ClearMenuHelpText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CollectionMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CollectionMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CollectionMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CollectionMenuFinish");
static_assert(sizeof(RCAdvHUDBFL_CollectionMenuFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_CollectionMenuFinish");
static_assert(offsetof(RCAdvHUDBFL_CollectionMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CollectionMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CollectionMenuFinishForFooterAnimation
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CollectionMenuFinishForFooterAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CollectionMenuFinishForFooterAnimation) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CollectionMenuFinishForFooterAnimation");
static_assert(sizeof(RCAdvHUDBFL_CollectionMenuFinishForFooterAnimation) == 0x000001, "Wrong size on RCAdvHUDBFL_CollectionMenuFinishForFooterAnimation");
static_assert(offsetof(RCAdvHUDBFL_CollectionMenuFinishForFooterAnimation, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CollectionMenuFinishForFooterAnimation::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CollectionMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CollectionMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CollectionMenuStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CollectionMenuStart");
static_assert(sizeof(RCAdvHUDBFL_CollectionMenuStart) == 0x000001, "Wrong size on RCAdvHUDBFL_CollectionMenuStart");
static_assert(offsetof(RCAdvHUDBFL_CollectionMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_CollectionMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CutInAnimAllRelease
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CutInAnimAllRelease final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CutInAnimAllRelease) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CutInAnimAllRelease");
static_assert(sizeof(RCAdvHUDBFL_CutInAnimAllRelease) == 0x000001, "Wrong size on RCAdvHUDBFL_CutInAnimAllRelease");
static_assert(offsetof(RCAdvHUDBFL_CutInAnimAllRelease, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_CutInAnimAllRelease::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CutInAnimNext
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CutInAnimNext final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CutInAnimNext) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CutInAnimNext");
static_assert(sizeof(RCAdvHUDBFL_CutInAnimNext) == 0x000001, "Wrong size on RCAdvHUDBFL_CutInAnimNext");
static_assert(offsetof(RCAdvHUDBFL_CutInAnimNext, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_CutInAnimNext::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CutInAnimRelease
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_CutInAnimRelease final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CutInID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CutInAnimRelease) == 0x000004, "Wrong alignment on RCAdvHUDBFL_CutInAnimRelease");
static_assert(sizeof(RCAdvHUDBFL_CutInAnimRelease) == 0x00000C, "Wrong size on RCAdvHUDBFL_CutInAnimRelease");
static_assert(offsetof(RCAdvHUDBFL_CutInAnimRelease, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_CutInAnimRelease::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_CutInAnimRelease, CutInID) == 0x000004, "Member 'RCAdvHUDBFL_CutInAnimRelease::CutInID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CutInAnimStart
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDBFL_CutInAnimStart final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CutInID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInReleaseWBPAtFinished;                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_CutInAnimStart) == 0x000004, "Wrong alignment on RCAdvHUDBFL_CutInAnimStart");
static_assert(sizeof(RCAdvHUDBFL_CutInAnimStart) == 0x000010, "Wrong size on RCAdvHUDBFL_CutInAnimStart");
static_assert(offsetof(RCAdvHUDBFL_CutInAnimStart, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_CutInAnimStart::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_CutInAnimStart, CutInID) == 0x000004, "Member 'RCAdvHUDBFL_CutInAnimStart::CutInID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_CutInAnimStart, bInReleaseWBPAtFinished) == 0x00000C, "Member 'RCAdvHUDBFL_CutInAnimStart::bInReleaseWBPAtFinished' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CutInAnimStartLoad
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_CutInAnimStartLoad final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CutInID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CutInAnimStartLoad) == 0x000004, "Wrong alignment on RCAdvHUDBFL_CutInAnimStartLoad");
static_assert(sizeof(RCAdvHUDBFL_CutInAnimStartLoad) == 0x00000C, "Wrong size on RCAdvHUDBFL_CutInAnimStartLoad");
static_assert(offsetof(RCAdvHUDBFL_CutInAnimStartLoad, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_CutInAnimStartLoad::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_CutInAnimStartLoad, CutInID) == 0x000004, "Member 'RCAdvHUDBFL_CutInAnimStartLoad::CutInID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CutInFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_CutInFinish final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CutInFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_CutInFinish");
static_assert(sizeof(RCAdvHUDBFL_CutInFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_CutInFinish");
static_assert(offsetof(RCAdvHUDBFL_CutInFinish, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_CutInFinish::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.CutInStart
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_CutInStart final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CutInID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_CutInStart) == 0x000004, "Wrong alignment on RCAdvHUDBFL_CutInStart");
static_assert(sizeof(RCAdvHUDBFL_CutInStart) == 0x00000C, "Wrong size on RCAdvHUDBFL_CutInStart");
static_assert(offsetof(RCAdvHUDBFL_CutInStart, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_CutInStart::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_CutInStart, CutInID) == 0x000004, "Member 'RCAdvHUDBFL_CutInStart::CutInID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.DetPointFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_DetPointFinish final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_DetPointFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_DetPointFinish");
static_assert(sizeof(RCAdvHUDBFL_DetPointFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_DetPointFinish");
static_assert(offsetof(RCAdvHUDBFL_DetPointFinish, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_DetPointFinish::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.DetPointStart
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDBFL_DetPointStart final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Point;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_DetPointStart) == 0x000004, "Wrong alignment on RCAdvHUDBFL_DetPointStart");
static_assert(sizeof(RCAdvHUDBFL_DetPointStart) == 0x000008, "Wrong size on RCAdvHUDBFL_DetPointStart");
static_assert(offsetof(RCAdvHUDBFL_DetPointStart, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_DetPointStart::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_DetPointStart, Point) == 0x000004, "Member 'RCAdvHUDBFL_DetPointStart::Point' has a wrong offset!");

// Function RC.RCAdvHUDBFL.FigureInformationStart
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDBFL_FigureInformationStart final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharaID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dispTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_FigureInformationStart) == 0x000004, "Wrong alignment on RCAdvHUDBFL_FigureInformationStart");
static_assert(sizeof(RCAdvHUDBFL_FigureInformationStart) == 0x000010, "Wrong size on RCAdvHUDBFL_FigureInformationStart");
static_assert(offsetof(RCAdvHUDBFL_FigureInformationStart, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_FigureInformationStart::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_FigureInformationStart, CharaID) == 0x000004, "Member 'RCAdvHUDBFL_FigureInformationStart::CharaID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_FigureInformationStart, dispTime) == 0x00000C, "Member 'RCAdvHUDBFL_FigureInformationStart::dispTime' has a wrong offset!");

// Function RC.RCAdvHUDBFL.ForceFinishKaiKagiSelect
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_ForceFinishKaiKagiSelect final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_ForceFinishKaiKagiSelect) == 0x000001, "Wrong alignment on RCAdvHUDBFL_ForceFinishKaiKagiSelect");
static_assert(sizeof(RCAdvHUDBFL_ForceFinishKaiKagiSelect) == 0x000001, "Wrong size on RCAdvHUDBFL_ForceFinishKaiKagiSelect");
static_assert(offsetof(RCAdvHUDBFL_ForceFinishKaiKagiSelect, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_ForceFinishKaiKagiSelect::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetAdvHUD
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDBFL_GetAdvHUD final
{
public:
	class ARCAdvHUD*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetAdvHUD) == 0x000008, "Wrong alignment on RCAdvHUDBFL_GetAdvHUD");
static_assert(sizeof(RCAdvHUDBFL_GetAdvHUD) == 0x000008, "Wrong size on RCAdvHUDBFL_GetAdvHUD");
static_assert(offsetof(RCAdvHUDBFL_GetAdvHUD, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetAdvHUD::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetAreaMapMenuCancel
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_GetAreaMapMenuCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetAreaMapMenuCancel) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GetAreaMapMenuCancel");
static_assert(sizeof(RCAdvHUDBFL_GetAreaMapMenuCancel) == 0x000001, "Wrong size on RCAdvHUDBFL_GetAreaMapMenuCancel");
static_assert(offsetof(RCAdvHUDBFL_GetAreaMapMenuCancel, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetAreaMapMenuCancel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetAreaMapMenuEnableFastTravel
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_GetAreaMapMenuEnableFastTravel final
{
public:
	class FName                                   InWorldMapID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_GetAreaMapMenuEnableFastTravel) == 0x000004, "Wrong alignment on RCAdvHUDBFL_GetAreaMapMenuEnableFastTravel");
static_assert(sizeof(RCAdvHUDBFL_GetAreaMapMenuEnableFastTravel) == 0x00000C, "Wrong size on RCAdvHUDBFL_GetAreaMapMenuEnableFastTravel");
static_assert(offsetof(RCAdvHUDBFL_GetAreaMapMenuEnableFastTravel, InWorldMapID) == 0x000000, "Member 'RCAdvHUDBFL_GetAreaMapMenuEnableFastTravel::InWorldMapID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_GetAreaMapMenuEnableFastTravel, ReturnValue) == 0x000008, "Member 'RCAdvHUDBFL_GetAreaMapMenuEnableFastTravel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetAreaMapMenuGoFastTravel
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_GetAreaMapMenuGoFastTravel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetAreaMapMenuGoFastTravel) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GetAreaMapMenuGoFastTravel");
static_assert(sizeof(RCAdvHUDBFL_GetAreaMapMenuGoFastTravel) == 0x000001, "Wrong size on RCAdvHUDBFL_GetAreaMapMenuGoFastTravel");
static_assert(offsetof(RCAdvHUDBFL_GetAreaMapMenuGoFastTravel, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetAreaMapMenuGoFastTravel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetAreaMapMenuNewAreaSePlayed
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_GetAreaMapMenuNewAreaSePlayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetAreaMapMenuNewAreaSePlayed) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GetAreaMapMenuNewAreaSePlayed");
static_assert(sizeof(RCAdvHUDBFL_GetAreaMapMenuNewAreaSePlayed) == 0x000001, "Wrong size on RCAdvHUDBFL_GetAreaMapMenuNewAreaSePlayed");
static_assert(offsetof(RCAdvHUDBFL_GetAreaMapMenuNewAreaSePlayed, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetAreaMapMenuNewAreaSePlayed::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetBusMenuCancel
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_GetBusMenuCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetBusMenuCancel) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GetBusMenuCancel");
static_assert(sizeof(RCAdvHUDBFL_GetBusMenuCancel) == 0x000001, "Wrong size on RCAdvHUDBFL_GetBusMenuCancel");
static_assert(offsetof(RCAdvHUDBFL_GetBusMenuCancel, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetBusMenuCancel::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetButtonResultGenericWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_GetButtonResultGenericWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetButtonResultGenericWindow) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GetButtonResultGenericWindow");
static_assert(sizeof(RCAdvHUDBFL_GetButtonResultGenericWindow) == 0x000001, "Wrong size on RCAdvHUDBFL_GetButtonResultGenericWindow");
static_assert(offsetof(RCAdvHUDBFL_GetButtonResultGenericWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetButtonResultGenericWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetButtonResultSkillWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_GetButtonResultSkillWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetButtonResultSkillWindow) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GetButtonResultSkillWindow");
static_assert(sizeof(RCAdvHUDBFL_GetButtonResultSkillWindow) == 0x000001, "Wrong size on RCAdvHUDBFL_GetButtonResultSkillWindow");
static_assert(offsetof(RCAdvHUDBFL_GetButtonResultSkillWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetButtonResultSkillWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetInputMenuButtonGuideKeyType
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDBFL_GetInputMenuButtonGuideKeyType final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetInputMenuButtonGuideKeyType) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GetInputMenuButtonGuideKeyType");
static_assert(sizeof(RCAdvHUDBFL_GetInputMenuButtonGuideKeyType) == 0x000002, "Wrong size on RCAdvHUDBFL_GetInputMenuButtonGuideKeyType");
static_assert(offsetof(RCAdvHUDBFL_GetInputMenuButtonGuideKeyType, InKeyType) == 0x000000, "Member 'RCAdvHUDBFL_GetInputMenuButtonGuideKeyType::InKeyType' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_GetInputMenuButtonGuideKeyType, ReturnValue) == 0x000001, "Member 'RCAdvHUDBFL_GetInputMenuButtonGuideKeyType::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetKaiKagiSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDBFL_GetKaiKagiSelectIndex final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetKaiKagiSelectIndex) == 0x000004, "Wrong alignment on RCAdvHUDBFL_GetKaiKagiSelectIndex");
static_assert(sizeof(RCAdvHUDBFL_GetKaiKagiSelectIndex) == 0x000004, "Wrong size on RCAdvHUDBFL_GetKaiKagiSelectIndex");
static_assert(offsetof(RCAdvHUDBFL_GetKaiKagiSelectIndex, SelectedIndex) == 0x000000, "Member 'RCAdvHUDBFL_GetKaiKagiSelectIndex::SelectedIndex' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetKaiKagiSelectKaiKagiIDArray
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDBFL_GetKaiKagiSelectKaiKagiIDArray final
{
public:
	TArray<class FName>                           KaiKagiIDArray;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetKaiKagiSelectKaiKagiIDArray) == 0x000008, "Wrong alignment on RCAdvHUDBFL_GetKaiKagiSelectKaiKagiIDArray");
static_assert(sizeof(RCAdvHUDBFL_GetKaiKagiSelectKaiKagiIDArray) == 0x000010, "Wrong size on RCAdvHUDBFL_GetKaiKagiSelectKaiKagiIDArray");
static_assert(offsetof(RCAdvHUDBFL_GetKaiKagiSelectKaiKagiIDArray, KaiKagiIDArray) == 0x000000, "Member 'RCAdvHUDBFL_GetKaiKagiSelectKaiKagiIDArray::KaiKagiIDArray' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetSelectedMapID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDBFL_GetSelectedMapID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetSelectedMapID) == 0x000004, "Wrong alignment on RCAdvHUDBFL_GetSelectedMapID");
static_assert(sizeof(RCAdvHUDBFL_GetSelectedMapID) == 0x000008, "Wrong size on RCAdvHUDBFL_GetSelectedMapID");
static_assert(offsetof(RCAdvHUDBFL_GetSelectedMapID, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetSelectedMapID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetSequentialSubtitleVoiceCharacterID
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDBFL_GetSequentialSubtitleVoiceCharacterID final
{
public:
	int32                                         VoiceCharacterID;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetSequentialSubtitleVoiceCharacterID) == 0x000004, "Wrong alignment on RCAdvHUDBFL_GetSequentialSubtitleVoiceCharacterID");
static_assert(sizeof(RCAdvHUDBFL_GetSequentialSubtitleVoiceCharacterID) == 0x000004, "Wrong size on RCAdvHUDBFL_GetSequentialSubtitleVoiceCharacterID");
static_assert(offsetof(RCAdvHUDBFL_GetSequentialSubtitleVoiceCharacterID, VoiceCharacterID) == 0x000000, "Member 'RCAdvHUDBFL_GetSequentialSubtitleVoiceCharacterID::VoiceCharacterID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetSequentialTalkVoiceCharacterID
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDBFL_GetSequentialTalkVoiceCharacterID final
{
public:
	int32                                         VoiceCharacterID;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetSequentialTalkVoiceCharacterID) == 0x000004, "Wrong alignment on RCAdvHUDBFL_GetSequentialTalkVoiceCharacterID");
static_assert(sizeof(RCAdvHUDBFL_GetSequentialTalkVoiceCharacterID) == 0x000004, "Wrong size on RCAdvHUDBFL_GetSequentialTalkVoiceCharacterID");
static_assert(offsetof(RCAdvHUDBFL_GetSequentialTalkVoiceCharacterID, VoiceCharacterID) == 0x000000, "Member 'RCAdvHUDBFL_GetSequentialTalkVoiceCharacterID::VoiceCharacterID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetSkillMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_GetSkillMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetSkillMenuOpen) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GetSkillMenuOpen");
static_assert(sizeof(RCAdvHUDBFL_GetSkillMenuOpen) == 0x000001, "Wrong size on RCAdvHUDBFL_GetSkillMenuOpen");
static_assert(offsetof(RCAdvHUDBFL_GetSkillMenuOpen, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetSkillMenuOpen::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GetSkillSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDBFL_GetSkillSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GetSkillSelectIndex) == 0x000004, "Wrong alignment on RCAdvHUDBFL_GetSkillSelectIndex");
static_assert(sizeof(RCAdvHUDBFL_GetSkillSelectIndex) == 0x000004, "Wrong size on RCAdvHUDBFL_GetSkillSelectIndex");
static_assert(offsetof(RCAdvHUDBFL_GetSkillSelectIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GetSkillSelectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GlossaryMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_GlossaryMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GlossaryMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GlossaryMenuFinish");
static_assert(sizeof(RCAdvHUDBFL_GlossaryMenuFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_GlossaryMenuFinish");
static_assert(offsetof(RCAdvHUDBFL_GlossaryMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GlossaryMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.GlossaryMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_GlossaryMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_GlossaryMenuStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_GlossaryMenuStart");
static_assert(sizeof(RCAdvHUDBFL_GlossaryMenuStart) == 0x000001, "Wrong size on RCAdvHUDBFL_GlossaryMenuStart");
static_assert(offsetof(RCAdvHUDBFL_GlossaryMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_GlossaryMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsCanGlossaryMenuClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsCanGlossaryMenuClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsCanGlossaryMenuClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsCanGlossaryMenuClose");
static_assert(sizeof(RCAdvHUDBFL_IsCanGlossaryMenuClose) == 0x000001, "Wrong size on RCAdvHUDBFL_IsCanGlossaryMenuClose");
static_assert(offsetof(RCAdvHUDBFL_IsCanGlossaryMenuClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsCanGlossaryMenuClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsFigureInformationFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsFigureInformationFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsFigureInformationFinished) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsFigureInformationFinished");
static_assert(sizeof(RCAdvHUDBFL_IsFigureInformationFinished) == 0x000001, "Wrong size on RCAdvHUDBFL_IsFigureInformationFinished");
static_assert(offsetof(RCAdvHUDBFL_IsFigureInformationFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsFigureInformationFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsFinishedGenericWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsFinishedGenericWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsFinishedGenericWindow) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsFinishedGenericWindow");
static_assert(sizeof(RCAdvHUDBFL_IsFinishedGenericWindow) == 0x000001, "Wrong size on RCAdvHUDBFL_IsFinishedGenericWindow");
static_assert(offsetof(RCAdvHUDBFL_IsFinishedGenericWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsFinishedGenericWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsFinishedSaveLoadLayout
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsFinishedSaveLoadLayout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsFinishedSaveLoadLayout) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsFinishedSaveLoadLayout");
static_assert(sizeof(RCAdvHUDBFL_IsFinishedSaveLoadLayout) == 0x000001, "Wrong size on RCAdvHUDBFL_IsFinishedSaveLoadLayout");
static_assert(offsetof(RCAdvHUDBFL_IsFinishedSaveLoadLayout, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsFinishedSaveLoadLayout::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsFinishedSkillWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsFinishedSkillWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsFinishedSkillWindow) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsFinishedSkillWindow");
static_assert(sizeof(RCAdvHUDBFL_IsFinishedSkillWindow) == 0x000001, "Wrong size on RCAdvHUDBFL_IsFinishedSkillWindow");
static_assert(offsetof(RCAdvHUDBFL_IsFinishedSkillWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsFinishedSkillWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsFinishedSuquestEndInformation
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsFinishedSuquestEndInformation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsFinishedSuquestEndInformation) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsFinishedSuquestEndInformation");
static_assert(sizeof(RCAdvHUDBFL_IsFinishedSuquestEndInformation) == 0x000001, "Wrong size on RCAdvHUDBFL_IsFinishedSuquestEndInformation");
static_assert(offsetof(RCAdvHUDBFL_IsFinishedSuquestEndInformation, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsFinishedSuquestEndInformation::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsFinishedSuquestStartInformation
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsFinishedSuquestStartInformation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsFinishedSuquestStartInformation) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsFinishedSuquestStartInformation");
static_assert(sizeof(RCAdvHUDBFL_IsFinishedSuquestStartInformation) == 0x000001, "Wrong size on RCAdvHUDBFL_IsFinishedSuquestStartInformation");
static_assert(offsetof(RCAdvHUDBFL_IsFinishedSuquestStartInformation, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsFinishedSuquestStartInformation::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsKagiLarge
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsKagiLarge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsKagiLarge) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsKagiLarge");
static_assert(sizeof(RCAdvHUDBFL_IsKagiLarge) == 0x000001, "Wrong size on RCAdvHUDBFL_IsKagiLarge");
static_assert(offsetof(RCAdvHUDBFL_IsKagiLarge, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsKagiLarge::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsKagiSelectMenu
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsKagiSelectMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsKagiSelectMenu) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsKagiSelectMenu");
static_assert(sizeof(RCAdvHUDBFL_IsKagiSelectMenu) == 0x000001, "Wrong size on RCAdvHUDBFL_IsKagiSelectMenu");
static_assert(offsetof(RCAdvHUDBFL_IsKagiSelectMenu, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsKagiSelectMenu::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsShowGenericWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsShowGenericWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsShowGenericWindow) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsShowGenericWindow");
static_assert(sizeof(RCAdvHUDBFL_IsShowGenericWindow) == 0x000001, "Wrong size on RCAdvHUDBFL_IsShowGenericWindow");
static_assert(offsetof(RCAdvHUDBFL_IsShowGenericWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsShowGenericWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsShowSkillWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsShowSkillWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsShowSkillWindow) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsShowSkillWindow");
static_assert(sizeof(RCAdvHUDBFL_IsShowSkillWindow) == 0x000001, "Wrong size on RCAdvHUDBFL_IsShowSkillWindow");
static_assert(offsetof(RCAdvHUDBFL_IsShowSkillWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsShowSkillWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.IsShowTutorialWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_IsShowTutorialWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_IsShowTutorialWindow) == 0x000001, "Wrong alignment on RCAdvHUDBFL_IsShowTutorialWindow");
static_assert(sizeof(RCAdvHUDBFL_IsShowTutorialWindow) == 0x000001, "Wrong size on RCAdvHUDBFL_IsShowTutorialWindow");
static_assert(offsetof(RCAdvHUDBFL_IsShowTutorialWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_IsShowTutorialWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.KagiMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_KagiMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_KagiMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_KagiMenuFinish");
static_assert(sizeof(RCAdvHUDBFL_KagiMenuFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_KagiMenuFinish");
static_assert(offsetof(RCAdvHUDBFL_KagiMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_KagiMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.KagiMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_KagiMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_KagiMenuStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_KagiMenuStart");
static_assert(sizeof(RCAdvHUDBFL_KagiMenuStart) == 0x000001, "Wrong size on RCAdvHUDBFL_KagiMenuStart");
static_assert(offsetof(RCAdvHUDBFL_KagiMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_KagiMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.MainQuestMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_MainQuestMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_MainQuestMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_MainQuestMenuFinish");
static_assert(sizeof(RCAdvHUDBFL_MainQuestMenuFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_MainQuestMenuFinish");
static_assert(offsetof(RCAdvHUDBFL_MainQuestMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_MainQuestMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.MainQuestMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_MainQuestMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_MainQuestMenuStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_MainQuestMenuStart");
static_assert(sizeof(RCAdvHUDBFL_MainQuestMenuStart) == 0x000001, "Wrong size on RCAdvHUDBFL_MainQuestMenuStart");
static_assert(offsetof(RCAdvHUDBFL_MainQuestMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_MainQuestMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.MakeDeleteKaiKagiIDArray
// 0x0038 (0x0038 - 0x0000)
struct RCAdvHUDBFL_MakeDeleteKaiKagiIDArray final
{
public:
	TArray<class FName>                           OutDeleteKaiKagiIDArray;                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           KaiKagiIDArray;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CorrectKaiKagiID;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DeleteKaiKagiIDArray;                              // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_MakeDeleteKaiKagiIDArray) == 0x000008, "Wrong alignment on RCAdvHUDBFL_MakeDeleteKaiKagiIDArray");
static_assert(sizeof(RCAdvHUDBFL_MakeDeleteKaiKagiIDArray) == 0x000038, "Wrong size on RCAdvHUDBFL_MakeDeleteKaiKagiIDArray");
static_assert(offsetof(RCAdvHUDBFL_MakeDeleteKaiKagiIDArray, OutDeleteKaiKagiIDArray) == 0x000000, "Member 'RCAdvHUDBFL_MakeDeleteKaiKagiIDArray::OutDeleteKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_MakeDeleteKaiKagiIDArray, KaiKagiIDArray) == 0x000010, "Member 'RCAdvHUDBFL_MakeDeleteKaiKagiIDArray::KaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_MakeDeleteKaiKagiIDArray, CorrectKaiKagiID) == 0x000020, "Member 'RCAdvHUDBFL_MakeDeleteKaiKagiIDArray::CorrectKaiKagiID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_MakeDeleteKaiKagiIDArray, DeleteKaiKagiIDArray) == 0x000028, "Member 'RCAdvHUDBFL_MakeDeleteKaiKagiIDArray::DeleteKaiKagiIDArray' has a wrong offset!");

// Function RC.RCAdvHUDBFL.MakeKaiKagiIDArrayBySkill
// 0x0040 (0x0040 - 0x0000)
struct RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill final
{
public:
	TArray<class FName>                           OutKaiKagiIDArray;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           KaiKagiIDArray;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CorrectKaiKagiID;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DeleteKaiKagiIDArray;                              // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ERCSkillFunctionType                          SkillFunctionType;                                 // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill) == 0x000008, "Wrong alignment on RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill");
static_assert(sizeof(RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill) == 0x000040, "Wrong size on RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill");
static_assert(offsetof(RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill, OutKaiKagiIDArray) == 0x000000, "Member 'RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill::OutKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill, KaiKagiIDArray) == 0x000010, "Member 'RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill::KaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill, CorrectKaiKagiID) == 0x000020, "Member 'RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill::CorrectKaiKagiID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill, DeleteKaiKagiIDArray) == 0x000028, "Member 'RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill::DeleteKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill, SkillFunctionType) == 0x000038, "Member 'RCAdvHUDBFL_MakeKaiKagiIDArrayBySkill::SkillFunctionType' has a wrong offset!");

// Function RC.RCAdvHUDBFL.MenuGuideFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_MenuGuideFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_MenuGuideFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_MenuGuideFinish");
static_assert(sizeof(RCAdvHUDBFL_MenuGuideFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_MenuGuideFinish");
static_assert(offsetof(RCAdvHUDBFL_MenuGuideFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_MenuGuideFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.MenuGuideStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_MenuGuideStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_MenuGuideStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_MenuGuideStart");
static_assert(sizeof(RCAdvHUDBFL_MenuGuideStart) == 0x000001, "Wrong size on RCAdvHUDBFL_MenuGuideStart");
static_assert(offsetof(RCAdvHUDBFL_MenuGuideStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_MenuGuideStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.NzResultFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_NzResultFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_NzResultFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_NzResultFinish");
static_assert(sizeof(RCAdvHUDBFL_NzResultFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_NzResultFinish");
static_assert(offsetof(RCAdvHUDBFL_NzResultFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_NzResultFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.NzResultStart
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDBFL_NzResultStart final
{
public:
	int32                                         InChapterNumber;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_NzResultStart) == 0x000004, "Wrong alignment on RCAdvHUDBFL_NzResultStart");
static_assert(sizeof(RCAdvHUDBFL_NzResultStart) == 0x000008, "Wrong size on RCAdvHUDBFL_NzResultStart");
static_assert(offsetof(RCAdvHUDBFL_NzResultStart, InChapterNumber) == 0x000000, "Member 'RCAdvHUDBFL_NzResultStart::InChapterNumber' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_NzResultStart, ReturnValue) == 0x000004, "Member 'RCAdvHUDBFL_NzResultStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.OpenGenericWindow
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_OpenGenericWindow final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsSelect;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsFocusTrue;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsAcceptCancel;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_OpenGenericWindow) == 0x000004, "Wrong alignment on RCAdvHUDBFL_OpenGenericWindow");
static_assert(sizeof(RCAdvHUDBFL_OpenGenericWindow) == 0x00000C, "Wrong size on RCAdvHUDBFL_OpenGenericWindow");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindow, InTextID) == 0x000000, "Member 'RCAdvHUDBFL_OpenGenericWindow::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindow, bInIsSelect) == 0x000008, "Member 'RCAdvHUDBFL_OpenGenericWindow::bInIsSelect' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindow, bInIsFocusTrue) == 0x000009, "Member 'RCAdvHUDBFL_OpenGenericWindow::bInIsFocusTrue' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindow, bInIsAcceptCancel) == 0x00000A, "Member 'RCAdvHUDBFL_OpenGenericWindow::bInIsAcceptCancel' has a wrong offset!");

// Function RC.RCAdvHUDBFL.OpenGenericWindowMultiStrings
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDBFL_OpenGenericWindowMultiStrings final
{
public:
	TArray<class FString>                         InStringArray;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInIsSelect;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsFocusTrue;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsAcceptCancel;                                 // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_OpenGenericWindowMultiStrings) == 0x000008, "Wrong alignment on RCAdvHUDBFL_OpenGenericWindowMultiStrings");
static_assert(sizeof(RCAdvHUDBFL_OpenGenericWindowMultiStrings) == 0x000018, "Wrong size on RCAdvHUDBFL_OpenGenericWindowMultiStrings");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindowMultiStrings, InStringArray) == 0x000000, "Member 'RCAdvHUDBFL_OpenGenericWindowMultiStrings::InStringArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindowMultiStrings, bInIsSelect) == 0x000010, "Member 'RCAdvHUDBFL_OpenGenericWindowMultiStrings::bInIsSelect' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindowMultiStrings, bInIsFocusTrue) == 0x000011, "Member 'RCAdvHUDBFL_OpenGenericWindowMultiStrings::bInIsFocusTrue' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindowMultiStrings, bInIsAcceptCancel) == 0x000012, "Member 'RCAdvHUDBFL_OpenGenericWindowMultiStrings::bInIsAcceptCancel' has a wrong offset!");

// Function RC.RCAdvHUDBFL.OpenGenericWindowMultiTextIDs
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDBFL_OpenGenericWindowMultiTextIDs final
{
public:
	TArray<class FName>                           InTextIDArray;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInIsSelect;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsFocusTrue;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsAcceptCancel;                                 // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_OpenGenericWindowMultiTextIDs) == 0x000008, "Wrong alignment on RCAdvHUDBFL_OpenGenericWindowMultiTextIDs");
static_assert(sizeof(RCAdvHUDBFL_OpenGenericWindowMultiTextIDs) == 0x000018, "Wrong size on RCAdvHUDBFL_OpenGenericWindowMultiTextIDs");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindowMultiTextIDs, InTextIDArray) == 0x000000, "Member 'RCAdvHUDBFL_OpenGenericWindowMultiTextIDs::InTextIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindowMultiTextIDs, bInIsSelect) == 0x000010, "Member 'RCAdvHUDBFL_OpenGenericWindowMultiTextIDs::bInIsSelect' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindowMultiTextIDs, bInIsFocusTrue) == 0x000011, "Member 'RCAdvHUDBFL_OpenGenericWindowMultiTextIDs::bInIsFocusTrue' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenGenericWindowMultiTextIDs, bInIsAcceptCancel) == 0x000012, "Member 'RCAdvHUDBFL_OpenGenericWindowMultiTextIDs::bInIsAcceptCancel' has a wrong offset!");

// Function RC.RCAdvHUDBFL.OpenSkillWindow
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDBFL_OpenSkillWindow final
{
public:
	class FName                                   InSkillMode;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSkillID;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_OpenSkillWindow) == 0x000004, "Wrong alignment on RCAdvHUDBFL_OpenSkillWindow");
static_assert(sizeof(RCAdvHUDBFL_OpenSkillWindow) == 0x000010, "Wrong size on RCAdvHUDBFL_OpenSkillWindow");
static_assert(offsetof(RCAdvHUDBFL_OpenSkillWindow, InSkillMode) == 0x000000, "Member 'RCAdvHUDBFL_OpenSkillWindow::InSkillMode' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_OpenSkillWindow, InSkillID) == 0x000008, "Member 'RCAdvHUDBFL_OpenSkillWindow::InSkillID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.ResetSkillSelectFocus
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_ResetSkillSelectFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_ResetSkillSelectFocus) == 0x000001, "Wrong alignment on RCAdvHUDBFL_ResetSkillSelectFocus");
static_assert(sizeof(RCAdvHUDBFL_ResetSkillSelectFocus) == 0x000001, "Wrong size on RCAdvHUDBFL_ResetSkillSelectFocus");
static_assert(offsetof(RCAdvHUDBFL_ResetSkillSelectFocus, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_ResetSkillSelectFocus::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SaveLoadLayoutClose
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SaveLoadLayoutClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SaveLoadLayoutClose) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SaveLoadLayoutClose");
static_assert(sizeof(RCAdvHUDBFL_SaveLoadLayoutClose) == 0x000001, "Wrong size on RCAdvHUDBFL_SaveLoadLayoutClose");
static_assert(offsetof(RCAdvHUDBFL_SaveLoadLayoutClose, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_SaveLoadLayoutClose::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SaveLoadSelectStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SaveLoadSelectStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SaveLoadSelectStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SaveLoadSelectStart");
static_assert(sizeof(RCAdvHUDBFL_SaveLoadSelectStart) == 0x000001, "Wrong size on RCAdvHUDBFL_SaveLoadSelectStart");
static_assert(offsetof(RCAdvHUDBFL_SaveLoadSelectStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_SaveLoadSelectStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialSubtitleFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SequentialSubtitleFinish final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SequentialSubtitleFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SequentialSubtitleFinish");
static_assert(sizeof(RCAdvHUDBFL_SequentialSubtitleFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_SequentialSubtitleFinish");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleFinish, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialSubtitleFinish::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialSubtitleStart2
// 0x0048 (0x0048 - 0x0000)
struct RCAdvHUDBFL_SequentialSubtitleStart2 final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SubTitleID;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCSubtitleData                        SubtitleData;                                      // 0x0010(0x0028)(Parm, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         DelayAtEnd;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToNext;                                       // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAtAllEnd;                                    // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableSave;                                      // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialSubtitleStart2) == 0x000008, "Wrong alignment on RCAdvHUDBFL_SequentialSubtitleStart2");
static_assert(sizeof(RCAdvHUDBFL_SequentialSubtitleStart2) == 0x000048, "Wrong size on RCAdvHUDBFL_SequentialSubtitleStart2");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStart2, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialSubtitleStart2::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStart2, SubTitleID) == 0x000004, "Member 'RCAdvHUDBFL_SequentialSubtitleStart2::SubTitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStart2, SubtitleData) == 0x000010, "Member 'RCAdvHUDBFL_SequentialSubtitleStart2::SubtitleData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStart2, DelayAtEnd) == 0x000038, "Member 'RCAdvHUDBFL_SequentialSubtitleStart2::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStart2, DelayToNext) == 0x00003C, "Member 'RCAdvHUDBFL_SequentialSubtitleStart2::DelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStart2, bCloseAtAllEnd) == 0x000040, "Member 'RCAdvHUDBFL_SequentialSubtitleStart2::bCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStart2, bDisableSave) == 0x000041, "Member 'RCAdvHUDBFL_SequentialSubtitleStart2::bDisableSave' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialSubtitleStartFromData2
// 0x0040 (0x0040 - 0x0000)
struct RCAdvHUDBFL_SequentialSubtitleStartFromData2 final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCSubtitleData                        SubtitleData;                                      // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	float                                         DelayAtEnd;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToNext;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAtAllEnd;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableSave;                                      // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialSubtitleStartFromData2) == 0x000008, "Wrong alignment on RCAdvHUDBFL_SequentialSubtitleStartFromData2");
static_assert(sizeof(RCAdvHUDBFL_SequentialSubtitleStartFromData2) == 0x000040, "Wrong size on RCAdvHUDBFL_SequentialSubtitleStartFromData2");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromData2, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromData2::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromData2, SubtitleData) == 0x000008, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromData2::SubtitleData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromData2, DelayAtEnd) == 0x000030, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromData2::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromData2, DelayToNext) == 0x000034, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromData2::DelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromData2, bCloseAtAllEnd) == 0x000038, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromData2::bCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromData2, bDisableSave) == 0x000039, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromData2::bDisableSave' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialSubtitleStartFromDataTable
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUDBFL_SequentialSubtitleStartFromDataTable final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             Table;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubTitleID;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEnd;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToNext;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAtAllEnd;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableSave;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable) == 0x000008, "Wrong alignment on RCAdvHUDBFL_SequentialSubtitleStartFromDataTable");
static_assert(sizeof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable) == 0x000028, "Wrong size on RCAdvHUDBFL_SequentialSubtitleStartFromDataTable");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable, Table) == 0x000008, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable::Table' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable, SubTitleID) == 0x000010, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable::SubTitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable, DelayAtEnd) == 0x000018, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable, DelayToNext) == 0x00001C, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable::DelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable, bCloseAtAllEnd) == 0x000020, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable::bCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable, bDisableSave) == 0x000021, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable::bDisableSave' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialSubtitleStartFromDataTable_WaitPush
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             Table;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubTitleID;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEnd;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToNext;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAtAllEnd;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableSave;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush) == 0x000008, "Wrong alignment on RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush");
static_assert(sizeof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush) == 0x000028, "Wrong size on RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush, Table) == 0x000008, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush::Table' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush, SubTitleID) == 0x000010, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush::SubTitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush, DelayAtEnd) == 0x000018, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush, DelayToNext) == 0x00001C, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush::DelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush, bCloseAtAllEnd) == 0x000020, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush::bCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush, bDisableSave) == 0x000021, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromDataTable_WaitPush::bDisableSave' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialSubtitleStartFromSubtitleID
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SubTitleID;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEnd;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToNext;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAtAllEnd;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableSave;                                      // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID");
static_assert(sizeof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID) == 0x000018, "Wrong size on RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID, SubTitleID) == 0x000004, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID::SubTitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID, DelayAtEnd) == 0x00000C, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID, DelayToNext) == 0x000010, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID::DelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID, bCloseAtAllEnd) == 0x000014, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID::bCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID, bDisableSave) == 0x000015, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleID::bDisableSave' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialSubtitleStartFromSubtitleIDForMovie
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InSubtitleID;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEnd;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayToNext;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCloseAtAllEnd;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisableSave;                                    // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie");
static_assert(sizeof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie) == 0x000018, "Wrong size on RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie, InSubtitleID) == 0x000004, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie::InSubtitleID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie, InDelayAtEnd) == 0x00000C, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie::InDelayAtEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie, InDelayToNext) == 0x000010, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie::InDelayToNext' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie, bInCloseAtAllEnd) == 0x000014, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie::bInCloseAtAllEnd' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie, bInDisableSave) == 0x000015, "Member 'RCAdvHUDBFL_SequentialSubtitleStartFromSubtitleIDForMovie::bInDisableSave' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialTalkFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SequentialTalkFinish final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SequentialTalkFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SequentialTalkFinish");
static_assert(sizeof(RCAdvHUDBFL_SequentialTalkFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_SequentialTalkFinish");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkFinish, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialTalkFinish::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialTalkForceFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SequentialTalkForceFinish final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SequentialTalkForceFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SequentialTalkForceFinish");
static_assert(sizeof(RCAdvHUDBFL_SequentialTalkForceFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_SequentialTalkForceFinish");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkForceFinish, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialTalkForceFinish::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialTalkStart2
// 0x0030 (0x0030 - 0x0000)
struct RCAdvHUDBFL_SequentialTalkStart2 final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCTalkData                            TalkData;                                          // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bForceAutoPlay;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialTalkStart2) == 0x000008, "Wrong alignment on RCAdvHUDBFL_SequentialTalkStart2");
static_assert(sizeof(RCAdvHUDBFL_SequentialTalkStart2) == 0x000030, "Wrong size on RCAdvHUDBFL_SequentialTalkStart2");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStart2, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialTalkStart2::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStart2, TalkID) == 0x000004, "Member 'RCAdvHUDBFL_SequentialTalkStart2::TalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStart2, TalkData) == 0x000010, "Member 'RCAdvHUDBFL_SequentialTalkStart2::TalkData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStart2, bForceAutoPlay) == 0x000028, "Member 'RCAdvHUDBFL_SequentialTalkStart2::bForceAutoPlay' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialTalkStartFromData2
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUDBFL_SequentialTalkStartFromData2 final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCTalkData                            TalkData;                                          // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bForceAutoPlay;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialTalkStartFromData2) == 0x000008, "Wrong alignment on RCAdvHUDBFL_SequentialTalkStartFromData2");
static_assert(sizeof(RCAdvHUDBFL_SequentialTalkStartFromData2) == 0x000028, "Wrong size on RCAdvHUDBFL_SequentialTalkStartFromData2");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromData2, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialTalkStartFromData2::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromData2, TalkData) == 0x000008, "Member 'RCAdvHUDBFL_SequentialTalkStartFromData2::TalkData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromData2, bForceAutoPlay) == 0x000020, "Member 'RCAdvHUDBFL_SequentialTalkStartFromData2::bForceAutoPlay' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialTalkStartFromDataTable
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUDBFL_SequentialTalkStartFromDataTable final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             Table;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAutoPlay;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialTalkStartFromDataTable) == 0x000008, "Wrong alignment on RCAdvHUDBFL_SequentialTalkStartFromDataTable");
static_assert(sizeof(RCAdvHUDBFL_SequentialTalkStartFromDataTable) == 0x000020, "Wrong size on RCAdvHUDBFL_SequentialTalkStartFromDataTable");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromDataTable, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialTalkStartFromDataTable::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromDataTable, Table) == 0x000008, "Member 'RCAdvHUDBFL_SequentialTalkStartFromDataTable::Table' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromDataTable, TalkID) == 0x000010, "Member 'RCAdvHUDBFL_SequentialTalkStartFromDataTable::TalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromDataTable, bForceAutoPlay) == 0x000018, "Member 'RCAdvHUDBFL_SequentialTalkStartFromDataTable::bForceAutoPlay' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SequentialTalkStartFromTalkID
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDBFL_SequentialTalkStartFromTalkID final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAutoPlay;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SequentialTalkStartFromTalkID) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SequentialTalkStartFromTalkID");
static_assert(sizeof(RCAdvHUDBFL_SequentialTalkStartFromTalkID) == 0x000010, "Wrong size on RCAdvHUDBFL_SequentialTalkStartFromTalkID");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromTalkID, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SequentialTalkStartFromTalkID::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromTalkID, TalkID) == 0x000004, "Member 'RCAdvHUDBFL_SequentialTalkStartFromTalkID::TalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SequentialTalkStartFromTalkID, bForceAutoPlay) == 0x00000C, "Member 'RCAdvHUDBFL_SequentialTalkStartFromTalkID::bForceAutoPlay' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SetAreaMapMenuNewAreaSePlayed
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SetAreaMapMenuNewAreaSePlayed final
{
public:
	bool                                          bInPlayedNewAreaSE;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SetAreaMapMenuNewAreaSePlayed) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SetAreaMapMenuNewAreaSePlayed");
static_assert(sizeof(RCAdvHUDBFL_SetAreaMapMenuNewAreaSePlayed) == 0x000001, "Wrong size on RCAdvHUDBFL_SetAreaMapMenuNewAreaSePlayed");
static_assert(offsetof(RCAdvHUDBFL_SetAreaMapMenuNewAreaSePlayed, bInPlayedNewAreaSE) == 0x000000, "Member 'RCAdvHUDBFL_SetAreaMapMenuNewAreaSePlayed::bInPlayedNewAreaSE' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SetBacklogEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SetBacklogEnable final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SetBacklogEnable) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SetBacklogEnable");
static_assert(sizeof(RCAdvHUDBFL_SetBacklogEnable) == 0x000001, "Wrong size on RCAdvHUDBFL_SetBacklogEnable");
static_assert(offsetof(RCAdvHUDBFL_SetBacklogEnable, bInFlag) == 0x000000, "Member 'RCAdvHUDBFL_SetBacklogEnable::bInFlag' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SetMenuButtonGuide
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_SetMenuButtonGuide final
{
public:
	class FName                                   InModeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPlayOpenAnim;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SetMenuButtonGuide) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SetMenuButtonGuide");
static_assert(sizeof(RCAdvHUDBFL_SetMenuButtonGuide) == 0x00000C, "Wrong size on RCAdvHUDBFL_SetMenuButtonGuide");
static_assert(offsetof(RCAdvHUDBFL_SetMenuButtonGuide, InModeID) == 0x000000, "Member 'RCAdvHUDBFL_SetMenuButtonGuide::InModeID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SetMenuButtonGuide, bInPlayOpenAnim) == 0x000008, "Member 'RCAdvHUDBFL_SetMenuButtonGuide::bInPlayOpenAnim' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SetMenuButtonGuide, ReturnValue) == 0x000009, "Member 'RCAdvHUDBFL_SetMenuButtonGuide::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SetMenuButtonGuideResetKeyType
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SetMenuButtonGuideResetKeyType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SetMenuButtonGuideResetKeyType) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SetMenuButtonGuideResetKeyType");
static_assert(sizeof(RCAdvHUDBFL_SetMenuButtonGuideResetKeyType) == 0x000001, "Wrong size on RCAdvHUDBFL_SetMenuButtonGuideResetKeyType");
static_assert(offsetof(RCAdvHUDBFL_SetMenuButtonGuideResetKeyType, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_SetMenuButtonGuideResetKeyType::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SetMenuEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SetMenuEnable final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SetMenuEnable) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SetMenuEnable");
static_assert(sizeof(RCAdvHUDBFL_SetMenuEnable) == 0x000001, "Wrong size on RCAdvHUDBFL_SetMenuEnable");
static_assert(offsetof(RCAdvHUDBFL_SetMenuEnable, bInFlag) == 0x000000, "Member 'RCAdvHUDBFL_SetMenuEnable::bInFlag' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SetMenuHelpText
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_SetMenuHelpText final
{
public:
	class FName                                   InHelpTextID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_SetMenuHelpText) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SetMenuHelpText");
static_assert(sizeof(RCAdvHUDBFL_SetMenuHelpText) == 0x00000C, "Wrong size on RCAdvHUDBFL_SetMenuHelpText");
static_assert(offsetof(RCAdvHUDBFL_SetMenuHelpText, InHelpTextID) == 0x000000, "Member 'RCAdvHUDBFL_SetMenuHelpText::InHelpTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SetMenuHelpText, ReturnValue) == 0x000008, "Member 'RCAdvHUDBFL_SetMenuHelpText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SetPauseEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SetPauseEnable final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SetPauseEnable) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SetPauseEnable");
static_assert(sizeof(RCAdvHUDBFL_SetPauseEnable) == 0x000001, "Wrong size on RCAdvHUDBFL_SetPauseEnable");
static_assert(offsetof(RCAdvHUDBFL_SetPauseEnable, bInFlag) == 0x000000, "Member 'RCAdvHUDBFL_SetPauseEnable::bInFlag' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SkillMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SkillMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SkillMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SkillMenuFinish");
static_assert(sizeof(RCAdvHUDBFL_SkillMenuFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_SkillMenuFinish");
static_assert(offsetof(RCAdvHUDBFL_SkillMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_SkillMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SkillMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SkillMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SkillMenuStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SkillMenuStart");
static_assert(sizeof(RCAdvHUDBFL_SkillMenuStart) == 0x000001, "Wrong size on RCAdvHUDBFL_SkillMenuStart");
static_assert(offsetof(RCAdvHUDBFL_SkillMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_SkillMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SkillSelectMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SkillSelectMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SkillSelectMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SkillSelectMenuFinish");
static_assert(sizeof(RCAdvHUDBFL_SkillSelectMenuFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_SkillSelectMenuFinish");
static_assert(offsetof(RCAdvHUDBFL_SkillSelectMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_SkillSelectMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SkillSelectMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SkillSelectMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SkillSelectMenuStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SkillSelectMenuStart");
static_assert(sizeof(RCAdvHUDBFL_SkillSelectMenuStart) == 0x000001, "Wrong size on RCAdvHUDBFL_SkillSelectMenuStart");
static_assert(offsetof(RCAdvHUDBFL_SkillSelectMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_SkillSelectMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.StartKaiKagiSelect
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUDBFL_StartKaiKagiSelect final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           KaiKagiIDArray;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CorrectKaiKagiID;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotPause;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_StartKaiKagiSelect) == 0x000008, "Wrong alignment on RCAdvHUDBFL_StartKaiKagiSelect");
static_assert(sizeof(RCAdvHUDBFL_StartKaiKagiSelect) == 0x000028, "Wrong size on RCAdvHUDBFL_StartKaiKagiSelect");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_StartKaiKagiSelect::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect, KaiKagiIDArray) == 0x000008, "Member 'RCAdvHUDBFL_StartKaiKagiSelect::KaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect, CorrectKaiKagiID) == 0x000018, "Member 'RCAdvHUDBFL_StartKaiKagiSelect::CorrectKaiKagiID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect, bNotPause) == 0x000020, "Member 'RCAdvHUDBFL_StartKaiKagiSelect::bNotPause' has a wrong offset!");

// Function RC.RCAdvHUDBFL.StartKaiKagiSelect2
// 0x0040 (0x0040 - 0x0000)
struct RCAdvHUDBFL_StartKaiKagiSelect2 final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   QuestionTextID;                                    // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           KaiKagiIDArray;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CorrectKaiKagiID;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DeleteKaiKagiIDArray;                              // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNotPause;                                         // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelDisable;                                    // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_StartKaiKagiSelect2) == 0x000008, "Wrong alignment on RCAdvHUDBFL_StartKaiKagiSelect2");
static_assert(sizeof(RCAdvHUDBFL_StartKaiKagiSelect2) == 0x000040, "Wrong size on RCAdvHUDBFL_StartKaiKagiSelect2");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect2, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_StartKaiKagiSelect2::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect2, QuestionTextID) == 0x000004, "Member 'RCAdvHUDBFL_StartKaiKagiSelect2::QuestionTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect2, KaiKagiIDArray) == 0x000010, "Member 'RCAdvHUDBFL_StartKaiKagiSelect2::KaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect2, CorrectKaiKagiID) == 0x000020, "Member 'RCAdvHUDBFL_StartKaiKagiSelect2::CorrectKaiKagiID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect2, DeleteKaiKagiIDArray) == 0x000028, "Member 'RCAdvHUDBFL_StartKaiKagiSelect2::DeleteKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect2, bNotPause) == 0x000038, "Member 'RCAdvHUDBFL_StartKaiKagiSelect2::bNotPause' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_StartKaiKagiSelect2, bCancelDisable) == 0x000039, "Member 'RCAdvHUDBFL_StartKaiKagiSelect2::bCancelDisable' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SubQuestMenuFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SubQuestMenuFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SubQuestMenuFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SubQuestMenuFinish");
static_assert(sizeof(RCAdvHUDBFL_SubQuestMenuFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_SubQuestMenuFinish");
static_assert(offsetof(RCAdvHUDBFL_SubQuestMenuFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_SubQuestMenuFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SubQuestMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SubQuestMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SubQuestMenuStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SubQuestMenuStart");
static_assert(sizeof(RCAdvHUDBFL_SubQuestMenuStart) == 0x000001, "Wrong size on RCAdvHUDBFL_SubQuestMenuStart");
static_assert(offsetof(RCAdvHUDBFL_SubQuestMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_SubQuestMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SubtitleFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SubtitleFinish final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SubtitleFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SubtitleFinish");
static_assert(sizeof(RCAdvHUDBFL_SubtitleFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_SubtitleFinish");
static_assert(offsetof(RCAdvHUDBFL_SubtitleFinish, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SubtitleFinish::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SubtitleStart
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDBFL_SubtitleStart final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NameID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEndVoice;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SubtitleStart) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SubtitleStart");
static_assert(sizeof(RCAdvHUDBFL_SubtitleStart) == 0x000018, "Wrong size on RCAdvHUDBFL_SubtitleStart");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStart, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SubtitleStart::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStart, NameID) == 0x000004, "Member 'RCAdvHUDBFL_SubtitleStart::NameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStart, TextID) == 0x00000C, "Member 'RCAdvHUDBFL_SubtitleStart::TextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStart, DelayAtEndVoice) == 0x000014, "Member 'RCAdvHUDBFL_SubtitleStart::DelayAtEndVoice' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SubtitleStart_OnlyCursor
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_SubtitleStart_OnlyCursor final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SubtitleStart_OnlyCursor) == 0x000001, "Wrong alignment on RCAdvHUDBFL_SubtitleStart_OnlyCursor");
static_assert(sizeof(RCAdvHUDBFL_SubtitleStart_OnlyCursor) == 0x000001, "Wrong size on RCAdvHUDBFL_SubtitleStart_OnlyCursor");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStart_OnlyCursor, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SubtitleStart_OnlyCursor::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SubtitleStart_WaitPush
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDBFL_SubtitleStart_WaitPush final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NameID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEndVoice;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SubtitleStart_WaitPush) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SubtitleStart_WaitPush");
static_assert(sizeof(RCAdvHUDBFL_SubtitleStart_WaitPush) == 0x000018, "Wrong size on RCAdvHUDBFL_SubtitleStart_WaitPush");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStart_WaitPush, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SubtitleStart_WaitPush::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStart_WaitPush, NameID) == 0x000004, "Member 'RCAdvHUDBFL_SubtitleStart_WaitPush::NameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStart_WaitPush, TextID) == 0x00000C, "Member 'RCAdvHUDBFL_SubtitleStart_WaitPush::TextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStart_WaitPush, DelayAtEndVoice) == 0x000014, "Member 'RCAdvHUDBFL_SubtitleStart_WaitPush::DelayAtEndVoice' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SubtitleStartFromCharacterID
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDBFL_SubtitleStartFromCharacterID final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterNameID;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameSubID;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEndVoice;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SubtitleStartFromCharacterID) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SubtitleStartFromCharacterID");
static_assert(sizeof(RCAdvHUDBFL_SubtitleStartFromCharacterID) == 0x000018, "Wrong size on RCAdvHUDBFL_SubtitleStartFromCharacterID");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID, CharacterNameID) == 0x000004, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID::CharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID, CharacterNameSubID) == 0x000008, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID::CharacterNameSubID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID, TextID) == 0x00000C, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID::TextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID, DelayAtEndVoice) == 0x000014, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID::DelayAtEndVoice' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SubtitleStartFromCharacterID_WaitPush
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterNameID;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameSubID;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEndVoice;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush");
static_assert(sizeof(RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush) == 0x000018, "Wrong size on RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush, CharacterNameID) == 0x000004, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush::CharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush, CharacterNameSubID) == 0x000008, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush::CharacterNameSubID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush, TextID) == 0x00000C, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush::TextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush, DelayAtEndVoice) == 0x000014, "Member 'RCAdvHUDBFL_SubtitleStartFromCharacterID_WaitPush::DelayAtEndVoice' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SuquestEndInformationStart
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDBFL_SuquestEndInformationStart final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   QuestID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dispTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SuquestEndInformationStart) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SuquestEndInformationStart");
static_assert(sizeof(RCAdvHUDBFL_SuquestEndInformationStart) == 0x000010, "Wrong size on RCAdvHUDBFL_SuquestEndInformationStart");
static_assert(offsetof(RCAdvHUDBFL_SuquestEndInformationStart, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SuquestEndInformationStart::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SuquestEndInformationStart, QuestID) == 0x000004, "Member 'RCAdvHUDBFL_SuquestEndInformationStart::QuestID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SuquestEndInformationStart, dispTime) == 0x00000C, "Member 'RCAdvHUDBFL_SuquestEndInformationStart::dispTime' has a wrong offset!");

// Function RC.RCAdvHUDBFL.SuquestStartInformationStart
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDBFL_SuquestStartInformationStart final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   QuestID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dispTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_SuquestStartInformationStart) == 0x000004, "Wrong alignment on RCAdvHUDBFL_SuquestStartInformationStart");
static_assert(sizeof(RCAdvHUDBFL_SuquestStartInformationStart) == 0x000010, "Wrong size on RCAdvHUDBFL_SuquestStartInformationStart");
static_assert(offsetof(RCAdvHUDBFL_SuquestStartInformationStart, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_SuquestStartInformationStart::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SuquestStartInformationStart, QuestID) == 0x000004, "Member 'RCAdvHUDBFL_SuquestStartInformationStart::QuestID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_SuquestStartInformationStart, dispTime) == 0x00000C, "Member 'RCAdvHUDBFL_SuquestStartInformationStart::dispTime' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_TalkFinish final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TalkFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_TalkFinish");
static_assert(sizeof(RCAdvHUDBFL_TalkFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_TalkFinish");
static_assert(offsetof(RCAdvHUDBFL_TalkFinish, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkFinish::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkForceFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_TalkForceFinish final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TalkForceFinish) == 0x000001, "Wrong alignment on RCAdvHUDBFL_TalkForceFinish");
static_assert(sizeof(RCAdvHUDBFL_TalkForceFinish) == 0x000001, "Wrong size on RCAdvHUDBFL_TalkForceFinish");
static_assert(offsetof(RCAdvHUDBFL_TalkForceFinish, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkForceFinish::bSucceeded' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkSetAuto
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDBFL_TalkSetAuto final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TalkSetAuto) == 0x000001, "Wrong alignment on RCAdvHUDBFL_TalkSetAuto");
static_assert(sizeof(RCAdvHUDBFL_TalkSetAuto) == 0x000002, "Wrong size on RCAdvHUDBFL_TalkSetAuto");
static_assert(offsetof(RCAdvHUDBFL_TalkSetAuto, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkSetAuto::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetAuto, bAutoPlay) == 0x000001, "Member 'RCAdvHUDBFL_TalkSetAuto::bAutoPlay' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkSetForceTextSpeedSettings
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDBFL_TalkSetForceTextSpeedSettings final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsForceTextSpeed;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ForceTextSpeed;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TalkSetForceTextSpeedSettings) == 0x000004, "Wrong alignment on RCAdvHUDBFL_TalkSetForceTextSpeedSettings");
static_assert(sizeof(RCAdvHUDBFL_TalkSetForceTextSpeedSettings) == 0x000008, "Wrong size on RCAdvHUDBFL_TalkSetForceTextSpeedSettings");
static_assert(offsetof(RCAdvHUDBFL_TalkSetForceTextSpeedSettings, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkSetForceTextSpeedSettings::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetForceTextSpeedSettings, bIsForceTextSpeed) == 0x000001, "Member 'RCAdvHUDBFL_TalkSetForceTextSpeedSettings::bIsForceTextSpeed' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetForceTextSpeedSettings, ForceTextSpeed) == 0x000004, "Member 'RCAdvHUDBFL_TalkSetForceTextSpeedSettings::ForceTextSpeed' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkSetGradationFilter
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_TalkSetGradationFilter final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FilterID;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TalkSetGradationFilter) == 0x000004, "Wrong alignment on RCAdvHUDBFL_TalkSetGradationFilter");
static_assert(sizeof(RCAdvHUDBFL_TalkSetGradationFilter) == 0x00000C, "Wrong size on RCAdvHUDBFL_TalkSetGradationFilter");
static_assert(offsetof(RCAdvHUDBFL_TalkSetGradationFilter, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkSetGradationFilter::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetGradationFilter, FilterID) == 0x000004, "Member 'RCAdvHUDBFL_TalkSetGradationFilter::FilterID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkSetText2
// 0x002C (0x002C - 0x0000)
struct RCAdvHUDBFL_TalkSetText2 final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterFaceID;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFacialID;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character3DID;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterFacial3DID;                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TalkSetText2) == 0x000004, "Wrong alignment on RCAdvHUDBFL_TalkSetText2");
static_assert(sizeof(RCAdvHUDBFL_TalkSetText2) == 0x00002C, "Wrong size on RCAdvHUDBFL_TalkSetText2");
static_assert(offsetof(RCAdvHUDBFL_TalkSetText2, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkSetText2::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetText2, CharacterFaceID) == 0x000004, "Member 'RCAdvHUDBFL_TalkSetText2::CharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetText2, CharacterFacialID) == 0x000008, "Member 'RCAdvHUDBFL_TalkSetText2::CharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetText2, TextID) == 0x00000C, "Member 'RCAdvHUDBFL_TalkSetText2::TextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetText2, Character3DID) == 0x000014, "Member 'RCAdvHUDBFL_TalkSetText2::Character3DID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetText2, CharacterFacial3DID) == 0x000018, "Member 'RCAdvHUDBFL_TalkSetText2::CharacterFacial3DID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetText2, VoiceID) == 0x000020, "Member 'RCAdvHUDBFL_TalkSetText2::VoiceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetText2, Delay) == 0x000028, "Member 'RCAdvHUDBFL_TalkSetText2::Delay' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkSetTextData
// 0x0034 (0x0034 - 0x0000)
struct RCAdvHUDBFL_TalkSetTextData final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDTalkTextData                  TextData;                                          // 0x0004(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TalkSetTextData) == 0x000004, "Wrong alignment on RCAdvHUDBFL_TalkSetTextData");
static_assert(sizeof(RCAdvHUDBFL_TalkSetTextData) == 0x000034, "Wrong size on RCAdvHUDBFL_TalkSetTextData");
static_assert(offsetof(RCAdvHUDBFL_TalkSetTextData, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkSetTextData::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetTextData, TextData) == 0x000004, "Member 'RCAdvHUDBFL_TalkSetTextData::TextData' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkSetTextSimple
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDBFL_TalkSetTextSimple final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TalkSetTextSimple) == 0x000004, "Wrong alignment on RCAdvHUDBFL_TalkSetTextSimple");
static_assert(sizeof(RCAdvHUDBFL_TalkSetTextSimple) == 0x000010, "Wrong size on RCAdvHUDBFL_TalkSetTextSimple");
static_assert(offsetof(RCAdvHUDBFL_TalkSetTextSimple, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkSetTextSimple::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetTextSimple, TextID) == 0x000004, "Member 'RCAdvHUDBFL_TalkSetTextSimple::TextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkSetTextSimple, Delay) == 0x00000C, "Member 'RCAdvHUDBFL_TalkSetTextSimple::Delay' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkStart2
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDBFL_TalkStart2 final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDTalkWindowType                       WindowType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFaceID;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFacialID;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDBFL_TalkStart2) == 0x000004, "Wrong alignment on RCAdvHUDBFL_TalkStart2");
static_assert(sizeof(RCAdvHUDBFL_TalkStart2) == 0x000018, "Wrong size on RCAdvHUDBFL_TalkStart2");
static_assert(offsetof(RCAdvHUDBFL_TalkStart2, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkStart2::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkStart2, WindowType) == 0x000001, "Member 'RCAdvHUDBFL_TalkStart2::WindowType' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkStart2, TextID) == 0x000004, "Member 'RCAdvHUDBFL_TalkStart2::TextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkStart2, CharacterFaceID) == 0x00000C, "Member 'RCAdvHUDBFL_TalkStart2::CharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkStart2, CharacterFacialID) == 0x000010, "Member 'RCAdvHUDBFL_TalkStart2::CharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkStart2, bAutoPlay) == 0x000014, "Member 'RCAdvHUDBFL_TalkStart2::bAutoPlay' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TalkStartSimple
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDBFL_TalkStartSimple final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDTalkWindowType                       WindowType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TalkStartSimple) == 0x000001, "Wrong alignment on RCAdvHUDBFL_TalkStartSimple");
static_assert(sizeof(RCAdvHUDBFL_TalkStartSimple) == 0x000002, "Wrong size on RCAdvHUDBFL_TalkStartSimple");
static_assert(offsetof(RCAdvHUDBFL_TalkStartSimple, bSucceeded) == 0x000000, "Member 'RCAdvHUDBFL_TalkStartSimple::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TalkStartSimple, WindowType) == 0x000001, "Member 'RCAdvHUDBFL_TalkStartSimple::WindowType' has a wrong offset!");

// Function RC.RCAdvHUDBFL.TextIDToFaceID
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDBFL_TextIDToFaceID final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_TextIDToFaceID) == 0x000004, "Wrong alignment on RCAdvHUDBFL_TextIDToFaceID");
static_assert(sizeof(RCAdvHUDBFL_TextIDToFaceID) == 0x00000C, "Wrong size on RCAdvHUDBFL_TextIDToFaceID");
static_assert(offsetof(RCAdvHUDBFL_TextIDToFaceID, TextID) == 0x000000, "Member 'RCAdvHUDBFL_TextIDToFaceID::TextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDBFL_TextIDToFaceID, ReturnValue) == 0x000008, "Member 'RCAdvHUDBFL_TextIDToFaceID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDBFL.UpdateCollectionFlag
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDBFL_UpdateCollectionFlag final
{
public:
	class FName                                   CharaID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_UpdateCollectionFlag) == 0x000004, "Wrong alignment on RCAdvHUDBFL_UpdateCollectionFlag");
static_assert(sizeof(RCAdvHUDBFL_UpdateCollectionFlag) == 0x000008, "Wrong size on RCAdvHUDBFL_UpdateCollectionFlag");
static_assert(offsetof(RCAdvHUDBFL_UpdateCollectionFlag, CharaID) == 0x000000, "Member 'RCAdvHUDBFL_UpdateCollectionFlag::CharaID' has a wrong offset!");

// Function RC.RCAdvHUDBFL.WorldMenuStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDBFL_WorldMenuStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDBFL_WorldMenuStart) == 0x000001, "Wrong alignment on RCAdvHUDBFL_WorldMenuStart");
static_assert(sizeof(RCAdvHUDBFL_WorldMenuStart) == 0x000001, "Wrong size on RCAdvHUDBFL_WorldMenuStart");
static_assert(offsetof(RCAdvHUDBFL_WorldMenuStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDBFL_WorldMenuStart::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiListBar.GetBattleKaiKagiListBarStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiListBar_GetBattleKaiKagiListBarStatus final
{
public:
	ERCNzUiBattleKaiKagiListBarStatus             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiListBar_GetBattleKaiKagiListBarStatus) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiListBar_GetBattleKaiKagiListBarStatus");
static_assert(sizeof(RCNzUiBattleKaiKagiListBar_GetBattleKaiKagiListBarStatus) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiListBar_GetBattleKaiKagiListBarStatus");
static_assert(offsetof(RCNzUiBattleKaiKagiListBar_GetBattleKaiKagiListBarStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleKaiKagiListBar_GetBattleKaiKagiListBarStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiListBar.IsPlayWaitAnimation
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiListBar_IsPlayWaitAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiListBar_IsPlayWaitAnimation) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiListBar_IsPlayWaitAnimation");
static_assert(sizeof(RCNzUiBattleKaiKagiListBar_IsPlayWaitAnimation) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiListBar_IsPlayWaitAnimation");
static_assert(offsetof(RCNzUiBattleKaiKagiListBar_IsPlayWaitAnimation, ReturnValue) == 0x000000, "Member 'RCNzUiBattleKaiKagiListBar_IsPlayWaitAnimation::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiListBar.SetKaiKagiName
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleKaiKagiListBar_SetKaiKagiName final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiListBar_SetKaiKagiName) == 0x000004, "Wrong alignment on RCNzUiBattleKaiKagiListBar_SetKaiKagiName");
static_assert(sizeof(RCNzUiBattleKaiKagiListBar_SetKaiKagiName) == 0x000008, "Wrong size on RCNzUiBattleKaiKagiListBar_SetKaiKagiName");
static_assert(offsetof(RCNzUiBattleKaiKagiListBar_SetKaiKagiName, InTextID) == 0x000000, "Member 'RCNzUiBattleKaiKagiListBar_SetKaiKagiName::InTextID' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiListBar.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiListBar_SetVisible final
{
public:
	bool                                          bInVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiListBar_SetVisible) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiListBar_SetVisible");
static_assert(sizeof(RCNzUiBattleKaiKagiListBar_SetVisible) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiListBar_SetVisible");
static_assert(offsetof(RCNzUiBattleKaiKagiListBar_SetVisible, bInVisibility) == 0x000000, "Member 'RCNzUiBattleKaiKagiListBar_SetVisible::bInVisibility' has a wrong offset!");

// Function RC.RCUiInteractIcon.GetInteractStatusInt
// 0x0004 (0x0004 - 0x0000)
struct RCUiInteractIcon_GetInteractStatusInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiInteractIcon_GetInteractStatusInt) == 0x000004, "Wrong alignment on RCUiInteractIcon_GetInteractStatusInt");
static_assert(sizeof(RCUiInteractIcon_GetInteractStatusInt) == 0x000004, "Wrong size on RCUiInteractIcon_GetInteractStatusInt");
static_assert(offsetof(RCUiInteractIcon_GetInteractStatusInt, ReturnValue) == 0x000000, "Member 'RCUiInteractIcon_GetInteractStatusInt::ReturnValue' has a wrong offset!");

// Function RC.RCUiInteractIcon.Open
// 0x0002 (0x0002 - 0x0000)
struct RCUiInteractIcon_Open final
{
public:
	bool                                          bInShowSubQuest;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMoveable;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiInteractIcon_Open) == 0x000001, "Wrong alignment on RCUiInteractIcon_Open");
static_assert(sizeof(RCUiInteractIcon_Open) == 0x000002, "Wrong size on RCUiInteractIcon_Open");
static_assert(offsetof(RCUiInteractIcon_Open, bInShowSubQuest) == 0x000000, "Member 'RCUiInteractIcon_Open::bInShowSubQuest' has a wrong offset!");
static_assert(offsetof(RCUiInteractIcon_Open, bInMoveable) == 0x000001, "Member 'RCUiInteractIcon_Open::bInMoveable' has a wrong offset!");

// Function RC.RCUiInteractIcon.OpenSelectable
// 0x0018 (0x0018 - 0x0000)
struct RCUiInteractIcon_OpenSelectable final
{
public:
	bool                                          bInShowSubQuest;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMoveable;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InName;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiInteractIcon_OpenSelectable) == 0x000008, "Wrong alignment on RCUiInteractIcon_OpenSelectable");
static_assert(sizeof(RCUiInteractIcon_OpenSelectable) == 0x000018, "Wrong size on RCUiInteractIcon_OpenSelectable");
static_assert(offsetof(RCUiInteractIcon_OpenSelectable, bInShowSubQuest) == 0x000000, "Member 'RCUiInteractIcon_OpenSelectable::bInShowSubQuest' has a wrong offset!");
static_assert(offsetof(RCUiInteractIcon_OpenSelectable, bInMoveable) == 0x000001, "Member 'RCUiInteractIcon_OpenSelectable::bInMoveable' has a wrong offset!");
static_assert(offsetof(RCUiInteractIcon_OpenSelectable, InName) == 0x000008, "Member 'RCUiInteractIcon_OpenSelectable::InName' has a wrong offset!");

// Function RC.RCUiInteractIcon.OpenText
// 0x0010 (0x0010 - 0x0000)
struct RCUiInteractIcon_OpenText final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiInteractIcon_OpenText) == 0x000008, "Wrong alignment on RCUiInteractIcon_OpenText");
static_assert(sizeof(RCUiInteractIcon_OpenText) == 0x000010, "Wrong size on RCUiInteractIcon_OpenText");
static_assert(offsetof(RCUiInteractIcon_OpenText, InName) == 0x000000, "Member 'RCUiInteractIcon_OpenText::InName' has a wrong offset!");

// Function RC.RCUiInteractIcon.StartSelectable
// 0x0010 (0x0010 - 0x0000)
struct RCUiInteractIcon_StartSelectable final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiInteractIcon_StartSelectable) == 0x000008, "Wrong alignment on RCUiInteractIcon_StartSelectable");
static_assert(sizeof(RCUiInteractIcon_StartSelectable) == 0x000010, "Wrong size on RCUiInteractIcon_StartSelectable");
static_assert(offsetof(RCUiInteractIcon_StartSelectable, InName) == 0x000000, "Member 'RCUiInteractIcon_StartSelectable::InName' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.GetPressedDecideButtonSimpleResult
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDInteractIconComponent_GetPressedDecideButtonSimpleResult final
{
public:
	ERCAdvHUDPressedDecideResult                  InResult;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_GetPressedDecideButtonSimpleResult) == 0x000001, "Wrong alignment on RCAdvHUDInteractIconComponent_GetPressedDecideButtonSimpleResult");
static_assert(sizeof(RCAdvHUDInteractIconComponent_GetPressedDecideButtonSimpleResult) == 0x000002, "Wrong size on RCAdvHUDInteractIconComponent_GetPressedDecideButtonSimpleResult");
static_assert(offsetof(RCAdvHUDInteractIconComponent_GetPressedDecideButtonSimpleResult, InResult) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_GetPressedDecideButtonSimpleResult::InResult' has a wrong offset!");
static_assert(offsetof(RCAdvHUDInteractIconComponent_GetPressedDecideButtonSimpleResult, ReturnValue) == 0x000001, "Member 'RCAdvHUDInteractIconComponent_GetPressedDecideButtonSimpleResult::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.CheckAccessableWidgetReady
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDInteractIconComponent_CheckAccessableWidgetReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_CheckAccessableWidgetReady) == 0x000001, "Wrong alignment on RCAdvHUDInteractIconComponent_CheckAccessableWidgetReady");
static_assert(sizeof(RCAdvHUDInteractIconComponent_CheckAccessableWidgetReady) == 0x000001, "Wrong size on RCAdvHUDInteractIconComponent_CheckAccessableWidgetReady");
static_assert(offsetof(RCAdvHUDInteractIconComponent_CheckAccessableWidgetReady, ReturnValue) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_CheckAccessableWidgetReady::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.CheckAccessedWidgetWait
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDInteractIconComponent_CheckAccessedWidgetWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_CheckAccessedWidgetWait) == 0x000001, "Wrong alignment on RCAdvHUDInteractIconComponent_CheckAccessedWidgetWait");
static_assert(sizeof(RCAdvHUDInteractIconComponent_CheckAccessedWidgetWait) == 0x000001, "Wrong size on RCAdvHUDInteractIconComponent_CheckAccessedWidgetWait");
static_assert(offsetof(RCAdvHUDInteractIconComponent_CheckAccessedWidgetWait, ReturnValue) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_CheckAccessedWidgetWait::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.CheckAllAccessableWidgetsClosed
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsClosed final
{
public:
	bool                                          bInContainClosing;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsClosed) == 0x000001, "Wrong alignment on RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsClosed");
static_assert(sizeof(RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsClosed) == 0x000002, "Wrong size on RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsClosed");
static_assert(offsetof(RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsClosed, bInContainClosing) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsClosed::bInContainClosing' has a wrong offset!");
static_assert(offsetof(RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsClosed, ReturnValue) == 0x000001, "Member 'RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsClosed::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.CheckAllAccessableWidgetsOpened
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsOpened) == 0x000001, "Wrong alignment on RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsOpened");
static_assert(sizeof(RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsOpened) == 0x000001, "Wrong size on RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsOpened");
static_assert(offsetof(RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsOpened, ReturnValue) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_CheckAllAccessableWidgetsOpened::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.GetAccessedCharacter
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDInteractIconComponent_GetAccessedCharacter final
{
public:
	class ARCCharacterRender*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_GetAccessedCharacter) == 0x000008, "Wrong alignment on RCAdvHUDInteractIconComponent_GetAccessedCharacter");
static_assert(sizeof(RCAdvHUDInteractIconComponent_GetAccessedCharacter) == 0x000008, "Wrong size on RCAdvHUDInteractIconComponent_GetAccessedCharacter");
static_assert(offsetof(RCAdvHUDInteractIconComponent_GetAccessedCharacter, ReturnValue) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_GetAccessedCharacter::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.GetAccessedCheckActor
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDInteractIconComponent_GetAccessedCheckActor final
{
public:
	class ARCCheckActor*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_GetAccessedCheckActor) == 0x000008, "Wrong alignment on RCAdvHUDInteractIconComponent_GetAccessedCheckActor");
static_assert(sizeof(RCAdvHUDInteractIconComponent_GetAccessedCheckActor) == 0x000008, "Wrong size on RCAdvHUDInteractIconComponent_GetAccessedCheckActor");
static_assert(offsetof(RCAdvHUDInteractIconComponent_GetAccessedCheckActor, ReturnValue) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_GetAccessedCheckActor::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.GetAccessedNPC
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDInteractIconComponent_GetAccessedNPC final
{
public:
	class ARCPawnRender*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_GetAccessedNPC) == 0x000008, "Wrong alignment on RCAdvHUDInteractIconComponent_GetAccessedNPC");
static_assert(sizeof(RCAdvHUDInteractIconComponent_GetAccessedNPC) == 0x000008, "Wrong size on RCAdvHUDInteractIconComponent_GetAccessedNPC");
static_assert(offsetof(RCAdvHUDInteractIconComponent_GetAccessedNPC, ReturnValue) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_GetAccessedNPC::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.PressedDecideButton
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDInteractIconComponent_PressedDecideButton final
{
public:
	ERCAdvHUDPressedDecideResult                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_PressedDecideButton) == 0x000001, "Wrong alignment on RCAdvHUDInteractIconComponent_PressedDecideButton");
static_assert(sizeof(RCAdvHUDInteractIconComponent_PressedDecideButton) == 0x000001, "Wrong size on RCAdvHUDInteractIconComponent_PressedDecideButton");
static_assert(offsetof(RCAdvHUDInteractIconComponent_PressedDecideButton, ReturnValue) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_PressedDecideButton::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDInteractIconComponent.PressedDecideButtonSimple
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDInteractIconComponent_PressedDecideButtonSimple final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDInteractIconComponent_PressedDecideButtonSimple) == 0x000001, "Wrong alignment on RCAdvHUDInteractIconComponent_PressedDecideButtonSimple");
static_assert(sizeof(RCAdvHUDInteractIconComponent_PressedDecideButtonSimple) == 0x000001, "Wrong size on RCAdvHUDInteractIconComponent_PressedDecideButtonSimple");
static_assert(offsetof(RCAdvHUDInteractIconComponent_PressedDecideButtonSimple, ReturnValue) == 0x000000, "Member 'RCAdvHUDInteractIconComponent_PressedDecideButtonSimple::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckBusStopEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_CheckBusStopEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckBusStopEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckBusStopEnable");
static_assert(sizeof(RCAdvHUDMapComponent_CheckBusStopEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_CheckBusStopEnable");
static_assert(offsetof(RCAdvHUDMapComponent_CheckBusStopEnable, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckBusStopEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckChangeAreaEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_CheckChangeAreaEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckChangeAreaEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckChangeAreaEnable");
static_assert(sizeof(RCAdvHUDMapComponent_CheckChangeAreaEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_CheckChangeAreaEnable");
static_assert(offsetof(RCAdvHUDMapComponent_CheckChangeAreaEnable, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckChangeAreaEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckEnterBuildingEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_CheckEnterBuildingEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckEnterBuildingEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckEnterBuildingEnable");
static_assert(sizeof(RCAdvHUDMapComponent_CheckEnterBuildingEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_CheckEnterBuildingEnable");
static_assert(offsetof(RCAdvHUDMapComponent_CheckEnterBuildingEnable, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckEnterBuildingEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckLocationEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_CheckLocationEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckLocationEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckLocationEnable");
static_assert(sizeof(RCAdvHUDMapComponent_CheckLocationEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_CheckLocationEnable");
static_assert(offsetof(RCAdvHUDMapComponent_CheckLocationEnable, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckLocationEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckLocationFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_CheckLocationFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckLocationFinished) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckLocationFinished");
static_assert(sizeof(RCAdvHUDMapComponent_CheckLocationFinished) == 0x000001, "Wrong size on RCAdvHUDMapComponent_CheckLocationFinished");
static_assert(offsetof(RCAdvHUDMapComponent_CheckLocationFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckLocationFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckLocationRunning
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_CheckLocationRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckLocationRunning) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckLocationRunning");
static_assert(sizeof(RCAdvHUDMapComponent_CheckLocationRunning) == 0x000001, "Wrong size on RCAdvHUDMapComponent_CheckLocationRunning");
static_assert(offsetof(RCAdvHUDMapComponent_CheckLocationRunning, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckLocationRunning::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckLocationStarted
// 0x0003 (0x0003 - 0x0000)
struct RCAdvHUDMapComponent_CheckLocationStarted final
{
public:
	bool                                          bInMiniMap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLocation;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckLocationStarted) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckLocationStarted");
static_assert(sizeof(RCAdvHUDMapComponent_CheckLocationStarted) == 0x000003, "Wrong size on RCAdvHUDMapComponent_CheckLocationStarted");
static_assert(offsetof(RCAdvHUDMapComponent_CheckLocationStarted, bInMiniMap) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckLocationStarted::bInMiniMap' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_CheckLocationStarted, bInLocation) == 0x000001, "Member 'RCAdvHUDMapComponent_CheckLocationStarted::bInLocation' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_CheckLocationStarted, ReturnValue) == 0x000002, "Member 'RCAdvHUDMapComponent_CheckLocationStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckMiniMapEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_CheckMiniMapEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckMiniMapEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckMiniMapEnable");
static_assert(sizeof(RCAdvHUDMapComponent_CheckMiniMapEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_CheckMiniMapEnable");
static_assert(offsetof(RCAdvHUDMapComponent_CheckMiniMapEnable, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckMiniMapEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckMiniMapEnableScene
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_CheckMiniMapEnableScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckMiniMapEnableScene) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckMiniMapEnableScene");
static_assert(sizeof(RCAdvHUDMapComponent_CheckMiniMapEnableScene) == 0x000001, "Wrong size on RCAdvHUDMapComponent_CheckMiniMapEnableScene");
static_assert(offsetof(RCAdvHUDMapComponent_CheckMiniMapEnableScene, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckMiniMapEnableScene::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.CheckMiniMapRunning
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_CheckMiniMapRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_CheckMiniMapRunning) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_CheckMiniMapRunning");
static_assert(sizeof(RCAdvHUDMapComponent_CheckMiniMapRunning) == 0x000001, "Wrong size on RCAdvHUDMapComponent_CheckMiniMapRunning");
static_assert(offsetof(RCAdvHUDMapComponent_CheckMiniMapRunning, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_CheckMiniMapRunning::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetBusStopData
// 0x0078 (0x0078 - 0x0000)
struct RCAdvHUDMapComponent_GetBusStopData final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSucceeded;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDEnterBuildingData             OutBusStopData;                                    // 0x0008(0x0070)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetBusStopData) == 0x000008, "Wrong alignment on RCAdvHUDMapComponent_GetBusStopData");
static_assert(sizeof(RCAdvHUDMapComponent_GetBusStopData) == 0x000078, "Wrong size on RCAdvHUDMapComponent_GetBusStopData");
static_assert(offsetof(RCAdvHUDMapComponent_GetBusStopData, InIndex) == 0x000000, "Member 'RCAdvHUDMapComponent_GetBusStopData::InIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_GetBusStopData, bOutSucceeded) == 0x000004, "Member 'RCAdvHUDMapComponent_GetBusStopData::bOutSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_GetBusStopData, OutBusStopData) == 0x000008, "Member 'RCAdvHUDMapComponent_GetBusStopData::OutBusStopData' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetBusStopDataNum
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDMapComponent_GetBusStopDataNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetBusStopDataNum) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_GetBusStopDataNum");
static_assert(sizeof(RCAdvHUDMapComponent_GetBusStopDataNum) == 0x000004, "Wrong size on RCAdvHUDMapComponent_GetBusStopDataNum");
static_assert(offsetof(RCAdvHUDMapComponent_GetBusStopDataNum, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_GetBusStopDataNum::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetChangeAreaData
// 0x0078 (0x0078 - 0x0000)
struct RCAdvHUDMapComponent_GetChangeAreaData final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSucceeded;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDChangeAreaData                OutChangeAreaData;                                 // 0x0008(0x0070)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetChangeAreaData) == 0x000008, "Wrong alignment on RCAdvHUDMapComponent_GetChangeAreaData");
static_assert(sizeof(RCAdvHUDMapComponent_GetChangeAreaData) == 0x000078, "Wrong size on RCAdvHUDMapComponent_GetChangeAreaData");
static_assert(offsetof(RCAdvHUDMapComponent_GetChangeAreaData, InIndex) == 0x000000, "Member 'RCAdvHUDMapComponent_GetChangeAreaData::InIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_GetChangeAreaData, bOutSucceeded) == 0x000004, "Member 'RCAdvHUDMapComponent_GetChangeAreaData::bOutSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_GetChangeAreaData, OutChangeAreaData) == 0x000008, "Member 'RCAdvHUDMapComponent_GetChangeAreaData::OutChangeAreaData' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetChangeAreaDataNum
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDMapComponent_GetChangeAreaDataNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetChangeAreaDataNum) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_GetChangeAreaDataNum");
static_assert(sizeof(RCAdvHUDMapComponent_GetChangeAreaDataNum) == 0x000004, "Wrong size on RCAdvHUDMapComponent_GetChangeAreaDataNum");
static_assert(offsetof(RCAdvHUDMapComponent_GetChangeAreaDataNum, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_GetChangeAreaDataNum::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetCurrentLocationDisplayLocationID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDMapComponent_GetCurrentLocationDisplayLocationID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetCurrentLocationDisplayLocationID) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_GetCurrentLocationDisplayLocationID");
static_assert(sizeof(RCAdvHUDMapComponent_GetCurrentLocationDisplayLocationID) == 0x000008, "Wrong size on RCAdvHUDMapComponent_GetCurrentLocationDisplayLocationID");
static_assert(offsetof(RCAdvHUDMapComponent_GetCurrentLocationDisplayLocationID, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_GetCurrentLocationDisplayLocationID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetCurrentLocationDisplayTextID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDMapComponent_GetCurrentLocationDisplayTextID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetCurrentLocationDisplayTextID) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_GetCurrentLocationDisplayTextID");
static_assert(sizeof(RCAdvHUDMapComponent_GetCurrentLocationDisplayTextID) == 0x000008, "Wrong size on RCAdvHUDMapComponent_GetCurrentLocationDisplayTextID");
static_assert(offsetof(RCAdvHUDMapComponent_GetCurrentLocationDisplayTextID, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_GetCurrentLocationDisplayTextID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetCurrentLocationID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDMapComponent_GetCurrentLocationID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetCurrentLocationID) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_GetCurrentLocationID");
static_assert(sizeof(RCAdvHUDMapComponent_GetCurrentLocationID) == 0x000008, "Wrong size on RCAdvHUDMapComponent_GetCurrentLocationID");
static_assert(offsetof(RCAdvHUDMapComponent_GetCurrentLocationID, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_GetCurrentLocationID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetCurrentLocationTextID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDMapComponent_GetCurrentLocationTextID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetCurrentLocationTextID) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_GetCurrentLocationTextID");
static_assert(sizeof(RCAdvHUDMapComponent_GetCurrentLocationTextID) == 0x000008, "Wrong size on RCAdvHUDMapComponent_GetCurrentLocationTextID");
static_assert(offsetof(RCAdvHUDMapComponent_GetCurrentLocationTextID, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_GetCurrentLocationTextID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetCurrentMiniMapLocationID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDMapComponent_GetCurrentMiniMapLocationID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetCurrentMiniMapLocationID) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_GetCurrentMiniMapLocationID");
static_assert(sizeof(RCAdvHUDMapComponent_GetCurrentMiniMapLocationID) == 0x000008, "Wrong size on RCAdvHUDMapComponent_GetCurrentMiniMapLocationID");
static_assert(offsetof(RCAdvHUDMapComponent_GetCurrentMiniMapLocationID, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_GetCurrentMiniMapLocationID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetCurrentMiniMapTextID
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDMapComponent_GetCurrentMiniMapTextID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetCurrentMiniMapTextID) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_GetCurrentMiniMapTextID");
static_assert(sizeof(RCAdvHUDMapComponent_GetCurrentMiniMapTextID) == 0x000008, "Wrong size on RCAdvHUDMapComponent_GetCurrentMiniMapTextID");
static_assert(offsetof(RCAdvHUDMapComponent_GetCurrentMiniMapTextID, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_GetCurrentMiniMapTextID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetEnterBuildingData
// 0x0078 (0x0078 - 0x0000)
struct RCAdvHUDMapComponent_GetEnterBuildingData final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSucceeded;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDEnterBuildingData             OutEnterBuildingData;                              // 0x0008(0x0070)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetEnterBuildingData) == 0x000008, "Wrong alignment on RCAdvHUDMapComponent_GetEnterBuildingData");
static_assert(sizeof(RCAdvHUDMapComponent_GetEnterBuildingData) == 0x000078, "Wrong size on RCAdvHUDMapComponent_GetEnterBuildingData");
static_assert(offsetof(RCAdvHUDMapComponent_GetEnterBuildingData, InIndex) == 0x000000, "Member 'RCAdvHUDMapComponent_GetEnterBuildingData::InIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_GetEnterBuildingData, bOutSucceeded) == 0x000004, "Member 'RCAdvHUDMapComponent_GetEnterBuildingData::bOutSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_GetEnterBuildingData, OutEnterBuildingData) == 0x000008, "Member 'RCAdvHUDMapComponent_GetEnterBuildingData::OutEnterBuildingData' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.GetEnterBuildingDataNum
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDMapComponent_GetEnterBuildingDataNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_GetEnterBuildingDataNum) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_GetEnterBuildingDataNum");
static_assert(sizeof(RCAdvHUDMapComponent_GetEnterBuildingDataNum) == 0x000004, "Wrong size on RCAdvHUDMapComponent_GetEnterBuildingDataNum");
static_assert(offsetof(RCAdvHUDMapComponent_GetEnterBuildingDataNum, ReturnValue) == 0x000000, "Member 'RCAdvHUDMapComponent_GetEnterBuildingDataNum::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.IsBusStopVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDMapComponent_IsBusStopVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_IsBusStopVisible) == 0x000008, "Wrong alignment on RCAdvHUDMapComponent_IsBusStopVisible");
static_assert(sizeof(RCAdvHUDMapComponent_IsBusStopVisible) == 0x000010, "Wrong size on RCAdvHUDMapComponent_IsBusStopVisible");
static_assert(offsetof(RCAdvHUDMapComponent_IsBusStopVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUDMapComponent_IsBusStopVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_IsBusStopVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUDMapComponent_IsBusStopVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.IsChangeAreaVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDMapComponent_IsChangeAreaVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_IsChangeAreaVisible) == 0x000008, "Wrong alignment on RCAdvHUDMapComponent_IsChangeAreaVisible");
static_assert(sizeof(RCAdvHUDMapComponent_IsChangeAreaVisible) == 0x000010, "Wrong size on RCAdvHUDMapComponent_IsChangeAreaVisible");
static_assert(offsetof(RCAdvHUDMapComponent_IsChangeAreaVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUDMapComponent_IsChangeAreaVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_IsChangeAreaVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUDMapComponent_IsChangeAreaVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.IsEnterBuildingVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDMapComponent_IsEnterBuildingVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_IsEnterBuildingVisible) == 0x000008, "Wrong alignment on RCAdvHUDMapComponent_IsEnterBuildingVisible");
static_assert(sizeof(RCAdvHUDMapComponent_IsEnterBuildingVisible) == 0x000010, "Wrong size on RCAdvHUDMapComponent_IsEnterBuildingVisible");
static_assert(offsetof(RCAdvHUDMapComponent_IsEnterBuildingVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUDMapComponent_IsEnterBuildingVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_IsEnterBuildingVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUDMapComponent_IsEnterBuildingVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.LoadLocationDataName
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUDMapComponent_LoadLocationDataName final
{
public:
	class FName                                   InLocationID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLocationTextID;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_LoadLocationDataName) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_LoadLocationDataName");
static_assert(sizeof(RCAdvHUDMapComponent_LoadLocationDataName) == 0x000014, "Wrong size on RCAdvHUDMapComponent_LoadLocationDataName");
static_assert(offsetof(RCAdvHUDMapComponent_LoadLocationDataName, InLocationID) == 0x000000, "Member 'RCAdvHUDMapComponent_LoadLocationDataName::InLocationID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_LoadLocationDataName, InLocationTextID) == 0x000008, "Member 'RCAdvHUDMapComponent_LoadLocationDataName::InLocationTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_LoadLocationDataName, ReturnValue) == 0x000010, "Member 'RCAdvHUDMapComponent_LoadLocationDataName::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetBusStopData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUDMapComponent_SetBusStopData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLooksLikeUsable;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_SetBusStopData) == 0x000008, "Wrong alignment on RCAdvHUDMapComponent_SetBusStopData");
static_assert(sizeof(RCAdvHUDMapComponent_SetBusStopData) == 0x000020, "Wrong size on RCAdvHUDMapComponent_SetBusStopData");
static_assert(offsetof(RCAdvHUDMapComponent_SetBusStopData, InCheckActor) == 0x000000, "Member 'RCAdvHUDMapComponent_SetBusStopData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetBusStopData, InTextID) == 0x000008, "Member 'RCAdvHUDMapComponent_SetBusStopData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetBusStopData, bInDraw) == 0x000010, "Member 'RCAdvHUDMapComponent_SetBusStopData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetBusStopData, bInLooksLikeUsable) == 0x000011, "Member 'RCAdvHUDMapComponent_SetBusStopData::bInLooksLikeUsable' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetBusStopData, bInAccessable) == 0x000012, "Member 'RCAdvHUDMapComponent_SetBusStopData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetBusStopData, InScale) == 0x000014, "Member 'RCAdvHUDMapComponent_SetBusStopData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetBusStopData, ReturnValue) == 0x000018, "Member 'RCAdvHUDMapComponent_SetBusStopData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetBusStopEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_SetBusStopEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_SetBusStopEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_SetBusStopEnable");
static_assert(sizeof(RCAdvHUDMapComponent_SetBusStopEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_SetBusStopEnable");
static_assert(offsetof(RCAdvHUDMapComponent_SetBusStopEnable, bInEnable) == 0x000000, "Member 'RCAdvHUDMapComponent_SetBusStopEnable::bInEnable' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetChangeAreaData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUDMapComponent_SetChangeAreaData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDrawText;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_SetChangeAreaData) == 0x000008, "Wrong alignment on RCAdvHUDMapComponent_SetChangeAreaData");
static_assert(sizeof(RCAdvHUDMapComponent_SetChangeAreaData) == 0x000020, "Wrong size on RCAdvHUDMapComponent_SetChangeAreaData");
static_assert(offsetof(RCAdvHUDMapComponent_SetChangeAreaData, InCheckActor) == 0x000000, "Member 'RCAdvHUDMapComponent_SetChangeAreaData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetChangeAreaData, InTextID) == 0x000008, "Member 'RCAdvHUDMapComponent_SetChangeAreaData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetChangeAreaData, bInDraw) == 0x000010, "Member 'RCAdvHUDMapComponent_SetChangeAreaData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetChangeAreaData, bInDrawText) == 0x000011, "Member 'RCAdvHUDMapComponent_SetChangeAreaData::bInDrawText' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetChangeAreaData, InScale) == 0x000014, "Member 'RCAdvHUDMapComponent_SetChangeAreaData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetChangeAreaData, ReturnValue) == 0x000018, "Member 'RCAdvHUDMapComponent_SetChangeAreaData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetChangeAreaEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_SetChangeAreaEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_SetChangeAreaEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_SetChangeAreaEnable");
static_assert(sizeof(RCAdvHUDMapComponent_SetChangeAreaEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_SetChangeAreaEnable");
static_assert(offsetof(RCAdvHUDMapComponent_SetChangeAreaEnable, bInEnable) == 0x000000, "Member 'RCAdvHUDMapComponent_SetChangeAreaEnable::bInEnable' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetEnterBuildingData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUDMapComponent_SetEnterBuildingData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_SetEnterBuildingData) == 0x000008, "Wrong alignment on RCAdvHUDMapComponent_SetEnterBuildingData");
static_assert(sizeof(RCAdvHUDMapComponent_SetEnterBuildingData) == 0x000020, "Wrong size on RCAdvHUDMapComponent_SetEnterBuildingData");
static_assert(offsetof(RCAdvHUDMapComponent_SetEnterBuildingData, InCheckActor) == 0x000000, "Member 'RCAdvHUDMapComponent_SetEnterBuildingData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetEnterBuildingData, InTextID) == 0x000008, "Member 'RCAdvHUDMapComponent_SetEnterBuildingData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetEnterBuildingData, bInDraw) == 0x000010, "Member 'RCAdvHUDMapComponent_SetEnterBuildingData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetEnterBuildingData, bInAccessable) == 0x000011, "Member 'RCAdvHUDMapComponent_SetEnterBuildingData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetEnterBuildingData, InScale) == 0x000014, "Member 'RCAdvHUDMapComponent_SetEnterBuildingData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetEnterBuildingData, ReturnValue) == 0x000018, "Member 'RCAdvHUDMapComponent_SetEnterBuildingData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetEnterBuildingEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_SetEnterBuildingEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_SetEnterBuildingEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_SetEnterBuildingEnable");
static_assert(sizeof(RCAdvHUDMapComponent_SetEnterBuildingEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_SetEnterBuildingEnable");
static_assert(offsetof(RCAdvHUDMapComponent_SetEnterBuildingEnable, bInEnable) == 0x000000, "Member 'RCAdvHUDMapComponent_SetEnterBuildingEnable::bInEnable' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetLocationDisplayLocation
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUDMapComponent_SetLocationDisplayLocation final
{
public:
	class FName                                   InLocationID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLocationTextID;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_SetLocationDisplayLocation) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_SetLocationDisplayLocation");
static_assert(sizeof(RCAdvHUDMapComponent_SetLocationDisplayLocation) == 0x000014, "Wrong size on RCAdvHUDMapComponent_SetLocationDisplayLocation");
static_assert(offsetof(RCAdvHUDMapComponent_SetLocationDisplayLocation, InLocationID) == 0x000000, "Member 'RCAdvHUDMapComponent_SetLocationDisplayLocation::InLocationID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetLocationDisplayLocation, InLocationTextID) == 0x000008, "Member 'RCAdvHUDMapComponent_SetLocationDisplayLocation::InLocationTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetLocationDisplayLocation, ReturnValue) == 0x000010, "Member 'RCAdvHUDMapComponent_SetLocationDisplayLocation::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetLocationEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_SetLocationEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_SetLocationEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_SetLocationEnable");
static_assert(sizeof(RCAdvHUDMapComponent_SetLocationEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_SetLocationEnable");
static_assert(offsetof(RCAdvHUDMapComponent_SetLocationEnable, bInEnable) == 0x000000, "Member 'RCAdvHUDMapComponent_SetLocationEnable::bInEnable' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetLocationName
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUDMapComponent_SetLocationName final
{
public:
	class FName                                   InLocationID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLocationTextID;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_SetLocationName) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_SetLocationName");
static_assert(sizeof(RCAdvHUDMapComponent_SetLocationName) == 0x000014, "Wrong size on RCAdvHUDMapComponent_SetLocationName");
static_assert(offsetof(RCAdvHUDMapComponent_SetLocationName, InLocationID) == 0x000000, "Member 'RCAdvHUDMapComponent_SetLocationName::InLocationID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetLocationName, InLocationTextID) == 0x000008, "Member 'RCAdvHUDMapComponent_SetLocationName::InLocationTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetLocationName, ReturnValue) == 0x000010, "Member 'RCAdvHUDMapComponent_SetLocationName::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetMiniMapEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDMapComponent_SetMiniMapEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_SetMiniMapEnable) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_SetMiniMapEnable");
static_assert(sizeof(RCAdvHUDMapComponent_SetMiniMapEnable) == 0x000001, "Wrong size on RCAdvHUDMapComponent_SetMiniMapEnable");
static_assert(offsetof(RCAdvHUDMapComponent_SetMiniMapEnable, bInEnable) == 0x000000, "Member 'RCAdvHUDMapComponent_SetMiniMapEnable::bInEnable' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.SetMiniMapLocation
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUDMapComponent_SetMiniMapLocation final
{
public:
	class FName                                   InLocationID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLocationTextID;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDMapComponent_SetMiniMapLocation) == 0x000004, "Wrong alignment on RCAdvHUDMapComponent_SetMiniMapLocation");
static_assert(sizeof(RCAdvHUDMapComponent_SetMiniMapLocation) == 0x000014, "Wrong size on RCAdvHUDMapComponent_SetMiniMapLocation");
static_assert(offsetof(RCAdvHUDMapComponent_SetMiniMapLocation, InLocationID) == 0x000000, "Member 'RCAdvHUDMapComponent_SetMiniMapLocation::InLocationID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetMiniMapLocation, InLocationTextID) == 0x000008, "Member 'RCAdvHUDMapComponent_SetMiniMapLocation::InLocationTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_SetMiniMapLocation, ReturnValue) == 0x000010, "Member 'RCAdvHUDMapComponent_SetMiniMapLocation::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDMapComponent.StartLocation
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDMapComponent_StartLocation final
{
public:
	bool                                          bInMiniMap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLocation;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDMapComponent_StartLocation) == 0x000001, "Wrong alignment on RCAdvHUDMapComponent_StartLocation");
static_assert(sizeof(RCAdvHUDMapComponent_StartLocation) == 0x000002, "Wrong size on RCAdvHUDMapComponent_StartLocation");
static_assert(offsetof(RCAdvHUDMapComponent_StartLocation, bInMiniMap) == 0x000000, "Member 'RCAdvHUDMapComponent_StartLocation::bInMiniMap' has a wrong offset!");
static_assert(offsetof(RCAdvHUDMapComponent_StartLocation, bInLocation) == 0x000001, "Member 'RCAdvHUDMapComponent_StartLocation::bInLocation' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.FinishTelopCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_FinishTelopCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_FinishTelopCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_FinishTelopCheckFinished");
static_assert(sizeof(RCAdvHUDResearchComponent_FinishTelopCheckFinished) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_FinishTelopCheckFinished");
static_assert(offsetof(RCAdvHUDResearchComponent_FinishTelopCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_FinishTelopCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.FinishTelopStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_FinishTelopStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_FinishTelopStart) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_FinishTelopStart");
static_assert(sizeof(RCAdvHUDResearchComponent_FinishTelopStart) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_FinishTelopStart");
static_assert(offsetof(RCAdvHUDResearchComponent_FinishTelopStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_FinishTelopStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.GetKagiCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_GetKagiCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_GetKagiCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_GetKagiCheckFinished");
static_assert(sizeof(RCAdvHUDResearchComponent_GetKagiCheckFinished) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_GetKagiCheckFinished");
static_assert(offsetof(RCAdvHUDResearchComponent_GetKagiCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_GetKagiCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.GetKagiSetData_Debug
// 0x0030 (0x0030 - 0x0000)
struct RCAdvHUDResearchComponent_GetKagiSetData_Debug final
{
public:
	class FName                                   InKagiImage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InKagiName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InKagiCaption;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDResearchComponent_GetKagiSetData_Debug) == 0x000008, "Wrong alignment on RCAdvHUDResearchComponent_GetKagiSetData_Debug");
static_assert(sizeof(RCAdvHUDResearchComponent_GetKagiSetData_Debug) == 0x000030, "Wrong size on RCAdvHUDResearchComponent_GetKagiSetData_Debug");
static_assert(offsetof(RCAdvHUDResearchComponent_GetKagiSetData_Debug, InKagiImage) == 0x000000, "Member 'RCAdvHUDResearchComponent_GetKagiSetData_Debug::InKagiImage' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_GetKagiSetData_Debug, InKagiName) == 0x000008, "Member 'RCAdvHUDResearchComponent_GetKagiSetData_Debug::InKagiName' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_GetKagiSetData_Debug, InKagiCaption) == 0x000018, "Member 'RCAdvHUDResearchComponent_GetKagiSetData_Debug::InKagiCaption' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_GetKagiSetData_Debug, ReturnValue) == 0x000028, "Member 'RCAdvHUDResearchComponent_GetKagiSetData_Debug::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.GetKagiSetDataFromKagiID
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID final
{
public:
	class FName                                   InKagiID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPhase;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID) == 0x000004, "Wrong alignment on RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID");
static_assert(sizeof(RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID) == 0x000010, "Wrong size on RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID");
static_assert(offsetof(RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID, InKagiID) == 0x000000, "Member 'RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID::InKagiID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID, InPhase) == 0x000008, "Member 'RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID::InPhase' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID, ReturnValue) == 0x00000C, "Member 'RCAdvHUDResearchComponent_GetKagiSetDataFromKagiID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.GetKagiStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_GetKagiStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_GetKagiStart) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_GetKagiStart");
static_assert(sizeof(RCAdvHUDResearchComponent_GetKagiStart) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_GetKagiStart");
static_assert(offsetof(RCAdvHUDResearchComponent_GetKagiStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_GetKagiStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.GetMarkerData
// 0x00C8 (0x00C8 - 0x0000)
struct RCAdvHUDResearchComponent_GetMarkerData final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSucceeded;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDResearchMarkerData            OutMarkerData;                                     // 0x0008(0x00C0)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_GetMarkerData) == 0x000008, "Wrong alignment on RCAdvHUDResearchComponent_GetMarkerData");
static_assert(sizeof(RCAdvHUDResearchComponent_GetMarkerData) == 0x0000C8, "Wrong size on RCAdvHUDResearchComponent_GetMarkerData");
static_assert(offsetof(RCAdvHUDResearchComponent_GetMarkerData, InIndex) == 0x000000, "Member 'RCAdvHUDResearchComponent_GetMarkerData::InIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_GetMarkerData, bOutSucceeded) == 0x000004, "Member 'RCAdvHUDResearchComponent_GetMarkerData::bOutSucceeded' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_GetMarkerData, OutMarkerData) == 0x000008, "Member 'RCAdvHUDResearchComponent_GetMarkerData::OutMarkerData' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.GetMarkerDataNum
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDResearchComponent_GetMarkerDataNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_GetMarkerDataNum) == 0x000004, "Wrong alignment on RCAdvHUDResearchComponent_GetMarkerDataNum");
static_assert(sizeof(RCAdvHUDResearchComponent_GetMarkerDataNum) == 0x000004, "Wrong size on RCAdvHUDResearchComponent_GetMarkerDataNum");
static_assert(offsetof(RCAdvHUDResearchComponent_GetMarkerDataNum, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_GetMarkerDataNum::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.GetResearchModeOldState
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_GetResearchModeOldState final
{
public:
	ERCAdvHUDResearchModeState                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_GetResearchModeOldState) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_GetResearchModeOldState");
static_assert(sizeof(RCAdvHUDResearchComponent_GetResearchModeOldState) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_GetResearchModeOldState");
static_assert(offsetof(RCAdvHUDResearchComponent_GetResearchModeOldState, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_GetResearchModeOldState::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.GetResearchModeState
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_GetResearchModeState final
{
public:
	ERCAdvHUDResearchModeState                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_GetResearchModeState) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_GetResearchModeState");
static_assert(sizeof(RCAdvHUDResearchComponent_GetResearchModeState) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_GetResearchModeState");
static_assert(offsetof(RCAdvHUDResearchComponent_GetResearchModeState, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_GetResearchModeState::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.IsMarkerVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDResearchComponent_IsMarkerVisible final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDResearchComponent_IsMarkerVisible) == 0x000008, "Wrong alignment on RCAdvHUDResearchComponent_IsMarkerVisible");
static_assert(sizeof(RCAdvHUDResearchComponent_IsMarkerVisible) == 0x000010, "Wrong size on RCAdvHUDResearchComponent_IsMarkerVisible");
static_assert(offsetof(RCAdvHUDResearchComponent_IsMarkerVisible, InCheckActor) == 0x000000, "Member 'RCAdvHUDResearchComponent_IsMarkerVisible::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_IsMarkerVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUDResearchComponent_IsMarkerVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.LocationCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_LocationCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_LocationCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_LocationCheckFinished");
static_assert(sizeof(RCAdvHUDResearchComponent_LocationCheckFinished) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_LocationCheckFinished");
static_assert(offsetof(RCAdvHUDResearchComponent_LocationCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_LocationCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.LocationFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_LocationFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_LocationFinish) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_LocationFinish");
static_assert(sizeof(RCAdvHUDResearchComponent_LocationFinish) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_LocationFinish");
static_assert(offsetof(RCAdvHUDResearchComponent_LocationFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_LocationFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.LocationStart
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUDResearchComponent_LocationStart final
{
public:
	class FName                                   InLocationID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLocationTextID;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDResearchComponent_LocationStart) == 0x000004, "Wrong alignment on RCAdvHUDResearchComponent_LocationStart");
static_assert(sizeof(RCAdvHUDResearchComponent_LocationStart) == 0x000014, "Wrong size on RCAdvHUDResearchComponent_LocationStart");
static_assert(offsetof(RCAdvHUDResearchComponent_LocationStart, InLocationID) == 0x000000, "Member 'RCAdvHUDResearchComponent_LocationStart::InLocationID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_LocationStart, InLocationTextID) == 0x000008, "Member 'RCAdvHUDResearchComponent_LocationStart::InLocationTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_LocationStart, ReturnValue) == 0x000010, "Member 'RCAdvHUDResearchComponent_LocationStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.OnChangeInputPlatform
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_OnChangeInputPlatform final
{
public:
	ERCInputPlatform                              InInputPlatform;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_OnChangeInputPlatform) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_OnChangeInputPlatform");
static_assert(sizeof(RCAdvHUDResearchComponent_OnChangeInputPlatform) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_OnChangeInputPlatform");
static_assert(offsetof(RCAdvHUDResearchComponent_OnChangeInputPlatform, InInputPlatform) == 0x000000, "Member 'RCAdvHUDResearchComponent_OnChangeInputPlatform::InInputPlatform' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchDetailAutoSelectCheckActorMoveStart
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchDetailAutoSelectCheckActorMoveStart final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchDetailAutoSelectCheckActorMoveStart) == 0x000008, "Wrong alignment on RCAdvHUDResearchComponent_ResearchDetailAutoSelectCheckActorMoveStart");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchDetailAutoSelectCheckActorMoveStart) == 0x000010, "Wrong size on RCAdvHUDResearchComponent_ResearchDetailAutoSelectCheckActorMoveStart");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailAutoSelectCheckActorMoveStart, InCheckActor) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchDetailAutoSelectCheckActorMoveStart::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailAutoSelectCheckActorMoveStart, ReturnValue) == 0x000008, "Member 'RCAdvHUDResearchComponent_ResearchDetailAutoSelectCheckActorMoveStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchDetailAutoSelectMoveStart
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchDetailAutoSelectMoveStart final
{
public:
	int32                                         InMarkerDataIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchDetailAutoSelectMoveStart) == 0x000004, "Wrong alignment on RCAdvHUDResearchComponent_ResearchDetailAutoSelectMoveStart");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchDetailAutoSelectMoveStart) == 0x000008, "Wrong size on RCAdvHUDResearchComponent_ResearchDetailAutoSelectMoveStart");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailAutoSelectMoveStart, InMarkerDataIndex) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchDetailAutoSelectMoveStart::InMarkerDataIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailAutoSelectMoveStart, ReturnValue) == 0x000004, "Member 'RCAdvHUDResearchComponent_ResearchDetailAutoSelectMoveStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchDetailCheck
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchDetailCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchDetailCheck) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_ResearchDetailCheck");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchDetailCheck) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_ResearchDetailCheck");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailCheck, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchDetailCheck::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchDetailCheckAutoSelectMoveFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchDetailCheckAutoSelectMoveFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchDetailCheckAutoSelectMoveFinished) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_ResearchDetailCheckAutoSelectMoveFinished");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchDetailCheckAutoSelectMoveFinished) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_ResearchDetailCheckAutoSelectMoveFinished");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailCheckAutoSelectMoveFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchDetailCheckAutoSelectMoveFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchDetailFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchDetailFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchDetailFinish) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_ResearchDetailFinish");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchDetailFinish) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_ResearchDetailFinish");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchDetailFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchDetailGetAccessedIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchDetailGetAccessedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchDetailGetAccessedIndex) == 0x000004, "Wrong alignment on RCAdvHUDResearchComponent_ResearchDetailGetAccessedIndex");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchDetailGetAccessedIndex) == 0x000004, "Wrong size on RCAdvHUDResearchComponent_ResearchDetailGetAccessedIndex");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailGetAccessedIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchDetailGetAccessedIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchDetailGetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchDetailGetSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchDetailGetSelectIndex) == 0x000004, "Wrong alignment on RCAdvHUDResearchComponent_ResearchDetailGetSelectIndex");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchDetailGetSelectIndex) == 0x000004, "Wrong size on RCAdvHUDResearchComponent_ResearchDetailGetSelectIndex");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailGetSelectIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchDetailGetSelectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchDetailGetType
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchDetailGetType final
{
public:
	ERCAdvHUDResearchDetailType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchDetailGetType) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_ResearchDetailGetType");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchDetailGetType) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_ResearchDetailGetType");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailGetType, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchDetailGetType::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchDetailStart
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchDetailStart final
{
public:
	struct FRCAdvHUDResearchDetailStartData       InStartData;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	ERCAdvHUDResearchDetailType                   InType;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchDetailStart) == 0x000008, "Wrong alignment on RCAdvHUDResearchComponent_ResearchDetailStart");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchDetailStart) == 0x000028, "Wrong size on RCAdvHUDResearchComponent_ResearchDetailStart");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailStart, InStartData) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchDetailStart::InStartData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailStart, InType) == 0x000020, "Member 'RCAdvHUDResearchComponent_ResearchDetailStart::InType' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchDetailStart, ReturnValue) == 0x000021, "Member 'RCAdvHUDResearchComponent_ResearchDetailStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchFinish) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_ResearchFinish");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchFinish) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_ResearchFinish");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchStart
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDResearchComponent_ResearchStart final
{
public:
	bool                                          bInShowLocation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableFinish;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMiniMap;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchStart) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_ResearchStart");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchStart) == 0x000004, "Wrong size on RCAdvHUDResearchComponent_ResearchStart");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchStart, bInShowLocation) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchStart::bInShowLocation' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchStart, bInEnableFinish) == 0x000001, "Member 'RCAdvHUDResearchComponent_ResearchStart::bInEnableFinish' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchStart, bInMiniMap) == 0x000002, "Member 'RCAdvHUDResearchComponent_ResearchStart::bInMiniMap' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchStart, ReturnValue) == 0x000003, "Member 'RCAdvHUDResearchComponent_ResearchStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.ResearchStartWithQuestionText
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDResearchComponent_ResearchStartWithQuestionText final
{
public:
	class FName                                   InQuestionTextID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableFinish;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMiniMap;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDResearchComponent_ResearchStartWithQuestionText) == 0x000004, "Wrong alignment on RCAdvHUDResearchComponent_ResearchStartWithQuestionText");
static_assert(sizeof(RCAdvHUDResearchComponent_ResearchStartWithQuestionText) == 0x00000C, "Wrong size on RCAdvHUDResearchComponent_ResearchStartWithQuestionText");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchStartWithQuestionText, InQuestionTextID) == 0x000000, "Member 'RCAdvHUDResearchComponent_ResearchStartWithQuestionText::InQuestionTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchStartWithQuestionText, bInEnableFinish) == 0x000008, "Member 'RCAdvHUDResearchComponent_ResearchStartWithQuestionText::bInEnableFinish' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchStartWithQuestionText, bInMiniMap) == 0x000009, "Member 'RCAdvHUDResearchComponent_ResearchStartWithQuestionText::bInMiniMap' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_ResearchStartWithQuestionText, ReturnValue) == 0x00000A, "Member 'RCAdvHUDResearchComponent_ResearchStartWithQuestionText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.SetMarkerData
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUDResearchComponent_SetMarkerData final
{
public:
	class ARCCheckActor*                          InCheckActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInNameDraw;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInResearched;                                     // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDResearchComponent_SetMarkerData) == 0x000008, "Wrong alignment on RCAdvHUDResearchComponent_SetMarkerData");
static_assert(sizeof(RCAdvHUDResearchComponent_SetMarkerData) == 0x000020, "Wrong size on RCAdvHUDResearchComponent_SetMarkerData");
static_assert(offsetof(RCAdvHUDResearchComponent_SetMarkerData, InCheckActor) == 0x000000, "Member 'RCAdvHUDResearchComponent_SetMarkerData::InCheckActor' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_SetMarkerData, InTextID) == 0x000008, "Member 'RCAdvHUDResearchComponent_SetMarkerData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_SetMarkerData, bInDraw) == 0x000010, "Member 'RCAdvHUDResearchComponent_SetMarkerData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_SetMarkerData, bInNameDraw) == 0x000011, "Member 'RCAdvHUDResearchComponent_SetMarkerData::bInNameDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_SetMarkerData, bInResearched) == 0x000012, "Member 'RCAdvHUDResearchComponent_SetMarkerData::bInResearched' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_SetMarkerData, bInAccessable) == 0x000013, "Member 'RCAdvHUDResearchComponent_SetMarkerData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_SetMarkerData, InScale) == 0x000014, "Member 'RCAdvHUDResearchComponent_SetMarkerData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUDResearchComponent_SetMarkerData, ReturnValue) == 0x000018, "Member 'RCAdvHUDResearchComponent_SetMarkerData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.SetMarkerEnable
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_SetMarkerEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_SetMarkerEnable) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_SetMarkerEnable");
static_assert(sizeof(RCAdvHUDResearchComponent_SetMarkerEnable) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_SetMarkerEnable");
static_assert(offsetof(RCAdvHUDResearchComponent_SetMarkerEnable, bInEnable) == 0x000000, "Member 'RCAdvHUDResearchComponent_SetMarkerEnable::bInEnable' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.SpotJudgeTelopCorrectStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_SpotJudgeTelopCorrectStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_SpotJudgeTelopCorrectStart) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_SpotJudgeTelopCorrectStart");
static_assert(sizeof(RCAdvHUDResearchComponent_SpotJudgeTelopCorrectStart) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_SpotJudgeTelopCorrectStart");
static_assert(offsetof(RCAdvHUDResearchComponent_SpotJudgeTelopCorrectStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_SpotJudgeTelopCorrectStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.SpotJudgeTelopMistakeStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_SpotJudgeTelopMistakeStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_SpotJudgeTelopMistakeStart) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_SpotJudgeTelopMistakeStart");
static_assert(sizeof(RCAdvHUDResearchComponent_SpotJudgeTelopMistakeStart) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_SpotJudgeTelopMistakeStart");
static_assert(offsetof(RCAdvHUDResearchComponent_SpotJudgeTelopMistakeStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_SpotJudgeTelopMistakeStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.SpotSelectStartTelopCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_SpotSelectStartTelopCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_SpotSelectStartTelopCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_SpotSelectStartTelopCheckFinished");
static_assert(sizeof(RCAdvHUDResearchComponent_SpotSelectStartTelopCheckFinished) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_SpotSelectStartTelopCheckFinished");
static_assert(offsetof(RCAdvHUDResearchComponent_SpotSelectStartTelopCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_SpotSelectStartTelopCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.SpotSelectStartTelopStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_SpotSelectStartTelopStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_SpotSelectStartTelopStart) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_SpotSelectStartTelopStart");
static_assert(sizeof(RCAdvHUDResearchComponent_SpotSelectStartTelopStart) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_SpotSelectStartTelopStart");
static_assert(offsetof(RCAdvHUDResearchComponent_SpotSelectStartTelopStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_SpotSelectStartTelopStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.StartTelopCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_StartTelopCheckFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_StartTelopCheckFinished) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_StartTelopCheckFinished");
static_assert(sizeof(RCAdvHUDResearchComponent_StartTelopCheckFinished) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_StartTelopCheckFinished");
static_assert(offsetof(RCAdvHUDResearchComponent_StartTelopCheckFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_StartTelopCheckFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDResearchComponent.StartTelopStart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDResearchComponent_StartTelopStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDResearchComponent_StartTelopStart) == 0x000001, "Wrong alignment on RCAdvHUDResearchComponent_StartTelopStart");
static_assert(sizeof(RCAdvHUDResearchComponent_StartTelopStart) == 0x000001, "Wrong size on RCAdvHUDResearchComponent_StartTelopStart");
static_assert(offsetof(RCAdvHUDResearchComponent_StartTelopStart, ReturnValue) == 0x000000, "Member 'RCAdvHUDResearchComponent_StartTelopStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckSelectFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckSelectFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckSelectFinished) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckSelectFinished");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckSelectFinished) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckSelectFinished");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSelectFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckSelectFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckSelectStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckSelectStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckSelectStarted) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckSelectStarted");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckSelectStarted) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckSelectStarted");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSelectStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckSelectStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckSelectWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckSelectWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckSelectWindow) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckSelectWindow");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckSelectWindow) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckSelectWindow");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSelectWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckSelectWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckSequentialTalk
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckSequentialTalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckSequentialTalk) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckSequentialTalk");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckSequentialTalk) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckSequentialTalk");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSequentialTalk, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckSequentialTalk::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckSequentialTalkCloseAtAllEnd
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckSequentialTalkCloseAtAllEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckSequentialTalkCloseAtAllEnd) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckSequentialTalkCloseAtAllEnd");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckSequentialTalkCloseAtAllEnd) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckSequentialTalkCloseAtAllEnd");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSequentialTalkCloseAtAllEnd, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckSequentialTalkCloseAtAllEnd::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckSequentialTalkFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckSequentialTalkFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckSequentialTalkFinished) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckSequentialTalkFinished");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckSequentialTalkFinished) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckSequentialTalkFinished");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSequentialTalkFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckSequentialTalkFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckSequentialTalkFinishedLastText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckSequentialTalkFinishedLastText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckSequentialTalkFinishedLastText) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckSequentialTalkFinishedLastText");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckSequentialTalkFinishedLastText) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckSequentialTalkFinishedLastText");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSequentialTalkFinishedLastText, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckSequentialTalkFinishedLastText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckSequentialTalkFromTalkID
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDTalkComponent_CheckSequentialTalkFromTalkID final
{
public:
	class FName                                   InTalkID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckSequentialTalkFromTalkID) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_CheckSequentialTalkFromTalkID");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckSequentialTalkFromTalkID) == 0x00000C, "Wrong size on RCAdvHUDTalkComponent_CheckSequentialTalkFromTalkID");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSequentialTalkFromTalkID, InTalkID) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckSequentialTalkFromTalkID::InTalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSequentialTalkFromTalkID, ReturnValue) == 0x000008, "Member 'RCAdvHUDTalkComponent_CheckSequentialTalkFromTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckSequentialTalkSuspending
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckSequentialTalkSuspending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckSequentialTalkSuspending) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckSequentialTalkSuspending");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckSequentialTalkSuspending) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckSequentialTalkSuspending");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckSequentialTalkSuspending, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckSequentialTalkSuspending::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckTalkEndText
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckTalkEndText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckTalkEndText) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckTalkEndText");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckTalkEndText) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckTalkEndText");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckTalkEndText, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckTalkEndText::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckTalkFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckTalkFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckTalkFinished) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckTalkFinished");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckTalkFinished) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckTalkFinished");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckTalkFinished, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckTalkFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckTalkSkipVoice
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDTalkComponent_CheckTalkSkipVoice final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckTalkSkipVoice) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_CheckTalkSkipVoice");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckTalkSkipVoice) == 0x00000C, "Wrong size on RCAdvHUDTalkComponent_CheckTalkSkipVoice");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckTalkSkipVoice, InTextID) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckTalkSkipVoice::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckTalkSkipVoice, ReturnValue) == 0x000008, "Member 'RCAdvHUDTalkComponent_CheckTalkSkipVoice::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckTalkStarted
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckTalkStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckTalkStarted) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckTalkStarted");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckTalkStarted) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckTalkStarted");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckTalkStarted, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckTalkStarted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckTalkWindow
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_CheckTalkWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckTalkWindow) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckTalkWindow");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckTalkWindow) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_CheckTalkWindow");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckTalkWindow, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckTalkWindow::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.CheckTalkWindowClosed
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDTalkComponent_CheckTalkWindowClosed final
{
public:
	ERCAdvHUDTalkWindowType                       InWindowType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_CheckTalkWindowClosed) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_CheckTalkWindowClosed");
static_assert(sizeof(RCAdvHUDTalkComponent_CheckTalkWindowClosed) == 0x000002, "Wrong size on RCAdvHUDTalkComponent_CheckTalkWindowClosed");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckTalkWindowClosed, InWindowType) == 0x000000, "Member 'RCAdvHUDTalkComponent_CheckTalkWindowClosed::InWindowType' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_CheckTalkWindowClosed, ReturnValue) == 0x000001, "Member 'RCAdvHUDTalkComponent_CheckTalkWindowClosed::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetBalloonData
// 0x00A0 (0x00A0 - 0x0000)
struct RCAdvHUDTalkComponent_GetBalloonData final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDBalloonData                   OutBalloonData;                                    // 0x0008(0x0090)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_GetBalloonData) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_GetBalloonData");
static_assert(sizeof(RCAdvHUDTalkComponent_GetBalloonData) == 0x0000A0, "Wrong size on RCAdvHUDTalkComponent_GetBalloonData");
static_assert(offsetof(RCAdvHUDTalkComponent_GetBalloonData, InIndex) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetBalloonData::InIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_GetBalloonData, OutBalloonData) == 0x000008, "Member 'RCAdvHUDTalkComponent_GetBalloonData::OutBalloonData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_GetBalloonData, ReturnValue) == 0x000098, "Member 'RCAdvHUDTalkComponent_GetBalloonData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetBalloonDataNum
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDTalkComponent_GetBalloonDataNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_GetBalloonDataNum) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_GetBalloonDataNum");
static_assert(sizeof(RCAdvHUDTalkComponent_GetBalloonDataNum) == 0x000004, "Wrong size on RCAdvHUDTalkComponent_GetBalloonDataNum");
static_assert(offsetof(RCAdvHUDTalkComponent_GetBalloonDataNum, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetBalloonDataNum::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDTalkComponent_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_GetSelectedIndex) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_GetSelectedIndex");
static_assert(sizeof(RCAdvHUDTalkComponent_GetSelectedIndex) == 0x000004, "Wrong size on RCAdvHUDTalkComponent_GetSelectedIndex");
static_assert(offsetof(RCAdvHUDTalkComponent_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDTalkComponent_GetSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_GetSelectIndex) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_GetSelectIndex");
static_assert(sizeof(RCAdvHUDTalkComponent_GetSelectIndex) == 0x000004, "Wrong size on RCAdvHUDTalkComponent_GetSelectIndex");
static_assert(offsetof(RCAdvHUDTalkComponent_GetSelectIndex, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetSelectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetSelectWindowState
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_GetSelectWindowState final
{
public:
	ERCAdvHUDWidgetState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_GetSelectWindowState) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_GetSelectWindowState");
static_assert(sizeof(RCAdvHUDTalkComponent_GetSelectWindowState) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_GetSelectWindowState");
static_assert(offsetof(RCAdvHUDTalkComponent_GetSelectWindowState, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetSelectWindowState::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetSequentialTalkVoiceCharacterID
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDTalkComponent_GetSequentialTalkVoiceCharacterID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_GetSequentialTalkVoiceCharacterID) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_GetSequentialTalkVoiceCharacterID");
static_assert(sizeof(RCAdvHUDTalkComponent_GetSequentialTalkVoiceCharacterID) == 0x000004, "Wrong size on RCAdvHUDTalkComponent_GetSequentialTalkVoiceCharacterID");
static_assert(offsetof(RCAdvHUDTalkComponent_GetSequentialTalkVoiceCharacterID, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetSequentialTalkVoiceCharacterID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetTalkIconData
// 0x0088 (0x0088 - 0x0000)
struct RCAdvHUDTalkComponent_GetTalkIconData final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDTalkIconData                  OutTalkIconData;                                   // 0x0008(0x0078)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_GetTalkIconData) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_GetTalkIconData");
static_assert(sizeof(RCAdvHUDTalkComponent_GetTalkIconData) == 0x000088, "Wrong size on RCAdvHUDTalkComponent_GetTalkIconData");
static_assert(offsetof(RCAdvHUDTalkComponent_GetTalkIconData, InIndex) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetTalkIconData::InIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_GetTalkIconData, OutTalkIconData) == 0x000008, "Member 'RCAdvHUDTalkComponent_GetTalkIconData::OutTalkIconData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_GetTalkIconData, ReturnValue) == 0x000080, "Member 'RCAdvHUDTalkComponent_GetTalkIconData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetTalkIconDataNum
// 0x0004 (0x0004 - 0x0000)
struct RCAdvHUDTalkComponent_GetTalkIconDataNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_GetTalkIconDataNum) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_GetTalkIconDataNum");
static_assert(sizeof(RCAdvHUDTalkComponent_GetTalkIconDataNum) == 0x000004, "Wrong size on RCAdvHUDTalkComponent_GetTalkIconDataNum");
static_assert(offsetof(RCAdvHUDTalkComponent_GetTalkIconDataNum, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetTalkIconDataNum::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetUsingTalkWidgetOldState
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_GetUsingTalkWidgetOldState final
{
public:
	ERCAdvHUDWidgetState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_GetUsingTalkWidgetOldState) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_GetUsingTalkWidgetOldState");
static_assert(sizeof(RCAdvHUDTalkComponent_GetUsingTalkWidgetOldState) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_GetUsingTalkWidgetOldState");
static_assert(offsetof(RCAdvHUDTalkComponent_GetUsingTalkWidgetOldState, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetUsingTalkWidgetOldState::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.GetUsingTalkWidgetState
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_GetUsingTalkWidgetState final
{
public:
	ERCAdvHUDWidgetState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_GetUsingTalkWidgetState) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_GetUsingTalkWidgetState");
static_assert(sizeof(RCAdvHUDTalkComponent_GetUsingTalkWidgetState) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_GetUsingTalkWidgetState");
static_assert(offsetof(RCAdvHUDTalkComponent_GetUsingTalkWidgetState, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_GetUsingTalkWidgetState::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.IsBalloonVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDTalkComponent_IsBalloonVisible final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_IsBalloonVisible) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_IsBalloonVisible");
static_assert(sizeof(RCAdvHUDTalkComponent_IsBalloonVisible) == 0x000010, "Wrong size on RCAdvHUDTalkComponent_IsBalloonVisible");
static_assert(offsetof(RCAdvHUDTalkComponent_IsBalloonVisible, InPawn) == 0x000000, "Member 'RCAdvHUDTalkComponent_IsBalloonVisible::InPawn' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_IsBalloonVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUDTalkComponent_IsBalloonVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.IsTalkIconVisible
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDTalkComponent_IsTalkIconVisible final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_IsTalkIconVisible) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_IsTalkIconVisible");
static_assert(sizeof(RCAdvHUDTalkComponent_IsTalkIconVisible) == 0x000010, "Wrong size on RCAdvHUDTalkComponent_IsTalkIconVisible");
static_assert(offsetof(RCAdvHUDTalkComponent_IsTalkIconVisible, InPawn) == 0x000000, "Member 'RCAdvHUDTalkComponent_IsTalkIconVisible::InPawn' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_IsTalkIconVisible, ReturnValue) == 0x000008, "Member 'RCAdvHUDTalkComponent_IsTalkIconVisible::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SelectFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_SelectFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_SelectFinish) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_SelectFinish");
static_assert(sizeof(RCAdvHUDTalkComponent_SelectFinish) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_SelectFinish");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_SelectFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SelectSetData
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDTalkComponent_SelectSetData final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbCheckMark;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SelectSetData) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_SelectSetData");
static_assert(sizeof(RCAdvHUDTalkComponent_SelectSetData) == 0x000010, "Wrong size on RCAdvHUDTalkComponent_SelectSetData");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectSetData, InIndex) == 0x000000, "Member 'RCAdvHUDTalkComponent_SelectSetData::InIndex' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectSetData, InTextID) == 0x000004, "Member 'RCAdvHUDTalkComponent_SelectSetData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectSetData, InbCheckMark) == 0x00000C, "Member 'RCAdvHUDTalkComponent_SelectSetData::InbCheckMark' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectSetData, ReturnValue) == 0x00000D, "Member 'RCAdvHUDTalkComponent_SelectSetData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SelectStart
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDTalkComponent_SelectStart final
{
public:
	int32                                         InSelectNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InQuestionTextID;                                  // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SelectStart) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_SelectStart");
static_assert(sizeof(RCAdvHUDTalkComponent_SelectStart) == 0x000010, "Wrong size on RCAdvHUDTalkComponent_SelectStart");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectStart, InSelectNum) == 0x000000, "Member 'RCAdvHUDTalkComponent_SelectStart::InSelectNum' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectStart, InQuestionTextID) == 0x000004, "Member 'RCAdvHUDTalkComponent_SelectStart::InQuestionTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectStart, ReturnValue) == 0x00000C, "Member 'RCAdvHUDTalkComponent_SelectStart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SelectStartWithDataArray
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUDTalkComponent_SelectStartWithDataArray final
{
public:
	TArray<struct FRCReHUDSelectData>             InSelectDataArray;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InQuestionTextID;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SelectStartWithDataArray) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_SelectStartWithDataArray");
static_assert(sizeof(RCAdvHUDTalkComponent_SelectStartWithDataArray) == 0x000020, "Wrong size on RCAdvHUDTalkComponent_SelectStartWithDataArray");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectStartWithDataArray, InSelectDataArray) == 0x000000, "Member 'RCAdvHUDTalkComponent_SelectStartWithDataArray::InSelectDataArray' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectStartWithDataArray, InQuestionTextID) == 0x000010, "Member 'RCAdvHUDTalkComponent_SelectStartWithDataArray::InQuestionTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SelectStartWithDataArray, ReturnValue) == 0x000018, "Member 'RCAdvHUDTalkComponent_SelectStartWithDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SequentialTalkFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_SequentialTalkFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_SequentialTalkFinish) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_SequentialTalkFinish");
static_assert(sizeof(RCAdvHUDTalkComponent_SequentialTalkFinish) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_SequentialTalkFinish");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_SequentialTalkFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SequentialTalkRequestSuspend
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_SequentialTalkRequestSuspend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_SequentialTalkRequestSuspend) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_SequentialTalkRequestSuspend");
static_assert(sizeof(RCAdvHUDTalkComponent_SequentialTalkRequestSuspend) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_SequentialTalkRequestSuspend");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkRequestSuspend, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_SequentialTalkRequestSuspend::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SequentialTalkRestart
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_SequentialTalkRestart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_SequentialTalkRestart) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_SequentialTalkRestart");
static_assert(sizeof(RCAdvHUDTalkComponent_SequentialTalkRestart) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_SequentialTalkRestart");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkRestart, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_SequentialTalkRestart::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SequentialTalkResume
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_SequentialTalkResume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_SequentialTalkResume) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_SequentialTalkResume");
static_assert(sizeof(RCAdvHUDTalkComponent_SequentialTalkResume) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_SequentialTalkResume");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkResume, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_SequentialTalkResume::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SequentialTalkStart2
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUDTalkComponent_SequentialTalkStart2 final
{
public:
	class FName                                   InTalkID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCTalkData                            InTalkData;                                        // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bInForceAutoPlay;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SequentialTalkStart2) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_SequentialTalkStart2");
static_assert(sizeof(RCAdvHUDTalkComponent_SequentialTalkStart2) == 0x000028, "Wrong size on RCAdvHUDTalkComponent_SequentialTalkStart2");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStart2, InTalkID) == 0x000000, "Member 'RCAdvHUDTalkComponent_SequentialTalkStart2::InTalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStart2, InTalkData) == 0x000008, "Member 'RCAdvHUDTalkComponent_SequentialTalkStart2::InTalkData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStart2, bInForceAutoPlay) == 0x000020, "Member 'RCAdvHUDTalkComponent_SequentialTalkStart2::bInForceAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStart2, ReturnValue) == 0x000021, "Member 'RCAdvHUDTalkComponent_SequentialTalkStart2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SequentialTalkStartFromData2
// 0x0020 (0x0020 - 0x0000)
struct RCAdvHUDTalkComponent_SequentialTalkStartFromData2 final
{
public:
	struct FRCTalkData                            InTalkData;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bInForceAutoPlay;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SequentialTalkStartFromData2) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_SequentialTalkStartFromData2");
static_assert(sizeof(RCAdvHUDTalkComponent_SequentialTalkStartFromData2) == 0x000020, "Wrong size on RCAdvHUDTalkComponent_SequentialTalkStartFromData2");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromData2, InTalkData) == 0x000000, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromData2::InTalkData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromData2, bInForceAutoPlay) == 0x000018, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromData2::bInForceAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromData2, ReturnValue) == 0x000019, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromData2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SequentialTalkStartFromDataTable
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable final
{
public:
	class UDataTable*                             InTable;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTalkID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceAutoPlay;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable");
static_assert(sizeof(RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable) == 0x000018, "Wrong size on RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable, InTable) == 0x000000, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable::InTable' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable, InTalkID) == 0x000008, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable::InTalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable, bInForceAutoPlay) == 0x000010, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable::bInForceAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable, ReturnValue) == 0x000011, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromDataTable::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SequentialTalkStartFromTalkID
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID final
{
public:
	class FName                                   InTalkID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceAutoPlay;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID");
static_assert(sizeof(RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID) == 0x00000C, "Wrong size on RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID, InTalkID) == 0x000000, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID::InTalkID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID, bInForceAutoPlay) == 0x000008, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID::bInForceAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID, ReturnValue) == 0x000009, "Member 'RCAdvHUDTalkComponent_SequentialTalkStartFromTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SetBalloonData
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDTalkComponent_SetBalloonData final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCBaloonFrame                                InBalloonFrameType;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCBaloonType                                 InBalloonContentType;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InTextID;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInBalloonDraw;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInTextDraw;                                       // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SetBalloonData) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_SetBalloonData");
static_assert(sizeof(RCAdvHUDTalkComponent_SetBalloonData) == 0x000018, "Wrong size on RCAdvHUDTalkComponent_SetBalloonData");
static_assert(offsetof(RCAdvHUDTalkComponent_SetBalloonData, InPawn) == 0x000000, "Member 'RCAdvHUDTalkComponent_SetBalloonData::InPawn' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetBalloonData, InBalloonFrameType) == 0x000008, "Member 'RCAdvHUDTalkComponent_SetBalloonData::InBalloonFrameType' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetBalloonData, InBalloonContentType) == 0x000009, "Member 'RCAdvHUDTalkComponent_SetBalloonData::InBalloonContentType' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetBalloonData, InTextID) == 0x00000C, "Member 'RCAdvHUDTalkComponent_SetBalloonData::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetBalloonData, bInBalloonDraw) == 0x000014, "Member 'RCAdvHUDTalkComponent_SetBalloonData::bInBalloonDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetBalloonData, bInTextDraw) == 0x000015, "Member 'RCAdvHUDTalkComponent_SetBalloonData::bInTextDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetBalloonData, ReturnValue) == 0x000016, "Member 'RCAdvHUDTalkComponent_SetBalloonData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SetShinigamiActor
// 0x0008 (0x0008 - 0x0000)
struct RCAdvHUDTalkComponent_SetShinigamiActor final
{
public:
	class ARCCharacterRender*                     InShinigamiActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_SetShinigamiActor) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_SetShinigamiActor");
static_assert(sizeof(RCAdvHUDTalkComponent_SetShinigamiActor) == 0x000008, "Wrong size on RCAdvHUDTalkComponent_SetShinigamiActor");
static_assert(offsetof(RCAdvHUDTalkComponent_SetShinigamiActor, InShinigamiActor) == 0x000000, "Member 'RCAdvHUDTalkComponent_SetShinigamiActor::InShinigamiActor' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SetTalkIconData
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDTalkComponent_SetTalkIconData final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDraw;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAccessable;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSubquest;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScale;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInGoal;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SetTalkIconData) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_SetTalkIconData");
static_assert(sizeof(RCAdvHUDTalkComponent_SetTalkIconData) == 0x000018, "Wrong size on RCAdvHUDTalkComponent_SetTalkIconData");
static_assert(offsetof(RCAdvHUDTalkComponent_SetTalkIconData, InPawn) == 0x000000, "Member 'RCAdvHUDTalkComponent_SetTalkIconData::InPawn' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetTalkIconData, bInDraw) == 0x000008, "Member 'RCAdvHUDTalkComponent_SetTalkIconData::bInDraw' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetTalkIconData, bInAccessable) == 0x000009, "Member 'RCAdvHUDTalkComponent_SetTalkIconData::bInAccessable' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetTalkIconData, bInSubquest) == 0x00000A, "Member 'RCAdvHUDTalkComponent_SetTalkIconData::bInSubquest' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetTalkIconData, InScale) == 0x00000C, "Member 'RCAdvHUDTalkComponent_SetTalkIconData::InScale' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetTalkIconData, bInGoal) == 0x000010, "Member 'RCAdvHUDTalkComponent_SetTalkIconData::bInGoal' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SetTalkIconData, ReturnValue) == 0x000011, "Member 'RCAdvHUDTalkComponent_SetTalkIconData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SpSelect_CheckLoadWBPCompleted
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDTalkComponent_SpSelect_CheckLoadWBPCompleted final
{
public:
	ERCAdvHUDSpSelectType                         SpSelectType_0;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_SpSelect_CheckLoadWBPCompleted) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_SpSelect_CheckLoadWBPCompleted");
static_assert(sizeof(RCAdvHUDTalkComponent_SpSelect_CheckLoadWBPCompleted) == 0x000002, "Wrong size on RCAdvHUDTalkComponent_SpSelect_CheckLoadWBPCompleted");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_CheckLoadWBPCompleted, SpSelectType_0) == 0x000000, "Member 'RCAdvHUDTalkComponent_SpSelect_CheckLoadWBPCompleted::SpSelectType_0' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_CheckLoadWBPCompleted, ReturnValue) == 0x000001, "Member 'RCAdvHUDTalkComponent_SpSelect_CheckLoadWBPCompleted::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SpSelect_ReleaseWBP
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDTalkComponent_SpSelect_ReleaseWBP final
{
public:
	ERCAdvHUDSpSelectType                         SpSelectType_0;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_SpSelect_ReleaseWBP) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_SpSelect_ReleaseWBP");
static_assert(sizeof(RCAdvHUDTalkComponent_SpSelect_ReleaseWBP) == 0x000002, "Wrong size on RCAdvHUDTalkComponent_SpSelect_ReleaseWBP");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_ReleaseWBP, SpSelectType_0) == 0x000000, "Member 'RCAdvHUDTalkComponent_SpSelect_ReleaseWBP::SpSelectType_0' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_ReleaseWBP, ReturnValue) == 0x000001, "Member 'RCAdvHUDTalkComponent_SpSelect_ReleaseWBP::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SpSelect_StartLoadWBP
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDTalkComponent_SpSelect_StartLoadWBP final
{
public:
	ERCAdvHUDSpSelectType                         SpSelectType_0;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_SpSelect_StartLoadWBP) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_SpSelect_StartLoadWBP");
static_assert(sizeof(RCAdvHUDTalkComponent_SpSelect_StartLoadWBP) == 0x000002, "Wrong size on RCAdvHUDTalkComponent_SpSelect_StartLoadWBP");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_StartLoadWBP, SpSelectType_0) == 0x000000, "Member 'RCAdvHUDTalkComponent_SpSelect_StartLoadWBP::SpSelectType_0' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_StartLoadWBP, ReturnValue) == 0x000001, "Member 'RCAdvHUDTalkComponent_SpSelect_StartLoadWBP::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.SpSelect_StartWithDataArray
// 0x0028 (0x0028 - 0x0000)
struct RCAdvHUDTalkComponent_SpSelect_StartWithDataArray final
{
public:
	ERCAdvHUDSpSelectType                         SpSelectType_0;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCReHUDSelectData>             SelectDataArray_0;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   QuestionTextID;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_SpSelect_StartWithDataArray) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_SpSelect_StartWithDataArray");
static_assert(sizeof(RCAdvHUDTalkComponent_SpSelect_StartWithDataArray) == 0x000028, "Wrong size on RCAdvHUDTalkComponent_SpSelect_StartWithDataArray");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_StartWithDataArray, SpSelectType_0) == 0x000000, "Member 'RCAdvHUDTalkComponent_SpSelect_StartWithDataArray::SpSelectType_0' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_StartWithDataArray, SelectDataArray_0) == 0x000008, "Member 'RCAdvHUDTalkComponent_SpSelect_StartWithDataArray::SelectDataArray_0' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_StartWithDataArray, QuestionTextID) == 0x000018, "Member 'RCAdvHUDTalkComponent_SpSelect_StartWithDataArray::QuestionTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_SpSelect_StartWithDataArray, ReturnValue) == 0x000020, "Member 'RCAdvHUDTalkComponent_SpSelect_StartWithDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkFinish
// 0x0001 (0x0001 - 0x0000)
struct RCAdvHUDTalkComponent_TalkFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkFinish) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_TalkFinish");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkFinish) == 0x000001, "Wrong size on RCAdvHUDTalkComponent_TalkFinish");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkFinish, ReturnValue) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkFinish::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkLoadCharacterData
// 0x0014 (0x0014 - 0x0000)
struct RCAdvHUDTalkComponent_TalkLoadCharacterData final
{
public:
	int32                                         InCharacterNameID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterNameSubID;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFaceID;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkLoadCharacterData) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_TalkLoadCharacterData");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkLoadCharacterData) == 0x000014, "Wrong size on RCAdvHUDTalkComponent_TalkLoadCharacterData");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData, InCharacterNameID) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData::InCharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData, InCharacterNameSubID) == 0x000004, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData::InCharacterNameSubID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData, InCharacterFaceID) == 0x000008, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData, InCharacterFacialID) == 0x00000C, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData, ReturnValue) == 0x000010, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkLoadCharacterData2
// 0x0038 (0x0038 - 0x0000)
struct RCAdvHUDTalkComponent_TalkLoadCharacterData2 final
{
public:
	int32                                         InCharacterNameID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InCharacterNameSubIDs;                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCharacterFaceID;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InCharacterFacialIDs;                              // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkLoadCharacterData2) == 0x000008, "Wrong alignment on RCAdvHUDTalkComponent_TalkLoadCharacterData2");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkLoadCharacterData2) == 0x000038, "Wrong size on RCAdvHUDTalkComponent_TalkLoadCharacterData2");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData2, InCharacterNameID) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData2::InCharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData2, InCharacterNameSubIDs) == 0x000008, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData2::InCharacterNameSubIDs' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData2, InCharacterFaceID) == 0x000018, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData2::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData2, InCharacterFacialIDs) == 0x000020, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData2::InCharacterFacialIDs' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadCharacterData2, ReturnValue) == 0x000030, "Member 'RCAdvHUDTalkComponent_TalkLoadCharacterData2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkLoadFaceData
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDTalkComponent_TalkLoadFaceData final
{
public:
	int32                                         InCharacterFaceID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkLoadFaceData) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_TalkLoadFaceData");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkLoadFaceData) == 0x00000C, "Wrong size on RCAdvHUDTalkComponent_TalkLoadFaceData");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadFaceData, InCharacterFaceID) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkLoadFaceData::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadFaceData, InCharacterFacialID) == 0x000004, "Member 'RCAdvHUDTalkComponent_TalkLoadFaceData::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadFaceData, ReturnValue) == 0x000008, "Member 'RCAdvHUDTalkComponent_TalkLoadFaceData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkLoadNameplateData
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDTalkComponent_TalkLoadNameplateData final
{
public:
	int32                                         InCharacterNameID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterNameSubID;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkLoadNameplateData) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_TalkLoadNameplateData");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkLoadNameplateData) == 0x00000C, "Wrong size on RCAdvHUDTalkComponent_TalkLoadNameplateData");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadNameplateData, InCharacterNameID) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkLoadNameplateData::InCharacterNameID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadNameplateData, InCharacterNameSubID) == 0x000004, "Member 'RCAdvHUDTalkComponent_TalkLoadNameplateData::InCharacterNameSubID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkLoadNameplateData, ReturnValue) == 0x000008, "Member 'RCAdvHUDTalkComponent_TalkLoadNameplateData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkSetAuto
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDTalkComponent_TalkSetAuto final
{
public:
	bool                                          bInAutoPlay;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkSetAuto) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_TalkSetAuto");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkSetAuto) == 0x000002, "Wrong size on RCAdvHUDTalkComponent_TalkSetAuto");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetAuto, bInAutoPlay) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkSetAuto::bInAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetAuto, ReturnValue) == 0x000001, "Member 'RCAdvHUDTalkComponent_TalkSetAuto::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkSetForceTextSpeedSettings
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings final
{
public:
	bool                                          bInIsForceTextSpeed;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InForceTextSpeed;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings) == 0x00000C, "Wrong size on RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings, bInIsForceTextSpeed) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings::bInIsForceTextSpeed' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings, InForceTextSpeed) == 0x000004, "Member 'RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings::InForceTextSpeed' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings, ReturnValue) == 0x000008, "Member 'RCAdvHUDTalkComponent_TalkSetForceTextSpeedSettings::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkSetGradationFilter
// 0x000C (0x000C - 0x0000)
struct RCAdvHUDTalkComponent_TalkSetGradationFilter final
{
public:
	class FName                                   InFilterID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkSetGradationFilter) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_TalkSetGradationFilter");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkSetGradationFilter) == 0x00000C, "Wrong size on RCAdvHUDTalkComponent_TalkSetGradationFilter");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetGradationFilter, InFilterID) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkSetGradationFilter::InFilterID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetGradationFilter, ReturnValue) == 0x000008, "Member 'RCAdvHUDTalkComponent_TalkSetGradationFilter::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkSetText2
// 0x002C (0x002C - 0x0000)
struct RCAdvHUDTalkComponent_TalkSetText2 final
{
public:
	int32                                         InCharacterFaceID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacter3DID;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCharacter3DFacialID;                             // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVoiceID;                                         // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEndText;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkSetText2) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_TalkSetText2");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkSetText2) == 0x00002C, "Wrong size on RCAdvHUDTalkComponent_TalkSetText2");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetText2, InCharacterFaceID) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkSetText2::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetText2, InCharacterFacialID) == 0x000004, "Member 'RCAdvHUDTalkComponent_TalkSetText2::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetText2, InTextID) == 0x000008, "Member 'RCAdvHUDTalkComponent_TalkSetText2::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetText2, InCharacter3DID) == 0x000010, "Member 'RCAdvHUDTalkComponent_TalkSetText2::InCharacter3DID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetText2, InCharacter3DFacialID) == 0x000014, "Member 'RCAdvHUDTalkComponent_TalkSetText2::InCharacter3DFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetText2, InVoiceID) == 0x00001C, "Member 'RCAdvHUDTalkComponent_TalkSetText2::InVoiceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetText2, InDelayAtEndText) == 0x000024, "Member 'RCAdvHUDTalkComponent_TalkSetText2::InDelayAtEndText' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetText2, ReturnValue) == 0x000028, "Member 'RCAdvHUDTalkComponent_TalkSetText2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkSetTextData
// 0x0034 (0x0034 - 0x0000)
struct RCAdvHUDTalkComponent_TalkSetTextData final
{
public:
	struct FRCAdvHUDTalkTextData                  InTextData;                                        // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkSetTextData) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_TalkSetTextData");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkSetTextData) == 0x000034, "Wrong size on RCAdvHUDTalkComponent_TalkSetTextData");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetTextData, InTextData) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkSetTextData::InTextData' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetTextData, ReturnValue) == 0x000030, "Member 'RCAdvHUDTalkComponent_TalkSetTextData::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkSetTextSimple
// 0x0010 (0x0010 - 0x0000)
struct RCAdvHUDTalkComponent_TalkSetTextSimple final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEndText;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkSetTextSimple) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_TalkSetTextSimple");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkSetTextSimple) == 0x000010, "Wrong size on RCAdvHUDTalkComponent_TalkSetTextSimple");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetTextSimple, InTextID) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkSetTextSimple::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetTextSimple, InDelayAtEndText) == 0x000008, "Member 'RCAdvHUDTalkComponent_TalkSetTextSimple::InDelayAtEndText' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkSetTextSimple, ReturnValue) == 0x00000C, "Member 'RCAdvHUDTalkComponent_TalkSetTextSimple::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkStart2
// 0x0018 (0x0018 - 0x0000)
struct RCAdvHUDTalkComponent_TalkStart2 final
{
public:
	ERCAdvHUDTalkWindowType                       InWindowType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InTextID;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFaceID;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoPlay;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkStart2) == 0x000004, "Wrong alignment on RCAdvHUDTalkComponent_TalkStart2");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkStart2) == 0x000018, "Wrong size on RCAdvHUDTalkComponent_TalkStart2");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkStart2, InWindowType) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkStart2::InWindowType' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkStart2, InTextID) == 0x000004, "Member 'RCAdvHUDTalkComponent_TalkStart2::InTextID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkStart2, InCharacterFaceID) == 0x00000C, "Member 'RCAdvHUDTalkComponent_TalkStart2::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkStart2, InCharacterFacialID) == 0x000010, "Member 'RCAdvHUDTalkComponent_TalkStart2::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkStart2, bInAutoPlay) == 0x000014, "Member 'RCAdvHUDTalkComponent_TalkStart2::bInAutoPlay' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkStart2, ReturnValue) == 0x000015, "Member 'RCAdvHUDTalkComponent_TalkStart2::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkStartSimple
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDTalkComponent_TalkStartSimple final
{
public:
	ERCAdvHUDTalkWindowType                       InWindowType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkStartSimple) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_TalkStartSimple");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkStartSimple) == 0x000002, "Wrong size on RCAdvHUDTalkComponent_TalkStartSimple");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkStartSimple, InWindowType) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkStartSimple::InWindowType' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkStartSimple, ReturnValue) == 0x000001, "Member 'RCAdvHUDTalkComponent_TalkStartSimple::ReturnValue' has a wrong offset!");

// Function RC.RCAdvHUDTalkComponent.TalkWindowClose
// 0x0002 (0x0002 - 0x0000)
struct RCAdvHUDTalkComponent_TalkWindowClose final
{
public:
	ERCAdvHUDTalkWindowType                       InWindowType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAdvHUDTalkComponent_TalkWindowClose) == 0x000001, "Wrong alignment on RCAdvHUDTalkComponent_TalkWindowClose");
static_assert(sizeof(RCAdvHUDTalkComponent_TalkWindowClose) == 0x000002, "Wrong size on RCAdvHUDTalkComponent_TalkWindowClose");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkWindowClose, InWindowType) == 0x000000, "Member 'RCAdvHUDTalkComponent_TalkWindowClose::InWindowType' has a wrong offset!");
static_assert(offsetof(RCAdvHUDTalkComponent_TalkWindowClose, ReturnValue) == 0x000001, "Member 'RCAdvHUDTalkComponent_TalkWindowClose::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleAnswerBase.SetAnswer
// 0x0010 (0x0010 - 0x0000)
struct RCNzPuzzleAnswerBase_SetAnswer final
{
public:
	class FName                                   wordText;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             wordTexture;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleAnswerBase_SetAnswer) == 0x000008, "Wrong alignment on RCNzPuzzleAnswerBase_SetAnswer");
static_assert(sizeof(RCNzPuzzleAnswerBase_SetAnswer) == 0x000010, "Wrong size on RCNzPuzzleAnswerBase_SetAnswer");
static_assert(offsetof(RCNzPuzzleAnswerBase_SetAnswer, wordText) == 0x000000, "Member 'RCNzPuzzleAnswerBase_SetAnswer::wordText' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleAnswerBase_SetAnswer, wordTexture) == 0x000008, "Member 'RCNzPuzzleAnswerBase_SetAnswer::wordTexture' has a wrong offset!");

// Function RC.RCUiMenuAreaMapImage.OnFinishGenericWindow
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuAreaMapImage_OnFinishGenericWindow final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuAreaMapImage_OnFinishGenericWindow) == 0x000001, "Wrong alignment on RCUiMenuAreaMapImage_OnFinishGenericWindow");
static_assert(sizeof(RCUiMenuAreaMapImage_OnFinishGenericWindow) == 0x000001, "Wrong size on RCUiMenuAreaMapImage_OnFinishGenericWindow");
static_assert(offsetof(RCUiMenuAreaMapImage_OnFinishGenericWindow, bResult) == 0x000000, "Member 'RCUiMenuAreaMapImage_OnFinishGenericWindow::bResult' has a wrong offset!");

// Function RC.RCNzUiChousaFinish.GetNzChousaFinishPriority
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiChousaFinish_GetNzChousaFinishPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiChousaFinish_GetNzChousaFinishPriority) == 0x000004, "Wrong alignment on RCNzUiChousaFinish_GetNzChousaFinishPriority");
static_assert(sizeof(RCNzUiChousaFinish_GetNzChousaFinishPriority) == 0x000004, "Wrong size on RCNzUiChousaFinish_GetNzChousaFinishPriority");
static_assert(offsetof(RCNzUiChousaFinish_GetNzChousaFinishPriority, ReturnValue) == 0x000000, "Member 'RCNzUiChousaFinish_GetNzChousaFinishPriority::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiChousaFinish.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiChousaFinish_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiChousaFinish_IsFinished) == 0x000001, "Wrong alignment on RCNzUiChousaFinish_IsFinished");
static_assert(sizeof(RCNzUiChousaFinish_IsFinished) == 0x000001, "Wrong size on RCNzUiChousaFinish_IsFinished");
static_assert(offsetof(RCNzUiChousaFinish_IsFinished, ReturnValue) == 0x000000, "Member 'RCNzUiChousaFinish_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCGameModeBase.SetNextLevelName
// 0x0008 (0x0008 - 0x0000)
struct RCGameModeBase_SetNextLevelName final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameModeBase_SetNextLevelName) == 0x000004, "Wrong alignment on RCGameModeBase_SetNextLevelName");
static_assert(sizeof(RCGameModeBase_SetNextLevelName) == 0x000008, "Wrong size on RCGameModeBase_SetNextLevelName");
static_assert(offsetof(RCGameModeBase_SetNextLevelName, LevelName) == 0x000000, "Member 'RCGameModeBase_SetNextLevelName::LevelName' has a wrong offset!");

// Function RC.RCAmatanHUD.Ask
// 0x0038 (0x0038 - 0x0000)
struct RCAmatanHUD_Ask final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FRCReHUDSelectData>             InSelectDataArray;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InQuestionTextID;                                  // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanHUD_Ask) == 0x000008, "Wrong alignment on RCAmatanHUD_Ask");
static_assert(sizeof(RCAmatanHUD_Ask) == 0x000038, "Wrong size on RCAmatanHUD_Ask");
static_assert(offsetof(RCAmatanHUD_Ask, WorldContextObject) == 0x000000, "Member 'RCAmatanHUD_Ask::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCAmatanHUD_Ask, LatentInfo) == 0x000008, "Member 'RCAmatanHUD_Ask::LatentInfo' has a wrong offset!");
static_assert(offsetof(RCAmatanHUD_Ask, InSelectDataArray) == 0x000020, "Member 'RCAmatanHUD_Ask::InSelectDataArray' has a wrong offset!");
static_assert(offsetof(RCAmatanHUD_Ask, InQuestionTextID) == 0x000030, "Member 'RCAmatanHUD_Ask::InQuestionTextID' has a wrong offset!");

// Function RC.RCAmatanHUD.CheckSelectFinished
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanHUD_CheckSelectFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanHUD_CheckSelectFinished) == 0x000001, "Wrong alignment on RCAmatanHUD_CheckSelectFinished");
static_assert(sizeof(RCAmatanHUD_CheckSelectFinished) == 0x000001, "Wrong size on RCAmatanHUD_CheckSelectFinished");
static_assert(offsetof(RCAmatanHUD_CheckSelectFinished, ReturnValue) == 0x000000, "Member 'RCAmatanHUD_CheckSelectFinished::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanHUD.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct RCAmatanHUD_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanHUD_GetSelectedIndex) == 0x000004, "Wrong alignment on RCAmatanHUD_GetSelectedIndex");
static_assert(sizeof(RCAmatanHUD_GetSelectedIndex) == 0x000004, "Wrong size on RCAmatanHUD_GetSelectedIndex");
static_assert(offsetof(RCAmatanHUD_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'RCAmatanHUD_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanHUD.SelectStartWithDataArray
// 0x0020 (0x0020 - 0x0000)
struct RCAmatanHUD_SelectStartWithDataArray final
{
public:
	TArray<struct FRCReHUDSelectData>             InSelectDataArray;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InQuestionTextID;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAmatanHUD_SelectStartWithDataArray) == 0x000008, "Wrong alignment on RCAmatanHUD_SelectStartWithDataArray");
static_assert(sizeof(RCAmatanHUD_SelectStartWithDataArray) == 0x000020, "Wrong size on RCAmatanHUD_SelectStartWithDataArray");
static_assert(offsetof(RCAmatanHUD_SelectStartWithDataArray, InSelectDataArray) == 0x000000, "Member 'RCAmatanHUD_SelectStartWithDataArray::InSelectDataArray' has a wrong offset!");
static_assert(offsetof(RCAmatanHUD_SelectStartWithDataArray, InQuestionTextID) == 0x000010, "Member 'RCAmatanHUD_SelectStartWithDataArray::InQuestionTextID' has a wrong offset!");
static_assert(offsetof(RCAmatanHUD_SelectStartWithDataArray, ReturnValue) == 0x000018, "Member 'RCAmatanHUD_SelectStartWithDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanHUD.SetRobotComponentVisibility
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanHUD_SetRobotComponentVisibility final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanHUD_SetRobotComponentVisibility) == 0x000001, "Wrong alignment on RCAmatanHUD_SetRobotComponentVisibility");
static_assert(sizeof(RCAmatanHUD_SetRobotComponentVisibility) == 0x000001, "Wrong size on RCAmatanHUD_SetRobotComponentVisibility");
static_assert(offsetof(RCAmatanHUD_SetRobotComponentVisibility, Show) == 0x000000, "Member 'RCAmatanHUD_SetRobotComponentVisibility::Show' has a wrong offset!");

// Function RC.RCPawn.IsPause
// 0x0001 (0x0001 - 0x0000)
struct RCPawn_IsPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawn_IsPause) == 0x000001, "Wrong alignment on RCPawn_IsPause");
static_assert(sizeof(RCPawn_IsPause) == 0x000001, "Wrong size on RCPawn_IsPause");
static_assert(offsetof(RCPawn_IsPause, ReturnValue) == 0x000000, "Member 'RCPawn_IsPause::ReturnValue' has a wrong offset!");

// Function RC.RCPawn.IsPauseCancelFlag
// 0x0001 (0x0001 - 0x0000)
struct RCPawn_IsPauseCancelFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawn_IsPauseCancelFlag) == 0x000001, "Wrong alignment on RCPawn_IsPauseCancelFlag");
static_assert(sizeof(RCPawn_IsPauseCancelFlag) == 0x000001, "Wrong size on RCPawn_IsPauseCancelFlag");
static_assert(offsetof(RCPawn_IsPauseCancelFlag, ReturnValue) == 0x000000, "Member 'RCPawn_IsPauseCancelFlag::ReturnValue' has a wrong offset!");

// Function RC.RCPawn.IsVisibility
// 0x0001 (0x0001 - 0x0000)
struct RCPawn_IsVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawn_IsVisibility) == 0x000001, "Wrong alignment on RCPawn_IsVisibility");
static_assert(sizeof(RCPawn_IsVisibility) == 0x000001, "Wrong size on RCPawn_IsVisibility");
static_assert(offsetof(RCPawn_IsVisibility, ReturnValue) == 0x000000, "Member 'RCPawn_IsVisibility::ReturnValue' has a wrong offset!");

// Function RC.RCPawn.SetPause
// 0x0002 (0x0002 - 0x0000)
struct RCPawn_SetPause final
{
public:
	bool                                          bInPause;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawn_SetPause) == 0x000001, "Wrong alignment on RCPawn_SetPause");
static_assert(sizeof(RCPawn_SetPause) == 0x000002, "Wrong size on RCPawn_SetPause");
static_assert(offsetof(RCPawn_SetPause, bInPause) == 0x000000, "Member 'RCPawn_SetPause::bInPause' has a wrong offset!");
static_assert(offsetof(RCPawn_SetPause, bDirect) == 0x000001, "Member 'RCPawn_SetPause::bDirect' has a wrong offset!");

// Function RC.RCPawn.SetPauseCancelFlag
// 0x0001 (0x0001 - 0x0000)
struct RCPawn_SetPauseCancelFlag final
{
public:
	bool                                          bInPauseCancel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawn_SetPauseCancelFlag) == 0x000001, "Wrong alignment on RCPawn_SetPauseCancelFlag");
static_assert(sizeof(RCPawn_SetPauseCancelFlag) == 0x000001, "Wrong size on RCPawn_SetPauseCancelFlag");
static_assert(offsetof(RCPawn_SetPauseCancelFlag, bInPauseCancel) == 0x000000, "Member 'RCPawn_SetPauseCancelFlag::bInPauseCancel' has a wrong offset!");

// Function RC.RCPawn.SetVisibility
// 0x0003 (0x0003 - 0x0000)
struct RCPawn_SetVisibility final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCollision;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawn_SetVisibility) == 0x000001, "Wrong alignment on RCPawn_SetVisibility");
static_assert(sizeof(RCPawn_SetVisibility) == 0x000003, "Wrong size on RCPawn_SetVisibility");
static_assert(offsetof(RCPawn_SetVisibility, bInVisible) == 0x000000, "Member 'RCPawn_SetVisibility::bInVisible' has a wrong offset!");
static_assert(offsetof(RCPawn_SetVisibility, bDirect) == 0x000001, "Member 'RCPawn_SetVisibility::bDirect' has a wrong offset!");
static_assert(offsetof(RCPawn_SetVisibility, bIsCollision) == 0x000002, "Member 'RCPawn_SetVisibility::bIsCollision' has a wrong offset!");

// Function RC.RCPawnScript.GetActorLocationBalloon
// 0x000C (0x000C - 0x0000)
struct RCPawnScript_GetActorLocationBalloon final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnScript_GetActorLocationBalloon) == 0x000004, "Wrong alignment on RCPawnScript_GetActorLocationBalloon");
static_assert(sizeof(RCPawnScript_GetActorLocationBalloon) == 0x00000C, "Wrong size on RCPawnScript_GetActorLocationBalloon");
static_assert(offsetof(RCPawnScript_GetActorLocationBalloon, ReturnValue) == 0x000000, "Member 'RCPawnScript_GetActorLocationBalloon::ReturnValue' has a wrong offset!");

// Function RC.RCPawnScript.GetActorLocationFoot
// 0x000C (0x000C - 0x0000)
struct RCPawnScript_GetActorLocationFoot final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnScript_GetActorLocationFoot) == 0x000004, "Wrong alignment on RCPawnScript_GetActorLocationFoot");
static_assert(sizeof(RCPawnScript_GetActorLocationFoot) == 0x00000C, "Wrong size on RCPawnScript_GetActorLocationFoot");
static_assert(offsetof(RCPawnScript_GetActorLocationFoot, ReturnValue) == 0x000000, "Member 'RCPawnScript_GetActorLocationFoot::ReturnValue' has a wrong offset!");

// Function RC.RCPawnScript.IsMoveEnd
// 0x0001 (0x0001 - 0x0000)
struct RCPawnScript_IsMoveEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnScript_IsMoveEnd) == 0x000001, "Wrong alignment on RCPawnScript_IsMoveEnd");
static_assert(sizeof(RCPawnScript_IsMoveEnd) == 0x000001, "Wrong size on RCPawnScript_IsMoveEnd");
static_assert(offsetof(RCPawnScript_IsMoveEnd, ReturnValue) == 0x000000, "Member 'RCPawnScript_IsMoveEnd::ReturnValue' has a wrong offset!");

// Function RC.RCPawnScript.RestoreMovePosition
// 0x0004 (0x0004 - 0x0000)
struct RCPawnScript_RestoreMovePosition final
{
public:
	float                                         SpeedScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnScript_RestoreMovePosition) == 0x000004, "Wrong alignment on RCPawnScript_RestoreMovePosition");
static_assert(sizeof(RCPawnScript_RestoreMovePosition) == 0x000004, "Wrong size on RCPawnScript_RestoreMovePosition");
static_assert(offsetof(RCPawnScript_RestoreMovePosition, SpeedScale) == 0x000000, "Member 'RCPawnScript_RestoreMovePosition::SpeedScale' has a wrong offset!");

// Function RC.RCPawnScript.RestoreRotationYaw
// 0x0008 (0x0008 - 0x0000)
struct RCPawnScript_RestoreRotationYaw final
{
public:
	float                                         SpeedScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_RestoreRotationYaw) == 0x000004, "Wrong alignment on RCPawnScript_RestoreRotationYaw");
static_assert(sizeof(RCPawnScript_RestoreRotationYaw) == 0x000008, "Wrong size on RCPawnScript_RestoreRotationYaw");
static_assert(offsetof(RCPawnScript_RestoreRotationYaw, SpeedScale) == 0x000000, "Member 'RCPawnScript_RestoreRotationYaw::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCPawnScript_RestoreRotationYaw, bDirect) == 0x000004, "Member 'RCPawnScript_RestoreRotationYaw::bDirect' has a wrong offset!");

// Function RC.RCPawnScript.SetMovePause
// 0x0001 (0x0001 - 0x0000)
struct RCPawnScript_SetMovePause final
{
public:
	bool                                          bInMovePause;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnScript_SetMovePause) == 0x000001, "Wrong alignment on RCPawnScript_SetMovePause");
static_assert(sizeof(RCPawnScript_SetMovePause) == 0x000001, "Wrong size on RCPawnScript_SetMovePause");
static_assert(offsetof(RCPawnScript_SetMovePause, bInMovePause) == 0x000000, "Member 'RCPawnScript_SetMovePause::bInMovePause' has a wrong offset!");

// Function RC.RCPawnScript.SetMoveSpeed
// 0x0008 (0x0008 - 0x0000)
struct RCPawnScript_SetMoveSpeed final
{
public:
	float                                         InWalkSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRunSpeed;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnScript_SetMoveSpeed) == 0x000004, "Wrong alignment on RCPawnScript_SetMoveSpeed");
static_assert(sizeof(RCPawnScript_SetMoveSpeed) == 0x000008, "Wrong size on RCPawnScript_SetMoveSpeed");
static_assert(offsetof(RCPawnScript_SetMoveSpeed, InWalkSpeed) == 0x000000, "Member 'RCPawnScript_SetMoveSpeed::InWalkSpeed' has a wrong offset!");
static_assert(offsetof(RCPawnScript_SetMoveSpeed, InRunSpeed) == 0x000004, "Member 'RCPawnScript_SetMoveSpeed::InRunSpeed' has a wrong offset!");

// Function RC.RCPawnScript.SetPositionYaw
// 0x0010 (0x0010 - 0x0000)
struct RCPawnScript_SetPositionYaw final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnScript_SetPositionYaw) == 0x000004, "Wrong alignment on RCPawnScript_SetPositionYaw");
static_assert(sizeof(RCPawnScript_SetPositionYaw) == 0x000010, "Wrong size on RCPawnScript_SetPositionYaw");
static_assert(offsetof(RCPawnScript_SetPositionYaw, InPosition) == 0x000000, "Member 'RCPawnScript_SetPositionYaw::InPosition' has a wrong offset!");
static_assert(offsetof(RCPawnScript_SetPositionYaw, InYaw) == 0x00000C, "Member 'RCPawnScript_SetPositionYaw::InYaw' has a wrong offset!");

// Function RC.RCPawnScript.SetTransformPlayerStartName
// 0x0018 (0x0018 - 0x0000)
struct RCPawnScript_SetTransformPlayerStartName final
{
public:
	class FName                                   InPlayerStartTagName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnScript_SetTransformPlayerStartName) == 0x000004, "Wrong alignment on RCPawnScript_SetTransformPlayerStartName");
static_assert(sizeof(RCPawnScript_SetTransformPlayerStartName) == 0x000018, "Wrong size on RCPawnScript_SetTransformPlayerStartName");
static_assert(offsetof(RCPawnScript_SetTransformPlayerStartName, InPlayerStartTagName) == 0x000000, "Member 'RCPawnScript_SetTransformPlayerStartName::InPlayerStartTagName' has a wrong offset!");
static_assert(offsetof(RCPawnScript_SetTransformPlayerStartName, InOffsetPos) == 0x000008, "Member 'RCPawnScript_SetTransformPlayerStartName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCPawnScript_SetTransformPlayerStartName, InOffsetYaw) == 0x000014, "Member 'RCPawnScript_SetTransformPlayerStartName::InOffsetYaw' has a wrong offset!");

// Function RC.RCPawnScript.SetTransformTargetPointName
// 0x0018 (0x0018 - 0x0000)
struct RCPawnScript_SetTransformTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnScript_SetTransformTargetPointName) == 0x000004, "Wrong alignment on RCPawnScript_SetTransformTargetPointName");
static_assert(sizeof(RCPawnScript_SetTransformTargetPointName) == 0x000018, "Wrong size on RCPawnScript_SetTransformTargetPointName");
static_assert(offsetof(RCPawnScript_SetTransformTargetPointName, InPointName) == 0x000000, "Member 'RCPawnScript_SetTransformTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCPawnScript_SetTransformTargetPointName, InOffsetPos) == 0x000008, "Member 'RCPawnScript_SetTransformTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCPawnScript_SetTransformTargetPointName, InOffsetYaw) == 0x000014, "Member 'RCPawnScript_SetTransformTargetPointName::InOffsetYaw' has a wrong offset!");

// Function RC.RCPawnScript.StartMoveFromPlayer
// 0x0014 (0x0014 - 0x0000)
struct RCPawnScript_StartMoveFromPlayer final
{
public:
	float                                         InLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndPlayerYaw;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_StartMoveFromPlayer) == 0x000004, "Wrong alignment on RCPawnScript_StartMoveFromPlayer");
static_assert(sizeof(RCPawnScript_StartMoveFromPlayer) == 0x000014, "Wrong size on RCPawnScript_StartMoveFromPlayer");
static_assert(offsetof(RCPawnScript_StartMoveFromPlayer, InLength) == 0x000000, "Member 'RCPawnScript_StartMoveFromPlayer::InLength' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPlayer, InAngle) == 0x000004, "Member 'RCPawnScript_StartMoveFromPlayer::InAngle' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPlayer, InHeight) == 0x000008, "Member 'RCPawnScript_StartMoveFromPlayer::InHeight' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPlayer, SpeedScale) == 0x00000C, "Member 'RCPawnScript_StartMoveFromPlayer::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPlayer, bEndPlayerYaw) == 0x000010, "Member 'RCPawnScript_StartMoveFromPlayer::bEndPlayerYaw' has a wrong offset!");

// Function RC.RCPawnScript.StartMoveFromPosition
// 0x0028 (0x0028 - 0x0000)
struct RCPawnScript_StartMoveFromPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndChangeYawPosition;                              // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_StartMoveFromPosition) == 0x000004, "Wrong alignment on RCPawnScript_StartMoveFromPosition");
static_assert(sizeof(RCPawnScript_StartMoveFromPosition) == 0x000028, "Wrong size on RCPawnScript_StartMoveFromPosition");
static_assert(offsetof(RCPawnScript_StartMoveFromPosition, InPosition) == 0x000000, "Member 'RCPawnScript_StartMoveFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPosition, SpeedScale) == 0x00000C, "Member 'RCPawnScript_StartMoveFromPosition::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPosition, InOffsetYaw) == 0x000010, "Member 'RCPawnScript_StartMoveFromPosition::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPosition, bEndChangeYaw) == 0x000014, "Member 'RCPawnScript_StartMoveFromPosition::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPosition, EndChangeYawPosition) == 0x000018, "Member 'RCPawnScript_StartMoveFromPosition::EndChangeYawPosition' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPosition, bPlayerCheck) == 0x000024, "Member 'RCPawnScript_StartMoveFromPosition::bPlayerCheck' has a wrong offset!");

// Function RC.RCPawnScript.StartMoveFromPositionList
// 0x0020 (0x0020 - 0x0000)
struct RCPawnScript_StartMoveFromPositionList final
{
public:
	TArray<struct FRCScriptActorMoveInfo>         InMoveInfoList;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartMoveInfoNum;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstWarp;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_StartMoveFromPositionList) == 0x000008, "Wrong alignment on RCPawnScript_StartMoveFromPositionList");
static_assert(sizeof(RCPawnScript_StartMoveFromPositionList) == 0x000020, "Wrong size on RCPawnScript_StartMoveFromPositionList");
static_assert(offsetof(RCPawnScript_StartMoveFromPositionList, InMoveInfoList) == 0x000000, "Member 'RCPawnScript_StartMoveFromPositionList::InMoveInfoList' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPositionList, StartMoveInfoNum) == 0x000010, "Member 'RCPawnScript_StartMoveFromPositionList::StartMoveInfoNum' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPositionList, bEndChangeYaw) == 0x000014, "Member 'RCPawnScript_StartMoveFromPositionList::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPositionList, InOffsetYaw) == 0x000018, "Member 'RCPawnScript_StartMoveFromPositionList::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPositionList, bFirstWarp) == 0x00001C, "Member 'RCPawnScript_StartMoveFromPositionList::bFirstWarp' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPositionList, bLoop) == 0x00001D, "Member 'RCPawnScript_StartMoveFromPositionList::bLoop' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromPositionList, bPlayerCheck) == 0x00001E, "Member 'RCPawnScript_StartMoveFromPositionList::bPlayerCheck' has a wrong offset!");

// Function RC.RCPawnScript.StartMoveFromSplineName
// 0x0018 (0x0018 - 0x0000)
struct RCPawnScript_StartMoveFromSplineName final
{
public:
	class FName                                   InSplineName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistanceRange;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstWarp;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_StartMoveFromSplineName) == 0x000004, "Wrong alignment on RCPawnScript_StartMoveFromSplineName");
static_assert(sizeof(RCPawnScript_StartMoveFromSplineName) == 0x000018, "Wrong size on RCPawnScript_StartMoveFromSplineName");
static_assert(offsetof(RCPawnScript_StartMoveFromSplineName, InSplineName) == 0x000000, "Member 'RCPawnScript_StartMoveFromSplineName::InSplineName' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromSplineName, StartDistanceRange) == 0x000008, "Member 'RCPawnScript_StartMoveFromSplineName::StartDistanceRange' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromSplineName, bReverse) == 0x00000C, "Member 'RCPawnScript_StartMoveFromSplineName::bReverse' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromSplineName, bEndChangeYaw) == 0x00000D, "Member 'RCPawnScript_StartMoveFromSplineName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromSplineName, InOffsetYaw) == 0x000010, "Member 'RCPawnScript_StartMoveFromSplineName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromSplineName, bFirstWarp) == 0x000014, "Member 'RCPawnScript_StartMoveFromSplineName::bFirstWarp' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromSplineName, bLoop) == 0x000015, "Member 'RCPawnScript_StartMoveFromSplineName::bLoop' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromSplineName, bPlayerCheck) == 0x000016, "Member 'RCPawnScript_StartMoveFromSplineName::bPlayerCheck' has a wrong offset!");

// Function RC.RCPawnScript.StartMoveFromTargetPointName
// 0x0028 (0x0028 - 0x0000)
struct RCPawnScript_StartMoveFromTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InChangeYawSpeedScale;                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_StartMoveFromTargetPointName) == 0x000004, "Wrong alignment on RCPawnScript_StartMoveFromTargetPointName");
static_assert(sizeof(RCPawnScript_StartMoveFromTargetPointName) == 0x000028, "Wrong size on RCPawnScript_StartMoveFromTargetPointName");
static_assert(offsetof(RCPawnScript_StartMoveFromTargetPointName, InPointName) == 0x000000, "Member 'RCPawnScript_StartMoveFromTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromTargetPointName, SpeedScale) == 0x000008, "Member 'RCPawnScript_StartMoveFromTargetPointName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromTargetPointName, InOffsetPos) == 0x00000C, "Member 'RCPawnScript_StartMoveFromTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromTargetPointName, bEndChangeYaw) == 0x000018, "Member 'RCPawnScript_StartMoveFromTargetPointName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromTargetPointName, InOffsetYaw) == 0x00001C, "Member 'RCPawnScript_StartMoveFromTargetPointName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromTargetPointName, InChangeYawSpeedScale) == 0x000020, "Member 'RCPawnScript_StartMoveFromTargetPointName::InChangeYawSpeedScale' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartMoveFromTargetPointName, bPlayerCheck) == 0x000024, "Member 'RCPawnScript_StartMoveFromTargetPointName::bPlayerCheck' has a wrong offset!");

// Function RC.RCPawnScript.StartRotationFromCharacter
// 0x0020 (0x0020 - 0x0000)
struct RCPawnScript_StartRotationFromCharacter final
{
public:
	class FName                                   InTargetCharacterName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_StartRotationFromCharacter) == 0x000004, "Wrong alignment on RCPawnScript_StartRotationFromCharacter");
static_assert(sizeof(RCPawnScript_StartRotationFromCharacter) == 0x000020, "Wrong size on RCPawnScript_StartRotationFromCharacter");
static_assert(offsetof(RCPawnScript_StartRotationFromCharacter, InTargetCharacterName) == 0x000000, "Member 'RCPawnScript_StartRotationFromCharacter::InTargetCharacterName' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromCharacter, SpeedScale) == 0x000008, "Member 'RCPawnScript_StartRotationFromCharacter::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromCharacter, InOffsetPos) == 0x00000C, "Member 'RCPawnScript_StartRotationFromCharacter::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromCharacter, InOffsetYaw) == 0x000018, "Member 'RCPawnScript_StartRotationFromCharacter::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromCharacter, bDirect) == 0x00001C, "Member 'RCPawnScript_StartRotationFromCharacter::bDirect' has a wrong offset!");

// Function RC.RCPawnScript.StartRotationFromPosition
// 0x0018 (0x0018 - 0x0000)
struct RCPawnScript_StartRotationFromPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_StartRotationFromPosition) == 0x000004, "Wrong alignment on RCPawnScript_StartRotationFromPosition");
static_assert(sizeof(RCPawnScript_StartRotationFromPosition) == 0x000018, "Wrong size on RCPawnScript_StartRotationFromPosition");
static_assert(offsetof(RCPawnScript_StartRotationFromPosition, InPosition) == 0x000000, "Member 'RCPawnScript_StartRotationFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromPosition, SpeedScale) == 0x00000C, "Member 'RCPawnScript_StartRotationFromPosition::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromPosition, InOffsetYaw) == 0x000010, "Member 'RCPawnScript_StartRotationFromPosition::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromPosition, bDirect) == 0x000014, "Member 'RCPawnScript_StartRotationFromPosition::bDirect' has a wrong offset!");

// Function RC.RCPawnScript.StartRotationFromTargetPointName
// 0x0020 (0x0020 - 0x0000)
struct RCPawnScript_StartRotationFromTargetPointName final
{
public:
	class FName                                   InPointName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_StartRotationFromTargetPointName) == 0x000004, "Wrong alignment on RCPawnScript_StartRotationFromTargetPointName");
static_assert(sizeof(RCPawnScript_StartRotationFromTargetPointName) == 0x000020, "Wrong size on RCPawnScript_StartRotationFromTargetPointName");
static_assert(offsetof(RCPawnScript_StartRotationFromTargetPointName, InPointName) == 0x000000, "Member 'RCPawnScript_StartRotationFromTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromTargetPointName, SpeedScale) == 0x000008, "Member 'RCPawnScript_StartRotationFromTargetPointName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromTargetPointName, InOffsetPos) == 0x00000C, "Member 'RCPawnScript_StartRotationFromTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromTargetPointName, InOffsetYaw) == 0x000018, "Member 'RCPawnScript_StartRotationFromTargetPointName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationFromTargetPointName, bDirect) == 0x00001C, "Member 'RCPawnScript_StartRotationFromTargetPointName::bDirect' has a wrong offset!");

// Function RC.RCPawnScript.StartRotationYaw
// 0x000C (0x000C - 0x0000)
struct RCPawnScript_StartRotationYaw final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnScript_StartRotationYaw) == 0x000004, "Wrong alignment on RCPawnScript_StartRotationYaw");
static_assert(sizeof(RCPawnScript_StartRotationYaw) == 0x00000C, "Wrong size on RCPawnScript_StartRotationYaw");
static_assert(offsetof(RCPawnScript_StartRotationYaw, Yaw) == 0x000000, "Member 'RCPawnScript_StartRotationYaw::Yaw' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationYaw, SpeedScale) == 0x000004, "Member 'RCPawnScript_StartRotationYaw::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCPawnScript_StartRotationYaw, bDirect) == 0x000008, "Member 'RCPawnScript_StartRotationYaw::bDirect' has a wrong offset!");

// Function RC.RCAmatanPawnScript.AutoPilot
// 0x001C (0x001C - 0x0000)
struct RCAmatanPawnScript_AutoPilot final
{
public:
	struct FVector                                NewPosition;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotate;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreEvent;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAmatanPawnScript_AutoPilot) == 0x000004, "Wrong alignment on RCAmatanPawnScript_AutoPilot");
static_assert(sizeof(RCAmatanPawnScript_AutoPilot) == 0x00001C, "Wrong size on RCAmatanPawnScript_AutoPilot");
static_assert(offsetof(RCAmatanPawnScript_AutoPilot, NewPosition) == 0x000000, "Member 'RCAmatanPawnScript_AutoPilot::NewPosition' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_AutoPilot, NewRotate) == 0x00000C, "Member 'RCAmatanPawnScript_AutoPilot::NewRotate' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_AutoPilot, Teleport) == 0x000018, "Member 'RCAmatanPawnScript_AutoPilot::Teleport' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_AutoPilot, IgnoreEvent) == 0x000019, "Member 'RCAmatanPawnScript_AutoPilot::IgnoreEvent' has a wrong offset!");

// Function RC.RCAmatanPawnScript.AutoPilotMove
// 0x0010 (0x0010 - 0x0000)
struct RCAmatanPawnScript_AutoPilotMove final
{
public:
	struct FVector                                NewPosition;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreEvent;                                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAmatanPawnScript_AutoPilotMove) == 0x000004, "Wrong alignment on RCAmatanPawnScript_AutoPilotMove");
static_assert(sizeof(RCAmatanPawnScript_AutoPilotMove) == 0x000010, "Wrong size on RCAmatanPawnScript_AutoPilotMove");
static_assert(offsetof(RCAmatanPawnScript_AutoPilotMove, NewPosition) == 0x000000, "Member 'RCAmatanPawnScript_AutoPilotMove::NewPosition' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_AutoPilotMove, Teleport) == 0x00000C, "Member 'RCAmatanPawnScript_AutoPilotMove::Teleport' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_AutoPilotMove, IgnoreEvent) == 0x00000D, "Member 'RCAmatanPawnScript_AutoPilotMove::IgnoreEvent' has a wrong offset!");

// Function RC.RCAmatanPawnScript.AutoPilotRotate
// 0x000C (0x000C - 0x0000)
struct RCAmatanPawnScript_AutoPilotRotate final
{
public:
	struct FRotator                               NewRotate;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPawnScript_AutoPilotRotate) == 0x000004, "Wrong alignment on RCAmatanPawnScript_AutoPilotRotate");
static_assert(sizeof(RCAmatanPawnScript_AutoPilotRotate) == 0x00000C, "Wrong size on RCAmatanPawnScript_AutoPilotRotate");
static_assert(offsetof(RCAmatanPawnScript_AutoPilotRotate, NewRotate) == 0x000000, "Member 'RCAmatanPawnScript_AutoPilotRotate::NewRotate' has a wrong offset!");

// Function RC.RCAmatanPawnScript.CalcDurationForAutoMove
// 0x0010 (0x0010 - 0x0000)
struct RCAmatanPawnScript_CalcDurationForAutoMove final
{
public:
	class AActor*                                 Dist;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAmatanPawnScript_CalcDurationForAutoMove) == 0x000008, "Wrong alignment on RCAmatanPawnScript_CalcDurationForAutoMove");
static_assert(sizeof(RCAmatanPawnScript_CalcDurationForAutoMove) == 0x000010, "Wrong size on RCAmatanPawnScript_CalcDurationForAutoMove");
static_assert(offsetof(RCAmatanPawnScript_CalcDurationForAutoMove, Dist) == 0x000000, "Member 'RCAmatanPawnScript_CalcDurationForAutoMove::Dist' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_CalcDurationForAutoMove, ReturnValue) == 0x000008, "Member 'RCAmatanPawnScript_CalcDurationForAutoMove::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPawnScript.CalcDurationForAutoRotationYaw
// 0x0010 (0x0010 - 0x0000)
struct RCAmatanPawnScript_CalcDurationForAutoRotationYaw final
{
public:
	class AActor*                                 Dist;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAmatanPawnScript_CalcDurationForAutoRotationYaw) == 0x000008, "Wrong alignment on RCAmatanPawnScript_CalcDurationForAutoRotationYaw");
static_assert(sizeof(RCAmatanPawnScript_CalcDurationForAutoRotationYaw) == 0x000010, "Wrong size on RCAmatanPawnScript_CalcDurationForAutoRotationYaw");
static_assert(offsetof(RCAmatanPawnScript_CalcDurationForAutoRotationYaw, Dist) == 0x000000, "Member 'RCAmatanPawnScript_CalcDurationForAutoRotationYaw::Dist' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_CalcDurationForAutoRotationYaw, ReturnValue) == 0x000008, "Member 'RCAmatanPawnScript_CalcDurationForAutoRotationYaw::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPawnScript.GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct RCAmatanPawnScript_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPawnScript_GetCapsuleComponent) == 0x000008, "Wrong alignment on RCAmatanPawnScript_GetCapsuleComponent");
static_assert(sizeof(RCAmatanPawnScript_GetCapsuleComponent) == 0x000008, "Wrong size on RCAmatanPawnScript_GetCapsuleComponent");
static_assert(offsetof(RCAmatanPawnScript_GetCapsuleComponent, ReturnValue) == 0x000000, "Member 'RCAmatanPawnScript_GetCapsuleComponent::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPawnScript.GetPostEffectWeight
// 0x0008 (0x0008 - 0x0000)
struct RCAmatanPawnScript_GetPostEffectWeight final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPawnScript_GetPostEffectWeight) == 0x000004, "Wrong alignment on RCAmatanPawnScript_GetPostEffectWeight");
static_assert(sizeof(RCAmatanPawnScript_GetPostEffectWeight) == 0x000008, "Wrong size on RCAmatanPawnScript_GetPostEffectWeight");
static_assert(offsetof(RCAmatanPawnScript_GetPostEffectWeight, Index_0) == 0x000000, "Member 'RCAmatanPawnScript_GetPostEffectWeight::Index_0' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_GetPostEffectWeight, ReturnValue) == 0x000004, "Member 'RCAmatanPawnScript_GetPostEffectWeight::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPawnScript.GetSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct RCAmatanPawnScript_GetSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPawnScript_GetSkeletalMeshComponent) == 0x000008, "Wrong alignment on RCAmatanPawnScript_GetSkeletalMeshComponent");
static_assert(sizeof(RCAmatanPawnScript_GetSkeletalMeshComponent) == 0x000008, "Wrong size on RCAmatanPawnScript_GetSkeletalMeshComponent");
static_assert(offsetof(RCAmatanPawnScript_GetSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'RCAmatanPawnScript_GetSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPawnScript.Pause_Anim
// 0x0004 (0x0004 - 0x0000)
struct RCAmatanPawnScript_Pause_Anim final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPawnScript_Pause_Anim) == 0x000004, "Wrong alignment on RCAmatanPawnScript_Pause_Anim");
static_assert(sizeof(RCAmatanPawnScript_Pause_Anim) == 0x000004, "Wrong size on RCAmatanPawnScript_Pause_Anim");
static_assert(offsetof(RCAmatanPawnScript_Pause_Anim, ReturnValue) == 0x000000, "Member 'RCAmatanPawnScript_Pause_Anim::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPawnScript.Play_APull
// 0x0004 (0x0004 - 0x0000)
struct RCAmatanPawnScript_Play_APull final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPawnScript_Play_APull) == 0x000004, "Wrong alignment on RCAmatanPawnScript_Play_APull");
static_assert(sizeof(RCAmatanPawnScript_Play_APull) == 0x000004, "Wrong size on RCAmatanPawnScript_Play_APull");
static_assert(offsetof(RCAmatanPawnScript_Play_APull, ReturnValue) == 0x000000, "Member 'RCAmatanPawnScript_Play_APull::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPawnScript.Play_APush
// 0x0004 (0x0004 - 0x0000)
struct RCAmatanPawnScript_Play_APush final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPawnScript_Play_APush) == 0x000004, "Wrong alignment on RCAmatanPawnScript_Play_APush");
static_assert(sizeof(RCAmatanPawnScript_Play_APush) == 0x000004, "Wrong size on RCAmatanPawnScript_Play_APush");
static_assert(offsetof(RCAmatanPawnScript_Play_APush, ReturnValue) == 0x000000, "Member 'RCAmatanPawnScript_Play_APush::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPawnScript.SetEffectOffset
// 0x0008 (0x0008 - 0x0000)
struct RCAmatanPawnScript_SetEffectOffset final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPawnScript_SetEffectOffset) == 0x000004, "Wrong alignment on RCAmatanPawnScript_SetEffectOffset");
static_assert(sizeof(RCAmatanPawnScript_SetEffectOffset) == 0x000008, "Wrong size on RCAmatanPawnScript_SetEffectOffset");
static_assert(offsetof(RCAmatanPawnScript_SetEffectOffset, Distance) == 0x000000, "Member 'RCAmatanPawnScript_SetEffectOffset::Distance' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_SetEffectOffset, Height) == 0x000004, "Member 'RCAmatanPawnScript_SetEffectOffset::Height' has a wrong offset!");

// Function RC.RCAmatanPawnScript.SetPostEffectWeight
// 0x0008 (0x0008 - 0x0000)
struct RCAmatanPawnScript_SetPostEffectWeight final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPawnScript_SetPostEffectWeight) == 0x000004, "Wrong alignment on RCAmatanPawnScript_SetPostEffectWeight");
static_assert(sizeof(RCAmatanPawnScript_SetPostEffectWeight) == 0x000008, "Wrong size on RCAmatanPawnScript_SetPostEffectWeight");
static_assert(offsetof(RCAmatanPawnScript_SetPostEffectWeight, Index_0) == 0x000000, "Member 'RCAmatanPawnScript_SetPostEffectWeight::Index_0' has a wrong offset!");
static_assert(offsetof(RCAmatanPawnScript_SetPostEffectWeight, Weight) == 0x000004, "Member 'RCAmatanPawnScript_SetPostEffectWeight::Weight' has a wrong offset!");

// Function RC.RCPlayerController.IsBeginPlayEnd
// 0x0001 (0x0001 - 0x0000)
struct RCPlayerController_IsBeginPlayEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlayerController_IsBeginPlayEnd) == 0x000001, "Wrong alignment on RCPlayerController_IsBeginPlayEnd");
static_assert(sizeof(RCPlayerController_IsBeginPlayEnd) == 0x000001, "Wrong size on RCPlayerController_IsBeginPlayEnd");
static_assert(offsetof(RCPlayerController_IsBeginPlayEnd, ReturnValue) == 0x000000, "Member 'RCPlayerController_IsBeginPlayEnd::ReturnValue' has a wrong offset!");

// Function RC.RCPlayerController.IsReady
// 0x0001 (0x0001 - 0x0000)
struct RCPlayerController_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlayerController_IsReady) == 0x000001, "Wrong alignment on RCPlayerController_IsReady");
static_assert(sizeof(RCPlayerController_IsReady) == 0x000001, "Wrong size on RCPlayerController_IsReady");
static_assert(offsetof(RCPlayerController_IsReady, ReturnValue) == 0x000000, "Member 'RCPlayerController_IsReady::ReturnValue' has a wrong offset!");

// Function RC.RCPlayerController.SetMouseOverEnable
// 0x0001 (0x0001 - 0x0000)
struct RCPlayerController_SetMouseOverEnable final
{
public:
	bool                                          bInMouseOverEnable;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlayerController_SetMouseOverEnable) == 0x000001, "Wrong alignment on RCPlayerController_SetMouseOverEnable");
static_assert(sizeof(RCPlayerController_SetMouseOverEnable) == 0x000001, "Wrong size on RCPlayerController_SetMouseOverEnable");
static_assert(offsetof(RCPlayerController_SetMouseOverEnable, bInMouseOverEnable) == 0x000000, "Member 'RCPlayerController_SetMouseOverEnable::bInMouseOverEnable' has a wrong offset!");

// Function RC.RCPlayerController.SetSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCPlayerController_SetSkipEnable final
{
public:
	bool                                          bInSkipEnable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlayerController_SetSkipEnable) == 0x000001, "Wrong alignment on RCPlayerController_SetSkipEnable");
static_assert(sizeof(RCPlayerController_SetSkipEnable) == 0x000001, "Wrong size on RCPlayerController_SetSkipEnable");
static_assert(offsetof(RCPlayerController_SetSkipEnable, bInSkipEnable) == 0x000000, "Member 'RCPlayerController_SetSkipEnable::bInSkipEnable' has a wrong offset!");

// Function RC.RCPlayerController.IsMouseOverEnable
// 0x0001 (0x0001 - 0x0000)
struct RCPlayerController_IsMouseOverEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlayerController_IsMouseOverEnable) == 0x000001, "Wrong alignment on RCPlayerController_IsMouseOverEnable");
static_assert(sizeof(RCPlayerController_IsMouseOverEnable) == 0x000001, "Wrong size on RCPlayerController_IsMouseOverEnable");
static_assert(offsetof(RCPlayerController_IsMouseOverEnable, ReturnValue) == 0x000000, "Member 'RCPlayerController_IsMouseOverEnable::ReturnValue' has a wrong offset!");

// Function RC.RCPlayerController.IsSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCPlayerController_IsSkipEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlayerController_IsSkipEnable) == 0x000001, "Wrong alignment on RCPlayerController_IsSkipEnable");
static_assert(sizeof(RCPlayerController_IsSkipEnable) == 0x000001, "Wrong size on RCPlayerController_IsSkipEnable");
static_assert(offsetof(RCPlayerController_IsSkipEnable, ReturnValue) == 0x000000, "Member 'RCPlayerController_IsSkipEnable::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPlayerController.DidGoal
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_DidGoal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_DidGoal) == 0x000001, "Wrong alignment on RCAmatanPlayerController_DidGoal");
static_assert(sizeof(RCAmatanPlayerController_DidGoal) == 0x000001, "Wrong size on RCAmatanPlayerController_DidGoal");
static_assert(offsetof(RCAmatanPlayerController_DidGoal, ReturnValue) == 0x000000, "Member 'RCAmatanPlayerController_DidGoal::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPlayerController.Face
// 0x0004 (0x0004 - 0x0000)
struct RCAmatanPlayerController_Face final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_Face) == 0x000004, "Wrong alignment on RCAmatanPlayerController_Face");
static_assert(sizeof(RCAmatanPlayerController_Face) == 0x000004, "Wrong size on RCAmatanPlayerController_Face");
static_assert(offsetof(RCAmatanPlayerController_Face, Index_0) == 0x000000, "Member 'RCAmatanPlayerController_Face::Index_0' has a wrong offset!");

// Function RC.RCAmatanPlayerController.ForceGoal
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_ForceGoal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_ForceGoal) == 0x000001, "Wrong alignment on RCAmatanPlayerController_ForceGoal");
static_assert(sizeof(RCAmatanPlayerController_ForceGoal) == 0x000001, "Wrong size on RCAmatanPlayerController_ForceGoal");
static_assert(offsetof(RCAmatanPlayerController_ForceGoal, ReturnValue) == 0x000000, "Member 'RCAmatanPlayerController_ForceGoal::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPlayerController.GetAmatanPawn
// 0x0008 (0x0008 - 0x0000)
struct RCAmatanPlayerController_GetAmatanPawn final
{
public:
	class ARCAmatanPawnScript*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_GetAmatanPawn) == 0x000008, "Wrong alignment on RCAmatanPlayerController_GetAmatanPawn");
static_assert(sizeof(RCAmatanPlayerController_GetAmatanPawn) == 0x000008, "Wrong size on RCAmatanPlayerController_GetAmatanPawn");
static_assert(offsetof(RCAmatanPlayerController_GetAmatanPawn, ReturnValue) == 0x000000, "Member 'RCAmatanPlayerController_GetAmatanPawn::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPlayerController.GetRetryCount
// 0x0004 (0x0004 - 0x0000)
struct RCAmatanPlayerController_GetRetryCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_GetRetryCount) == 0x000004, "Wrong alignment on RCAmatanPlayerController_GetRetryCount");
static_assert(sizeof(RCAmatanPlayerController_GetRetryCount) == 0x000004, "Wrong size on RCAmatanPlayerController_GetRetryCount");
static_assert(offsetof(RCAmatanPlayerController_GetRetryCount, ReturnValue) == 0x000000, "Member 'RCAmatanPlayerController_GetRetryCount::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPlayerController.GetSkippable
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_GetSkippable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_GetSkippable) == 0x000001, "Wrong alignment on RCAmatanPlayerController_GetSkippable");
static_assert(sizeof(RCAmatanPlayerController_GetSkippable) == 0x000001, "Wrong size on RCAmatanPlayerController_GetSkippable");
static_assert(offsetof(RCAmatanPlayerController_GetSkippable, ReturnValue) == 0x000000, "Member 'RCAmatanPlayerController_GetSkippable::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPlayerController.LockMovement
// 0x0004 (0x0004 - 0x0000)
struct RCAmatanPlayerController_LockMovement final
{
public:
	float                                         Timeout;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_LockMovement) == 0x000004, "Wrong alignment on RCAmatanPlayerController_LockMovement");
static_assert(sizeof(RCAmatanPlayerController_LockMovement) == 0x000004, "Wrong size on RCAmatanPlayerController_LockMovement");
static_assert(offsetof(RCAmatanPlayerController_LockMovement, Timeout) == 0x000000, "Member 'RCAmatanPlayerController_LockMovement::Timeout' has a wrong offset!");

// Function RC.RCAmatanPlayerController.OnArmComponentOverlapped
// 0x00A8 (0x00A8 - 0x0000)
struct RCAmatanPlayerController_OnArmComponentOverlapped final
{
public:
	class UPrimitiveComponent*                    Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_OnArmComponentOverlapped) == 0x000008, "Wrong alignment on RCAmatanPlayerController_OnArmComponentOverlapped");
static_assert(sizeof(RCAmatanPlayerController_OnArmComponentOverlapped) == 0x0000A8, "Wrong size on RCAmatanPlayerController_OnArmComponentOverlapped");
static_assert(offsetof(RCAmatanPlayerController_OnArmComponentOverlapped, Comp) == 0x000000, "Member 'RCAmatanPlayerController_OnArmComponentOverlapped::Comp' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnArmComponentOverlapped, OtherActor) == 0x000008, "Member 'RCAmatanPlayerController_OnArmComponentOverlapped::OtherActor' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnArmComponentOverlapped, OtherComp) == 0x000010, "Member 'RCAmatanPlayerController_OnArmComponentOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnArmComponentOverlapped, OtherBodyIndex) == 0x000018, "Member 'RCAmatanPlayerController_OnArmComponentOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnArmComponentOverlapped, bFromSweep) == 0x00001C, "Member 'RCAmatanPlayerController_OnArmComponentOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnArmComponentOverlapped, SweepResult) == 0x000020, "Member 'RCAmatanPlayerController_OnArmComponentOverlapped::SweepResult' has a wrong offset!");

// Function RC.RCAmatanPlayerController.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct RCAmatanPlayerController_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             R;                                                 // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCAmatanPlayerController_OnComponentHit) == 0x000008, "Wrong alignment on RCAmatanPlayerController_OnComponentHit");
static_assert(sizeof(RCAmatanPlayerController_OnComponentHit) == 0x0000B0, "Wrong size on RCAmatanPlayerController_OnComponentHit");
static_assert(offsetof(RCAmatanPlayerController_OnComponentHit, HitComponent) == 0x000000, "Member 'RCAmatanPlayerController_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnComponentHit, OtherActor) == 0x000008, "Member 'RCAmatanPlayerController_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnComponentHit, OtherComponent) == 0x000010, "Member 'RCAmatanPlayerController_OnComponentHit::OtherComponent' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnComponentHit, NormalImpulse) == 0x000018, "Member 'RCAmatanPlayerController_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnComponentHit, R) == 0x000024, "Member 'RCAmatanPlayerController_OnComponentHit::R' has a wrong offset!");

// Function RC.RCAmatanPlayerController.OnFailed
// 0x000C (0x000C - 0x0000)
struct RCAmatanPlayerController_OnFailed final
{
public:
	int32                                         nowsteps;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAmatanPuzzleFailureCode                    code;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         last;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_OnFailed) == 0x000004, "Wrong alignment on RCAmatanPlayerController_OnFailed");
static_assert(sizeof(RCAmatanPlayerController_OnFailed) == 0x00000C, "Wrong size on RCAmatanPlayerController_OnFailed");
static_assert(offsetof(RCAmatanPlayerController_OnFailed, nowsteps) == 0x000000, "Member 'RCAmatanPlayerController_OnFailed::nowsteps' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnFailed, code) == 0x000004, "Member 'RCAmatanPlayerController_OnFailed::code' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_OnFailed, last) == 0x000008, "Member 'RCAmatanPlayerController_OnFailed::last' has a wrong offset!");

// Function RC.RCAmatanPlayerController.ResearchStart
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_ResearchStart final
{
public:
	bool                                          UsePointer;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_ResearchStart) == 0x000001, "Wrong alignment on RCAmatanPlayerController_ResearchStart");
static_assert(sizeof(RCAmatanPlayerController_ResearchStart) == 0x000001, "Wrong size on RCAmatanPlayerController_ResearchStart");
static_assert(offsetof(RCAmatanPlayerController_ResearchStart, UsePointer) == 0x000000, "Member 'RCAmatanPlayerController_ResearchStart::UsePointer' has a wrong offset!");

// Function RC.RCAmatanPlayerController.Restart
// 0x0004 (0x0004 - 0x0000)
struct RCAmatanPlayerController_Restart final
{
public:
	float                                         After;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_Restart) == 0x000004, "Wrong alignment on RCAmatanPlayerController_Restart");
static_assert(sizeof(RCAmatanPlayerController_Restart) == 0x000004, "Wrong size on RCAmatanPlayerController_Restart");
static_assert(offsetof(RCAmatanPlayerController_Restart, After) == 0x000000, "Member 'RCAmatanPlayerController_Restart::After' has a wrong offset!");

// Function RC.RCAmatanPlayerController.RestartFrom
// 0x000C (0x000C - 0x0000)
struct RCAmatanPlayerController_RestartFrom final
{
public:
	float                                         After;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartPoint;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_RestartFrom) == 0x000004, "Wrong alignment on RCAmatanPlayerController_RestartFrom");
static_assert(sizeof(RCAmatanPlayerController_RestartFrom) == 0x00000C, "Wrong size on RCAmatanPlayerController_RestartFrom");
static_assert(offsetof(RCAmatanPlayerController_RestartFrom, After) == 0x000000, "Member 'RCAmatanPlayerController_RestartFrom::After' has a wrong offset!");
static_assert(offsetof(RCAmatanPlayerController_RestartFrom, StartPoint) == 0x000004, "Member 'RCAmatanPlayerController_RestartFrom::StartPoint' has a wrong offset!");

// Function RC.RCAmatanPlayerController.Resume
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_Resume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_Resume) == 0x000001, "Wrong alignment on RCAmatanPlayerController_Resume");
static_assert(sizeof(RCAmatanPlayerController_Resume) == 0x000001, "Wrong size on RCAmatanPlayerController_Resume");
static_assert(offsetof(RCAmatanPlayerController_Resume, ReturnValue) == 0x000000, "Member 'RCAmatanPlayerController_Resume::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPlayerController.SetAnswer
// 0x0010 (0x0010 - 0x0000)
struct RCAmatanPlayerController_SetAnswer final
{
public:
	TArray<int32>                                 NewAnswer;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_SetAnswer) == 0x000008, "Wrong alignment on RCAmatanPlayerController_SetAnswer");
static_assert(sizeof(RCAmatanPlayerController_SetAnswer) == 0x000010, "Wrong size on RCAmatanPlayerController_SetAnswer");
static_assert(offsetof(RCAmatanPlayerController_SetAnswer, NewAnswer) == 0x000000, "Member 'RCAmatanPlayerController_SetAnswer::NewAnswer' has a wrong offset!");

// Function RC.RCAmatanPlayerController.SetEventScene
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_SetEventScene final
{
public:
	bool                                          Event;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_SetEventScene) == 0x000001, "Wrong alignment on RCAmatanPlayerController_SetEventScene");
static_assert(sizeof(RCAmatanPlayerController_SetEventScene) == 0x000001, "Wrong size on RCAmatanPlayerController_SetEventScene");
static_assert(offsetof(RCAmatanPlayerController_SetEventScene, Event) == 0x000000, "Member 'RCAmatanPlayerController_SetEventScene::Event' has a wrong offset!");

// Function RC.RCAmatanPlayerController.SetForceArming
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_SetForceArming final
{
public:
	bool                                          UpdateUI;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_SetForceArming) == 0x000001, "Wrong alignment on RCAmatanPlayerController_SetForceArming");
static_assert(sizeof(RCAmatanPlayerController_SetForceArming) == 0x000001, "Wrong size on RCAmatanPlayerController_SetForceArming");
static_assert(offsetof(RCAmatanPlayerController_SetForceArming, UpdateUI) == 0x000000, "Member 'RCAmatanPlayerController_SetForceArming::UpdateUI' has a wrong offset!");

// Function RC.RCAmatanPlayerController.SetNiagaraBlueprint
// 0x0008 (0x0008 - 0x0000)
struct RCAmatanPlayerController_SetNiagaraBlueprint final
{
public:
	class ANiagaraActor*                          bp;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_SetNiagaraBlueprint) == 0x000008, "Wrong alignment on RCAmatanPlayerController_SetNiagaraBlueprint");
static_assert(sizeof(RCAmatanPlayerController_SetNiagaraBlueprint) == 0x000008, "Wrong size on RCAmatanPlayerController_SetNiagaraBlueprint");
static_assert(offsetof(RCAmatanPlayerController_SetNiagaraBlueprint, bp) == 0x000000, "Member 'RCAmatanPlayerController_SetNiagaraBlueprint::bp' has a wrong offset!");

// Function RC.RCAmatanPlayerController.SetSaveable
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_SetSaveable final
{
public:
	bool                                          Save;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_SetSaveable) == 0x000001, "Wrong alignment on RCAmatanPlayerController_SetSaveable");
static_assert(sizeof(RCAmatanPlayerController_SetSaveable) == 0x000001, "Wrong size on RCAmatanPlayerController_SetSaveable");
static_assert(offsetof(RCAmatanPlayerController_SetSaveable, Save) == 0x000000, "Member 'RCAmatanPlayerController_SetSaveable::Save' has a wrong offset!");

// Function RC.RCAmatanPlayerController.SetSkippable
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_SetSkippable final
{
public:
	bool                                          Skippable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_SetSkippable) == 0x000001, "Wrong alignment on RCAmatanPlayerController_SetSkippable");
static_assert(sizeof(RCAmatanPlayerController_SetSkippable) == 0x000001, "Wrong size on RCAmatanPlayerController_SetSkippable");
static_assert(offsetof(RCAmatanPlayerController_SetSkippable, Skippable) == 0x000000, "Member 'RCAmatanPlayerController_SetSkippable::Skippable' has a wrong offset!");

// Function RC.RCAmatanPlayerController.StartPlay
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_StartPlay final
{
public:
	ERCRealPlayerGameMode                         InGameMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_StartPlay) == 0x000001, "Wrong alignment on RCAmatanPlayerController_StartPlay");
static_assert(sizeof(RCAmatanPlayerController_StartPlay) == 0x000001, "Wrong size on RCAmatanPlayerController_StartPlay");
static_assert(offsetof(RCAmatanPlayerController_StartPlay, InGameMode) == 0x000000, "Member 'RCAmatanPlayerController_StartPlay::InGameMode' has a wrong offset!");

// Function RC.RCAmatanPlayerController.UnsetForceArming
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_UnsetForceArming final
{
public:
	bool                                          UpdateUI;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_UnsetForceArming) == 0x000001, "Wrong alignment on RCAmatanPlayerController_UnsetForceArming");
static_assert(sizeof(RCAmatanPlayerController_UnsetForceArming) == 0x000001, "Wrong size on RCAmatanPlayerController_UnsetForceArming");
static_assert(offsetof(RCAmatanPlayerController_UnsetForceArming, UpdateUI) == 0x000000, "Member 'RCAmatanPlayerController_UnsetForceArming::UpdateUI' has a wrong offset!");

// Function RC.RCAmatanPlayerController.Voice
// 0x0008 (0x0008 - 0x0000)
struct RCAmatanPlayerController_Voice final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_Voice) == 0x000004, "Wrong alignment on RCAmatanPlayerController_Voice");
static_assert(sizeof(RCAmatanPlayerController_Voice) == 0x000008, "Wrong size on RCAmatanPlayerController_Voice");
static_assert(offsetof(RCAmatanPlayerController_Voice, ID) == 0x000000, "Member 'RCAmatanPlayerController_Voice::ID' has a wrong offset!");

// Function RC.RCAmatanPlayerController.CanExtendArm
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_CanExtendArm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_CanExtendArm) == 0x000001, "Wrong alignment on RCAmatanPlayerController_CanExtendArm");
static_assert(sizeof(RCAmatanPlayerController_CanExtendArm) == 0x000001, "Wrong size on RCAmatanPlayerController_CanExtendArm");
static_assert(offsetof(RCAmatanPlayerController_CanExtendArm, ReturnValue) == 0x000000, "Member 'RCAmatanPlayerController_CanExtendArm::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPlayerController.GetSaveable
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_GetSaveable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_GetSaveable) == 0x000001, "Wrong alignment on RCAmatanPlayerController_GetSaveable");
static_assert(sizeof(RCAmatanPlayerController_GetSaveable) == 0x000001, "Wrong size on RCAmatanPlayerController_GetSaveable");
static_assert(offsetof(RCAmatanPlayerController_GetSaveable, ReturnValue) == 0x000000, "Member 'RCAmatanPlayerController_GetSaveable::ReturnValue' has a wrong offset!");

// Function RC.RCAmatanPlayerController.IsMovementLocked
// 0x0001 (0x0001 - 0x0000)
struct RCAmatanPlayerController_IsMovementLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAmatanPlayerController_IsMovementLocked) == 0x000001, "Wrong alignment on RCAmatanPlayerController_IsMovementLocked");
static_assert(sizeof(RCAmatanPlayerController_IsMovementLocked) == 0x000001, "Wrong size on RCAmatanPlayerController_IsMovementLocked");
static_assert(offsetof(RCAmatanPlayerController_IsMovementLocked, ReturnValue) == 0x000000, "Member 'RCAmatanPlayerController_IsMovementLocked::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveImageWidget.AddChildLL
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleDetectiveImageWidget_AddChildLL final
{
public:
	class UUserWidget*                            targetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveImageWidget_AddChildLL) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveImageWidget_AddChildLL");
static_assert(sizeof(RCNzUiFinaleDetectiveImageWidget_AddChildLL) == 0x000008, "Wrong size on RCNzUiFinaleDetectiveImageWidget_AddChildLL");
static_assert(offsetof(RCNzUiFinaleDetectiveImageWidget_AddChildLL, targetWidget) == 0x000000, "Member 'RCNzUiFinaleDetectiveImageWidget_AddChildLL::targetWidget' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveImageWidget.AddChildLR
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleDetectiveImageWidget_AddChildLR final
{
public:
	class UUserWidget*                            targetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveImageWidget_AddChildLR) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveImageWidget_AddChildLR");
static_assert(sizeof(RCNzUiFinaleDetectiveImageWidget_AddChildLR) == 0x000008, "Wrong size on RCNzUiFinaleDetectiveImageWidget_AddChildLR");
static_assert(offsetof(RCNzUiFinaleDetectiveImageWidget_AddChildLR, targetWidget) == 0x000000, "Member 'RCNzUiFinaleDetectiveImageWidget_AddChildLR::targetWidget' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveImageWidget.AddChildRL
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleDetectiveImageWidget_AddChildRL final
{
public:
	class UUserWidget*                            targetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveImageWidget_AddChildRL) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveImageWidget_AddChildRL");
static_assert(sizeof(RCNzUiFinaleDetectiveImageWidget_AddChildRL) == 0x000008, "Wrong size on RCNzUiFinaleDetectiveImageWidget_AddChildRL");
static_assert(offsetof(RCNzUiFinaleDetectiveImageWidget_AddChildRL, targetWidget) == 0x000000, "Member 'RCNzUiFinaleDetectiveImageWidget_AddChildRL::targetWidget' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveImageWidget.AddChildRR
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleDetectiveImageWidget_AddChildRR final
{
public:
	class UUserWidget*                            targetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveImageWidget_AddChildRR) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveImageWidget_AddChildRR");
static_assert(sizeof(RCNzUiFinaleDetectiveImageWidget_AddChildRR) == 0x000008, "Wrong size on RCNzUiFinaleDetectiveImageWidget_AddChildRR");
static_assert(offsetof(RCNzUiFinaleDetectiveImageWidget_AddChildRR, targetWidget) == 0x000000, "Member 'RCNzUiFinaleDetectiveImageWidget_AddChildRR::targetWidget' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveImageWidget.SetLeftPage
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinaleDetectiveImageWidget_SetLeftPage final
{
public:
	TSubclassOf<class UUserWidget>                pageClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCNzUiFinaleInteractImgInfo>   PieceImgList;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveImageWidget_SetLeftPage) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveImageWidget_SetLeftPage");
static_assert(sizeof(RCNzUiFinaleDetectiveImageWidget_SetLeftPage) == 0x000018, "Wrong size on RCNzUiFinaleDetectiveImageWidget_SetLeftPage");
static_assert(offsetof(RCNzUiFinaleDetectiveImageWidget_SetLeftPage, pageClass) == 0x000000, "Member 'RCNzUiFinaleDetectiveImageWidget_SetLeftPage::pageClass' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleDetectiveImageWidget_SetLeftPage, PieceImgList) == 0x000008, "Member 'RCNzUiFinaleDetectiveImageWidget_SetLeftPage::PieceImgList' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveImageWidget.SetRightPage
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinaleDetectiveImageWidget_SetRightPage final
{
public:
	TSubclassOf<class UUserWidget>                pageClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCNzUiFinaleInteractImgInfo>   PieceImgList;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveImageWidget_SetRightPage) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveImageWidget_SetRightPage");
static_assert(sizeof(RCNzUiFinaleDetectiveImageWidget_SetRightPage) == 0x000018, "Wrong size on RCNzUiFinaleDetectiveImageWidget_SetRightPage");
static_assert(offsetof(RCNzUiFinaleDetectiveImageWidget_SetRightPage, pageClass) == 0x000000, "Member 'RCNzUiFinaleDetectiveImageWidget_SetRightPage::pageClass' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleDetectiveImageWidget_SetRightPage, PieceImgList) == 0x000008, "Member 'RCNzUiFinaleDetectiveImageWidget_SetRightPage::PieceImgList' has a wrong offset!");

// Function RC.RCInstallBFL.IsInstallComplete
// 0x0001 (0x0001 - 0x0000)
struct RCInstallBFL_IsInstallComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInstallBFL_IsInstallComplete) == 0x000001, "Wrong alignment on RCInstallBFL_IsInstallComplete");
static_assert(sizeof(RCInstallBFL_IsInstallComplete) == 0x000001, "Wrong size on RCInstallBFL_IsInstallComplete");
static_assert(offsetof(RCInstallBFL_IsInstallComplete, ReturnValue) == 0x000000, "Member 'RCInstallBFL_IsInstallComplete::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleTimer.GetBattleTimerStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleTimer_GetBattleTimerStatus final
{
public:
	ERCNzUiBattleTimerStatus                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleTimer_GetBattleTimerStatus) == 0x000001, "Wrong alignment on RCNzUiBattleTimer_GetBattleTimerStatus");
static_assert(sizeof(RCNzUiBattleTimer_GetBattleTimerStatus) == 0x000001, "Wrong size on RCNzUiBattleTimer_GetBattleTimerStatus");
static_assert(offsetof(RCNzUiBattleTimer_GetBattleTimerStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleTimer_GetBattleTimerStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleTimer.SetElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleTimer_SetElapsedTime final
{
public:
	float                                         InElapsedTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLimitTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleTimer_SetElapsedTime) == 0x000004, "Wrong alignment on RCNzUiBattleTimer_SetElapsedTime");
static_assert(sizeof(RCNzUiBattleTimer_SetElapsedTime) == 0x000008, "Wrong size on RCNzUiBattleTimer_SetElapsedTime");
static_assert(offsetof(RCNzUiBattleTimer_SetElapsedTime, InElapsedTime) == 0x000000, "Member 'RCNzUiBattleTimer_SetElapsedTime::InElapsedTime' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleTimer_SetElapsedTime, InLimitTime) == 0x000004, "Member 'RCNzUiBattleTimer_SetElapsedTime::InLimitTime' has a wrong offset!");

// Function RC.RCNzUiBattleTimer.SetTime
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleTimer_SetTime final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLimitTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleTimer_SetTime) == 0x000004, "Wrong alignment on RCNzUiBattleTimer_SetTime");
static_assert(sizeof(RCNzUiBattleTimer_SetTime) == 0x000008, "Wrong size on RCNzUiBattleTimer_SetTime");
static_assert(offsetof(RCNzUiBattleTimer_SetTime, InTime) == 0x000000, "Member 'RCNzUiBattleTimer_SetTime::InTime' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleTimer_SetTime, InLimitTime) == 0x000004, "Member 'RCNzUiBattleTimer_SetTime::InLimitTime' has a wrong offset!");

// Function RC.RCKakiwariRender.SetKakiwariMotionIndex
// 0x0004 (0x0004 - 0x0000)
struct RCKakiwariRender_SetKakiwariMotionIndex final
{
public:
	int32                                         InMotionIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCKakiwariRender_SetKakiwariMotionIndex) == 0x000004, "Wrong alignment on RCKakiwariRender_SetKakiwariMotionIndex");
static_assert(sizeof(RCKakiwariRender_SetKakiwariMotionIndex) == 0x000004, "Wrong size on RCKakiwariRender_SetKakiwariMotionIndex");
static_assert(offsetof(RCKakiwariRender_SetKakiwariMotionIndex, InMotionIndex) == 0x000000, "Member 'RCKakiwariRender_SetKakiwariMotionIndex::InMotionIndex' has a wrong offset!");

// Function RC.RCKakiwariRender.GetKakiwariMotionIndex
// 0x0004 (0x0004 - 0x0000)
struct RCKakiwariRender_GetKakiwariMotionIndex final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCKakiwariRender_GetKakiwariMotionIndex) == 0x000004, "Wrong alignment on RCKakiwariRender_GetKakiwariMotionIndex");
static_assert(sizeof(RCKakiwariRender_GetKakiwariMotionIndex) == 0x000004, "Wrong size on RCKakiwariRender_GetKakiwariMotionIndex");
static_assert(offsetof(RCKakiwariRender_GetKakiwariMotionIndex, ReturnValue) == 0x000000, "Member 'RCKakiwariRender_GetKakiwariMotionIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.AddDamage
// 0x000C (0x000C - 0x0000)
struct RCNzUiFinaleWidget_AddDamage final
{
public:
	int32                                         AddDamage_0;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutResultHP;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleWidget_AddDamage) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_AddDamage");
static_assert(sizeof(RCNzUiFinaleWidget_AddDamage) == 0x00000C, "Wrong size on RCNzUiFinaleWidget_AddDamage");
static_assert(offsetof(RCNzUiFinaleWidget_AddDamage, AddDamage_0) == 0x000000, "Member 'RCNzUiFinaleWidget_AddDamage::AddDamage_0' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_AddDamage, OutResultHP) == 0x000004, "Member 'RCNzUiFinaleWidget_AddDamage::OutResultHP' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_AddDamage, ReturnValue) == 0x000008, "Member 'RCNzUiFinaleWidget_AddDamage::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.AddPieceList
// 0x0058 (0x0058 - 0x0000)
struct RCNzUiFinaleWidget_AddPieceList final
{
public:
	struct FRCNzFinalePieceObjectInfo             pieceInfo;                                         // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_AddPieceList) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_AddPieceList");
static_assert(sizeof(RCNzUiFinaleWidget_AddPieceList) == 0x000058, "Wrong size on RCNzUiFinaleWidget_AddPieceList");
static_assert(offsetof(RCNzUiFinaleWidget_AddPieceList, pieceInfo) == 0x000000, "Member 'RCNzUiFinaleWidget_AddPieceList::pieceInfo' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.ChangeSelectPieceEvent
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiFinaleWidget_ChangeSelectPieceEvent final
{
public:
	class FString                                 PieceTitle;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PieceDetail;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         isLock;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUsed;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUnlock;                                          // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleWidget_ChangeSelectPieceEvent) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_ChangeSelectPieceEvent");
static_assert(sizeof(RCNzUiFinaleWidget_ChangeSelectPieceEvent) == 0x000020, "Wrong size on RCNzUiFinaleWidget_ChangeSelectPieceEvent");
static_assert(offsetof(RCNzUiFinaleWidget_ChangeSelectPieceEvent, PieceTitle) == 0x000000, "Member 'RCNzUiFinaleWidget_ChangeSelectPieceEvent::PieceTitle' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_ChangeSelectPieceEvent, PieceDetail) == 0x000010, "Member 'RCNzUiFinaleWidget_ChangeSelectPieceEvent::PieceDetail' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_ChangeSelectPieceEvent, isLock) == 0x000018, "Member 'RCNzUiFinaleWidget_ChangeSelectPieceEvent::isLock' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_ChangeSelectPieceEvent, isUsed) == 0x00001C, "Member 'RCNzUiFinaleWidget_ChangeSelectPieceEvent::isUsed' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_ChangeSelectPieceEvent, isUnlock) == 0x00001D, "Member 'RCNzUiFinaleWidget_ChangeSelectPieceEvent::isUnlock' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.FinishedQuestionFinishAnimation
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_FinishedQuestionFinishAnimation final
{
public:
	bool                                          isSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_FinishedQuestionFinishAnimation) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_FinishedQuestionFinishAnimation");
static_assert(sizeof(RCNzUiFinaleWidget_FinishedQuestionFinishAnimation) == 0x000001, "Wrong size on RCNzUiFinaleWidget_FinishedQuestionFinishAnimation");
static_assert(offsetof(RCNzUiFinaleWidget_FinishedQuestionFinishAnimation, isSuccess) == 0x000000, "Member 'RCNzUiFinaleWidget_FinishedQuestionFinishAnimation::isSuccess' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetCurrentSelectedPieceIdx
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_GetCurrentSelectedPieceIdx final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetCurrentSelectedPieceIdx) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_GetCurrentSelectedPieceIdx");
static_assert(sizeof(RCNzUiFinaleWidget_GetCurrentSelectedPieceIdx) == 0x000004, "Wrong size on RCNzUiFinaleWidget_GetCurrentSelectedPieceIdx");
static_assert(offsetof(RCNzUiFinaleWidget_GetCurrentSelectedPieceIdx, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetCurrentSelectedPieceIdx::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetCurrentSelectPiece
// 0x0058 (0x0058 - 0x0000)
struct RCNzUiFinaleWidget_GetCurrentSelectPiece final
{
public:
	struct FRCNzFinalePieceObjectInfo             ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetCurrentSelectPiece) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_GetCurrentSelectPiece");
static_assert(sizeof(RCNzUiFinaleWidget_GetCurrentSelectPiece) == 0x000058, "Wrong size on RCNzUiFinaleWidget_GetCurrentSelectPiece");
static_assert(offsetof(RCNzUiFinaleWidget_GetCurrentSelectPiece, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetCurrentSelectPiece::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetIndexListParentWidget
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleWidget_GetIndexListParentWidget final
{
public:
	class URCNzUiFinaleIndexListParentWidget*     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetIndexListParentWidget) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_GetIndexListParentWidget");
static_assert(sizeof(RCNzUiFinaleWidget_GetIndexListParentWidget) == 0x000008, "Wrong size on RCNzUiFinaleWidget_GetIndexListParentWidget");
static_assert(offsetof(RCNzUiFinaleWidget_GetIndexListParentWidget, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetIndexListParentWidget::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetIndexListWidget
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleWidget_GetIndexListWidget final
{
public:
	class URCNzUiFinaleIndexListWidget*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetIndexListWidget) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_GetIndexListWidget");
static_assert(sizeof(RCNzUiFinaleWidget_GetIndexListWidget) == 0x000008, "Wrong size on RCNzUiFinaleWidget_GetIndexListWidget");
static_assert(offsetof(RCNzUiFinaleWidget_GetIndexListWidget, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetIndexListWidget::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetIsHoverdPieceList
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_GetIsHoverdPieceList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetIsHoverdPieceList) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_GetIsHoverdPieceList");
static_assert(sizeof(RCNzUiFinaleWidget_GetIsHoverdPieceList) == 0x000001, "Wrong size on RCNzUiFinaleWidget_GetIsHoverdPieceList");
static_assert(offsetof(RCNzUiFinaleWidget_GetIsHoverdPieceList, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetIsHoverdPieceList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetOneLinePieceItemNum
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_GetOneLinePieceItemNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetOneLinePieceItemNum) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_GetOneLinePieceItemNum");
static_assert(sizeof(RCNzUiFinaleWidget_GetOneLinePieceItemNum) == 0x000004, "Wrong size on RCNzUiFinaleWidget_GetOneLinePieceItemNum");
static_assert(offsetof(RCNzUiFinaleWidget_GetOneLinePieceItemNum, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetOneLinePieceItemNum::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetPGLayoutLocationAndSize
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleWidget_GetPGLayoutLocationAndSize final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetPGLayoutLocationAndSize) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_GetPGLayoutLocationAndSize");
static_assert(sizeof(RCNzUiFinaleWidget_GetPGLayoutLocationAndSize) == 0x000010, "Wrong size on RCNzUiFinaleWidget_GetPGLayoutLocationAndSize");
static_assert(offsetof(RCNzUiFinaleWidget_GetPGLayoutLocationAndSize, Location) == 0x000000, "Member 'RCNzUiFinaleWidget_GetPGLayoutLocationAndSize::Location' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_GetPGLayoutLocationAndSize, Size) == 0x000008, "Member 'RCNzUiFinaleWidget_GetPGLayoutLocationAndSize::Size' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetPGLayoutWidget
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleWidget_GetPGLayoutWidget final
{
public:
	class URCNzUiFinalePGLayoutWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetPGLayoutWidget) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_GetPGLayoutWidget");
static_assert(sizeof(RCNzUiFinaleWidget_GetPGLayoutWidget) == 0x000008, "Wrong size on RCNzUiFinaleWidget_GetPGLayoutWidget");
static_assert(offsetof(RCNzUiFinaleWidget_GetPGLayoutWidget, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetPGLayoutWidget::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetPieceListItemLArray
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleWidget_GetPieceListItemLArray final
{
public:
	TArray<class URCNzUiFinalePieceList_PieceBase*> ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetPieceListItemLArray) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_GetPieceListItemLArray");
static_assert(sizeof(RCNzUiFinaleWidget_GetPieceListItemLArray) == 0x000010, "Wrong size on RCNzUiFinaleWidget_GetPieceListItemLArray");
static_assert(offsetof(RCNzUiFinaleWidget_GetPieceListItemLArray, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetPieceListItemLArray::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetPieceListLAngle
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_GetPieceListLAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetPieceListLAngle) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_GetPieceListLAngle");
static_assert(sizeof(RCNzUiFinaleWidget_GetPieceListLAngle) == 0x000004, "Wrong size on RCNzUiFinaleWidget_GetPieceListLAngle");
static_assert(offsetof(RCNzUiFinaleWidget_GetPieceListLAngle, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetPieceListLAngle::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetPieceListLScale
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleWidget_GetPieceListLScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetPieceListLScale) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_GetPieceListLScale");
static_assert(sizeof(RCNzUiFinaleWidget_GetPieceListLScale) == 0x000008, "Wrong size on RCNzUiFinaleWidget_GetPieceListLScale");
static_assert(offsetof(RCNzUiFinaleWidget_GetPieceListLScale, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetPieceListLScale::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetPieceLListParentSize
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleWidget_GetPieceLListParentSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetPieceLListParentSize) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_GetPieceLListParentSize");
static_assert(sizeof(RCNzUiFinaleWidget_GetPieceLListParentSize) == 0x000008, "Wrong size on RCNzUiFinaleWidget_GetPieceLListParentSize");
static_assert(offsetof(RCNzUiFinaleWidget_GetPieceLListParentSize, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetPieceLListParentSize::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetPieceSListParentLocAndSize
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleWidget_GetPieceSListParentLocAndSize final
{
public:
	struct FVector2D                              Loc;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetPieceSListParentLocAndSize) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_GetPieceSListParentLocAndSize");
static_assert(sizeof(RCNzUiFinaleWidget_GetPieceSListParentLocAndSize) == 0x000010, "Wrong size on RCNzUiFinaleWidget_GetPieceSListParentLocAndSize");
static_assert(offsetof(RCNzUiFinaleWidget_GetPieceSListParentLocAndSize, Loc) == 0x000000, "Member 'RCNzUiFinaleWidget_GetPieceSListParentLocAndSize::Loc' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_GetPieceSListParentLocAndSize, Size) == 0x000008, "Member 'RCNzUiFinaleWidget_GetPieceSListParentLocAndSize::Size' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetPieceSLocationAndSize
// 0x0014 (0x0014 - 0x0000)
struct RCNzUiFinaleWidget_GetPieceSLocationAndSize final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Loc;                                               // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetPieceSLocationAndSize) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_GetPieceSLocationAndSize");
static_assert(sizeof(RCNzUiFinaleWidget_GetPieceSLocationAndSize) == 0x000014, "Wrong size on RCNzUiFinaleWidget_GetPieceSLocationAndSize");
static_assert(offsetof(RCNzUiFinaleWidget_GetPieceSLocationAndSize, idx) == 0x000000, "Member 'RCNzUiFinaleWidget_GetPieceSLocationAndSize::idx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_GetPieceSLocationAndSize, Loc) == 0x000004, "Member 'RCNzUiFinaleWidget_GetPieceSLocationAndSize::Loc' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_GetPieceSLocationAndSize, Size) == 0x00000C, "Member 'RCNzUiFinaleWidget_GetPieceSLocationAndSize::Size' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.GetQuestionWidget
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleWidget_GetQuestionWidget final
{
public:
	class URCNzUiFinaleQuestionWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_GetQuestionWidget) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_GetQuestionWidget");
static_assert(sizeof(RCNzUiFinaleWidget_GetQuestionWidget) == 0x000008, "Wrong size on RCNzUiFinaleWidget_GetQuestionWidget");
static_assert(offsetof(RCNzUiFinaleWidget_GetQuestionWidget, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_GetQuestionWidget::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.InitializeHPBar
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_InitializeHPBar final
{
public:
	float                                         HpMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_InitializeHPBar) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_InitializeHPBar");
static_assert(sizeof(RCNzUiFinaleWidget_InitializeHPBar) == 0x000004, "Wrong size on RCNzUiFinaleWidget_InitializeHPBar");
static_assert(offsetof(RCNzUiFinaleWidget_InitializeHPBar, HpMax) == 0x000000, "Member 'RCNzUiFinaleWidget_InitializeHPBar::HpMax' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.InitializeIndexList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleWidget_InitializeIndexList final
{
public:
	class FString                                 chNumStr;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_InitializeIndexList) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_InitializeIndexList");
static_assert(sizeof(RCNzUiFinaleWidget_InitializeIndexList) == 0x000010, "Wrong size on RCNzUiFinaleWidget_InitializeIndexList");
static_assert(offsetof(RCNzUiFinaleWidget_InitializeIndexList, chNumStr) == 0x000000, "Member 'RCNzUiFinaleWidget_InitializeIndexList::chNumStr' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.InitializePieceList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleWidget_InitializePieceList final
{
public:
	TArray<struct FRCNzFinalePieceObjectInfo>     pieceList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_InitializePieceList) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_InitializePieceList");
static_assert(sizeof(RCNzUiFinaleWidget_InitializePieceList) == 0x000010, "Wrong size on RCNzUiFinaleWidget_InitializePieceList");
static_assert(offsetof(RCNzUiFinaleWidget_InitializePieceList, pieceList) == 0x000000, "Member 'RCNzUiFinaleWidget_InitializePieceList::pieceList' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.IsDebugDrawFlag
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_IsDebugDrawFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_IsDebugDrawFlag) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_IsDebugDrawFlag");
static_assert(sizeof(RCNzUiFinaleWidget_IsDebugDrawFlag) == 0x000001, "Wrong size on RCNzUiFinaleWidget_IsDebugDrawFlag");
static_assert(offsetof(RCNzUiFinaleWidget_IsDebugDrawFlag, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_IsDebugDrawFlag::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.IsDetailPieceListMode
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_IsDetailPieceListMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_IsDetailPieceListMode) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_IsDetailPieceListMode");
static_assert(sizeof(RCNzUiFinaleWidget_IsDetailPieceListMode) == 0x000001, "Wrong size on RCNzUiFinaleWidget_IsDetailPieceListMode");
static_assert(offsetof(RCNzUiFinaleWidget_IsDetailPieceListMode, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_IsDetailPieceListMode::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.IsShowKomaDescriptionTextUI
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_IsShowKomaDescriptionTextUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_IsShowKomaDescriptionTextUI) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_IsShowKomaDescriptionTextUI");
static_assert(sizeof(RCNzUiFinaleWidget_IsShowKomaDescriptionTextUI) == 0x000001, "Wrong size on RCNzUiFinaleWidget_IsShowKomaDescriptionTextUI");
static_assert(offsetof(RCNzUiFinaleWidget_IsShowKomaDescriptionTextUI, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_IsShowKomaDescriptionTextUI::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.IsShowQuestionTextUI
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_IsShowQuestionTextUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_IsShowQuestionTextUI) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_IsShowQuestionTextUI");
static_assert(sizeof(RCNzUiFinaleWidget_IsShowQuestionTextUI) == 0x000001, "Wrong size on RCNzUiFinaleWidget_IsShowQuestionTextUI");
static_assert(offsetof(RCNzUiFinaleWidget_IsShowQuestionTextUI, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_IsShowQuestionTextUI::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.IsVisiblePieceList
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_IsVisiblePieceList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_IsVisiblePieceList) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_IsVisiblePieceList");
static_assert(sizeof(RCNzUiFinaleWidget_IsVisiblePieceList) == 0x000001, "Wrong size on RCNzUiFinaleWidget_IsVisiblePieceList");
static_assert(offsetof(RCNzUiFinaleWidget_IsVisiblePieceList, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleWidget_IsVisiblePieceList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.MoveDetectiveConstruct
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleWidget_MoveDetectiveConstruct final
{
public:
	TArray<bool>                                  isCheckList;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_MoveDetectiveConstruct) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_MoveDetectiveConstruct");
static_assert(sizeof(RCNzUiFinaleWidget_MoveDetectiveConstruct) == 0x000010, "Wrong size on RCNzUiFinaleWidget_MoveDetectiveConstruct");
static_assert(offsetof(RCNzUiFinaleWidget_MoveDetectiveConstruct, isCheckList) == 0x000000, "Member 'RCNzUiFinaleWidget_MoveDetectiveConstruct::isCheckList' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetDelayUnLockAnimTime
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_SetDelayUnLockAnimTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetDelayUnLockAnimTime) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_SetDelayUnLockAnimTime");
static_assert(sizeof(RCNzUiFinaleWidget_SetDelayUnLockAnimTime) == 0x000004, "Wrong size on RCNzUiFinaleWidget_SetDelayUnLockAnimTime");
static_assert(offsetof(RCNzUiFinaleWidget_SetDelayUnLockAnimTime, Time) == 0x000000, "Member 'RCNzUiFinaleWidget_SetDelayUnLockAnimTime::Time' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetIsHoverdPieceList
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_SetIsHoverdPieceList final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetIsHoverdPieceList) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_SetIsHoverdPieceList");
static_assert(sizeof(RCNzUiFinaleWidget_SetIsHoverdPieceList) == 0x000001, "Wrong size on RCNzUiFinaleWidget_SetIsHoverdPieceList");
static_assert(offsetof(RCNzUiFinaleWidget_SetIsHoverdPieceList, Val) == 0x000000, "Member 'RCNzUiFinaleWidget_SetIsHoverdPieceList::Val' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetPageMoveDirIconVisiblity
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_SetPageMoveDirIconVisiblity final
{
public:
	EPageMoveVisibleDirection                     Visiblity;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetPageMoveDirIconVisiblity) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_SetPageMoveDirIconVisiblity");
static_assert(sizeof(RCNzUiFinaleWidget_SetPageMoveDirIconVisiblity) == 0x000001, "Wrong size on RCNzUiFinaleWidget_SetPageMoveDirIconVisiblity");
static_assert(offsetof(RCNzUiFinaleWidget_SetPageMoveDirIconVisiblity, Visiblity) == 0x000000, "Member 'RCNzUiFinaleWidget_SetPageMoveDirIconVisiblity::Visiblity' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetQuestionRestNum
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_SetQuestionRestNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetQuestionRestNum) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_SetQuestionRestNum");
static_assert(sizeof(RCNzUiFinaleWidget_SetQuestionRestNum) == 0x000004, "Wrong size on RCNzUiFinaleWidget_SetQuestionRestNum");
static_assert(offsetof(RCNzUiFinaleWidget_SetQuestionRestNum, Num) == 0x000000, "Member 'RCNzUiFinaleWidget_SetQuestionRestNum::Num' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetSectionText
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiFinaleWidget_SetSectionText final
{
public:
	class FString                                 sectionText1;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sectionText2;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetSectionText) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_SetSectionText");
static_assert(sizeof(RCNzUiFinaleWidget_SetSectionText) == 0x000020, "Wrong size on RCNzUiFinaleWidget_SetSectionText");
static_assert(offsetof(RCNzUiFinaleWidget_SetSectionText, sectionText1) == 0x000000, "Member 'RCNzUiFinaleWidget_SetSectionText::sectionText1' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_SetSectionText, sectionText2) == 0x000010, "Member 'RCNzUiFinaleWidget_SetSectionText::sectionText2' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetTime
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_SetTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetTime) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_SetTime");
static_assert(sizeof(RCNzUiFinaleWidget_SetTime) == 0x000004, "Wrong size on RCNzUiFinaleWidget_SetTime");
static_assert(offsetof(RCNzUiFinaleWidget_SetTime, Time) == 0x000000, "Member 'RCNzUiFinaleWidget_SetTime::Time' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetTimeLimitAlertTimingScale
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_SetTimeLimitAlertTimingScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetTimeLimitAlertTimingScale) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_SetTimeLimitAlertTimingScale");
static_assert(sizeof(RCNzUiFinaleWidget_SetTimeLimitAlertTimingScale) == 0x000004, "Wrong size on RCNzUiFinaleWidget_SetTimeLimitAlertTimingScale");
static_assert(offsetof(RCNzUiFinaleWidget_SetTimeLimitAlertTimingScale, Scale) == 0x000000, "Member 'RCNzUiFinaleWidget_SetTimeLimitAlertTimingScale::Scale' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_SetTimeScale final
{
public:
	float                                         TimeScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetTimeScale) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_SetTimeScale");
static_assert(sizeof(RCNzUiFinaleWidget_SetTimeScale) == 0x000004, "Wrong size on RCNzUiFinaleWidget_SetTimeScale");
static_assert(offsetof(RCNzUiFinaleWidget_SetTimeScale, TimeScale) == 0x000000, "Member 'RCNzUiFinaleWidget_SetTimeScale::TimeScale' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetVisibleHPBar
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_SetVisibleHPBar final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetVisibleHPBar) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_SetVisibleHPBar");
static_assert(sizeof(RCNzUiFinaleWidget_SetVisibleHPBar) == 0x000001, "Wrong size on RCNzUiFinaleWidget_SetVisibleHPBar");
static_assert(offsetof(RCNzUiFinaleWidget_SetVisibleHPBar, IsVisible_0) == 0x000000, "Member 'RCNzUiFinaleWidget_SetVisibleHPBar::IsVisible_0' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetVisibleIndexBtnGuide
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_SetVisibleIndexBtnGuide final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetVisibleIndexBtnGuide) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_SetVisibleIndexBtnGuide");
static_assert(sizeof(RCNzUiFinaleWidget_SetVisibleIndexBtnGuide) == 0x000001, "Wrong size on RCNzUiFinaleWidget_SetVisibleIndexBtnGuide");
static_assert(offsetof(RCNzUiFinaleWidget_SetVisibleIndexBtnGuide, IsVisible_0) == 0x000000, "Member 'RCNzUiFinaleWidget_SetVisibleIndexBtnGuide::IsVisible_0' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetVisiblePieceList
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_SetVisiblePieceList final
{
public:
	bool                                          isShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetVisiblePieceList) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_SetVisiblePieceList");
static_assert(sizeof(RCNzUiFinaleWidget_SetVisiblePieceList) == 0x000001, "Wrong size on RCNzUiFinaleWidget_SetVisiblePieceList");
static_assert(offsetof(RCNzUiFinaleWidget_SetVisiblePieceList, isShow) == 0x000000, "Member 'RCNzUiFinaleWidget_SetVisiblePieceList::isShow' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.SetVisiblityDetectiveTitleUI
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleWidget_SetVisiblityDetectiveTitleUI final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_SetVisiblityDetectiveTitleUI) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_SetVisiblityDetectiveTitleUI");
static_assert(sizeof(RCNzUiFinaleWidget_SetVisiblityDetectiveTitleUI) == 0x000001, "Wrong size on RCNzUiFinaleWidget_SetVisiblityDetectiveTitleUI");
static_assert(offsetof(RCNzUiFinaleWidget_SetVisiblityDetectiveTitleUI, IsVisible_0) == 0x000000, "Member 'RCNzUiFinaleWidget_SetVisiblityDetectiveTitleUI::IsVisible_0' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.ShowQuestionFinishAnimation
// 0x000C (0x000C - 0x0000)
struct RCNzUiFinaleWidget_ShowQuestionFinishAnimation final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSuccess;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleWidget_ShowQuestionFinishAnimation) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_ShowQuestionFinishAnimation");
static_assert(sizeof(RCNzUiFinaleWidget_ShowQuestionFinishAnimation) == 0x00000C, "Wrong size on RCNzUiFinaleWidget_ShowQuestionFinishAnimation");
static_assert(offsetof(RCNzUiFinaleWidget_ShowQuestionFinishAnimation, Position) == 0x000000, "Member 'RCNzUiFinaleWidget_ShowQuestionFinishAnimation::Position' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_ShowQuestionFinishAnimation, isSuccess) == 0x000008, "Member 'RCNzUiFinaleWidget_ShowQuestionFinishAnimation::isSuccess' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdateCursorBtnGuide
// 0x0003 (0x0003 - 0x0000)
struct RCNzUiFinaleWidget_UpdateCursorBtnGuide final
{
public:
	ERCInputKeyType                               Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible_0;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_UpdateCursorBtnGuide) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_UpdateCursorBtnGuide");
static_assert(sizeof(RCNzUiFinaleWidget_UpdateCursorBtnGuide) == 0x000003, "Wrong size on RCNzUiFinaleWidget_UpdateCursorBtnGuide");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateCursorBtnGuide, Key) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdateCursorBtnGuide::Key' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateCursorBtnGuide, IsVisible_0) == 0x000001, "Member 'RCNzUiFinaleWidget_UpdateCursorBtnGuide::IsVisible_0' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateCursorBtnGuide, ReturnValue) == 0x000002, "Member 'RCNzUiFinaleWidget_UpdateCursorBtnGuide::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdateDetectiveTitle
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinaleWidget_UpdateDetectiveTitle final
{
public:
	int32                                         Section;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_UpdateDetectiveTitle) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_UpdateDetectiveTitle");
static_assert(sizeof(RCNzUiFinaleWidget_UpdateDetectiveTitle) == 0x000018, "Wrong size on RCNzUiFinaleWidget_UpdateDetectiveTitle");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateDetectiveTitle, Section) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdateDetectiveTitle::Section' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateDetectiveTitle, Title) == 0x000008, "Member 'RCNzUiFinaleWidget_UpdateDetectiveTitle::Title' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdateHPBar
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_UpdateHPBar final
{
public:
	float                                         Hp;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_UpdateHPBar) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_UpdateHPBar");
static_assert(sizeof(RCNzUiFinaleWidget_UpdateHPBar) == 0x000004, "Wrong size on RCNzUiFinaleWidget_UpdateHPBar");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateHPBar, Hp) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdateHPBar::Hp' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdateIndexBtnGuide
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiFinaleWidget_UpdateIndexBtnGuide final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 str;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleWidget_UpdateIndexBtnGuide) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_UpdateIndexBtnGuide");
static_assert(sizeof(RCNzUiFinaleWidget_UpdateIndexBtnGuide) == 0x000020, "Wrong size on RCNzUiFinaleWidget_UpdateIndexBtnGuide");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateIndexBtnGuide, InKeyType) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdateIndexBtnGuide::InKeyType' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateIndexBtnGuide, str) == 0x000008, "Member 'RCNzUiFinaleWidget_UpdateIndexBtnGuide::str' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateIndexBtnGuide, ReturnValue) == 0x000018, "Member 'RCNzUiFinaleWidget_UpdateIndexBtnGuide::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdateLowSpeedBtnGuide
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide final
{
public:
	ERCInputKeyType                               kye;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 str;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide");
static_assert(sizeof(RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide) == 0x000020, "Wrong size on RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide, kye) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide::kye' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide, str) == 0x000008, "Member 'RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide::str' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide, ReturnValue) == 0x000018, "Member 'RCNzUiFinaleWidget_UpdateLowSpeedBtnGuide::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdatePageGuideBtnGuide
// 0x0003 (0x0003 - 0x0000)
struct RCNzUiFinaleWidget_UpdatePageGuideBtnGuide final
{
public:
	ERCInputKeyType                               keyL;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputKeyType                               keyR;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_UpdatePageGuideBtnGuide) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_UpdatePageGuideBtnGuide");
static_assert(sizeof(RCNzUiFinaleWidget_UpdatePageGuideBtnGuide) == 0x000003, "Wrong size on RCNzUiFinaleWidget_UpdatePageGuideBtnGuide");
static_assert(offsetof(RCNzUiFinaleWidget_UpdatePageGuideBtnGuide, keyL) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdatePageGuideBtnGuide::keyL' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdatePageGuideBtnGuide, keyR) == 0x000001, "Member 'RCNzUiFinaleWidget_UpdatePageGuideBtnGuide::keyR' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdatePageGuideBtnGuide, ReturnValue) == 0x000002, "Member 'RCNzUiFinaleWidget_UpdatePageGuideBtnGuide::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdatePieceList
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiFinaleWidget_UpdatePieceList final
{
public:
	TArray<struct FRCNzFinalePieceObjectInfo>     pieceList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRCNzFinalePieceObjectInfo>     releasePieceList;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_UpdatePieceList) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_UpdatePieceList");
static_assert(sizeof(RCNzUiFinaleWidget_UpdatePieceList) == 0x000020, "Wrong size on RCNzUiFinaleWidget_UpdatePieceList");
static_assert(offsetof(RCNzUiFinaleWidget_UpdatePieceList, pieceList) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdatePieceList::pieceList' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdatePieceList, releasePieceList) == 0x000010, "Member 'RCNzUiFinaleWidget_UpdatePieceList::releasePieceList' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdatePieceListBtnGuide
// 0x0002 (0x0002 - 0x0000)
struct RCNzUiFinaleWidget_UpdatePieceListBtnGuide final
{
public:
	ERCInputKeyType                               Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_UpdatePieceListBtnGuide) == 0x000001, "Wrong alignment on RCNzUiFinaleWidget_UpdatePieceListBtnGuide");
static_assert(sizeof(RCNzUiFinaleWidget_UpdatePieceListBtnGuide) == 0x000002, "Wrong size on RCNzUiFinaleWidget_UpdatePieceListBtnGuide");
static_assert(offsetof(RCNzUiFinaleWidget_UpdatePieceListBtnGuide, Key) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdatePieceListBtnGuide::Key' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdatePieceListBtnGuide, ReturnValue) == 0x000001, "Member 'RCNzUiFinaleWidget_UpdatePieceListBtnGuide::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdateQuestion
// 0x0028 (0x0028 - 0x0000)
struct RCNzUiFinaleWidget_UpdateQuestion final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QuestionText;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLeft;                                            // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFinaleInteractPointType                      Type;                                              // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isZoom;                                            // 0x0022(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleWidget_UpdateQuestion) == 0x000008, "Wrong alignment on RCNzUiFinaleWidget_UpdateQuestion");
static_assert(sizeof(RCNzUiFinaleWidget_UpdateQuestion) == 0x000028, "Wrong size on RCNzUiFinaleWidget_UpdateQuestion");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateQuestion, IsVisible_0) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdateQuestion::IsVisible_0' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateQuestion, QuestionText) == 0x000008, "Member 'RCNzUiFinaleWidget_UpdateQuestion::QuestionText' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateQuestion, Position) == 0x000018, "Member 'RCNzUiFinaleWidget_UpdateQuestion::Position' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateQuestion, isLeft) == 0x000020, "Member 'RCNzUiFinaleWidget_UpdateQuestion::isLeft' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateQuestion, Type) == 0x000021, "Member 'RCNzUiFinaleWidget_UpdateQuestion::Type' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateQuestion, isZoom) == 0x000022, "Member 'RCNzUiFinaleWidget_UpdateQuestion::isZoom' has a wrong offset!");

// Function RC.RCNzUiFinaleWidget.UpdateSelectedPieceIdx
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleWidget_UpdateSelectedPieceIdx final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleWidget_UpdateSelectedPieceIdx) == 0x000004, "Wrong alignment on RCNzUiFinaleWidget_UpdateSelectedPieceIdx");
static_assert(sizeof(RCNzUiFinaleWidget_UpdateSelectedPieceIdx) == 0x000004, "Wrong size on RCNzUiFinaleWidget_UpdateSelectedPieceIdx");
static_assert(offsetof(RCNzUiFinaleWidget_UpdateSelectedPieceIdx, idx) == 0x000000, "Member 'RCNzUiFinaleWidget_UpdateSelectedPieceIdx::idx' has a wrong offset!");

// Function RC.RCUiOption.TabOnMouseOver
// 0x0008 (0x0008 - 0x0000)
struct RCUiOption_TabOnMouseOver final
{
public:
	class URCUiOptionTab*                         Tab;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOption_TabOnMouseOver) == 0x000008, "Wrong alignment on RCUiOption_TabOnMouseOver");
static_assert(sizeof(RCUiOption_TabOnMouseOver) == 0x000008, "Wrong size on RCUiOption_TabOnMouseOver");
static_assert(offsetof(RCUiOption_TabOnMouseOver, Tab) == 0x000000, "Member 'RCUiOption_TabOnMouseOver::Tab' has a wrong offset!");

// Function RC.RCAnimNotify_PlayNiagaraEffectEX.GetSpawnedEffect
// 0x0008 (0x0008 - 0x0000)
struct RCAnimNotify_PlayNiagaraEffectEX_GetSpawnedEffect final
{
public:
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAnimNotify_PlayNiagaraEffectEX_GetSpawnedEffect) == 0x000008, "Wrong alignment on RCAnimNotify_PlayNiagaraEffectEX_GetSpawnedEffect");
static_assert(sizeof(RCAnimNotify_PlayNiagaraEffectEX_GetSpawnedEffect) == 0x000008, "Wrong size on RCAnimNotify_PlayNiagaraEffectEX_GetSpawnedEffect");
static_assert(offsetof(RCAnimNotify_PlayNiagaraEffectEX_GetSpawnedEffect, ReturnValue) == 0x000000, "Member 'RCAnimNotify_PlayNiagaraEffectEX_GetSpawnedEffect::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.DebugShowIndexSection
// 0x0024 (0x0024 - 0x0000)
struct RCNzUiFinaleIndexListWidget_DebugShowIndexSection final
{
public:
	struct FVector2D                              UL;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ur;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              dl;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              dr;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         idx;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_DebugShowIndexSection) == 0x000004, "Wrong alignment on RCNzUiFinaleIndexListWidget_DebugShowIndexSection");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_DebugShowIndexSection) == 0x000024, "Wrong size on RCNzUiFinaleIndexListWidget_DebugShowIndexSection");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_DebugShowIndexSection, UL) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_DebugShowIndexSection::UL' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_DebugShowIndexSection, ur) == 0x000008, "Member 'RCNzUiFinaleIndexListWidget_DebugShowIndexSection::ur' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_DebugShowIndexSection, dl) == 0x000010, "Member 'RCNzUiFinaleIndexListWidget_DebugShowIndexSection::dl' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_DebugShowIndexSection, dr) == 0x000018, "Member 'RCNzUiFinaleIndexListWidget_DebugShowIndexSection::dr' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_DebugShowIndexSection, idx) == 0x000020, "Member 'RCNzUiFinaleIndexListWidget_DebugShowIndexSection::idx' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetCurentSelectSectionIndex
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetCurentSelectSectionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetCurentSelectSectionIndex) == 0x000004, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetCurentSelectSectionIndex");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetCurentSelectSectionIndex) == 0x000004, "Wrong size on RCNzUiFinaleIndexListWidget_GetCurentSelectSectionIndex");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetCurentSelectSectionIndex, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetCurentSelectSectionIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetCurrentSectionPieceUIPath
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetCurrentSectionPieceUIPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetCurrentSectionPieceUIPath) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetCurrentSectionPieceUIPath");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetCurrentSectionPieceUIPath) == 0x000010, "Wrong size on RCNzUiFinaleIndexListWidget_GetCurrentSectionPieceUIPath");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetCurrentSectionPieceUIPath, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetCurrentSectionPieceUIPath::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetCurrentSectionText
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetCurrentSectionText final
{
public:
	int32                                         SectionIdx;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 sectionTitle;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetCurrentSectionText) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetCurrentSectionText");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetCurrentSectionText) == 0x000018, "Wrong size on RCNzUiFinaleIndexListWidget_GetCurrentSectionText");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetCurrentSectionText, SectionIdx) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetCurrentSectionText::SectionIdx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetCurrentSectionText, sectionTitle) == 0x000008, "Member 'RCNzUiFinaleIndexListWidget_GetCurrentSectionText::sectionTitle' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetCurrentSelectSetionID
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetCurrentSelectSetionID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetCurrentSelectSetionID) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetCurrentSelectSetionID");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetCurrentSelectSetionID) == 0x000010, "Wrong size on RCNzUiFinaleIndexListWidget_GetCurrentSelectSetionID");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetCurrentSelectSetionID, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetCurrentSelectSetionID::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetIndexList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetIndexList final
{
public:
	TArray<class URCNzUiFinaleHeadingTextWidget*> ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetIndexList) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetIndexList");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetIndexList) == 0x000010, "Wrong size on RCNzUiFinaleIndexListWidget_GetIndexList");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetIndexList, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetIndexList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetIndexMargin
// 0x0014 (0x0014 - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetIndexMargin final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetIndexMargin) == 0x000004, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetIndexMargin");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetIndexMargin) == 0x000014, "Wrong size on RCNzUiFinaleIndexListWidget_GetIndexMargin");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetIndexMargin, idx) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetIndexMargin::idx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetIndexMargin, ReturnValue) == 0x000004, "Member 'RCNzUiFinaleIndexListWidget_GetIndexMargin::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetIsIndex02Flag
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetIsIndex02Flag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetIsIndex02Flag) == 0x000001, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetIsIndex02Flag");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetIsIndex02Flag) == 0x000001, "Wrong size on RCNzUiFinaleIndexListWidget_GetIsIndex02Flag");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetIsIndex02Flag, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetIsIndex02Flag::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetListParentDesiredSize
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetListParentDesiredSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetListParentDesiredSize) == 0x000004, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetListParentDesiredSize");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetListParentDesiredSize) == 0x000008, "Wrong size on RCNzUiFinaleIndexListWidget_GetListParentDesiredSize");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetListParentDesiredSize, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetListParentDesiredSize::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetListParentMargin
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetListParentMargin final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetListParentMargin) == 0x000004, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetListParentMargin");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetListParentMargin) == 0x000010, "Wrong size on RCNzUiFinaleIndexListWidget_GetListParentMargin");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetListParentMargin, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetListParentMargin::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.GetTargetIndexSectionID
// 0x000C (0x000C - 0x0000)
struct RCNzUiFinaleIndexListWidget_GetTargetIndexSectionID final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_GetTargetIndexSectionID) == 0x000004, "Wrong alignment on RCNzUiFinaleIndexListWidget_GetTargetIndexSectionID");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_GetTargetIndexSectionID) == 0x00000C, "Wrong size on RCNzUiFinaleIndexListWidget_GetTargetIndexSectionID");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetTargetIndexSectionID, idx) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_GetTargetIndexSectionID::idx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_GetTargetIndexSectionID, ReturnValue) == 0x000004, "Member 'RCNzUiFinaleIndexListWidget_GetTargetIndexSectionID::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.IsCompleteInitialize
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleIndexListWidget_IsCompleteInitialize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_IsCompleteInitialize) == 0x000001, "Wrong alignment on RCNzUiFinaleIndexListWidget_IsCompleteInitialize");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_IsCompleteInitialize) == 0x000001, "Wrong size on RCNzUiFinaleIndexListWidget_IsCompleteInitialize");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_IsCompleteInitialize, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_IsCompleteInitialize::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.IsCurrentSection
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleIndexListWidget_IsCurrentSection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_IsCurrentSection) == 0x000001, "Wrong alignment on RCNzUiFinaleIndexListWidget_IsCurrentSection");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_IsCurrentSection) == 0x000001, "Wrong size on RCNzUiFinaleIndexListWidget_IsCurrentSection");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_IsCurrentSection, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_IsCurrentSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.IsExistNextSection
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleIndexListWidget_IsExistNextSection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_IsExistNextSection) == 0x000001, "Wrong alignment on RCNzUiFinaleIndexListWidget_IsExistNextSection");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_IsExistNextSection) == 0x000001, "Wrong size on RCNzUiFinaleIndexListWidget_IsExistNextSection");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_IsExistNextSection, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_IsExistNextSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.IsExistPrevSection
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleIndexListWidget_IsExistPrevSection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_IsExistPrevSection) == 0x000001, "Wrong alignment on RCNzUiFinaleIndexListWidget_IsExistPrevSection");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_IsExistPrevSection) == 0x000001, "Wrong size on RCNzUiFinaleIndexListWidget_IsExistPrevSection");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_IsExistPrevSection, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_IsExistPrevSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.IsExistTargetSectionTextIDIndex
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex final
{
public:
	class FName                                   TargetID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lastIdx;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex) == 0x000004, "Wrong alignment on RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex) == 0x000010, "Wrong size on RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex, TargetID) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex::TargetID' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex, lastIdx) == 0x000008, "Member 'RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex::lastIdx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex, ReturnValue) == 0x00000C, "Member 'RCNzUiFinaleIndexListWidget_IsExistTargetSectionTextIDIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.IsExsitTargteIdxSection
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleIndexListWidget_IsExsitTargteIdxSection final
{
public:
	int32                                         targetIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_IsExsitTargteIdxSection) == 0x000004, "Wrong alignment on RCNzUiFinaleIndexListWidget_IsExsitTargteIdxSection");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_IsExsitTargteIdxSection) == 0x000008, "Wrong size on RCNzUiFinaleIndexListWidget_IsExsitTargteIdxSection");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_IsExsitTargteIdxSection, targetIdx) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_IsExsitTargteIdxSection::targetIdx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_IsExsitTargteIdxSection, ReturnValue) == 0x000004, "Member 'RCNzUiFinaleIndexListWidget_IsExsitTargteIdxSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.SetVisibleSectionList
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleIndexListWidget_SetVisibleSectionList final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_SetVisibleSectionList) == 0x000001, "Wrong alignment on RCNzUiFinaleIndexListWidget_SetVisibleSectionList");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_SetVisibleSectionList) == 0x000001, "Wrong size on RCNzUiFinaleIndexListWidget_SetVisibleSectionList");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_SetVisibleSectionList, IsVisible_0) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_SetVisibleSectionList::IsVisible_0' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.UpdateIndexList
// 0x0050 (0x0050 - 0x0000)
struct RCNzUiFinaleIndexListWidget_UpdateIndexList final
{
public:
	struct FRCParamNzFinaleSectionTableRow        Section;                                           // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	int32                                         idx;                                               // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCNzFinaleManagerBase*                 FinaleManager_0;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_UpdateIndexList) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexListWidget_UpdateIndexList");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_UpdateIndexList) == 0x000050, "Wrong size on RCNzUiFinaleIndexListWidget_UpdateIndexList");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_UpdateIndexList, Section) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_UpdateIndexList::Section' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_UpdateIndexList, idx) == 0x000040, "Member 'RCNzUiFinaleIndexListWidget_UpdateIndexList::idx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_UpdateIndexList, FinaleManager_0) == 0x000048, "Member 'RCNzUiFinaleIndexListWidget_UpdateIndexList::FinaleManager_0' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.UpdateSectionDetectivePointState
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleIndexListWidget_UpdateSectionDetectivePointState final
{
public:
	class ARCNzFinaleManagerBase*                 FinaleManager_0;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_UpdateSectionDetectivePointState) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexListWidget_UpdateSectionDetectivePointState");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_UpdateSectionDetectivePointState) == 0x000008, "Wrong size on RCNzUiFinaleIndexListWidget_UpdateSectionDetectivePointState");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_UpdateSectionDetectivePointState, FinaleManager_0) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_UpdateSectionDetectivePointState::FinaleManager_0' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListWidget.UpdateSelectIndexWidget
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleIndexListWidget_UpdateSelectIndexWidget final
{
public:
	int32                                         targetIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListWidget_UpdateSelectIndexWidget) == 0x000004, "Wrong alignment on RCNzUiFinaleIndexListWidget_UpdateSelectIndexWidget");
static_assert(sizeof(RCNzUiFinaleIndexListWidget_UpdateSelectIndexWidget) == 0x000004, "Wrong size on RCNzUiFinaleIndexListWidget_UpdateSelectIndexWidget");
static_assert(offsetof(RCNzUiFinaleIndexListWidget_UpdateSelectIndexWidget, targetIdx) == 0x000000, "Member 'RCNzUiFinaleIndexListWidget_UpdateSelectIndexWidget::targetIdx' has a wrong offset!");

// Function RC.RCNazoLoopLevelScriptActor.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLoopLevelScriptActor_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLoopLevelScriptActor_IsInitialized) == 0x000001, "Wrong alignment on RCNazoLoopLevelScriptActor_IsInitialized");
static_assert(sizeof(RCNazoLoopLevelScriptActor_IsInitialized) == 0x000001, "Wrong size on RCNazoLoopLevelScriptActor_IsInitialized");
static_assert(offsetof(RCNazoLoopLevelScriptActor_IsInitialized, ReturnValue) == 0x000000, "Member 'RCNazoLoopLevelScriptActor_IsInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.ChangeBackCamera
// 0x000C (0x000C - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_ChangeBackCamera final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_ChangeBackCamera) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_ChangeBackCamera");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_ChangeBackCamera) == 0x00000C, "Wrong size on RCNazoMoveLoopLevelScriptActor_ChangeBackCamera");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeBackCamera, BlendTime) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeBackCamera::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeBackCamera, BlendFunc) == 0x000004, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeBackCamera::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeBackCamera, BlendExp) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeBackCamera::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.ChangeCamera
// 0x0018 (0x0018 - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_ChangeCamera final
{
public:
	class ARCCineCameraActor*                     Camera;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_ChangeCamera) == 0x000008, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_ChangeCamera");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_ChangeCamera) == 0x000018, "Wrong size on RCNazoMoveLoopLevelScriptActor_ChangeCamera");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCamera, Camera) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCamera::Camera' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCamera, BlendTime) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCamera::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCamera, BlendFunc) == 0x00000C, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCamera::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCamera, BlendExp) == 0x000010, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCamera::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.ChangeCameraBase
// 0x0020 (0x0020 - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_ChangeCameraBase final
{
public:
	class AActor*                                 CameraBase;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCCineCameraActor*                     Camera;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBase) == 0x000008, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_ChangeCameraBase");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBase) == 0x000020, "Wrong size on RCNazoMoveLoopLevelScriptActor_ChangeCameraBase");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBase, CameraBase) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBase::CameraBase' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBase, Camera) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBase::Camera' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBase, BlendTime) == 0x000010, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBase::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBase, BlendFunc) == 0x000014, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBase::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBase, BlendExp) == 0x000018, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBase::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.ChangeCameraBaseFromTag
// 0x001C (0x001C - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag final
{
public:
	class FName                                   CameraBaseTag;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraTag;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag) == 0x00001C, "Wrong size on RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag, CameraBaseTag) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag::CameraBaseTag' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag, CameraTag) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag::CameraTag' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag, BlendTime) == 0x000010, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag, BlendFunc) == 0x000014, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag, BlendExp) == 0x000018, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraBaseFromTag::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.ChangeCameraFromTag
// 0x0014 (0x0014 - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag final
{
public:
	class FName                                   CameraTag;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag) == 0x000014, "Wrong size on RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag, CameraTag) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag::CameraTag' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag, BlendTime) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag, BlendFunc) == 0x00000C, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag, BlendExp) == 0x000010, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeCameraFromTag::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.ChangePlayerSpeed
// 0x0008 (0x0008 - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_ChangePlayerSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_ChangePlayerSpeed) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_ChangePlayerSpeed");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_ChangePlayerSpeed) == 0x000008, "Wrong size on RCNazoMoveLoopLevelScriptActor_ChangePlayerSpeed");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangePlayerSpeed, Speed) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_ChangePlayerSpeed::Speed' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangePlayerSpeed, Time) == 0x000004, "Member 'RCNazoMoveLoopLevelScriptActor_ChangePlayerSpeed::Time' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.ChangeStateEvent
// 0x0001 (0x0001 - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_ChangeStateEvent final
{
public:
	ERCNazoMoveLoopLSAState                       MoveLoopState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_ChangeStateEvent) == 0x000001, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_ChangeStateEvent");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_ChangeStateEvent) == 0x000001, "Wrong size on RCNazoMoveLoopLevelScriptActor_ChangeStateEvent");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeStateEvent, MoveLoopState) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeStateEvent::MoveLoopState' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.ChangeTalkStateEvent
// 0x000C (0x000C - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_ChangeTalkStateEvent final
{
public:
	ERCNazoMoveLoopLSATalkState                   TalkState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_ChangeTalkStateEvent) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_ChangeTalkStateEvent");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_ChangeTalkStateEvent) == 0x00000C, "Wrong size on RCNazoMoveLoopLevelScriptActor_ChangeTalkStateEvent");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeTalkStateEvent, TalkState) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeTalkStateEvent::TalkState' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_ChangeTalkStateEvent, TalkID) == 0x000004, "Member 'RCNazoMoveLoopLevelScriptActor_ChangeTalkStateEvent::TalkID' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.TalkFinishedEvent
// 0x0008 (0x0008 - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_TalkFinishedEvent final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_TalkFinishedEvent) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_TalkFinishedEvent");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_TalkFinishedEvent) == 0x000008, "Wrong size on RCNazoMoveLoopLevelScriptActor_TalkFinishedEvent");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_TalkFinishedEvent, TalkID) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_TalkFinishedEvent::TalkID' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.TalkStartedEvent
// 0x0008 (0x0008 - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_TalkStartedEvent final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_TalkStartedEvent) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_TalkStartedEvent");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_TalkStartedEvent) == 0x000008, "Wrong size on RCNazoMoveLoopLevelScriptActor_TalkStartedEvent");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_TalkStartedEvent, TalkID) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_TalkStartedEvent::TalkID' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActor.TalkStartTextEvent
// 0x000C (0x000C - 0x0000)
struct RCNazoMoveLoopLevelScriptActor_TalkStartTextEvent final
{
public:
	int32                                         TextIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActor_TalkStartTextEvent) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActor_TalkStartTextEvent");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActor_TalkStartTextEvent) == 0x00000C, "Wrong size on RCNazoMoveLoopLevelScriptActor_TalkStartTextEvent");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_TalkStartTextEvent, TextIndex) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActor_TalkStartTextEvent::TextIndex' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActor_TalkStartTextEvent, TextID) == 0x000004, "Member 'RCNazoMoveLoopLevelScriptActor_TalkStartTextEvent::TextID' has a wrong offset!");

// Function RC.RCSplineActorBFL.GetSplineActor
// 0x0010 (0x0010 - 0x0000)
struct RCSplineActorBFL_GetSplineActor final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCSplineActor*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSplineActorBFL_GetSplineActor) == 0x000008, "Wrong alignment on RCSplineActorBFL_GetSplineActor");
static_assert(sizeof(RCSplineActorBFL_GetSplineActor) == 0x000010, "Wrong size on RCSplineActorBFL_GetSplineActor");
static_assert(offsetof(RCSplineActorBFL_GetSplineActor, InName) == 0x000000, "Member 'RCSplineActorBFL_GetSplineActor::InName' has a wrong offset!");
static_assert(offsetof(RCSplineActorBFL_GetSplineActor, ReturnValue) == 0x000008, "Member 'RCSplineActorBFL_GetSplineActor::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetAnswerID
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetAnswerID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetAnswerID) == 0x000004, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetAnswerID");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetAnswerID) == 0x000008, "Wrong size on RCNzUiFinaleInteractIconWidget_GetAnswerID");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetAnswerID, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetAnswerID::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetBackgroundImagePath
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetBackgroundImagePath final
{
public:
	class ARCNzFinaleManagerBase*                 FinaleManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetBackgroundImagePath) == 0x000008, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetBackgroundImagePath");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetBackgroundImagePath) == 0x000018, "Wrong size on RCNzUiFinaleInteractIconWidget_GetBackgroundImagePath");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetBackgroundImagePath, FinaleManager) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetBackgroundImagePath::FinaleManager' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetBackgroundImagePath, ReturnValue) == 0x000008, "Member 'RCNzUiFinaleInteractIconWidget_GetBackgroundImagePath::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetColScale
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetColScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetColScale) == 0x000004, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetColScale");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetColScale) == 0x000004, "Wrong size on RCNzUiFinaleInteractIconWidget_GetColScale");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetColScale, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetColScale::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetInteractIconPosition
// 0x000C (0x000C - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetInteractIconPosition final
{
public:
	bool                                          isLeft;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetInteractIconPosition) == 0x000004, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetInteractIconPosition");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetInteractIconPosition) == 0x00000C, "Wrong size on RCNzUiFinaleInteractIconWidget_GetInteractIconPosition");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetInteractIconPosition, isLeft) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetInteractIconPosition::isLeft' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetInteractIconPosition, ReturnValue) == 0x000004, "Member 'RCNzUiFinaleInteractIconWidget_GetInteractIconPosition::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetisCorrectFlag
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetisCorrectFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetisCorrectFlag) == 0x000001, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetisCorrectFlag");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetisCorrectFlag) == 0x000001, "Wrong size on RCNzUiFinaleInteractIconWidget_GetisCorrectFlag");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetisCorrectFlag, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetisCorrectFlag::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetIsFinishStartAnim
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetIsFinishStartAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetIsFinishStartAnim) == 0x000001, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetIsFinishStartAnim");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetIsFinishStartAnim) == 0x000001, "Wrong size on RCNzUiFinaleInteractIconWidget_GetIsFinishStartAnim");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetIsFinishStartAnim, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetIsFinishStartAnim::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetIsPlayInOutAnimationFlag
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetIsPlayInOutAnimationFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetIsPlayInOutAnimationFlag) == 0x000001, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetIsPlayInOutAnimationFlag");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetIsPlayInOutAnimationFlag) == 0x000001, "Wrong size on RCNzUiFinaleInteractIconWidget_GetIsPlayInOutAnimationFlag");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetIsPlayInOutAnimationFlag, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetIsPlayInOutAnimationFlag::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetIsUseFixedPosition
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetIsUseFixedPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetIsUseFixedPosition) == 0x000001, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetIsUseFixedPosition");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetIsUseFixedPosition) == 0x000001, "Wrong size on RCNzUiFinaleInteractIconWidget_GetIsUseFixedPosition");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetIsUseFixedPosition, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetIsUseFixedPosition::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetPieceData
// 0x0070 (0x0070 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetPieceData final
{
public:
	struct FRCNzFinaleGamePieceData               ReturnValue;                                       // 0x0000(0x0070)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetPieceData) == 0x000008, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetPieceData");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetPieceData) == 0x000070, "Wrong size on RCNzUiFinaleInteractIconWidget_GetPieceData");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetPieceData, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetPieceData::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetPieceData_IsPick
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetPieceData_IsPick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetPieceData_IsPick) == 0x000001, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetPieceData_IsPick");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetPieceData_IsPick) == 0x000001, "Wrong size on RCNzUiFinaleInteractIconWidget_GetPieceData_IsPick");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetPieceData_IsPick, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetPieceData_IsPick::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetPieceDetailText
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetPieceDetailText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetPieceDetailText) == 0x000008, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetPieceDetailText");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetPieceDetailText) == 0x000010, "Wrong size on RCNzUiFinaleInteractIconWidget_GetPieceDetailText");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetPieceDetailText, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetPieceDetailText::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetPieceID
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetPieceID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetPieceID) == 0x000004, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetPieceID");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetPieceID) == 0x000008, "Wrong size on RCNzUiFinaleInteractIconWidget_GetPieceID");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetPieceID, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetPieceID::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetPieceImg
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetPieceImg final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetPieceImg) == 0x000008, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetPieceImg");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetPieceImg) == 0x000008, "Wrong size on RCNzUiFinaleInteractIconWidget_GetPieceImg");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetPieceImg, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetPieceImg::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetPieceText
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetPieceText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetPieceText) == 0x000008, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetPieceText");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetPieceText) == 0x000010, "Wrong size on RCNzUiFinaleInteractIconWidget_GetPieceText");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetPieceText, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetPieceText::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.GetQuestionTextFixedPosition
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_GetQuestionTextFixedPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_GetQuestionTextFixedPosition) == 0x000004, "Wrong alignment on RCNzUiFinaleInteractIconWidget_GetQuestionTextFixedPosition");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_GetQuestionTextFixedPosition) == 0x000008, "Wrong size on RCNzUiFinaleInteractIconWidget_GetQuestionTextFixedPosition");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_GetQuestionTextFixedPosition, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_GetQuestionTextFixedPosition::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.InitializeInteractIconWidget
// 0x0070 (0x0070 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_InitializeInteractIconWidget final
{
public:
	struct FRCNzFinaleGamePieceData               Data;                                              // 0x0000(0x0070)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_InitializeInteractIconWidget) == 0x000008, "Wrong alignment on RCNzUiFinaleInteractIconWidget_InitializeInteractIconWidget");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_InitializeInteractIconWidget) == 0x000070, "Wrong size on RCNzUiFinaleInteractIconWidget_InitializeInteractIconWidget");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_InitializeInteractIconWidget, Data) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_InitializeInteractIconWidget::Data' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.PlayFinishQuestionAnim
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_PlayFinishQuestionAnim final
{
public:
	bool                                          isSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_PlayFinishQuestionAnim) == 0x000001, "Wrong alignment on RCNzUiFinaleInteractIconWidget_PlayFinishQuestionAnim");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_PlayFinishQuestionAnim) == 0x000001, "Wrong size on RCNzUiFinaleInteractIconWidget_PlayFinishQuestionAnim");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_PlayFinishQuestionAnim, isSuccess) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_PlayFinishQuestionAnim::isSuccess' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.SetIsCorrectFlag
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_SetIsCorrectFlag final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_SetIsCorrectFlag) == 0x000001, "Wrong alignment on RCNzUiFinaleInteractIconWidget_SetIsCorrectFlag");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_SetIsCorrectFlag) == 0x000001, "Wrong size on RCNzUiFinaleInteractIconWidget_SetIsCorrectFlag");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_SetIsCorrectFlag, Val) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_SetIsCorrectFlag::Val' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.SetPieceData_IsPick
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_SetPieceData_IsPick final
{
public:
	bool                                          isPick;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_SetPieceData_IsPick) == 0x000001, "Wrong alignment on RCNzUiFinaleInteractIconWidget_SetPieceData_IsPick");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_SetPieceData_IsPick) == 0x000001, "Wrong size on RCNzUiFinaleInteractIconWidget_SetPieceData_IsPick");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_SetPieceData_IsPick, isPick) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_SetPieceData_IsPick::isPick' has a wrong offset!");

// Function RC.RCNzUiFinaleInteractIconWidget.UpdateBackgroundImage
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleInteractIconWidget_UpdateBackgroundImage final
{
public:
	class UTexture2D*                             tex;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleInteractIconWidget_UpdateBackgroundImage) == 0x000008, "Wrong alignment on RCNzUiFinaleInteractIconWidget_UpdateBackgroundImage");
static_assert(sizeof(RCNzUiFinaleInteractIconWidget_UpdateBackgroundImage) == 0x000008, "Wrong size on RCNzUiFinaleInteractIconWidget_UpdateBackgroundImage");
static_assert(offsetof(RCNzUiFinaleInteractIconWidget_UpdateBackgroundImage, tex) == 0x000000, "Member 'RCNzUiFinaleInteractIconWidget_UpdateBackgroundImage::tex' has a wrong offset!");

// Function RC.RCSoundManager.CalcVolume
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManager_CalcVolume final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_CalcVolume) == 0x000004, "Wrong alignment on RCSoundManager_CalcVolume");
static_assert(sizeof(RCSoundManager_CalcVolume) == 0x000008, "Wrong size on RCSoundManager_CalcVolume");
static_assert(offsetof(RCSoundManager_CalcVolume, SoundType) == 0x000000, "Member 'RCSoundManager_CalcVolume::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_CalcVolume, ReturnValue) == 0x000004, "Member 'RCSoundManager_CalcVolume::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.CrossFade
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManager_CrossFade final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeInTime;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManager_CrossFade) == 0x000008, "Wrong alignment on RCSoundManager_CrossFade");
static_assert(sizeof(RCSoundManager_CrossFade) == 0x000020, "Wrong size on RCSoundManager_CrossFade");
static_assert(offsetof(RCSoundManager_CrossFade, SoundType) == 0x000000, "Member 'RCSoundManager_CrossFade::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_CrossFade, SoundId) == 0x000008, "Member 'RCSoundManager_CrossFade::SoundId' has a wrong offset!");
static_assert(offsetof(RCSoundManager_CrossFade, fadeInTime) == 0x000018, "Member 'RCSoundManager_CrossFade::fadeInTime' has a wrong offset!");

// Function RC.RCSoundManager.FadeIn
// 0x0028 (0x0028 - 0x0000)
struct RCSoundManager_FadeIn final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeInTime;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         finishVolume;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isBaseOriginalVolume;                              // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManager_FadeIn) == 0x000008, "Wrong alignment on RCSoundManager_FadeIn");
static_assert(sizeof(RCSoundManager_FadeIn) == 0x000028, "Wrong size on RCSoundManager_FadeIn");
static_assert(offsetof(RCSoundManager_FadeIn, SoundType) == 0x000000, "Member 'RCSoundManager_FadeIn::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeIn, SoundId) == 0x000008, "Member 'RCSoundManager_FadeIn::SoundId' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeIn, fadeInTime) == 0x000018, "Member 'RCSoundManager_FadeIn::fadeInTime' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeIn, StartTime) == 0x00001C, "Member 'RCSoundManager_FadeIn::StartTime' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeIn, finishVolume) == 0x000020, "Member 'RCSoundManager_FadeIn::finishVolume' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeIn, isBaseOriginalVolume) == 0x000024, "Member 'RCSoundManager_FadeIn::isBaseOriginalVolume' has a wrong offset!");

// Function RC.RCSoundManager.FadeInAll
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManager_FadeInAll final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fadeInTime;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         finishVolume;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_FadeInAll) == 0x000004, "Wrong alignment on RCSoundManager_FadeInAll");
static_assert(sizeof(RCSoundManager_FadeInAll) == 0x000010, "Wrong size on RCSoundManager_FadeInAll");
static_assert(offsetof(RCSoundManager_FadeInAll, SoundType) == 0x000000, "Member 'RCSoundManager_FadeInAll::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeInAll, fadeInTime) == 0x000004, "Member 'RCSoundManager_FadeInAll::fadeInTime' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeInAll, StartTime) == 0x000008, "Member 'RCSoundManager_FadeInAll::StartTime' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeInAll, finishVolume) == 0x00000C, "Member 'RCSoundManager_FadeInAll::finishVolume' has a wrong offset!");

// Function RC.RCSoundManager.FadeOut
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManager_FadeOut final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeOutTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         finishVolume;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_FadeOut) == 0x000008, "Wrong alignment on RCSoundManager_FadeOut");
static_assert(sizeof(RCSoundManager_FadeOut) == 0x000020, "Wrong size on RCSoundManager_FadeOut");
static_assert(offsetof(RCSoundManager_FadeOut, SoundType) == 0x000000, "Member 'RCSoundManager_FadeOut::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeOut, SoundId) == 0x000008, "Member 'RCSoundManager_FadeOut::SoundId' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeOut, fadeOutTime) == 0x000018, "Member 'RCSoundManager_FadeOut::fadeOutTime' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeOut, finishVolume) == 0x00001C, "Member 'RCSoundManager_FadeOut::finishVolume' has a wrong offset!");

// Function RC.RCSoundManager.FadeOutAll
// 0x000C (0x000C - 0x0000)
struct RCSoundManager_FadeOutAll final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fadeOutTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         finishVolume;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_FadeOutAll) == 0x000004, "Wrong alignment on RCSoundManager_FadeOutAll");
static_assert(sizeof(RCSoundManager_FadeOutAll) == 0x00000C, "Wrong size on RCSoundManager_FadeOutAll");
static_assert(offsetof(RCSoundManager_FadeOutAll, SoundType) == 0x000000, "Member 'RCSoundManager_FadeOutAll::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeOutAll, fadeOutTime) == 0x000004, "Member 'RCSoundManager_FadeOutAll::fadeOutTime' has a wrong offset!");
static_assert(offsetof(RCSoundManager_FadeOutAll, finishVolume) == 0x000008, "Member 'RCSoundManager_FadeOutAll::finishVolume' has a wrong offset!");

// Function RC.RCSoundManager.GetBgmSoundDataArray
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManager_GetBgmSoundDataArray final
{
public:
	TArray<struct FSoundData>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetBgmSoundDataArray) == 0x000008, "Wrong alignment on RCSoundManager_GetBgmSoundDataArray");
static_assert(sizeof(RCSoundManager_GetBgmSoundDataArray) == 0x000010, "Wrong size on RCSoundManager_GetBgmSoundDataArray");
static_assert(offsetof(RCSoundManager_GetBgmSoundDataArray, ReturnValue) == 0x000000, "Member 'RCSoundManager_GetBgmSoundDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetCueSheetParamPathArray
// 0x0018 (0x0018 - 0x0000)
struct RCSoundManager_GetCueSheetParamPathArray final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetCueSheetParamPathArray) == 0x000008, "Wrong alignment on RCSoundManager_GetCueSheetParamPathArray");
static_assert(sizeof(RCSoundManager_GetCueSheetParamPathArray) == 0x000018, "Wrong size on RCSoundManager_GetCueSheetParamPathArray");
static_assert(offsetof(RCSoundManager_GetCueSheetParamPathArray, SoundType) == 0x000000, "Member 'RCSoundManager_GetCueSheetParamPathArray::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetCueSheetParamPathArray, ReturnValue) == 0x000008, "Member 'RCSoundManager_GetCueSheetParamPathArray::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetEnviromentSoundDataArray
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManager_GetEnviromentSoundDataArray final
{
public:
	TArray<struct FSoundData>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetEnviromentSoundDataArray) == 0x000008, "Wrong alignment on RCSoundManager_GetEnviromentSoundDataArray");
static_assert(sizeof(RCSoundManager_GetEnviromentSoundDataArray) == 0x000010, "Wrong size on RCSoundManager_GetEnviromentSoundDataArray");
static_assert(offsetof(RCSoundManager_GetEnviromentSoundDataArray, ReturnValue) == 0x000000, "Member 'RCSoundManager_GetEnviromentSoundDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetLipSyncParamDataAdjust
// 0x0038 (0x0038 - 0x0000)
struct RCSoundManager_GetLipSyncParamDataAdjust final
{
public:
	class FName                                   voiceCharaID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCParamLipSyncDataAdjustTableRow      ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetLipSyncParamDataAdjust) == 0x000008, "Wrong alignment on RCSoundManager_GetLipSyncParamDataAdjust");
static_assert(sizeof(RCSoundManager_GetLipSyncParamDataAdjust) == 0x000038, "Wrong size on RCSoundManager_GetLipSyncParamDataAdjust");
static_assert(offsetof(RCSoundManager_GetLipSyncParamDataAdjust, voiceCharaID) == 0x000000, "Member 'RCSoundManager_GetLipSyncParamDataAdjust::voiceCharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetLipSyncParamDataAdjust, ReturnValue) == 0x000008, "Member 'RCSoundManager_GetLipSyncParamDataAdjust::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetLipSyncVol
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManager_GetLipSyncVol final
{
public:
	float                                         voiceVol;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetLipSyncVol) == 0x000004, "Wrong alignment on RCSoundManager_GetLipSyncVol");
static_assert(sizeof(RCSoundManager_GetLipSyncVol) == 0x000008, "Wrong size on RCSoundManager_GetLipSyncVol");
static_assert(offsetof(RCSoundManager_GetLipSyncVol, voiceVol) == 0x000000, "Member 'RCSoundManager_GetLipSyncVol::voiceVol' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetLipSyncVol, ReturnValue) == 0x000004, "Member 'RCSoundManager_GetLipSyncVol::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetNonResidentCueSheetParam
// 0x0050 (0x0050 - 0x0000)
struct RCSoundManager_GetNonResidentCueSheetParam final
{
public:
	class FString                                 SheetID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCParamSoundNonResidentListTableRow   ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetNonResidentCueSheetParam) == 0x000008, "Wrong alignment on RCSoundManager_GetNonResidentCueSheetParam");
static_assert(sizeof(RCSoundManager_GetNonResidentCueSheetParam) == 0x000050, "Wrong size on RCSoundManager_GetNonResidentCueSheetParam");
static_assert(offsetof(RCSoundManager_GetNonResidentCueSheetParam, SheetID) == 0x000000, "Member 'RCSoundManager_GetNonResidentCueSheetParam::SheetID' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetNonResidentCueSheetParam, ReturnValue) == 0x000010, "Member 'RCSoundManager_GetNonResidentCueSheetParam::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetPlayingBGMID
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManager_GetPlayingBGMID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetPlayingBGMID) == 0x000008, "Wrong alignment on RCSoundManager_GetPlayingBGMID");
static_assert(sizeof(RCSoundManager_GetPlayingBGMID) == 0x000010, "Wrong size on RCSoundManager_GetPlayingBGMID");
static_assert(offsetof(RCSoundManager_GetPlayingBGMID, ReturnValue) == 0x000000, "Member 'RCSoundManager_GetPlayingBGMID::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetSeSoundDataArray
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManager_GetSeSoundDataArray final
{
public:
	TArray<struct FSoundData>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetSeSoundDataArray) == 0x000008, "Wrong alignment on RCSoundManager_GetSeSoundDataArray");
static_assert(sizeof(RCSoundManager_GetSeSoundDataArray) == 0x000010, "Wrong size on RCSoundManager_GetSeSoundDataArray");
static_assert(offsetof(RCSoundManager_GetSeSoundDataArray, ReturnValue) == 0x000000, "Member 'RCSoundManager_GetSeSoundDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetSoundAtomCue
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManager_GetSoundAtomCue final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoadData                              ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetSoundAtomCue) == 0x000008, "Wrong alignment on RCSoundManager_GetSoundAtomCue");
static_assert(sizeof(RCSoundManager_GetSoundAtomCue) == 0x000020, "Wrong size on RCSoundManager_GetSoundAtomCue");
static_assert(offsetof(RCSoundManager_GetSoundAtomCue, SoundType) == 0x000000, "Member 'RCSoundManager_GetSoundAtomCue::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetSoundAtomCue, ReturnValue) == 0x000008, "Member 'RCSoundManager_GetSoundAtomCue::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetSoundDataArray
// 0x0018 (0x0018 - 0x0000)
struct RCSoundManager_GetSoundDataArray final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoundData>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetSoundDataArray) == 0x000008, "Wrong alignment on RCSoundManager_GetSoundDataArray");
static_assert(sizeof(RCSoundManager_GetSoundDataArray) == 0x000018, "Wrong size on RCSoundManager_GetSoundDataArray");
static_assert(offsetof(RCSoundManager_GetSoundDataArray, SoundType) == 0x000000, "Member 'RCSoundManager_GetSoundDataArray::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetSoundDataArray, ReturnValue) == 0x000008, "Member 'RCSoundManager_GetSoundDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetSoundId
// 0x0028 (0x0028 - 0x0000)
struct RCSoundManager_GetSoundId final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharaID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetSoundId) == 0x000008, "Wrong alignment on RCSoundManager_GetSoundId");
static_assert(sizeof(RCSoundManager_GetSoundId) == 0x000028, "Wrong size on RCSoundManager_GetSoundId");
static_assert(offsetof(RCSoundManager_GetSoundId, SoundType) == 0x000000, "Member 'RCSoundManager_GetSoundId::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetSoundId, soundIndex) == 0x000004, "Member 'RCSoundManager_GetSoundId::soundIndex' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetSoundId, CharaID) == 0x000008, "Member 'RCSoundManager_GetSoundId::CharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetSoundId, ReturnValue) == 0x000018, "Member 'RCSoundManager_GetSoundId::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetSoundParamData
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManager_GetSoundParamData final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCParamSoundFormatTableRow            ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetSoundParamData) == 0x000008, "Wrong alignment on RCSoundManager_GetSoundParamData");
static_assert(sizeof(RCSoundManager_GetSoundParamData) == 0x000020, "Wrong size on RCSoundManager_GetSoundParamData");
static_assert(offsetof(RCSoundManager_GetSoundParamData, SoundType) == 0x000000, "Member 'RCSoundManager_GetSoundParamData::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_GetSoundParamData, ReturnValue) == 0x000008, "Member 'RCSoundManager_GetSoundParamData::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.GetVoiceSoundDataArray
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManager_GetVoiceSoundDataArray final
{
public:
	TArray<struct FSoundData>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_GetVoiceSoundDataArray) == 0x000008, "Wrong alignment on RCSoundManager_GetVoiceSoundDataArray");
static_assert(sizeof(RCSoundManager_GetVoiceSoundDataArray) == 0x000010, "Wrong size on RCSoundManager_GetVoiceSoundDataArray");
static_assert(offsetof(RCSoundManager_GetVoiceSoundDataArray, ReturnValue) == 0x000000, "Member 'RCSoundManager_GetVoiceSoundDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.isCurrentSoundID
// 0x0030 (0x0030 - 0x0000)
struct RCSoundManager_isCurrentSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharaID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManager_isCurrentSoundID) == 0x000008, "Wrong alignment on RCSoundManager_isCurrentSoundID");
static_assert(sizeof(RCSoundManager_isCurrentSoundID) == 0x000030, "Wrong size on RCSoundManager_isCurrentSoundID");
static_assert(offsetof(RCSoundManager_isCurrentSoundID, SoundType) == 0x000000, "Member 'RCSoundManager_isCurrentSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_isCurrentSoundID, SoundId) == 0x000008, "Member 'RCSoundManager_isCurrentSoundID::SoundId' has a wrong offset!");
static_assert(offsetof(RCSoundManager_isCurrentSoundID, CharaID) == 0x000018, "Member 'RCSoundManager_isCurrentSoundID::CharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManager_isCurrentSoundID, ReturnValue) == 0x000028, "Member 'RCSoundManager_isCurrentSoundID::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.IsLoadedNonResidentSheet
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManager_IsLoadedNonResidentSheet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_IsLoadedNonResidentSheet) == 0x000001, "Wrong alignment on RCSoundManager_IsLoadedNonResidentSheet");
static_assert(sizeof(RCSoundManager_IsLoadedNonResidentSheet) == 0x000001, "Wrong size on RCSoundManager_IsLoadedNonResidentSheet");
static_assert(offsetof(RCSoundManager_IsLoadedNonResidentSheet, ReturnValue) == 0x000000, "Member 'RCSoundManager_IsLoadedNonResidentSheet::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.isSameVolume
// 0x000C (0x000C - 0x0000)
struct RCSoundManager_isSameVolume final
{
public:
	float                                         lVolume;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         rVolume;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManager_isSameVolume) == 0x000004, "Wrong alignment on RCSoundManager_isSameVolume");
static_assert(sizeof(RCSoundManager_isSameVolume) == 0x00000C, "Wrong size on RCSoundManager_isSameVolume");
static_assert(offsetof(RCSoundManager_isSameVolume, lVolume) == 0x000000, "Member 'RCSoundManager_isSameVolume::lVolume' has a wrong offset!");
static_assert(offsetof(RCSoundManager_isSameVolume, rVolume) == 0x000004, "Member 'RCSoundManager_isSameVolume::rVolume' has a wrong offset!");
static_assert(offsetof(RCSoundManager_isSameVolume, ReturnValue) == 0x000008, "Member 'RCSoundManager_isSameVolume::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManager.LoadNonResidentSheet
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManager_LoadNonResidentSheet final
{
public:
	class FString                                 SheetID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_LoadNonResidentSheet) == 0x000008, "Wrong alignment on RCSoundManager_LoadNonResidentSheet");
static_assert(sizeof(RCSoundManager_LoadNonResidentSheet) == 0x000010, "Wrong size on RCSoundManager_LoadNonResidentSheet");
static_assert(offsetof(RCSoundManager_LoadNonResidentSheet, SheetID) == 0x000000, "Member 'RCSoundManager_LoadNonResidentSheet::SheetID' has a wrong offset!");

// Function RC.RCSoundManager.LoopSetting
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManager_LoopSetting final
{
public:
	class USoundAtomCue*                          pSoundCue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManager_LoopSetting) == 0x000008, "Wrong alignment on RCSoundManager_LoopSetting");
static_assert(sizeof(RCSoundManager_LoopSetting) == 0x000010, "Wrong size on RCSoundManager_LoopSetting");
static_assert(offsetof(RCSoundManager_LoopSetting, pSoundCue) == 0x000000, "Member 'RCSoundManager_LoopSetting::pSoundCue' has a wrong offset!");
static_assert(offsetof(RCSoundManager_LoopSetting, IsLoop) == 0x000008, "Member 'RCSoundManager_LoopSetting::IsLoop' has a wrong offset!");

// Function RC.RCSoundManager.PauseForSoundType
// 0x0002 (0x0002 - 0x0000)
struct RCSoundManager_PauseForSoundType final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllPause;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_PauseForSoundType) == 0x000001, "Wrong alignment on RCSoundManager_PauseForSoundType");
static_assert(sizeof(RCSoundManager_PauseForSoundType) == 0x000002, "Wrong size on RCSoundManager_PauseForSoundType");
static_assert(offsetof(RCSoundManager_PauseForSoundType, SoundType) == 0x000000, "Member 'RCSoundManager_PauseForSoundType::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_PauseForSoundType, bAllPause) == 0x000001, "Member 'RCSoundManager_PauseForSoundType::bAllPause' has a wrong offset!");

// Function RC.RCSoundManager.PauseSingle
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManager_PauseSingle final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_PauseSingle) == 0x000008, "Wrong alignment on RCSoundManager_PauseSingle");
static_assert(sizeof(RCSoundManager_PauseSingle) == 0x000020, "Wrong size on RCSoundManager_PauseSingle");
static_assert(offsetof(RCSoundManager_PauseSingle, SoundType) == 0x000000, "Member 'RCSoundManager_PauseSingle::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_PauseSingle, SoundId) == 0x000008, "Member 'RCSoundManager_PauseSingle::SoundId' has a wrong offset!");
static_assert(offsetof(RCSoundManager_PauseSingle, Actor) == 0x000018, "Member 'RCSoundManager_PauseSingle::Actor' has a wrong offset!");

// Function RC.RCSoundManager.Play
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManager_Play final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_Play) == 0x000004, "Wrong alignment on RCSoundManager_Play");
static_assert(sizeof(RCSoundManager_Play) == 0x000008, "Wrong size on RCSoundManager_Play");
static_assert(offsetof(RCSoundManager_Play, SoundType) == 0x000000, "Member 'RCSoundManager_Play::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_Play, IsLoop) == 0x000001, "Member 'RCSoundManager_Play::IsLoop' has a wrong offset!");
static_assert(offsetof(RCSoundManager_Play, StartTime) == 0x000004, "Member 'RCSoundManager_Play::StartTime' has a wrong offset!");

// Function RC.RCSoundManager.ResumeForSoundType
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManager_ResumeForSoundType final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_ResumeForSoundType) == 0x000001, "Wrong alignment on RCSoundManager_ResumeForSoundType");
static_assert(sizeof(RCSoundManager_ResumeForSoundType) == 0x000001, "Wrong size on RCSoundManager_ResumeForSoundType");
static_assert(offsetof(RCSoundManager_ResumeForSoundType, SoundType) == 0x000000, "Member 'RCSoundManager_ResumeForSoundType::SoundType' has a wrong offset!");

// Function RC.RCSoundManager.ResumeSingle
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManager_ResumeSingle final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_ResumeSingle) == 0x000008, "Wrong alignment on RCSoundManager_ResumeSingle");
static_assert(sizeof(RCSoundManager_ResumeSingle) == 0x000020, "Wrong size on RCSoundManager_ResumeSingle");
static_assert(offsetof(RCSoundManager_ResumeSingle, SoundType) == 0x000000, "Member 'RCSoundManager_ResumeSingle::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_ResumeSingle, SoundId) == 0x000008, "Member 'RCSoundManager_ResumeSingle::SoundId' has a wrong offset!");
static_assert(offsetof(RCSoundManager_ResumeSingle, Actor) == 0x000018, "Member 'RCSoundManager_ResumeSingle::Actor' has a wrong offset!");

// Function RC.RCSoundManager.SetFadeSoundForPositionData
// 0x0040 (0x0040 - 0x0000)
struct RCSoundManager_SetFadeSoundForPositionData final
{
public:
	struct FSoundPlayerPosFade                    Data;                                              // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_SetFadeSoundForPositionData) == 0x000008, "Wrong alignment on RCSoundManager_SetFadeSoundForPositionData");
static_assert(sizeof(RCSoundManager_SetFadeSoundForPositionData) == 0x000040, "Wrong size on RCSoundManager_SetFadeSoundForPositionData");
static_assert(offsetof(RCSoundManager_SetFadeSoundForPositionData, Data) == 0x000000, "Member 'RCSoundManager_SetFadeSoundForPositionData::Data' has a wrong offset!");

// Function RC.RCSoundManager.SetLipSyncCharaArray
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManager_SetLipSyncCharaArray final
{
public:
	TArray<class ACharacter*>                     charaArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_SetLipSyncCharaArray) == 0x000008, "Wrong alignment on RCSoundManager_SetLipSyncCharaArray");
static_assert(sizeof(RCSoundManager_SetLipSyncCharaArray) == 0x000010, "Wrong size on RCSoundManager_SetLipSyncCharaArray");
static_assert(offsetof(RCSoundManager_SetLipSyncCharaArray, charaArray) == 0x000000, "Member 'RCSoundManager_SetLipSyncCharaArray::charaArray' has a wrong offset!");

// Function RC.RCSoundManager.SetPlaySound
// 0x0050 (0x0050 - 0x0000)
struct RCSoundManager_SetPlaySound final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharaID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFadeIn;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSoundType                                  OptionType;                                        // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         volumeRate;                                        // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_SetPlaySound) == 0x000008, "Wrong alignment on RCSoundManager_SetPlaySound");
static_assert(sizeof(RCSoundManager_SetPlaySound) == 0x000050, "Wrong size on RCSoundManager_SetPlaySound");
static_assert(offsetof(RCSoundManager_SetPlaySound, SoundType) == 0x000000, "Member 'RCSoundManager_SetPlaySound::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_SetPlaySound, SoundId) == 0x000008, "Member 'RCSoundManager_SetPlaySound::SoundId' has a wrong offset!");
static_assert(offsetof(RCSoundManager_SetPlaySound, IsLoop) == 0x000018, "Member 'RCSoundManager_SetPlaySound::IsLoop' has a wrong offset!");
static_assert(offsetof(RCSoundManager_SetPlaySound, CharaID) == 0x000020, "Member 'RCSoundManager_SetPlaySound::CharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManager_SetPlaySound, isFadeIn) == 0x000030, "Member 'RCSoundManager_SetPlaySound::isFadeIn' has a wrong offset!");
static_assert(offsetof(RCSoundManager_SetPlaySound, ParamSoundID) == 0x000038, "Member 'RCSoundManager_SetPlaySound::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManager_SetPlaySound, OptionType) == 0x000048, "Member 'RCSoundManager_SetPlaySound::OptionType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_SetPlaySound, volumeRate) == 0x00004C, "Member 'RCSoundManager_SetPlaySound::volumeRate' has a wrong offset!");

// Function RC.RCSoundManager.Stop
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManager_Stop final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_Stop) == 0x000001, "Wrong alignment on RCSoundManager_Stop");
static_assert(sizeof(RCSoundManager_Stop) == 0x000001, "Wrong size on RCSoundManager_Stop");
static_assert(offsetof(RCSoundManager_Stop, SoundType) == 0x000000, "Member 'RCSoundManager_Stop::SoundType' has a wrong offset!");

// Function RC.RCSoundManager.UpdateFade
// 0x0004 (0x0004 - 0x0000)
struct RCSoundManager_UpdateFade final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_UpdateFade) == 0x000004, "Wrong alignment on RCSoundManager_UpdateFade");
static_assert(sizeof(RCSoundManager_UpdateFade) == 0x000004, "Wrong size on RCSoundManager_UpdateFade");
static_assert(offsetof(RCSoundManager_UpdateFade, DeltaTime) == 0x000000, "Member 'RCSoundManager_UpdateFade::DeltaTime' has a wrong offset!");

// Function RC.RCSoundManager.UpdateMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct RCSoundManager_UpdateMasterVolume final
{
public:
	float                                         MasterVolume;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_UpdateMasterVolume) == 0x000004, "Wrong alignment on RCSoundManager_UpdateMasterVolume");
static_assert(sizeof(RCSoundManager_UpdateMasterVolume) == 0x000004, "Wrong size on RCSoundManager_UpdateMasterVolume");
static_assert(offsetof(RCSoundManager_UpdateMasterVolume, MasterVolume) == 0x000000, "Member 'RCSoundManager_UpdateMasterVolume::MasterVolume' has a wrong offset!");

// Function RC.RCSoundManager.UpdateOptionVolume
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManager_UpdateOptionVolume final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManager_UpdateOptionVolume) == 0x000004, "Wrong alignment on RCSoundManager_UpdateOptionVolume");
static_assert(sizeof(RCSoundManager_UpdateOptionVolume) == 0x000008, "Wrong size on RCSoundManager_UpdateOptionVolume");
static_assert(offsetof(RCSoundManager_UpdateOptionVolume, SoundType) == 0x000000, "Member 'RCSoundManager_UpdateOptionVolume::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_UpdateOptionVolume, Volume) == 0x000004, "Member 'RCSoundManager_UpdateOptionVolume::Volume' has a wrong offset!");

// Function RC.RCSoundManager.UpdateSingleSoundVolume
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManager_UpdateSingleSoundVolume final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         volumeRate;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManager_UpdateSingleSoundVolume) == 0x000008, "Wrong alignment on RCSoundManager_UpdateSingleSoundVolume");
static_assert(sizeof(RCSoundManager_UpdateSingleSoundVolume) == 0x000020, "Wrong size on RCSoundManager_UpdateSingleSoundVolume");
static_assert(offsetof(RCSoundManager_UpdateSingleSoundVolume, SoundType) == 0x000000, "Member 'RCSoundManager_UpdateSingleSoundVolume::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManager_UpdateSingleSoundVolume, SoundId) == 0x000008, "Member 'RCSoundManager_UpdateSingleSoundVolume::SoundId' has a wrong offset!");
static_assert(offsetof(RCSoundManager_UpdateSingleSoundVolume, volumeRate) == 0x000018, "Member 'RCSoundManager_UpdateSingleSoundVolume::volumeRate' has a wrong offset!");

// Function RC.RCTPSCamera.SetFakeLocation
// 0x000C (0x000C - 0x0000)
struct RCTPSCamera_SetFakeLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTPSCamera_SetFakeLocation) == 0x000004, "Wrong alignment on RCTPSCamera_SetFakeLocation");
static_assert(sizeof(RCTPSCamera_SetFakeLocation) == 0x00000C, "Wrong size on RCTPSCamera_SetFakeLocation");
static_assert(offsetof(RCTPSCamera_SetFakeLocation, Location) == 0x000000, "Member 'RCTPSCamera_SetFakeLocation::Location' has a wrong offset!");

// Function RC.RCRealPlayerController.GetBoat
// 0x0008 (0x0008 - 0x0000)
struct RCRealPlayerController_GetBoat final
{
public:
	class ARCBoatPawn*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_GetBoat) == 0x000008, "Wrong alignment on RCRealPlayerController_GetBoat");
static_assert(sizeof(RCRealPlayerController_GetBoat) == 0x000008, "Wrong size on RCRealPlayerController_GetBoat");
static_assert(offsetof(RCRealPlayerController_GetBoat, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_GetBoat::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct RCRealPlayerController_GetCharacter final
{
public:
	class ARCCharacterRender*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_GetCharacter) == 0x000008, "Wrong alignment on RCRealPlayerController_GetCharacter");
static_assert(sizeof(RCRealPlayerController_GetCharacter) == 0x000008, "Wrong size on RCRealPlayerController_GetCharacter");
static_assert(offsetof(RCRealPlayerController_GetCharacter, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_GetCharacter::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.GetLastPlayerStartName
// 0x0008 (0x0008 - 0x0000)
struct RCRealPlayerController_GetLastPlayerStartName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_GetLastPlayerStartName) == 0x000004, "Wrong alignment on RCRealPlayerController_GetLastPlayerStartName");
static_assert(sizeof(RCRealPlayerController_GetLastPlayerStartName) == 0x000008, "Wrong size on RCRealPlayerController_GetLastPlayerStartName");
static_assert(offsetof(RCRealPlayerController_GetLastPlayerStartName, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_GetLastPlayerStartName::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.GetRainMaker
// 0x0008 (0x0008 - 0x0000)
struct RCRealPlayerController_GetRainMaker final
{
public:
	class ARCRainMaker*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_GetRainMaker) == 0x000008, "Wrong alignment on RCRealPlayerController_GetRainMaker");
static_assert(sizeof(RCRealPlayerController_GetRainMaker) == 0x000008, "Wrong size on RCRealPlayerController_GetRainMaker");
static_assert(offsetof(RCRealPlayerController_GetRainMaker, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_GetRainMaker::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.GetRealPlayerGameMode
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_GetRealPlayerGameMode final
{
public:
	ERCRealPlayerGameMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_GetRealPlayerGameMode) == 0x000001, "Wrong alignment on RCRealPlayerController_GetRealPlayerGameMode");
static_assert(sizeof(RCRealPlayerController_GetRealPlayerGameMode) == 0x000001, "Wrong size on RCRealPlayerController_GetRealPlayerGameMode");
static_assert(offsetof(RCRealPlayerController_GetRealPlayerGameMode, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_GetRealPlayerGameMode::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.GetResearchVisionTimeMode
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_GetResearchVisionTimeMode final
{
public:
	ERCResearchVisionTimeMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_GetResearchVisionTimeMode) == 0x000001, "Wrong alignment on RCRealPlayerController_GetResearchVisionTimeMode");
static_assert(sizeof(RCRealPlayerController_GetResearchVisionTimeMode) == 0x000001, "Wrong size on RCRealPlayerController_GetResearchVisionTimeMode");
static_assert(offsetof(RCRealPlayerController_GetResearchVisionTimeMode, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_GetResearchVisionTimeMode::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.IsInputFlag
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_IsInputFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_IsInputFlag) == 0x000001, "Wrong alignment on RCRealPlayerController_IsInputFlag");
static_assert(sizeof(RCRealPlayerController_IsInputFlag) == 0x000001, "Wrong size on RCRealPlayerController_IsInputFlag");
static_assert(offsetof(RCRealPlayerController_IsInputFlag, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_IsInputFlag::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.IsPlayerActor
// 0x0010 (0x0010 - 0x0000)
struct RCRealPlayerController_IsPlayerActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRealPlayerController_IsPlayerActor) == 0x000008, "Wrong alignment on RCRealPlayerController_IsPlayerActor");
static_assert(sizeof(RCRealPlayerController_IsPlayerActor) == 0x000010, "Wrong size on RCRealPlayerController_IsPlayerActor");
static_assert(offsetof(RCRealPlayerController_IsPlayerActor, InActor) == 0x000000, "Member 'RCRealPlayerController_IsPlayerActor::InActor' has a wrong offset!");
static_assert(offsetof(RCRealPlayerController_IsPlayerActor, ReturnValue) == 0x000008, "Member 'RCRealPlayerController_IsPlayerActor::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.IsPlayerReady
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_IsPlayerReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_IsPlayerReady) == 0x000001, "Wrong alignment on RCRealPlayerController_IsPlayerReady");
static_assert(sizeof(RCRealPlayerController_IsPlayerReady) == 0x000001, "Wrong size on RCRealPlayerController_IsPlayerReady");
static_assert(offsetof(RCRealPlayerController_IsPlayerReady, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_IsPlayerReady::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.IsReserchExitFlag
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_IsReserchExitFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_IsReserchExitFlag) == 0x000001, "Wrong alignment on RCRealPlayerController_IsReserchExitFlag");
static_assert(sizeof(RCRealPlayerController_IsReserchExitFlag) == 0x000001, "Wrong size on RCRealPlayerController_IsReserchExitFlag");
static_assert(offsetof(RCRealPlayerController_IsReserchExitFlag, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_IsReserchExitFlag::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.IsReserchMinimapFlag
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_IsReserchMinimapFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_IsReserchMinimapFlag) == 0x000001, "Wrong alignment on RCRealPlayerController_IsReserchMinimapFlag");
static_assert(sizeof(RCRealPlayerController_IsReserchMinimapFlag) == 0x000001, "Wrong size on RCRealPlayerController_IsReserchMinimapFlag");
static_assert(offsetof(RCRealPlayerController_IsReserchMinimapFlag, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_IsReserchMinimapFlag::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.IsReserchVisionChangeFlag
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_IsReserchVisionChangeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_IsReserchVisionChangeFlag) == 0x000001, "Wrong alignment on RCRealPlayerController_IsReserchVisionChangeFlag");
static_assert(sizeof(RCRealPlayerController_IsReserchVisionChangeFlag) == 0x000001, "Wrong size on RCRealPlayerController_IsReserchVisionChangeFlag");
static_assert(offsetof(RCRealPlayerController_IsReserchVisionChangeFlag, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_IsReserchVisionChangeFlag::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.SetBoatEnabled
// 0x0010 (0x0010 - 0x0000)
struct RCRealPlayerController_SetBoatEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCBoatPawn*                            BoatPawn;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetBoatEnabled) == 0x000008, "Wrong alignment on RCRealPlayerController_SetBoatEnabled");
static_assert(sizeof(RCRealPlayerController_SetBoatEnabled) == 0x000010, "Wrong size on RCRealPlayerController_SetBoatEnabled");
static_assert(offsetof(RCRealPlayerController_SetBoatEnabled, Enable) == 0x000000, "Member 'RCRealPlayerController_SetBoatEnabled::Enable' has a wrong offset!");
static_assert(offsetof(RCRealPlayerController_SetBoatEnabled, BoatPawn) == 0x000008, "Member 'RCRealPlayerController_SetBoatEnabled::BoatPawn' has a wrong offset!");

// Function RC.RCRealPlayerController.SetCharacterName
// 0x0008 (0x0008 - 0x0000)
struct RCRealPlayerController_SetCharacterName final
{
public:
	class FName                                   InCharacterName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetCharacterName) == 0x000004, "Wrong alignment on RCRealPlayerController_SetCharacterName");
static_assert(sizeof(RCRealPlayerController_SetCharacterName) == 0x000008, "Wrong size on RCRealPlayerController_SetCharacterName");
static_assert(offsetof(RCRealPlayerController_SetCharacterName, InCharacterName) == 0x000000, "Member 'RCRealPlayerController_SetCharacterName::InCharacterName' has a wrong offset!");

// Function RC.RCRealPlayerController.SetDebugScriptDraw
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetDebugScriptDraw final
{
public:
	bool                                          bDraw;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetDebugScriptDraw) == 0x000001, "Wrong alignment on RCRealPlayerController_SetDebugScriptDraw");
static_assert(sizeof(RCRealPlayerController_SetDebugScriptDraw) == 0x000001, "Wrong size on RCRealPlayerController_SetDebugScriptDraw");
static_assert(offsetof(RCRealPlayerController_SetDebugScriptDraw, bDraw) == 0x000000, "Member 'RCRealPlayerController_SetDebugScriptDraw::bDraw' has a wrong offset!");

// Function RC.RCRealPlayerController.SetInputFlag
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetInputFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetInputFlag) == 0x000001, "Wrong alignment on RCRealPlayerController_SetInputFlag");
static_assert(sizeof(RCRealPlayerController_SetInputFlag) == 0x000001, "Wrong size on RCRealPlayerController_SetInputFlag");
static_assert(offsetof(RCRealPlayerController_SetInputFlag, bFlag) == 0x000000, "Member 'RCRealPlayerController_SetInputFlag::bFlag' has a wrong offset!");

// Function RC.RCRealPlayerController.SetLastPlayerStartName
// 0x0008 (0x0008 - 0x0000)
struct RCRealPlayerController_SetLastPlayerStartName final
{
public:
	class FName                                   InPlayerStartName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetLastPlayerStartName) == 0x000004, "Wrong alignment on RCRealPlayerController_SetLastPlayerStartName");
static_assert(sizeof(RCRealPlayerController_SetLastPlayerStartName) == 0x000008, "Wrong size on RCRealPlayerController_SetLastPlayerStartName");
static_assert(offsetof(RCRealPlayerController_SetLastPlayerStartName, InPlayerStartName) == 0x000000, "Member 'RCRealPlayerController_SetLastPlayerStartName::InPlayerStartName' has a wrong offset!");

// Function RC.RCRealPlayerController.SetMoveSpeedType
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetMoveSpeedType final
{
public:
	ERCPlayerMoveSpeedType                        InSpeedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetMoveSpeedType) == 0x000001, "Wrong alignment on RCRealPlayerController_SetMoveSpeedType");
static_assert(sizeof(RCRealPlayerController_SetMoveSpeedType) == 0x000001, "Wrong size on RCRealPlayerController_SetMoveSpeedType");
static_assert(offsetof(RCRealPlayerController_SetMoveSpeedType, InSpeedType) == 0x000000, "Member 'RCRealPlayerController_SetMoveSpeedType::InSpeedType' has a wrong offset!");

// Function RC.RCRealPlayerController.SetNextToonDirectionalLightPosition
// 0x001C (0x001C - 0x0000)
struct RCRealPlayerController_SetNextToonDirectionalLightPosition final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotator;                                         // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRealPlayerController_SetNextToonDirectionalLightPosition) == 0x000004, "Wrong alignment on RCRealPlayerController_SetNextToonDirectionalLightPosition");
static_assert(sizeof(RCRealPlayerController_SetNextToonDirectionalLightPosition) == 0x00001C, "Wrong size on RCRealPlayerController_SetNextToonDirectionalLightPosition");
static_assert(offsetof(RCRealPlayerController_SetNextToonDirectionalLightPosition, InLocation) == 0x000000, "Member 'RCRealPlayerController_SetNextToonDirectionalLightPosition::InLocation' has a wrong offset!");
static_assert(offsetof(RCRealPlayerController_SetNextToonDirectionalLightPosition, InRotator) == 0x00000C, "Member 'RCRealPlayerController_SetNextToonDirectionalLightPosition::InRotator' has a wrong offset!");
static_assert(offsetof(RCRealPlayerController_SetNextToonDirectionalLightPosition, bForce) == 0x000018, "Member 'RCRealPlayerController_SetNextToonDirectionalLightPosition::bForce' has a wrong offset!");

// Function RC.RCRealPlayerController.SetRainDraw
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetRainDraw final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetRainDraw) == 0x000001, "Wrong alignment on RCRealPlayerController_SetRainDraw");
static_assert(sizeof(RCRealPlayerController_SetRainDraw) == 0x000001, "Wrong size on RCRealPlayerController_SetRainDraw");
static_assert(offsetof(RCRealPlayerController_SetRainDraw, flag) == 0x000000, "Member 'RCRealPlayerController_SetRainDraw::flag' has a wrong offset!");

// Function RC.RCRealPlayerController.SetRealPlayerGameMode
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetRealPlayerGameMode final
{
public:
	ERCRealPlayerGameMode                         InGameMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetRealPlayerGameMode) == 0x000001, "Wrong alignment on RCRealPlayerController_SetRealPlayerGameMode");
static_assert(sizeof(RCRealPlayerController_SetRealPlayerGameMode) == 0x000001, "Wrong size on RCRealPlayerController_SetRealPlayerGameMode");
static_assert(offsetof(RCRealPlayerController_SetRealPlayerGameMode, InGameMode) == 0x000000, "Member 'RCRealPlayerController_SetRealPlayerGameMode::InGameMode' has a wrong offset!");

// Function RC.RCRealPlayerController.SetResearchVisionTimeMode
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetResearchVisionTimeMode final
{
public:
	ERCResearchVisionTimeMode                     InTimeMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetResearchVisionTimeMode) == 0x000001, "Wrong alignment on RCRealPlayerController_SetResearchVisionTimeMode");
static_assert(sizeof(RCRealPlayerController_SetResearchVisionTimeMode) == 0x000001, "Wrong size on RCRealPlayerController_SetResearchVisionTimeMode");
static_assert(offsetof(RCRealPlayerController_SetResearchVisionTimeMode, InTimeMode) == 0x000000, "Member 'RCRealPlayerController_SetResearchVisionTimeMode::InTimeMode' has a wrong offset!");

// Function RC.RCRealPlayerController.SetReserchExitFlag
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetReserchExitFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetReserchExitFlag) == 0x000001, "Wrong alignment on RCRealPlayerController_SetReserchExitFlag");
static_assert(sizeof(RCRealPlayerController_SetReserchExitFlag) == 0x000001, "Wrong size on RCRealPlayerController_SetReserchExitFlag");
static_assert(offsetof(RCRealPlayerController_SetReserchExitFlag, bFlag) == 0x000000, "Member 'RCRealPlayerController_SetReserchExitFlag::bFlag' has a wrong offset!");

// Function RC.RCRealPlayerController.SetReserchMinimapFlag
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetReserchMinimapFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetReserchMinimapFlag) == 0x000001, "Wrong alignment on RCRealPlayerController_SetReserchMinimapFlag");
static_assert(sizeof(RCRealPlayerController_SetReserchMinimapFlag) == 0x000001, "Wrong size on RCRealPlayerController_SetReserchMinimapFlag");
static_assert(offsetof(RCRealPlayerController_SetReserchMinimapFlag, bFlag) == 0x000000, "Member 'RCRealPlayerController_SetReserchMinimapFlag::bFlag' has a wrong offset!");

// Function RC.RCRealPlayerController.SetReserchVisionChangeFlag
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetReserchVisionChangeFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetReserchVisionChangeFlag) == 0x000001, "Wrong alignment on RCRealPlayerController_SetReserchVisionChangeFlag");
static_assert(sizeof(RCRealPlayerController_SetReserchVisionChangeFlag) == 0x000001, "Wrong size on RCRealPlayerController_SetReserchVisionChangeFlag");
static_assert(offsetof(RCRealPlayerController_SetReserchVisionChangeFlag, bFlag) == 0x000000, "Member 'RCRealPlayerController_SetReserchVisionChangeFlag::bFlag' has a wrong offset!");

// Function RC.RCRealPlayerController.SetSpotSelectQuestionTextID
// 0x0008 (0x0008 - 0x0000)
struct RCRealPlayerController_SetSpotSelectQuestionTextID final
{
public:
	class FName                                   InSpotSelectQuestionTextID;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetSpotSelectQuestionTextID) == 0x000004, "Wrong alignment on RCRealPlayerController_SetSpotSelectQuestionTextID");
static_assert(sizeof(RCRealPlayerController_SetSpotSelectQuestionTextID) == 0x000008, "Wrong size on RCRealPlayerController_SetSpotSelectQuestionTextID");
static_assert(offsetof(RCRealPlayerController_SetSpotSelectQuestionTextID, InSpotSelectQuestionTextID) == 0x000000, "Member 'RCRealPlayerController_SetSpotSelectQuestionTextID::InSpotSelectQuestionTextID' has a wrong offset!");

// Function RC.RCRealPlayerController.SetStartMenuCollection
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_SetStartMenuCollection final
{
public:
	bool                                          bInStartMenuCollection;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_SetStartMenuCollection) == 0x000001, "Wrong alignment on RCRealPlayerController_SetStartMenuCollection");
static_assert(sizeof(RCRealPlayerController_SetStartMenuCollection) == 0x000001, "Wrong size on RCRealPlayerController_SetStartMenuCollection");
static_assert(offsetof(RCRealPlayerController_SetStartMenuCollection, bInStartMenuCollection) == 0x000000, "Member 'RCRealPlayerController_SetStartMenuCollection::bInStartMenuCollection' has a wrong offset!");

// Function RC.RCRealPlayerController.StartPlay
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_StartPlay final
{
public:
	ERCRealPlayerGameMode                         InGameMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_StartPlay) == 0x000001, "Wrong alignment on RCRealPlayerController_StartPlay");
static_assert(sizeof(RCRealPlayerController_StartPlay) == 0x000001, "Wrong size on RCRealPlayerController_StartPlay");
static_assert(offsetof(RCRealPlayerController_StartPlay, InGameMode) == 0x000000, "Member 'RCRealPlayerController_StartPlay::InGameMode' has a wrong offset!");

// Function RC.RCRealPlayerController.GetBoatSuspended
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerController_GetBoatSuspended final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_GetBoatSuspended) == 0x000001, "Wrong alignment on RCRealPlayerController_GetBoatSuspended");
static_assert(sizeof(RCRealPlayerController_GetBoatSuspended) == 0x000001, "Wrong size on RCRealPlayerController_GetBoatSuspended");
static_assert(offsetof(RCRealPlayerController_GetBoatSuspended, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_GetBoatSuspended::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerController.GetToonDirectionalLightActor
// 0x0008 (0x0008 - 0x0000)
struct RCRealPlayerController_GetToonDirectionalLightActor final
{
public:
	class ARCCharacterLigthActor*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerController_GetToonDirectionalLightActor) == 0x000008, "Wrong alignment on RCRealPlayerController_GetToonDirectionalLightActor");
static_assert(sizeof(RCRealPlayerController_GetToonDirectionalLightActor) == 0x000008, "Wrong size on RCRealPlayerController_GetToonDirectionalLightActor");
static_assert(offsetof(RCRealPlayerController_GetToonDirectionalLightActor, ReturnValue) == 0x000000, "Member 'RCRealPlayerController_GetToonDirectionalLightActor::ReturnValue' has a wrong offset!");

// Function RC.RCAttachmentBFL.ChangeLightColor
// 0x0028 (0x0028 - 0x0000)
struct RCAttachmentBFL_ChangeLightColor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InAmbientColor;                                    // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InDirectionalColor;                                // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAttachmentBFL_ChangeLightColor) == 0x000008, "Wrong alignment on RCAttachmentBFL_ChangeLightColor");
static_assert(sizeof(RCAttachmentBFL_ChangeLightColor) == 0x000028, "Wrong size on RCAttachmentBFL_ChangeLightColor");
static_assert(offsetof(RCAttachmentBFL_ChangeLightColor, InActor) == 0x000000, "Member 'RCAttachmentBFL_ChangeLightColor::InActor' has a wrong offset!");
static_assert(offsetof(RCAttachmentBFL_ChangeLightColor, InAmbientColor) == 0x000008, "Member 'RCAttachmentBFL_ChangeLightColor::InAmbientColor' has a wrong offset!");
static_assert(offsetof(RCAttachmentBFL_ChangeLightColor, InDirectionalColor) == 0x000018, "Member 'RCAttachmentBFL_ChangeLightColor::InDirectionalColor' has a wrong offset!");

// Function RC.RCAttachmentBFL.GetAttachmentActor
// 0x0010 (0x0010 - 0x0000)
struct RCAttachmentBFL_GetAttachmentActor final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCAttachmentBFL_GetAttachmentActor) == 0x000008, "Wrong alignment on RCAttachmentBFL_GetAttachmentActor");
static_assert(sizeof(RCAttachmentBFL_GetAttachmentActor) == 0x000010, "Wrong size on RCAttachmentBFL_GetAttachmentActor");
static_assert(offsetof(RCAttachmentBFL_GetAttachmentActor, InName) == 0x000000, "Member 'RCAttachmentBFL_GetAttachmentActor::InName' has a wrong offset!");
static_assert(offsetof(RCAttachmentBFL_GetAttachmentActor, ReturnValue) == 0x000008, "Member 'RCAttachmentBFL_GetAttachmentActor::ReturnValue' has a wrong offset!");

// Function RC.RCBgActorBFL.GetBgActor
// 0x0010 (0x0010 - 0x0000)
struct RCBgActorBFL_GetBgActor final
{
public:
	class FName                                   InBgActorName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCBgActor*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgActorBFL_GetBgActor) == 0x000008, "Wrong alignment on RCBgActorBFL_GetBgActor");
static_assert(sizeof(RCBgActorBFL_GetBgActor) == 0x000010, "Wrong size on RCBgActorBFL_GetBgActor");
static_assert(offsetof(RCBgActorBFL_GetBgActor, InBgActorName) == 0x000000, "Member 'RCBgActorBFL_GetBgActor::InBgActorName' has a wrong offset!");
static_assert(offsetof(RCBgActorBFL_GetBgActor, ReturnValue) == 0x000008, "Member 'RCBgActorBFL_GetBgActor::ReturnValue' has a wrong offset!");

// Function RC.RCBgActorBFL.IsVisibility
// 0x000C (0x000C - 0x0000)
struct RCBgActorBFL_IsVisibility final
{
public:
	class FName                                   InBgActorName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgActorBFL_IsVisibility) == 0x000004, "Wrong alignment on RCBgActorBFL_IsVisibility");
static_assert(sizeof(RCBgActorBFL_IsVisibility) == 0x00000C, "Wrong size on RCBgActorBFL_IsVisibility");
static_assert(offsetof(RCBgActorBFL_IsVisibility, InBgActorName) == 0x000000, "Member 'RCBgActorBFL_IsVisibility::InBgActorName' has a wrong offset!");
static_assert(offsetof(RCBgActorBFL_IsVisibility, ReturnValue) == 0x000008, "Member 'RCBgActorBFL_IsVisibility::ReturnValue' has a wrong offset!");

// Function RC.RCBgActorBFL.SetVisibility
// 0x000C (0x000C - 0x0000)
struct RCBgActorBFL_SetVisibility final
{
public:
	class FName                                   InBgActorName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleFlag;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgActorBFL_SetVisibility) == 0x000004, "Wrong alignment on RCBgActorBFL_SetVisibility");
static_assert(sizeof(RCBgActorBFL_SetVisibility) == 0x00000C, "Wrong size on RCBgActorBFL_SetVisibility");
static_assert(offsetof(RCBgActorBFL_SetVisibility, InBgActorName) == 0x000000, "Member 'RCBgActorBFL_SetVisibility::InBgActorName' has a wrong offset!");
static_assert(offsetof(RCBgActorBFL_SetVisibility, bVisibleFlag) == 0x000008, "Member 'RCBgActorBFL_SetVisibility::bVisibleFlag' has a wrong offset!");

// Function RC.RCBgActorBFL.SetVisibles
// 0x0018 (0x0018 - 0x0000)
struct RCBgActorBFL_SetVisibles final
{
public:
	class FString                                 InActorName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVisible;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgActorBFL_SetVisibles) == 0x000008, "Wrong alignment on RCBgActorBFL_SetVisibles");
static_assert(sizeof(RCBgActorBFL_SetVisibles) == 0x000018, "Wrong size on RCBgActorBFL_SetVisibles");
static_assert(offsetof(RCBgActorBFL_SetVisibles, InActorName) == 0x000000, "Member 'RCBgActorBFL_SetVisibles::InActorName' has a wrong offset!");
static_assert(offsetof(RCBgActorBFL_SetVisibles, bInVisible) == 0x000010, "Member 'RCBgActorBFL_SetVisibles::bInVisible' has a wrong offset!");

// Function RC.RCTItleSubStoryList.SubStoryListSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCTItleSubStoryList_SubStoryListSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTItleSubStoryList_SubStoryListSelectNavigation) == 0x000008, "Wrong alignment on RCTItleSubStoryList_SubStoryListSelectNavigation");
static_assert(sizeof(RCTItleSubStoryList_SubStoryListSelectNavigation) == 0x000010, "Wrong size on RCTItleSubStoryList_SubStoryListSelectNavigation");
static_assert(offsetof(RCTItleSubStoryList_SubStoryListSelectNavigation, InNavigation) == 0x000000, "Member 'RCTItleSubStoryList_SubStoryListSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTItleSubStoryList_SubStoryListSelectNavigation, ReturnValue) == 0x000008, "Member 'RCTItleSubStoryList_SubStoryListSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCBgBFL.IsMapIDEquale
// 0x0014 (0x0014 - 0x0000)
struct RCBgBFL_IsMapIDEquale final
{
public:
	class FName                                   InMapID1;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMapID2;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgBFL_IsMapIDEquale) == 0x000004, "Wrong alignment on RCBgBFL_IsMapIDEquale");
static_assert(sizeof(RCBgBFL_IsMapIDEquale) == 0x000014, "Wrong size on RCBgBFL_IsMapIDEquale");
static_assert(offsetof(RCBgBFL_IsMapIDEquale, InMapID1) == 0x000000, "Member 'RCBgBFL_IsMapIDEquale::InMapID1' has a wrong offset!");
static_assert(offsetof(RCBgBFL_IsMapIDEquale, InMapID2) == 0x000008, "Member 'RCBgBFL_IsMapIDEquale::InMapID2' has a wrong offset!");
static_assert(offsetof(RCBgBFL_IsMapIDEquale, ReturnValue) == 0x000010, "Member 'RCBgBFL_IsMapIDEquale::ReturnValue' has a wrong offset!");

// Function RC.RCBgBFL.IsSyncSubLevel
// 0x0001 (0x0001 - 0x0000)
struct RCBgBFL_IsSyncSubLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgBFL_IsSyncSubLevel) == 0x000001, "Wrong alignment on RCBgBFL_IsSyncSubLevel");
static_assert(sizeof(RCBgBFL_IsSyncSubLevel) == 0x000001, "Wrong size on RCBgBFL_IsSyncSubLevel");
static_assert(offsetof(RCBgBFL_IsSyncSubLevel, ReturnValue) == 0x000000, "Member 'RCBgBFL_IsSyncSubLevel::ReturnValue' has a wrong offset!");

// Function RC.RCBgBFL.LoadAllEventSetting
// 0x0018 (0x0018 - 0x0000)
struct RCBgBFL_LoadAllEventSetting final
{
public:
	int32                                         InChapterNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSceneNum;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMapID;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgBFL_LoadAllEventSetting) == 0x000004, "Wrong alignment on RCBgBFL_LoadAllEventSetting");
static_assert(sizeof(RCBgBFL_LoadAllEventSetting) == 0x000018, "Wrong size on RCBgBFL_LoadAllEventSetting");
static_assert(offsetof(RCBgBFL_LoadAllEventSetting, InChapterNum) == 0x000000, "Member 'RCBgBFL_LoadAllEventSetting::InChapterNum' has a wrong offset!");
static_assert(offsetof(RCBgBFL_LoadAllEventSetting, InSceneNum) == 0x000004, "Member 'RCBgBFL_LoadAllEventSetting::InSceneNum' has a wrong offset!");
static_assert(offsetof(RCBgBFL_LoadAllEventSetting, InMapID) == 0x00000C, "Member 'RCBgBFL_LoadAllEventSetting::InMapID' has a wrong offset!");
static_assert(offsetof(RCBgBFL_LoadAllEventSetting, ReturnValue) == 0x000014, "Member 'RCBgBFL_LoadAllEventSetting::ReturnValue' has a wrong offset!");

// Function RC.RCBgBFL.StartUnLoadSubLevelList
// 0x0003 (0x0003 - 0x0000)
struct RCBgBFL_StartUnLoadSubLevelList final
{
public:
	bool                                          bLoadingDraw;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerMove;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgBFL_StartUnLoadSubLevelList) == 0x000001, "Wrong alignment on RCBgBFL_StartUnLoadSubLevelList");
static_assert(sizeof(RCBgBFL_StartUnLoadSubLevelList) == 0x000003, "Wrong size on RCBgBFL_StartUnLoadSubLevelList");
static_assert(offsetof(RCBgBFL_StartUnLoadSubLevelList, bLoadingDraw) == 0x000000, "Member 'RCBgBFL_StartUnLoadSubLevelList::bLoadingDraw' has a wrong offset!");
static_assert(offsetof(RCBgBFL_StartUnLoadSubLevelList, bPlayerMove) == 0x000001, "Member 'RCBgBFL_StartUnLoadSubLevelList::bPlayerMove' has a wrong offset!");
static_assert(offsetof(RCBgBFL_StartUnLoadSubLevelList, ReturnValue) == 0x000002, "Member 'RCBgBFL_StartUnLoadSubLevelList::ReturnValue' has a wrong offset!");

// Function RC.RCLevelScriptActor.LoadAssets
// 0x0010 (0x0010 - 0x0000)
struct RCLevelScriptActor_LoadAssets final
{
public:
	TArray<TSoftClassPtr<class UClass>>           InAssets;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCLevelScriptActor_LoadAssets) == 0x000008, "Wrong alignment on RCLevelScriptActor_LoadAssets");
static_assert(sizeof(RCLevelScriptActor_LoadAssets) == 0x000010, "Wrong size on RCLevelScriptActor_LoadAssets");
static_assert(offsetof(RCLevelScriptActor_LoadAssets, InAssets) == 0x000000, "Member 'RCLevelScriptActor_LoadAssets::InAssets' has a wrong offset!");

// Function RC.RCEventTrigger.GetOtherActorName
// 0x0008 (0x0008 - 0x0000)
struct RCEventTrigger_GetOtherActorName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTrigger_GetOtherActorName) == 0x000004, "Wrong alignment on RCEventTrigger_GetOtherActorName");
static_assert(sizeof(RCEventTrigger_GetOtherActorName) == 0x000008, "Wrong size on RCEventTrigger_GetOtherActorName");
static_assert(offsetof(RCEventTrigger_GetOtherActorName, ReturnValue) == 0x000000, "Member 'RCEventTrigger_GetOtherActorName::ReturnValue' has a wrong offset!");

// Function RC.RCEventTrigger.IsCollisionEnable
// 0x0001 (0x0001 - 0x0000)
struct RCEventTrigger_IsCollisionEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTrigger_IsCollisionEnable) == 0x000001, "Wrong alignment on RCEventTrigger_IsCollisionEnable");
static_assert(sizeof(RCEventTrigger_IsCollisionEnable) == 0x000001, "Wrong size on RCEventTrigger_IsCollisionEnable");
static_assert(offsetof(RCEventTrigger_IsCollisionEnable, ReturnValue) == 0x000000, "Member 'RCEventTrigger_IsCollisionEnable::ReturnValue' has a wrong offset!");

// Function RC.RCEventTrigger.IsOtherPlayer
// 0x0001 (0x0001 - 0x0000)
struct RCEventTrigger_IsOtherPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTrigger_IsOtherPlayer) == 0x000001, "Wrong alignment on RCEventTrigger_IsOtherPlayer");
static_assert(sizeof(RCEventTrigger_IsOtherPlayer) == 0x000001, "Wrong size on RCEventTrigger_IsOtherPlayer");
static_assert(offsetof(RCEventTrigger_IsOtherPlayer, ReturnValue) == 0x000000, "Member 'RCEventTrigger_IsOtherPlayer::ReturnValue' has a wrong offset!");

// Function RC.RCEventTrigger.OnActorBeginOverlapScriptEntry
// 0x0010 (0x0010 - 0x0000)
struct RCEventTrigger_OnActorBeginOverlapScriptEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTrigger_OnActorBeginOverlapScriptEntry) == 0x000008, "Wrong alignment on RCEventTrigger_OnActorBeginOverlapScriptEntry");
static_assert(sizeof(RCEventTrigger_OnActorBeginOverlapScriptEntry) == 0x000010, "Wrong size on RCEventTrigger_OnActorBeginOverlapScriptEntry");
static_assert(offsetof(RCEventTrigger_OnActorBeginOverlapScriptEntry, OverlappedActor) == 0x000000, "Member 'RCEventTrigger_OnActorBeginOverlapScriptEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCEventTrigger_OnActorBeginOverlapScriptEntry, OtherActor) == 0x000008, "Member 'RCEventTrigger_OnActorBeginOverlapScriptEntry::OtherActor' has a wrong offset!");

// Function RC.RCEventTrigger.OnActorEndOverlapScriptEntry
// 0x0010 (0x0010 - 0x0000)
struct RCEventTrigger_OnActorEndOverlapScriptEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTrigger_OnActorEndOverlapScriptEntry) == 0x000008, "Wrong alignment on RCEventTrigger_OnActorEndOverlapScriptEntry");
static_assert(sizeof(RCEventTrigger_OnActorEndOverlapScriptEntry) == 0x000010, "Wrong size on RCEventTrigger_OnActorEndOverlapScriptEntry");
static_assert(offsetof(RCEventTrigger_OnActorEndOverlapScriptEntry, OverlappedActor) == 0x000000, "Member 'RCEventTrigger_OnActorEndOverlapScriptEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCEventTrigger_OnActorEndOverlapScriptEntry, OtherActor) == 0x000008, "Member 'RCEventTrigger_OnActorEndOverlapScriptEntry::OtherActor' has a wrong offset!");

// Function RC.RCEventTrigger.SetCollisionEnable
// 0x0001 (0x0001 - 0x0000)
struct RCEventTrigger_SetCollisionEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTrigger_SetCollisionEnable) == 0x000001, "Wrong alignment on RCEventTrigger_SetCollisionEnable");
static_assert(sizeof(RCEventTrigger_SetCollisionEnable) == 0x000001, "Wrong size on RCEventTrigger_SetCollisionEnable");
static_assert(offsetof(RCEventTrigger_SetCollisionEnable, bInEnable) == 0x000000, "Member 'RCEventTrigger_SetCollisionEnable::bInEnable' has a wrong offset!");

// Function RC.RCEventTrigger.SetOtherActorName
// 0x0008 (0x0008 - 0x0000)
struct RCEventTrigger_SetOtherActorName final
{
public:
	class FName                                   bName;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTrigger_SetOtherActorName) == 0x000004, "Wrong alignment on RCEventTrigger_SetOtherActorName");
static_assert(sizeof(RCEventTrigger_SetOtherActorName) == 0x000008, "Wrong size on RCEventTrigger_SetOtherActorName");
static_assert(offsetof(RCEventTrigger_SetOtherActorName, bName) == 0x000000, "Member 'RCEventTrigger_SetOtherActorName::bName' has a wrong offset!");

// Function RC.RCEventTrigger.SetOtherPlayer
// 0x0001 (0x0001 - 0x0000)
struct RCEventTrigger_SetOtherPlayer final
{
public:
	bool                                          bInOtherPlayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTrigger_SetOtherPlayer) == 0x000001, "Wrong alignment on RCEventTrigger_SetOtherPlayer");
static_assert(sizeof(RCEventTrigger_SetOtherPlayer) == 0x000001, "Wrong size on RCEventTrigger_SetOtherPlayer");
static_assert(offsetof(RCEventTrigger_SetOtherPlayer, bInOtherPlayer) == 0x000000, "Member 'RCEventTrigger_SetOtherPlayer::bInOtherPlayer' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.GetBgArea
// 0x0004 (0x0004 - 0x0000)
struct RCBgLevelScriptActor_GetBgArea final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_GetBgArea) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_GetBgArea");
static_assert(sizeof(RCBgLevelScriptActor_GetBgArea) == 0x000004, "Wrong size on RCBgLevelScriptActor_GetBgArea");
static_assert(offsetof(RCBgLevelScriptActor_GetBgArea, ReturnValue) == 0x000000, "Member 'RCBgLevelScriptActor_GetBgArea::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.GetBgMapID
// 0x0008 (0x0008 - 0x0000)
struct RCBgLevelScriptActor_GetBgMapID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_GetBgMapID) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_GetBgMapID");
static_assert(sizeof(RCBgLevelScriptActor_GetBgMapID) == 0x000008, "Wrong size on RCBgLevelScriptActor_GetBgMapID");
static_assert(offsetof(RCBgLevelScriptActor_GetBgMapID, ReturnValue) == 0x000000, "Member 'RCBgLevelScriptActor_GetBgMapID::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.GetBgMapIDLong
// 0x0008 (0x0008 - 0x0000)
struct RCBgLevelScriptActor_GetBgMapIDLong final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_GetBgMapIDLong) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_GetBgMapIDLong");
static_assert(sizeof(RCBgLevelScriptActor_GetBgMapIDLong) == 0x000008, "Wrong size on RCBgLevelScriptActor_GetBgMapIDLong");
static_assert(offsetof(RCBgLevelScriptActor_GetBgMapIDLong, ReturnValue) == 0x000000, "Member 'RCBgLevelScriptActor_GetBgMapIDLong::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.GetBgMapNum
// 0x0004 (0x0004 - 0x0000)
struct RCBgLevelScriptActor_GetBgMapNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_GetBgMapNum) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_GetBgMapNum");
static_assert(sizeof(RCBgLevelScriptActor_GetBgMapNum) == 0x000004, "Wrong size on RCBgLevelScriptActor_GetBgMapNum");
static_assert(offsetof(RCBgLevelScriptActor_GetBgMapNum, ReturnValue) == 0x000000, "Member 'RCBgLevelScriptActor_GetBgMapNum::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.GetBgType
// 0x0004 (0x0004 - 0x0000)
struct RCBgLevelScriptActor_GetBgType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_GetBgType) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_GetBgType");
static_assert(sizeof(RCBgLevelScriptActor_GetBgType) == 0x000004, "Wrong size on RCBgLevelScriptActor_GetBgType");
static_assert(offsetof(RCBgLevelScriptActor_GetBgType, ReturnValue) == 0x000000, "Member 'RCBgLevelScriptActor_GetBgType::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.GetCharacterSettingList
// 0x0020 (0x0020 - 0x0000)
struct RCBgLevelScriptActor_GetCharacterSettingList final
{
public:
	TArray<class FName>                           OutCharacterSettingList;                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InMapID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InChapterNum;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommonOnly;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_GetCharacterSettingList) == 0x000008, "Wrong alignment on RCBgLevelScriptActor_GetCharacterSettingList");
static_assert(sizeof(RCBgLevelScriptActor_GetCharacterSettingList) == 0x000020, "Wrong size on RCBgLevelScriptActor_GetCharacterSettingList");
static_assert(offsetof(RCBgLevelScriptActor_GetCharacterSettingList, OutCharacterSettingList) == 0x000000, "Member 'RCBgLevelScriptActor_GetCharacterSettingList::OutCharacterSettingList' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetCharacterSettingList, InMapID) == 0x000010, "Member 'RCBgLevelScriptActor_GetCharacterSettingList::InMapID' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetCharacterSettingList, InChapterNum) == 0x000018, "Member 'RCBgLevelScriptActor_GetCharacterSettingList::InChapterNum' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetCharacterSettingList, bCommonOnly) == 0x00001C, "Member 'RCBgLevelScriptActor_GetCharacterSettingList::bCommonOnly' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetCharacterSettingList, ReturnValue) == 0x00001D, "Member 'RCBgLevelScriptActor_GetCharacterSettingList::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.GetEventSettingList
// 0x0028 (0x0028 - 0x0000)
struct RCBgLevelScriptActor_GetEventSettingList final
{
public:
	TArray<class FName>                           OutEventSettingList;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutMapIDList;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InChapterNum;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommonOnly;                                       // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_GetEventSettingList) == 0x000008, "Wrong alignment on RCBgLevelScriptActor_GetEventSettingList");
static_assert(sizeof(RCBgLevelScriptActor_GetEventSettingList) == 0x000028, "Wrong size on RCBgLevelScriptActor_GetEventSettingList");
static_assert(offsetof(RCBgLevelScriptActor_GetEventSettingList, OutEventSettingList) == 0x000000, "Member 'RCBgLevelScriptActor_GetEventSettingList::OutEventSettingList' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetEventSettingList, OutMapIDList) == 0x000010, "Member 'RCBgLevelScriptActor_GetEventSettingList::OutMapIDList' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetEventSettingList, InChapterNum) == 0x000020, "Member 'RCBgLevelScriptActor_GetEventSettingList::InChapterNum' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetEventSettingList, bCommonOnly) == 0x000024, "Member 'RCBgLevelScriptActor_GetEventSettingList::bCommonOnly' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetEventSettingList, ReturnValue) == 0x000025, "Member 'RCBgLevelScriptActor_GetEventSettingList::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.GetSubLevelList
// 0x0020 (0x0020 - 0x0000)
struct RCBgLevelScriptActor_GetSubLevelList final
{
public:
	TArray<class FName>                           OutSubLevelList;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InMapID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommonOnly;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_GetSubLevelList) == 0x000008, "Wrong alignment on RCBgLevelScriptActor_GetSubLevelList");
static_assert(sizeof(RCBgLevelScriptActor_GetSubLevelList) == 0x000020, "Wrong size on RCBgLevelScriptActor_GetSubLevelList");
static_assert(offsetof(RCBgLevelScriptActor_GetSubLevelList, OutSubLevelList) == 0x000000, "Member 'RCBgLevelScriptActor_GetSubLevelList::OutSubLevelList' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetSubLevelList, InMapID) == 0x000010, "Member 'RCBgLevelScriptActor_GetSubLevelList::InMapID' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetSubLevelList, bCommonOnly) == 0x000018, "Member 'RCBgLevelScriptActor_GetSubLevelList::bCommonOnly' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_GetSubLevelList, ReturnValue) == 0x000019, "Member 'RCBgLevelScriptActor_GetSubLevelList::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.IsEnableSubLevel
// 0x0001 (0x0001 - 0x0000)
struct RCBgLevelScriptActor_IsEnableSubLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_IsEnableSubLevel) == 0x000001, "Wrong alignment on RCBgLevelScriptActor_IsEnableSubLevel");
static_assert(sizeof(RCBgLevelScriptActor_IsEnableSubLevel) == 0x000001, "Wrong size on RCBgLevelScriptActor_IsEnableSubLevel");
static_assert(offsetof(RCBgLevelScriptActor_IsEnableSubLevel, ReturnValue) == 0x000000, "Member 'RCBgLevelScriptActor_IsEnableSubLevel::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.IsSyncSubLevel
// 0x0001 (0x0001 - 0x0000)
struct RCBgLevelScriptActor_IsSyncSubLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_IsSyncSubLevel) == 0x000001, "Wrong alignment on RCBgLevelScriptActor_IsSyncSubLevel");
static_assert(sizeof(RCBgLevelScriptActor_IsSyncSubLevel) == 0x000001, "Wrong size on RCBgLevelScriptActor_IsSyncSubLevel");
static_assert(offsetof(RCBgLevelScriptActor_IsSyncSubLevel, ReturnValue) == 0x000000, "Member 'RCBgLevelScriptActor_IsSyncSubLevel::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.IsVisibledSubLevel
// 0x0001 (0x0001 - 0x0000)
struct RCBgLevelScriptActor_IsVisibledSubLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_IsVisibledSubLevel) == 0x000001, "Wrong alignment on RCBgLevelScriptActor_IsVisibledSubLevel");
static_assert(sizeof(RCBgLevelScriptActor_IsVisibledSubLevel) == 0x000001, "Wrong size on RCBgLevelScriptActor_IsVisibledSubLevel");
static_assert(offsetof(RCBgLevelScriptActor_IsVisibledSubLevel, ReturnValue) == 0x000000, "Member 'RCBgLevelScriptActor_IsVisibledSubLevel::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.LoadAllLevel
// 0x0018 (0x0018 - 0x0000)
struct RCBgLevelScriptActor_LoadAllLevel final
{
public:
	int32                                         InChapterNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSceneNum;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMapID;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommonOnly;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_LoadAllLevel) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_LoadAllLevel");
static_assert(sizeof(RCBgLevelScriptActor_LoadAllLevel) == 0x000018, "Wrong size on RCBgLevelScriptActor_LoadAllLevel");
static_assert(offsetof(RCBgLevelScriptActor_LoadAllLevel, InChapterNum) == 0x000000, "Member 'RCBgLevelScriptActor_LoadAllLevel::InChapterNum' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_LoadAllLevel, InSceneNum) == 0x000004, "Member 'RCBgLevelScriptActor_LoadAllLevel::InSceneNum' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_LoadAllLevel, InMapID) == 0x00000C, "Member 'RCBgLevelScriptActor_LoadAllLevel::InMapID' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_LoadAllLevel, bCommonOnly) == 0x000014, "Member 'RCBgLevelScriptActor_LoadAllLevel::bCommonOnly' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_LoadAllLevel, ReturnValue) == 0x000015, "Member 'RCBgLevelScriptActor_LoadAllLevel::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.LoadEventSubLevelList
// 0x0018 (0x0018 - 0x0000)
struct RCBgLevelScriptActor_LoadEventSubLevelList final
{
public:
	int32                                         InChapterNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSceneNum;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMapID;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommonOnly;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_LoadEventSubLevelList) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_LoadEventSubLevelList");
static_assert(sizeof(RCBgLevelScriptActor_LoadEventSubLevelList) == 0x000018, "Wrong size on RCBgLevelScriptActor_LoadEventSubLevelList");
static_assert(offsetof(RCBgLevelScriptActor_LoadEventSubLevelList, InChapterNum) == 0x000000, "Member 'RCBgLevelScriptActor_LoadEventSubLevelList::InChapterNum' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_LoadEventSubLevelList, InSceneNum) == 0x000004, "Member 'RCBgLevelScriptActor_LoadEventSubLevelList::InSceneNum' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_LoadEventSubLevelList, InMapID) == 0x00000C, "Member 'RCBgLevelScriptActor_LoadEventSubLevelList::InMapID' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_LoadEventSubLevelList, bCommonOnly) == 0x000014, "Member 'RCBgLevelScriptActor_LoadEventSubLevelList::bCommonOnly' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_LoadEventSubLevelList, ReturnValue) == 0x000015, "Member 'RCBgLevelScriptActor_LoadEventSubLevelList::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.ReadyLoadBgListMapID
// 0x000C (0x000C - 0x0000)
struct RCBgLevelScriptActor_ReadyLoadBgListMapID final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_ReadyLoadBgListMapID) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_ReadyLoadBgListMapID");
static_assert(sizeof(RCBgLevelScriptActor_ReadyLoadBgListMapID) == 0x00000C, "Wrong size on RCBgLevelScriptActor_ReadyLoadBgListMapID");
static_assert(offsetof(RCBgLevelScriptActor_ReadyLoadBgListMapID, InMapID) == 0x000000, "Member 'RCBgLevelScriptActor_ReadyLoadBgListMapID::InMapID' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_ReadyLoadBgListMapID, ReturnValue) == 0x000008, "Member 'RCBgLevelScriptActor_ReadyLoadBgListMapID::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.SetVisibility
// 0x0002 (0x0002 - 0x0000)
struct RCBgLevelScriptActor_SetVisibility final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActor;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_SetVisibility) == 0x000001, "Wrong alignment on RCBgLevelScriptActor_SetVisibility");
static_assert(sizeof(RCBgLevelScriptActor_SetVisibility) == 0x000002, "Wrong size on RCBgLevelScriptActor_SetVisibility");
static_assert(offsetof(RCBgLevelScriptActor_SetVisibility, bFlag) == 0x000000, "Member 'RCBgLevelScriptActor_SetVisibility::bFlag' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_SetVisibility, bIsActor) == 0x000001, "Member 'RCBgLevelScriptActor_SetVisibility::bIsActor' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.StartAddLoadSubLevelList
// 0x0018 (0x0018 - 0x0000)
struct RCBgLevelScriptActor_StartAddLoadSubLevelList final
{
public:
	TArray<class FName>                           InSubLevelNameList;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bLoadingDraw;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_StartAddLoadSubLevelList) == 0x000008, "Wrong alignment on RCBgLevelScriptActor_StartAddLoadSubLevelList");
static_assert(sizeof(RCBgLevelScriptActor_StartAddLoadSubLevelList) == 0x000018, "Wrong size on RCBgLevelScriptActor_StartAddLoadSubLevelList");
static_assert(offsetof(RCBgLevelScriptActor_StartAddLoadSubLevelList, InSubLevelNameList) == 0x000000, "Member 'RCBgLevelScriptActor_StartAddLoadSubLevelList::InSubLevelNameList' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartAddLoadSubLevelList, bLoadingDraw) == 0x000010, "Member 'RCBgLevelScriptActor_StartAddLoadSubLevelList::bLoadingDraw' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartAddLoadSubLevelList, ReturnValue) == 0x000011, "Member 'RCBgLevelScriptActor_StartAddLoadSubLevelList::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.StartLoadBgList
// 0x0010 (0x0010 - 0x0000)
struct RCBgLevelScriptActor_StartLoadBgList final
{
public:
	int32                                         Area;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapNum;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadingDraw;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerMove;                                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_StartLoadBgList) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_StartLoadBgList");
static_assert(sizeof(RCBgLevelScriptActor_StartLoadBgList) == 0x000010, "Wrong size on RCBgLevelScriptActor_StartLoadBgList");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgList, Area) == 0x000000, "Member 'RCBgLevelScriptActor_StartLoadBgList::Area' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgList, MapNum) == 0x000004, "Member 'RCBgLevelScriptActor_StartLoadBgList::MapNum' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgList, Type) == 0x000008, "Member 'RCBgLevelScriptActor_StartLoadBgList::Type' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgList, bLoadingDraw) == 0x00000C, "Member 'RCBgLevelScriptActor_StartLoadBgList::bLoadingDraw' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgList, bPlayerMove) == 0x00000D, "Member 'RCBgLevelScriptActor_StartLoadBgList::bPlayerMove' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgList, ReturnValue) == 0x00000E, "Member 'RCBgLevelScriptActor_StartLoadBgList::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.StartLoadBgListMapID
// 0x000C (0x000C - 0x0000)
struct RCBgLevelScriptActor_StartLoadBgListMapID final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadingDraw;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerMove;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_StartLoadBgListMapID) == 0x000004, "Wrong alignment on RCBgLevelScriptActor_StartLoadBgListMapID");
static_assert(sizeof(RCBgLevelScriptActor_StartLoadBgListMapID) == 0x00000C, "Wrong size on RCBgLevelScriptActor_StartLoadBgListMapID");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgListMapID, InMapID) == 0x000000, "Member 'RCBgLevelScriptActor_StartLoadBgListMapID::InMapID' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgListMapID, bLoadingDraw) == 0x000008, "Member 'RCBgLevelScriptActor_StartLoadBgListMapID::bLoadingDraw' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgListMapID, bPlayerMove) == 0x000009, "Member 'RCBgLevelScriptActor_StartLoadBgListMapID::bPlayerMove' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadBgListMapID, ReturnValue) == 0x00000A, "Member 'RCBgLevelScriptActor_StartLoadBgListMapID::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.StartLoadSubLevelList
// 0x0018 (0x0018 - 0x0000)
struct RCBgLevelScriptActor_StartLoadSubLevelList final
{
public:
	TArray<class FName>                           InSubLevelNameList;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bLoadingDraw;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerMove;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBgLevelScriptActor_StartLoadSubLevelList) == 0x000008, "Wrong alignment on RCBgLevelScriptActor_StartLoadSubLevelList");
static_assert(sizeof(RCBgLevelScriptActor_StartLoadSubLevelList) == 0x000018, "Wrong size on RCBgLevelScriptActor_StartLoadSubLevelList");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadSubLevelList, InSubLevelNameList) == 0x000000, "Member 'RCBgLevelScriptActor_StartLoadSubLevelList::InSubLevelNameList' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadSubLevelList, bLoadingDraw) == 0x000010, "Member 'RCBgLevelScriptActor_StartLoadSubLevelList::bLoadingDraw' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadSubLevelList, bPlayerMove) == 0x000011, "Member 'RCBgLevelScriptActor_StartLoadSubLevelList::bPlayerMove' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartLoadSubLevelList, ReturnValue) == 0x000012, "Member 'RCBgLevelScriptActor_StartLoadSubLevelList::ReturnValue' has a wrong offset!");

// Function RC.RCBgLevelScriptActor.StartUnLoadSubLevelList
// 0x0003 (0x0003 - 0x0000)
struct RCBgLevelScriptActor_StartUnLoadSubLevelList final
{
public:
	bool                                          bLoadingDraw;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerMove;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBgLevelScriptActor_StartUnLoadSubLevelList) == 0x000001, "Wrong alignment on RCBgLevelScriptActor_StartUnLoadSubLevelList");
static_assert(sizeof(RCBgLevelScriptActor_StartUnLoadSubLevelList) == 0x000003, "Wrong size on RCBgLevelScriptActor_StartUnLoadSubLevelList");
static_assert(offsetof(RCBgLevelScriptActor_StartUnLoadSubLevelList, bLoadingDraw) == 0x000000, "Member 'RCBgLevelScriptActor_StartUnLoadSubLevelList::bLoadingDraw' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartUnLoadSubLevelList, bPlayerMove) == 0x000001, "Member 'RCBgLevelScriptActor_StartUnLoadSubLevelList::bPlayerMove' has a wrong offset!");
static_assert(offsetof(RCBgLevelScriptActor_StartUnLoadSubLevelList, ReturnValue) == 0x000002, "Member 'RCBgLevelScriptActor_StartUnLoadSubLevelList::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.GetSvnCommitDateRC
// 0x0010 (0x0010 - 0x0000)
struct RCBlueprintFunctionLibrary_GetSvnCommitDateRC final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_GetSvnCommitDateRC) == 0x000008, "Wrong alignment on RCBlueprintFunctionLibrary_GetSvnCommitDateRC");
static_assert(sizeof(RCBlueprintFunctionLibrary_GetSvnCommitDateRC) == 0x000010, "Wrong size on RCBlueprintFunctionLibrary_GetSvnCommitDateRC");
static_assert(offsetof(RCBlueprintFunctionLibrary_GetSvnCommitDateRC, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_GetSvnCommitDateRC::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.GetSvnCommitDateRCDev
// 0x0010 (0x0010 - 0x0000)
struct RCBlueprintFunctionLibrary_GetSvnCommitDateRCDev final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_GetSvnCommitDateRCDev) == 0x000008, "Wrong alignment on RCBlueprintFunctionLibrary_GetSvnCommitDateRCDev");
static_assert(sizeof(RCBlueprintFunctionLibrary_GetSvnCommitDateRCDev) == 0x000010, "Wrong size on RCBlueprintFunctionLibrary_GetSvnCommitDateRCDev");
static_assert(offsetof(RCBlueprintFunctionLibrary_GetSvnCommitDateRCDev, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_GetSvnCommitDateRCDev::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.GetSvnRevisionNumberRC
// 0x0010 (0x0010 - 0x0000)
struct RCBlueprintFunctionLibrary_GetSvnRevisionNumberRC final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_GetSvnRevisionNumberRC) == 0x000008, "Wrong alignment on RCBlueprintFunctionLibrary_GetSvnRevisionNumberRC");
static_assert(sizeof(RCBlueprintFunctionLibrary_GetSvnRevisionNumberRC) == 0x000010, "Wrong size on RCBlueprintFunctionLibrary_GetSvnRevisionNumberRC");
static_assert(offsetof(RCBlueprintFunctionLibrary_GetSvnRevisionNumberRC, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_GetSvnRevisionNumberRC::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.GetSvnRevisionNumberRCDev
// 0x0010 (0x0010 - 0x0000)
struct RCBlueprintFunctionLibrary_GetSvnRevisionNumberRCDev final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_GetSvnRevisionNumberRCDev) == 0x000008, "Wrong alignment on RCBlueprintFunctionLibrary_GetSvnRevisionNumberRCDev");
static_assert(sizeof(RCBlueprintFunctionLibrary_GetSvnRevisionNumberRCDev) == 0x000010, "Wrong size on RCBlueprintFunctionLibrary_GetSvnRevisionNumberRCDev");
static_assert(offsetof(RCBlueprintFunctionLibrary_GetSvnRevisionNumberRCDev, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_GetSvnRevisionNumberRCDev::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsAssetAllLoadComplete
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsAssetAllLoadComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsAssetAllLoadComplete) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsAssetAllLoadComplete");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsAssetAllLoadComplete) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsAssetAllLoadComplete");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsAssetAllLoadComplete, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsAssetAllLoadComplete::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsDevelopmentBuild
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsDevelopmentBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsDevelopmentBuild) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsDevelopmentBuild");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsDevelopmentBuild) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsDevelopmentBuild");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsDevelopmentBuild, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsDevelopmentBuild::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsDisableChangeSubLevel
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsDisableChangeSubLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsDisableChangeSubLevel) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsDisableChangeSubLevel");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsDisableChangeSubLevel) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsDisableChangeSubLevel");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsDisableChangeSubLevel, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsDisableChangeSubLevel::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsLoadComplete
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsLoadComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsLoadComplete) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsLoadComplete");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsLoadComplete) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsLoadComplete");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsLoadComplete, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsLoadComplete::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsMapMoveNotRealPlChange
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsMapMoveNotRealPlChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsMapMoveNotRealPlChange) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsMapMoveNotRealPlChange");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsMapMoveNotRealPlChange) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsMapMoveNotRealPlChange");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsMapMoveNotRealPlChange, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsMapMoveNotRealPlChange::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsOpenDebugMenu
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsOpenDebugMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsOpenDebugMenu) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsOpenDebugMenu");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsOpenDebugMenu) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsOpenDebugMenu");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsOpenDebugMenu, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsOpenDebugMenu::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsOpenSpUEDebugMenu
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsOpenSpUEDebugMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsOpenSpUEDebugMenu) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsOpenSpUEDebugMenu");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsOpenSpUEDebugMenu) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsOpenSpUEDebugMenu");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsOpenSpUEDebugMenu, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsOpenSpUEDebugMenu::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsPause
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsPause) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsPause");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsPause) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsPause");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsPause, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsPause::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsPauseEnable
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsPauseEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsPauseEnable) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsPauseEnable");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsPauseEnable) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsPauseEnable");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsPauseEnable, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsPauseEnable::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsRealSceneChangePLChange
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsRealSceneChangePLChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsRealSceneChangePLChange) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsRealSceneChangePLChange");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsRealSceneChangePLChange) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsRealSceneChangePLChange");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsRealSceneChangePLChange, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsRealSceneChangePLChange::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsScreenFade
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsScreenFade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsScreenFade) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsScreenFade");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsScreenFade) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsScreenFade");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsScreenFade, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsScreenFade::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsScreenFadeOut
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsScreenFadeOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsScreenFadeOut) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsScreenFadeOut");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsScreenFadeOut) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsScreenFadeOut");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsScreenFadeOut, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsScreenFadeOut::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.IsScreenFadeTypeUi
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_IsScreenFadeTypeUi final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_IsScreenFadeTypeUi) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_IsScreenFadeTypeUi");
static_assert(sizeof(RCBlueprintFunctionLibrary_IsScreenFadeTypeUi) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_IsScreenFadeTypeUi");
static_assert(offsetof(RCBlueprintFunctionLibrary_IsScreenFadeTypeUi, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_IsScreenFadeTypeUi::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.SetLoadDisplayNum
// 0x0004 (0x0004 - 0x0000)
struct RCBlueprintFunctionLibrary_SetLoadDisplayNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_SetLoadDisplayNum) == 0x000004, "Wrong alignment on RCBlueprintFunctionLibrary_SetLoadDisplayNum");
static_assert(sizeof(RCBlueprintFunctionLibrary_SetLoadDisplayNum) == 0x000004, "Wrong size on RCBlueprintFunctionLibrary_SetLoadDisplayNum");
static_assert(offsetof(RCBlueprintFunctionLibrary_SetLoadDisplayNum, Num) == 0x000000, "Member 'RCBlueprintFunctionLibrary_SetLoadDisplayNum::Num' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.SetPause
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_SetPause final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_SetPause) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_SetPause");
static_assert(sizeof(RCBlueprintFunctionLibrary_SetPause) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_SetPause");
static_assert(offsetof(RCBlueprintFunctionLibrary_SetPause, bInFlag) == 0x000000, "Member 'RCBlueprintFunctionLibrary_SetPause::bInFlag' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.SetPauseEnable
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_SetPauseEnable final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_SetPauseEnable) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_SetPauseEnable");
static_assert(sizeof(RCBlueprintFunctionLibrary_SetPauseEnable) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_SetPauseEnable");
static_assert(offsetof(RCBlueprintFunctionLibrary_SetPauseEnable, bInFlag) == 0x000000, "Member 'RCBlueprintFunctionLibrary_SetPauseEnable::bInFlag' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.SetPlayerPauseMoveTest
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_SetPlayerPauseMoveTest final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_SetPlayerPauseMoveTest) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_SetPlayerPauseMoveTest");
static_assert(sizeof(RCBlueprintFunctionLibrary_SetPlayerPauseMoveTest) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_SetPlayerPauseMoveTest");
static_assert(offsetof(RCBlueprintFunctionLibrary_SetPlayerPauseMoveTest, bInFlag) == 0x000000, "Member 'RCBlueprintFunctionLibrary_SetPlayerPauseMoveTest::bInFlag' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.StartLongLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_StartLongLoadingScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_StartLongLoadingScreen) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_StartLongLoadingScreen");
static_assert(sizeof(RCBlueprintFunctionLibrary_StartLongLoadingScreen) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_StartLongLoadingScreen");
static_assert(offsetof(RCBlueprintFunctionLibrary_StartLongLoadingScreen, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_StartLongLoadingScreen::ReturnValue' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.StartSceneChange
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_StartSceneChange final
{
public:
	ERCSceneChangeType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_StartSceneChange) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_StartSceneChange");
static_assert(sizeof(RCBlueprintFunctionLibrary_StartSceneChange) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_StartSceneChange");
static_assert(offsetof(RCBlueprintFunctionLibrary_StartSceneChange, Type) == 0x000000, "Member 'RCBlueprintFunctionLibrary_StartSceneChange::Type' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.StartScreenFadeIn
// 0x0004 (0x0004 - 0x0000)
struct RCBlueprintFunctionLibrary_StartScreenFadeIn final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_StartScreenFadeIn) == 0x000004, "Wrong alignment on RCBlueprintFunctionLibrary_StartScreenFadeIn");
static_assert(sizeof(RCBlueprintFunctionLibrary_StartScreenFadeIn) == 0x000004, "Wrong size on RCBlueprintFunctionLibrary_StartScreenFadeIn");
static_assert(offsetof(RCBlueprintFunctionLibrary_StartScreenFadeIn, Duration) == 0x000000, "Member 'RCBlueprintFunctionLibrary_StartScreenFadeIn::Duration' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.StartScreenFadeOut
// 0x0018 (0x0018 - 0x0000)
struct RCBlueprintFunctionLibrary_StartScreenFadeOut final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCFadeType                                   InType;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBlueprintFunctionLibrary_StartScreenFadeOut) == 0x000004, "Wrong alignment on RCBlueprintFunctionLibrary_StartScreenFadeOut");
static_assert(sizeof(RCBlueprintFunctionLibrary_StartScreenFadeOut) == 0x000018, "Wrong size on RCBlueprintFunctionLibrary_StartScreenFadeOut");
static_assert(offsetof(RCBlueprintFunctionLibrary_StartScreenFadeOut, Duration) == 0x000000, "Member 'RCBlueprintFunctionLibrary_StartScreenFadeOut::Duration' has a wrong offset!");
static_assert(offsetof(RCBlueprintFunctionLibrary_StartScreenFadeOut, Color) == 0x000004, "Member 'RCBlueprintFunctionLibrary_StartScreenFadeOut::Color' has a wrong offset!");
static_assert(offsetof(RCBlueprintFunctionLibrary_StartScreenFadeOut, InType) == 0x000014, "Member 'RCBlueprintFunctionLibrary_StartScreenFadeOut::InType' has a wrong offset!");

// Function RC.RCBlueprintFunctionLibrary.StartShortLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct RCBlueprintFunctionLibrary_StartShortLoadingScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBlueprintFunctionLibrary_StartShortLoadingScreen) == 0x000001, "Wrong alignment on RCBlueprintFunctionLibrary_StartShortLoadingScreen");
static_assert(sizeof(RCBlueprintFunctionLibrary_StartShortLoadingScreen) == 0x000001, "Wrong size on RCBlueprintFunctionLibrary_StartShortLoadingScreen");
static_assert(offsetof(RCBlueprintFunctionLibrary_StartShortLoadingScreen, ReturnValue) == 0x000000, "Member 'RCBlueprintFunctionLibrary_StartShortLoadingScreen::ReturnValue' has a wrong offset!");

// Function RC.RCBoatBFL.Disemberk
// 0x0001 (0x0001 - 0x0000)
struct RCBoatBFL_Disemberk final
{
public:
	bool                                          OnlyFreeingControl;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatBFL_Disemberk) == 0x000001, "Wrong alignment on RCBoatBFL_Disemberk");
static_assert(sizeof(RCBoatBFL_Disemberk) == 0x000001, "Wrong size on RCBoatBFL_Disemberk");
static_assert(offsetof(RCBoatBFL_Disemberk, OnlyFreeingControl) == 0x000000, "Member 'RCBoatBFL_Disemberk::OnlyFreeingControl' has a wrong offset!");

// Function RC.RCBoatBFL.GetPassenger
// 0x0018 (0x0018 - 0x0000)
struct RCBoatBFL_GetPassenger final
{
public:
	class APawn*                                  Boat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCCharacterScript*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatBFL_GetPassenger) == 0x000008, "Wrong alignment on RCBoatBFL_GetPassenger");
static_assert(sizeof(RCBoatBFL_GetPassenger) == 0x000018, "Wrong size on RCBoatBFL_GetPassenger");
static_assert(offsetof(RCBoatBFL_GetPassenger, Boat) == 0x000000, "Member 'RCBoatBFL_GetPassenger::Boat' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_GetPassenger, Socket) == 0x000008, "Member 'RCBoatBFL_GetPassenger::Socket' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_GetPassenger, ReturnValue) == 0x000010, "Member 'RCBoatBFL_GetPassenger::ReturnValue' has a wrong offset!");

// Function RC.RCBoatBFL.GetPassengers
// 0x0018 (0x0018 - 0x0000)
struct RCBoatBFL_GetPassengers final
{
public:
	class APawn*                                  Boat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARCCharacterScript*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatBFL_GetPassengers) == 0x000008, "Wrong alignment on RCBoatBFL_GetPassengers");
static_assert(sizeof(RCBoatBFL_GetPassengers) == 0x000018, "Wrong size on RCBoatBFL_GetPassengers");
static_assert(offsetof(RCBoatBFL_GetPassengers, Boat) == 0x000000, "Member 'RCBoatBFL_GetPassengers::Boat' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_GetPassengers, ReturnValue) == 0x000008, "Member 'RCBoatBFL_GetPassengers::ReturnValue' has a wrong offset!");

// Function RC.RCBoatBFL.GoAboard
// 0x0010 (0x0010 - 0x0000)
struct RCBoatBFL_GoAboard final
{
public:
	class APawn*                                  Boat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Driver;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatBFL_GoAboard) == 0x000008, "Wrong alignment on RCBoatBFL_GoAboard");
static_assert(sizeof(RCBoatBFL_GoAboard) == 0x000010, "Wrong size on RCBoatBFL_GoAboard");
static_assert(offsetof(RCBoatBFL_GoAboard, Boat) == 0x000000, "Member 'RCBoatBFL_GoAboard::Boat' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_GoAboard, Driver) == 0x000008, "Member 'RCBoatBFL_GoAboard::Driver' has a wrong offset!");

// Function RC.RCBoatBFL.GoAboard2
// 0x0020 (0x0020 - 0x0000)
struct RCBoatBFL_GoAboard2 final
{
public:
	class APawn*                                  Boat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCCharacterScript*                     Passenger;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Player;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reset;                                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBoatBFL_GoAboard2) == 0x000008, "Wrong alignment on RCBoatBFL_GoAboard2");
static_assert(sizeof(RCBoatBFL_GoAboard2) == 0x000020, "Wrong size on RCBoatBFL_GoAboard2");
static_assert(offsetof(RCBoatBFL_GoAboard2, Boat) == 0x000000, "Member 'RCBoatBFL_GoAboard2::Boat' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_GoAboard2, Socket) == 0x000008, "Member 'RCBoatBFL_GoAboard2::Socket' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_GoAboard2, Passenger) == 0x000010, "Member 'RCBoatBFL_GoAboard2::Passenger' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_GoAboard2, Player) == 0x000018, "Member 'RCBoatBFL_GoAboard2::Player' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_GoAboard2, Reset) == 0x000019, "Member 'RCBoatBFL_GoAboard2::Reset' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_GoAboard2, ReturnValue) == 0x00001A, "Member 'RCBoatBFL_GoAboard2::ReturnValue' has a wrong offset!");

// Function RC.RCBoatBFL.Pause
// 0x0008 (0x0008 - 0x0000)
struct RCBoatBFL_Pause final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatBFL_Pause) == 0x000008, "Wrong alignment on RCBoatBFL_Pause");
static_assert(sizeof(RCBoatBFL_Pause) == 0x000008, "Wrong size on RCBoatBFL_Pause");
static_assert(offsetof(RCBoatBFL_Pause, ReturnValue) == 0x000000, "Member 'RCBoatBFL_Pause::ReturnValue' has a wrong offset!");

// Function RC.RCBoatBFL.Resume
// 0x0008 (0x0008 - 0x0000)
struct RCBoatBFL_Resume final
{
public:
	class APawn*                                  Boat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatBFL_Resume) == 0x000008, "Wrong alignment on RCBoatBFL_Resume");
static_assert(sizeof(RCBoatBFL_Resume) == 0x000008, "Wrong size on RCBoatBFL_Resume");
static_assert(offsetof(RCBoatBFL_Resume, Boat) == 0x000000, "Member 'RCBoatBFL_Resume::Boat' has a wrong offset!");

// Function RC.RCBoatBFL.TakePayload
// 0x0020 (0x0020 - 0x0000)
struct RCBoatBFL_TakePayload final
{
public:
	class APawn*                                  Boat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Passenger;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBoatBFL_TakePayload) == 0x000008, "Wrong alignment on RCBoatBFL_TakePayload");
static_assert(sizeof(RCBoatBFL_TakePayload) == 0x000020, "Wrong size on RCBoatBFL_TakePayload");
static_assert(offsetof(RCBoatBFL_TakePayload, Boat) == 0x000000, "Member 'RCBoatBFL_TakePayload::Boat' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_TakePayload, Socket) == 0x000008, "Member 'RCBoatBFL_TakePayload::Socket' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_TakePayload, Passenger) == 0x000010, "Member 'RCBoatBFL_TakePayload::Passenger' has a wrong offset!");
static_assert(offsetof(RCBoatBFL_TakePayload, ReturnValue) == 0x000018, "Member 'RCBoatBFL_TakePayload::ReturnValue' has a wrong offset!");

// Function RC.RCBoatPawn.GetNavigationHead
// 0x000C (0x000C - 0x0000)
struct RCBoatPawn_GetNavigationHead final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_GetNavigationHead) == 0x000004, "Wrong alignment on RCBoatPawn_GetNavigationHead");
static_assert(sizeof(RCBoatPawn_GetNavigationHead) == 0x00000C, "Wrong size on RCBoatPawn_GetNavigationHead");
static_assert(offsetof(RCBoatPawn_GetNavigationHead, ReturnValue) == 0x000000, "Member 'RCBoatPawn_GetNavigationHead::ReturnValue' has a wrong offset!");

// Function RC.RCBoatPawn.GetNavigationVelocity
// 0x000C (0x000C - 0x0000)
struct RCBoatPawn_GetNavigationVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_GetNavigationVelocity) == 0x000004, "Wrong alignment on RCBoatPawn_GetNavigationVelocity");
static_assert(sizeof(RCBoatPawn_GetNavigationVelocity) == 0x00000C, "Wrong size on RCBoatPawn_GetNavigationVelocity");
static_assert(offsetof(RCBoatPawn_GetNavigationVelocity, ReturnValue) == 0x000000, "Member 'RCBoatPawn_GetNavigationVelocity::ReturnValue' has a wrong offset!");

// Function RC.RCBoatPawn.GetNavigationVelocityNorm
// 0x0010 (0x0010 - 0x0000)
struct RCBoatPawn_GetNavigationVelocityNorm final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_GetNavigationVelocityNorm) == 0x000004, "Wrong alignment on RCBoatPawn_GetNavigationVelocityNorm");
static_assert(sizeof(RCBoatPawn_GetNavigationVelocityNorm) == 0x000010, "Wrong size on RCBoatPawn_GetNavigationVelocityNorm");
static_assert(offsetof(RCBoatPawn_GetNavigationVelocityNorm, DeltaTime) == 0x000000, "Member 'RCBoatPawn_GetNavigationVelocityNorm::DeltaTime' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_GetNavigationVelocityNorm, ReturnValue) == 0x000004, "Member 'RCBoatPawn_GetNavigationVelocityNorm::ReturnValue' has a wrong offset!");

// Function RC.RCBoatPawn.GetSimulationTick
// 0x0008 (0x0008 - 0x0000)
struct RCBoatPawn_GetSimulationTick final
{
public:
	float                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_GetSimulationTick) == 0x000004, "Wrong alignment on RCBoatPawn_GetSimulationTick");
static_assert(sizeof(RCBoatPawn_GetSimulationTick) == 0x000008, "Wrong size on RCBoatPawn_GetSimulationTick");
static_assert(offsetof(RCBoatPawn_GetSimulationTick, Tick) == 0x000000, "Member 'RCBoatPawn_GetSimulationTick::Tick' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_GetSimulationTick, ReturnValue) == 0x000004, "Member 'RCBoatPawn_GetSimulationTick::ReturnValue' has a wrong offset!");

// Function RC.RCBoatPawn.OnCrash
// 0x002C (0x002C - 0x0000)
struct RCBoatPawn_OnCrash final
{
public:
	bool                                          DidSpawnEffect;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLoc;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                head;                                              // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_OnCrash) == 0x000004, "Wrong alignment on RCBoatPawn_OnCrash");
static_assert(sizeof(RCBoatPawn_OnCrash) == 0x00002C, "Wrong size on RCBoatPawn_OnCrash");
static_assert(offsetof(RCBoatPawn_OnCrash, DidSpawnEffect) == 0x000000, "Member 'RCBoatPawn_OnCrash::DidSpawnEffect' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnCrash, HitLoc) == 0x000004, "Member 'RCBoatPawn_OnCrash::HitLoc' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnCrash, head) == 0x000010, "Member 'RCBoatPawn_OnCrash::head' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnCrash, Velocity) == 0x00001C, "Member 'RCBoatPawn_OnCrash::Velocity' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnCrash, DeltaTime) == 0x000028, "Member 'RCBoatPawn_OnCrash::DeltaTime' has a wrong offset!");

// Function RC.RCBoatPawn.OnCrashed
// 0x00B0 (0x00B0 - 0x0000)
struct RCBoatPawn_OnCrashed final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCBoatPawn_OnCrashed) == 0x000008, "Wrong alignment on RCBoatPawn_OnCrashed");
static_assert(sizeof(RCBoatPawn_OnCrashed) == 0x0000B0, "Wrong size on RCBoatPawn_OnCrashed");
static_assert(offsetof(RCBoatPawn_OnCrashed, Component) == 0x000000, "Member 'RCBoatPawn_OnCrashed::Component' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnCrashed, OtherActor) == 0x000008, "Member 'RCBoatPawn_OnCrashed::OtherActor' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnCrashed, OtherComponent) == 0x000010, "Member 'RCBoatPawn_OnCrashed::OtherComponent' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnCrashed, Normal) == 0x000018, "Member 'RCBoatPawn_OnCrashed::Normal' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnCrashed, HitResult) == 0x000024, "Member 'RCBoatPawn_OnCrashed::HitResult' has a wrong offset!");

// Function RC.RCBoatPawn.OnNavigationUpdate
// 0x0020 (0x0020 - 0x0000)
struct RCBoatPawn_OnNavigationUpdate final
{
public:
	struct FVector                                head;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDegrees;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_OnNavigationUpdate) == 0x000004, "Wrong alignment on RCBoatPawn_OnNavigationUpdate");
static_assert(sizeof(RCBoatPawn_OnNavigationUpdate) == 0x000020, "Wrong size on RCBoatPawn_OnNavigationUpdate");
static_assert(offsetof(RCBoatPawn_OnNavigationUpdate, head) == 0x000000, "Member 'RCBoatPawn_OnNavigationUpdate::head' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnNavigationUpdate, Velocity) == 0x00000C, "Member 'RCBoatPawn_OnNavigationUpdate::Velocity' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnNavigationUpdate, RotationDegrees) == 0x000018, "Member 'RCBoatPawn_OnNavigationUpdate::RotationDegrees' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnNavigationUpdate, DeltaTime) == 0x00001C, "Member 'RCBoatPawn_OnNavigationUpdate::DeltaTime' has a wrong offset!");

// Function RC.RCBoatPawn.OnReset
// 0x001C (0x001C - 0x0000)
struct RCBoatPawn_OnReset final
{
public:
	struct FVector                                head;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDegrees;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_OnReset) == 0x000004, "Wrong alignment on RCBoatPawn_OnReset");
static_assert(sizeof(RCBoatPawn_OnReset) == 0x00001C, "Wrong size on RCBoatPawn_OnReset");
static_assert(offsetof(RCBoatPawn_OnReset, head) == 0x000000, "Member 'RCBoatPawn_OnReset::head' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnReset, Velocity) == 0x00000C, "Member 'RCBoatPawn_OnReset::Velocity' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnReset, RotationDegrees) == 0x000018, "Member 'RCBoatPawn_OnReset::RotationDegrees' has a wrong offset!");

// Function RC.RCBoatPawn.OnThrottleDown
// 0x0024 (0x0024 - 0x0000)
struct RCBoatPawn_OnThrottleDown final
{
public:
	int32                                         step;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                head;                                              // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Forward;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_OnThrottleDown) == 0x000004, "Wrong alignment on RCBoatPawn_OnThrottleDown");
static_assert(sizeof(RCBoatPawn_OnThrottleDown) == 0x000024, "Wrong size on RCBoatPawn_OnThrottleDown");
static_assert(offsetof(RCBoatPawn_OnThrottleDown, step) == 0x000000, "Member 'RCBoatPawn_OnThrottleDown::step' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnThrottleDown, head) == 0x000004, "Member 'RCBoatPawn_OnThrottleDown::head' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnThrottleDown, Velocity) == 0x000010, "Member 'RCBoatPawn_OnThrottleDown::Velocity' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnThrottleDown, Forward) == 0x00001C, "Member 'RCBoatPawn_OnThrottleDown::Forward' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnThrottleDown, DeltaTime) == 0x000020, "Member 'RCBoatPawn_OnThrottleDown::DeltaTime' has a wrong offset!");

// Function RC.RCBoatPawn.OnThrottleUp
// 0x0024 (0x0024 - 0x0000)
struct RCBoatPawn_OnThrottleUp final
{
public:
	int32                                         step;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                head;                                              // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Forward;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_OnThrottleUp) == 0x000004, "Wrong alignment on RCBoatPawn_OnThrottleUp");
static_assert(sizeof(RCBoatPawn_OnThrottleUp) == 0x000024, "Wrong size on RCBoatPawn_OnThrottleUp");
static_assert(offsetof(RCBoatPawn_OnThrottleUp, step) == 0x000000, "Member 'RCBoatPawn_OnThrottleUp::step' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnThrottleUp, head) == 0x000004, "Member 'RCBoatPawn_OnThrottleUp::head' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnThrottleUp, Velocity) == 0x000010, "Member 'RCBoatPawn_OnThrottleUp::Velocity' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnThrottleUp, Forward) == 0x00001C, "Member 'RCBoatPawn_OnThrottleUp::Forward' has a wrong offset!");
static_assert(offsetof(RCBoatPawn_OnThrottleUp, DeltaTime) == 0x000020, "Member 'RCBoatPawn_OnThrottleUp::DeltaTime' has a wrong offset!");

// Function RC.RCBoatPawn.SetSteering
// 0x0001 (0x0001 - 0x0000)
struct RCBoatPawn_SetSteering final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBoatPawn_SetSteering) == 0x000001, "Wrong alignment on RCBoatPawn_SetSteering");
static_assert(sizeof(RCBoatPawn_SetSteering) == 0x000001, "Wrong size on RCBoatPawn_SetSteering");
static_assert(offsetof(RCBoatPawn_SetSteering, Enable) == 0x000000, "Member 'RCBoatPawn_SetSteering::Enable' has a wrong offset!");

// Function RC.RCRealLevelScriptActor.GetNextGameMode
// 0x0001 (0x0001 - 0x0000)
struct RCRealLevelScriptActor_GetNextGameMode final
{
public:
	ERCGameMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealLevelScriptActor_GetNextGameMode) == 0x000001, "Wrong alignment on RCRealLevelScriptActor_GetNextGameMode");
static_assert(sizeof(RCRealLevelScriptActor_GetNextGameMode) == 0x000001, "Wrong size on RCRealLevelScriptActor_GetNextGameMode");
static_assert(offsetof(RCRealLevelScriptActor_GetNextGameMode, ReturnValue) == 0x000000, "Member 'RCRealLevelScriptActor_GetNextGameMode::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.ChangeCheckPointScene
// 0x0002 (0x0002 - 0x0000)
struct RCNazoLevelScriptActor_ChangeCheckPointScene final
{
public:
	bool                                          bRecoverPlayerHP;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_ChangeCheckPointScene) == 0x000001, "Wrong alignment on RCNazoLevelScriptActor_ChangeCheckPointScene");
static_assert(sizeof(RCNazoLevelScriptActor_ChangeCheckPointScene) == 0x000002, "Wrong size on RCNazoLevelScriptActor_ChangeCheckPointScene");
static_assert(offsetof(RCNazoLevelScriptActor_ChangeCheckPointScene, bRecoverPlayerHP) == 0x000000, "Member 'RCNazoLevelScriptActor_ChangeCheckPointScene::bRecoverPlayerHP' has a wrong offset!");
static_assert(offsetof(RCNazoLevelScriptActor_ChangeCheckPointScene, ReturnValue) == 0x000001, "Member 'RCNazoLevelScriptActor_ChangeCheckPointScene::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.ChangeFirstScene
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActor_ChangeFirstScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_ChangeFirstScene) == 0x000001, "Wrong alignment on RCNazoLevelScriptActor_ChangeFirstScene");
static_assert(sizeof(RCNazoLevelScriptActor_ChangeFirstScene) == 0x000001, "Wrong size on RCNazoLevelScriptActor_ChangeFirstScene");
static_assert(offsetof(RCNazoLevelScriptActor_ChangeFirstScene, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActor_ChangeFirstScene::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.ChangeNextScene
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActor_ChangeNextScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_ChangeNextScene) == 0x000001, "Wrong alignment on RCNazoLevelScriptActor_ChangeNextScene");
static_assert(sizeof(RCNazoLevelScriptActor_ChangeNextScene) == 0x000001, "Wrong size on RCNazoLevelScriptActor_ChangeNextScene");
static_assert(offsetof(RCNazoLevelScriptActor_ChangeNextScene, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActor_ChangeNextScene::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.ChangeScene
// 0x000C (0x000C - 0x0000)
struct RCNazoLevelScriptActor_ChangeScene final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoLevelScriptActor_ChangeScene) == 0x000004, "Wrong alignment on RCNazoLevelScriptActor_ChangeScene");
static_assert(sizeof(RCNazoLevelScriptActor_ChangeScene) == 0x00000C, "Wrong size on RCNazoLevelScriptActor_ChangeScene");
static_assert(offsetof(RCNazoLevelScriptActor_ChangeScene, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActor_ChangeScene::SceneID' has a wrong offset!");
static_assert(offsetof(RCNazoLevelScriptActor_ChangeScene, ReturnValue) == 0x000008, "Member 'RCNazoLevelScriptActor_ChangeScene::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.ChangeTitle
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActor_ChangeTitle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_ChangeTitle) == 0x000001, "Wrong alignment on RCNazoLevelScriptActor_ChangeTitle");
static_assert(sizeof(RCNazoLevelScriptActor_ChangeTitle) == 0x000001, "Wrong size on RCNazoLevelScriptActor_ChangeTitle");
static_assert(offsetof(RCNazoLevelScriptActor_ChangeTitle, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActor_ChangeTitle::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.GetCurrentSceneID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActor_GetCurrentSceneID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_GetCurrentSceneID) == 0x000004, "Wrong alignment on RCNazoLevelScriptActor_GetCurrentSceneID");
static_assert(sizeof(RCNazoLevelScriptActor_GetCurrentSceneID) == 0x000008, "Wrong size on RCNazoLevelScriptActor_GetCurrentSceneID");
static_assert(offsetof(RCNazoLevelScriptActor_GetCurrentSceneID, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActor_GetCurrentSceneID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.GetCurrentSceneLevelScriptActor
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActor_GetCurrentSceneLevelScriptActor final
{
public:
	class ALevelScriptActor*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_GetCurrentSceneLevelScriptActor) == 0x000008, "Wrong alignment on RCNazoLevelScriptActor_GetCurrentSceneLevelScriptActor");
static_assert(sizeof(RCNazoLevelScriptActor_GetCurrentSceneLevelScriptActor) == 0x000008, "Wrong size on RCNazoLevelScriptActor_GetCurrentSceneLevelScriptActor");
static_assert(offsetof(RCNazoLevelScriptActor_GetCurrentSceneLevelScriptActor, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActor_GetCurrentSceneLevelScriptActor::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.GetNextSceneID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActor_GetNextSceneID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_GetNextSceneID) == 0x000004, "Wrong alignment on RCNazoLevelScriptActor_GetNextSceneID");
static_assert(sizeof(RCNazoLevelScriptActor_GetNextSceneID) == 0x000008, "Wrong size on RCNazoLevelScriptActor_GetNextSceneID");
static_assert(offsetof(RCNazoLevelScriptActor_GetNextSceneID, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActor_GetNextSceneID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.IsCurrentSceneReady
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActor_IsCurrentSceneReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_IsCurrentSceneReady) == 0x000001, "Wrong alignment on RCNazoLevelScriptActor_IsCurrentSceneReady");
static_assert(sizeof(RCNazoLevelScriptActor_IsCurrentSceneReady) == 0x000001, "Wrong size on RCNazoLevelScriptActor_IsCurrentSceneReady");
static_assert(offsetof(RCNazoLevelScriptActor_IsCurrentSceneReady, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActor_IsCurrentSceneReady::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.IsCurrentSceneVisibleCompleted
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActor_IsCurrentSceneVisibleCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_IsCurrentSceneVisibleCompleted) == 0x000001, "Wrong alignment on RCNazoLevelScriptActor_IsCurrentSceneVisibleCompleted");
static_assert(sizeof(RCNazoLevelScriptActor_IsCurrentSceneVisibleCompleted) == 0x000001, "Wrong size on RCNazoLevelScriptActor_IsCurrentSceneVisibleCompleted");
static_assert(offsetof(RCNazoLevelScriptActor_IsCurrentSceneVisibleCompleted, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActor_IsCurrentSceneVisibleCompleted::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActor_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_IsInitialized) == 0x000001, "Wrong alignment on RCNazoLevelScriptActor_IsInitialized");
static_assert(sizeof(RCNazoLevelScriptActor_IsInitialized) == 0x000001, "Wrong size on RCNazoLevelScriptActor_IsInitialized");
static_assert(offsetof(RCNazoLevelScriptActor_IsInitialized, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActor_IsInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.IsLoadSceneCompleted
// 0x000C (0x000C - 0x0000)
struct RCNazoLevelScriptActor_IsLoadSceneCompleted final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoLevelScriptActor_IsLoadSceneCompleted) == 0x000004, "Wrong alignment on RCNazoLevelScriptActor_IsLoadSceneCompleted");
static_assert(sizeof(RCNazoLevelScriptActor_IsLoadSceneCompleted) == 0x00000C, "Wrong size on RCNazoLevelScriptActor_IsLoadSceneCompleted");
static_assert(offsetof(RCNazoLevelScriptActor_IsLoadSceneCompleted, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActor_IsLoadSceneCompleted::SceneID' has a wrong offset!");
static_assert(offsetof(RCNazoLevelScriptActor_IsLoadSceneCompleted, ReturnValue) == 0x000008, "Member 'RCNazoLevelScriptActor_IsLoadSceneCompleted::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.IsReleaseSceneCompleted
// 0x000C (0x000C - 0x0000)
struct RCNazoLevelScriptActor_IsReleaseSceneCompleted final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoLevelScriptActor_IsReleaseSceneCompleted) == 0x000004, "Wrong alignment on RCNazoLevelScriptActor_IsReleaseSceneCompleted");
static_assert(sizeof(RCNazoLevelScriptActor_IsReleaseSceneCompleted) == 0x00000C, "Wrong size on RCNazoLevelScriptActor_IsReleaseSceneCompleted");
static_assert(offsetof(RCNazoLevelScriptActor_IsReleaseSceneCompleted, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActor_IsReleaseSceneCompleted::SceneID' has a wrong offset!");
static_assert(offsetof(RCNazoLevelScriptActor_IsReleaseSceneCompleted, ReturnValue) == 0x000008, "Member 'RCNazoLevelScriptActor_IsReleaseSceneCompleted::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.IsSceneInvisible
// 0x000C (0x000C - 0x0000)
struct RCNazoLevelScriptActor_IsSceneInvisible final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoLevelScriptActor_IsSceneInvisible) == 0x000004, "Wrong alignment on RCNazoLevelScriptActor_IsSceneInvisible");
static_assert(sizeof(RCNazoLevelScriptActor_IsSceneInvisible) == 0x00000C, "Wrong size on RCNazoLevelScriptActor_IsSceneInvisible");
static_assert(offsetof(RCNazoLevelScriptActor_IsSceneInvisible, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActor_IsSceneInvisible::SceneID' has a wrong offset!");
static_assert(offsetof(RCNazoLevelScriptActor_IsSceneInvisible, ReturnValue) == 0x000008, "Member 'RCNazoLevelScriptActor_IsSceneInvisible::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.LoadScene
// 0x000C (0x000C - 0x0000)
struct RCNazoLevelScriptActor_LoadScene final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoLevelScriptActor_LoadScene) == 0x000004, "Wrong alignment on RCNazoLevelScriptActor_LoadScene");
static_assert(sizeof(RCNazoLevelScriptActor_LoadScene) == 0x00000C, "Wrong size on RCNazoLevelScriptActor_LoadScene");
static_assert(offsetof(RCNazoLevelScriptActor_LoadScene, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActor_LoadScene::SceneID' has a wrong offset!");
static_assert(offsetof(RCNazoLevelScriptActor_LoadScene, ReturnValue) == 0x000008, "Member 'RCNazoLevelScriptActor_LoadScene::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.ReleaseScene
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActor_ReleaseScene final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_ReleaseScene) == 0x000004, "Wrong alignment on RCNazoLevelScriptActor_ReleaseScene");
static_assert(sizeof(RCNazoLevelScriptActor_ReleaseScene) == 0x000008, "Wrong size on RCNazoLevelScriptActor_ReleaseScene");
static_assert(offsetof(RCNazoLevelScriptActor_ReleaseScene, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActor_ReleaseScene::SceneID' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.SetCurrentSceneLevelScriptActor
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActor_SetCurrentSceneLevelScriptActor final
{
public:
	class ALevelScriptActor*                      LevelScriptActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_SetCurrentSceneLevelScriptActor) == 0x000008, "Wrong alignment on RCNazoLevelScriptActor_SetCurrentSceneLevelScriptActor");
static_assert(sizeof(RCNazoLevelScriptActor_SetCurrentSceneLevelScriptActor) == 0x000008, "Wrong size on RCNazoLevelScriptActor_SetCurrentSceneLevelScriptActor");
static_assert(offsetof(RCNazoLevelScriptActor_SetCurrentSceneLevelScriptActor, LevelScriptActor) == 0x000000, "Member 'RCNazoLevelScriptActor_SetCurrentSceneLevelScriptActor::LevelScriptActor' has a wrong offset!");

// Function RC.RCNazoLevelScriptActor.StartScene
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActor_StartScene final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActor_StartScene) == 0x000004, "Wrong alignment on RCNazoLevelScriptActor_StartScene");
static_assert(sizeof(RCNazoLevelScriptActor_StartScene) == 0x000008, "Wrong size on RCNazoLevelScriptActor_StartScene");
static_assert(offsetof(RCNazoLevelScriptActor_StartScene, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActor_StartScene::SceneID' has a wrong offset!");

// Function RC.RCTitleChapterSelect.CancelWrap
// 0x0001 (0x0001 - 0x0000)
struct RCTitleChapterSelect_CancelWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleChapterSelect_CancelWrap) == 0x000001, "Wrong alignment on RCTitleChapterSelect_CancelWrap");
static_assert(sizeof(RCTitleChapterSelect_CancelWrap) == 0x000001, "Wrong size on RCTitleChapterSelect_CancelWrap");
static_assert(offsetof(RCTitleChapterSelect_CancelWrap, InKeyType) == 0x000000, "Member 'RCTitleChapterSelect_CancelWrap::InKeyType' has a wrong offset!");

// Function RC.RCTitleChapterSelect.DecideWrap
// 0x0001 (0x0001 - 0x0000)
struct RCTitleChapterSelect_DecideWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleChapterSelect_DecideWrap) == 0x000001, "Wrong alignment on RCTitleChapterSelect_DecideWrap");
static_assert(sizeof(RCTitleChapterSelect_DecideWrap) == 0x000001, "Wrong size on RCTitleChapterSelect_DecideWrap");
static_assert(offsetof(RCTitleChapterSelect_DecideWrap, InKeyType) == 0x000000, "Member 'RCTitleChapterSelect_DecideWrap::InKeyType' has a wrong offset!");

// Function RC.RCBombReleaseGame.SetMistakeVisible
// 0x0001 (0x0001 - 0x0000)
struct RCBombReleaseGame_SetMistakeVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBombReleaseGame_SetMistakeVisible) == 0x000001, "Wrong alignment on RCBombReleaseGame_SetMistakeVisible");
static_assert(sizeof(RCBombReleaseGame_SetMistakeVisible) == 0x000001, "Wrong size on RCBombReleaseGame_SetMistakeVisible");
static_assert(offsetof(RCBombReleaseGame_SetMistakeVisible, IsVisible_0) == 0x000000, "Member 'RCBombReleaseGame_SetMistakeVisible::IsVisible_0' has a wrong offset!");

// Function RC.RCBombReleaseGame.SetSuccessVisible
// 0x0001 (0x0001 - 0x0000)
struct RCBombReleaseGame_SetSuccessVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBombReleaseGame_SetSuccessVisible) == 0x000001, "Wrong alignment on RCBombReleaseGame_SetSuccessVisible");
static_assert(sizeof(RCBombReleaseGame_SetSuccessVisible) == 0x000001, "Wrong size on RCBombReleaseGame_SetSuccessVisible");
static_assert(offsetof(RCBombReleaseGame_SetSuccessVisible, IsVisible_0) == 0x000000, "Member 'RCBombReleaseGame_SetSuccessVisible::IsVisible_0' has a wrong offset!");

// Function RC.RCEventTriggerBFL.GetEventTrigger
// 0x0010 (0x0010 - 0x0000)
struct RCEventTriggerBFL_GetEventTrigger final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCEventTrigger*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTriggerBFL_GetEventTrigger) == 0x000008, "Wrong alignment on RCEventTriggerBFL_GetEventTrigger");
static_assert(sizeof(RCEventTriggerBFL_GetEventTrigger) == 0x000010, "Wrong size on RCEventTriggerBFL_GetEventTrigger");
static_assert(offsetof(RCEventTriggerBFL_GetEventTrigger, InName) == 0x000000, "Member 'RCEventTriggerBFL_GetEventTrigger::InName' has a wrong offset!");
static_assert(offsetof(RCEventTriggerBFL_GetEventTrigger, ReturnValue) == 0x000008, "Member 'RCEventTriggerBFL_GetEventTrigger::ReturnValue' has a wrong offset!");

// Function RC.RCEventTriggerBFL.IsCollisionEnable
// 0x000C (0x000C - 0x0000)
struct RCEventTriggerBFL_IsCollisionEnable final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEventTriggerBFL_IsCollisionEnable) == 0x000004, "Wrong alignment on RCEventTriggerBFL_IsCollisionEnable");
static_assert(sizeof(RCEventTriggerBFL_IsCollisionEnable) == 0x00000C, "Wrong size on RCEventTriggerBFL_IsCollisionEnable");
static_assert(offsetof(RCEventTriggerBFL_IsCollisionEnable, InName) == 0x000000, "Member 'RCEventTriggerBFL_IsCollisionEnable::InName' has a wrong offset!");
static_assert(offsetof(RCEventTriggerBFL_IsCollisionEnable, ReturnValue) == 0x000008, "Member 'RCEventTriggerBFL_IsCollisionEnable::ReturnValue' has a wrong offset!");

// Function RC.RCEventTriggerBFL.SetCollisionEnable
// 0x000C (0x000C - 0x0000)
struct RCEventTriggerBFL_SetCollisionEnable final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEventTriggerBFL_SetCollisionEnable) == 0x000004, "Wrong alignment on RCEventTriggerBFL_SetCollisionEnable");
static_assert(sizeof(RCEventTriggerBFL_SetCollisionEnable) == 0x00000C, "Wrong size on RCEventTriggerBFL_SetCollisionEnable");
static_assert(offsetof(RCEventTriggerBFL_SetCollisionEnable, InName) == 0x000000, "Member 'RCEventTriggerBFL_SetCollisionEnable::InName' has a wrong offset!");
static_assert(offsetof(RCEventTriggerBFL_SetCollisionEnable, bInEnable) == 0x000008, "Member 'RCEventTriggerBFL_SetCollisionEnable::bInEnable' has a wrong offset!");

// Function RC.RCTopMenu.CloseMenuWrap
// 0x0001 (0x0001 - 0x0000)
struct RCTopMenu_CloseMenuWrap final
{
public:
	ERCInputKeyType                               InKeyTyoe;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTopMenu_CloseMenuWrap) == 0x000001, "Wrong alignment on RCTopMenu_CloseMenuWrap");
static_assert(sizeof(RCTopMenu_CloseMenuWrap) == 0x000001, "Wrong size on RCTopMenu_CloseMenuWrap");
static_assert(offsetof(RCTopMenu_CloseMenuWrap, InKeyTyoe) == 0x000000, "Member 'RCTopMenu_CloseMenuWrap::InKeyTyoe' has a wrong offset!");

// Function RC.RCTopMenu.CloseWorldMapWrap
// 0x0001 (0x0001 - 0x0000)
struct RCTopMenu_CloseWorldMapWrap final
{
public:
	ERCInputKeyType                               InKeyTyoe;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTopMenu_CloseWorldMapWrap) == 0x000001, "Wrong alignment on RCTopMenu_CloseWorldMapWrap");
static_assert(sizeof(RCTopMenu_CloseWorldMapWrap) == 0x000001, "Wrong size on RCTopMenu_CloseWorldMapWrap");
static_assert(offsetof(RCTopMenu_CloseWorldMapWrap, InKeyTyoe) == 0x000000, "Member 'RCTopMenu_CloseWorldMapWrap::InKeyTyoe' has a wrong offset!");

// Function RC.RCTopMenu.Open
// 0x0002 (0x0002 - 0x0000)
struct RCTopMenu_Open final
{
public:
	ERCGameMenuDirectAccessType                   bInAccessType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsAreaMenuCancel;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTopMenu_Open) == 0x000001, "Wrong alignment on RCTopMenu_Open");
static_assert(sizeof(RCTopMenu_Open) == 0x000002, "Wrong size on RCTopMenu_Open");
static_assert(offsetof(RCTopMenu_Open, bInAccessType) == 0x000000, "Member 'RCTopMenu_Open::bInAccessType' has a wrong offset!");
static_assert(offsetof(RCTopMenu_Open, bInIsAreaMenuCancel) == 0x000001, "Member 'RCTopMenu_Open::bInIsAreaMenuCancel' has a wrong offset!");

// Function RC.RCTopMenu.OpenContentWrap
// 0x0001 (0x0001 - 0x0000)
struct RCTopMenu_OpenContentWrap final
{
public:
	ERCInputKeyType                               InKeyTyoe;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTopMenu_OpenContentWrap) == 0x000001, "Wrong alignment on RCTopMenu_OpenContentWrap");
static_assert(sizeof(RCTopMenu_OpenContentWrap) == 0x000001, "Wrong size on RCTopMenu_OpenContentWrap");
static_assert(offsetof(RCTopMenu_OpenContentWrap, InKeyTyoe) == 0x000000, "Member 'RCTopMenu_OpenContentWrap::InKeyTyoe' has a wrong offset!");

// Function RC.RCTopMenu.OpenKagiSelect
// 0x0018 (0x0018 - 0x0000)
struct RCTopMenu_OpenKagiSelect final
{
public:
	TArray<class FName>                           InKaiKagiIDArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInNotPause;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCTopMenu_OpenKagiSelect) == 0x000008, "Wrong alignment on RCTopMenu_OpenKagiSelect");
static_assert(sizeof(RCTopMenu_OpenKagiSelect) == 0x000018, "Wrong size on RCTopMenu_OpenKagiSelect");
static_assert(offsetof(RCTopMenu_OpenKagiSelect, InKaiKagiIDArray) == 0x000000, "Member 'RCTopMenu_OpenKagiSelect::InKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCTopMenu_OpenKagiSelect, bInNotPause) == 0x000010, "Member 'RCTopMenu_OpenKagiSelect::bInNotPause' has a wrong offset!");

// Function RC.RCBombReleaseMistake.IsFinishedAnimation
// 0x0001 (0x0001 - 0x0000)
struct RCBombReleaseMistake_IsFinishedAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBombReleaseMistake_IsFinishedAnimation) == 0x000001, "Wrong alignment on RCBombReleaseMistake_IsFinishedAnimation");
static_assert(sizeof(RCBombReleaseMistake_IsFinishedAnimation) == 0x000001, "Wrong size on RCBombReleaseMistake_IsFinishedAnimation");
static_assert(offsetof(RCBombReleaseMistake_IsFinishedAnimation, ReturnValue) == 0x000000, "Member 'RCBombReleaseMistake_IsFinishedAnimation::ReturnValue' has a wrong offset!");

// Function RC.RCFixedCameraActor.AtouchRain
// 0x000C (0x000C - 0x0000)
struct RCFixedCameraActor_AtouchRain final
{
public:
	float                                         lenght;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Zfollow;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetZ;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCFixedCameraActor_AtouchRain) == 0x000004, "Wrong alignment on RCFixedCameraActor_AtouchRain");
static_assert(sizeof(RCFixedCameraActor_AtouchRain) == 0x00000C, "Wrong size on RCFixedCameraActor_AtouchRain");
static_assert(offsetof(RCFixedCameraActor_AtouchRain, lenght) == 0x000000, "Member 'RCFixedCameraActor_AtouchRain::lenght' has a wrong offset!");
static_assert(offsetof(RCFixedCameraActor_AtouchRain, Zfollow) == 0x000004, "Member 'RCFixedCameraActor_AtouchRain::Zfollow' has a wrong offset!");
static_assert(offsetof(RCFixedCameraActor_AtouchRain, OffsetZ) == 0x000008, "Member 'RCFixedCameraActor_AtouchRain::OffsetZ' has a wrong offset!");

// Function RC.RCBombReleaseSuccess.IsFinishedAnimation
// 0x0001 (0x0001 - 0x0000)
struct RCBombReleaseSuccess_IsFinishedAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBombReleaseSuccess_IsFinishedAnimation) == 0x000001, "Wrong alignment on RCBombReleaseSuccess_IsFinishedAnimation");
static_assert(sizeof(RCBombReleaseSuccess_IsFinishedAnimation) == 0x000001, "Wrong size on RCBombReleaseSuccess_IsFinishedAnimation");
static_assert(offsetof(RCBombReleaseSuccess_IsFinishedAnimation, ReturnValue) == 0x000000, "Member 'RCBombReleaseSuccess_IsFinishedAnimation::ReturnValue' has a wrong offset!");

// Function RC.RCKusariBlueprintFunctionLibrary.CorrectChain
// 0x0010 (0x0010 - 0x0000)
struct RCKusariBlueprintFunctionLibrary_CorrectChain final
{
public:
	class UNiagaraComponent*                      NiagaraTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCKusariBlueprintFunctionLibrary_CorrectChain) == 0x000008, "Wrong alignment on RCKusariBlueprintFunctionLibrary_CorrectChain");
static_assert(sizeof(RCKusariBlueprintFunctionLibrary_CorrectChain) == 0x000010, "Wrong size on RCKusariBlueprintFunctionLibrary_CorrectChain");
static_assert(offsetof(RCKusariBlueprintFunctionLibrary_CorrectChain, NiagaraTemplate) == 0x000000, "Member 'RCKusariBlueprintFunctionLibrary_CorrectChain::NiagaraTemplate' has a wrong offset!");
static_assert(offsetof(RCKusariBlueprintFunctionLibrary_CorrectChain, ReturnValue) == 0x000008, "Member 'RCKusariBlueprintFunctionLibrary_CorrectChain::ReturnValue' has a wrong offset!");

// Function RC.RCKusariBlueprintFunctionLibrary.CorrectChainAuto
// 0x0002 (0x0002 - 0x0000)
struct RCKusariBlueprintFunctionLibrary_CorrectChainAuto final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCKusariBlueprintFunctionLibrary_CorrectChainAuto) == 0x000001, "Wrong alignment on RCKusariBlueprintFunctionLibrary_CorrectChainAuto");
static_assert(sizeof(RCKusariBlueprintFunctionLibrary_CorrectChainAuto) == 0x000002, "Wrong size on RCKusariBlueprintFunctionLibrary_CorrectChainAuto");
static_assert(offsetof(RCKusariBlueprintFunctionLibrary_CorrectChainAuto, On) == 0x000000, "Member 'RCKusariBlueprintFunctionLibrary_CorrectChainAuto::On' has a wrong offset!");
static_assert(offsetof(RCKusariBlueprintFunctionLibrary_CorrectChainAuto, ReturnValue) == 0x000001, "Member 'RCKusariBlueprintFunctionLibrary_CorrectChainAuto::ReturnValue' has a wrong offset!");

// Function RC.RCKusariBlueprintFunctionLibrary.SetChainParam
// 0x0014 (0x0014 - 0x0000)
struct RCKusariBlueprintFunctionLibrary_SetChainParam final
{
public:
	struct FVector                                Gravity;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Drag;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCKusariBlueprintFunctionLibrary_SetChainParam) == 0x000004, "Wrong alignment on RCKusariBlueprintFunctionLibrary_SetChainParam");
static_assert(sizeof(RCKusariBlueprintFunctionLibrary_SetChainParam) == 0x000014, "Wrong size on RCKusariBlueprintFunctionLibrary_SetChainParam");
static_assert(offsetof(RCKusariBlueprintFunctionLibrary_SetChainParam, Gravity) == 0x000000, "Member 'RCKusariBlueprintFunctionLibrary_SetChainParam::Gravity' has a wrong offset!");
static_assert(offsetof(RCKusariBlueprintFunctionLibrary_SetChainParam, Drag) == 0x00000C, "Member 'RCKusariBlueprintFunctionLibrary_SetChainParam::Drag' has a wrong offset!");
static_assert(offsetof(RCKusariBlueprintFunctionLibrary_SetChainParam, ReturnValue) == 0x000010, "Member 'RCKusariBlueprintFunctionLibrary_SetChainParam::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.GetDetectiveUIPath
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_GetDetectiveUIPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_GetDetectiveUIPath) == 0x000008, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_GetDetectiveUIPath");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_GetDetectiveUIPath) == 0x000010, "Wrong size on RCNzUiFinaleHeadingTextWidget_GetDetectiveUIPath");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_GetDetectiveUIPath, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_GetDetectiveUIPath::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.GetHeadingText
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_GetHeadingText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_GetHeadingText) == 0x000008, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_GetHeadingText");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_GetHeadingText) == 0x000010, "Wrong size on RCNzUiFinaleHeadingTextWidget_GetHeadingText");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_GetHeadingText, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_GetHeadingText::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.GetIndexText
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_GetIndexText final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_GetIndexText) == 0x000004, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_GetIndexText");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_GetIndexText) == 0x000004, "Wrong size on RCNzUiFinaleHeadingTextWidget_GetIndexText");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_GetIndexText, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_GetIndexText::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.GetSectionID
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_GetSectionID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_GetSectionID) == 0x000004, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_GetSectionID");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_GetSectionID) == 0x000008, "Wrong size on RCNzUiFinaleHeadingTextWidget_GetSectionID");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_GetSectionID, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_GetSectionID::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.GetSectionIdx
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_GetSectionIdx final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_GetSectionIdx) == 0x000004, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_GetSectionIdx");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_GetSectionIdx) == 0x000004, "Wrong size on RCNzUiFinaleHeadingTextWidget_GetSectionIdx");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_GetSectionIdx, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_GetSectionIdx::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.GetSectionTextID
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_GetSectionTextID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_GetSectionTextID) == 0x000004, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_GetSectionTextID");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_GetSectionTextID) == 0x000008, "Wrong size on RCNzUiFinaleHeadingTextWidget_GetSectionTextID");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_GetSectionTextID, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_GetSectionTextID::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.InitializeHeadingTextWidget
// 0x0030 (0x0030 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget final
{
public:
	class FName                                   SectionID_0;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID_0;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCNzFinaleManagerBase*                 FinaleManager_0;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         idx;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 uiPath;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget) == 0x000008, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget) == 0x000030, "Wrong size on RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget, SectionID_0) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget::SectionID_0' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget, TextID_0) == 0x000008, "Member 'RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget::TextID_0' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget, FinaleManager_0) == 0x000010, "Member 'RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget::FinaleManager_0' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget, idx) == 0x000018, "Member 'RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget::idx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget, uiPath) == 0x000020, "Member 'RCNzUiFinaleHeadingTextWidget_InitializeHeadingTextWidget::uiPath' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.UpdateDebugDrawLine
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_UpdateDebugDrawLine final
{
public:
	TArray<struct FVector2D>                      Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_UpdateDebugDrawLine) == 0x000008, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_UpdateDebugDrawLine");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_UpdateDebugDrawLine) == 0x000010, "Wrong size on RCNzUiFinaleHeadingTextWidget_UpdateDebugDrawLine");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_UpdateDebugDrawLine, Points) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_UpdateDebugDrawLine::Points' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.UpdateDetectiveRestStatus
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_UpdateDetectiveRestStatus final
{
public:
	TArray<bool>                                  statusList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_UpdateDetectiveRestStatus) == 0x000008, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_UpdateDetectiveRestStatus");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_UpdateDetectiveRestStatus) == 0x000010, "Wrong size on RCNzUiFinaleHeadingTextWidget_UpdateDetectiveRestStatus");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_UpdateDetectiveRestStatus, statusList) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_UpdateDetectiveRestStatus::statusList' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.UpdateHeadingText
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_UpdateHeadingText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_UpdateHeadingText) == 0x000008, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_UpdateHeadingText");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_UpdateHeadingText) == 0x000010, "Wrong size on RCNzUiFinaleHeadingTextWidget_UpdateHeadingText");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_UpdateHeadingText, Text) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_UpdateHeadingText::Text' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.UpdateIndexTex
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_UpdateIndexTex final
{
public:
	const class UTexture2D*                       tex;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_UpdateIndexTex) == 0x000008, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_UpdateIndexTex");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_UpdateIndexTex) == 0x000008, "Wrong size on RCNzUiFinaleHeadingTextWidget_UpdateIndexTex");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_UpdateIndexTex, tex) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_UpdateIndexTex::tex' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.UpdateIndexText
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_UpdateIndexText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_UpdateIndexText) == 0x000008, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_UpdateIndexText");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_UpdateIndexText) == 0x000010, "Wrong size on RCNzUiFinaleHeadingTextWidget_UpdateIndexText");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_UpdateIndexText, Text) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_UpdateIndexText::Text' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.UpdatePieceState
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_UpdatePieceState final
{
public:
	TArray<bool>                                  isStateList;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_UpdatePieceState) == 0x000008, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_UpdatePieceState");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_UpdatePieceState) == 0x000010, "Wrong size on RCNzUiFinaleHeadingTextWidget_UpdatePieceState");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_UpdatePieceState, isStateList) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_UpdatePieceState::isStateList' has a wrong offset!");

// Function RC.RCNzUiFinaleHeadingTextWidget.UpdateSelectStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleHeadingTextWidget_UpdateSelectStatus final
{
public:
	bool                                          IsSelect;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleHeadingTextWidget_UpdateSelectStatus) == 0x000001, "Wrong alignment on RCNzUiFinaleHeadingTextWidget_UpdateSelectStatus");
static_assert(sizeof(RCNzUiFinaleHeadingTextWidget_UpdateSelectStatus) == 0x000001, "Wrong size on RCNzUiFinaleHeadingTextWidget_UpdateSelectStatus");
static_assert(offsetof(RCNzUiFinaleHeadingTextWidget_UpdateSelectStatus, IsSelect) == 0x000000, "Member 'RCNzUiFinaleHeadingTextWidget_UpdateSelectStatus::IsSelect' has a wrong offset!");

// Function RC.RCBombReleaseWidget.GameOver
// 0x0004 (0x0004 - 0x0000)
struct RCBombReleaseWidget_GameOver final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBombReleaseWidget_GameOver) == 0x000004, "Wrong alignment on RCBombReleaseWidget_GameOver");
static_assert(sizeof(RCBombReleaseWidget_GameOver) == 0x000004, "Wrong size on RCBombReleaseWidget_GameOver");
static_assert(offsetof(RCBombReleaseWidget_GameOver, DeltaTime) == 0x000000, "Member 'RCBombReleaseWidget_GameOver::DeltaTime' has a wrong offset!");

// Function RC.RCBombReleaseWidget.PlayScene
// 0x0004 (0x0004 - 0x0000)
struct RCBombReleaseWidget_PlayScene final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBombReleaseWidget_PlayScene) == 0x000004, "Wrong alignment on RCBombReleaseWidget_PlayScene");
static_assert(sizeof(RCBombReleaseWidget_PlayScene) == 0x000004, "Wrong size on RCBombReleaseWidget_PlayScene");
static_assert(offsetof(RCBombReleaseWidget_PlayScene, DeltaTime) == 0x000000, "Member 'RCBombReleaseWidget_PlayScene::DeltaTime' has a wrong offset!");

// Function RC.RCBombReleaseWidget.Success
// 0x0004 (0x0004 - 0x0000)
struct RCBombReleaseWidget_Success final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCBombReleaseWidget_Success) == 0x000004, "Wrong alignment on RCBombReleaseWidget_Success");
static_assert(sizeof(RCBombReleaseWidget_Success) == 0x000004, "Wrong size on RCBombReleaseWidget_Success");
static_assert(offsetof(RCBombReleaseWidget_Success, DeltaTime) == 0x000000, "Member 'RCBombReleaseWidget_Success::DeltaTime' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.CheckAcvivationCamera
// 0x000C (0x000C - 0x0000)
struct RCCameraBlueprintFunctionLibrary_CheckAcvivationCamera final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_CheckAcvivationCamera) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_CheckAcvivationCamera");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_CheckAcvivationCamera) == 0x00000C, "Wrong size on RCCameraBlueprintFunctionLibrary_CheckAcvivationCamera");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_CheckAcvivationCamera, Tag) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_CheckAcvivationCamera::Tag' has a wrong offset!");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_CheckAcvivationCamera, ReturnValue) == 0x000008, "Member 'RCCameraBlueprintFunctionLibrary_CheckAcvivationCamera::ReturnValue' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.GetCameraAngle
// 0x0004 (0x0004 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_GetCameraAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_GetCameraAngle) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_GetCameraAngle");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_GetCameraAngle) == 0x000004, "Wrong size on RCCameraBlueprintFunctionLibrary_GetCameraAngle");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_GetCameraAngle, ReturnValue) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_GetCameraAngle::ReturnValue' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.GetCameraVAngle
// 0x0004 (0x0004 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_GetCameraVAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_GetCameraVAngle) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_GetCameraVAngle");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_GetCameraVAngle) == 0x000004, "Wrong size on RCCameraBlueprintFunctionLibrary_GetCameraVAngle");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_GetCameraVAngle, ReturnValue) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_GetCameraVAngle::ReturnValue' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.GetCurrentCamera
// 0x0008 (0x0008 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_GetCurrentCamera final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_GetCurrentCamera) == 0x000008, "Wrong alignment on RCCameraBlueprintFunctionLibrary_GetCurrentCamera");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_GetCurrentCamera) == 0x000008, "Wrong size on RCCameraBlueprintFunctionLibrary_GetCurrentCamera");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_GetCurrentCamera, ReturnValue) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_GetCurrentCamera::ReturnValue' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.GetCurrentCameraTag
// 0x0008 (0x0008 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_GetCurrentCameraTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_GetCurrentCameraTag) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_GetCurrentCameraTag");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_GetCurrentCameraTag) == 0x000008, "Wrong size on RCCameraBlueprintFunctionLibrary_GetCurrentCameraTag");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_GetCurrentCameraTag, ReturnValue) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_GetCurrentCameraTag::ReturnValue' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.IsLoadingCamra
// 0x0001 (0x0001 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_IsLoadingCamra final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_IsLoadingCamra) == 0x000001, "Wrong alignment on RCCameraBlueprintFunctionLibrary_IsLoadingCamra");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_IsLoadingCamra) == 0x000001, "Wrong size on RCCameraBlueprintFunctionLibrary_IsLoadingCamra");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_IsLoadingCamra, ReturnValue) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_IsLoadingCamra::ReturnValue' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.ReActivationCamera
// 0x0001 (0x0001 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_ReActivationCamera final
{
public:
	bool                                          Blend;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_ReActivationCamera) == 0x000001, "Wrong alignment on RCCameraBlueprintFunctionLibrary_ReActivationCamera");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_ReActivationCamera) == 0x000001, "Wrong size on RCCameraBlueprintFunctionLibrary_ReActivationCamera");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_ReActivationCamera, Blend) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_ReActivationCamera::Blend' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.ResetActivationCamera
// 0x0008 (0x0008 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_ResetActivationCamera final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_ResetActivationCamera) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_ResetActivationCamera");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_ResetActivationCamera) == 0x000008, "Wrong size on RCCameraBlueprintFunctionLibrary_ResetActivationCamera");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_ResetActivationCamera, Tag) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_ResetActivationCamera::Tag' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.SetActivationCamera
// 0x0010 (0x0010 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_SetActivationCamera final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Blend;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_SetActivationCamera) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_SetActivationCamera");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_SetActivationCamera) == 0x000010, "Wrong size on RCCameraBlueprintFunctionLibrary_SetActivationCamera");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetActivationCamera, Tag) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_SetActivationCamera::Tag' has a wrong offset!");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetActivationCamera, Blend) == 0x000008, "Member 'RCCameraBlueprintFunctionLibrary_SetActivationCamera::Blend' has a wrong offset!");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetActivationCamera, Time) == 0x00000C, "Member 'RCCameraBlueprintFunctionLibrary_SetActivationCamera::Time' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.SetActivationCameraWithBlendParam
// 0x0018 (0x0018 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_SetActivationCameraWithBlendParam final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            Param;                                             // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_SetActivationCameraWithBlendParam) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_SetActivationCameraWithBlendParam");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_SetActivationCameraWithBlendParam) == 0x000018, "Wrong size on RCCameraBlueprintFunctionLibrary_SetActivationCameraWithBlendParam");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetActivationCameraWithBlendParam, Tag) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_SetActivationCameraWithBlendParam::Tag' has a wrong offset!");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetActivationCameraWithBlendParam, Param) == 0x000008, "Member 'RCCameraBlueprintFunctionLibrary_SetActivationCameraWithBlendParam::Param' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.SetCameraAnglePlayerBack
// 0x0004 (0x0004 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_SetCameraAnglePlayerBack final
{
public:
	float                                         va;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_SetCameraAnglePlayerBack) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_SetCameraAnglePlayerBack");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_SetCameraAnglePlayerBack) == 0x000004, "Wrong size on RCCameraBlueprintFunctionLibrary_SetCameraAnglePlayerBack");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetCameraAnglePlayerBack, va) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_SetCameraAnglePlayerBack::va' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.SetFakeLocation
// 0x000C (0x000C - 0x0000)
struct RCCameraBlueprintFunctionLibrary_SetFakeLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_SetFakeLocation) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_SetFakeLocation");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_SetFakeLocation) == 0x00000C, "Wrong size on RCCameraBlueprintFunctionLibrary_SetFakeLocation");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetFakeLocation, Location) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_SetFakeLocation::Location' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.SetFoceCameraAngle
// 0x0008 (0x0008 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_SetFoceCameraAngle final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         va;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_SetFoceCameraAngle) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_SetFoceCameraAngle");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_SetFoceCameraAngle) == 0x000008, "Wrong size on RCCameraBlueprintFunctionLibrary_SetFoceCameraAngle");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetFoceCameraAngle, A) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_SetFoceCameraAngle::A' has a wrong offset!");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetFoceCameraAngle, va) == 0x000004, "Member 'RCCameraBlueprintFunctionLibrary_SetFoceCameraAngle::va' has a wrong offset!");

// Function RC.RCCameraBlueprintFunctionLibrary.SetPlayerCamera
// 0x0008 (0x0008 - 0x0000)
struct RCCameraBlueprintFunctionLibrary_SetPlayerCamera final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCameraBlueprintFunctionLibrary_SetPlayerCamera) == 0x000004, "Wrong alignment on RCCameraBlueprintFunctionLibrary_SetPlayerCamera");
static_assert(sizeof(RCCameraBlueprintFunctionLibrary_SetPlayerCamera) == 0x000008, "Wrong size on RCCameraBlueprintFunctionLibrary_SetPlayerCamera");
static_assert(offsetof(RCCameraBlueprintFunctionLibrary_SetPlayerCamera, Tag) == 0x000000, "Member 'RCCameraBlueprintFunctionLibrary_SetPlayerCamera::Tag' has a wrong offset!");

// Function RC.RCGetFrameBufferActor.SetMaterialInstanceDynamic
// 0x0008 (0x0008 - 0x0000)
struct RCGetFrameBufferActor_SetMaterialInstanceDynamic final
{
public:
	class UMaterialInstanceDynamic*               MI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGetFrameBufferActor_SetMaterialInstanceDynamic) == 0x000008, "Wrong alignment on RCGetFrameBufferActor_SetMaterialInstanceDynamic");
static_assert(sizeof(RCGetFrameBufferActor_SetMaterialInstanceDynamic) == 0x000008, "Wrong size on RCGetFrameBufferActor_SetMaterialInstanceDynamic");
static_assert(offsetof(RCGetFrameBufferActor_SetMaterialInstanceDynamic, MI) == 0x000000, "Member 'RCGetFrameBufferActor_SetMaterialInstanceDynamic::MI' has a wrong offset!");

// Function RC.RCGetFrameBufferActor.SetOnlyColor
// 0x0004 (0x0004 - 0x0000)
struct RCGetFrameBufferActor_SetOnlyColor final
{
public:
	struct FColor                                 col;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGetFrameBufferActor_SetOnlyColor) == 0x000004, "Wrong alignment on RCGetFrameBufferActor_SetOnlyColor");
static_assert(sizeof(RCGetFrameBufferActor_SetOnlyColor) == 0x000004, "Wrong size on RCGetFrameBufferActor_SetOnlyColor");
static_assert(offsetof(RCGetFrameBufferActor_SetOnlyColor, col) == 0x000000, "Member 'RCGetFrameBufferActor_SetOnlyColor::col' has a wrong offset!");

// Function RC.RCGetFrameBufferActor.SetTriming
// 0x0018 (0x0018 - 0x0000)
struct RCGetFrameBufferActor_SetTriming final
{
public:
	struct FVector                                Min;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Max;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGetFrameBufferActor_SetTriming) == 0x000004, "Wrong alignment on RCGetFrameBufferActor_SetTriming");
static_assert(sizeof(RCGetFrameBufferActor_SetTriming) == 0x000018, "Wrong size on RCGetFrameBufferActor_SetTriming");
static_assert(offsetof(RCGetFrameBufferActor_SetTriming, Min) == 0x000000, "Member 'RCGetFrameBufferActor_SetTriming::Min' has a wrong offset!");
static_assert(offsetof(RCGetFrameBufferActor_SetTriming, Max) == 0x00000C, "Member 'RCGetFrameBufferActor_SetTriming::Max' has a wrong offset!");

// Function RC.RCGetFrameBufferActor.StartFrameGrab
// 0x0001 (0x0001 - 0x0000)
struct RCGetFrameBufferActor_StartFrameGrab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGetFrameBufferActor_StartFrameGrab) == 0x000001, "Wrong alignment on RCGetFrameBufferActor_StartFrameGrab");
static_assert(sizeof(RCGetFrameBufferActor_StartFrameGrab) == 0x000001, "Wrong size on RCGetFrameBufferActor_StartFrameGrab");
static_assert(offsetof(RCGetFrameBufferActor_StartFrameGrab, ReturnValue) == 0x000000, "Member 'RCGetFrameBufferActor_StartFrameGrab::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePageGuideWidget.ChangePageGuideState
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePageGuideWidget_ChangePageGuideState final
{
public:
	bool                                          IsSelect;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePageGuideWidget_ChangePageGuideState) == 0x000001, "Wrong alignment on RCNzUiFinalePageGuideWidget_ChangePageGuideState");
static_assert(sizeof(RCNzUiFinalePageGuideWidget_ChangePageGuideState) == 0x000001, "Wrong size on RCNzUiFinalePageGuideWidget_ChangePageGuideState");
static_assert(offsetof(RCNzUiFinalePageGuideWidget_ChangePageGuideState, IsSelect) == 0x000000, "Member 'RCNzUiFinalePageGuideWidget_ChangePageGuideState::IsSelect' has a wrong offset!");

// Function RC.RCNzUiFinalePageGuideWidget.InitializePageGuide
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePageGuideWidget_InitializePageGuide final
{
public:
	EPageGuideType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePageGuideWidget_InitializePageGuide) == 0x000001, "Wrong alignment on RCNzUiFinalePageGuideWidget_InitializePageGuide");
static_assert(sizeof(RCNzUiFinalePageGuideWidget_InitializePageGuide) == 0x000001, "Wrong size on RCNzUiFinalePageGuideWidget_InitializePageGuide");
static_assert(offsetof(RCNzUiFinalePageGuideWidget_InitializePageGuide, Type) == 0x000000, "Member 'RCNzUiFinalePageGuideWidget_InitializePageGuide::Type' has a wrong offset!");

// Function RC.RCNzUiFinalePageGuideWidget.UpdatePageGuide
// 0x0002 (0x0002 - 0x0000)
struct RCNzUiFinalePageGuideWidget_UpdatePageGuide final
{
public:
	EPageGuideType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCurrentPage;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePageGuideWidget_UpdatePageGuide) == 0x000001, "Wrong alignment on RCNzUiFinalePageGuideWidget_UpdatePageGuide");
static_assert(sizeof(RCNzUiFinalePageGuideWidget_UpdatePageGuide) == 0x000002, "Wrong size on RCNzUiFinalePageGuideWidget_UpdatePageGuide");
static_assert(offsetof(RCNzUiFinalePageGuideWidget_UpdatePageGuide, Type) == 0x000000, "Member 'RCNzUiFinalePageGuideWidget_UpdatePageGuide::Type' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePageGuideWidget_UpdatePageGuide, isCurrentPage) == 0x000001, "Member 'RCNzUiFinalePageGuideWidget_UpdatePageGuide::isCurrentPage' has a wrong offset!");

// Function RC.RCHardwareXboxSX.GetXSXConsoleType
// 0x0001 (0x0001 - 0x0000)
struct RCHardwareXboxSX_GetXSXConsoleType final
{
public:
	ERCXSXConsoleType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCHardwareXboxSX_GetXSXConsoleType) == 0x000001, "Wrong alignment on RCHardwareXboxSX_GetXSXConsoleType");
static_assert(sizeof(RCHardwareXboxSX_GetXSXConsoleType) == 0x000001, "Wrong size on RCHardwareXboxSX_GetXSXConsoleType");
static_assert(offsetof(RCHardwareXboxSX_GetXSXConsoleType, ReturnValue) == 0x000000, "Member 'RCHardwareXboxSX_GetXSXConsoleType::ReturnValue' has a wrong offset!");

// Function RC.RCUiMenuTutorial.SelectTutorialWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuTutorial_SelectTutorialWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuTutorial_SelectTutorialWrap) == 0x000001, "Wrong alignment on RCUiMenuTutorial_SelectTutorialWrap");
static_assert(sizeof(RCUiMenuTutorial_SelectTutorialWrap) == 0x000001, "Wrong size on RCUiMenuTutorial_SelectTutorialWrap");
static_assert(offsetof(RCUiMenuTutorial_SelectTutorialWrap, InKeyType) == 0x000000, "Member 'RCUiMenuTutorial_SelectTutorialWrap::InKeyType' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectBar.PlayAnim
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectBar_PlayAnim final
{
public:
	ERCNzUiBattleKaiKagiSelectPartsAnimType       InAnimType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectBar_PlayAnim) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectBar_PlayAnim");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectBar_PlayAnim) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectBar_PlayAnim");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectBar_PlayAnim, InAnimType) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectBar_PlayAnim::InAnimType' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectBar.SetKaiKagiName
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleKaiKagiSelectBar_SetKaiKagiName final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectBar_SetKaiKagiName) == 0x000004, "Wrong alignment on RCNzUiBattleKaiKagiSelectBar_SetKaiKagiName");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectBar_SetKaiKagiName) == 0x000008, "Wrong size on RCNzUiBattleKaiKagiSelectBar_SetKaiKagiName");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectBar_SetKaiKagiName, InTextID) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectBar_SetKaiKagiName::InTextID' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectBar.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectBar_SetVisible final
{
public:
	bool                                          bInVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectBar_SetVisible) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectBar_SetVisible");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectBar_SetVisible) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectBar_SetVisible");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectBar_SetVisible, bInVisibility) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectBar_SetVisible::bInVisibility' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.EventFinishedInMotion
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterAnimCtrl_EventFinishedInMotion final
{
public:
	int32                                         InSlotNumber;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_EventFinishedInMotion) == 0x000004, "Wrong alignment on RCCharacterAnimCtrl_EventFinishedInMotion");
static_assert(sizeof(RCCharacterAnimCtrl_EventFinishedInMotion) == 0x000004, "Wrong size on RCCharacterAnimCtrl_EventFinishedInMotion");
static_assert(offsetof(RCCharacterAnimCtrl_EventFinishedInMotion, InSlotNumber) == 0x000000, "Member 'RCCharacterAnimCtrl_EventFinishedInMotion::InSlotNumber' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.EventFinishedLoopMotion
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterAnimCtrl_EventFinishedLoopMotion final
{
public:
	int32                                         InSlotNumber;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_EventFinishedLoopMotion) == 0x000004, "Wrong alignment on RCCharacterAnimCtrl_EventFinishedLoopMotion");
static_assert(sizeof(RCCharacterAnimCtrl_EventFinishedLoopMotion) == 0x000004, "Wrong size on RCCharacterAnimCtrl_EventFinishedLoopMotion");
static_assert(offsetof(RCCharacterAnimCtrl_EventFinishedLoopMotion, InSlotNumber) == 0x000000, "Member 'RCCharacterAnimCtrl_EventFinishedLoopMotion::InSlotNumber' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.EventFinishedOutMotion
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterAnimCtrl_EventFinishedOutMotion final
{
public:
	int32                                         InSlotNumber;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendSec;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_EventFinishedOutMotion) == 0x000004, "Wrong alignment on RCCharacterAnimCtrl_EventFinishedOutMotion");
static_assert(sizeof(RCCharacterAnimCtrl_EventFinishedOutMotion) == 0x000008, "Wrong size on RCCharacterAnimCtrl_EventFinishedOutMotion");
static_assert(offsetof(RCCharacterAnimCtrl_EventFinishedOutMotion, InSlotNumber) == 0x000000, "Member 'RCCharacterAnimCtrl_EventFinishedOutMotion::InSlotNumber' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_EventFinishedOutMotion, InBlendSec) == 0x000004, "Member 'RCCharacterAnimCtrl_EventFinishedOutMotion::InBlendSec' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.GetUseExtraIdleIndex
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterAnimCtrl_GetUseExtraIdleIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_GetUseExtraIdleIndex) == 0x000004, "Wrong alignment on RCCharacterAnimCtrl_GetUseExtraIdleIndex");
static_assert(sizeof(RCCharacterAnimCtrl_GetUseExtraIdleIndex) == 0x000004, "Wrong size on RCCharacterAnimCtrl_GetUseExtraIdleIndex");
static_assert(offsetof(RCCharacterAnimCtrl_GetUseExtraIdleIndex, ReturnValue) == 0x000000, "Member 'RCCharacterAnimCtrl_GetUseExtraIdleIndex::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.IsExistOutCurrentMotion
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterAnimCtrl_IsExistOutCurrentMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_IsExistOutCurrentMotion) == 0x000001, "Wrong alignment on RCCharacterAnimCtrl_IsExistOutCurrentMotion");
static_assert(sizeof(RCCharacterAnimCtrl_IsExistOutCurrentMotion) == 0x000001, "Wrong size on RCCharacterAnimCtrl_IsExistOutCurrentMotion");
static_assert(offsetof(RCCharacterAnimCtrl_IsExistOutCurrentMotion, ReturnValue) == 0x000000, "Member 'RCCharacterAnimCtrl_IsExistOutCurrentMotion::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.IsExtraIdleTransition
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterAnimCtrl_IsExtraIdleTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_IsExtraIdleTransition) == 0x000001, "Wrong alignment on RCCharacterAnimCtrl_IsExtraIdleTransition");
static_assert(sizeof(RCCharacterAnimCtrl_IsExtraIdleTransition) == 0x000001, "Wrong size on RCCharacterAnimCtrl_IsExtraIdleTransition");
static_assert(offsetof(RCCharacterAnimCtrl_IsExtraIdleTransition, ReturnValue) == 0x000000, "Member 'RCCharacterAnimCtrl_IsExtraIdleTransition::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.IsFinishedMotion
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterAnimCtrl_IsFinishedMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_IsFinishedMotion) == 0x000001, "Wrong alignment on RCCharacterAnimCtrl_IsFinishedMotion");
static_assert(sizeof(RCCharacterAnimCtrl_IsFinishedMotion) == 0x000001, "Wrong size on RCCharacterAnimCtrl_IsFinishedMotion");
static_assert(offsetof(RCCharacterAnimCtrl_IsFinishedMotion, ReturnValue) == 0x000000, "Member 'RCCharacterAnimCtrl_IsFinishedMotion::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.IsMotionBlend
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterAnimCtrl_IsMotionBlend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_IsMotionBlend) == 0x000001, "Wrong alignment on RCCharacterAnimCtrl_IsMotionBlend");
static_assert(sizeof(RCCharacterAnimCtrl_IsMotionBlend) == 0x000001, "Wrong size on RCCharacterAnimCtrl_IsMotionBlend");
static_assert(offsetof(RCCharacterAnimCtrl_IsMotionBlend, ReturnValue) == 0x000000, "Member 'RCCharacterAnimCtrl_IsMotionBlend::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.IsStartedMotion
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterAnimCtrl_IsStartedMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_IsStartedMotion) == 0x000001, "Wrong alignment on RCCharacterAnimCtrl_IsStartedMotion");
static_assert(sizeof(RCCharacterAnimCtrl_IsStartedMotion) == 0x000001, "Wrong size on RCCharacterAnimCtrl_IsStartedMotion");
static_assert(offsetof(RCCharacterAnimCtrl_IsStartedMotion, ReturnValue) == 0x000000, "Member 'RCCharacterAnimCtrl_IsStartedMotion::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.PlayLipsyncMotion
// 0x0014 (0x0014 - 0x0000)
struct RCCharacterAnimCtrl_PlayLipsyncMotion final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterAnimCtrl_PlayLipsyncMotion) == 0x000004, "Wrong alignment on RCCharacterAnimCtrl_PlayLipsyncMotion");
static_assert(sizeof(RCCharacterAnimCtrl_PlayLipsyncMotion) == 0x000014, "Wrong size on RCCharacterAnimCtrl_PlayLipsyncMotion");
static_assert(offsetof(RCCharacterAnimCtrl_PlayLipsyncMotion, InMotionName) == 0x000000, "Member 'RCCharacterAnimCtrl_PlayLipsyncMotion::InMotionName' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayLipsyncMotion, bLoop) == 0x000008, "Member 'RCCharacterAnimCtrl_PlayLipsyncMotion::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayLipsyncMotion, InPlayRate) == 0x00000C, "Member 'RCCharacterAnimCtrl_PlayLipsyncMotion::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayLipsyncMotion, ReturnValue) == 0x000010, "Member 'RCCharacterAnimCtrl_PlayLipsyncMotion::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.PlayMotion
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterAnimCtrl_PlayMotion final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMotionSlotType                               InUseSlot;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMotionEventSlotSwitchType                    InSwitchType;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InLoopMotionPlayStartPosRate;                      // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSwitchDurationSec;                               // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlend;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterAnimCtrl_PlayMotion) == 0x000004, "Wrong alignment on RCCharacterAnimCtrl_PlayMotion");
static_assert(sizeof(RCCharacterAnimCtrl_PlayMotion) == 0x000020, "Wrong size on RCCharacterAnimCtrl_PlayMotion");
static_assert(offsetof(RCCharacterAnimCtrl_PlayMotion, InMotionName) == 0x000000, "Member 'RCCharacterAnimCtrl_PlayMotion::InMotionName' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayMotion, bLoop) == 0x000008, "Member 'RCCharacterAnimCtrl_PlayMotion::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayMotion, InPlayRate) == 0x00000C, "Member 'RCCharacterAnimCtrl_PlayMotion::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayMotion, InUseSlot) == 0x000010, "Member 'RCCharacterAnimCtrl_PlayMotion::InUseSlot' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayMotion, InSwitchType) == 0x000011, "Member 'RCCharacterAnimCtrl_PlayMotion::InSwitchType' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayMotion, InLoopMotionPlayStartPosRate) == 0x000014, "Member 'RCCharacterAnimCtrl_PlayMotion::InLoopMotionPlayStartPosRate' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayMotion, InSwitchDurationSec) == 0x000018, "Member 'RCCharacterAnimCtrl_PlayMotion::InSwitchDurationSec' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayMotion, bBlend) == 0x00001C, "Member 'RCCharacterAnimCtrl_PlayMotion::bBlend' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimCtrl_PlayMotion, ReturnValue) == 0x00001D, "Member 'RCCharacterAnimCtrl_PlayMotion::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.SetDeathMatchFlag
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterAnimCtrl_SetDeathMatchFlag final
{
public:
	bool                                          bInDeathMatch;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_SetDeathMatchFlag) == 0x000001, "Wrong alignment on RCCharacterAnimCtrl_SetDeathMatchFlag");
static_assert(sizeof(RCCharacterAnimCtrl_SetDeathMatchFlag) == 0x000001, "Wrong size on RCCharacterAnimCtrl_SetDeathMatchFlag");
static_assert(offsetof(RCCharacterAnimCtrl_SetDeathMatchFlag, bInDeathMatch) == 0x000000, "Member 'RCCharacterAnimCtrl_SetDeathMatchFlag::bInDeathMatch' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.SetExtraIdleTransition
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterAnimCtrl_SetExtraIdleTransition final
{
public:
	bool                                          bInbExtraIdleTransition;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_SetExtraIdleTransition) == 0x000001, "Wrong alignment on RCCharacterAnimCtrl_SetExtraIdleTransition");
static_assert(sizeof(RCCharacterAnimCtrl_SetExtraIdleTransition) == 0x000001, "Wrong size on RCCharacterAnimCtrl_SetExtraIdleTransition");
static_assert(offsetof(RCCharacterAnimCtrl_SetExtraIdleTransition, bInbExtraIdleTransition) == 0x000000, "Member 'RCCharacterAnimCtrl_SetExtraIdleTransition::bInbExtraIdleTransition' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.SetNewAnimBP
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterAnimCtrl_SetNewAnimBP final
{
public:
	class UClass*                                 InNewAnimClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_SetNewAnimBP) == 0x000008, "Wrong alignment on RCCharacterAnimCtrl_SetNewAnimBP");
static_assert(sizeof(RCCharacterAnimCtrl_SetNewAnimBP) == 0x000008, "Wrong size on RCCharacterAnimCtrl_SetNewAnimBP");
static_assert(offsetof(RCCharacterAnimCtrl_SetNewAnimBP, InNewAnimClass) == 0x000000, "Member 'RCCharacterAnimCtrl_SetNewAnimBP::InNewAnimClass' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.SetPlayLoop
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterAnimCtrl_SetPlayLoop final
{
public:
	bool                                          bLoop;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_SetPlayLoop) == 0x000001, "Wrong alignment on RCCharacterAnimCtrl_SetPlayLoop");
static_assert(sizeof(RCCharacterAnimCtrl_SetPlayLoop) == 0x000001, "Wrong size on RCCharacterAnimCtrl_SetPlayLoop");
static_assert(offsetof(RCCharacterAnimCtrl_SetPlayLoop, bLoop) == 0x000000, "Member 'RCCharacterAnimCtrl_SetPlayLoop::bLoop' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterAnimCtrl_SetPlayRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_SetPlayRate) == 0x000004, "Wrong alignment on RCCharacterAnimCtrl_SetPlayRate");
static_assert(sizeof(RCCharacterAnimCtrl_SetPlayRate) == 0x000004, "Wrong size on RCCharacterAnimCtrl_SetPlayRate");
static_assert(offsetof(RCCharacterAnimCtrl_SetPlayRate, InRate) == 0x000000, "Member 'RCCharacterAnimCtrl_SetPlayRate::InRate' has a wrong offset!");

// Function RC.RCCharacterAnimCtrl.SetPlayRateBasis
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterAnimCtrl_SetPlayRateBasis final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimCtrl_SetPlayRateBasis) == 0x000004, "Wrong alignment on RCCharacterAnimCtrl_SetPlayRateBasis");
static_assert(sizeof(RCCharacterAnimCtrl_SetPlayRateBasis) == 0x000004, "Wrong size on RCCharacterAnimCtrl_SetPlayRateBasis");
static_assert(offsetof(RCCharacterAnimCtrl_SetPlayRateBasis, InRate) == 0x000000, "Member 'RCCharacterAnimCtrl_SetPlayRateBasis::InRate' has a wrong offset!");

// Function RC.RCCharacterAnimInstance.GetSequencePlayerInfo
// 0x0038 (0x0038 - 0x0000)
struct RCCharacterAnimInstance_GetSequencePlayerInfo final
{
public:
	class FName                                   InStateMachineName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStateName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSequenceName;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCCharacterSequencePlayerInfo         ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimInstance_GetSequencePlayerInfo) == 0x000008, "Wrong alignment on RCCharacterAnimInstance_GetSequencePlayerInfo");
static_assert(sizeof(RCCharacterAnimInstance_GetSequencePlayerInfo) == 0x000038, "Wrong size on RCCharacterAnimInstance_GetSequencePlayerInfo");
static_assert(offsetof(RCCharacterAnimInstance_GetSequencePlayerInfo, InStateMachineName) == 0x000000, "Member 'RCCharacterAnimInstance_GetSequencePlayerInfo::InStateMachineName' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimInstance_GetSequencePlayerInfo, InStateName) == 0x000008, "Member 'RCCharacterAnimInstance_GetSequencePlayerInfo::InStateName' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimInstance_GetSequencePlayerInfo, InSequenceName) == 0x000010, "Member 'RCCharacterAnimInstance_GetSequencePlayerInfo::InSequenceName' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimInstance_GetSequencePlayerInfo, ReturnValue) == 0x000018, "Member 'RCCharacterAnimInstance_GetSequencePlayerInfo::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimInstance.GetSequencePlayerInfos
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterAnimInstance_GetSequencePlayerInfos final
{
public:
	class FName                                   InAnimGraphName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCCharacterSequencePlayerInfo> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimInstance_GetSequencePlayerInfos) == 0x000008, "Wrong alignment on RCCharacterAnimInstance_GetSequencePlayerInfos");
static_assert(sizeof(RCCharacterAnimInstance_GetSequencePlayerInfos) == 0x000018, "Wrong size on RCCharacterAnimInstance_GetSequencePlayerInfos");
static_assert(offsetof(RCCharacterAnimInstance_GetSequencePlayerInfos, InAnimGraphName) == 0x000000, "Member 'RCCharacterAnimInstance_GetSequencePlayerInfos::InAnimGraphName' has a wrong offset!");
static_assert(offsetof(RCCharacterAnimInstance_GetSequencePlayerInfos, ReturnValue) == 0x000008, "Member 'RCCharacterAnimInstance_GetSequencePlayerInfos::ReturnValue' has a wrong offset!");

// Function RC.RCTitleChapterSelectList.ChapterSelectListSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCTitleChapterSelectList_ChapterSelectListSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleChapterSelectList_ChapterSelectListSelectNavigation) == 0x000008, "Wrong alignment on RCTitleChapterSelectList_ChapterSelectListSelectNavigation");
static_assert(sizeof(RCTitleChapterSelectList_ChapterSelectListSelectNavigation) == 0x000010, "Wrong size on RCTitleChapterSelectList_ChapterSelectListSelectNavigation");
static_assert(offsetof(RCTitleChapterSelectList_ChapterSelectListSelectNavigation, InNavigation) == 0x000000, "Member 'RCTitleChapterSelectList_ChapterSelectListSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTitleChapterSelectList_ChapterSelectListSelectNavigation, ReturnValue) == 0x000008, "Member 'RCTitleChapterSelectList_ChapterSelectListSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterAnimNotify.SetFloatValue1
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterAnimNotify_SetFloatValue1 final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimNotify_SetFloatValue1) == 0x000004, "Wrong alignment on RCCharacterAnimNotify_SetFloatValue1");
static_assert(sizeof(RCCharacterAnimNotify_SetFloatValue1) == 0x000004, "Wrong size on RCCharacterAnimNotify_SetFloatValue1");
static_assert(offsetof(RCCharacterAnimNotify_SetFloatValue1, InValue) == 0x000000, "Member 'RCCharacterAnimNotify_SetFloatValue1::InValue' has a wrong offset!");

// Function RC.RCCharacterAnimNotify.SetFloatValue2
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterAnimNotify_SetFloatValue2 final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimNotify_SetFloatValue2) == 0x000004, "Wrong alignment on RCCharacterAnimNotify_SetFloatValue2");
static_assert(sizeof(RCCharacterAnimNotify_SetFloatValue2) == 0x000004, "Wrong size on RCCharacterAnimNotify_SetFloatValue2");
static_assert(offsetof(RCCharacterAnimNotify_SetFloatValue2, InValue) == 0x000000, "Member 'RCCharacterAnimNotify_SetFloatValue2::InValue' has a wrong offset!");

// Function RC.RCCharacterAnimNotify.SetNotifyType
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterAnimNotify_SetNotifyType final
{
public:
	EAnimationNotifyType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimNotify_SetNotifyType) == 0x000001, "Wrong alignment on RCCharacterAnimNotify_SetNotifyType");
static_assert(sizeof(RCCharacterAnimNotify_SetNotifyType) == 0x000001, "Wrong size on RCCharacterAnimNotify_SetNotifyType");
static_assert(offsetof(RCCharacterAnimNotify_SetNotifyType, InType) == 0x000000, "Member 'RCCharacterAnimNotify_SetNotifyType::InType' has a wrong offset!");

// Function RC.RCCharacterAnimNotify.SetStrValue1
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterAnimNotify_SetStrValue1 final
{
public:
	class FString                                 InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimNotify_SetStrValue1) == 0x000008, "Wrong alignment on RCCharacterAnimNotify_SetStrValue1");
static_assert(sizeof(RCCharacterAnimNotify_SetStrValue1) == 0x000010, "Wrong size on RCCharacterAnimNotify_SetStrValue1");
static_assert(offsetof(RCCharacterAnimNotify_SetStrValue1, InValue) == 0x000000, "Member 'RCCharacterAnimNotify_SetStrValue1::InValue' has a wrong offset!");

// Function RC.RCCharacterAnimNotify.SetStrValue2
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterAnimNotify_SetStrValue2 final
{
public:
	class FString                                 InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterAnimNotify_SetStrValue2) == 0x000008, "Wrong alignment on RCCharacterAnimNotify_SetStrValue2");
static_assert(sizeof(RCCharacterAnimNotify_SetStrValue2) == 0x000010, "Wrong size on RCCharacterAnimNotify_SetStrValue2");
static_assert(offsetof(RCCharacterAnimNotify_SetStrValue2, InValue) == 0x000000, "Member 'RCCharacterAnimNotify_SetStrValue2::InValue' has a wrong offset!");

// Function RC.RCCharacterFacialCtrl.ChangeFacial
// 0x000C (0x000C - 0x0000)
struct RCCharacterFacialCtrl_ChangeFacial final
{
public:
	class FName                                   InFacialName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFlowLiquid;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterFacialCtrl_ChangeFacial) == 0x000004, "Wrong alignment on RCCharacterFacialCtrl_ChangeFacial");
static_assert(sizeof(RCCharacterFacialCtrl_ChangeFacial) == 0x00000C, "Wrong size on RCCharacterFacialCtrl_ChangeFacial");
static_assert(offsetof(RCCharacterFacialCtrl_ChangeFacial, InFacialName) == 0x000000, "Member 'RCCharacterFacialCtrl_ChangeFacial::InFacialName' has a wrong offset!");
static_assert(offsetof(RCCharacterFacialCtrl_ChangeFacial, bAllowFlowLiquid) == 0x000008, "Member 'RCCharacterFacialCtrl_ChangeFacial::bAllowFlowLiquid' has a wrong offset!");

// Function RC.RCCharacterFacialCtrl.SetCanBlink
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterFacialCtrl_SetCanBlink final
{
public:
	bool                                          bState;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterFacialCtrl_SetCanBlink) == 0x000001, "Wrong alignment on RCCharacterFacialCtrl_SetCanBlink");
static_assert(sizeof(RCCharacterFacialCtrl_SetCanBlink) == 0x000001, "Wrong size on RCCharacterFacialCtrl_SetCanBlink");
static_assert(offsetof(RCCharacterFacialCtrl_SetCanBlink, bState) == 0x000000, "Member 'RCCharacterFacialCtrl_SetCanBlink::bState' has a wrong offset!");

// Function RC.RCEventCharacter.GetAnimCtrl
// 0x0008 (0x0008 - 0x0000)
struct RCEventCharacter_GetAnimCtrl final
{
public:
	class URCCharacterAnimCtrl*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventCharacter_GetAnimCtrl) == 0x000008, "Wrong alignment on RCEventCharacter_GetAnimCtrl");
static_assert(sizeof(RCEventCharacter_GetAnimCtrl) == 0x000008, "Wrong size on RCEventCharacter_GetAnimCtrl");
static_assert(offsetof(RCEventCharacter_GetAnimCtrl, ReturnValue) == 0x000000, "Member 'RCEventCharacter_GetAnimCtrl::ReturnValue' has a wrong offset!");

// Function RC.RCEventCharacter.GetEyeSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct RCEventCharacter_GetEyeSkeletalMesh final
{
public:
	const class USkeletalMeshComponent*           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventCharacter_GetEyeSkeletalMesh) == 0x000008, "Wrong alignment on RCEventCharacter_GetEyeSkeletalMesh");
static_assert(sizeof(RCEventCharacter_GetEyeSkeletalMesh) == 0x000008, "Wrong size on RCEventCharacter_GetEyeSkeletalMesh");
static_assert(offsetof(RCEventCharacter_GetEyeSkeletalMesh, ReturnValue) == 0x000000, "Member 'RCEventCharacter_GetEyeSkeletalMesh::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiCountdown.InitCountdown
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiCountdown_InitCountdown final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blinkingStartTime;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiCountdown_InitCountdown) == 0x000004, "Wrong alignment on RCNzUiCountdown_InitCountdown");
static_assert(sizeof(RCNzUiCountdown_InitCountdown) == 0x000008, "Wrong size on RCNzUiCountdown_InitCountdown");
static_assert(offsetof(RCNzUiCountdown_InitCountdown, Time) == 0x000000, "Member 'RCNzUiCountdown_InitCountdown::Time' has a wrong offset!");
static_assert(offsetof(RCNzUiCountdown_InitCountdown, blinkingStartTime) == 0x000004, "Member 'RCNzUiCountdown_InitCountdown::blinkingStartTime' has a wrong offset!");

// Function RC.RCNzUiCountdown.SetFTime
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiCountdown_SetFTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiCountdown_SetFTime) == 0x000004, "Wrong alignment on RCNzUiCountdown_SetFTime");
static_assert(sizeof(RCNzUiCountdown_SetFTime) == 0x000004, "Wrong size on RCNzUiCountdown_SetFTime");
static_assert(offsetof(RCNzUiCountdown_SetFTime, Time) == 0x000000, "Member 'RCNzUiCountdown_SetFTime::Time' has a wrong offset!");

// Function RC.RCNzUiCountdown.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiCountdown_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiCountdown_IsFinished) == 0x000001, "Wrong alignment on RCNzUiCountdown_IsFinished");
static_assert(sizeof(RCNzUiCountdown_IsFinished) == 0x000001, "Wrong size on RCNzUiCountdown_IsFinished");
static_assert(offsetof(RCNzUiCountdown_IsFinished, ReturnValue) == 0x000000, "Member 'RCNzUiCountdown_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiCountdown.IsShown
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiCountdown_IsShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiCountdown_IsShown) == 0x000001, "Wrong alignment on RCNzUiCountdown_IsShown");
static_assert(sizeof(RCNzUiCountdown_IsShown) == 0x000001, "Wrong size on RCNzUiCountdown_IsShown");
static_assert(offsetof(RCNzUiCountdown_IsShown, ReturnValue) == 0x000000, "Member 'RCNzUiCountdown_IsShown::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterFootIKBFL.AnimInstSetCanFootIK
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterFootIKBFL_AnimInstSetCanFootIK final
{
public:
	class URCCharacterAnimInstance*               AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanFootIK;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterFootIKBFL_AnimInstSetCanFootIK) == 0x000008, "Wrong alignment on RCCharacterFootIKBFL_AnimInstSetCanFootIK");
static_assert(sizeof(RCCharacterFootIKBFL_AnimInstSetCanFootIK) == 0x000010, "Wrong size on RCCharacterFootIKBFL_AnimInstSetCanFootIK");
static_assert(offsetof(RCCharacterFootIKBFL_AnimInstSetCanFootIK, AnimInst) == 0x000000, "Member 'RCCharacterFootIKBFL_AnimInstSetCanFootIK::AnimInst' has a wrong offset!");
static_assert(offsetof(RCCharacterFootIKBFL_AnimInstSetCanFootIK, bCanFootIK) == 0x000008, "Member 'RCCharacterFootIKBFL_AnimInstSetCanFootIK::bCanFootIK' has a wrong offset!");

// Function RC.RCCharacterFootIKBFL.AnimInstTickFootIK
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterFootIKBFL_AnimInstTickFootIK final
{
public:
	class URCCharacterAnimInstance*               AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterFootIKBFL_AnimInstTickFootIK) == 0x000008, "Wrong alignment on RCCharacterFootIKBFL_AnimInstTickFootIK");
static_assert(sizeof(RCCharacterFootIKBFL_AnimInstTickFootIK) == 0x000008, "Wrong size on RCCharacterFootIKBFL_AnimInstTickFootIK");
static_assert(offsetof(RCCharacterFootIKBFL_AnimInstTickFootIK, AnimInst) == 0x000000, "Member 'RCCharacterFootIKBFL_AnimInstTickFootIK::AnimInst' has a wrong offset!");

// Function RC.RCCharacterFootIKBFL.InitFootIK
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterFootIKBFL_InitFootIK final
{
public:
	class URCCharacterMovementComponent*          MovementComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterFootIKBFL_InitFootIK) == 0x000008, "Wrong alignment on RCCharacterFootIKBFL_InitFootIK");
static_assert(sizeof(RCCharacterFootIKBFL_InitFootIK) == 0x000008, "Wrong size on RCCharacterFootIKBFL_InitFootIK");
static_assert(offsetof(RCCharacterFootIKBFL_InitFootIK, MovementComp) == 0x000000, "Member 'RCCharacterFootIKBFL_InitFootIK::MovementComp' has a wrong offset!");

// Function RC.RCCharacterFootIKBFL.SetFootIKEnable
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterFootIKBFL_SetFootIKEnable final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFootIKEnable;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterFootIKBFL_SetFootIKEnable) == 0x000008, "Wrong alignment on RCCharacterFootIKBFL_SetFootIKEnable");
static_assert(sizeof(RCCharacterFootIKBFL_SetFootIKEnable) == 0x000010, "Wrong size on RCCharacterFootIKBFL_SetFootIKEnable");
static_assert(offsetof(RCCharacterFootIKBFL_SetFootIKEnable, Actor) == 0x000000, "Member 'RCCharacterFootIKBFL_SetFootIKEnable::Actor' has a wrong offset!");
static_assert(offsetof(RCCharacterFootIKBFL_SetFootIKEnable, bFootIKEnable) == 0x000008, "Member 'RCCharacterFootIKBFL_SetFootIKEnable::bFootIKEnable' has a wrong offset!");

// Function RC.RCCharacterFootIKBFL.TickFootIK
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterFootIKBFL_TickFootIK final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URCCharacterMovementComponent*          MovementComp;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterFootIKBFL_TickFootIK) == 0x000008, "Wrong alignment on RCCharacterFootIKBFL_TickFootIK");
static_assert(sizeof(RCCharacterFootIKBFL_TickFootIK) == 0x000010, "Wrong size on RCCharacterFootIKBFL_TickFootIK");
static_assert(offsetof(RCCharacterFootIKBFL_TickFootIK, DeltaTime) == 0x000000, "Member 'RCCharacterFootIKBFL_TickFootIK::DeltaTime' has a wrong offset!");
static_assert(offsetof(RCCharacterFootIKBFL_TickFootIK, MovementComp) == 0x000008, "Member 'RCCharacterFootIKBFL_TickFootIK::MovementComp' has a wrong offset!");

// Function RC.RCScreenshotBFL.IsEnable
// 0x0001 (0x0001 - 0x0000)
struct RCScreenshotBFL_IsEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCScreenshotBFL_IsEnable) == 0x000001, "Wrong alignment on RCScreenshotBFL_IsEnable");
static_assert(sizeof(RCScreenshotBFL_IsEnable) == 0x000001, "Wrong size on RCScreenshotBFL_IsEnable");
static_assert(offsetof(RCScreenshotBFL_IsEnable, ReturnValue) == 0x000000, "Member 'RCScreenshotBFL_IsEnable::ReturnValue' has a wrong offset!");

// Function RC.RCScreenshotBFL.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct RCScreenshotBFL_SetEnable final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCScreenshotBFL_SetEnable) == 0x000001, "Wrong alignment on RCScreenshotBFL_SetEnable");
static_assert(sizeof(RCScreenshotBFL_SetEnable) == 0x000001, "Wrong size on RCScreenshotBFL_SetEnable");
static_assert(offsetof(RCScreenshotBFL_SetEnable, bFlag) == 0x000000, "Member 'RCScreenshotBFL_SetEnable::bFlag' has a wrong offset!");

// Function RC.RCScreenshotBFL.SetEnableFromChapter
// 0x0004 (0x0004 - 0x0000)
struct RCScreenshotBFL_SetEnableFromChapter final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCScreenshotBFL_SetEnableFromChapter) == 0x000004, "Wrong alignment on RCScreenshotBFL_SetEnableFromChapter");
static_assert(sizeof(RCScreenshotBFL_SetEnableFromChapter) == 0x000004, "Wrong size on RCScreenshotBFL_SetEnableFromChapter");
static_assert(offsetof(RCScreenshotBFL_SetEnableFromChapter, InChapter) == 0x000000, "Member 'RCScreenshotBFL_SetEnableFromChapter::InChapter' has a wrong offset!");

// Function RC.RCCharacterHitReactionBFL.AnimInstTickHitReaction
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterHitReactionBFL_AnimInstTickHitReaction final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URCCharacterAnimInstance*               AnimInst;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterHitReactionBFL_AnimInstTickHitReaction) == 0x000008, "Wrong alignment on RCCharacterHitReactionBFL_AnimInstTickHitReaction");
static_assert(sizeof(RCCharacterHitReactionBFL_AnimInstTickHitReaction) == 0x000010, "Wrong size on RCCharacterHitReactionBFL_AnimInstTickHitReaction");
static_assert(offsetof(RCCharacterHitReactionBFL_AnimInstTickHitReaction, DeltaTime) == 0x000000, "Member 'RCCharacterHitReactionBFL_AnimInstTickHitReaction::DeltaTime' has a wrong offset!");
static_assert(offsetof(RCCharacterHitReactionBFL_AnimInstTickHitReaction, AnimInst) == 0x000008, "Member 'RCCharacterHitReactionBFL_AnimInstTickHitReaction::AnimInst' has a wrong offset!");

// Function RC.RCCharacterHitReactionBFL.TickHitReaction
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterHitReactionBFL_TickHitReaction final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URCCharacterMovementComponent*          MovementComp;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterHitReactionBFL_TickHitReaction) == 0x000008, "Wrong alignment on RCCharacterHitReactionBFL_TickHitReaction");
static_assert(sizeof(RCCharacterHitReactionBFL_TickHitReaction) == 0x000010, "Wrong size on RCCharacterHitReactionBFL_TickHitReaction");
static_assert(offsetof(RCCharacterHitReactionBFL_TickHitReaction, DeltaTime) == 0x000000, "Member 'RCCharacterHitReactionBFL_TickHitReaction::DeltaTime' has a wrong offset!");
static_assert(offsetof(RCCharacterHitReactionBFL_TickHitReaction, MovementComp) == 0x000008, "Member 'RCCharacterHitReactionBFL_TickHitReaction::MovementComp' has a wrong offset!");

// Function RC.RCCharacterLookCtrl.LookAt
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterLookCtrl_LookAt final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLookAtBoneName;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterLookCtrl_LookAt) == 0x000008, "Wrong alignment on RCCharacterLookCtrl_LookAt");
static_assert(sizeof(RCCharacterLookCtrl_LookAt) == 0x000010, "Wrong size on RCCharacterLookCtrl_LookAt");
static_assert(offsetof(RCCharacterLookCtrl_LookAt, InActor) == 0x000000, "Member 'RCCharacterLookCtrl_LookAt::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterLookCtrl_LookAt, InLookAtBoneName) == 0x000008, "Member 'RCCharacterLookCtrl_LookAt::InLookAtBoneName' has a wrong offset!");

// Function RC.RCCharacterLookCtrl.SetLookTarget
// 0x000C (0x000C - 0x0000)
struct RCCharacterLookCtrl_SetLookTarget final
{
public:
	struct FVector                                InTargetPos;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterLookCtrl_SetLookTarget) == 0x000004, "Wrong alignment on RCCharacterLookCtrl_SetLookTarget");
static_assert(sizeof(RCCharacterLookCtrl_SetLookTarget) == 0x00000C, "Wrong size on RCCharacterLookCtrl_SetLookTarget");
static_assert(offsetof(RCCharacterLookCtrl_SetLookTarget, InTargetPos) == 0x000000, "Member 'RCCharacterLookCtrl_SetLookTarget::InTargetPos' has a wrong offset!");

// Function RC.RCCharacterLookCtrl.SetViewParam
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterLookCtrl_SetViewParam final
{
public:
	float                                         InCanViewDistance;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCanViewAngle;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterLookCtrl_SetViewParam) == 0x000004, "Wrong alignment on RCCharacterLookCtrl_SetViewParam");
static_assert(sizeof(RCCharacterLookCtrl_SetViewParam) == 0x000008, "Wrong size on RCCharacterLookCtrl_SetViewParam");
static_assert(offsetof(RCCharacterLookCtrl_SetViewParam, InCanViewDistance) == 0x000000, "Member 'RCCharacterLookCtrl_SetViewParam::InCanViewDistance' has a wrong offset!");
static_assert(offsetof(RCCharacterLookCtrl_SetViewParam, InCanViewAngle) == 0x000004, "Member 'RCCharacterLookCtrl_SetViewParam::InCanViewAngle' has a wrong offset!");

// Function RC.RCCharacterLookCtrl.StopLookAt
// 0x0004 (0x0004 - 0x0000)
struct RCCharacterLookCtrl_StopLookAt final
{
public:
	float                                         InDurationSec;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterLookCtrl_StopLookAt) == 0x000004, "Wrong alignment on RCCharacterLookCtrl_StopLookAt");
static_assert(sizeof(RCCharacterLookCtrl_StopLookAt) == 0x000004, "Wrong size on RCCharacterLookCtrl_StopLookAt");
static_assert(offsetof(RCCharacterLookCtrl_StopLookAt, InDurationSec) == 0x000000, "Member 'RCCharacterLookCtrl_StopLookAt::InDurationSec' has a wrong offset!");

// Function RC.RCCharacterLookCtrl.GetCurrentLookAtTargetActor
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterLookCtrl_GetCurrentLookAtTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterLookCtrl_GetCurrentLookAtTargetActor) == 0x000008, "Wrong alignment on RCCharacterLookCtrl_GetCurrentLookAtTargetActor");
static_assert(sizeof(RCCharacterLookCtrl_GetCurrentLookAtTargetActor) == 0x000008, "Wrong size on RCCharacterLookCtrl_GetCurrentLookAtTargetActor");
static_assert(offsetof(RCCharacterLookCtrl_GetCurrentLookAtTargetActor, ReturnValue) == 0x000000, "Member 'RCCharacterLookCtrl_GetCurrentLookAtTargetActor::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterLookCtrl.GetCurrentLookAtTargetBoneName
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterLookCtrl_GetCurrentLookAtTargetBoneName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterLookCtrl_GetCurrentLookAtTargetBoneName) == 0x000004, "Wrong alignment on RCCharacterLookCtrl_GetCurrentLookAtTargetBoneName");
static_assert(sizeof(RCCharacterLookCtrl_GetCurrentLookAtTargetBoneName) == 0x000008, "Wrong size on RCCharacterLookCtrl_GetCurrentLookAtTargetBoneName");
static_assert(offsetof(RCCharacterLookCtrl_GetCurrentLookAtTargetBoneName, ReturnValue) == 0x000000, "Member 'RCCharacterLookCtrl_GetCurrentLookAtTargetBoneName::ReturnValue' has a wrong offset!");

// Function RC.RCEventTriggerSequencerComponent.Init
// 0x0008 (0x0008 - 0x0000)
struct RCEventTriggerSequencerComponent_Init final
{
public:
	class FName                                   InEventTriggerName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTriggerSequencerComponent_Init) == 0x000004, "Wrong alignment on RCEventTriggerSequencerComponent_Init");
static_assert(sizeof(RCEventTriggerSequencerComponent_Init) == 0x000008, "Wrong size on RCEventTriggerSequencerComponent_Init");
static_assert(offsetof(RCEventTriggerSequencerComponent_Init, InEventTriggerName) == 0x000000, "Member 'RCEventTriggerSequencerComponent_Init::InEventTriggerName' has a wrong offset!");

// Function RC.RCEventTriggerSequencerComponent.ResetSequencer
// 0x0001 (0x0001 - 0x0000)
struct RCEventTriggerSequencerComponent_ResetSequencer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTriggerSequencerComponent_ResetSequencer) == 0x000001, "Wrong alignment on RCEventTriggerSequencerComponent_ResetSequencer");
static_assert(sizeof(RCEventTriggerSequencerComponent_ResetSequencer) == 0x000001, "Wrong size on RCEventTriggerSequencerComponent_ResetSequencer");
static_assert(offsetof(RCEventTriggerSequencerComponent_ResetSequencer, ReturnValue) == 0x000000, "Member 'RCEventTriggerSequencerComponent_ResetSequencer::ReturnValue' has a wrong offset!");

// Function RC.RCEventTriggerSequencerComponent.StartSequencer
// 0x0001 (0x0001 - 0x0000)
struct RCEventTriggerSequencerComponent_StartSequencer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTriggerSequencerComponent_StartSequencer) == 0x000001, "Wrong alignment on RCEventTriggerSequencerComponent_StartSequencer");
static_assert(sizeof(RCEventTriggerSequencerComponent_StartSequencer) == 0x000001, "Wrong size on RCEventTriggerSequencerComponent_StartSequencer");
static_assert(offsetof(RCEventTriggerSequencerComponent_StartSequencer, ReturnValue) == 0x000000, "Member 'RCEventTriggerSequencerComponent_StartSequencer::ReturnValue' has a wrong offset!");

// Function RC.RCShinigamiTargetPoint.SetShinigami
// 0x0008 (0x0008 - 0x0000)
struct RCShinigamiTargetPoint_SetShinigami final
{
public:
	class ARCOptionCharaShinigami*                Shinigami;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCShinigamiTargetPoint_SetShinigami) == 0x000008, "Wrong alignment on RCShinigamiTargetPoint_SetShinigami");
static_assert(sizeof(RCShinigamiTargetPoint_SetShinigami) == 0x000008, "Wrong size on RCShinigamiTargetPoint_SetShinigami");
static_assert(offsetof(RCShinigamiTargetPoint_SetShinigami, Shinigami) == 0x000000, "Member 'RCShinigamiTargetPoint_SetShinigami::Shinigami' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveTitleWidget.SetSectionText
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiFinaleDetectiveTitleWidget_SetSectionText final
{
public:
	class FString                                 sectionText1;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sectionText2;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveTitleWidget_SetSectionText) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveTitleWidget_SetSectionText");
static_assert(sizeof(RCNzUiFinaleDetectiveTitleWidget_SetSectionText) == 0x000020, "Wrong size on RCNzUiFinaleDetectiveTitleWidget_SetSectionText");
static_assert(offsetof(RCNzUiFinaleDetectiveTitleWidget_SetSectionText, sectionText1) == 0x000000, "Member 'RCNzUiFinaleDetectiveTitleWidget_SetSectionText::sectionText1' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleDetectiveTitleWidget_SetSectionText, sectionText2) == 0x000010, "Member 'RCNzUiFinaleDetectiveTitleWidget_SetSectionText::sectionText2' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveTitleWidget.UpdateTitle
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinaleDetectiveTitleWidget_UpdateTitle final
{
public:
	int32                                         SectionName;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveTitleWidget_UpdateTitle) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveTitleWidget_UpdateTitle");
static_assert(sizeof(RCNzUiFinaleDetectiveTitleWidget_UpdateTitle) == 0x000018, "Wrong size on RCNzUiFinaleDetectiveTitleWidget_UpdateTitle");
static_assert(offsetof(RCNzUiFinaleDetectiveTitleWidget_UpdateTitle, SectionName) == 0x000000, "Member 'RCNzUiFinaleDetectiveTitleWidget_UpdateTitle::SectionName' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleDetectiveTitleWidget_UpdateTitle, Title) == 0x000008, "Member 'RCNzUiFinaleDetectiveTitleWidget_UpdateTitle::Title' has a wrong offset!");

// Function RC.RCSelectText3DActorBFL.GetSelectText3DActor
// 0x0010 (0x0010 - 0x0000)
struct RCSelectText3DActorBFL_GetSelectText3DActor final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCSelectText3DActor*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSelectText3DActorBFL_GetSelectText3DActor) == 0x000008, "Wrong alignment on RCSelectText3DActorBFL_GetSelectText3DActor");
static_assert(sizeof(RCSelectText3DActorBFL_GetSelectText3DActor) == 0x000010, "Wrong size on RCSelectText3DActorBFL_GetSelectText3DActor");
static_assert(offsetof(RCSelectText3DActorBFL_GetSelectText3DActor, InActorName) == 0x000000, "Member 'RCSelectText3DActorBFL_GetSelectText3DActor::InActorName' has a wrong offset!");
static_assert(offsetof(RCSelectText3DActorBFL_GetSelectText3DActor, ReturnValue) == 0x000008, "Member 'RCSelectText3DActorBFL_GetSelectText3DActor::ReturnValue' has a wrong offset!");

// Function RC.RCSelectText3DActorBFL.SetTextColor
// 0x0018 (0x0018 - 0x0000)
struct RCSelectText3DActorBFL_SetTextColor final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InTextColor;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSelectText3DActorBFL_SetTextColor) == 0x000004, "Wrong alignment on RCSelectText3DActorBFL_SetTextColor");
static_assert(sizeof(RCSelectText3DActorBFL_SetTextColor) == 0x000018, "Wrong size on RCSelectText3DActorBFL_SetTextColor");
static_assert(offsetof(RCSelectText3DActorBFL_SetTextColor, InActorName) == 0x000000, "Member 'RCSelectText3DActorBFL_SetTextColor::InActorName' has a wrong offset!");
static_assert(offsetof(RCSelectText3DActorBFL_SetTextColor, InTextColor) == 0x000008, "Member 'RCSelectText3DActorBFL_SetTextColor::InTextColor' has a wrong offset!");

// Function RC.RCNzUiBattleCutin.GetBattleCutinStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleCutin_GetBattleCutinStatus final
{
public:
	ERCNzUiBattleCutinStatus                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleCutin_GetBattleCutinStatus) == 0x000001, "Wrong alignment on RCNzUiBattleCutin_GetBattleCutinStatus");
static_assert(sizeof(RCNzUiBattleCutin_GetBattleCutinStatus) == 0x000001, "Wrong size on RCNzUiBattleCutin_GetBattleCutinStatus");
static_assert(offsetof(RCNzUiBattleCutin_GetBattleCutinStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleCutin_GetBattleCutinStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleCutin.InitializeBattleCutin
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiBattleCutin_InitializeBattleCutin final
{
public:
	struct FSoftObjectPath                        InAssistImagePath;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleCutin_InitializeBattleCutin) == 0x000008, "Wrong alignment on RCNzUiBattleCutin_InitializeBattleCutin");
static_assert(sizeof(RCNzUiBattleCutin_InitializeBattleCutin) == 0x000018, "Wrong size on RCNzUiBattleCutin_InitializeBattleCutin");
static_assert(offsetof(RCNzUiBattleCutin_InitializeBattleCutin, InAssistImagePath) == 0x000000, "Member 'RCNzUiBattleCutin_InitializeBattleCutin::InAssistImagePath' has a wrong offset!");

// Function RC.RCNzUiBattleCutin.Open
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleCutin_Open final
{
public:
	ERCNzUiBattleCutinType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleCutin_Open) == 0x000001, "Wrong alignment on RCNzUiBattleCutin_Open");
static_assert(sizeof(RCNzUiBattleCutin_Open) == 0x000001, "Wrong size on RCNzUiBattleCutin_Open");
static_assert(offsetof(RCNzUiBattleCutin_Open, InType) == 0x000000, "Member 'RCNzUiBattleCutin_Open::InType' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ApplyCharacterMaterial
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_ApplyCharacterMaterial final
{
public:
	class FName                                   InMaterialId;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ApplyCharacterMaterial) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_ApplyCharacterMaterial");
static_assert(sizeof(RCCharacterProxyBFL_ApplyCharacterMaterial) == 0x000008, "Wrong size on RCCharacterProxyBFL_ApplyCharacterMaterial");
static_assert(offsetof(RCCharacterProxyBFL_ApplyCharacterMaterial, InMaterialId) == 0x000000, "Member 'RCCharacterProxyBFL_ApplyCharacterMaterial::InMaterialId' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ApplyColorPalette
// 0x0030 (0x0030 - 0x0000)
struct RCCharacterProxyBFL_ApplyColorPalette final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorPaletteId;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFaceColorPaletteId;                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSoliderNumberId;                                 // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEyeId;                                           // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSkinId;                                          // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ApplyColorPalette) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_ApplyColorPalette");
static_assert(sizeof(RCCharacterProxyBFL_ApplyColorPalette) == 0x000030, "Wrong size on RCCharacterProxyBFL_ApplyColorPalette");
static_assert(offsetof(RCCharacterProxyBFL_ApplyColorPalette, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_ApplyColorPalette::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ApplyColorPalette, InColorPaletteId) == 0x000008, "Member 'RCCharacterProxyBFL_ApplyColorPalette::InColorPaletteId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ApplyColorPalette, InFaceColorPaletteId) == 0x000010, "Member 'RCCharacterProxyBFL_ApplyColorPalette::InFaceColorPaletteId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ApplyColorPalette, InSoliderNumberId) == 0x000018, "Member 'RCCharacterProxyBFL_ApplyColorPalette::InSoliderNumberId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ApplyColorPalette, InEyeId) == 0x000020, "Member 'RCCharacterProxyBFL_ApplyColorPalette::InEyeId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ApplyColorPalette, InSkinId) == 0x000028, "Member 'RCCharacterProxyBFL_ApplyColorPalette::InSkinId' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ApplyEventEmissive
// 0x000C (0x000C - 0x0000)
struct RCCharacterProxyBFL_ApplyEventEmissive final
{
public:
	class FName                                   InCharacterName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEventEmissiveValue;                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ApplyEventEmissive) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_ApplyEventEmissive");
static_assert(sizeof(RCCharacterProxyBFL_ApplyEventEmissive) == 0x00000C, "Wrong size on RCCharacterProxyBFL_ApplyEventEmissive");
static_assert(offsetof(RCCharacterProxyBFL_ApplyEventEmissive, InCharacterName) == 0x000000, "Member 'RCCharacterProxyBFL_ApplyEventEmissive::InCharacterName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ApplyEventEmissive, InEventEmissiveValue) == 0x000008, "Member 'RCCharacterProxyBFL_ApplyEventEmissive::InEventEmissiveValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ApplyEventHairSpecular
// 0x0014 (0x0014 - 0x0000)
struct RCCharacterProxyBFL_ApplyEventHairSpecular final
{
public:
	class FName                                   InCharacterName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEventHairSpecularX;                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEventHairSpecularY;                              // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEventHairSpecularZ;                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ApplyEventHairSpecular) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_ApplyEventHairSpecular");
static_assert(sizeof(RCCharacterProxyBFL_ApplyEventHairSpecular) == 0x000014, "Wrong size on RCCharacterProxyBFL_ApplyEventHairSpecular");
static_assert(offsetof(RCCharacterProxyBFL_ApplyEventHairSpecular, InCharacterName) == 0x000000, "Member 'RCCharacterProxyBFL_ApplyEventHairSpecular::InCharacterName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ApplyEventHairSpecular, InEventHairSpecularX) == 0x000008, "Member 'RCCharacterProxyBFL_ApplyEventHairSpecular::InEventHairSpecularX' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ApplyEventHairSpecular, InEventHairSpecularY) == 0x00000C, "Member 'RCCharacterProxyBFL_ApplyEventHairSpecular::InEventHairSpecularY' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ApplyEventHairSpecular, InEventHairSpecularZ) == 0x000010, "Member 'RCCharacterProxyBFL_ApplyEventHairSpecular::InEventHairSpecularZ' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToEye
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToEye final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToEye) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToEye");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToEye) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToEye");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToEye, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToEye::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToEye, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToEye::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToEye, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToEye::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToEye, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToEye::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToHead
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToHead final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToHead) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToHead");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToHead) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToHead");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToHead, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToHead::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToHead, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToHead::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToHead, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToHead::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToHead, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToHead::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToLeftHand
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToLeftHand final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToLeftHand) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToLeftHand");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToLeftHand) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToLeftHand");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToLeftHand, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToLeftHand::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToLeftHand, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToLeftHand::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToLeftHand, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToLeftHand::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToLeftHand, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToLeftHand::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToMouth
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToMouth final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToMouth) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToMouth");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToMouth) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToMouth");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToMouth, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToMouth::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToMouth, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToMouth::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToMouth, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToMouth::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToMouth, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToMouth::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToOverhead
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToOverhead final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToOverhead) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToOverhead");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToOverhead) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToOverhead");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToOverhead, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToOverhead::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToOverhead, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToOverhead::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToOverhead, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToOverhead::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToOverhead, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToOverhead::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToPelvis
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToPelvis final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToPelvis) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToPelvis");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToPelvis) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToPelvis");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToPelvis, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToPelvis::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToPelvis, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToPelvis::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToPelvis, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToPelvis::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToPelvis, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToPelvis::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToRightHand
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToRightHand final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToRightHand) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToRightHand");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToRightHand) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToRightHand");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToRightHand, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToRightHand::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToRightHand, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToRightHand::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToRightHand, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToRightHand::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToRightHand, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToRightHand::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToSpine
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToSpine final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToSpine) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToSpine");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToSpine) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToSpine");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToSpine, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToSpine::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToSpine, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToSpine::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToSpine, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToSpine::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToSpine, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToSpine::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToUlity01
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToUlity01 final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToUlity01) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToUlity01");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToUlity01) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToUlity01");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity01, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToUlity01::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity01, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToUlity01::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity01, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToUlity01::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity01, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToUlity01::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToUlity02
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToUlity02 final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToUlity02) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToUlity02");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToUlity02) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToUlity02");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity02, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToUlity02::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity02, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToUlity02::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity02, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToUlity02::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity02, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToUlity02::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToUlity03
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToUlity03 final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToUlity03) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToUlity03");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToUlity03) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToUlity03");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity03, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToUlity03::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity03, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToUlity03::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity03, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToUlity03::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity03, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToUlity03::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToUlity04
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToUlity04 final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToUlity04) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToUlity04");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToUlity04) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToUlity04");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity04, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToUlity04::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity04, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToUlity04::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity04, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToUlity04::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity04, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToUlity04::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.AttachActorToUlity05
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_AttachActorToUlity05 final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAttachment;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InColorParretId;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_AttachActorToUlity05) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_AttachActorToUlity05");
static_assert(sizeof(RCCharacterProxyBFL_AttachActorToUlity05) == 0x000028, "Wrong size on RCCharacterProxyBFL_AttachActorToUlity05");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity05, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_AttachActorToUlity05::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity05, InAttachment) == 0x000008, "Member 'RCCharacterProxyBFL_AttachActorToUlity05::InAttachment' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity05, InColorParretId) == 0x000010, "Member 'RCCharacterProxyBFL_AttachActorToUlity05::InColorParretId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_AttachActorToUlity05, InOffset) == 0x000018, "Member 'RCCharacterProxyBFL_AttachActorToUlity05::InOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.BackupMovePosition
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_BackupMovePosition final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_BackupMovePosition) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_BackupMovePosition");
static_assert(sizeof(RCCharacterProxyBFL_BackupMovePosition) == 0x000008, "Wrong size on RCCharacterProxyBFL_BackupMovePosition");
static_assert(offsetof(RCCharacterProxyBFL_BackupMovePosition, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_BackupMovePosition::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.BackupMovePositionByCharacterName
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_BackupMovePositionByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_BackupMovePositionByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_BackupMovePositionByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_BackupMovePositionByCharacterName) == 0x000008, "Wrong size on RCCharacterProxyBFL_BackupMovePositionByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_BackupMovePositionByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_BackupMovePositionByCharacterName::InName' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.Blink
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_Blink final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_Blink) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_Blink");
static_assert(sizeof(RCCharacterProxyBFL_Blink) == 0x000008, "Wrong size on RCCharacterProxyBFL_Blink");
static_assert(offsetof(RCCharacterProxyBFL_Blink, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_Blink::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ChangeAttachmentAnimation
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_ChangeAttachmentAnimation final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachPlaceType                              InPlaceType;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAttachAnimType                             InAnimationType;                                   // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_ChangeAttachmentAnimation) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_ChangeAttachmentAnimation");
static_assert(sizeof(RCCharacterProxyBFL_ChangeAttachmentAnimation) == 0x000010, "Wrong size on RCCharacterProxyBFL_ChangeAttachmentAnimation");
static_assert(offsetof(RCCharacterProxyBFL_ChangeAttachmentAnimation, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_ChangeAttachmentAnimation::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeAttachmentAnimation, InPlaceType) == 0x000008, "Member 'RCCharacterProxyBFL_ChangeAttachmentAnimation::InPlaceType' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeAttachmentAnimation, InAnimationType) == 0x000009, "Member 'RCCharacterProxyBFL_ChangeAttachmentAnimation::InAnimationType' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ChangeColorPatternOnEvent
// 0x0014 (0x0014 - 0x0000)
struct RCCharacterProxyBFL_ChangeColorPatternOnEvent final
{
public:
	class FName                                   InCharacterName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventFacialColorName;                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFadeTime;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ChangeColorPatternOnEvent) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_ChangeColorPatternOnEvent");
static_assert(sizeof(RCCharacterProxyBFL_ChangeColorPatternOnEvent) == 0x000014, "Wrong size on RCCharacterProxyBFL_ChangeColorPatternOnEvent");
static_assert(offsetof(RCCharacterProxyBFL_ChangeColorPatternOnEvent, InCharacterName) == 0x000000, "Member 'RCCharacterProxyBFL_ChangeColorPatternOnEvent::InCharacterName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeColorPatternOnEvent, InEventFacialColorName) == 0x000008, "Member 'RCCharacterProxyBFL_ChangeColorPatternOnEvent::InEventFacialColorName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeColorPatternOnEvent, InFadeTime) == 0x000010, "Member 'RCCharacterProxyBFL_ChangeColorPatternOnEvent::InFadeTime' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ChangeColorPatternOnEventForActor
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_ChangeColorPatternOnEventForActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventFacialColorName;                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFadeTime;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_ChangeColorPatternOnEventForActor) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_ChangeColorPatternOnEventForActor");
static_assert(sizeof(RCCharacterProxyBFL_ChangeColorPatternOnEventForActor) == 0x000018, "Wrong size on RCCharacterProxyBFL_ChangeColorPatternOnEventForActor");
static_assert(offsetof(RCCharacterProxyBFL_ChangeColorPatternOnEventForActor, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_ChangeColorPatternOnEventForActor::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeColorPatternOnEventForActor, InEventFacialColorName) == 0x000008, "Member 'RCCharacterProxyBFL_ChangeColorPatternOnEventForActor::InEventFacialColorName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeColorPatternOnEventForActor, InFadeTime) == 0x000010, "Member 'RCCharacterProxyBFL_ChangeColorPatternOnEventForActor::InFadeTime' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ChangeDecalParentSocket
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_ChangeDecalParentSocket final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ChangeDecalParentSocket) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_ChangeDecalParentSocket");
static_assert(sizeof(RCCharacterProxyBFL_ChangeDecalParentSocket) == 0x000010, "Wrong size on RCCharacterProxyBFL_ChangeDecalParentSocket");
static_assert(offsetof(RCCharacterProxyBFL_ChangeDecalParentSocket, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_ChangeDecalParentSocket::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeDecalParentSocket, InSocketName) == 0x000008, "Member 'RCCharacterProxyBFL_ChangeDecalParentSocket::InSocketName' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ChangeFacial
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_ChangeFacial final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFacialName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFlowLiquid;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_ChangeFacial) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_ChangeFacial");
static_assert(sizeof(RCCharacterProxyBFL_ChangeFacial) == 0x000018, "Wrong size on RCCharacterProxyBFL_ChangeFacial");
static_assert(offsetof(RCCharacterProxyBFL_ChangeFacial, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_ChangeFacial::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeFacial, InFacialName) == 0x000008, "Member 'RCCharacterProxyBFL_ChangeFacial::InFacialName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeFacial, bAllowFlowLiquid) == 0x000010, "Member 'RCCharacterProxyBFL_ChangeFacial::bAllowFlowLiquid' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ChangeRimLight
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_ChangeRimLight final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InOutlineColor;                                    // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOutlineCoverageValue;                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOutlineSmoothValue;                              // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRimLightDurationSec;                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_ChangeRimLight) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_ChangeRimLight");
static_assert(sizeof(RCCharacterProxyBFL_ChangeRimLight) == 0x000028, "Wrong size on RCCharacterProxyBFL_ChangeRimLight");
static_assert(offsetof(RCCharacterProxyBFL_ChangeRimLight, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_ChangeRimLight::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeRimLight, InOutlineColor) == 0x000008, "Member 'RCCharacterProxyBFL_ChangeRimLight::InOutlineColor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeRimLight, InOutlineCoverageValue) == 0x000018, "Member 'RCCharacterProxyBFL_ChangeRimLight::InOutlineCoverageValue' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeRimLight, InOutlineSmoothValue) == 0x00001C, "Member 'RCCharacterProxyBFL_ChangeRimLight::InOutlineSmoothValue' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ChangeRimLight, InRimLightDurationSec) == 0x000020, "Member 'RCCharacterProxyBFL_ChangeRimLight::InRimLightDurationSec' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.DetachAttachment
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_DetachAttachment final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachPlaceType                              InPlaceType;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPutPos;                                          // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_DetachAttachment) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_DetachAttachment");
static_assert(sizeof(RCCharacterProxyBFL_DetachAttachment) == 0x000018, "Wrong size on RCCharacterProxyBFL_DetachAttachment");
static_assert(offsetof(RCCharacterProxyBFL_DetachAttachment, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_DetachAttachment::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_DetachAttachment, InPlaceType) == 0x000008, "Member 'RCCharacterProxyBFL_DetachAttachment::InPlaceType' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_DetachAttachment, InPutPos) == 0x00000C, "Member 'RCCharacterProxyBFL_DetachAttachment::InPutPos' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.EventFinishedOutMotion
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_EventFinishedOutMotion final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendSec;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_EventFinishedOutMotion) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_EventFinishedOutMotion");
static_assert(sizeof(RCCharacterProxyBFL_EventFinishedOutMotion) == 0x000010, "Wrong size on RCCharacterProxyBFL_EventFinishedOutMotion");
static_assert(offsetof(RCCharacterProxyBFL_EventFinishedOutMotion, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_EventFinishedOutMotion::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_EventFinishedOutMotion, InBlendSec) == 0x000008, "Member 'RCCharacterProxyBFL_EventFinishedOutMotion::InBlendSec' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ExecuteHoldingHand
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_ExecuteHoldingHand final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InTaegetActor;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ExecuteHoldingHand) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_ExecuteHoldingHand");
static_assert(sizeof(RCCharacterProxyBFL_ExecuteHoldingHand) == 0x000010, "Wrong size on RCCharacterProxyBFL_ExecuteHoldingHand");
static_assert(offsetof(RCCharacterProxyBFL_ExecuteHoldingHand, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_ExecuteHoldingHand::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ExecuteHoldingHand, InTaegetActor) == 0x000008, "Member 'RCCharacterProxyBFL_ExecuteHoldingHand::InTaegetActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.GetActor
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_GetActor final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_GetActor) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_GetActor");
static_assert(sizeof(RCCharacterProxyBFL_GetActor) == 0x000010, "Wrong size on RCCharacterProxyBFL_GetActor");
static_assert(offsetof(RCCharacterProxyBFL_GetActor, InName) == 0x000000, "Member 'RCCharacterProxyBFL_GetActor::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_GetActor, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_GetActor::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.GetActorContainKakiwari
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_GetActorContainKakiwari final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_GetActorContainKakiwari) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_GetActorContainKakiwari");
static_assert(sizeof(RCCharacterProxyBFL_GetActorContainKakiwari) == 0x000010, "Wrong size on RCCharacterProxyBFL_GetActorContainKakiwari");
static_assert(offsetof(RCCharacterProxyBFL_GetActorContainKakiwari, InName) == 0x000000, "Member 'RCCharacterProxyBFL_GetActorContainKakiwari::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_GetActorContainKakiwari, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_GetActorContainKakiwari::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.GetCharacterAttatchmentFormId
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_GetCharacterAttatchmentFormId final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_GetCharacterAttatchmentFormId) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_GetCharacterAttatchmentFormId");
static_assert(sizeof(RCCharacterProxyBFL_GetCharacterAttatchmentFormId) == 0x000010, "Wrong size on RCCharacterProxyBFL_GetCharacterAttatchmentFormId");
static_assert(offsetof(RCCharacterProxyBFL_GetCharacterAttatchmentFormId, InName) == 0x000000, "Member 'RCCharacterProxyBFL_GetCharacterAttatchmentFormId::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_GetCharacterAttatchmentFormId, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_GetCharacterAttatchmentFormId::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.GetFacial2DMotionNameList
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_GetFacial2DMotionNameList final
{
public:
	class FName                                   InFacial2DId;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutMotionNameList;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_GetFacial2DMotionNameList) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_GetFacial2DMotionNameList");
static_assert(sizeof(RCCharacterProxyBFL_GetFacial2DMotionNameList) == 0x000020, "Wrong size on RCCharacterProxyBFL_GetFacial2DMotionNameList");
static_assert(offsetof(RCCharacterProxyBFL_GetFacial2DMotionNameList, InFacial2DId) == 0x000000, "Member 'RCCharacterProxyBFL_GetFacial2DMotionNameList::InFacial2DId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_GetFacial2DMotionNameList, OutMotionNameList) == 0x000008, "Member 'RCCharacterProxyBFL_GetFacial2DMotionNameList::OutMotionNameList' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_GetFacial2DMotionNameList, ReturnValue) == 0x000018, "Member 'RCCharacterProxyBFL_GetFacial2DMotionNameList::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.GetFinishChangeRimLight
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_GetFinishChangeRimLight final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_GetFinishChangeRimLight) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_GetFinishChangeRimLight");
static_assert(sizeof(RCCharacterProxyBFL_GetFinishChangeRimLight) == 0x000010, "Wrong size on RCCharacterProxyBFL_GetFinishChangeRimLight");
static_assert(offsetof(RCCharacterProxyBFL_GetFinishChangeRimLight, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_GetFinishChangeRimLight::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_GetFinishChangeRimLight, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_GetFinishChangeRimLight::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.GetShinigamiActor
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_GetShinigamiActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_GetShinigamiActor) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_GetShinigamiActor");
static_assert(sizeof(RCCharacterProxyBFL_GetShinigamiActor) == 0x000008, "Wrong size on RCCharacterProxyBFL_GetShinigamiActor");
static_assert(offsetof(RCCharacterProxyBFL_GetShinigamiActor, ReturnValue) == 0x000000, "Member 'RCCharacterProxyBFL_GetShinigamiActor::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.InitShinigamiPosition
// 0x000C (0x000C - 0x0000)
struct RCCharacterProxyBFL_InitShinigamiPosition final
{
public:
	float                                         InLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_InitShinigamiPosition) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_InitShinigamiPosition");
static_assert(sizeof(RCCharacterProxyBFL_InitShinigamiPosition) == 0x00000C, "Wrong size on RCCharacterProxyBFL_InitShinigamiPosition");
static_assert(offsetof(RCCharacterProxyBFL_InitShinigamiPosition, InLength) == 0x000000, "Member 'RCCharacterProxyBFL_InitShinigamiPosition::InLength' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_InitShinigamiPosition, InHeight) == 0x000004, "Member 'RCCharacterProxyBFL_InitShinigamiPosition::InHeight' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_InitShinigamiPosition, InAngle) == 0x000008, "Member 'RCCharacterProxyBFL_InitShinigamiPosition::InAngle' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.IsAllLoadComplete
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterProxyBFL_IsAllLoadComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_IsAllLoadComplete) == 0x000001, "Wrong alignment on RCCharacterProxyBFL_IsAllLoadComplete");
static_assert(sizeof(RCCharacterProxyBFL_IsAllLoadComplete) == 0x000001, "Wrong size on RCCharacterProxyBFL_IsAllLoadComplete");
static_assert(offsetof(RCCharacterProxyBFL_IsAllLoadComplete, ReturnValue) == 0x000000, "Member 'RCCharacterProxyBFL_IsAllLoadComplete::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.IsAllMoveEnd
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterProxyBFL_IsAllMoveEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_IsAllMoveEnd) == 0x000001, "Wrong alignment on RCCharacterProxyBFL_IsAllMoveEnd");
static_assert(sizeof(RCCharacterProxyBFL_IsAllMoveEnd) == 0x000001, "Wrong size on RCCharacterProxyBFL_IsAllMoveEnd");
static_assert(offsetof(RCCharacterProxyBFL_IsAllMoveEnd, ReturnValue) == 0x000000, "Member 'RCCharacterProxyBFL_IsAllMoveEnd::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.IsExistOutCurrentMotion
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_IsExistOutCurrentMotion final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_IsExistOutCurrentMotion) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_IsExistOutCurrentMotion");
static_assert(sizeof(RCCharacterProxyBFL_IsExistOutCurrentMotion) == 0x000010, "Wrong size on RCCharacterProxyBFL_IsExistOutCurrentMotion");
static_assert(offsetof(RCCharacterProxyBFL_IsExistOutCurrentMotion, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_IsExistOutCurrentMotion::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_IsExistOutCurrentMotion, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_IsExistOutCurrentMotion::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.IsFinishedMotion
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_IsFinishedMotion final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_IsFinishedMotion) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_IsFinishedMotion");
static_assert(sizeof(RCCharacterProxyBFL_IsFinishedMotion) == 0x000010, "Wrong size on RCCharacterProxyBFL_IsFinishedMotion");
static_assert(offsetof(RCCharacterProxyBFL_IsFinishedMotion, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_IsFinishedMotion::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_IsFinishedMotion, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_IsFinishedMotion::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.IsLoadActorComplete
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_IsLoadActorComplete final
{
public:
	TArray<class FName>                           InCheckCharacterNameArray;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_IsLoadActorComplete) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_IsLoadActorComplete");
static_assert(sizeof(RCCharacterProxyBFL_IsLoadActorComplete) == 0x000018, "Wrong size on RCCharacterProxyBFL_IsLoadActorComplete");
static_assert(offsetof(RCCharacterProxyBFL_IsLoadActorComplete, InCheckCharacterNameArray) == 0x000000, "Member 'RCCharacterProxyBFL_IsLoadActorComplete::InCheckCharacterNameArray' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_IsLoadActorComplete, ReturnValue) == 0x000010, "Member 'RCCharacterProxyBFL_IsLoadActorComplete::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.IsLoadComplete
// 0x000C (0x000C - 0x0000)
struct RCCharacterProxyBFL_IsLoadComplete final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_IsLoadComplete) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_IsLoadComplete");
static_assert(sizeof(RCCharacterProxyBFL_IsLoadComplete) == 0x00000C, "Wrong size on RCCharacterProxyBFL_IsLoadComplete");
static_assert(offsetof(RCCharacterProxyBFL_IsLoadComplete, InName) == 0x000000, "Member 'RCCharacterProxyBFL_IsLoadComplete::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_IsLoadComplete, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_IsLoadComplete::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.IsMotionBlend
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_IsMotionBlend final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_IsMotionBlend) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_IsMotionBlend");
static_assert(sizeof(RCCharacterProxyBFL_IsMotionBlend) == 0x000010, "Wrong size on RCCharacterProxyBFL_IsMotionBlend");
static_assert(offsetof(RCCharacterProxyBFL_IsMotionBlend, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_IsMotionBlend::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_IsMotionBlend, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_IsMotionBlend::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.IsMoveEnd
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_IsMoveEnd final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_IsMoveEnd) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_IsMoveEnd");
static_assert(sizeof(RCCharacterProxyBFL_IsMoveEnd) == 0x000010, "Wrong size on RCCharacterProxyBFL_IsMoveEnd");
static_assert(offsetof(RCCharacterProxyBFL_IsMoveEnd, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_IsMoveEnd::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_IsMoveEnd, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_IsMoveEnd::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.IsMoveMobDraw
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterProxyBFL_IsMoveMobDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_IsMoveMobDraw) == 0x000001, "Wrong alignment on RCCharacterProxyBFL_IsMoveMobDraw");
static_assert(sizeof(RCCharacterProxyBFL_IsMoveMobDraw) == 0x000001, "Wrong size on RCCharacterProxyBFL_IsMoveMobDraw");
static_assert(offsetof(RCCharacterProxyBFL_IsMoveMobDraw, ReturnValue) == 0x000000, "Member 'RCCharacterProxyBFL_IsMoveMobDraw::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.PlayLipsyncBasedOnLines
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_PlayLipsyncBasedOnLines final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLineCharacters;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLineDisplaySec;                                  // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLineIntervalAjust;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_PlayLipsyncBasedOnLines) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_PlayLipsyncBasedOnLines");
static_assert(sizeof(RCCharacterProxyBFL_PlayLipsyncBasedOnLines) == 0x000018, "Wrong size on RCCharacterProxyBFL_PlayLipsyncBasedOnLines");
static_assert(offsetof(RCCharacterProxyBFL_PlayLipsyncBasedOnLines, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_PlayLipsyncBasedOnLines::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_PlayLipsyncBasedOnLines, InLineCharacters) == 0x000008, "Member 'RCCharacterProxyBFL_PlayLipsyncBasedOnLines::InLineCharacters' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_PlayLipsyncBasedOnLines, InLineDisplaySec) == 0x00000C, "Member 'RCCharacterProxyBFL_PlayLipsyncBasedOnLines::InLineDisplaySec' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_PlayLipsyncBasedOnLines, InLineIntervalAjust) == 0x000010, "Member 'RCCharacterProxyBFL_PlayLipsyncBasedOnLines::InLineIntervalAjust' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.PlayLipsyncMotion
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_PlayLipsyncMotion final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_PlayLipsyncMotion) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_PlayLipsyncMotion");
static_assert(sizeof(RCCharacterProxyBFL_PlayLipsyncMotion) == 0x000018, "Wrong size on RCCharacterProxyBFL_PlayLipsyncMotion");
static_assert(offsetof(RCCharacterProxyBFL_PlayLipsyncMotion, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_PlayLipsyncMotion::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_PlayLipsyncMotion, InMotionName) == 0x000008, "Member 'RCCharacterProxyBFL_PlayLipsyncMotion::InMotionName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_PlayLipsyncMotion, bLoop) == 0x000010, "Member 'RCCharacterProxyBFL_PlayLipsyncMotion::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_PlayLipsyncMotion, InPlayRate) == 0x000014, "Member 'RCCharacterProxyBFL_PlayLipsyncMotion::InPlayRate' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.Release
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_Release final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_Release) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_Release");
static_assert(sizeof(RCCharacterProxyBFL_Release) == 0x000008, "Wrong size on RCCharacterProxyBFL_Release");
static_assert(offsetof(RCCharacterProxyBFL_Release, InName) == 0x000000, "Member 'RCCharacterProxyBFL_Release::InName' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ReserveAppearance
// 0x0030 (0x0030 - 0x0000)
struct RCCharacterProxyBFL_ReserveAppearance final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBodyColorPaletteId;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFaceColorPaletteId;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSoliderNumberId;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEyeId;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSkinId;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ReserveAppearance) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_ReserveAppearance");
static_assert(sizeof(RCCharacterProxyBFL_ReserveAppearance) == 0x000030, "Wrong size on RCCharacterProxyBFL_ReserveAppearance");
static_assert(offsetof(RCCharacterProxyBFL_ReserveAppearance, InName) == 0x000000, "Member 'RCCharacterProxyBFL_ReserveAppearance::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ReserveAppearance, InBodyColorPaletteId) == 0x000008, "Member 'RCCharacterProxyBFL_ReserveAppearance::InBodyColorPaletteId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ReserveAppearance, InFaceColorPaletteId) == 0x000010, "Member 'RCCharacterProxyBFL_ReserveAppearance::InFaceColorPaletteId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ReserveAppearance, InSoliderNumberId) == 0x000018, "Member 'RCCharacterProxyBFL_ReserveAppearance::InSoliderNumberId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ReserveAppearance, InEyeId) == 0x000020, "Member 'RCCharacterProxyBFL_ReserveAppearance::InEyeId' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ReserveAppearance, InSkinId) == 0x000028, "Member 'RCCharacterProxyBFL_ReserveAppearance::InSkinId' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ReservePlayMotion
// 0x0014 (0x0014 - 0x0000)
struct RCCharacterProxyBFL_ReservePlayMotion final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartLoopMotion;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_ReservePlayMotion) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_ReservePlayMotion");
static_assert(sizeof(RCCharacterProxyBFL_ReservePlayMotion) == 0x000014, "Wrong size on RCCharacterProxyBFL_ReservePlayMotion");
static_assert(offsetof(RCCharacterProxyBFL_ReservePlayMotion, InName) == 0x000000, "Member 'RCCharacterProxyBFL_ReservePlayMotion::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ReservePlayMotion, InMotionName) == 0x000008, "Member 'RCCharacterProxyBFL_ReservePlayMotion::InMotionName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_ReservePlayMotion, bStartLoopMotion) == 0x000010, "Member 'RCCharacterProxyBFL_ReservePlayMotion::bStartLoopMotion' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ResetEventMotion
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_ResetEventMotion final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ResetEventMotion) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_ResetEventMotion");
static_assert(sizeof(RCCharacterProxyBFL_ResetEventMotion) == 0x000008, "Wrong size on RCCharacterProxyBFL_ResetEventMotion");
static_assert(offsetof(RCCharacterProxyBFL_ResetEventMotion, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_ResetEventMotion::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ResetMove
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_ResetMove final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ResetMove) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_ResetMove");
static_assert(sizeof(RCCharacterProxyBFL_ResetMove) == 0x000008, "Wrong size on RCCharacterProxyBFL_ResetMove");
static_assert(offsetof(RCCharacterProxyBFL_ResetMove, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_ResetMove::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.ResetMoveByCharacterName
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_ResetMoveByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_ResetMoveByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_ResetMoveByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_ResetMoveByCharacterName) == 0x000008, "Wrong size on RCCharacterProxyBFL_ResetMoveByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_ResetMoveByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_ResetMoveByCharacterName::InName' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.RestoreMoveList
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_RestoreMoveList final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_RestoreMoveList) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_RestoreMoveList");
static_assert(sizeof(RCCharacterProxyBFL_RestoreMoveList) == 0x000008, "Wrong size on RCCharacterProxyBFL_RestoreMoveList");
static_assert(offsetof(RCCharacterProxyBFL_RestoreMoveList, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_RestoreMoveList::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.RestoreMoveListByCharacterName
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_RestoreMoveListByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_RestoreMoveListByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_RestoreMoveListByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_RestoreMoveListByCharacterName) == 0x000008, "Wrong size on RCCharacterProxyBFL_RestoreMoveListByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_RestoreMoveListByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_RestoreMoveListByCharacterName::InName' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.RestoreMovePosition
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_RestoreMovePosition final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_RestoreMovePosition) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_RestoreMovePosition");
static_assert(sizeof(RCCharacterProxyBFL_RestoreMovePosition) == 0x000010, "Wrong size on RCCharacterProxyBFL_RestoreMovePosition");
static_assert(offsetof(RCCharacterProxyBFL_RestoreMovePosition, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_RestoreMovePosition::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_RestoreMovePosition, SpeedScale) == 0x000008, "Member 'RCCharacterProxyBFL_RestoreMovePosition::SpeedScale' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.RestoreMovePositionByCharacterName
// 0x000C (0x000C - 0x0000)
struct RCCharacterProxyBFL_RestoreMovePositionByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_RestoreMovePositionByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_RestoreMovePositionByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_RestoreMovePositionByCharacterName) == 0x00000C, "Wrong size on RCCharacterProxyBFL_RestoreMovePositionByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_RestoreMovePositionByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_RestoreMovePositionByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_RestoreMovePositionByCharacterName, SpeedScale) == 0x000008, "Member 'RCCharacterProxyBFL_RestoreMovePositionByCharacterName::SpeedScale' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.RestoreRotationYaw
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_RestoreRotationYaw final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_RestoreRotationYaw) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_RestoreRotationYaw");
static_assert(sizeof(RCCharacterProxyBFL_RestoreRotationYaw) == 0x000010, "Wrong size on RCCharacterProxyBFL_RestoreRotationYaw");
static_assert(offsetof(RCCharacterProxyBFL_RestoreRotationYaw, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_RestoreRotationYaw::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_RestoreRotationYaw, SpeedScale) == 0x000008, "Member 'RCCharacterProxyBFL_RestoreRotationYaw::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_RestoreRotationYaw, bDirect) == 0x00000C, "Member 'RCCharacterProxyBFL_RestoreRotationYaw::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.RestoreRotationYawByCharacterName
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_RestoreRotationYawByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_RestoreRotationYawByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_RestoreRotationYawByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_RestoreRotationYawByCharacterName) == 0x000010, "Wrong size on RCCharacterProxyBFL_RestoreRotationYawByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_RestoreRotationYawByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_RestoreRotationYawByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_RestoreRotationYawByCharacterName, SpeedScale) == 0x000008, "Member 'RCCharacterProxyBFL_RestoreRotationYawByCharacterName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_RestoreRotationYawByCharacterName, bDirect) == 0x00000C, "Member 'RCCharacterProxyBFL_RestoreRotationYawByCharacterName::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetAllNoDelayLookProcessFlag
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterProxyBFL_SetAllNoDelayLookProcessFlag final
{
public:
	bool                                          bState;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetAllNoDelayLookProcessFlag) == 0x000001, "Wrong alignment on RCCharacterProxyBFL_SetAllNoDelayLookProcessFlag");
static_assert(sizeof(RCCharacterProxyBFL_SetAllNoDelayLookProcessFlag) == 0x000001, "Wrong size on RCCharacterProxyBFL_SetAllNoDelayLookProcessFlag");
static_assert(offsetof(RCCharacterProxyBFL_SetAllNoDelayLookProcessFlag, bState) == 0x000000, "Member 'RCCharacterProxyBFL_SetAllNoDelayLookProcessFlag::bState' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetAllPause
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterProxyBFL_SetAllPause final
{
public:
	bool                                          bPauseFlag;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetAllPause) == 0x000001, "Wrong alignment on RCCharacterProxyBFL_SetAllPause");
static_assert(sizeof(RCCharacterProxyBFL_SetAllPause) == 0x000001, "Wrong size on RCCharacterProxyBFL_SetAllPause");
static_assert(offsetof(RCCharacterProxyBFL_SetAllPause, bPauseFlag) == 0x000000, "Member 'RCCharacterProxyBFL_SetAllPause::bPauseFlag' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetAllVisibility
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterProxyBFL_SetAllVisibility final
{
public:
	bool                                          bVisibleFlag;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetAllVisibility) == 0x000001, "Wrong alignment on RCCharacterProxyBFL_SetAllVisibility");
static_assert(sizeof(RCCharacterProxyBFL_SetAllVisibility) == 0x000001, "Wrong size on RCCharacterProxyBFL_SetAllVisibility");
static_assert(offsetof(RCCharacterProxyBFL_SetAllVisibility, bVisibleFlag) == 0x000000, "Member 'RCCharacterProxyBFL_SetAllVisibility::bVisibleFlag' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetAutoOutlineWidth
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetAutoOutlineWidth final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAuto;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetAutoOutlineWidth) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetAutoOutlineWidth");
static_assert(sizeof(RCCharacterProxyBFL_SetAutoOutlineWidth) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetAutoOutlineWidth");
static_assert(offsetof(RCCharacterProxyBFL_SetAutoOutlineWidth, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetAutoOutlineWidth::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetAutoOutlineWidth, bAuto) == 0x000008, "Member 'RCCharacterProxyBFL_SetAutoOutlineWidth::bAuto' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetCameraAlphaLengh
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_SetCameraAlphaLengh final
{
public:
	int32                                         InLengthMin;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLengthMax;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetCameraAlphaLengh) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_SetCameraAlphaLengh");
static_assert(sizeof(RCCharacterProxyBFL_SetCameraAlphaLengh) == 0x000008, "Wrong size on RCCharacterProxyBFL_SetCameraAlphaLengh");
static_assert(offsetof(RCCharacterProxyBFL_SetCameraAlphaLengh, InLengthMin) == 0x000000, "Member 'RCCharacterProxyBFL_SetCameraAlphaLengh::InLengthMin' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetCameraAlphaLengh, InLengthMax) == 0x000004, "Member 'RCCharacterProxyBFL_SetCameraAlphaLengh::InLengthMax' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetCameraFadeEnable
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetCameraFadeEnable final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlag;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetCameraFadeEnable) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetCameraFadeEnable");
static_assert(sizeof(RCCharacterProxyBFL_SetCameraFadeEnable) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetCameraFadeEnable");
static_assert(offsetof(RCCharacterProxyBFL_SetCameraFadeEnable, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetCameraFadeEnable::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetCameraFadeEnable, bFlag) == 0x000008, "Member 'RCCharacterProxyBFL_SetCameraFadeEnable::bFlag' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetCanBlink
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetCanBlink final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetCanBlink) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetCanBlink");
static_assert(sizeof(RCCharacterProxyBFL_SetCanBlink) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetCanBlink");
static_assert(offsetof(RCCharacterProxyBFL_SetCanBlink, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetCanBlink::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetCanBlink, bState) == 0x000008, "Member 'RCCharacterProxyBFL_SetCanBlink::bState' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetCenterActorType
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterProxyBFL_SetCenterActorType final
{
public:
	ERCCharacterProxyCenterActorType              InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetCenterActorType) == 0x000001, "Wrong alignment on RCCharacterProxyBFL_SetCenterActorType");
static_assert(sizeof(RCCharacterProxyBFL_SetCenterActorType) == 0x000001, "Wrong size on RCCharacterProxyBFL_SetCenterActorType");
static_assert(offsetof(RCCharacterProxyBFL_SetCenterActorType, InType) == 0x000000, "Member 'RCCharacterProxyBFL_SetCenterActorType::InType' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetCharacterAttatchmentFormId
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetCharacterAttatchmentFormId final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCharacterAttatchmentFormId;                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetCharacterAttatchmentFormId) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_SetCharacterAttatchmentFormId");
static_assert(sizeof(RCCharacterProxyBFL_SetCharacterAttatchmentFormId) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetCharacterAttatchmentFormId");
static_assert(offsetof(RCCharacterProxyBFL_SetCharacterAttatchmentFormId, InName) == 0x000000, "Member 'RCCharacterProxyBFL_SetCharacterAttatchmentFormId::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetCharacterAttatchmentFormId, InCharacterAttatchmentFormId) == 0x000008, "Member 'RCCharacterProxyBFL_SetCharacterAttatchmentFormId::InCharacterAttatchmentFormId' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetDefaultLookSetting
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_SetDefaultLookSetting final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetDefaultLookSetting) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetDefaultLookSetting");
static_assert(sizeof(RCCharacterProxyBFL_SetDefaultLookSetting) == 0x000008, "Wrong size on RCCharacterProxyBFL_SetDefaultLookSetting");
static_assert(offsetof(RCCharacterProxyBFL_SetDefaultLookSetting, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetDefaultLookSetting::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetExtraIdle
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetExtraIdle final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetExtraIdle) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetExtraIdle");
static_assert(sizeof(RCCharacterProxyBFL_SetExtraIdle) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetExtraIdle");
static_assert(offsetof(RCCharacterProxyBFL_SetExtraIdle, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetExtraIdle::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetExtraIdle, bState) == 0x000008, "Member 'RCCharacterProxyBFL_SetExtraIdle::bState' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetLookAtActor
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_SetLookAtActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InLookAtTargetActor;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLookAtTargetBoneName;                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetLookAtActor) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetLookAtActor");
static_assert(sizeof(RCCharacterProxyBFL_SetLookAtActor) == 0x000018, "Wrong size on RCCharacterProxyBFL_SetLookAtActor");
static_assert(offsetof(RCCharacterProxyBFL_SetLookAtActor, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetLookAtActor::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetLookAtActor, InLookAtTargetActor) == 0x000008, "Member 'RCCharacterProxyBFL_SetLookAtActor::InLookAtTargetActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetLookAtActor, InLookAtTargetBoneName) == 0x000010, "Member 'RCCharacterProxyBFL_SetLookAtActor::InLookAtTargetBoneName' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetLookAtCharacterFace
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetLookAtCharacterFace final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InLookAtTargetActor;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetLookAtCharacterFace) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetLookAtCharacterFace");
static_assert(sizeof(RCCharacterProxyBFL_SetLookAtCharacterFace) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetLookAtCharacterFace");
static_assert(offsetof(RCCharacterProxyBFL_SetLookAtCharacterFace, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetLookAtCharacterFace::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetLookAtCharacterFace, InLookAtTargetActor) == 0x000008, "Member 'RCCharacterProxyBFL_SetLookAtCharacterFace::InLookAtTargetActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetLookAtPosition
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_SetLookAtPosition final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLookAtTargetPos;                                 // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetLookAtPosition) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetLookAtPosition");
static_assert(sizeof(RCCharacterProxyBFL_SetLookAtPosition) == 0x000018, "Wrong size on RCCharacterProxyBFL_SetLookAtPosition");
static_assert(offsetof(RCCharacterProxyBFL_SetLookAtPosition, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetLookAtPosition::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetLookAtPosition, InLookAtTargetPos) == 0x000008, "Member 'RCCharacterProxyBFL_SetLookAtPosition::InLookAtTargetPos' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetMoveMobDraw
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterProxyBFL_SetMoveMobDraw final
{
public:
	bool                                          bInDraw;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetMoveMobDraw) == 0x000001, "Wrong alignment on RCCharacterProxyBFL_SetMoveMobDraw");
static_assert(sizeof(RCCharacterProxyBFL_SetMoveMobDraw) == 0x000001, "Wrong size on RCCharacterProxyBFL_SetMoveMobDraw");
static_assert(offsetof(RCCharacterProxyBFL_SetMoveMobDraw, bInDraw) == 0x000000, "Member 'RCCharacterProxyBFL_SetMoveMobDraw::bInDraw' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetMovePause
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetMovePause final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMovePause;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetMovePause) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetMovePause");
static_assert(sizeof(RCCharacterProxyBFL_SetMovePause) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetMovePause");
static_assert(offsetof(RCCharacterProxyBFL_SetMovePause, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetMovePause::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetMovePause, bInMovePause) == 0x000008, "Member 'RCCharacterProxyBFL_SetMovePause::bInMovePause' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetMovNearPlayerHide
// 0x0001 (0x0001 - 0x0000)
struct RCCharacterProxyBFL_SetMovNearPlayerHide final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetMovNearPlayerHide) == 0x000001, "Wrong alignment on RCCharacterProxyBFL_SetMovNearPlayerHide");
static_assert(sizeof(RCCharacterProxyBFL_SetMovNearPlayerHide) == 0x000001, "Wrong size on RCCharacterProxyBFL_SetMovNearPlayerHide");
static_assert(offsetof(RCCharacterProxyBFL_SetMovNearPlayerHide, bInFlag) == 0x000000, "Member 'RCCharacterProxyBFL_SetMovNearPlayerHide::bInFlag' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetNewAnimBP
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetNewAnimBP final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InNewAnimClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetNewAnimBP) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetNewAnimBP");
static_assert(sizeof(RCCharacterProxyBFL_SetNewAnimBP) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetNewAnimBP");
static_assert(offsetof(RCCharacterProxyBFL_SetNewAnimBP, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetNewAnimBP::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetNewAnimBP, InNewAnimClass) == 0x000008, "Member 'RCCharacterProxyBFL_SetNewAnimBP::InNewAnimClass' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetNoDelayLookProcessFlag
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetNoDelayLookProcessFlag final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetNoDelayLookProcessFlag) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetNoDelayLookProcessFlag");
static_assert(sizeof(RCCharacterProxyBFL_SetNoDelayLookProcessFlag) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetNoDelayLookProcessFlag");
static_assert(offsetof(RCCharacterProxyBFL_SetNoDelayLookProcessFlag, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetNoDelayLookProcessFlag::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetNoDelayLookProcessFlag, bState) == 0x000008, "Member 'RCCharacterProxyBFL_SetNoDelayLookProcessFlag::bState' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetOrientRotationtoMovementFlag
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetOrientRotationtoMovementFlag final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlag;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetOrientRotationtoMovementFlag) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetOrientRotationtoMovementFlag");
static_assert(sizeof(RCCharacterProxyBFL_SetOrientRotationtoMovementFlag) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetOrientRotationtoMovementFlag");
static_assert(offsetof(RCCharacterProxyBFL_SetOrientRotationtoMovementFlag, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetOrientRotationtoMovementFlag::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetOrientRotationtoMovementFlag, bFlag) == 0x000008, "Member 'RCCharacterProxyBFL_SetOrientRotationtoMovementFlag::bFlag' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetOutlineWidth
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetOutlineWidth final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWidth;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetOutlineWidth) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetOutlineWidth");
static_assert(sizeof(RCCharacterProxyBFL_SetOutlineWidth) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetOutlineWidth");
static_assert(offsetof(RCCharacterProxyBFL_SetOutlineWidth, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetOutlineWidth::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetOutlineWidth, InWidth) == 0x000008, "Member 'RCCharacterProxyBFL_SetOutlineWidth::InWidth' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetPause
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetPause final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseFlag;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetPause) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetPause");
static_assert(sizeof(RCCharacterProxyBFL_SetPause) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetPause");
static_assert(offsetof(RCCharacterProxyBFL_SetPause, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetPause::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetPause, bPauseFlag) == 0x000008, "Member 'RCCharacterProxyBFL_SetPause::bPauseFlag' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetPauseByCharacterName
// 0x000C (0x000C - 0x0000)
struct RCCharacterProxyBFL_SetPauseByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseFlag;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetPauseByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_SetPauseByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_SetPauseByCharacterName) == 0x00000C, "Wrong size on RCCharacterProxyBFL_SetPauseByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_SetPauseByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_SetPauseByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetPauseByCharacterName, bPauseFlag) == 0x000008, "Member 'RCCharacterProxyBFL_SetPauseByCharacterName::bPauseFlag' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetPositionYaw
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_SetPositionYaw final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetPositionYaw) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetPositionYaw");
static_assert(sizeof(RCCharacterProxyBFL_SetPositionYaw) == 0x000018, "Wrong size on RCCharacterProxyBFL_SetPositionYaw");
static_assert(offsetof(RCCharacterProxyBFL_SetPositionYaw, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetPositionYaw::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetPositionYaw, InPosition) == 0x000008, "Member 'RCCharacterProxyBFL_SetPositionYaw::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetPositionYaw, InYaw) == 0x000014, "Member 'RCCharacterProxyBFL_SetPositionYaw::InYaw' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetPositionYawByCharacterName
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_SetPositionYawByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetPositionYawByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_SetPositionYawByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_SetPositionYawByCharacterName) == 0x000018, "Wrong size on RCCharacterProxyBFL_SetPositionYawByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_SetPositionYawByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_SetPositionYawByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetPositionYawByCharacterName, InPosition) == 0x000008, "Member 'RCCharacterProxyBFL_SetPositionYawByCharacterName::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetPositionYawByCharacterName, InYaw) == 0x000014, "Member 'RCCharacterProxyBFL_SetPositionYawByCharacterName::InYaw' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetSpecialSelectLookSetting
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_SetSpecialSelectLookSetting final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEyeMoveSpeed;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEyeTranslateNearMax;                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEyeTranslateFarMax;                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEyeTranslateUpMax;                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEyeTranslateDownMax;                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetSpecialSelectLookSetting) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetSpecialSelectLookSetting");
static_assert(sizeof(RCCharacterProxyBFL_SetSpecialSelectLookSetting) == 0x000020, "Wrong size on RCCharacterProxyBFL_SetSpecialSelectLookSetting");
static_assert(offsetof(RCCharacterProxyBFL_SetSpecialSelectLookSetting, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetSpecialSelectLookSetting::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetSpecialSelectLookSetting, InEyeMoveSpeed) == 0x000008, "Member 'RCCharacterProxyBFL_SetSpecialSelectLookSetting::InEyeMoveSpeed' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetSpecialSelectLookSetting, InEyeTranslateNearMax) == 0x00000C, "Member 'RCCharacterProxyBFL_SetSpecialSelectLookSetting::InEyeTranslateNearMax' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetSpecialSelectLookSetting, InEyeTranslateFarMax) == 0x000010, "Member 'RCCharacterProxyBFL_SetSpecialSelectLookSetting::InEyeTranslateFarMax' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetSpecialSelectLookSetting, InEyeTranslateUpMax) == 0x000014, "Member 'RCCharacterProxyBFL_SetSpecialSelectLookSetting::InEyeTranslateUpMax' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetSpecialSelectLookSetting, InEyeTranslateDownMax) == 0x000018, "Member 'RCCharacterProxyBFL_SetSpecialSelectLookSetting::InEyeTranslateDownMax' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetTalkInfo
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_SetTalkInfo final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInTalk;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InBalloonFrameType;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InBalloonType;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSelifTextId;                                     // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetTalkInfo) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetTalkInfo");
static_assert(sizeof(RCCharacterProxyBFL_SetTalkInfo) == 0x000020, "Wrong size on RCCharacterProxyBFL_SetTalkInfo");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfo, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetTalkInfo::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfo, bInTalk) == 0x000008, "Member 'RCCharacterProxyBFL_SetTalkInfo::bInTalk' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfo, InBalloonFrameType) == 0x00000C, "Member 'RCCharacterProxyBFL_SetTalkInfo::InBalloonFrameType' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfo, InBalloonType) == 0x000010, "Member 'RCCharacterProxyBFL_SetTalkInfo::InBalloonType' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfo, InSelifTextId) == 0x000014, "Member 'RCCharacterProxyBFL_SetTalkInfo::InSelifTextId' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetTalkInfoByCharacterName
// 0x001C (0x001C - 0x0000)
struct RCCharacterProxyBFL_SetTalkInfoByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInTalk;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InBalloonFrameType;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InBalloonType;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSelifTextId;                                     // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetTalkInfoByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_SetTalkInfoByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_SetTalkInfoByCharacterName) == 0x00001C, "Wrong size on RCCharacterProxyBFL_SetTalkInfoByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfoByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_SetTalkInfoByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfoByCharacterName, bInTalk) == 0x000008, "Member 'RCCharacterProxyBFL_SetTalkInfoByCharacterName::bInTalk' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfoByCharacterName, InBalloonFrameType) == 0x00000C, "Member 'RCCharacterProxyBFL_SetTalkInfoByCharacterName::InBalloonFrameType' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfoByCharacterName, InBalloonType) == 0x000010, "Member 'RCCharacterProxyBFL_SetTalkInfoByCharacterName::InBalloonType' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkInfoByCharacterName, InSelifTextId) == 0x000014, "Member 'RCCharacterProxyBFL_SetTalkInfoByCharacterName::InSelifTextId' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetTalkSetting
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_SetTalkSetting final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTalkLength;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSelifLength;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBalloonLength;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBalloonHeightOffset;                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBalloonAngleOffset;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBalloonLengthOffset;                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetTalkSetting) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetTalkSetting");
static_assert(sizeof(RCCharacterProxyBFL_SetTalkSetting) == 0x000020, "Wrong size on RCCharacterProxyBFL_SetTalkSetting");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSetting, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetTalkSetting::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSetting, InTalkLength) == 0x000008, "Member 'RCCharacterProxyBFL_SetTalkSetting::InTalkLength' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSetting, InSelifLength) == 0x00000C, "Member 'RCCharacterProxyBFL_SetTalkSetting::InSelifLength' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSetting, InBalloonLength) == 0x000010, "Member 'RCCharacterProxyBFL_SetTalkSetting::InBalloonLength' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSetting, InBalloonHeightOffset) == 0x000014, "Member 'RCCharacterProxyBFL_SetTalkSetting::InBalloonHeightOffset' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSetting, InBalloonAngleOffset) == 0x000018, "Member 'RCCharacterProxyBFL_SetTalkSetting::InBalloonAngleOffset' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSetting, InBalloonLengthOffset) == 0x00001C, "Member 'RCCharacterProxyBFL_SetTalkSetting::InBalloonLengthOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetTalkSettingByCharacterName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_SetTalkSettingByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTalkLength;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSelifLength;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBalloonLength;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBalloonHeightOffset;                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBalloonAngleOffset;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBalloonLengthOffset;                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetTalkSettingByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_SetTalkSettingByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_SetTalkSettingByCharacterName) == 0x000020, "Wrong size on RCCharacterProxyBFL_SetTalkSettingByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSettingByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_SetTalkSettingByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSettingByCharacterName, InTalkLength) == 0x000008, "Member 'RCCharacterProxyBFL_SetTalkSettingByCharacterName::InTalkLength' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSettingByCharacterName, InSelifLength) == 0x00000C, "Member 'RCCharacterProxyBFL_SetTalkSettingByCharacterName::InSelifLength' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSettingByCharacterName, InBalloonLength) == 0x000010, "Member 'RCCharacterProxyBFL_SetTalkSettingByCharacterName::InBalloonLength' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSettingByCharacterName, InBalloonHeightOffset) == 0x000014, "Member 'RCCharacterProxyBFL_SetTalkSettingByCharacterName::InBalloonHeightOffset' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSettingByCharacterName, InBalloonAngleOffset) == 0x000018, "Member 'RCCharacterProxyBFL_SetTalkSettingByCharacterName::InBalloonAngleOffset' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTalkSettingByCharacterName, InBalloonLengthOffset) == 0x00001C, "Member 'RCCharacterProxyBFL_SetTalkSettingByCharacterName::InBalloonLengthOffset' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetTransformPlayerStartName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_SetTransformPlayerStartName final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPlayerStartTagName;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetTransformPlayerStartName) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetTransformPlayerStartName");
static_assert(sizeof(RCCharacterProxyBFL_SetTransformPlayerStartName) == 0x000020, "Wrong size on RCCharacterProxyBFL_SetTransformPlayerStartName");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformPlayerStartName, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetTransformPlayerStartName::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformPlayerStartName, InPlayerStartTagName) == 0x000008, "Member 'RCCharacterProxyBFL_SetTransformPlayerStartName::InPlayerStartTagName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformPlayerStartName, InOffsetPos) == 0x000010, "Member 'RCCharacterProxyBFL_SetTransformPlayerStartName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformPlayerStartName, InOffsetYaw) == 0x00001C, "Member 'RCCharacterProxyBFL_SetTransformPlayerStartName::InOffsetYaw' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetTransformPlayerStartNameByCharacterName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPlayerStartTagName;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName) == 0x000020, "Wrong size on RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName, InPlayerStartTagName) == 0x000008, "Member 'RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName::InPlayerStartTagName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName, InOffsetPos) == 0x000010, "Member 'RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName, InOffsetYaw) == 0x00001C, "Member 'RCCharacterProxyBFL_SetTransformPlayerStartNameByCharacterName::InOffsetYaw' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetTransformTargetPointName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_SetTransformTargetPointName final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPointName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetTransformTargetPointName) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetTransformTargetPointName");
static_assert(sizeof(RCCharacterProxyBFL_SetTransformTargetPointName) == 0x000020, "Wrong size on RCCharacterProxyBFL_SetTransformTargetPointName");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformTargetPointName, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetTransformTargetPointName::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformTargetPointName, InPointName) == 0x000008, "Member 'RCCharacterProxyBFL_SetTransformTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformTargetPointName, InOffsetPos) == 0x000010, "Member 'RCCharacterProxyBFL_SetTransformTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformTargetPointName, InOffsetYaw) == 0x00001C, "Member 'RCCharacterProxyBFL_SetTransformTargetPointName::InOffsetYaw' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetTransformTargetPointNameByCharacterName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPointName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName) == 0x000020, "Wrong size on RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName, InPointName) == 0x000008, "Member 'RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName, InOffsetPos) == 0x000010, "Member 'RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName, InOffsetYaw) == 0x00001C, "Member 'RCCharacterProxyBFL_SetTransformTargetPointNameByCharacterName::InOffsetYaw' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetViewParam
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetViewParam final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCanViewDistance;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCanViewAngle;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SetViewParam) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetViewParam");
static_assert(sizeof(RCCharacterProxyBFL_SetViewParam) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetViewParam");
static_assert(offsetof(RCCharacterProxyBFL_SetViewParam, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetViewParam::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetViewParam, InCanViewDistance) == 0x000008, "Member 'RCCharacterProxyBFL_SetViewParam::InCanViewDistance' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetViewParam, InCanViewAngle) == 0x00000C, "Member 'RCCharacterProxyBFL_SetViewParam::InCanViewAngle' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetVisibility
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetVisibility final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleFlag;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCollision;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetVisibility) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetVisibility");
static_assert(sizeof(RCCharacterProxyBFL_SetVisibility) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetVisibility");
static_assert(offsetof(RCCharacterProxyBFL_SetVisibility, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetVisibility::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetVisibility, bVisibleFlag) == 0x000008, "Member 'RCCharacterProxyBFL_SetVisibility::bVisibleFlag' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetVisibility, bIsCollision) == 0x000009, "Member 'RCCharacterProxyBFL_SetVisibility::bIsCollision' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetVisibilityByCharacterName
// 0x000C (0x000C - 0x0000)
struct RCCharacterProxyBFL_SetVisibilityByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleFlag;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetVisibilityByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_SetVisibilityByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_SetVisibilityByCharacterName) == 0x00000C, "Wrong size on RCCharacterProxyBFL_SetVisibilityByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_SetVisibilityByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_SetVisibilityByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetVisibilityByCharacterName, bVisibleFlag) == 0x000008, "Member 'RCCharacterProxyBFL_SetVisibilityByCharacterName::bVisibleFlag' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SetVisibilityContainKakiwari
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_SetVisibilityContainKakiwari final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleFlag;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCollision;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_SetVisibilityContainKakiwari) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SetVisibilityContainKakiwari");
static_assert(sizeof(RCCharacterProxyBFL_SetVisibilityContainKakiwari) == 0x000010, "Wrong size on RCCharacterProxyBFL_SetVisibilityContainKakiwari");
static_assert(offsetof(RCCharacterProxyBFL_SetVisibilityContainKakiwari, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SetVisibilityContainKakiwari::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetVisibilityContainKakiwari, bVisibleFlag) == 0x000008, "Member 'RCCharacterProxyBFL_SetVisibilityContainKakiwari::bVisibleFlag' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_SetVisibilityContainKakiwari, bIsCollision) == 0x000009, "Member 'RCCharacterProxyBFL_SetVisibilityContainKakiwari::bIsCollision' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartCharcterSettingLoad
// 0x000C (0x000C - 0x0000)
struct RCCharacterProxyBFL_StartCharcterSettingLoad final
{
public:
	class FName                                   InSettingFilename;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartCharcterSettingLoad) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartCharcterSettingLoad");
static_assert(sizeof(RCCharacterProxyBFL_StartCharcterSettingLoad) == 0x00000C, "Wrong size on RCCharacterProxyBFL_StartCharcterSettingLoad");
static_assert(offsetof(RCCharacterProxyBFL_StartCharcterSettingLoad, InSettingFilename) == 0x000000, "Member 'RCCharacterProxyBFL_StartCharcterSettingLoad::InSettingFilename' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartCharcterSettingLoad, ReturnValue) == 0x000008, "Member 'RCCharacterProxyBFL_StartCharcterSettingLoad::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartLoad
// 0x0014 (0x0014 - 0x0000)
struct RCCharacterProxyBFL_StartLoad final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFilename;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScriptLoad;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartLoad) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartLoad");
static_assert(sizeof(RCCharacterProxyBFL_StartLoad) == 0x000014, "Wrong size on RCCharacterProxyBFL_StartLoad");
static_assert(offsetof(RCCharacterProxyBFL_StartLoad, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartLoad::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoad, InFilename) == 0x000008, "Member 'RCCharacterProxyBFL_StartLoad::InFilename' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoad, bVisibleFlag) == 0x000010, "Member 'RCCharacterProxyBFL_StartLoad::bVisibleFlag' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoad, bScriptLoad) == 0x000011, "Member 'RCCharacterProxyBFL_StartLoad::bScriptLoad' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoad, ReturnValue) == 0x000012, "Member 'RCCharacterProxyBFL_StartLoad::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartLoadAutoName
// 0x0014 (0x0014 - 0x0000)
struct RCCharacterProxyBFL_StartLoadAutoName final
{
public:
	class FName                                   OutName;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFilename;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScriptLoad;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartLoadAutoName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartLoadAutoName");
static_assert(sizeof(RCCharacterProxyBFL_StartLoadAutoName) == 0x000014, "Wrong size on RCCharacterProxyBFL_StartLoadAutoName");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadAutoName, OutName) == 0x000000, "Member 'RCCharacterProxyBFL_StartLoadAutoName::OutName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadAutoName, InFilename) == 0x000008, "Member 'RCCharacterProxyBFL_StartLoadAutoName::InFilename' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadAutoName, bVisibleFlag) == 0x000010, "Member 'RCCharacterProxyBFL_StartLoadAutoName::bVisibleFlag' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadAutoName, bScriptLoad) == 0x000011, "Member 'RCCharacterProxyBFL_StartLoadAutoName::bScriptLoad' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadAutoName, ReturnValue) == 0x000012, "Member 'RCCharacterProxyBFL_StartLoadAutoName::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartLoadModelList
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_StartLoadModelList final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCCharacterModel                             CharacterModel;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InPlayerStartName;                                 // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleFlag;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScriptLoad;                                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartLoadModelList) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartLoadModelList");
static_assert(sizeof(RCCharacterProxyBFL_StartLoadModelList) == 0x000020, "Wrong size on RCCharacterProxyBFL_StartLoadModelList");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelList, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartLoadModelList::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelList, CharacterModel) == 0x000008, "Member 'RCCharacterProxyBFL_StartLoadModelList::CharacterModel' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelList, InPlayerStartName) == 0x00000C, "Member 'RCCharacterProxyBFL_StartLoadModelList::InPlayerStartName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelList, InMotionName) == 0x000014, "Member 'RCCharacterProxyBFL_StartLoadModelList::InMotionName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelList, bVisibleFlag) == 0x00001C, "Member 'RCCharacterProxyBFL_StartLoadModelList::bVisibleFlag' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelList, bScriptLoad) == 0x00001D, "Member 'RCCharacterProxyBFL_StartLoadModelList::bScriptLoad' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelList, ReturnValue) == 0x00001E, "Member 'RCCharacterProxyBFL_StartLoadModelList::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartLoadModelListAutoName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_StartLoadModelListAutoName final
{
public:
	class FName                                   OutName;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCCharacterModel                             CharacterModel;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InPlayerStartName;                                 // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleFlag;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScriptLoad;                                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartLoadModelListAutoName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartLoadModelListAutoName");
static_assert(sizeof(RCCharacterProxyBFL_StartLoadModelListAutoName) == 0x000020, "Wrong size on RCCharacterProxyBFL_StartLoadModelListAutoName");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelListAutoName, OutName) == 0x000000, "Member 'RCCharacterProxyBFL_StartLoadModelListAutoName::OutName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelListAutoName, CharacterModel) == 0x000008, "Member 'RCCharacterProxyBFL_StartLoadModelListAutoName::CharacterModel' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelListAutoName, InPlayerStartName) == 0x00000C, "Member 'RCCharacterProxyBFL_StartLoadModelListAutoName::InPlayerStartName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelListAutoName, InMotionName) == 0x000014, "Member 'RCCharacterProxyBFL_StartLoadModelListAutoName::InMotionName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelListAutoName, bVisibleFlag) == 0x00001C, "Member 'RCCharacterProxyBFL_StartLoadModelListAutoName::bVisibleFlag' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelListAutoName, bScriptLoad) == 0x00001D, "Member 'RCCharacterProxyBFL_StartLoadModelListAutoName::bScriptLoad' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartLoadModelListAutoName, ReturnValue) == 0x00001E, "Member 'RCCharacterProxyBFL_StartLoadModelListAutoName::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMotion
// 0x0014 (0x0014 - 0x0000)
struct RCCharacterProxyBFL_StartMotion final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMotion) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartMotion");
static_assert(sizeof(RCCharacterProxyBFL_StartMotion) == 0x000014, "Wrong size on RCCharacterProxyBFL_StartMotion");
static_assert(offsetof(RCCharacterProxyBFL_StartMotion, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartMotion::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMotion, InMotionName) == 0x000008, "Member 'RCCharacterProxyBFL_StartMotion::InMotionName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMotion, bLoop) == 0x000010, "Member 'RCCharacterProxyBFL_StartMotion::bLoop' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMotionActor
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_StartMotionActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSwitchDurationSec;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartLoopMotion;                                  // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMotionActor) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartMotionActor");
static_assert(sizeof(RCCharacterProxyBFL_StartMotionActor) == 0x000020, "Wrong size on RCCharacterProxyBFL_StartMotionActor");
static_assert(offsetof(RCCharacterProxyBFL_StartMotionActor, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartMotionActor::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMotionActor, InMotionName) == 0x000008, "Member 'RCCharacterProxyBFL_StartMotionActor::InMotionName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMotionActor, InPlayRate) == 0x000010, "Member 'RCCharacterProxyBFL_StartMotionActor::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMotionActor, bLoop) == 0x000014, "Member 'RCCharacterProxyBFL_StartMotionActor::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMotionActor, InSwitchDurationSec) == 0x000018, "Member 'RCCharacterProxyBFL_StartMotionActor::InSwitchDurationSec' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMotionActor, bStartLoopMotion) == 0x00001C, "Member 'RCCharacterProxyBFL_StartMotionActor::bStartLoopMotion' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromPlayer
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromPlayer final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLength;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndPlayerYaw;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnSpeedScale;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromPlayer) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromPlayer");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromPlayer) == 0x000020, "Wrong size on RCCharacterProxyBFL_StartMoveFromPlayer");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayer, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromPlayer::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayer, InLength) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromPlayer::InLength' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayer, InAngle) == 0x00000C, "Member 'RCCharacterProxyBFL_StartMoveFromPlayer::InAngle' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayer, InHeight) == 0x000010, "Member 'RCCharacterProxyBFL_StartMoveFromPlayer::InHeight' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayer, SpeedScale) == 0x000014, "Member 'RCCharacterProxyBFL_StartMoveFromPlayer::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayer, bEndPlayerYaw) == 0x000018, "Member 'RCCharacterProxyBFL_StartMoveFromPlayer::bEndPlayerYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayer, TurnSpeedScale) == 0x00001C, "Member 'RCCharacterProxyBFL_StartMoveFromPlayer::TurnSpeedScale' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromPlayerByCharacterName
// 0x001C (0x001C - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLength;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndPlayerYaw;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName) == 0x00001C, "Wrong size on RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName, InLength) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName::InLength' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName, InAngle) == 0x00000C, "Member 'RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName::InAngle' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName, InHeight) == 0x000010, "Member 'RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName::InHeight' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName, SpeedScale) == 0x000014, "Member 'RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName, bEndPlayerYaw) == 0x000018, "Member 'RCCharacterProxyBFL_StartMoveFromPlayerByCharacterName::bEndPlayerYaw' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromPosition
// 0x0038 (0x0038 - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromPosition final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndChangeYawPosition;                              // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnSpeedScale;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromPosition) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromPosition");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromPosition) == 0x000038, "Wrong size on RCCharacterProxyBFL_StartMoveFromPosition");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPosition, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromPosition::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPosition, InPosition) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPosition, SpeedScale) == 0x000014, "Member 'RCCharacterProxyBFL_StartMoveFromPosition::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPosition, InOffsetYaw) == 0x000018, "Member 'RCCharacterProxyBFL_StartMoveFromPosition::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPosition, bEndChangeYaw) == 0x00001C, "Member 'RCCharacterProxyBFL_StartMoveFromPosition::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPosition, EndChangeYawPosition) == 0x000020, "Member 'RCCharacterProxyBFL_StartMoveFromPosition::EndChangeYawPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPosition, bPlayerCheck) == 0x00002C, "Member 'RCCharacterProxyBFL_StartMoveFromPosition::bPlayerCheck' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPosition, TurnSpeedScale) == 0x000030, "Member 'RCCharacterProxyBFL_StartMoveFromPosition::TurnSpeedScale' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromPositionByCharacterName
// 0x0030 (0x0030 - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromPositionByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndChangeYawPosition;                              // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromPositionByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromPositionByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromPositionByCharacterName) == 0x000030, "Wrong size on RCCharacterProxyBFL_StartMoveFromPositionByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromPositionByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionByCharacterName, InPosition) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromPositionByCharacterName::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionByCharacterName, SpeedScale) == 0x000014, "Member 'RCCharacterProxyBFL_StartMoveFromPositionByCharacterName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionByCharacterName, InOffsetYaw) == 0x000018, "Member 'RCCharacterProxyBFL_StartMoveFromPositionByCharacterName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionByCharacterName, bEndChangeYaw) == 0x00001C, "Member 'RCCharacterProxyBFL_StartMoveFromPositionByCharacterName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionByCharacterName, EndChangeYawPosition) == 0x000020, "Member 'RCCharacterProxyBFL_StartMoveFromPositionByCharacterName::EndChangeYawPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionByCharacterName, bPlayerCheck) == 0x00002C, "Member 'RCCharacterProxyBFL_StartMoveFromPositionByCharacterName::bPlayerCheck' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromPositionList
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromPositionList final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCScriptActorMoveInfo>         InMoveInfoList;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartMoveInfoNum;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstWarp;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromPositionList) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromPositionList");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromPositionList) == 0x000028, "Wrong size on RCCharacterProxyBFL_StartMoveFromPositionList");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionList, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromPositionList::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionList, InMoveInfoList) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromPositionList::InMoveInfoList' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionList, StartMoveInfoNum) == 0x000018, "Member 'RCCharacterProxyBFL_StartMoveFromPositionList::StartMoveInfoNum' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionList, bEndChangeYaw) == 0x00001C, "Member 'RCCharacterProxyBFL_StartMoveFromPositionList::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionList, InOffsetYaw) == 0x000020, "Member 'RCCharacterProxyBFL_StartMoveFromPositionList::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionList, bFirstWarp) == 0x000024, "Member 'RCCharacterProxyBFL_StartMoveFromPositionList::bFirstWarp' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionList, bLoop) == 0x000025, "Member 'RCCharacterProxyBFL_StartMoveFromPositionList::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionList, bPlayerCheck) == 0x000026, "Member 'RCCharacterProxyBFL_StartMoveFromPositionList::bPlayerCheck' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromPositionListByCharacterName
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCScriptActorMoveInfo>         InMoveInfoList;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartMoveInfoNum;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstWarp;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName) == 0x000028, "Wrong size on RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName, InMoveInfoList) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName::InMoveInfoList' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName, StartMoveInfoNum) == 0x000018, "Member 'RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName::StartMoveInfoNum' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName, bEndChangeYaw) == 0x00001C, "Member 'RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName, InOffsetYaw) == 0x000020, "Member 'RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName, bFirstWarp) == 0x000024, "Member 'RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName::bFirstWarp' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName, bLoop) == 0x000025, "Member 'RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName, bPlayerCheck) == 0x000026, "Member 'RCCharacterProxyBFL_StartMoveFromPositionListByCharacterName::bPlayerCheck' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromSplineName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromSplineName final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSplineName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistanceRange;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstWarp;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromSplineName) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromSplineName");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromSplineName) == 0x000020, "Wrong size on RCCharacterProxyBFL_StartMoveFromSplineName");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineName, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromSplineName::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineName, InSplineName) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromSplineName::InSplineName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineName, StartDistanceRange) == 0x000010, "Member 'RCCharacterProxyBFL_StartMoveFromSplineName::StartDistanceRange' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineName, bReverse) == 0x000014, "Member 'RCCharacterProxyBFL_StartMoveFromSplineName::bReverse' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineName, bEndChangeYaw) == 0x000015, "Member 'RCCharacterProxyBFL_StartMoveFromSplineName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineName, InOffsetYaw) == 0x000018, "Member 'RCCharacterProxyBFL_StartMoveFromSplineName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineName, bFirstWarp) == 0x00001C, "Member 'RCCharacterProxyBFL_StartMoveFromSplineName::bFirstWarp' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineName, bLoop) == 0x00001D, "Member 'RCCharacterProxyBFL_StartMoveFromSplineName::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineName, bPlayerCheck) == 0x00001E, "Member 'RCCharacterProxyBFL_StartMoveFromSplineName::bPlayerCheck' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromSplineNameByCharacterName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSplineName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistanceRange;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstWarp;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName) == 0x000020, "Wrong size on RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName, InSplineName) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName::InSplineName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName, StartDistanceRange) == 0x000010, "Member 'RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName::StartDistanceRange' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName, bReverse) == 0x000014, "Member 'RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName::bReverse' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName, bEndChangeYaw) == 0x000015, "Member 'RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName, InOffsetYaw) == 0x000018, "Member 'RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName, bFirstWarp) == 0x00001C, "Member 'RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName::bFirstWarp' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName, bLoop) == 0x00001D, "Member 'RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName::bLoop' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName, bPlayerCheck) == 0x00001E, "Member 'RCCharacterProxyBFL_StartMoveFromSplineNameByCharacterName::bPlayerCheck' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromTargetPointName
// 0x0038 (0x0038 - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromTargetPointName final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPointName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InChangeYawSpeed;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnSpeedScale;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromTargetPointName) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromTargetPointName");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromTargetPointName) == 0x000038, "Wrong size on RCCharacterProxyBFL_StartMoveFromTargetPointName");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointName, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointName::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointName, InPointName) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointName, SpeedScale) == 0x000010, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointName, InOffsetPos) == 0x000014, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointName, bEndChangeYaw) == 0x000020, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointName, InOffsetYaw) == 0x000024, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointName, InChangeYawSpeed) == 0x000028, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointName::InChangeYawSpeed' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointName, bPlayerCheck) == 0x00002C, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointName::bPlayerCheck' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointName, TurnSpeedScale) == 0x000030, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointName::TurnSpeedScale' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartMoveFromTargetPointNameByCharacterName
// 0x002C (0x002C - 0x0000)
struct RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPointName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndChangeYaw;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffsetYaw;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerCheck;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName) == 0x00002C, "Wrong size on RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName, InPointName) == 0x000008, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName, SpeedScale) == 0x000010, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName, InOffsetPos) == 0x000014, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName, bEndChangeYaw) == 0x000020, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName::bEndChangeYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName, InOffsetYaw) == 0x000024, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName, bPlayerCheck) == 0x000028, "Member 'RCCharacterProxyBFL_StartMoveFromTargetPointNameByCharacterName::bPlayerCheck' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationFromActor
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_StartRotationFromActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationFromActor) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartRotationFromActor");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationFromActor) == 0x000028, "Wrong size on RCCharacterProxyBFL_StartRotationFromActor");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromActor, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationFromActor::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromActor, InTargetActor) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationFromActor::InTargetActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromActor, SpeedScale) == 0x000010, "Member 'RCCharacterProxyBFL_StartRotationFromActor::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromActor, InOffsetPos) == 0x000014, "Member 'RCCharacterProxyBFL_StartRotationFromActor::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromActor, InOffsetYaw) == 0x000020, "Member 'RCCharacterProxyBFL_StartRotationFromActor::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromActor, bDirect) == 0x000024, "Member 'RCCharacterProxyBFL_StartRotationFromActor::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationFromCharacter
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_StartRotationFromCharacter final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationFromCharacter) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartRotationFromCharacter");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationFromCharacter) == 0x000028, "Wrong size on RCCharacterProxyBFL_StartRotationFromCharacter");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacter, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationFromCharacter::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacter, InTargetActor) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationFromCharacter::InTargetActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacter, SpeedScale) == 0x000010, "Member 'RCCharacterProxyBFL_StartRotationFromCharacter::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacter, InOffsetPos) == 0x000014, "Member 'RCCharacterProxyBFL_StartRotationFromCharacter::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacter, InOffsetYaw) == 0x000020, "Member 'RCCharacterProxyBFL_StartRotationFromCharacter::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacter, bDirect) == 0x000024, "Member 'RCCharacterProxyBFL_StartRotationFromCharacter::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationFromCharacterByCharacterName
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTargetCharacterName;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName) == 0x000028, "Wrong size on RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName, InTargetCharacterName) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName::InTargetCharacterName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName, SpeedScale) == 0x000010, "Member 'RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName, InOffsetPos) == 0x000014, "Member 'RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName, InOffsetYaw) == 0x000020, "Member 'RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName, bDirect) == 0x000024, "Member 'RCCharacterProxyBFL_StartRotationFromCharacterByCharacterName::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationFromPlayer
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_StartRotationFromPlayer final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationFromPlayer) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartRotationFromPlayer");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationFromPlayer) == 0x000020, "Wrong size on RCCharacterProxyBFL_StartRotationFromPlayer");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPlayer, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationFromPlayer::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPlayer, SpeedScale) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationFromPlayer::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPlayer, InOffsetPos) == 0x00000C, "Member 'RCCharacterProxyBFL_StartRotationFromPlayer::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPlayer, InOffsetYaw) == 0x000018, "Member 'RCCharacterProxyBFL_StartRotationFromPlayer::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPlayer, bDirect) == 0x00001C, "Member 'RCCharacterProxyBFL_StartRotationFromPlayer::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationFromPosition
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_StartRotationFromPosition final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationFromPosition) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartRotationFromPosition");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationFromPosition) == 0x000020, "Wrong size on RCCharacterProxyBFL_StartRotationFromPosition");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPosition, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationFromPosition::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPosition, InPosition) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPosition, SpeedScale) == 0x000014, "Member 'RCCharacterProxyBFL_StartRotationFromPosition::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPosition, InOffsetYaw) == 0x000018, "Member 'RCCharacterProxyBFL_StartRotationFromPosition::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPosition, bDirect) == 0x00001C, "Member 'RCCharacterProxyBFL_StartRotationFromPosition::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationFromPositionByCharacterName
// 0x0020 (0x0020 - 0x0000)
struct RCCharacterProxyBFL_StartRotationFromPositionByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationFromPositionByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartRotationFromPositionByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationFromPositionByCharacterName) == 0x000020, "Wrong size on RCCharacterProxyBFL_StartRotationFromPositionByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPositionByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationFromPositionByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPositionByCharacterName, InPosition) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationFromPositionByCharacterName::InPosition' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPositionByCharacterName, SpeedScale) == 0x000014, "Member 'RCCharacterProxyBFL_StartRotationFromPositionByCharacterName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPositionByCharacterName, InOffsetYaw) == 0x000018, "Member 'RCCharacterProxyBFL_StartRotationFromPositionByCharacterName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromPositionByCharacterName, bDirect) == 0x00001C, "Member 'RCCharacterProxyBFL_StartRotationFromPositionByCharacterName::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationFromTargetPointName
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_StartRotationFromTargetPointName final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPointName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationFromTargetPointName) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartRotationFromTargetPointName");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationFromTargetPointName) == 0x000028, "Wrong size on RCCharacterProxyBFL_StartRotationFromTargetPointName");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointName, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointName::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointName, InPointName) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointName, SpeedScale) == 0x000010, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointName, InOffsetPos) == 0x000014, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointName, InOffsetYaw) == 0x000020, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointName, bDirect) == 0x000024, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointName::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationFromTargetPointNameByCharacterName
// 0x0028 (0x0028 - 0x0000)
struct RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPointName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffsetPos;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName) == 0x000028, "Wrong size on RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName, InPointName) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName::InPointName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName, SpeedScale) == 0x000010, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName, InOffsetPos) == 0x000014, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName::InOffsetPos' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName, InOffsetYaw) == 0x000020, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName, bDirect) == 0x000024, "Member 'RCCharacterProxyBFL_StartRotationFromTargetPointNameByCharacterName::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationYaw
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_StartRotationYaw final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationYaw) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StartRotationYaw");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationYaw) == 0x000018, "Wrong size on RCCharacterProxyBFL_StartRotationYaw");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationYaw, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationYaw::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationYaw, Yaw) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationYaw::Yaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationYaw, SpeedScale) == 0x00000C, "Member 'RCCharacterProxyBFL_StartRotationYaw::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationYaw, bDirect) == 0x000010, "Member 'RCCharacterProxyBFL_StartRotationYaw::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StartRotationYawByCharacterName
// 0x0014 (0x0014 - 0x0000)
struct RCCharacterProxyBFL_StartRotationYawByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_StartRotationYawByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StartRotationYawByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StartRotationYawByCharacterName) == 0x000014, "Wrong size on RCCharacterProxyBFL_StartRotationYawByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationYawByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StartRotationYawByCharacterName::InName' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationYawByCharacterName, Yaw) == 0x000008, "Member 'RCCharacterProxyBFL_StartRotationYawByCharacterName::Yaw' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationYawByCharacterName, SpeedScale) == 0x00000C, "Member 'RCCharacterProxyBFL_StartRotationYawByCharacterName::SpeedScale' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StartRotationYawByCharacterName, bDirect) == 0x000010, "Member 'RCCharacterProxyBFL_StartRotationYawByCharacterName::bDirect' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StopHoldingHand
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_StopHoldingHand final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InTaegetActor;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_StopHoldingHand) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StopHoldingHand");
static_assert(sizeof(RCCharacterProxyBFL_StopHoldingHand) == 0x000010, "Wrong size on RCCharacterProxyBFL_StopHoldingHand");
static_assert(offsetof(RCCharacterProxyBFL_StopHoldingHand, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StopHoldingHand::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_StopHoldingHand, InTaegetActor) == 0x000008, "Member 'RCCharacterProxyBFL_StopHoldingHand::InTaegetActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StopLookAt
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_StopLookAt final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_StopLookAt) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StopLookAt");
static_assert(sizeof(RCCharacterProxyBFL_StopLookAt) == 0x000008, "Wrong size on RCCharacterProxyBFL_StopLookAt");
static_assert(offsetof(RCCharacterProxyBFL_StopLookAt, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StopLookAt::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StopMove
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_StopMove final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_StopMove) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StopMove");
static_assert(sizeof(RCCharacterProxyBFL_StopMove) == 0x000008, "Wrong size on RCCharacterProxyBFL_StopMove");
static_assert(offsetof(RCCharacterProxyBFL_StopMove, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StopMove::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StopMoveByCharacterName
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_StopMoveByCharacterName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_StopMoveByCharacterName) == 0x000004, "Wrong alignment on RCCharacterProxyBFL_StopMoveByCharacterName");
static_assert(sizeof(RCCharacterProxyBFL_StopMoveByCharacterName) == 0x000008, "Wrong size on RCCharacterProxyBFL_StopMoveByCharacterName");
static_assert(offsetof(RCCharacterProxyBFL_StopMoveByCharacterName, InName) == 0x000000, "Member 'RCCharacterProxyBFL_StopMoveByCharacterName::InName' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.StopWalkSpline
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_StopWalkSpline final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_StopWalkSpline) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_StopWalkSpline");
static_assert(sizeof(RCCharacterProxyBFL_StopWalkSpline) == 0x000008, "Wrong size on RCCharacterProxyBFL_StopWalkSpline");
static_assert(offsetof(RCCharacterProxyBFL_StopWalkSpline, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_StopWalkSpline::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.SwitchOutCurrentEventMotion
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterProxyBFL_SwitchOutCurrentEventMotion final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterProxyBFL_SwitchOutCurrentEventMotion) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_SwitchOutCurrentEventMotion");
static_assert(sizeof(RCCharacterProxyBFL_SwitchOutCurrentEventMotion) == 0x000008, "Wrong size on RCCharacterProxyBFL_SwitchOutCurrentEventMotion");
static_assert(offsetof(RCCharacterProxyBFL_SwitchOutCurrentEventMotion, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_SwitchOutCurrentEventMotion::InActor' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.UndoRimLight
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterProxyBFL_UndoRimLight final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRimLightDurationSec;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_UndoRimLight) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_UndoRimLight");
static_assert(sizeof(RCCharacterProxyBFL_UndoRimLight) == 0x000010, "Wrong size on RCCharacterProxyBFL_UndoRimLight");
static_assert(offsetof(RCCharacterProxyBFL_UndoRimLight, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_UndoRimLight::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_UndoRimLight, InRimLightDurationSec) == 0x000008, "Member 'RCCharacterProxyBFL_UndoRimLight::InRimLightDurationSec' has a wrong offset!");

// Function RC.RCCharacterProxyBFL.WalkSpline
// 0x0018 (0x0018 - 0x0000)
struct RCCharacterProxyBFL_WalkSpline final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InSplineActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeRate;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterProxyBFL_WalkSpline) == 0x000008, "Wrong alignment on RCCharacterProxyBFL_WalkSpline");
static_assert(sizeof(RCCharacterProxyBFL_WalkSpline) == 0x000018, "Wrong size on RCCharacterProxyBFL_WalkSpline");
static_assert(offsetof(RCCharacterProxyBFL_WalkSpline, InActor) == 0x000000, "Member 'RCCharacterProxyBFL_WalkSpline::InActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_WalkSpline, InSplineActor) == 0x000008, "Member 'RCCharacterProxyBFL_WalkSpline::InSplineActor' has a wrong offset!");
static_assert(offsetof(RCCharacterProxyBFL_WalkSpline, InTimeRate) == 0x000010, "Member 'RCCharacterProxyBFL_WalkSpline::InTimeRate' has a wrong offset!");

// Function RC.RCTitleLogo.OnFinishedGenericWindow_ToTerminateGame
// 0x0001 (0x0001 - 0x0000)
struct RCTitleLogo_OnFinishedGenericWindow_ToTerminateGame final
{
public:
	bool                                          res;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleLogo_OnFinishedGenericWindow_ToTerminateGame) == 0x000001, "Wrong alignment on RCTitleLogo_OnFinishedGenericWindow_ToTerminateGame");
static_assert(sizeof(RCTitleLogo_OnFinishedGenericWindow_ToTerminateGame) == 0x000001, "Wrong size on RCTitleLogo_OnFinishedGenericWindow_ToTerminateGame");
static_assert(offsetof(RCTitleLogo_OnFinishedGenericWindow_ToTerminateGame, res) == 0x000000, "Member 'RCTitleLogo_OnFinishedGenericWindow_ToTerminateGame::res' has a wrong offset!");

// Function RC.RCCharacterTurnBFL.AnimInstInitializeTurn
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterTurnBFL_AnimInstInitializeTurn final
{
public:
	class URCCharacterAnimInstance*               AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterTurnBFL_AnimInstInitializeTurn) == 0x000008, "Wrong alignment on RCCharacterTurnBFL_AnimInstInitializeTurn");
static_assert(sizeof(RCCharacterTurnBFL_AnimInstInitializeTurn) == 0x000008, "Wrong size on RCCharacterTurnBFL_AnimInstInitializeTurn");
static_assert(offsetof(RCCharacterTurnBFL_AnimInstInitializeTurn, AnimInst) == 0x000000, "Member 'RCCharacterTurnBFL_AnimInstInitializeTurn::AnimInst' has a wrong offset!");

// Function RC.RCCharacterTurnBFL.AnimInstTickTurn
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterTurnBFL_AnimInstTickTurn final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URCCharacterAnimInstance*               AnimInst;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterTurnBFL_AnimInstTickTurn) == 0x000008, "Wrong alignment on RCCharacterTurnBFL_AnimInstTickTurn");
static_assert(sizeof(RCCharacterTurnBFL_AnimInstTickTurn) == 0x000010, "Wrong size on RCCharacterTurnBFL_AnimInstTickTurn");
static_assert(offsetof(RCCharacterTurnBFL_AnimInstTickTurn, DeltaTime) == 0x000000, "Member 'RCCharacterTurnBFL_AnimInstTickTurn::DeltaTime' has a wrong offset!");
static_assert(offsetof(RCCharacterTurnBFL_AnimInstTickTurn, AnimInst) == 0x000008, "Member 'RCCharacterTurnBFL_AnimInstTickTurn::AnimInst' has a wrong offset!");

// Function RC.RCCharacterTurnBFL.CheckLeaveTurn
// 0x00B0 (0x00B0 - 0x0000)
struct RCCharacterTurnBFL_CheckLeaveTurn final
{
public:
	bool                                          bLeaveTurn;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAnimInstTurnData                    TurnData;                                          // 0x0008(0x00A8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterTurnBFL_CheckLeaveTurn) == 0x000008, "Wrong alignment on RCCharacterTurnBFL_CheckLeaveTurn");
static_assert(sizeof(RCCharacterTurnBFL_CheckLeaveTurn) == 0x0000B0, "Wrong size on RCCharacterTurnBFL_CheckLeaveTurn");
static_assert(offsetof(RCCharacterTurnBFL_CheckLeaveTurn, bLeaveTurn) == 0x000000, "Member 'RCCharacterTurnBFL_CheckLeaveTurn::bLeaveTurn' has a wrong offset!");
static_assert(offsetof(RCCharacterTurnBFL_CheckLeaveTurn, TurnData) == 0x000008, "Member 'RCCharacterTurnBFL_CheckLeaveTurn::TurnData' has a wrong offset!");

// Function RC.RCCharacterTurnBFL.CheckTurning
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterTurnBFL_CheckTurning final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterTurnBFL_CheckTurning) == 0x000008, "Wrong alignment on RCCharacterTurnBFL_CheckTurning");
static_assert(sizeof(RCCharacterTurnBFL_CheckTurning) == 0x000010, "Wrong size on RCCharacterTurnBFL_CheckTurning");
static_assert(offsetof(RCCharacterTurnBFL_CheckTurning, Actor) == 0x000000, "Member 'RCCharacterTurnBFL_CheckTurning::Actor' has a wrong offset!");
static_assert(offsetof(RCCharacterTurnBFL_CheckTurning, ReturnValue) == 0x000008, "Member 'RCCharacterTurnBFL_CheckTurning::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterTurnBFL.EndTurn
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterTurnBFL_EndTurn final
{
public:
	class URCCharacterAnimInstance*               AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterTurnBFL_EndTurn) == 0x000008, "Wrong alignment on RCCharacterTurnBFL_EndTurn");
static_assert(sizeof(RCCharacterTurnBFL_EndTurn) == 0x000008, "Wrong size on RCCharacterTurnBFL_EndTurn");
static_assert(offsetof(RCCharacterTurnBFL_EndTurn, AnimInst) == 0x000000, "Member 'RCCharacterTurnBFL_EndTurn::AnimInst' has a wrong offset!");

// Function RC.RCCharacterTurnBFL.InitializeTurn
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterTurnBFL_InitializeTurn final
{
public:
	class ARCCharacterScript*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterTurnBFL_InitializeTurn) == 0x000008, "Wrong alignment on RCCharacterTurnBFL_InitializeTurn");
static_assert(sizeof(RCCharacterTurnBFL_InitializeTurn) == 0x000008, "Wrong size on RCCharacterTurnBFL_InitializeTurn");
static_assert(offsetof(RCCharacterTurnBFL_InitializeTurn, Character) == 0x000000, "Member 'RCCharacterTurnBFL_InitializeTurn::Character' has a wrong offset!");

// Function RC.RCCharacterTurnBFL.SetTurnable
// 0x0010 (0x0010 - 0x0000)
struct RCCharacterTurnBFL_SetTurnable final
{
public:
	class URCCharacterAnimInstance*               AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCharacterTurnBFL_SetTurnable) == 0x000008, "Wrong alignment on RCCharacterTurnBFL_SetTurnable");
static_assert(sizeof(RCCharacterTurnBFL_SetTurnable) == 0x000010, "Wrong size on RCCharacterTurnBFL_SetTurnable");
static_assert(offsetof(RCCharacterTurnBFL_SetTurnable, AnimInst) == 0x000000, "Member 'RCCharacterTurnBFL_SetTurnable::AnimInst' has a wrong offset!");
static_assert(offsetof(RCCharacterTurnBFL_SetTurnable, bTurnable) == 0x000008, "Member 'RCCharacterTurnBFL_SetTurnable::bTurnable' has a wrong offset!");

// Function RC.RCCharacterTurnBFL.StartTurnState
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterTurnBFL_StartTurnState final
{
public:
	class URCCharacterAnimInstance*               AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterTurnBFL_StartTurnState) == 0x000008, "Wrong alignment on RCCharacterTurnBFL_StartTurnState");
static_assert(sizeof(RCCharacterTurnBFL_StartTurnState) == 0x000008, "Wrong size on RCCharacterTurnBFL_StartTurnState");
static_assert(offsetof(RCCharacterTurnBFL_StartTurnState, AnimInst) == 0x000000, "Member 'RCCharacterTurnBFL_StartTurnState::AnimInst' has a wrong offset!");

// Function RC.RCCharacterTurnBFL.StopTurn
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterTurnBFL_StopTurn final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterTurnBFL_StopTurn) == 0x000008, "Wrong alignment on RCCharacterTurnBFL_StopTurn");
static_assert(sizeof(RCCharacterTurnBFL_StopTurn) == 0x000008, "Wrong size on RCCharacterTurnBFL_StopTurn");
static_assert(offsetof(RCCharacterTurnBFL_StopTurn, Actor) == 0x000000, "Member 'RCCharacterTurnBFL_StopTurn::Actor' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagi.ChangeKaiKagi
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleKaiKagi_ChangeKaiKagi final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagi_ChangeKaiKagi) == 0x000004, "Wrong alignment on RCNzUiBattleKaiKagi_ChangeKaiKagi");
static_assert(sizeof(RCNzUiBattleKaiKagi_ChangeKaiKagi) == 0x000008, "Wrong size on RCNzUiBattleKaiKagi_ChangeKaiKagi");
static_assert(offsetof(RCNzUiBattleKaiKagi_ChangeKaiKagi, InTextID) == 0x000000, "Member 'RCNzUiBattleKaiKagi_ChangeKaiKagi::InTextID' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagi.GetBattleKaiKagiStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagi_GetBattleKaiKagiStatus final
{
public:
	ERCNzUiBattleKaiKagiStatus                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagi_GetBattleKaiKagiStatus) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagi_GetBattleKaiKagiStatus");
static_assert(sizeof(RCNzUiBattleKaiKagi_GetBattleKaiKagiStatus) == 0x000001, "Wrong size on RCNzUiBattleKaiKagi_GetBattleKaiKagiStatus");
static_assert(offsetof(RCNzUiBattleKaiKagi_GetBattleKaiKagiStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleKaiKagi_GetBattleKaiKagiStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagi.SetKaiKagiName
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleKaiKagi_SetKaiKagiName final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagi_SetKaiKagiName) == 0x000004, "Wrong alignment on RCNzUiBattleKaiKagi_SetKaiKagiName");
static_assert(sizeof(RCNzUiBattleKaiKagi_SetKaiKagiName) == 0x000008, "Wrong size on RCNzUiBattleKaiKagi_SetKaiKagiName");
static_assert(offsetof(RCNzUiBattleKaiKagi_SetKaiKagiName, InTextID) == 0x000000, "Member 'RCNzUiBattleKaiKagi_SetKaiKagiName::InTextID' has a wrong offset!");

// Function RC.RCMojimichiManagerActor.DisolveText
// 0x0008 (0x0008 - 0x0000)
struct RCMojimichiManagerActor_DisolveText final
{
public:
	float                                         DisolveTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCMojimichiManagerActor_DisolveText) == 0x000004, "Wrong alignment on RCMojimichiManagerActor_DisolveText");
static_assert(sizeof(RCMojimichiManagerActor_DisolveText) == 0x000008, "Wrong size on RCMojimichiManagerActor_DisolveText");
static_assert(offsetof(RCMojimichiManagerActor_DisolveText, DisolveTime) == 0x000000, "Member 'RCMojimichiManagerActor_DisolveText::DisolveTime' has a wrong offset!");
static_assert(offsetof(RCMojimichiManagerActor_DisolveText, ReturnValue) == 0x000004, "Member 'RCMojimichiManagerActor_DisolveText::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiManagerActor.ShowText
// 0x0001 (0x0001 - 0x0000)
struct RCMojimichiManagerActor_ShowText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMojimichiManagerActor_ShowText) == 0x000001, "Wrong alignment on RCMojimichiManagerActor_ShowText");
static_assert(sizeof(RCMojimichiManagerActor_ShowText) == 0x000001, "Wrong size on RCMojimichiManagerActor_ShowText");
static_assert(offsetof(RCMojimichiManagerActor_ShowText, ReturnValue) == 0x000000, "Member 'RCMojimichiManagerActor_ShowText::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiManagerActor.SpawnConstructor
// 0x0020 (0x0020 - 0x0000)
struct RCMojimichiManagerActor_SpawnConstructor final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         Component;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCMojimichiManagerActor_SpawnConstructor) == 0x000008, "Wrong alignment on RCMojimichiManagerActor_SpawnConstructor");
static_assert(sizeof(RCMojimichiManagerActor_SpawnConstructor) == 0x000020, "Wrong size on RCMojimichiManagerActor_SpawnConstructor");
static_assert(offsetof(RCMojimichiManagerActor_SpawnConstructor, World) == 0x000000, "Member 'RCMojimichiManagerActor_SpawnConstructor::World' has a wrong offset!");
static_assert(offsetof(RCMojimichiManagerActor_SpawnConstructor, Actor) == 0x000008, "Member 'RCMojimichiManagerActor_SpawnConstructor::Actor' has a wrong offset!");
static_assert(offsetof(RCMojimichiManagerActor_SpawnConstructor, Component) == 0x000010, "Member 'RCMojimichiManagerActor_SpawnConstructor::Component' has a wrong offset!");
static_assert(offsetof(RCMojimichiManagerActor_SpawnConstructor, ReturnValue) == 0x000018, "Member 'RCMojimichiManagerActor_SpawnConstructor::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiManagerActor.StartConstruction
// 0x0010 (0x0010 - 0x0000)
struct RCMojimichiManagerActor_StartConstruction final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCMojimichiManagerActor_StartConstruction) == 0x000008, "Wrong alignment on RCMojimichiManagerActor_StartConstruction");
static_assert(sizeof(RCMojimichiManagerActor_StartConstruction) == 0x000010, "Wrong size on RCMojimichiManagerActor_StartConstruction");
static_assert(offsetof(RCMojimichiManagerActor_StartConstruction, World) == 0x000000, "Member 'RCMojimichiManagerActor_StartConstruction::World' has a wrong offset!");
static_assert(offsetof(RCMojimichiManagerActor_StartConstruction, ReturnValue) == 0x000008, "Member 'RCMojimichiManagerActor_StartConstruction::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiManagerActor.StartConstructionWithActorTag
// 0x0018 (0x0018 - 0x0000)
struct RCMojimichiManagerActor_StartConstructionWithActorTag final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorTag;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCMojimichiManagerActor_StartConstructionWithActorTag) == 0x000008, "Wrong alignment on RCMojimichiManagerActor_StartConstructionWithActorTag");
static_assert(sizeof(RCMojimichiManagerActor_StartConstructionWithActorTag) == 0x000018, "Wrong size on RCMojimichiManagerActor_StartConstructionWithActorTag");
static_assert(offsetof(RCMojimichiManagerActor_StartConstructionWithActorTag, World) == 0x000000, "Member 'RCMojimichiManagerActor_StartConstructionWithActorTag::World' has a wrong offset!");
static_assert(offsetof(RCMojimichiManagerActor_StartConstructionWithActorTag, ActorTag) == 0x000008, "Member 'RCMojimichiManagerActor_StartConstructionWithActorTag::ActorTag' has a wrong offset!");
static_assert(offsetof(RCMojimichiManagerActor_StartConstructionWithActorTag, ReturnValue) == 0x000010, "Member 'RCMojimichiManagerActor_StartConstructionWithActorTag::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiManagerActor.StartFracture
// 0x0001 (0x0001 - 0x0000)
struct RCMojimichiManagerActor_StartFracture final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMojimichiManagerActor_StartFracture) == 0x000001, "Wrong alignment on RCMojimichiManagerActor_StartFracture");
static_assert(sizeof(RCMojimichiManagerActor_StartFracture) == 0x000001, "Wrong size on RCMojimichiManagerActor_StartFracture");
static_assert(offsetof(RCMojimichiManagerActor_StartFracture, ReturnValue) == 0x000000, "Member 'RCMojimichiManagerActor_StartFracture::ReturnValue' has a wrong offset!");

// Function RC.RCCharacterViewerMenu.OpenDebugMenu
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterViewerMenu_OpenDebugMenu final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterViewerMenu_OpenDebugMenu) == 0x000008, "Wrong alignment on RCCharacterViewerMenu_OpenDebugMenu");
static_assert(sizeof(RCCharacterViewerMenu_OpenDebugMenu) == 0x000008, "Wrong size on RCCharacterViewerMenu_OpenDebugMenu");
static_assert(offsetof(RCCharacterViewerMenu_OpenDebugMenu, InContext) == 0x000000, "Member 'RCCharacterViewerMenu_OpenDebugMenu::InContext' has a wrong offset!");

// Function RC.RCCharacterViewerMenu.ToggleDebugMenu
// 0x0008 (0x0008 - 0x0000)
struct RCCharacterViewerMenu_ToggleDebugMenu final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCharacterViewerMenu_ToggleDebugMenu) == 0x000008, "Wrong alignment on RCCharacterViewerMenu_ToggleDebugMenu");
static_assert(sizeof(RCCharacterViewerMenu_ToggleDebugMenu) == 0x000008, "Wrong size on RCCharacterViewerMenu_ToggleDebugMenu");
static_assert(offsetof(RCCharacterViewerMenu_ToggleDebugMenu, InContext) == 0x000000, "Member 'RCCharacterViewerMenu_ToggleDebugMenu::InContext' has a wrong offset!");

// Function RC.RCNzPuzzleQuestionBase.SetQuestion
// 0x0018 (0x0018 - 0x0000)
struct RCNzPuzzleQuestionBase_SetQuestion final
{
public:
	class FText                                   wordText;                                          // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleQuestionBase_SetQuestion) == 0x000008, "Wrong alignment on RCNzPuzzleQuestionBase_SetQuestion");
static_assert(sizeof(RCNzPuzzleQuestionBase_SetQuestion) == 0x000018, "Wrong size on RCNzPuzzleQuestionBase_SetQuestion");
static_assert(offsetof(RCNzPuzzleQuestionBase_SetQuestion, wordText) == 0x000000, "Member 'RCNzPuzzleQuestionBase_SetQuestion::wordText' has a wrong offset!");

// Function RC.RCUiCutInAnim.IsFinishContAnim
// 0x0001 (0x0001 - 0x0000)
struct RCUiCutInAnim_IsFinishContAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiCutInAnim_IsFinishContAnim) == 0x000001, "Wrong alignment on RCUiCutInAnim_IsFinishContAnim");
static_assert(sizeof(RCUiCutInAnim_IsFinishContAnim) == 0x000001, "Wrong size on RCUiCutInAnim_IsFinishContAnim");
static_assert(offsetof(RCUiCutInAnim_IsFinishContAnim, ReturnValue) == 0x000000, "Member 'RCUiCutInAnim_IsFinishContAnim::ReturnValue' has a wrong offset!");

// Function RC.RCUiCutInAnim.SetAnimSpeedRate
// 0x0004 (0x0004 - 0x0000)
struct RCUiCutInAnim_SetAnimSpeedRate final
{
public:
	float                                         InAnimSpeedRate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiCutInAnim_SetAnimSpeedRate) == 0x000004, "Wrong alignment on RCUiCutInAnim_SetAnimSpeedRate");
static_assert(sizeof(RCUiCutInAnim_SetAnimSpeedRate) == 0x000004, "Wrong size on RCUiCutInAnim_SetAnimSpeedRate");
static_assert(offsetof(RCUiCutInAnim_SetAnimSpeedRate, InAnimSpeedRate) == 0x000000, "Member 'RCUiCutInAnim_SetAnimSpeedRate::InAnimSpeedRate' has a wrong offset!");

// Function RC.RCCheckActor.GetCheckNameTextId
// 0x0008 (0x0008 - 0x0000)
struct RCCheckActor_GetCheckNameTextId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_GetCheckNameTextId) == 0x000004, "Wrong alignment on RCCheckActor_GetCheckNameTextId");
static_assert(sizeof(RCCheckActor_GetCheckNameTextId) == 0x000008, "Wrong size on RCCheckActor_GetCheckNameTextId");
static_assert(offsetof(RCCheckActor_GetCheckNameTextId, ReturnValue) == 0x000000, "Member 'RCCheckActor_GetCheckNameTextId::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.GetFigureNum
// 0x0004 (0x0004 - 0x0000)
struct RCCheckActor_GetFigureNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_GetFigureNum) == 0x000004, "Wrong alignment on RCCheckActor_GetFigureNum");
static_assert(sizeof(RCCheckActor_GetFigureNum) == 0x000004, "Wrong size on RCCheckActor_GetFigureNum");
static_assert(offsetof(RCCheckActor_GetFigureNum, ReturnValue) == 0x000000, "Member 'RCCheckActor_GetFigureNum::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.GetFigurePersonID
// 0x0008 (0x0008 - 0x0000)
struct RCCheckActor_GetFigurePersonID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_GetFigurePersonID) == 0x000004, "Wrong alignment on RCCheckActor_GetFigurePersonID");
static_assert(sizeof(RCCheckActor_GetFigurePersonID) == 0x000008, "Wrong size on RCCheckActor_GetFigurePersonID");
static_assert(offsetof(RCCheckActor_GetFigurePersonID, ReturnValue) == 0x000000, "Member 'RCCheckActor_GetFigurePersonID::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.GetNextMapID
// 0x0008 (0x0008 - 0x0000)
struct RCCheckActor_GetNextMapID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_GetNextMapID) == 0x000004, "Wrong alignment on RCCheckActor_GetNextMapID");
static_assert(sizeof(RCCheckActor_GetNextMapID) == 0x000008, "Wrong size on RCCheckActor_GetNextMapID");
static_assert(offsetof(RCCheckActor_GetNextMapID, ReturnValue) == 0x000000, "Member 'RCCheckActor_GetNextMapID::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.GetNextPlayerStartName
// 0x0008 (0x0008 - 0x0000)
struct RCCheckActor_GetNextPlayerStartName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_GetNextPlayerStartName) == 0x000004, "Wrong alignment on RCCheckActor_GetNextPlayerStartName");
static_assert(sizeof(RCCheckActor_GetNextPlayerStartName) == 0x000008, "Wrong size on RCCheckActor_GetNextPlayerStartName");
static_assert(offsetof(RCCheckActor_GetNextPlayerStartName, ReturnValue) == 0x000000, "Member 'RCCheckActor_GetNextPlayerStartName::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.GetResearchVisionType
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_GetResearchVisionType final
{
public:
	ERCRealCheckActorResearchVisionTimeType       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_GetResearchVisionType) == 0x000001, "Wrong alignment on RCCheckActor_GetResearchVisionType");
static_assert(sizeof(RCCheckActor_GetResearchVisionType) == 0x000001, "Wrong size on RCCheckActor_GetResearchVisionType");
static_assert(offsetof(RCCheckActor_GetResearchVisionType, ReturnValue) == 0x000000, "Member 'RCCheckActor_GetResearchVisionType::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.IsAreaMoveStop
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_IsAreaMoveStop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_IsAreaMoveStop) == 0x000001, "Wrong alignment on RCCheckActor_IsAreaMoveStop");
static_assert(sizeof(RCCheckActor_IsAreaMoveStop) == 0x000001, "Wrong size on RCCheckActor_IsAreaMoveStop");
static_assert(offsetof(RCCheckActor_IsAreaMoveStop, ReturnValue) == 0x000000, "Member 'RCCheckActor_IsAreaMoveStop::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.IsCheckFinish
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_IsCheckFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_IsCheckFinish) == 0x000001, "Wrong alignment on RCCheckActor_IsCheckFinish");
static_assert(sizeof(RCCheckActor_IsCheckFinish) == 0x000001, "Wrong size on RCCheckActor_IsCheckFinish");
static_assert(offsetof(RCCheckActor_IsCheckFinish, ReturnValue) == 0x000000, "Member 'RCCheckActor_IsCheckFinish::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.IsCheckIconSetting
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_IsCheckIconSetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_IsCheckIconSetting) == 0x000001, "Wrong alignment on RCCheckActor_IsCheckIconSetting");
static_assert(sizeof(RCCheckActor_IsCheckIconSetting) == 0x000001, "Wrong size on RCCheckActor_IsCheckIconSetting");
static_assert(offsetof(RCCheckActor_IsCheckIconSetting, ReturnValue) == 0x000000, "Member 'RCCheckActor_IsCheckIconSetting::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.IsCheckSetting
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_IsCheckSetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_IsCheckSetting) == 0x000001, "Wrong alignment on RCCheckActor_IsCheckSetting");
static_assert(sizeof(RCCheckActor_IsCheckSetting) == 0x000001, "Wrong size on RCCheckActor_IsCheckSetting");
static_assert(offsetof(RCCheckActor_IsCheckSetting, ReturnValue) == 0x000000, "Member 'RCCheckActor_IsCheckSetting::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActor.SetAreaMoveStop
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_SetAreaMoveStop final
{
public:
	bool                                          bInAreaMoveStop;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetAreaMoveStop) == 0x000001, "Wrong alignment on RCCheckActor_SetAreaMoveStop");
static_assert(sizeof(RCCheckActor_SetAreaMoveStop) == 0x000001, "Wrong size on RCCheckActor_SetAreaMoveStop");
static_assert(offsetof(RCCheckActor_SetAreaMoveStop, bInAreaMoveStop) == 0x000000, "Member 'RCCheckActor_SetAreaMoveStop::bInAreaMoveStop' has a wrong offset!");

// Function RC.RCCheckActor.SetCheckFinish
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_SetCheckFinish final
{
public:
	bool                                          bInCheck;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetCheckFinish) == 0x000001, "Wrong alignment on RCCheckActor_SetCheckFinish");
static_assert(sizeof(RCCheckActor_SetCheckFinish) == 0x000001, "Wrong size on RCCheckActor_SetCheckFinish");
static_assert(offsetof(RCCheckActor_SetCheckFinish, bInCheck) == 0x000000, "Member 'RCCheckActor_SetCheckFinish::bInCheck' has a wrong offset!");

// Function RC.RCCheckActor.SetCheckIconSetting
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_SetCheckIconSetting final
{
public:
	bool                                          bInCheckIcon;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetCheckIconSetting) == 0x000001, "Wrong alignment on RCCheckActor_SetCheckIconSetting");
static_assert(sizeof(RCCheckActor_SetCheckIconSetting) == 0x000001, "Wrong size on RCCheckActor_SetCheckIconSetting");
static_assert(offsetof(RCCheckActor_SetCheckIconSetting, bInCheckIcon) == 0x000000, "Member 'RCCheckActor_SetCheckIconSetting::bInCheckIcon' has a wrong offset!");

// Function RC.RCCheckActor.SetCheckNameTextId
// 0x0008 (0x0008 - 0x0000)
struct RCCheckActor_SetCheckNameTextId final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetCheckNameTextId) == 0x000004, "Wrong alignment on RCCheckActor_SetCheckNameTextId");
static_assert(sizeof(RCCheckActor_SetCheckNameTextId) == 0x000008, "Wrong size on RCCheckActor_SetCheckNameTextId");
static_assert(offsetof(RCCheckActor_SetCheckNameTextId, InTextID) == 0x000000, "Member 'RCCheckActor_SetCheckNameTextId::InTextID' has a wrong offset!");

// Function RC.RCCheckActor.SetCheckSetting
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_SetCheckSetting final
{
public:
	bool                                          bInCheck;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetCheckSetting) == 0x000001, "Wrong alignment on RCCheckActor_SetCheckSetting");
static_assert(sizeof(RCCheckActor_SetCheckSetting) == 0x000001, "Wrong size on RCCheckActor_SetCheckSetting");
static_assert(offsetof(RCCheckActor_SetCheckSetting, bInCheck) == 0x000000, "Member 'RCCheckActor_SetCheckSetting::bInCheck' has a wrong offset!");

// Function RC.RCCheckActor.SetFigureNum
// 0x0004 (0x0004 - 0x0000)
struct RCCheckActor_SetFigureNum final
{
public:
	int32                                         InFigureNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetFigureNum) == 0x000004, "Wrong alignment on RCCheckActor_SetFigureNum");
static_assert(sizeof(RCCheckActor_SetFigureNum) == 0x000004, "Wrong size on RCCheckActor_SetFigureNum");
static_assert(offsetof(RCCheckActor_SetFigureNum, InFigureNum) == 0x000000, "Member 'RCCheckActor_SetFigureNum::InFigureNum' has a wrong offset!");

// Function RC.RCCheckActor.SetFigurePersonID
// 0x0008 (0x0008 - 0x0000)
struct RCCheckActor_SetFigurePersonID final
{
public:
	class FName                                   InFigurePersonID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetFigurePersonID) == 0x000004, "Wrong alignment on RCCheckActor_SetFigurePersonID");
static_assert(sizeof(RCCheckActor_SetFigurePersonID) == 0x000008, "Wrong size on RCCheckActor_SetFigurePersonID");
static_assert(offsetof(RCCheckActor_SetFigurePersonID, InFigurePersonID) == 0x000000, "Member 'RCCheckActor_SetFigurePersonID::InFigurePersonID' has a wrong offset!");

// Function RC.RCCheckActor.SetNextMapID
// 0x0008 (0x0008 - 0x0000)
struct RCCheckActor_SetNextMapID final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetNextMapID) == 0x000004, "Wrong alignment on RCCheckActor_SetNextMapID");
static_assert(sizeof(RCCheckActor_SetNextMapID) == 0x000008, "Wrong size on RCCheckActor_SetNextMapID");
static_assert(offsetof(RCCheckActor_SetNextMapID, InMapID) == 0x000000, "Member 'RCCheckActor_SetNextMapID::InMapID' has a wrong offset!");

// Function RC.RCCheckActor.SetNextPlayerStartName
// 0x0008 (0x0008 - 0x0000)
struct RCCheckActor_SetNextPlayerStartName final
{
public:
	class FName                                   InPlayerStartName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetNextPlayerStartName) == 0x000004, "Wrong alignment on RCCheckActor_SetNextPlayerStartName");
static_assert(sizeof(RCCheckActor_SetNextPlayerStartName) == 0x000008, "Wrong size on RCCheckActor_SetNextPlayerStartName");
static_assert(offsetof(RCCheckActor_SetNextPlayerStartName, InPlayerStartName) == 0x000000, "Member 'RCCheckActor_SetNextPlayerStartName::InPlayerStartName' has a wrong offset!");

// Function RC.RCCheckActor.SetResearchVisionType
// 0x0001 (0x0001 - 0x0000)
struct RCCheckActor_SetResearchVisionType final
{
public:
	ERCRealCheckActorResearchVisionTimeType       InResearchVisionType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActor_SetResearchVisionType) == 0x000001, "Wrong alignment on RCCheckActor_SetResearchVisionType");
static_assert(sizeof(RCCheckActor_SetResearchVisionType) == 0x000001, "Wrong size on RCCheckActor_SetResearchVisionType");
static_assert(offsetof(RCCheckActor_SetResearchVisionType, InResearchVisionType) == 0x000000, "Member 'RCCheckActor_SetResearchVisionType::InResearchVisionType' has a wrong offset!");

// Function RC.RCCheckActorBFL.GetCheckActor
// 0x0010 (0x0010 - 0x0000)
struct RCCheckActorBFL_GetCheckActor final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCCheckActor*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActorBFL_GetCheckActor) == 0x000008, "Wrong alignment on RCCheckActorBFL_GetCheckActor");
static_assert(sizeof(RCCheckActorBFL_GetCheckActor) == 0x000010, "Wrong size on RCCheckActorBFL_GetCheckActor");
static_assert(offsetof(RCCheckActorBFL_GetCheckActor, InName) == 0x000000, "Member 'RCCheckActorBFL_GetCheckActor::InName' has a wrong offset!");
static_assert(offsetof(RCCheckActorBFL_GetCheckActor, ReturnValue) == 0x000008, "Member 'RCCheckActorBFL_GetCheckActor::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActorBFL.IsAreaMoveStop
// 0x000C (0x000C - 0x0000)
struct RCCheckActorBFL_IsAreaMoveStop final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCheckActorBFL_IsAreaMoveStop) == 0x000004, "Wrong alignment on RCCheckActorBFL_IsAreaMoveStop");
static_assert(sizeof(RCCheckActorBFL_IsAreaMoveStop) == 0x00000C, "Wrong size on RCCheckActorBFL_IsAreaMoveStop");
static_assert(offsetof(RCCheckActorBFL_IsAreaMoveStop, InName) == 0x000000, "Member 'RCCheckActorBFL_IsAreaMoveStop::InName' has a wrong offset!");
static_assert(offsetof(RCCheckActorBFL_IsAreaMoveStop, ReturnValue) == 0x000008, "Member 'RCCheckActorBFL_IsAreaMoveStop::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActorBFL.IsCheckFinish
// 0x000C (0x000C - 0x0000)
struct RCCheckActorBFL_IsCheckFinish final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCheckActorBFL_IsCheckFinish) == 0x000004, "Wrong alignment on RCCheckActorBFL_IsCheckFinish");
static_assert(sizeof(RCCheckActorBFL_IsCheckFinish) == 0x00000C, "Wrong size on RCCheckActorBFL_IsCheckFinish");
static_assert(offsetof(RCCheckActorBFL_IsCheckFinish, InName) == 0x000000, "Member 'RCCheckActorBFL_IsCheckFinish::InName' has a wrong offset!");
static_assert(offsetof(RCCheckActorBFL_IsCheckFinish, ReturnValue) == 0x000008, "Member 'RCCheckActorBFL_IsCheckFinish::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActorBFL.IsCheckSetting
// 0x000C (0x000C - 0x0000)
struct RCCheckActorBFL_IsCheckSetting final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCheckActorBFL_IsCheckSetting) == 0x000004, "Wrong alignment on RCCheckActorBFL_IsCheckSetting");
static_assert(sizeof(RCCheckActorBFL_IsCheckSetting) == 0x00000C, "Wrong size on RCCheckActorBFL_IsCheckSetting");
static_assert(offsetof(RCCheckActorBFL_IsCheckSetting, InName) == 0x000000, "Member 'RCCheckActorBFL_IsCheckSetting::InName' has a wrong offset!");
static_assert(offsetof(RCCheckActorBFL_IsCheckSetting, ReturnValue) == 0x000008, "Member 'RCCheckActorBFL_IsCheckSetting::ReturnValue' has a wrong offset!");

// Function RC.RCCheckActorBFL.SetAreaMoveStop
// 0x000C (0x000C - 0x0000)
struct RCCheckActorBFL_SetAreaMoveStop final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAreaMoveStop;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCheckActorBFL_SetAreaMoveStop) == 0x000004, "Wrong alignment on RCCheckActorBFL_SetAreaMoveStop");
static_assert(sizeof(RCCheckActorBFL_SetAreaMoveStop) == 0x00000C, "Wrong size on RCCheckActorBFL_SetAreaMoveStop");
static_assert(offsetof(RCCheckActorBFL_SetAreaMoveStop, InName) == 0x000000, "Member 'RCCheckActorBFL_SetAreaMoveStop::InName' has a wrong offset!");
static_assert(offsetof(RCCheckActorBFL_SetAreaMoveStop, bInAreaMoveStop) == 0x000008, "Member 'RCCheckActorBFL_SetAreaMoveStop::bInAreaMoveStop' has a wrong offset!");

// Function RC.RCCheckActorBFL.SetCheckFinish
// 0x000C (0x000C - 0x0000)
struct RCCheckActorBFL_SetCheckFinish final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCheck;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCheckActorBFL_SetCheckFinish) == 0x000004, "Wrong alignment on RCCheckActorBFL_SetCheckFinish");
static_assert(sizeof(RCCheckActorBFL_SetCheckFinish) == 0x00000C, "Wrong size on RCCheckActorBFL_SetCheckFinish");
static_assert(offsetof(RCCheckActorBFL_SetCheckFinish, InName) == 0x000000, "Member 'RCCheckActorBFL_SetCheckFinish::InName' has a wrong offset!");
static_assert(offsetof(RCCheckActorBFL_SetCheckFinish, bInCheck) == 0x000008, "Member 'RCCheckActorBFL_SetCheckFinish::bInCheck' has a wrong offset!");

// Function RC.RCCheckActorBFL.SetCheckSetting
// 0x000C (0x000C - 0x0000)
struct RCCheckActorBFL_SetCheckSetting final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCheck;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCheckActorBFL_SetCheckSetting) == 0x000004, "Wrong alignment on RCCheckActorBFL_SetCheckSetting");
static_assert(sizeof(RCCheckActorBFL_SetCheckSetting) == 0x00000C, "Wrong size on RCCheckActorBFL_SetCheckSetting");
static_assert(offsetof(RCCheckActorBFL_SetCheckSetting, InName) == 0x000000, "Member 'RCCheckActorBFL_SetCheckSetting::InName' has a wrong offset!");
static_assert(offsetof(RCCheckActorBFL_SetCheckSetting, bInCheck) == 0x000008, "Member 'RCCheckActorBFL_SetCheckSetting::bInCheck' has a wrong offset!");

// Function RC.RCCheckActorBFL.SetCheckSettings
// 0x0018 (0x0018 - 0x0000)
struct RCCheckActorBFL_SetCheckSettings final
{
public:
	class FString                                 InActorName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCheck;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCheckActorBFL_SetCheckSettings) == 0x000008, "Wrong alignment on RCCheckActorBFL_SetCheckSettings");
static_assert(sizeof(RCCheckActorBFL_SetCheckSettings) == 0x000018, "Wrong size on RCCheckActorBFL_SetCheckSettings");
static_assert(offsetof(RCCheckActorBFL_SetCheckSettings, InActorName) == 0x000000, "Member 'RCCheckActorBFL_SetCheckSettings::InActorName' has a wrong offset!");
static_assert(offsetof(RCCheckActorBFL_SetCheckSettings, bInCheck) == 0x000010, "Member 'RCCheckActorBFL_SetCheckSettings::bInCheck' has a wrong offset!");

// Function RC.RCCheckActorBox.OnActorBeginOverlapPlayerEntry
// 0x0010 (0x0010 - 0x0000)
struct RCCheckActorBox_OnActorBeginOverlapPlayerEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActorBox_OnActorBeginOverlapPlayerEntry) == 0x000008, "Wrong alignment on RCCheckActorBox_OnActorBeginOverlapPlayerEntry");
static_assert(sizeof(RCCheckActorBox_OnActorBeginOverlapPlayerEntry) == 0x000010, "Wrong size on RCCheckActorBox_OnActorBeginOverlapPlayerEntry");
static_assert(offsetof(RCCheckActorBox_OnActorBeginOverlapPlayerEntry, OverlappedActor) == 0x000000, "Member 'RCCheckActorBox_OnActorBeginOverlapPlayerEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCCheckActorBox_OnActorBeginOverlapPlayerEntry, OtherActor) == 0x000008, "Member 'RCCheckActorBox_OnActorBeginOverlapPlayerEntry::OtherActor' has a wrong offset!");

// Function RC.RCCheckActorBox.OnActorEndOverlapPlayerEntry
// 0x0010 (0x0010 - 0x0000)
struct RCCheckActorBox_OnActorEndOverlapPlayerEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCheckActorBox_OnActorEndOverlapPlayerEntry) == 0x000008, "Wrong alignment on RCCheckActorBox_OnActorEndOverlapPlayerEntry");
static_assert(sizeof(RCCheckActorBox_OnActorEndOverlapPlayerEntry) == 0x000010, "Wrong size on RCCheckActorBox_OnActorEndOverlapPlayerEntry");
static_assert(offsetof(RCCheckActorBox_OnActorEndOverlapPlayerEntry, OverlappedActor) == 0x000000, "Member 'RCCheckActorBox_OnActorEndOverlapPlayerEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCCheckActorBox_OnActorEndOverlapPlayerEntry, OtherActor) == 0x000008, "Member 'RCCheckActorBox_OnActorEndOverlapPlayerEntry::OtherActor' has a wrong offset!");

// Function RC.RCUiMenuCharacterViewer.OnButtonGuideClickEvent
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuCharacterViewer_OnButtonGuideClickEvent final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuCharacterViewer_OnButtonGuideClickEvent) == 0x000001, "Wrong alignment on RCUiMenuCharacterViewer_OnButtonGuideClickEvent");
static_assert(sizeof(RCUiMenuCharacterViewer_OnButtonGuideClickEvent) == 0x000001, "Wrong size on RCUiMenuCharacterViewer_OnButtonGuideClickEvent");
static_assert(offsetof(RCUiMenuCharacterViewer_OnButtonGuideClickEvent, KeyType) == 0x000000, "Member 'RCUiMenuCharacterViewer_OnButtonGuideClickEvent::KeyType' has a wrong offset!");

// Function RC.RCNzFinaleDetectiveBackGround.ChangeBackgroundImg
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleDetectiveBackGround_ChangeBackgroundImg final
{
public:
	const class UTexture*                         Texture;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleDetectiveBackGround_ChangeBackgroundImg) == 0x000008, "Wrong alignment on RCNzFinaleDetectiveBackGround_ChangeBackgroundImg");
static_assert(sizeof(RCNzFinaleDetectiveBackGround_ChangeBackgroundImg) == 0x000008, "Wrong size on RCNzFinaleDetectiveBackGround_ChangeBackgroundImg");
static_assert(offsetof(RCNzFinaleDetectiveBackGround_ChangeBackgroundImg, Texture) == 0x000000, "Member 'RCNzFinaleDetectiveBackGround_ChangeBackgroundImg::Texture' has a wrong offset!");

// Function RC.RCNzFinaleDetectiveBackGround.SetVisiblityBackground
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleDetectiveBackGround_SetVisiblityBackground final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleDetectiveBackGround_SetVisiblityBackground) == 0x000001, "Wrong alignment on RCNzFinaleDetectiveBackGround_SetVisiblityBackground");
static_assert(sizeof(RCNzFinaleDetectiveBackGround_SetVisiblityBackground) == 0x000001, "Wrong size on RCNzFinaleDetectiveBackGround_SetVisiblityBackground");
static_assert(offsetof(RCNzFinaleDetectiveBackGround_SetVisiblityBackground, IsVisible) == 0x000000, "Member 'RCNzFinaleDetectiveBackGround_SetVisiblityBackground::IsVisible' has a wrong offset!");

// Function RC.RCNzUiAssistCutin.GetAssistCutinStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiAssistCutin_GetAssistCutinStatus final
{
public:
	ERCNzUiAssistCutinStatus                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiAssistCutin_GetAssistCutinStatus) == 0x000001, "Wrong alignment on RCNzUiAssistCutin_GetAssistCutinStatus");
static_assert(sizeof(RCNzUiAssistCutin_GetAssistCutinStatus) == 0x000001, "Wrong size on RCNzUiAssistCutin_GetAssistCutinStatus");
static_assert(offsetof(RCNzUiAssistCutin_GetAssistCutinStatus, ReturnValue) == 0x000000, "Member 'RCNzUiAssistCutin_GetAssistCutinStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiAssistCutin.InitializeAssistCutin
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiAssistCutin_InitializeAssistCutin final
{
public:
	struct FSoftObjectPath                        InAssistImagePath;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiAssistCutin_InitializeAssistCutin) == 0x000008, "Wrong alignment on RCNzUiAssistCutin_InitializeAssistCutin");
static_assert(sizeof(RCNzUiAssistCutin_InitializeAssistCutin) == 0x000018, "Wrong size on RCNzUiAssistCutin_InitializeAssistCutin");
static_assert(offsetof(RCNzUiAssistCutin_InitializeAssistCutin, InAssistImagePath) == 0x000000, "Member 'RCNzUiAssistCutin_InitializeAssistCutin::InAssistImagePath' has a wrong offset!");

// Function RC.RCUiDetPoint.SetDetPoint
// 0x0004 (0x0004 - 0x0000)
struct RCUiDetPoint_SetDetPoint final
{
public:
	int32                                         InPoint;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiDetPoint_SetDetPoint) == 0x000004, "Wrong alignment on RCUiDetPoint_SetDetPoint");
static_assert(sizeof(RCUiDetPoint_SetDetPoint) == 0x000004, "Wrong size on RCUiDetPoint_SetDetPoint");
static_assert(offsetof(RCUiDetPoint_SetDetPoint, InPoint) == 0x000000, "Member 'RCUiDetPoint_SetDetPoint::InPoint' has a wrong offset!");

// Function RC.RCUiDetPoint.SetDetRank
// 0x0004 (0x0004 - 0x0000)
struct RCUiDetPoint_SetDetRank final
{
public:
	int32                                         InPoint;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiDetPoint_SetDetRank) == 0x000004, "Wrong alignment on RCUiDetPoint_SetDetRank");
static_assert(sizeof(RCUiDetPoint_SetDetRank) == 0x000004, "Wrong size on RCUiDetPoint_SetDetRank");
static_assert(offsetof(RCUiDetPoint_SetDetRank, InPoint) == 0x000000, "Member 'RCUiDetPoint_SetDetRank::InPoint' has a wrong offset!");

// Function RC.RCCineCameraActor.AtouchRain
// 0x000C (0x000C - 0x0000)
struct RCCineCameraActor_AtouchRain final
{
public:
	float                                         lenght;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Zfollow;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetZ;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCineCameraActor_AtouchRain) == 0x000004, "Wrong alignment on RCCineCameraActor_AtouchRain");
static_assert(sizeof(RCCineCameraActor_AtouchRain) == 0x00000C, "Wrong size on RCCineCameraActor_AtouchRain");
static_assert(offsetof(RCCineCameraActor_AtouchRain, lenght) == 0x000000, "Member 'RCCineCameraActor_AtouchRain::lenght' has a wrong offset!");
static_assert(offsetof(RCCineCameraActor_AtouchRain, Zfollow) == 0x000004, "Member 'RCCineCameraActor_AtouchRain::Zfollow' has a wrong offset!");
static_assert(offsetof(RCCineCameraActor_AtouchRain, OffsetZ) == 0x000008, "Member 'RCCineCameraActor_AtouchRain::OffsetZ' has a wrong offset!");

// Function RC.RCCineCameraActor.SetRainDistanceOffset
// 0x0004 (0x0004 - 0x0000)
struct RCCineCameraActor_SetRainDistanceOffset final
{
public:
	float                                         disntaceOffset;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCineCameraActor_SetRainDistanceOffset) == 0x000004, "Wrong alignment on RCCineCameraActor_SetRainDistanceOffset");
static_assert(sizeof(RCCineCameraActor_SetRainDistanceOffset) == 0x000004, "Wrong size on RCCineCameraActor_SetRainDistanceOffset");
static_assert(offsetof(RCCineCameraActor_SetRainDistanceOffset, disntaceOffset) == 0x000000, "Member 'RCCineCameraActor_SetRainDistanceOffset::disntaceOffset' has a wrong offset!");

// Function RC.RCCineCameraActor.SetRainHeightOffset
// 0x0004 (0x0004 - 0x0000)
struct RCCineCameraActor_SetRainHeightOffset final
{
public:
	float                                         heightOffset;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCineCameraActor_SetRainHeightOffset) == 0x000004, "Wrong alignment on RCCineCameraActor_SetRainHeightOffset");
static_assert(sizeof(RCCineCameraActor_SetRainHeightOffset) == 0x000004, "Wrong size on RCCineCameraActor_SetRainHeightOffset");
static_assert(offsetof(RCCineCameraActor_SetRainHeightOffset, heightOffset) == 0x000000, "Member 'RCCineCameraActor_SetRainHeightOffset::heightOffset' has a wrong offset!");

// Function RC.RCCineCameraActor.SetUseOffsetFlag
// 0x0001 (0x0001 - 0x0000)
struct RCCineCameraActor_SetUseOffsetFlag final
{
public:
	bool                                          bUseOffset;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCineCameraActor_SetUseOffsetFlag) == 0x000001, "Wrong alignment on RCCineCameraActor_SetUseOffsetFlag");
static_assert(sizeof(RCCineCameraActor_SetUseOffsetFlag) == 0x000001, "Wrong size on RCCineCameraActor_SetUseOffsetFlag");
static_assert(offsetof(RCCineCameraActor_SetUseOffsetFlag, bUseOffset) == 0x000000, "Member 'RCCineCameraActor_SetUseOffsetFlag::bUseOffset' has a wrong offset!");

// Function RC.RCCMNEventBFL.CamSwitch
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_CamSwitch final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCMNEventBFL_CamSwitch) == 0x000008, "Wrong alignment on RCCMNEventBFL_CamSwitch");
static_assert(sizeof(RCCMNEventBFL_CamSwitch) == 0x000018, "Wrong size on RCCMNEventBFL_CamSwitch");
static_assert(offsetof(RCCMNEventBFL_CamSwitch, InCamList) == 0x000000, "Member 'RCCMNEventBFL_CamSwitch::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_CamSwitch, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_CamSwitch::InCamIndex' has a wrong offset!");

// Function RC.RCCMNEventBFL.CamSwitchBlend
// 0x0020 (0x0020 - 0x0000)
struct RCCMNEventBFL_CamSwitchBlend final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendTime;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      InBlendFunc;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBlendExp;                                        // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_CamSwitchBlend) == 0x000008, "Wrong alignment on RCCMNEventBFL_CamSwitchBlend");
static_assert(sizeof(RCCMNEventBFL_CamSwitchBlend) == 0x000020, "Wrong size on RCCMNEventBFL_CamSwitchBlend");
static_assert(offsetof(RCCMNEventBFL_CamSwitchBlend, InCamList) == 0x000000, "Member 'RCCMNEventBFL_CamSwitchBlend::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_CamSwitchBlend, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_CamSwitchBlend::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_CamSwitchBlend, InBlendTime) == 0x000014, "Member 'RCCMNEventBFL_CamSwitchBlend::InBlendTime' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_CamSwitchBlend, InBlendFunc) == 0x000018, "Member 'RCCMNEventBFL_CamSwitchBlend::InBlendFunc' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_CamSwitchBlend, InBlendExp) == 0x00001C, "Member 'RCCMNEventBFL_CamSwitchBlend::InBlendExp' has a wrong offset!");

// Function RC.RCCMNEventBFL.CamSwitchBufReset
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_CamSwitchBufReset final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCMNEventBFL_CamSwitchBufReset) == 0x000008, "Wrong alignment on RCCMNEventBFL_CamSwitchBufReset");
static_assert(sizeof(RCCMNEventBFL_CamSwitchBufReset) == 0x000018, "Wrong size on RCCMNEventBFL_CamSwitchBufReset");
static_assert(offsetof(RCCMNEventBFL_CamSwitchBufReset, InCamList) == 0x000000, "Member 'RCCMNEventBFL_CamSwitchBufReset::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_CamSwitchBufReset, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_CamSwitchBufReset::InCamIndex' has a wrong offset!");

// Function RC.RCCMNEventBFL.InitCharacter
// 0x0010 (0x0010 - 0x0000)
struct RCCMNEventBFL_InitCharacter final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTargetPointName;                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_InitCharacter) == 0x000008, "Wrong alignment on RCCMNEventBFL_InitCharacter");
static_assert(sizeof(RCCMNEventBFL_InitCharacter) == 0x000010, "Wrong size on RCCMNEventBFL_InitCharacter");
static_assert(offsetof(RCCMNEventBFL_InitCharacter, InActor) == 0x000000, "Member 'RCCMNEventBFL_InitCharacter::InActor' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_InitCharacter, InTargetPointName) == 0x000008, "Member 'RCCMNEventBFL_InitCharacter::InTargetPointName' has a wrong offset!");

// Function RC.RCCMNEventBFL.ResetCharacter
// 0x0008 (0x0008 - 0x0000)
struct RCCMNEventBFL_ResetCharacter final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_ResetCharacter) == 0x000008, "Wrong alignment on RCCMNEventBFL_ResetCharacter");
static_assert(sizeof(RCCMNEventBFL_ResetCharacter) == 0x000008, "Wrong size on RCCMNEventBFL_ResetCharacter");
static_assert(offsetof(RCCMNEventBFL_ResetCharacter, InActor) == 0x000000, "Member 'RCCMNEventBFL_ResetCharacter::InActor' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamDistance
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamDistance final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDistance;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamDistance) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamDistance");
static_assert(sizeof(RCCMNEventBFL_SetCamDistance) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamDistance");
static_assert(offsetof(RCCMNEventBFL_SetCamDistance, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamDistance::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamDistance, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamDistance::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamDistance, InDistance) == 0x000014, "Member 'RCCMNEventBFL_SetCamDistance::InDistance' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamFocalLength
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamFocalLength final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFocalLength;                                     // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamFocalLength) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamFocalLength");
static_assert(sizeof(RCCMNEventBFL_SetCamFocalLength) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamFocalLength");
static_assert(offsetof(RCCMNEventBFL_SetCamFocalLength, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamFocalLength::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamFocalLength, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamFocalLength::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamFocalLength, InFocalLength) == 0x000014, "Member 'RCCMNEventBFL_SetCamFocalLength::InFocalLength' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamFocusOffset
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamFocusOffset final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFocusOffset;                                     // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamFocusOffset) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamFocusOffset");
static_assert(sizeof(RCCMNEventBFL_SetCamFocusOffset) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamFocusOffset");
static_assert(offsetof(RCCMNEventBFL_SetCamFocusOffset, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamFocusOffset::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamFocusOffset, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamFocusOffset::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamFocusOffset, InFocusOffset) == 0x000014, "Member 'RCCMNEventBFL_SetCamFocusOffset::InFocusOffset' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamMoveX
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamMoveX final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InX;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamMoveX) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamMoveX");
static_assert(sizeof(RCCMNEventBFL_SetCamMoveX) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamMoveX");
static_assert(offsetof(RCCMNEventBFL_SetCamMoveX, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamMoveX::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamMoveX, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamMoveX::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamMoveX, InX) == 0x000014, "Member 'RCCMNEventBFL_SetCamMoveX::InX' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamMoveY
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamMoveY final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InY;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamMoveY) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamMoveY");
static_assert(sizeof(RCCMNEventBFL_SetCamMoveY) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamMoveY");
static_assert(offsetof(RCCMNEventBFL_SetCamMoveY, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamMoveY::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamMoveY, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamMoveY::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamMoveY, InY) == 0x000014, "Member 'RCCMNEventBFL_SetCamMoveY::InY' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamMoveZ
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamMoveZ final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InZ;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamMoveZ) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamMoveZ");
static_assert(sizeof(RCCMNEventBFL_SetCamMoveZ) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamMoveZ");
static_assert(offsetof(RCCMNEventBFL_SetCamMoveZ, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamMoveZ::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamMoveZ, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamMoveZ::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamMoveZ, InZ) == 0x000014, "Member 'RCCMNEventBFL_SetCamMoveZ::InZ' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamPitch
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamPitch final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPitch;                                           // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamPitch) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamPitch");
static_assert(sizeof(RCCMNEventBFL_SetCamPitch) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamPitch");
static_assert(offsetof(RCCMNEventBFL_SetCamPitch, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamPitch::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamPitch, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamPitch::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamPitch, InPitch) == 0x000014, "Member 'RCCMNEventBFL_SetCamPitch::InPitch' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamRoll
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamRoll final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRoll;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamRoll) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamRoll");
static_assert(sizeof(RCCMNEventBFL_SetCamRoll) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamRoll");
static_assert(offsetof(RCCMNEventBFL_SetCamRoll, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamRoll::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamRoll, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamRoll::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamRoll, InRoll) == 0x000014, "Member 'RCCMNEventBFL_SetCamRoll::InRoll' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamVpY
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamVpY final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InY;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamVpY) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamVpY");
static_assert(sizeof(RCCMNEventBFL_SetCamVpY) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamVpY");
static_assert(offsetof(RCCMNEventBFL_SetCamVpY, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamVpY::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamVpY, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamVpY::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamVpY, InY) == 0x000014, "Member 'RCCMNEventBFL_SetCamVpY::InY' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamVpZ
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamVpZ final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InZ;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamVpZ) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamVpZ");
static_assert(sizeof(RCCMNEventBFL_SetCamVpZ) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamVpZ");
static_assert(offsetof(RCCMNEventBFL_SetCamVpZ, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamVpZ::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamVpZ, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamVpZ::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamVpZ, InZ) == 0x000014, "Member 'RCCMNEventBFL_SetCamVpZ::InZ' has a wrong offset!");

// Function RC.RCCMNEventBFL.SetCamYaw
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_SetCamYaw final
{
public:
	TArray<class ARCCineCameraActor*>             InCamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCamIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCMNEventBFL_SetCamYaw) == 0x000008, "Wrong alignment on RCCMNEventBFL_SetCamYaw");
static_assert(sizeof(RCCMNEventBFL_SetCamYaw) == 0x000018, "Wrong size on RCCMNEventBFL_SetCamYaw");
static_assert(offsetof(RCCMNEventBFL_SetCamYaw, InCamList) == 0x000000, "Member 'RCCMNEventBFL_SetCamYaw::InCamList' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamYaw, InCamIndex) == 0x000010, "Member 'RCCMNEventBFL_SetCamYaw::InCamIndex' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_SetCamYaw, InYaw) == 0x000014, "Member 'RCCMNEventBFL_SetCamYaw::InYaw' has a wrong offset!");

// Function RC.RCCMNEventBFL.WalkSpline
// 0x0018 (0x0018 - 0x0000)
struct RCCMNEventBFL_WalkSpline final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InSplineActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCMNEventBFL_WalkSpline) == 0x000008, "Wrong alignment on RCCMNEventBFL_WalkSpline");
static_assert(sizeof(RCCMNEventBFL_WalkSpline) == 0x000018, "Wrong size on RCCMNEventBFL_WalkSpline");
static_assert(offsetof(RCCMNEventBFL_WalkSpline, InActor) == 0x000000, "Member 'RCCMNEventBFL_WalkSpline::InActor' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_WalkSpline, InSplineActor) == 0x000008, "Member 'RCCMNEventBFL_WalkSpline::InSplineActor' has a wrong offset!");
static_assert(offsetof(RCCMNEventBFL_WalkSpline, InTime) == 0x000010, "Member 'RCCMNEventBFL_WalkSpline::InTime' has a wrong offset!");

// Function RC.RCUiMenuCommonTab.SetInputFromButtonGuide
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuCommonTab_SetInputFromButtonGuide final
{
public:
	ERCInputKeyType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuCommonTab_SetInputFromButtonGuide) == 0x000001, "Wrong alignment on RCUiMenuCommonTab_SetInputFromButtonGuide");
static_assert(sizeof(RCUiMenuCommonTab_SetInputFromButtonGuide) == 0x000001, "Wrong size on RCUiMenuCommonTab_SetInputFromButtonGuide");
static_assert(offsetof(RCUiMenuCommonTab_SetInputFromButtonGuide, InType) == 0x000000, "Member 'RCUiMenuCommonTab_SetInputFromButtonGuide::InType' has a wrong offset!");

// Function RC.RCUiMenuCommonTab.SetTabIconActive
// 0x0004 (0x0004 - 0x0000)
struct RCUiMenuCommonTab_SetTabIconActive final
{
public:
	int32                                         InActiveIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuCommonTab_SetTabIconActive) == 0x000004, "Wrong alignment on RCUiMenuCommonTab_SetTabIconActive");
static_assert(sizeof(RCUiMenuCommonTab_SetTabIconActive) == 0x000004, "Wrong size on RCUiMenuCommonTab_SetTabIconActive");
static_assert(offsetof(RCUiMenuCommonTab_SetTabIconActive, InActiveIndex) == 0x000000, "Member 'RCUiMenuCommonTab_SetTabIconActive::InActiveIndex' has a wrong offset!");

// Function RC.RCCollisionLibrary.SphereOverlapBlockingSingleByProfile
// 0x0068 (0x0068 - 0x0000)
struct RCCollisionLibrary_SphereOverlapBlockingSingleByProfile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x003C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x004C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile) == 0x000008, "Wrong alignment on RCCollisionLibrary_SphereOverlapBlockingSingleByProfile");
static_assert(sizeof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile) == 0x000068, "Wrong size on RCCollisionLibrary_SphereOverlapBlockingSingleByProfile");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, WorldContextObject) == 0x000000, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, Position) == 0x000008, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::Position' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, Radius) == 0x000014, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::Radius' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, ProfileName) == 0x000018, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, bTraceComplex) == 0x000020, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::bTraceComplex' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, ActorsToIgnore) == 0x000028, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, DrawDebugType) == 0x000038, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::DrawDebugType' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, bIgnoreSelf) == 0x000039, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, TraceColor) == 0x00003C, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::TraceColor' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, TraceHitColor) == 0x00004C, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::TraceHitColor' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, DrawTime) == 0x00005C, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::DrawTime' has a wrong offset!");
static_assert(offsetof(RCCollisionLibrary_SphereOverlapBlockingSingleByProfile, ReturnValue) == 0x000060, "Member 'RCCollisionLibrary_SphereOverlapBlockingSingleByProfile::ReturnValue' has a wrong offset!");

// Function RC.RCCompanionBFL.AddCharacter
// 0x0008 (0x0008 - 0x0000)
struct RCCompanionBFL_AddCharacter final
{
public:
	class AActor*                                 InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCompanionBFL_AddCharacter) == 0x000008, "Wrong alignment on RCCompanionBFL_AddCharacter");
static_assert(sizeof(RCCompanionBFL_AddCharacter) == 0x000008, "Wrong size on RCCompanionBFL_AddCharacter");
static_assert(offsetof(RCCompanionBFL_AddCharacter, InCharacter) == 0x000000, "Member 'RCCompanionBFL_AddCharacter::InCharacter' has a wrong offset!");

// Function RC.RCCompanionBFL.GetCharacterActor
// 0x0010 (0x0010 - 0x0000)
struct RCCompanionBFL_GetCharacterActor final
{
public:
	int32                                         InCompanionIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCCharacterRender*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCompanionBFL_GetCharacterActor) == 0x000008, "Wrong alignment on RCCompanionBFL_GetCharacterActor");
static_assert(sizeof(RCCompanionBFL_GetCharacterActor) == 0x000010, "Wrong size on RCCompanionBFL_GetCharacterActor");
static_assert(offsetof(RCCompanionBFL_GetCharacterActor, InCompanionIndex) == 0x000000, "Member 'RCCompanionBFL_GetCharacterActor::InCompanionIndex' has a wrong offset!");
static_assert(offsetof(RCCompanionBFL_GetCharacterActor, ReturnValue) == 0x000008, "Member 'RCCompanionBFL_GetCharacterActor::ReturnValue' has a wrong offset!");

// Function RC.RCCompanionBFL.RemoveCharacter
// 0x0008 (0x0008 - 0x0000)
struct RCCompanionBFL_RemoveCharacter final
{
public:
	class AActor*                                 InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCompanionBFL_RemoveCharacter) == 0x000008, "Wrong alignment on RCCompanionBFL_RemoveCharacter");
static_assert(sizeof(RCCompanionBFL_RemoveCharacter) == 0x000008, "Wrong size on RCCompanionBFL_RemoveCharacter");
static_assert(offsetof(RCCompanionBFL_RemoveCharacter, InCharacter) == 0x000000, "Member 'RCCompanionBFL_RemoveCharacter::InCharacter' has a wrong offset!");

// Function RC.RCCompanionBFL.SetCharacterVisible
// 0x0001 (0x0001 - 0x0000)
struct RCCompanionBFL_SetCharacterVisible final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCompanionBFL_SetCharacterVisible) == 0x000001, "Wrong alignment on RCCompanionBFL_SetCharacterVisible");
static_assert(sizeof(RCCompanionBFL_SetCharacterVisible) == 0x000001, "Wrong size on RCCompanionBFL_SetCharacterVisible");
static_assert(offsetof(RCCompanionBFL_SetCharacterVisible, bInVisible) == 0x000000, "Member 'RCCompanionBFL_SetCharacterVisible::bInVisible' has a wrong offset!");

// Function RC.RCPlayerCharacter.GetAnimCtrl
// 0x0008 (0x0008 - 0x0000)
struct RCPlayerCharacter_GetAnimCtrl final
{
public:
	class URCCharacterAnimCtrl*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlayerCharacter_GetAnimCtrl) == 0x000008, "Wrong alignment on RCPlayerCharacter_GetAnimCtrl");
static_assert(sizeof(RCPlayerCharacter_GetAnimCtrl) == 0x000008, "Wrong size on RCPlayerCharacter_GetAnimCtrl");
static_assert(offsetof(RCPlayerCharacter_GetAnimCtrl, ReturnValue) == 0x000000, "Member 'RCPlayerCharacter_GetAnimCtrl::ReturnValue' has a wrong offset!");

// Function RC.RCScriptBFL.GetValiable
// 0x0010 (0x0010 - 0x0000)
struct RCScriptBFL_GetValiable final
{
public:
	class FName                                   InVariable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCScriptBFL_GetValiable) == 0x000004, "Wrong alignment on RCScriptBFL_GetValiable");
static_assert(sizeof(RCScriptBFL_GetValiable) == 0x000010, "Wrong size on RCScriptBFL_GetValiable");
static_assert(offsetof(RCScriptBFL_GetValiable, InVariable) == 0x000000, "Member 'RCScriptBFL_GetValiable::InVariable' has a wrong offset!");
static_assert(offsetof(RCScriptBFL_GetValiable, InArrayIndex) == 0x000008, "Member 'RCScriptBFL_GetValiable::InArrayIndex' has a wrong offset!");
static_assert(offsetof(RCScriptBFL_GetValiable, ReturnValue) == 0x00000C, "Member 'RCScriptBFL_GetValiable::ReturnValue' has a wrong offset!");

// Function RC.RCScriptBFL.JampLabel
// 0x000C (0x000C - 0x0000)
struct RCScriptBFL_JampLabel final
{
public:
	class FName                                   StartLabelName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCScriptBFL_JampLabel) == 0x000004, "Wrong alignment on RCScriptBFL_JampLabel");
static_assert(sizeof(RCScriptBFL_JampLabel) == 0x00000C, "Wrong size on RCScriptBFL_JampLabel");
static_assert(offsetof(RCScriptBFL_JampLabel, StartLabelName) == 0x000000, "Member 'RCScriptBFL_JampLabel::StartLabelName' has a wrong offset!");
static_assert(offsetof(RCScriptBFL_JampLabel, ReturnValue) == 0x000008, "Member 'RCScriptBFL_JampLabel::ReturnValue' has a wrong offset!");

// Function RC.RCScriptBFL.SetNextLabel
// 0x0008 (0x0008 - 0x0000)
struct RCScriptBFL_SetNextLabel final
{
public:
	class FName                                   InLabelName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCScriptBFL_SetNextLabel) == 0x000004, "Wrong alignment on RCScriptBFL_SetNextLabel");
static_assert(sizeof(RCScriptBFL_SetNextLabel) == 0x000008, "Wrong size on RCScriptBFL_SetNextLabel");
static_assert(offsetof(RCScriptBFL_SetNextLabel, InLabelName) == 0x000000, "Member 'RCScriptBFL_SetNextLabel::InLabelName' has a wrong offset!");

// Function RC.RCScriptBFL.SetScriptPath
// 0x0008 (0x0008 - 0x0000)
struct RCScriptBFL_SetScriptPath final
{
public:
	class FName                                   InPathName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCScriptBFL_SetScriptPath) == 0x000004, "Wrong alignment on RCScriptBFL_SetScriptPath");
static_assert(sizeof(RCScriptBFL_SetScriptPath) == 0x000008, "Wrong size on RCScriptBFL_SetScriptPath");
static_assert(offsetof(RCScriptBFL_SetScriptPath, InPathName) == 0x000000, "Member 'RCScriptBFL_SetScriptPath::InPathName' has a wrong offset!");

// Function RC.RCScriptBFL.SetValiable
// 0x0010 (0x0010 - 0x0000)
struct RCScriptBFL_SetValiable final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVariable;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InArrayIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCScriptBFL_SetValiable) == 0x000004, "Wrong alignment on RCScriptBFL_SetValiable");
static_assert(sizeof(RCScriptBFL_SetValiable) == 0x000010, "Wrong size on RCScriptBFL_SetValiable");
static_assert(offsetof(RCScriptBFL_SetValiable, InValue) == 0x000000, "Member 'RCScriptBFL_SetValiable::InValue' has a wrong offset!");
static_assert(offsetof(RCScriptBFL_SetValiable, InVariable) == 0x000004, "Member 'RCScriptBFL_SetValiable::InVariable' has a wrong offset!");
static_assert(offsetof(RCScriptBFL_SetValiable, InArrayIndex) == 0x00000C, "Member 'RCScriptBFL_SetValiable::InArrayIndex' has a wrong offset!");

// Function RC.RCScriptBFL.StartScript
// 0x0014 (0x0014 - 0x0000)
struct RCScriptBFL_StartScript final
{
public:
	class FName                                   InScriptName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLabelName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCScriptBFL_StartScript) == 0x000004, "Wrong alignment on RCScriptBFL_StartScript");
static_assert(sizeof(RCScriptBFL_StartScript) == 0x000014, "Wrong size on RCScriptBFL_StartScript");
static_assert(offsetof(RCScriptBFL_StartScript, InScriptName) == 0x000000, "Member 'RCScriptBFL_StartScript::InScriptName' has a wrong offset!");
static_assert(offsetof(RCScriptBFL_StartScript, InLabelName) == 0x000008, "Member 'RCScriptBFL_StartScript::InLabelName' has a wrong offset!");
static_assert(offsetof(RCScriptBFL_StartScript, ReturnValue) == 0x000010, "Member 'RCScriptBFL_StartScript::ReturnValue' has a wrong offset!");

// Function RC.RCScriptBFL.StartScriptLineNo
// 0x0010 (0x0010 - 0x0000)
struct RCScriptBFL_StartScriptLineNo final
{
public:
	class FName                                   InScriptName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLineNo;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCScriptBFL_StartScriptLineNo) == 0x000004, "Wrong alignment on RCScriptBFL_StartScriptLineNo");
static_assert(sizeof(RCScriptBFL_StartScriptLineNo) == 0x000010, "Wrong size on RCScriptBFL_StartScriptLineNo");
static_assert(offsetof(RCScriptBFL_StartScriptLineNo, InScriptName) == 0x000000, "Member 'RCScriptBFL_StartScriptLineNo::InScriptName' has a wrong offset!");
static_assert(offsetof(RCScriptBFL_StartScriptLineNo, InLineNo) == 0x000008, "Member 'RCScriptBFL_StartScriptLineNo::InLineNo' has a wrong offset!");
static_assert(offsetof(RCScriptBFL_StartScriptLineNo, ReturnValue) == 0x00000C, "Member 'RCScriptBFL_StartScriptLineNo::ReturnValue' has a wrong offset!");

// Function RC.RCScriptBFL.StartScriptWork
// 0x0001 (0x0001 - 0x0000)
struct RCScriptBFL_StartScriptWork final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCScriptBFL_StartScriptWork) == 0x000001, "Wrong alignment on RCScriptBFL_StartScriptWork");
static_assert(sizeof(RCScriptBFL_StartScriptWork) == 0x000001, "Wrong size on RCScriptBFL_StartScriptWork");
static_assert(offsetof(RCScriptBFL_StartScriptWork, ReturnValue) == 0x000000, "Member 'RCScriptBFL_StartScriptWork::ReturnValue' has a wrong offset!");

// Function RC.RCCompanionTrigger.OnActorBeginOverlapScriptEntry
// 0x0010 (0x0010 - 0x0000)
struct RCCompanionTrigger_OnActorBeginOverlapScriptEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCompanionTrigger_OnActorBeginOverlapScriptEntry) == 0x000008, "Wrong alignment on RCCompanionTrigger_OnActorBeginOverlapScriptEntry");
static_assert(sizeof(RCCompanionTrigger_OnActorBeginOverlapScriptEntry) == 0x000010, "Wrong size on RCCompanionTrigger_OnActorBeginOverlapScriptEntry");
static_assert(offsetof(RCCompanionTrigger_OnActorBeginOverlapScriptEntry, OverlappedActor) == 0x000000, "Member 'RCCompanionTrigger_OnActorBeginOverlapScriptEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCCompanionTrigger_OnActorBeginOverlapScriptEntry, OtherActor) == 0x000008, "Member 'RCCompanionTrigger_OnActorBeginOverlapScriptEntry::OtherActor' has a wrong offset!");

// Function RC.RCCrossWalkController.GetCheckLength
// 0x0004 (0x0004 - 0x0000)
struct RCCrossWalkController_GetCheckLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCrossWalkController_GetCheckLength) == 0x000004, "Wrong alignment on RCCrossWalkController_GetCheckLength");
static_assert(sizeof(RCCrossWalkController_GetCheckLength) == 0x000004, "Wrong size on RCCrossWalkController_GetCheckLength");
static_assert(offsetof(RCCrossWalkController_GetCheckLength, ReturnValue) == 0x000000, "Member 'RCCrossWalkController_GetCheckLength::ReturnValue' has a wrong offset!");

// Function RC.RCCrossWalkController.GetCrossWalkActor
// 0x0010 (0x0010 - 0x0000)
struct RCCrossWalkController_GetCrossWalkActor final
{
public:
	int32                                         crossWalkIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCrossWalkController_GetCrossWalkActor) == 0x000008, "Wrong alignment on RCCrossWalkController_GetCrossWalkActor");
static_assert(sizeof(RCCrossWalkController_GetCrossWalkActor) == 0x000010, "Wrong size on RCCrossWalkController_GetCrossWalkActor");
static_assert(offsetof(RCCrossWalkController_GetCrossWalkActor, crossWalkIndex) == 0x000000, "Member 'RCCrossWalkController_GetCrossWalkActor::crossWalkIndex' has a wrong offset!");
static_assert(offsetof(RCCrossWalkController_GetCrossWalkActor, ReturnValue) == 0x000008, "Member 'RCCrossWalkController_GetCrossWalkActor::ReturnValue' has a wrong offset!");

// Function RC.RCCrossWalkController.GetThroughLength
// 0x0004 (0x0004 - 0x0000)
struct RCCrossWalkController_GetThroughLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCrossWalkController_GetThroughLength) == 0x000004, "Wrong alignment on RCCrossWalkController_GetThroughLength");
static_assert(sizeof(RCCrossWalkController_GetThroughLength) == 0x000004, "Wrong size on RCCrossWalkController_GetThroughLength");
static_assert(offsetof(RCCrossWalkController_GetThroughLength, ReturnValue) == 0x000000, "Member 'RCCrossWalkController_GetThroughLength::ReturnValue' has a wrong offset!");

// Function RC.RCCustomEventActor.GetEventName
// 0x0008 (0x0008 - 0x0000)
struct RCCustomEventActor_GetEventName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCustomEventActor_GetEventName) == 0x000004, "Wrong alignment on RCCustomEventActor_GetEventName");
static_assert(sizeof(RCCustomEventActor_GetEventName) == 0x000008, "Wrong size on RCCustomEventActor_GetEventName");
static_assert(offsetof(RCCustomEventActor_GetEventName, ReturnValue) == 0x000000, "Member 'RCCustomEventActor_GetEventName::ReturnValue' has a wrong offset!");

// Function RC.RCCustomEventBFL.OnEventStart
// 0x0014 (0x0014 - 0x0000)
struct RCCustomEventBFL_OnEventStart final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCCustomEventBFL_OnEventStart) == 0x000004, "Wrong alignment on RCCustomEventBFL_OnEventStart");
static_assert(sizeof(RCCustomEventBFL_OnEventStart) == 0x000014, "Wrong size on RCCustomEventBFL_OnEventStart");
static_assert(offsetof(RCCustomEventBFL_OnEventStart, InActorName) == 0x000000, "Member 'RCCustomEventBFL_OnEventStart::InActorName' has a wrong offset!");
static_assert(offsetof(RCCustomEventBFL_OnEventStart, InEventName) == 0x000008, "Member 'RCCustomEventBFL_OnEventStart::InEventName' has a wrong offset!");
static_assert(offsetof(RCCustomEventBFL_OnEventStart, ReturnValue) == 0x000010, "Member 'RCCustomEventBFL_OnEventStart::ReturnValue' has a wrong offset!");

// Function RC.RCCustomEventBFL.OnEventStarts
// 0x0018 (0x0018 - 0x0000)
struct RCCustomEventBFL_OnEventStarts final
{
public:
	class FString                                 InActorName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCCustomEventBFL_OnEventStarts) == 0x000008, "Wrong alignment on RCCustomEventBFL_OnEventStarts");
static_assert(sizeof(RCCustomEventBFL_OnEventStarts) == 0x000018, "Wrong size on RCCustomEventBFL_OnEventStarts");
static_assert(offsetof(RCCustomEventBFL_OnEventStarts, InActorName) == 0x000000, "Member 'RCCustomEventBFL_OnEventStarts::InActorName' has a wrong offset!");
static_assert(offsetof(RCCustomEventBFL_OnEventStarts, InEventName) == 0x000010, "Member 'RCCustomEventBFL_OnEventStarts::InEventName' has a wrong offset!");

// Function RC.RCDataConversionBP.GetUTF8
// 0x0020 (0x0020 - 0x0000)
struct RCDataConversionBP_GetUTF8 final
{
public:
	class FString                                 in_ansi_string;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDataConversionBP_GetUTF8) == 0x000008, "Wrong alignment on RCDataConversionBP_GetUTF8");
static_assert(sizeof(RCDataConversionBP_GetUTF8) == 0x000020, "Wrong size on RCDataConversionBP_GetUTF8");
static_assert(offsetof(RCDataConversionBP_GetUTF8, in_ansi_string) == 0x000000, "Member 'RCDataConversionBP_GetUTF8::in_ansi_string' has a wrong offset!");
static_assert(offsetof(RCDataConversionBP_GetUTF8, ReturnValue) == 0x000010, "Member 'RCDataConversionBP_GetUTF8::ReturnValue' has a wrong offset!");

// Function RC.RCDataConversionBP.TestPrint
// 0x0008 (0x0008 - 0x0000)
struct RCDataConversionBP_TestPrint final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDataConversionBP_TestPrint) == 0x000004, "Wrong alignment on RCDataConversionBP_TestPrint");
static_assert(sizeof(RCDataConversionBP_TestPrint) == 0x000008, "Wrong size on RCDataConversionBP_TestPrint");
static_assert(offsetof(RCDataConversionBP_TestPrint, ReturnValue) == 0x000000, "Member 'RCDataConversionBP_TestPrint::ReturnValue' has a wrong offset!");

// Function RC.RCUiGenericWindow.IsFinishGenericWindow
// 0x0001 (0x0001 - 0x0000)
struct RCUiGenericWindow_IsFinishGenericWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericWindow_IsFinishGenericWindow) == 0x000001, "Wrong alignment on RCUiGenericWindow_IsFinishGenericWindow");
static_assert(sizeof(RCUiGenericWindow_IsFinishGenericWindow) == 0x000001, "Wrong size on RCUiGenericWindow_IsFinishGenericWindow");
static_assert(offsetof(RCUiGenericWindow_IsFinishGenericWindow, ReturnValue) == 0x000000, "Member 'RCUiGenericWindow_IsFinishGenericWindow::ReturnValue' has a wrong offset!");

// Function RC.RCUiGenericWindow.IsGetButtonResult
// 0x0001 (0x0001 - 0x0000)
struct RCUiGenericWindow_IsGetButtonResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericWindow_IsGetButtonResult) == 0x000001, "Wrong alignment on RCUiGenericWindow_IsGetButtonResult");
static_assert(sizeof(RCUiGenericWindow_IsGetButtonResult) == 0x000001, "Wrong size on RCUiGenericWindow_IsGetButtonResult");
static_assert(offsetof(RCUiGenericWindow_IsGetButtonResult, ReturnValue) == 0x000000, "Member 'RCUiGenericWindow_IsGetButtonResult::ReturnValue' has a wrong offset!");

// Function RC.RCUiGenericWindow.Open
// 0x0004 (0x0004 - 0x0000)
struct RCUiGenericWindow_Open final
{
public:
	bool                                          bInIsShowButton;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsFocusTrue;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsAcceptCancel;                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsUseDefaultTextID;                             // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericWindow_Open) == 0x000001, "Wrong alignment on RCUiGenericWindow_Open");
static_assert(sizeof(RCUiGenericWindow_Open) == 0x000004, "Wrong size on RCUiGenericWindow_Open");
static_assert(offsetof(RCUiGenericWindow_Open, bInIsShowButton) == 0x000000, "Member 'RCUiGenericWindow_Open::bInIsShowButton' has a wrong offset!");
static_assert(offsetof(RCUiGenericWindow_Open, bInIsFocusTrue) == 0x000001, "Member 'RCUiGenericWindow_Open::bInIsFocusTrue' has a wrong offset!");
static_assert(offsetof(RCUiGenericWindow_Open, bInIsAcceptCancel) == 0x000002, "Member 'RCUiGenericWindow_Open::bInIsAcceptCancel' has a wrong offset!");
static_assert(offsetof(RCUiGenericWindow_Open, bInIsUseDefaultTextID) == 0x000003, "Member 'RCUiGenericWindow_Open::bInIsUseDefaultTextID' has a wrong offset!");

// Function RC.RCUiGenericWindow.SetButtonTextID
// 0x0010 (0x0010 - 0x0000)
struct RCUiGenericWindow_SetButtonTextID final
{
public:
	class FName                                   InCancelTextID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDecideTextID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericWindow_SetButtonTextID) == 0x000004, "Wrong alignment on RCUiGenericWindow_SetButtonTextID");
static_assert(sizeof(RCUiGenericWindow_SetButtonTextID) == 0x000010, "Wrong size on RCUiGenericWindow_SetButtonTextID");
static_assert(offsetof(RCUiGenericWindow_SetButtonTextID, InCancelTextID) == 0x000000, "Member 'RCUiGenericWindow_SetButtonTextID::InCancelTextID' has a wrong offset!");
static_assert(offsetof(RCUiGenericWindow_SetButtonTextID, InDecideTextID) == 0x000008, "Member 'RCUiGenericWindow_SetButtonTextID::InDecideTextID' has a wrong offset!");

// Function RC.RCUiGenericWindow.SetWindowStrings
// 0x0010 (0x0010 - 0x0000)
struct RCUiGenericWindow_SetWindowStrings final
{
public:
	TArray<class FString>                         InStringArray;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericWindow_SetWindowStrings) == 0x000008, "Wrong alignment on RCUiGenericWindow_SetWindowStrings");
static_assert(sizeof(RCUiGenericWindow_SetWindowStrings) == 0x000010, "Wrong size on RCUiGenericWindow_SetWindowStrings");
static_assert(offsetof(RCUiGenericWindow_SetWindowStrings, InStringArray) == 0x000000, "Member 'RCUiGenericWindow_SetWindowStrings::InStringArray' has a wrong offset!");

// Function RC.RCUiGenericWindow.SetWindowTextID
// 0x0008 (0x0008 - 0x0000)
struct RCUiGenericWindow_SetWindowTextID final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericWindow_SetWindowTextID) == 0x000004, "Wrong alignment on RCUiGenericWindow_SetWindowTextID");
static_assert(sizeof(RCUiGenericWindow_SetWindowTextID) == 0x000008, "Wrong size on RCUiGenericWindow_SetWindowTextID");
static_assert(offsetof(RCUiGenericWindow_SetWindowTextID, InTextID) == 0x000000, "Member 'RCUiGenericWindow_SetWindowTextID::InTextID' has a wrong offset!");

// Function RC.RCUiGenericWindow.SetWindowTextIDs
// 0x0010 (0x0010 - 0x0000)
struct RCUiGenericWindow_SetWindowTextIDs final
{
public:
	TArray<class FName>                           InTextIDArray;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericWindow_SetWindowTextIDs) == 0x000008, "Wrong alignment on RCUiGenericWindow_SetWindowTextIDs");
static_assert(sizeof(RCUiGenericWindow_SetWindowTextIDs) == 0x000010, "Wrong size on RCUiGenericWindow_SetWindowTextIDs");
static_assert(offsetof(RCUiGenericWindow_SetWindowTextIDs, InTextIDArray) == 0x000000, "Member 'RCUiGenericWindow_SetWindowTextIDs::InTextIDArray' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.AssistPlayAnim
// 0x0014 (0x0014 - 0x0000)
struct RCNazoBattleLevelScriptActor_AssistPlayAnim final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBlendTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_AssistPlayAnim) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_AssistPlayAnim");
static_assert(sizeof(RCNazoBattleLevelScriptActor_AssistPlayAnim) == 0x000014, "Wrong size on RCNazoBattleLevelScriptActor_AssistPlayAnim");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AssistPlayAnim, InMotionName) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_AssistPlayAnim::InMotionName' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AssistPlayAnim, InPlayRate) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_AssistPlayAnim::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AssistPlayAnim, bInLoop) == 0x00000C, "Member 'RCNazoBattleLevelScriptActor_AssistPlayAnim::bInLoop' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AssistPlayAnim, InBlendTime) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_AssistPlayAnim::InBlendTime' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.AttackFailure_Start
// 0x0014 (0x0014 - 0x0000)
struct RCNazoBattleLevelScriptActor_AttackFailure_Start final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleLSARebuttalAttackFailureType     FailureType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkID;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_AttackFailure_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_AttackFailure_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_AttackFailure_Start) == 0x000014, "Wrong size on RCNazoBattleLevelScriptActor_AttackFailure_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AttackFailure_Start, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_AttackFailure_Start::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AttackFailure_Start, RebuttalNo) == 0x000004, "Member 'RCNazoBattleLevelScriptActor_AttackFailure_Start::RebuttalNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AttackFailure_Start, FailureType) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_AttackFailure_Start::FailureType' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AttackFailure_Start, TalkID) == 0x00000C, "Member 'RCNazoBattleLevelScriptActor_AttackFailure_Start::TalkID' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.AttackSuccess_Start
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActor_AttackSuccess_Start final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_AttackSuccess_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_AttackSuccess_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_AttackSuccess_Start) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActor_AttackSuccess_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AttackSuccess_Start, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_AttackSuccess_Start::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AttackSuccess_Start, RebuttalNo) == 0x000004, "Member 'RCNazoBattleLevelScriptActor_AttackSuccess_Start::RebuttalNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_AttackSuccess_Start, TalkID) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_AttackSuccess_Start::TalkID' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.BattleStartUI_IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_BattleStartUI_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_BattleStartUI_IsFinished) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_BattleStartUI_IsFinished");
static_assert(sizeof(RCNazoBattleLevelScriptActor_BattleStartUI_IsFinished) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_BattleStartUI_IsFinished");
static_assert(offsetof(RCNazoBattleLevelScriptActor_BattleStartUI_IsFinished, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_BattleStartUI_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.BattleStartUI_Start
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_BattleStartUI_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_BattleStartUI_Start) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_BattleStartUI_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_BattleStartUI_Start) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_BattleStartUI_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_BattleStartUI_Start, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_BattleStartUI_Start::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.BattleUI_ChangeKaiKagi
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_BattleUI_ChangeKaiKagi final
{
public:
	class FName                                   InKaiKagiID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_BattleUI_ChangeKaiKagi) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_BattleUI_ChangeKaiKagi");
static_assert(sizeof(RCNazoBattleLevelScriptActor_BattleUI_ChangeKaiKagi) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_BattleUI_ChangeKaiKagi");
static_assert(offsetof(RCNazoBattleLevelScriptActor_BattleUI_ChangeKaiKagi, InKaiKagiID) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_BattleUI_ChangeKaiKagi::InKaiKagiID' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.BattleUI_SetKaiKagiID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_BattleUI_SetKaiKagiID final
{
public:
	class FName                                   InKaiKagiID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_BattleUI_SetKaiKagiID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_BattleUI_SetKaiKagiID");
static_assert(sizeof(RCNazoBattleLevelScriptActor_BattleUI_SetKaiKagiID) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_BattleUI_SetKaiKagiID");
static_assert(offsetof(RCNazoBattleLevelScriptActor_BattleUI_SetKaiKagiID, InKaiKagiID) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_BattleUI_SetKaiKagiID::InKaiKagiID' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.BattleUI_Start
// 0x0002 (0x0002 - 0x0000)
struct RCNazoBattleLevelScriptActor_BattleUI_Start final
{
public:
	bool                                          bInOpenKaiKagi;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInOpenPlayerHP;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_BattleUI_Start) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_BattleUI_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_BattleUI_Start) == 0x000002, "Wrong size on RCNazoBattleLevelScriptActor_BattleUI_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_BattleUI_Start, bInOpenKaiKagi) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_BattleUI_Start::bInOpenKaiKagi' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_BattleUI_Start, bInOpenPlayerHP) == 0x000001, "Member 'RCNazoBattleLevelScriptActor_BattleUI_Start::bInOpenPlayerHP' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.ChangeCamera
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_ChangeCamera final
{
public:
	class ACameraActor*                           Camera;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActor_ChangeCamera) == 0x000008, "Wrong alignment on RCNazoBattleLevelScriptActor_ChangeCamera");
static_assert(sizeof(RCNazoBattleLevelScriptActor_ChangeCamera) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_ChangeCamera");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangeCamera, Camera) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_ChangeCamera::Camera' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangeCamera, BlendTime) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_ChangeCamera::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangeCamera, BlendFunc) == 0x00000C, "Member 'RCNazoBattleLevelScriptActor_ChangeCamera::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangeCamera, BlendExp) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_ChangeCamera::BlendExp' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.ChangeCameraFromTag
// 0x0014 (0x0014 - 0x0000)
struct RCNazoBattleLevelScriptActor_ChangeCameraFromTag final
{
public:
	class FName                                   CameraTag;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_ChangeCameraFromTag) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_ChangeCameraFromTag");
static_assert(sizeof(RCNazoBattleLevelScriptActor_ChangeCameraFromTag) == 0x000014, "Wrong size on RCNazoBattleLevelScriptActor_ChangeCameraFromTag");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangeCameraFromTag, CameraTag) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_ChangeCameraFromTag::CameraTag' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangeCameraFromTag, BlendTime) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_ChangeCameraFromTag::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangeCameraFromTag, BlendFunc) == 0x00000C, "Member 'RCNazoBattleLevelScriptActor_ChangeCameraFromTag::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangeCameraFromTag, BlendExp) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_ChangeCameraFromTag::BlendExp' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.ChangePhaseEvent
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_ChangePhaseEvent final
{
public:
	ERCNazoBattleLSAPhases                        BattlePhase;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_ChangePhaseEvent) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_ChangePhaseEvent");
static_assert(sizeof(RCNazoBattleLevelScriptActor_ChangePhaseEvent) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_ChangePhaseEvent");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangePhaseEvent, BattlePhase) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_ChangePhaseEvent::BattlePhase' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.ChangeStateEvent
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_ChangeStateEvent final
{
public:
	ERCNazoBattleLSAState                         BattleState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_ChangeStateEvent) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_ChangeStateEvent");
static_assert(sizeof(RCNazoBattleLevelScriptActor_ChangeStateEvent) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_ChangeStateEvent");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ChangeStateEvent, BattleState) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_ChangeStateEvent::BattleState' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.ClearEvent_Start
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_ClearEvent_Start final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TalkIDArray;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_ClearEvent_Start) == 0x000008, "Wrong alignment on RCNazoBattleLevelScriptActor_ClearEvent_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_ClearEvent_Start) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_ClearEvent_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ClearEvent_Start, TalkID) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_ClearEvent_Start::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_ClearEvent_Start, TalkIDArray) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_ClearEvent_Start::TalkIDArray' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.CloseContest_End
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_CloseContest_End final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_CloseContest_End) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_CloseContest_End");
static_assert(sizeof(RCNazoBattleLevelScriptActor_CloseContest_End) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_CloseContest_End");
static_assert(offsetof(RCNazoBattleLevelScriptActor_CloseContest_End, bSuccess) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_CloseContest_End::bSuccess' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.CloseContest_Start
// 0x0014 (0x0014 - 0x0000)
struct RCNazoBattleLevelScriptActor_CloseContest_Start final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailureDamage;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_CloseContest_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_CloseContest_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_CloseContest_Start) == 0x000014, "Wrong size on RCNazoBattleLevelScriptActor_CloseContest_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_CloseContest_Start, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_CloseContest_Start::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_CloseContest_Start, RebuttalNo) == 0x000004, "Member 'RCNazoBattleLevelScriptActor_CloseContest_Start::RebuttalNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_CloseContest_Start, InputTime) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_CloseContest_Start::InputTime' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_CloseContest_Start, InputCount) == 0x00000C, "Member 'RCNazoBattleLevelScriptActor_CloseContest_Start::InputCount' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_CloseContest_Start, FailureDamage) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_CloseContest_Start::FailureDamage' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.Confrontation_Start
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActor_Confrontation_Start final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstChallenge;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkID;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_Confrontation_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_Confrontation_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_Confrontation_Start) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActor_Confrontation_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_Confrontation_Start, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_Confrontation_Start::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_Confrontation_Start, bFirstChallenge) == 0x000004, "Member 'RCNazoBattleLevelScriptActor_Confrontation_Start::bFirstChallenge' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_Confrontation_Start, TalkID) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_Confrontation_Start::TalkID' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.DebugSetDrawHUD
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_DebugSetDrawHUD final
{
public:
	bool                                          bInDraw;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_DebugSetDrawHUD) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_DebugSetDrawHUD");
static_assert(sizeof(RCNazoBattleLevelScriptActor_DebugSetDrawHUD) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_DebugSetDrawHUD");
static_assert(offsetof(RCNazoBattleLevelScriptActor_DebugSetDrawHUD, bInDraw) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_DebugSetDrawHUD::bInDraw' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.DisturbLetterOnAttackDisable
// 0x0024 (0x0024 - 0x0000)
struct RCNazoBattleLevelScriptActor_DisturbLetterOnAttackDisable final
{
public:
	struct FRCNazoBattleDisturbLetterNotifyData   NotifyData;                                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_DisturbLetterOnAttackDisable) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_DisturbLetterOnAttackDisable");
static_assert(sizeof(RCNazoBattleLevelScriptActor_DisturbLetterOnAttackDisable) == 0x000024, "Wrong size on RCNazoBattleLevelScriptActor_DisturbLetterOnAttackDisable");
static_assert(offsetof(RCNazoBattleLevelScriptActor_DisturbLetterOnAttackDisable, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_DisturbLetterOnAttackDisable::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.DisturbLetterOnAttackEnable
// 0x0024 (0x0024 - 0x0000)
struct RCNazoBattleLevelScriptActor_DisturbLetterOnAttackEnable final
{
public:
	struct FRCNazoBattleDisturbLetterNotifyData   NotifyData;                                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_DisturbLetterOnAttackEnable) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_DisturbLetterOnAttackEnable");
static_assert(sizeof(RCNazoBattleLevelScriptActor_DisturbLetterOnAttackEnable) == 0x000024, "Wrong size on RCNazoBattleLevelScriptActor_DisturbLetterOnAttackEnable");
static_assert(offsetof(RCNazoBattleLevelScriptActor_DisturbLetterOnAttackEnable, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_DisturbLetterOnAttackEnable::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.DisturbLetterOnDamage
// 0x0024 (0x0024 - 0x0000)
struct RCNazoBattleLevelScriptActor_DisturbLetterOnDamage final
{
public:
	struct FRCNazoBattleDisturbLetterNotifyData   NotifyData;                                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_DisturbLetterOnDamage) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_DisturbLetterOnDamage");
static_assert(sizeof(RCNazoBattleLevelScriptActor_DisturbLetterOnDamage) == 0x000024, "Wrong size on RCNazoBattleLevelScriptActor_DisturbLetterOnDamage");
static_assert(offsetof(RCNazoBattleLevelScriptActor_DisturbLetterOnDamage, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_DisturbLetterOnDamage::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.DisturbLetterOnFinished
// 0x0024 (0x0024 - 0x0000)
struct RCNazoBattleLevelScriptActor_DisturbLetterOnFinished final
{
public:
	struct FRCNazoBattleDisturbLetterNotifyData   NotifyData;                                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_DisturbLetterOnFinished) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_DisturbLetterOnFinished");
static_assert(sizeof(RCNazoBattleLevelScriptActor_DisturbLetterOnFinished) == 0x000024, "Wrong size on RCNazoBattleLevelScriptActor_DisturbLetterOnFinished");
static_assert(offsetof(RCNazoBattleLevelScriptActor_DisturbLetterOnFinished, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_DisturbLetterOnFinished::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.DisturbLetterOnHit
// 0x0024 (0x0024 - 0x0000)
struct RCNazoBattleLevelScriptActor_DisturbLetterOnHit final
{
public:
	struct FRCNazoBattleDisturbLetterNotifyData   NotifyData;                                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_DisturbLetterOnHit) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_DisturbLetterOnHit");
static_assert(sizeof(RCNazoBattleLevelScriptActor_DisturbLetterOnHit) == 0x000024, "Wrong size on RCNazoBattleLevelScriptActor_DisturbLetterOnHit");
static_assert(offsetof(RCNazoBattleLevelScriptActor_DisturbLetterOnHit, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_DisturbLetterOnHit::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.DisturbLetterOnOut
// 0x0024 (0x0024 - 0x0000)
struct RCNazoBattleLevelScriptActor_DisturbLetterOnOut final
{
public:
	struct FRCNazoBattleDisturbLetterNotifyData   NotifyData;                                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_DisturbLetterOnOut) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_DisturbLetterOnOut");
static_assert(sizeof(RCNazoBattleLevelScriptActor_DisturbLetterOnOut) == 0x000024, "Wrong size on RCNazoBattleLevelScriptActor_DisturbLetterOnOut");
static_assert(offsetof(RCNazoBattleLevelScriptActor_DisturbLetterOnOut, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_DisturbLetterOnOut::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.DisturbLetterOnRepelled
// 0x0024 (0x0024 - 0x0000)
struct RCNazoBattleLevelScriptActor_DisturbLetterOnRepelled final
{
public:
	struct FRCNazoBattleDisturbLetterNotifyData   NotifyData;                                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_DisturbLetterOnRepelled) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_DisturbLetterOnRepelled");
static_assert(sizeof(RCNazoBattleLevelScriptActor_DisturbLetterOnRepelled) == 0x000024, "Wrong size on RCNazoBattleLevelScriptActor_DisturbLetterOnRepelled");
static_assert(offsetof(RCNazoBattleLevelScriptActor_DisturbLetterOnRepelled, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_DisturbLetterOnRepelled::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.DisturbLetterOnSlashed
// 0x0024 (0x0024 - 0x0000)
struct RCNazoBattleLevelScriptActor_DisturbLetterOnSlashed final
{
public:
	struct FRCNazoBattleDisturbLetterNotifyData   NotifyData;                                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_DisturbLetterOnSlashed) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_DisturbLetterOnSlashed");
static_assert(sizeof(RCNazoBattleLevelScriptActor_DisturbLetterOnSlashed) == 0x000024, "Wrong size on RCNazoBattleLevelScriptActor_DisturbLetterOnSlashed");
static_assert(offsetof(RCNazoBattleLevelScriptActor_DisturbLetterOnSlashed, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_DisturbLetterOnSlashed::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GameOver_Start
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_GameOver_Start final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HintTextId;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GameOver_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GameOver_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GameOver_Start) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_GameOver_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GameOver_Start, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GameOver_Start::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GameOver_Start, RebuttalNo) == 0x000004, "Member 'RCNazoBattleLevelScriptActor_GameOver_Start::RebuttalNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GameOver_Start, TalkID) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_GameOver_Start::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GameOver_Start, HintTextId) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_GameOver_Start::HintTextId' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetActiveRebuttalDataArray
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetActiveRebuttalDataArray final
{
public:
	TArray<struct FRCNazoBattleLSARebuttalData>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetActiveRebuttalDataArray) == 0x000008, "Wrong alignment on RCNazoBattleLevelScriptActor_GetActiveRebuttalDataArray");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetActiveRebuttalDataArray) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActor_GetActiveRebuttalDataArray");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetActiveRebuttalDataArray, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetActiveRebuttalDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalAttackFailureType
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalAttackFailureType final
{
public:
	ERCNazoBattleLSARebuttalAttackFailureType     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalAttackFailureType) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalAttackFailureType");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalAttackFailureType) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalAttackFailureType");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalAttackFailureType, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalAttackFailureType::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalAttackTalkID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalAttackTalkID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalAttackTalkID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalAttackTalkID");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalAttackTalkID) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalAttackTalkID");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalAttackTalkID, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalAttackTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalClearEventTalkID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkID");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkID) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkID");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkID, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalClearEventTalkIDArray
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkIDArray final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkIDArray) == 0x000008, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkIDArray");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkIDArray) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkIDArray");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkIDArray, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalClearEventTalkIDArray::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalCloseContestFailureDamage
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalCloseContestFailureDamage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalCloseContestFailureDamage) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalCloseContestFailureDamage");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalCloseContestFailureDamage) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalCloseContestFailureDamage");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalCloseContestFailureDamage, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalCloseContestFailureDamage::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalCloseContestInputCount
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputCount) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputCount");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputCount) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputCount");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputCount, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputCount::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalCloseContestInputTime
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputTime) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputTime");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputTime) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputTime");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputTime, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalCloseContestInputTime::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalConfrontationTalkID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalConfrontationTalkID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalConfrontationTalkID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalConfrontationTalkID");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalConfrontationTalkID) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalConfrontationTalkID");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalConfrontationTalkID, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalConfrontationTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalGameOverHintTextID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalGameOverHintTextID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalGameOverHintTextID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalGameOverHintTextID");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalGameOverHintTextID) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalGameOverHintTextID");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalGameOverHintTextID, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalGameOverHintTextID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalGameOverTalkID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalGameOverTalkID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalGameOverTalkID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalGameOverTalkID");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalGameOverTalkID) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalGameOverTalkID");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalGameOverTalkID, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalGameOverTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalGroupCurrentFirstChallenge
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentFirstChallenge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentFirstChallenge) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentFirstChallenge");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentFirstChallenge) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentFirstChallenge");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentFirstChallenge, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentFirstChallenge::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalGroupCurrentNo
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentNo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentNo) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentNo");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentNo) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentNo");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentNo, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalGroupCurrentNo::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalIntervalTalkID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalIntervalTalkID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalIntervalTalkID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalIntervalTalkID");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalIntervalTalkID) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalIntervalTalkID");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalIntervalTalkID, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalIntervalTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalNextRebuttalEventTalkID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalNextRebuttalEventTalkID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalNextRebuttalEventTalkID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalNextRebuttalEventTalkID");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalNextRebuttalEventTalkID) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalNextRebuttalEventTalkID");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalNextRebuttalEventTalkID, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalNextRebuttalEventTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalNoAtAttack
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalNoAtAttack final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalNoAtAttack) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalNoAtAttack");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalNoAtAttack) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalNoAtAttack");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalNoAtAttack, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalNoAtAttack::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalNoAtGameOver
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalNoAtGameOver final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalNoAtGameOver) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalNoAtGameOver");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalNoAtGameOver) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalNoAtGameOver");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalNoAtGameOver, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalNoAtGameOver::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetRebuttalPreEventTalkID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetRebuttalPreEventTalkID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetRebuttalPreEventTalkID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_GetRebuttalPreEventTalkID");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetRebuttalPreEventTalkID) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_GetRebuttalPreEventTalkID");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetRebuttalPreEventTalkID, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetRebuttalPreEventTalkID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.GetUseSpawnLetter
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_GetUseSpawnLetter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_GetUseSpawnLetter) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_GetUseSpawnLetter");
static_assert(sizeof(RCNazoBattleLevelScriptActor_GetUseSpawnLetter) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_GetUseSpawnLetter");
static_assert(offsetof(RCNazoBattleLevelScriptActor_GetUseSpawnLetter, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_GetUseSpawnLetter::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.Interval_Start
// 0x000C (0x000C - 0x0000)
struct RCNazoBattleLevelScriptActor_Interval_Start final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_Interval_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_Interval_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_Interval_Start) == 0x00000C, "Wrong size on RCNazoBattleLevelScriptActor_Interval_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_Interval_Start, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_Interval_Start::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_Interval_Start, TalkID) == 0x000004, "Member 'RCNazoBattleLevelScriptActor_Interval_Start::TalkID' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_IsInitialized) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_IsInitialized");
static_assert(sizeof(RCNazoBattleLevelScriptActor_IsInitialized) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_IsInitialized");
static_assert(offsetof(RCNazoBattleLevelScriptActor_IsInitialized, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_IsInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.KaijinPlayAnim
// 0x001C (0x001C - 0x0000)
struct RCNazoBattleLevelScriptActor_KaijinPlayAnim final
{
public:
	class FName                                   InKaijinTag;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBlendTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_KaijinPlayAnim) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_KaijinPlayAnim");
static_assert(sizeof(RCNazoBattleLevelScriptActor_KaijinPlayAnim) == 0x00001C, "Wrong size on RCNazoBattleLevelScriptActor_KaijinPlayAnim");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayAnim, InKaijinTag) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayAnim::InKaijinTag' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayAnim, InMotionName) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayAnim::InMotionName' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayAnim, InPlayRate) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayAnim::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayAnim, bInLoop) == 0x000014, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayAnim::bInLoop' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayAnim, InBlendTime) == 0x000018, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayAnim::InBlendTime' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.KaijinPlayLoopAnim
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim final
{
public:
	class FName                                   InKaijinTag;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendTime;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim");
static_assert(sizeof(RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim, InKaijinTag) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim::InKaijinTag' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim, InMotionName) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim::InMotionName' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim, InPlayRate) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim, InBlendTime) == 0x000014, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayLoopAnim::InBlendTime' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.KaijinPlayOneShotAnim
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim final
{
public:
	class FName                                   InKaijinTag;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendTime;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim");
static_assert(sizeof(RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim, InKaijinTag) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim::InKaijinTag' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim, InMotionName) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim::InMotionName' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim, InPlayRate) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim, InBlendTime) == 0x000014, "Member 'RCNazoBattleLevelScriptActor_KaijinPlayOneShotAnim::InBlendTime' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.KaiKagiList_Start
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_KaiKagiList_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_KaiKagiList_Start) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_KaiKagiList_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_KaiKagiList_Start) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_KaiKagiList_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaiKagiList_Start, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_KaiKagiList_Start::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.KaiKagiSelect_Decide
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActor_KaiKagiSelect_Decide final
{
public:
	int32                                         SelectIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_KaiKagiSelect_Decide) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_KaiKagiSelect_Decide");
static_assert(sizeof(RCNazoBattleLevelScriptActor_KaiKagiSelect_Decide) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActor_KaiKagiSelect_Decide");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaiKagiSelect_Decide, SelectIndex) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_KaiKagiSelect_Decide::SelectIndex' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.KaiKagiSelect_Finished
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActor_KaiKagiSelect_Finished final
{
public:
	int32                                         SelectIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_KaiKagiSelect_Finished) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_KaiKagiSelect_Finished");
static_assert(sizeof(RCNazoBattleLevelScriptActor_KaiKagiSelect_Finished) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActor_KaiKagiSelect_Finished");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaiKagiSelect_Finished, SelectIndex) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_KaiKagiSelect_Finished::SelectIndex' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.KaiKagiSelect_Start
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_KaiKagiSelect_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_KaiKagiSelect_Start) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_KaiKagiSelect_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_KaiKagiSelect_Start) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_KaiKagiSelect_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_KaiKagiSelect_Start, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_KaiKagiSelect_Start::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.NextRebuttalEvent_Start
// 0x000C (0x000C - 0x0000)
struct RCNazoBattleLevelScriptActor_NextRebuttalEvent_Start final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_NextRebuttalEvent_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_NextRebuttalEvent_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_NextRebuttalEvent_Start) == 0x00000C, "Wrong size on RCNazoBattleLevelScriptActor_NextRebuttalEvent_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_NextRebuttalEvent_Start, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_NextRebuttalEvent_Start::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_NextRebuttalEvent_Start, TalkID) == 0x000004, "Member 'RCNazoBattleLevelScriptActor_NextRebuttalEvent_Start::TalkID' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.PlayerDamage
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActor_PlayerDamage final
{
public:
	int32                                         InDamage;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActor_PlayerDamage) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_PlayerDamage");
static_assert(sizeof(RCNazoBattleLevelScriptActor_PlayerDamage) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActor_PlayerDamage");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerDamage, InDamage) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_PlayerDamage::InDamage' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerDamage, InMotionName) == 0x000004, "Member 'RCNazoBattleLevelScriptActor_PlayerDamage::InMotionName' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerDamage, ReturnValue) == 0x00000C, "Member 'RCNazoBattleLevelScriptActor_PlayerDamage::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.PlayerOnDamage
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_PlayerOnDamage final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_PlayerOnDamage) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_PlayerOnDamage");
static_assert(sizeof(RCNazoBattleLevelScriptActor_PlayerOnDamage) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_PlayerOnDamage");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerOnDamage, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_PlayerOnDamage::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.PlayerPlayAnim
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_PlayerPlayAnim final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBlendTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStartLoopMotion;                                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActor_PlayerPlayAnim) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_PlayerPlayAnim");
static_assert(sizeof(RCNazoBattleLevelScriptActor_PlayerPlayAnim) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_PlayerPlayAnim");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayAnim, InMotionName) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayAnim::InMotionName' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayAnim, InPlayRate) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayAnim::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayAnim, bInLoop) == 0x00000C, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayAnim::bInLoop' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayAnim, InBlendTime) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayAnim::InBlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayAnim, bInStartLoopMotion) == 0x000014, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayAnim::bInStartLoopMotion' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.PlayerPlayLoopAnim
// 0x0014 (0x0014 - 0x0000)
struct RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStartLoopMotion;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim");
static_assert(sizeof(RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim) == 0x000014, "Wrong size on RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim, InMotionName) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim::InMotionName' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim, InPlayRate) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim, InBlendTime) == 0x00000C, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim::InBlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim, bInStartLoopMotion) == 0x000010, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayLoopAnim::bInStartLoopMotion' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.PlayerPlayOneShotAnim
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim");
static_assert(sizeof(RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim, InMotionName) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim::InMotionName' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim, InPlayRate) == 0x000008, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim::InPlayRate' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim, InBlendTime) == 0x00000C, "Member 'RCNazoBattleLevelScriptActor_PlayerPlayOneShotAnim::InBlendTime' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.PreEvent_Start
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_PreEvent_Start final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_PreEvent_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_PreEvent_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_PreEvent_Start) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_PreEvent_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_PreEvent_Start, TalkID) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_PreEvent_Start::TalkID' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalKaijinCutin_Start
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalKaijinCutin_Start final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalKaijinCutin_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalKaijinCutin_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalKaijinCutin_Start) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalKaijinCutin_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalKaijinCutin_Start, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalKaijinCutin_Start::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalKaijinCutin_Start, RebuttalNo) == 0x000004, "Member 'RCNazoBattleLevelScriptActor_RebuttalKaijinCutin_Start::RebuttalNo' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalKaikagiList_Finished
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalKaikagiList_Finished final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalKaikagiList_Finished) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalKaikagiList_Finished");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalKaikagiList_Finished) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalKaikagiList_Finished");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalKaikagiList_Finished, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalKaikagiList_Finished::RebuttalGroupNo' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnAttackDisable
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackDisable final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackDisable) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackDisable");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackDisable) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackDisable");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackDisable, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackDisable::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnAttackEnable
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackEnable final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackEnable) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackEnable");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackEnable) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackEnable");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackEnable, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnAttackEnable::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnFinished
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnFinished final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnFinished) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnFinished");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnFinished) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnFinished");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnFinished, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnFinished::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnHit
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnHit final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnHit) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnHit");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnHit) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnHit");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnHit, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnHit::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnJustAvoidDisable
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidDisable final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidDisable) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidDisable");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidDisable) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidDisable");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidDisable, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidDisable::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnJustAvoidEnable
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidEnable final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidEnable) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidEnable");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidEnable) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidEnable");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidEnable, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnJustAvoidEnable::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnOut
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnOut final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnOut) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnOut");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnOut) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnOut");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnOut, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnOut::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnRepelled
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelled final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelled) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelled");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelled) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelled");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelled, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelled::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnRepelledHitKaijin
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledHitKaijin final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledHitKaijin) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledHitKaijin");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledHitKaijin) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledHitKaijin");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledHitKaijin, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledHitKaijin::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnRepelledPreventedByKaijin
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledPreventedByKaijin final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledPreventedByKaijin) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledPreventedByKaijin");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledPreventedByKaijin) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledPreventedByKaijin");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledPreventedByKaijin, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnRepelledPreventedByKaijin::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnSlashed
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashed final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashed) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashed");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashed) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashed");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashed, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashed::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.RebuttalLetterOnSlashStopped
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashStopped final
{
public:
	struct FRCNazoBattleRebuttalLetterNotifyData  NotifyData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashStopped) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashStopped");
static_assert(sizeof(RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashStopped) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashStopped");
static_assert(offsetof(RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashStopped, NotifyData) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_RebuttalLetterOnSlashStopped::NotifyData' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.SetBattleInputEnable
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_SetBattleInputEnable final
{
public:
	bool                                          bInInputEnable;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_SetBattleInputEnable) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_SetBattleInputEnable");
static_assert(sizeof(RCNazoBattleLevelScriptActor_SetBattleInputEnable) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_SetBattleInputEnable");
static_assert(offsetof(RCNazoBattleLevelScriptActor_SetBattleInputEnable, bInInputEnable) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_SetBattleInputEnable::bInInputEnable' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.SetRebuttalLetterCollisionVisibility
// 0x0002 (0x0002 - 0x0000)
struct RCNazoBattleLevelScriptActor_SetRebuttalLetterCollisionVisibility final
{
public:
	bool                                          bInHitCollisionVisibility;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInJustAvoidCollisionVisibility;                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_SetRebuttalLetterCollisionVisibility) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_SetRebuttalLetterCollisionVisibility");
static_assert(sizeof(RCNazoBattleLevelScriptActor_SetRebuttalLetterCollisionVisibility) == 0x000002, "Wrong size on RCNazoBattleLevelScriptActor_SetRebuttalLetterCollisionVisibility");
static_assert(offsetof(RCNazoBattleLevelScriptActor_SetRebuttalLetterCollisionVisibility, bInHitCollisionVisibility) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_SetRebuttalLetterCollisionVisibility::bInHitCollisionVisibility' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActor_SetRebuttalLetterCollisionVisibility, bInJustAvoidCollisionVisibility) == 0x000001, "Member 'RCNazoBattleLevelScriptActor_SetRebuttalLetterCollisionVisibility::bInJustAvoidCollisionVisibility' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActor.SetUseSpawnLetter
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActor_SetUseSpawnLetter final
{
public:
	bool                                          bInUseSpawnLetter;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActor_SetUseSpawnLetter) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActor_SetUseSpawnLetter");
static_assert(sizeof(RCNazoBattleLevelScriptActor_SetUseSpawnLetter) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActor_SetUseSpawnLetter");
static_assert(offsetof(RCNazoBattleLevelScriptActor_SetUseSpawnLetter, bInUseSpawnLetter) == 0x000000, "Member 'RCNazoBattleLevelScriptActor_SetUseSpawnLetter::bInUseSpawnLetter' has a wrong offset!");

// Function RC.RCSelectEventTrigger.IsOverlapPlayer
// 0x0001 (0x0001 - 0x0000)
struct RCSelectEventTrigger_IsOverlapPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSelectEventTrigger_IsOverlapPlayer) == 0x000001, "Wrong alignment on RCSelectEventTrigger_IsOverlapPlayer");
static_assert(sizeof(RCSelectEventTrigger_IsOverlapPlayer) == 0x000001, "Wrong size on RCSelectEventTrigger_IsOverlapPlayer");
static_assert(offsetof(RCSelectEventTrigger_IsOverlapPlayer, ReturnValue) == 0x000000, "Member 'RCSelectEventTrigger_IsOverlapPlayer::ReturnValue' has a wrong offset!");

// Function RC.RCDebugAutoPlayBFL.GetType
// 0x0001 (0x0001 - 0x0000)
struct RCDebugAutoPlayBFL_GetType final
{
public:
	ERCDebugAutoPlayType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDebugAutoPlayBFL_GetType) == 0x000001, "Wrong alignment on RCDebugAutoPlayBFL_GetType");
static_assert(sizeof(RCDebugAutoPlayBFL_GetType) == 0x000001, "Wrong size on RCDebugAutoPlayBFL_GetType");
static_assert(offsetof(RCDebugAutoPlayBFL_GetType, ReturnValue) == 0x000000, "Member 'RCDebugAutoPlayBFL_GetType::ReturnValue' has a wrong offset!");

// Function RC.RCDebugAutoPlayBFL.IsAutoSceneChange
// 0x0001 (0x0001 - 0x0000)
struct RCDebugAutoPlayBFL_IsAutoSceneChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDebugAutoPlayBFL_IsAutoSceneChange) == 0x000001, "Wrong alignment on RCDebugAutoPlayBFL_IsAutoSceneChange");
static_assert(sizeof(RCDebugAutoPlayBFL_IsAutoSceneChange) == 0x000001, "Wrong size on RCDebugAutoPlayBFL_IsAutoSceneChange");
static_assert(offsetof(RCDebugAutoPlayBFL_IsAutoSceneChange, ReturnValue) == 0x000000, "Member 'RCDebugAutoPlayBFL_IsAutoSceneChange::ReturnValue' has a wrong offset!");

// Function RC.RCDebugAutoPlayBFL.IsEnable
// 0x0001 (0x0001 - 0x0000)
struct RCDebugAutoPlayBFL_IsEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDebugAutoPlayBFL_IsEnable) == 0x000001, "Wrong alignment on RCDebugAutoPlayBFL_IsEnable");
static_assert(sizeof(RCDebugAutoPlayBFL_IsEnable) == 0x000001, "Wrong size on RCDebugAutoPlayBFL_IsEnable");
static_assert(offsetof(RCDebugAutoPlayBFL_IsEnable, ReturnValue) == 0x000000, "Member 'RCDebugAutoPlayBFL_IsEnable::ReturnValue' has a wrong offset!");

// Function RC.RCDebugAutoPlayBFL.IsSceneLoop
// 0x0001 (0x0001 - 0x0000)
struct RCDebugAutoPlayBFL_IsSceneLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDebugAutoPlayBFL_IsSceneLoop) == 0x000001, "Wrong alignment on RCDebugAutoPlayBFL_IsSceneLoop");
static_assert(sizeof(RCDebugAutoPlayBFL_IsSceneLoop) == 0x000001, "Wrong size on RCDebugAutoPlayBFL_IsSceneLoop");
static_assert(offsetof(RCDebugAutoPlayBFL_IsSceneLoop, ReturnValue) == 0x000000, "Member 'RCDebugAutoPlayBFL_IsSceneLoop::ReturnValue' has a wrong offset!");

// Function RC.RCDebugAutoPlayBFL.IsSkip
// 0x0001 (0x0001 - 0x0000)
struct RCDebugAutoPlayBFL_IsSkip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDebugAutoPlayBFL_IsSkip) == 0x000001, "Wrong alignment on RCDebugAutoPlayBFL_IsSkip");
static_assert(sizeof(RCDebugAutoPlayBFL_IsSkip) == 0x000001, "Wrong size on RCDebugAutoPlayBFL_IsSkip");
static_assert(offsetof(RCDebugAutoPlayBFL_IsSkip, ReturnValue) == 0x000000, "Member 'RCDebugAutoPlayBFL_IsSkip::ReturnValue' has a wrong offset!");

// Function RC.RCDebugAutoPlayBFL.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct RCDebugAutoPlayBFL_SetEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDebugAutoPlayBFL_SetEnable) == 0x000001, "Wrong alignment on RCDebugAutoPlayBFL_SetEnable");
static_assert(sizeof(RCDebugAutoPlayBFL_SetEnable) == 0x000001, "Wrong size on RCDebugAutoPlayBFL_SetEnable");
static_assert(offsetof(RCDebugAutoPlayBFL_SetEnable, bInEnable) == 0x000000, "Member 'RCDebugAutoPlayBFL_SetEnable::bInEnable' has a wrong offset!");

// Function RC.RCDebugAutoPlayBFL.SetSceneLoop
// 0x0001 (0x0001 - 0x0000)
struct RCDebugAutoPlayBFL_SetSceneLoop final
{
public:
	bool                                          bInSceneLoop;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDebugAutoPlayBFL_SetSceneLoop) == 0x000001, "Wrong alignment on RCDebugAutoPlayBFL_SetSceneLoop");
static_assert(sizeof(RCDebugAutoPlayBFL_SetSceneLoop) == 0x000001, "Wrong size on RCDebugAutoPlayBFL_SetSceneLoop");
static_assert(offsetof(RCDebugAutoPlayBFL_SetSceneLoop, bInSceneLoop) == 0x000000, "Member 'RCDebugAutoPlayBFL_SetSceneLoop::bInSceneLoop' has a wrong offset!");

// Function RC.RCDebugAutoPlayBFL.SetSkip
// 0x0001 (0x0001 - 0x0000)
struct RCDebugAutoPlayBFL_SetSkip final
{
public:
	bool                                          bInSkip;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDebugAutoPlayBFL_SetSkip) == 0x000001, "Wrong alignment on RCDebugAutoPlayBFL_SetSkip");
static_assert(sizeof(RCDebugAutoPlayBFL_SetSkip) == 0x000001, "Wrong size on RCDebugAutoPlayBFL_SetSkip");
static_assert(offsetof(RCDebugAutoPlayBFL_SetSkip, bInSkip) == 0x000000, "Member 'RCDebugAutoPlayBFL_SetSkip::bInSkip' has a wrong offset!");

// Function RC.RCDebugAutoPlayBFL.SetType
// 0x0001 (0x0001 - 0x0000)
struct RCDebugAutoPlayBFL_SetType final
{
public:
	ERCDebugAutoPlayType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDebugAutoPlayBFL_SetType) == 0x000001, "Wrong alignment on RCDebugAutoPlayBFL_SetType");
static_assert(sizeof(RCDebugAutoPlayBFL_SetType) == 0x000001, "Wrong size on RCDebugAutoPlayBFL_SetType");
static_assert(offsetof(RCDebugAutoPlayBFL_SetType, InType) == 0x000000, "Member 'RCDebugAutoPlayBFL_SetType::InType' has a wrong offset!");

// Function RC.RCWanderingSpiritActor.OnActorBeginOverlapPlayer
// 0x0010 (0x0010 - 0x0000)
struct RCWanderingSpiritActor_OnActorBeginOverlapPlayer final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWanderingSpiritActor_OnActorBeginOverlapPlayer) == 0x000008, "Wrong alignment on RCWanderingSpiritActor_OnActorBeginOverlapPlayer");
static_assert(sizeof(RCWanderingSpiritActor_OnActorBeginOverlapPlayer) == 0x000010, "Wrong size on RCWanderingSpiritActor_OnActorBeginOverlapPlayer");
static_assert(offsetof(RCWanderingSpiritActor_OnActorBeginOverlapPlayer, SelfActor) == 0x000000, "Member 'RCWanderingSpiritActor_OnActorBeginOverlapPlayer::SelfActor' has a wrong offset!");
static_assert(offsetof(RCWanderingSpiritActor_OnActorBeginOverlapPlayer, OtherActor) == 0x000008, "Member 'RCWanderingSpiritActor_OnActorBeginOverlapPlayer::OtherActor' has a wrong offset!");

// Function RC.RCWanderingSpiritActor.OnActorHitPlayer
// 0x00A8 (0x00A8 - 0x0000)
struct RCWanderingSpiritActor_OnActorHitPlayer final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCWanderingSpiritActor_OnActorHitPlayer) == 0x000008, "Wrong alignment on RCWanderingSpiritActor_OnActorHitPlayer");
static_assert(sizeof(RCWanderingSpiritActor_OnActorHitPlayer) == 0x0000A8, "Wrong size on RCWanderingSpiritActor_OnActorHitPlayer");
static_assert(offsetof(RCWanderingSpiritActor_OnActorHitPlayer, SelfActor) == 0x000000, "Member 'RCWanderingSpiritActor_OnActorHitPlayer::SelfActor' has a wrong offset!");
static_assert(offsetof(RCWanderingSpiritActor_OnActorHitPlayer, OtherActor) == 0x000008, "Member 'RCWanderingSpiritActor_OnActorHitPlayer::OtherActor' has a wrong offset!");
static_assert(offsetof(RCWanderingSpiritActor_OnActorHitPlayer, NormalImpulse) == 0x000010, "Member 'RCWanderingSpiritActor_OnActorHitPlayer::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RCWanderingSpiritActor_OnActorHitPlayer, Hit) == 0x00001C, "Member 'RCWanderingSpiritActor_OnActorHitPlayer::Hit' has a wrong offset!");

// Function RC.RCUiGenericButton.NativeTick
// 0x003C (0x003C - 0x0000)
struct RCUiGenericButton_NativeTick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericButton_NativeTick) == 0x000004, "Wrong alignment on RCUiGenericButton_NativeTick");
static_assert(sizeof(RCUiGenericButton_NativeTick) == 0x00003C, "Wrong size on RCUiGenericButton_NativeTick");
static_assert(offsetof(RCUiGenericButton_NativeTick, MyGeometry) == 0x000000, "Member 'RCUiGenericButton_NativeTick::MyGeometry' has a wrong offset!");
static_assert(offsetof(RCUiGenericButton_NativeTick, InDeltaTime) == 0x000038, "Member 'RCUiGenericButton_NativeTick::InDeltaTime' has a wrong offset!");

// Function RC.RCUiGenericButton.Open
// 0x000C (0x000C - 0x0000)
struct RCUiGenericButton_Open final
{
public:
	bool                                          bInIsFocusedTrue;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsAcceptCancel;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValidButtonNum;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsUseDefaultTextID;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUiGenericButton_Open) == 0x000004, "Wrong alignment on RCUiGenericButton_Open");
static_assert(sizeof(RCUiGenericButton_Open) == 0x00000C, "Wrong size on RCUiGenericButton_Open");
static_assert(offsetof(RCUiGenericButton_Open, bInIsFocusedTrue) == 0x000000, "Member 'RCUiGenericButton_Open::bInIsFocusedTrue' has a wrong offset!");
static_assert(offsetof(RCUiGenericButton_Open, bInIsAcceptCancel) == 0x000001, "Member 'RCUiGenericButton_Open::bInIsAcceptCancel' has a wrong offset!");
static_assert(offsetof(RCUiGenericButton_Open, InValidButtonNum) == 0x000004, "Member 'RCUiGenericButton_Open::InValidButtonNum' has a wrong offset!");
static_assert(offsetof(RCUiGenericButton_Open, bInIsUseDefaultTextID) == 0x000008, "Member 'RCUiGenericButton_Open::bInIsUseDefaultTextID' has a wrong offset!");

// Function RC.RCUiGenericButton.SetButtonTextID
// 0x0010 (0x0010 - 0x0000)
struct RCUiGenericButton_SetButtonTextID final
{
public:
	class FName                                   InCancelTextID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDecideTextID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericButton_SetButtonTextID) == 0x000004, "Wrong alignment on RCUiGenericButton_SetButtonTextID");
static_assert(sizeof(RCUiGenericButton_SetButtonTextID) == 0x000010, "Wrong size on RCUiGenericButton_SetButtonTextID");
static_assert(offsetof(RCUiGenericButton_SetButtonTextID, InCancelTextID) == 0x000000, "Member 'RCUiGenericButton_SetButtonTextID::InCancelTextID' has a wrong offset!");
static_assert(offsetof(RCUiGenericButton_SetButtonTextID, InDecideTextID) == 0x000008, "Member 'RCUiGenericButton_SetButtonTextID::InDecideTextID' has a wrong offset!");

// Function RC.RCUiGenericButton.WindowNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiGenericButton_WindowNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiGenericButton_WindowNavigation) == 0x000008, "Wrong alignment on RCUiGenericButton_WindowNavigation");
static_assert(sizeof(RCUiGenericButton_WindowNavigation) == 0x000010, "Wrong size on RCUiGenericButton_WindowNavigation");
static_assert(offsetof(RCUiGenericButton_WindowNavigation, InNavigation) == 0x000000, "Member 'RCUiGenericButton_WindowNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiGenericButton_WindowNavigation, ReturnValue) == 0x000008, "Member 'RCUiGenericButton_WindowNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.GetIsLoop
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManagerBFL_GetIsLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_GetIsLoop) == 0x000001, "Wrong alignment on RCMovieManagerBFL_GetIsLoop");
static_assert(sizeof(RCMovieManagerBFL_GetIsLoop) == 0x000001, "Wrong size on RCMovieManagerBFL_GetIsLoop");
static_assert(offsetof(RCMovieManagerBFL_GetIsLoop, ReturnValue) == 0x000000, "Member 'RCMovieManagerBFL_GetIsLoop::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.GetMovieIndex
// 0x0004 (0x0004 - 0x0000)
struct RCMovieManagerBFL_GetMovieIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_GetMovieIndex) == 0x000004, "Wrong alignment on RCMovieManagerBFL_GetMovieIndex");
static_assert(sizeof(RCMovieManagerBFL_GetMovieIndex) == 0x000004, "Wrong size on RCMovieManagerBFL_GetMovieIndex");
static_assert(offsetof(RCMovieManagerBFL_GetMovieIndex, ReturnValue) == 0x000000, "Member 'RCMovieManagerBFL_GetMovieIndex::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.GetMovieTime
// 0x0004 (0x0004 - 0x0000)
struct RCMovieManagerBFL_GetMovieTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_GetMovieTime) == 0x000004, "Wrong alignment on RCMovieManagerBFL_GetMovieTime");
static_assert(sizeof(RCMovieManagerBFL_GetMovieTime) == 0x000004, "Wrong size on RCMovieManagerBFL_GetMovieTime");
static_assert(offsetof(RCMovieManagerBFL_GetMovieTime, ReturnValue) == 0x000000, "Member 'RCMovieManagerBFL_GetMovieTime::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.IsAssetLoading
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManagerBFL_IsAssetLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_IsAssetLoading) == 0x000001, "Wrong alignment on RCMovieManagerBFL_IsAssetLoading");
static_assert(sizeof(RCMovieManagerBFL_IsAssetLoading) == 0x000001, "Wrong size on RCMovieManagerBFL_IsAssetLoading");
static_assert(offsetof(RCMovieManagerBFL_IsAssetLoading, ReturnValue) == 0x000000, "Member 'RCMovieManagerBFL_IsAssetLoading::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.IsLoadedMovie
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManagerBFL_IsLoadedMovie final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_IsLoadedMovie) == 0x000001, "Wrong alignment on RCMovieManagerBFL_IsLoadedMovie");
static_assert(sizeof(RCMovieManagerBFL_IsLoadedMovie) == 0x000001, "Wrong size on RCMovieManagerBFL_IsLoadedMovie");
static_assert(offsetof(RCMovieManagerBFL_IsLoadedMovie, ReturnValue) == 0x000000, "Member 'RCMovieManagerBFL_IsLoadedMovie::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.IsMovieCansel
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManagerBFL_IsMovieCansel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_IsMovieCansel) == 0x000001, "Wrong alignment on RCMovieManagerBFL_IsMovieCansel");
static_assert(sizeof(RCMovieManagerBFL_IsMovieCansel) == 0x000001, "Wrong size on RCMovieManagerBFL_IsMovieCansel");
static_assert(offsetof(RCMovieManagerBFL_IsMovieCansel, ReturnValue) == 0x000000, "Member 'RCMovieManagerBFL_IsMovieCansel::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.IsMovieEnd
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManagerBFL_IsMovieEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_IsMovieEnd) == 0x000001, "Wrong alignment on RCMovieManagerBFL_IsMovieEnd");
static_assert(sizeof(RCMovieManagerBFL_IsMovieEnd) == 0x000001, "Wrong size on RCMovieManagerBFL_IsMovieEnd");
static_assert(offsetof(RCMovieManagerBFL_IsMovieEnd, ReturnValue) == 0x000000, "Member 'RCMovieManagerBFL_IsMovieEnd::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.IsMoviePlaying
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManagerBFL_IsMoviePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_IsMoviePlaying) == 0x000001, "Wrong alignment on RCMovieManagerBFL_IsMoviePlaying");
static_assert(sizeof(RCMovieManagerBFL_IsMoviePlaying) == 0x000001, "Wrong size on RCMovieManagerBFL_IsMoviePlaying");
static_assert(offsetof(RCMovieManagerBFL_IsMoviePlaying, ReturnValue) == 0x000000, "Member 'RCMovieManagerBFL_IsMoviePlaying::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.Pause
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManagerBFL_Pause final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_Pause) == 0x000001, "Wrong alignment on RCMovieManagerBFL_Pause");
static_assert(sizeof(RCMovieManagerBFL_Pause) == 0x000001, "Wrong size on RCMovieManagerBFL_Pause");
static_assert(offsetof(RCMovieManagerBFL_Pause, IsPause) == 0x000000, "Member 'RCMovieManagerBFL_Pause::IsPause' has a wrong offset!");

// Function RC.RCMovieManagerBFL.ReadyMovieMaterial
// 0x0008 (0x0008 - 0x0000)
struct RCMovieManagerBFL_ReadyMovieMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_ReadyMovieMaterial) == 0x000008, "Wrong alignment on RCMovieManagerBFL_ReadyMovieMaterial");
static_assert(sizeof(RCMovieManagerBFL_ReadyMovieMaterial) == 0x000008, "Wrong size on RCMovieManagerBFL_ReadyMovieMaterial");
static_assert(offsetof(RCMovieManagerBFL_ReadyMovieMaterial, ReturnValue) == 0x000000, "Member 'RCMovieManagerBFL_ReadyMovieMaterial::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManagerBFL.SetBpMovieIndex
// 0x0004 (0x0004 - 0x0000)
struct RCMovieManagerBFL_SetBpMovieIndex final
{
public:
	int32                                         MovieIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_SetBpMovieIndex) == 0x000004, "Wrong alignment on RCMovieManagerBFL_SetBpMovieIndex");
static_assert(sizeof(RCMovieManagerBFL_SetBpMovieIndex) == 0x000004, "Wrong size on RCMovieManagerBFL_SetBpMovieIndex");
static_assert(offsetof(RCMovieManagerBFL_SetBpMovieIndex, MovieIndex) == 0x000000, "Member 'RCMovieManagerBFL_SetBpMovieIndex::MovieIndex' has a wrong offset!");

// Function RC.RCMovieManagerBFL.SetIsLoop
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManagerBFL_SetIsLoop final
{
public:
	bool                                          IsLoop;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_SetIsLoop) == 0x000001, "Wrong alignment on RCMovieManagerBFL_SetIsLoop");
static_assert(sizeof(RCMovieManagerBFL_SetIsLoop) == 0x000001, "Wrong size on RCMovieManagerBFL_SetIsLoop");
static_assert(offsetof(RCMovieManagerBFL_SetIsLoop, IsLoop) == 0x000000, "Member 'RCMovieManagerBFL_SetIsLoop::IsLoop' has a wrong offset!");

// Function RC.RCMovieManagerBFL.SetMovie
// 0x0020 (0x0020 - 0x0000)
struct RCMovieManagerBFL_SetMovie final
{
public:
	class FString                                 MovieID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCUserWidget*                          Widget;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCManaComponent*                       ManaComponent;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_SetMovie) == 0x000008, "Wrong alignment on RCMovieManagerBFL_SetMovie");
static_assert(sizeof(RCMovieManagerBFL_SetMovie) == 0x000020, "Wrong size on RCMovieManagerBFL_SetMovie");
static_assert(offsetof(RCMovieManagerBFL_SetMovie, MovieID) == 0x000000, "Member 'RCMovieManagerBFL_SetMovie::MovieID' has a wrong offset!");
static_assert(offsetof(RCMovieManagerBFL_SetMovie, Widget) == 0x000010, "Member 'RCMovieManagerBFL_SetMovie::Widget' has a wrong offset!");
static_assert(offsetof(RCMovieManagerBFL_SetMovie, ManaComponent) == 0x000018, "Member 'RCMovieManagerBFL_SetMovie::ManaComponent' has a wrong offset!");

// Function RC.RCMovieManagerBFL.SetOpeningMovieFLag
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManagerBFL_SetOpeningMovieFLag final
{
public:
	bool                                          isOpening;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_SetOpeningMovieFLag) == 0x000001, "Wrong alignment on RCMovieManagerBFL_SetOpeningMovieFLag");
static_assert(sizeof(RCMovieManagerBFL_SetOpeningMovieFLag) == 0x000001, "Wrong size on RCMovieManagerBFL_SetOpeningMovieFLag");
static_assert(offsetof(RCMovieManagerBFL_SetOpeningMovieFLag, isOpening) == 0x000000, "Member 'RCMovieManagerBFL_SetOpeningMovieFLag::isOpening' has a wrong offset!");

// Function RC.RCMovieManagerBFL.SetSaveDataMovieIndex
// 0x0004 (0x0004 - 0x0000)
struct RCMovieManagerBFL_SetSaveDataMovieIndex final
{
public:
	int32                                         MovieIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_SetSaveDataMovieIndex) == 0x000004, "Wrong alignment on RCMovieManagerBFL_SetSaveDataMovieIndex");
static_assert(sizeof(RCMovieManagerBFL_SetSaveDataMovieIndex) == 0x000004, "Wrong size on RCMovieManagerBFL_SetSaveDataMovieIndex");
static_assert(offsetof(RCMovieManagerBFL_SetSaveDataMovieIndex, MovieIndex) == 0x000000, "Member 'RCMovieManagerBFL_SetSaveDataMovieIndex::MovieIndex' has a wrong offset!");

// Function RC.RCMovieManagerBFL.SetSkipTime
// 0x0004 (0x0004 - 0x0000)
struct RCMovieManagerBFL_SetSkipTime final
{
public:
	float                                         skipTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManagerBFL_SetSkipTime) == 0x000004, "Wrong alignment on RCMovieManagerBFL_SetSkipTime");
static_assert(sizeof(RCMovieManagerBFL_SetSkipTime) == 0x000004, "Wrong size on RCMovieManagerBFL_SetSkipTime");
static_assert(offsetof(RCMovieManagerBFL_SetSkipTime, skipTime) == 0x000000, "Member 'RCMovieManagerBFL_SetSkipTime::skipTime' has a wrong offset!");

// Function RC.RCDollyCameraActor.CameraComponentActivated
// 0x0010 (0x0010 - 0x0000)
struct RCDollyCameraActor_CameraComponentActivated final
{
public:
	class UActorComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCDollyCameraActor_CameraComponentActivated) == 0x000008, "Wrong alignment on RCDollyCameraActor_CameraComponentActivated");
static_assert(sizeof(RCDollyCameraActor_CameraComponentActivated) == 0x000010, "Wrong size on RCDollyCameraActor_CameraComponentActivated");
static_assert(offsetof(RCDollyCameraActor_CameraComponentActivated, Comp) == 0x000000, "Member 'RCDollyCameraActor_CameraComponentActivated::Comp' has a wrong offset!");
static_assert(offsetof(RCDollyCameraActor_CameraComponentActivated, flag) == 0x000008, "Member 'RCDollyCameraActor_CameraComponentActivated::flag' has a wrong offset!");

// Function RC.RCDollyCameraActor.CameraComponentDeactivated
// 0x0008 (0x0008 - 0x0000)
struct RCDollyCameraActor_CameraComponentDeactivated final
{
public:
	class UActorComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDollyCameraActor_CameraComponentDeactivated) == 0x000008, "Wrong alignment on RCDollyCameraActor_CameraComponentDeactivated");
static_assert(sizeof(RCDollyCameraActor_CameraComponentDeactivated) == 0x000008, "Wrong size on RCDollyCameraActor_CameraComponentDeactivated");
static_assert(offsetof(RCDollyCameraActor_CameraComponentDeactivated, Comp) == 0x000000, "Member 'RCDollyCameraActor_CameraComponentDeactivated::Comp' has a wrong offset!");

// Function RC.RCDollyCameraActor.ResetTracking
// 0x0001 (0x0001 - 0x0000)
struct RCDollyCameraActor_ResetTracking final
{
public:
	bool                                          ResetRotation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDollyCameraActor_ResetTracking) == 0x000001, "Wrong alignment on RCDollyCameraActor_ResetTracking");
static_assert(sizeof(RCDollyCameraActor_ResetTracking) == 0x000001, "Wrong size on RCDollyCameraActor_ResetTracking");
static_assert(offsetof(RCDollyCameraActor_ResetTracking, ResetRotation) == 0x000000, "Member 'RCDollyCameraActor_ResetTracking::ResetRotation' has a wrong offset!");

// Function RC.RCDollyCameraActor.SetOffset
// 0x000C (0x000C - 0x0000)
struct RCDollyCameraActor_SetOffset final
{
public:
	struct FVector                                NewOffset;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDollyCameraActor_SetOffset) == 0x000004, "Wrong alignment on RCDollyCameraActor_SetOffset");
static_assert(sizeof(RCDollyCameraActor_SetOffset) == 0x00000C, "Wrong size on RCDollyCameraActor_SetOffset");
static_assert(offsetof(RCDollyCameraActor_SetOffset, NewOffset) == 0x000000, "Member 'RCDollyCameraActor_SetOffset::NewOffset' has a wrong offset!");

// Function RC.RCDollyCameraActor.SetTarget
// 0x0008 (0x0008 - 0x0000)
struct RCDollyCameraActor_SetTarget final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDollyCameraActor_SetTarget) == 0x000008, "Wrong alignment on RCDollyCameraActor_SetTarget");
static_assert(sizeof(RCDollyCameraActor_SetTarget) == 0x000008, "Wrong size on RCDollyCameraActor_SetTarget");
static_assert(offsetof(RCDollyCameraActor_SetTarget, NewTarget) == 0x000000, "Member 'RCDollyCameraActor_SetTarget::NewTarget' has a wrong offset!");

// Function RC.RCDollyCameraActor.IsTracking
// 0x0001 (0x0001 - 0x0000)
struct RCDollyCameraActor_IsTracking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCDollyCameraActor_IsTracking) == 0x000001, "Wrong alignment on RCDollyCameraActor_IsTracking");
static_assert(sizeof(RCDollyCameraActor_IsTracking) == 0x000001, "Wrong size on RCDollyCameraActor_IsTracking");
static_assert(offsetof(RCDollyCameraActor_IsTracking, ReturnValue) == 0x000000, "Member 'RCDollyCameraActor_IsTracking::ReturnValue' has a wrong offset!");

// Function RC.RCTitleGalleryBGMList.BGMNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCTitleGalleryBGMList_BGMNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleGalleryBGMList_BGMNavigation) == 0x000008, "Wrong alignment on RCTitleGalleryBGMList_BGMNavigation");
static_assert(sizeof(RCTitleGalleryBGMList_BGMNavigation) == 0x000010, "Wrong size on RCTitleGalleryBGMList_BGMNavigation");
static_assert(offsetof(RCTitleGalleryBGMList_BGMNavigation, InNavigation) == 0x000000, "Member 'RCTitleGalleryBGMList_BGMNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTitleGalleryBGMList_BGMNavigation, ReturnValue) == 0x000008, "Member 'RCTitleGalleryBGMList_BGMNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCNzResult._CloseResultWrap
// 0x0001 (0x0001 - 0x0000)
struct RCNzResult_mCloseResultWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzResult_mCloseResultWrap) == 0x000001, "Wrong alignment on RCNzResult_mCloseResultWrap");
static_assert(sizeof(RCNzResult_mCloseResultWrap) == 0x000001, "Wrong size on RCNzResult_mCloseResultWrap");
static_assert(offsetof(RCNzResult_mCloseResultWrap, InKeyType) == 0x000000, "Member 'RCNzResult_mCloseResultWrap::InKeyType' has a wrong offset!");

// Function RC.RCNzResult._OffDetailWrap
// 0x0001 (0x0001 - 0x0000)
struct RCNzResult_mOffDetailWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzResult_mOffDetailWrap) == 0x000001, "Wrong alignment on RCNzResult_mOffDetailWrap");
static_assert(sizeof(RCNzResult_mOffDetailWrap) == 0x000001, "Wrong size on RCNzResult_mOffDetailWrap");
static_assert(offsetof(RCNzResult_mOffDetailWrap, InKeyType) == 0x000000, "Member 'RCNzResult_mOffDetailWrap::InKeyType' has a wrong offset!");

// Function RC.RCNzResult._OnDetailWrap
// 0x0001 (0x0001 - 0x0000)
struct RCNzResult_mOnDetailWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzResult_mOnDetailWrap) == 0x000001, "Wrong alignment on RCNzResult_mOnDetailWrap");
static_assert(sizeof(RCNzResult_mOnDetailWrap) == 0x000001, "Wrong size on RCNzResult_mOnDetailWrap");
static_assert(offsetof(RCNzResult_mOnDetailWrap, InKeyType) == 0x000000, "Member 'RCNzResult_mOnDetailWrap::InKeyType' has a wrong offset!");

// Function RC.RCTitleHUD.CheckNzResultClose
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUD_CheckNzResultClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUD_CheckNzResultClose) == 0x000001, "Wrong alignment on RCTitleHUD_CheckNzResultClose");
static_assert(sizeof(RCTitleHUD_CheckNzResultClose) == 0x000001, "Wrong size on RCTitleHUD_CheckNzResultClose");
static_assert(offsetof(RCTitleHUD_CheckNzResultClose, ReturnValue) == 0x000000, "Member 'RCTitleHUD_CheckNzResultClose::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUD.CheckNzResultFinished
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUD_CheckNzResultFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUD_CheckNzResultFinished) == 0x000001, "Wrong alignment on RCTitleHUD_CheckNzResultFinished");
static_assert(sizeof(RCTitleHUD_CheckNzResultFinished) == 0x000001, "Wrong size on RCTitleHUD_CheckNzResultFinished");
static_assert(offsetof(RCTitleHUD_CheckNzResultFinished, ReturnValue) == 0x000000, "Member 'RCTitleHUD_CheckNzResultFinished::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUD.CheckNzResultStarted
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUD_CheckNzResultStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUD_CheckNzResultStarted) == 0x000001, "Wrong alignment on RCTitleHUD_CheckNzResultStarted");
static_assert(sizeof(RCTitleHUD_CheckNzResultStarted) == 0x000001, "Wrong size on RCTitleHUD_CheckNzResultStarted");
static_assert(offsetof(RCTitleHUD_CheckNzResultStarted, ReturnValue) == 0x000000, "Member 'RCTitleHUD_CheckNzResultStarted::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUD.ChunkInstallEvent
// 0x0008 (0x0008 - 0x0000)
struct RCTitleHUD_ChunkInstallEvent final
{
public:
	uint32                                        InChunkID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSuccess;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCTitleHUD_ChunkInstallEvent) == 0x000004, "Wrong alignment on RCTitleHUD_ChunkInstallEvent");
static_assert(sizeof(RCTitleHUD_ChunkInstallEvent) == 0x000008, "Wrong size on RCTitleHUD_ChunkInstallEvent");
static_assert(offsetof(RCTitleHUD_ChunkInstallEvent, InChunkID) == 0x000000, "Member 'RCTitleHUD_ChunkInstallEvent::InChunkID' has a wrong offset!");
static_assert(offsetof(RCTitleHUD_ChunkInstallEvent, InSuccess) == 0x000004, "Member 'RCTitleHUD_ChunkInstallEvent::InSuccess' has a wrong offset!");

// Function RC.RCTitleHUD.NzResultFinish
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUD_NzResultFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUD_NzResultFinish) == 0x000001, "Wrong alignment on RCTitleHUD_NzResultFinish");
static_assert(sizeof(RCTitleHUD_NzResultFinish) == 0x000001, "Wrong size on RCTitleHUD_NzResultFinish");
static_assert(offsetof(RCTitleHUD_NzResultFinish, ReturnValue) == 0x000000, "Member 'RCTitleHUD_NzResultFinish::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUD.NzResultStart
// 0x0008 (0x0008 - 0x0000)
struct RCTitleHUD_NzResultStart final
{
public:
	int32                                         InChapterNumber;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCTitleHUD_NzResultStart) == 0x000004, "Wrong alignment on RCTitleHUD_NzResultStart");
static_assert(sizeof(RCTitleHUD_NzResultStart) == 0x000008, "Wrong size on RCTitleHUD_NzResultStart");
static_assert(offsetof(RCTitleHUD_NzResultStart, InChapterNumber) == 0x000000, "Member 'RCTitleHUD_NzResultStart::InChapterNumber' has a wrong offset!");
static_assert(offsetof(RCTitleHUD_NzResultStart, ReturnValue) == 0x000004, "Member 'RCTitleHUD_NzResultStart::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUD.Tutorial_CreateWidget
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUD_Tutorial_CreateWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUD_Tutorial_CreateWidget) == 0x000001, "Wrong alignment on RCTitleHUD_Tutorial_CreateWidget");
static_assert(sizeof(RCTitleHUD_Tutorial_CreateWidget) == 0x000001, "Wrong size on RCTitleHUD_Tutorial_CreateWidget");
static_assert(offsetof(RCTitleHUD_Tutorial_CreateWidget, ReturnValue) == 0x000000, "Member 'RCTitleHUD_Tutorial_CreateWidget::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUD.Tutorial_IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUD_Tutorial_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUD_Tutorial_IsFinished) == 0x000001, "Wrong alignment on RCTitleHUD_Tutorial_IsFinished");
static_assert(sizeof(RCTitleHUD_Tutorial_IsFinished) == 0x000001, "Wrong size on RCTitleHUD_Tutorial_IsFinished");
static_assert(offsetof(RCTitleHUD_Tutorial_IsFinished, ReturnValue) == 0x000000, "Member 'RCTitleHUD_Tutorial_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUD.Tutorial_IsShowWindow
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUD_Tutorial_IsShowWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUD_Tutorial_IsShowWindow) == 0x000001, "Wrong alignment on RCTitleHUD_Tutorial_IsShowWindow");
static_assert(sizeof(RCTitleHUD_Tutorial_IsShowWindow) == 0x000001, "Wrong size on RCTitleHUD_Tutorial_IsShowWindow");
static_assert(offsetof(RCTitleHUD_Tutorial_IsShowWindow, ReturnValue) == 0x000000, "Member 'RCTitleHUD_Tutorial_IsShowWindow::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUD.Tutorial_Load
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUD_Tutorial_Load final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUD_Tutorial_Load) == 0x000001, "Wrong alignment on RCTitleHUD_Tutorial_Load");
static_assert(sizeof(RCTitleHUD_Tutorial_Load) == 0x000001, "Wrong size on RCTitleHUD_Tutorial_Load");
static_assert(offsetof(RCTitleHUD_Tutorial_Load, ReturnValue) == 0x000000, "Member 'RCTitleHUD_Tutorial_Load::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUD.Tutorial_StartTutorial
// 0x000C (0x000C - 0x0000)
struct RCTitleHUD_Tutorial_StartTutorial final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAnytimeClosable;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCTitleHUD_Tutorial_StartTutorial) == 0x000004, "Wrong alignment on RCTitleHUD_Tutorial_StartTutorial");
static_assert(sizeof(RCTitleHUD_Tutorial_StartTutorial) == 0x00000C, "Wrong size on RCTitleHUD_Tutorial_StartTutorial");
static_assert(offsetof(RCTitleHUD_Tutorial_StartTutorial, ID) == 0x000000, "Member 'RCTitleHUD_Tutorial_StartTutorial::ID' has a wrong offset!");
static_assert(offsetof(RCTitleHUD_Tutorial_StartTutorial, isAnytimeClosable) == 0x000008, "Member 'RCTitleHUD_Tutorial_StartTutorial::isAnytimeClosable' has a wrong offset!");

// Function RC.RCEffectComponent.CheckEffectActive
// 0x0020 (0x0020 - 0x0000)
struct RCEffectComponent_CheckEffectActive final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectComponent_CheckEffectActive) == 0x000004, "Wrong alignment on RCEffectComponent_CheckEffectActive");
static_assert(sizeof(RCEffectComponent_CheckEffectActive) == 0x000020, "Wrong size on RCEffectComponent_CheckEffectActive");
static_assert(offsetof(RCEffectComponent_CheckEffectActive, InEffectData) == 0x000000, "Member 'RCEffectComponent_CheckEffectActive::InEffectData' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_CheckEffectActive, ReturnValue) == 0x00001C, "Member 'RCEffectComponent_CheckEffectActive::ReturnValue' has a wrong offset!");

// Function RC.RCEffectComponent.EffectActivate
// 0x0020 (0x0020 - 0x0000)
struct RCEffectComponent_EffectActivate final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectComponent_EffectActivate) == 0x000004, "Wrong alignment on RCEffectComponent_EffectActivate");
static_assert(sizeof(RCEffectComponent_EffectActivate) == 0x000020, "Wrong size on RCEffectComponent_EffectActivate");
static_assert(offsetof(RCEffectComponent_EffectActivate, InEffectData) == 0x000000, "Member 'RCEffectComponent_EffectActivate::InEffectData' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_EffectActivate, ReturnValue) == 0x00001C, "Member 'RCEffectComponent_EffectActivate::ReturnValue' has a wrong offset!");

// Function RC.RCEffectComponent.EffectDeactivate
// 0x0020 (0x0020 - 0x0000)
struct RCEffectComponent_EffectDeactivate final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectComponent_EffectDeactivate) == 0x000004, "Wrong alignment on RCEffectComponent_EffectDeactivate");
static_assert(sizeof(RCEffectComponent_EffectDeactivate) == 0x000020, "Wrong size on RCEffectComponent_EffectDeactivate");
static_assert(offsetof(RCEffectComponent_EffectDeactivate, InEffectData) == 0x000000, "Member 'RCEffectComponent_EffectDeactivate::InEffectData' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_EffectDeactivate, ReturnValue) == 0x00001C, "Member 'RCEffectComponent_EffectDeactivate::ReturnValue' has a wrong offset!");

// Function RC.RCEffectComponent.EffectDestroy
// 0x0020 (0x0020 - 0x0000)
struct RCEffectComponent_EffectDestroy final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectComponent_EffectDestroy) == 0x000004, "Wrong alignment on RCEffectComponent_EffectDestroy");
static_assert(sizeof(RCEffectComponent_EffectDestroy) == 0x000020, "Wrong size on RCEffectComponent_EffectDestroy");
static_assert(offsetof(RCEffectComponent_EffectDestroy, InEffectData) == 0x000000, "Member 'RCEffectComponent_EffectDestroy::InEffectData' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_EffectDestroy, ReturnValue) == 0x00001C, "Member 'RCEffectComponent_EffectDestroy::ReturnValue' has a wrong offset!");

// Function RC.RCEffectComponent.SpawnEffectAtLocation
// 0x004C (0x004C - 0x0000)
struct RCEffectComponent_SpawnEffectAtLocation final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InSpawnLocation;                                   // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InSpawnRotation;                                   // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0044(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectComponent_SpawnEffectAtLocation) == 0x000004, "Wrong alignment on RCEffectComponent_SpawnEffectAtLocation");
static_assert(sizeof(RCEffectComponent_SpawnEffectAtLocation) == 0x00004C, "Wrong size on RCEffectComponent_SpawnEffectAtLocation");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocation, InEffectData) == 0x000000, "Member 'RCEffectComponent_SpawnEffectAtLocation::InEffectData' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocation, InSpawnLocation) == 0x00001C, "Member 'RCEffectComponent_SpawnEffectAtLocation::InSpawnLocation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocation, InSpawnRotation) == 0x000028, "Member 'RCEffectComponent_SpawnEffectAtLocation::InSpawnRotation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocation, InScale) == 0x000034, "Member 'RCEffectComponent_SpawnEffectAtLocation::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocation, bInAutoDestroy) == 0x000040, "Member 'RCEffectComponent_SpawnEffectAtLocation::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocation, InPoolingMethod) == 0x000041, "Member 'RCEffectComponent_SpawnEffectAtLocation::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocation, ReturnValue) == 0x000044, "Member 'RCEffectComponent_SpawnEffectAtLocation::ReturnValue' has a wrong offset!");

// Function RC.RCEffectComponent.SpawnEffectAtLocationWithManagedID
// 0x004C (0x004C - 0x0000)
struct RCEffectComponent_SpawnEffectAtLocationWithManagedID final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InManagedID;                                       // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InSpawnLocation;                                   // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InSpawnRotation;                                   // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectComponent_SpawnEffectAtLocationWithManagedID) == 0x000004, "Wrong alignment on RCEffectComponent_SpawnEffectAtLocationWithManagedID");
static_assert(sizeof(RCEffectComponent_SpawnEffectAtLocationWithManagedID) == 0x00004C, "Wrong size on RCEffectComponent_SpawnEffectAtLocationWithManagedID");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocationWithManagedID, InEffectData) == 0x000000, "Member 'RCEffectComponent_SpawnEffectAtLocationWithManagedID::InEffectData' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocationWithManagedID, InManagedID) == 0x00001C, "Member 'RCEffectComponent_SpawnEffectAtLocationWithManagedID::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocationWithManagedID, InSpawnLocation) == 0x000024, "Member 'RCEffectComponent_SpawnEffectAtLocationWithManagedID::InSpawnLocation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocationWithManagedID, InSpawnRotation) == 0x000030, "Member 'RCEffectComponent_SpawnEffectAtLocationWithManagedID::InSpawnRotation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocationWithManagedID, InScale) == 0x00003C, "Member 'RCEffectComponent_SpawnEffectAtLocationWithManagedID::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocationWithManagedID, bInAutoDestroy) == 0x000048, "Member 'RCEffectComponent_SpawnEffectAtLocationWithManagedID::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocationWithManagedID, InPoolingMethod) == 0x000049, "Member 'RCEffectComponent_SpawnEffectAtLocationWithManagedID::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAtLocationWithManagedID, ReturnValue) == 0x00004A, "Member 'RCEffectComponent_SpawnEffectAtLocationWithManagedID::ReturnValue' has a wrong offset!");

// Function RC.RCEffectComponent.SpawnEffectAttached
// 0x0060 (0x0060 - 0x0000)
struct RCEffectComponent_SpawnEffectAttached final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        InAttachToComponent;                               // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAttachPointName;                                 // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0048(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               InLocationType;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x0056(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectComponent_SpawnEffectAttached) == 0x000008, "Wrong alignment on RCEffectComponent_SpawnEffectAttached");
static_assert(sizeof(RCEffectComponent_SpawnEffectAttached) == 0x000060, "Wrong size on RCEffectComponent_SpawnEffectAttached");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, InEffectData) == 0x000000, "Member 'RCEffectComponent_SpawnEffectAttached::InEffectData' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, InAttachToComponent) == 0x000020, "Member 'RCEffectComponent_SpawnEffectAttached::InAttachToComponent' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, InAttachPointName) == 0x000028, "Member 'RCEffectComponent_SpawnEffectAttached::InAttachPointName' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, InLocation) == 0x000030, "Member 'RCEffectComponent_SpawnEffectAttached::InLocation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, InRotation) == 0x00003C, "Member 'RCEffectComponent_SpawnEffectAttached::InRotation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, InScale) == 0x000048, "Member 'RCEffectComponent_SpawnEffectAttached::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, InLocationType) == 0x000054, "Member 'RCEffectComponent_SpawnEffectAttached::InLocationType' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, bInAutoDestroy) == 0x000055, "Member 'RCEffectComponent_SpawnEffectAttached::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, InPoolingMethod) == 0x000056, "Member 'RCEffectComponent_SpawnEffectAttached::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttached, ReturnValue) == 0x000058, "Member 'RCEffectComponent_SpawnEffectAttached::ReturnValue' has a wrong offset!");

// Function RC.RCEffectComponent.SpawnEffectAttachedWithManagedID
// 0x0060 (0x0060 - 0x0000)
struct RCEffectComponent_SpawnEffectAttachedWithManagedID final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InManagedID;                                       // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        InAttachToComponent;                               // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAttachPointName;                                 // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0044(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0050(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               InLocationType;                                    // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x005E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005F(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectComponent_SpawnEffectAttachedWithManagedID) == 0x000008, "Wrong alignment on RCEffectComponent_SpawnEffectAttachedWithManagedID");
static_assert(sizeof(RCEffectComponent_SpawnEffectAttachedWithManagedID) == 0x000060, "Wrong size on RCEffectComponent_SpawnEffectAttachedWithManagedID");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, InEffectData) == 0x000000, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::InEffectData' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, InManagedID) == 0x00001C, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, InAttachToComponent) == 0x000028, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::InAttachToComponent' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, InAttachPointName) == 0x000030, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::InAttachPointName' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, InLocation) == 0x000038, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::InLocation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, InRotation) == 0x000044, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::InRotation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, InScale) == 0x000050, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, InLocationType) == 0x00005C, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::InLocationType' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, bInAutoDestroy) == 0x00005D, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, InPoolingMethod) == 0x00005E, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectAttachedWithManagedID, ReturnValue) == 0x00005F, "Member 'RCEffectComponent_SpawnEffectAttachedWithManagedID::ReturnValue' has a wrong offset!");

// Function RC.RCEffectComponent.SpawnEffectRainSplashAttachedWithManagedID
// 0x0070 (0x0070 - 0x0000)
struct RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InManagedID;                                       // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        InAttachToComponent;                               // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAttachPointName;                                 // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            InEmitterMesh;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffset;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpawnRate;                                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0048(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0054(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0060(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               InLocationType;                                    // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x006D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x006E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x006F(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID) == 0x000008, "Wrong alignment on RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID");
static_assert(sizeof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID) == 0x000070, "Wrong size on RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InEffectData) == 0x000000, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InEffectData' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InManagedID) == 0x00001C, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InAttachToComponent) == 0x000028, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InAttachToComponent' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InAttachPointName) == 0x000030, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InAttachPointName' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InEmitterMesh) == 0x000038, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InEmitterMesh' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InOffset) == 0x000040, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InOffset' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InSpawnRate) == 0x000044, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InSpawnRate' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InLocation) == 0x000048, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InLocation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InRotation) == 0x000054, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InRotation' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InScale) == 0x000060, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InLocationType) == 0x00006C, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InLocationType' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, bInAutoDestroy) == 0x00006D, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, InPoolingMethod) == 0x00006E, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID, ReturnValue) == 0x00006F, "Member 'RCEffectComponent_SpawnEffectRainSplashAttachedWithManagedID::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.CheckEffectActive
// 0x000C (0x000C - 0x0000)
struct RCEffectManager_CheckEffectActive final
{
public:
	class FName                                   InManagedID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectManager_CheckEffectActive) == 0x000004, "Wrong alignment on RCEffectManager_CheckEffectActive");
static_assert(sizeof(RCEffectManager_CheckEffectActive) == 0x00000C, "Wrong size on RCEffectManager_CheckEffectActive");
static_assert(offsetof(RCEffectManager_CheckEffectActive, InManagedID) == 0x000000, "Member 'RCEffectManager_CheckEffectActive::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_CheckEffectActive, ReturnValue) == 0x000008, "Member 'RCEffectManager_CheckEffectActive::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.CheckEffectLoaded
// 0x000C (0x000C - 0x0000)
struct RCEffectManager_CheckEffectLoaded final
{
public:
	class FName                                   InEffectID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectManager_CheckEffectLoaded) == 0x000004, "Wrong alignment on RCEffectManager_CheckEffectLoaded");
static_assert(sizeof(RCEffectManager_CheckEffectLoaded) == 0x00000C, "Wrong size on RCEffectManager_CheckEffectLoaded");
static_assert(offsetof(RCEffectManager_CheckEffectLoaded, InEffectID) == 0x000000, "Member 'RCEffectManager_CheckEffectLoaded::InEffectID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_CheckEffectLoaded, ReturnValue) == 0x000008, "Member 'RCEffectManager_CheckEffectLoaded::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.EffectActivate
// 0x000C (0x000C - 0x0000)
struct RCEffectManager_EffectActivate final
{
public:
	class FName                                   InManagedID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInReset;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectManager_EffectActivate) == 0x000004, "Wrong alignment on RCEffectManager_EffectActivate");
static_assert(sizeof(RCEffectManager_EffectActivate) == 0x00000C, "Wrong size on RCEffectManager_EffectActivate");
static_assert(offsetof(RCEffectManager_EffectActivate, InManagedID) == 0x000000, "Member 'RCEffectManager_EffectActivate::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_EffectActivate, bInReset) == 0x000008, "Member 'RCEffectManager_EffectActivate::bInReset' has a wrong offset!");
static_assert(offsetof(RCEffectManager_EffectActivate, ReturnValue) == 0x000009, "Member 'RCEffectManager_EffectActivate::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.EffectDeactivate
// 0x000C (0x000C - 0x0000)
struct RCEffectManager_EffectDeactivate final
{
public:
	class FName                                   InManagedID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectManager_EffectDeactivate) == 0x000004, "Wrong alignment on RCEffectManager_EffectDeactivate");
static_assert(sizeof(RCEffectManager_EffectDeactivate) == 0x00000C, "Wrong size on RCEffectManager_EffectDeactivate");
static_assert(offsetof(RCEffectManager_EffectDeactivate, InManagedID) == 0x000000, "Member 'RCEffectManager_EffectDeactivate::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_EffectDeactivate, ReturnValue) == 0x000008, "Member 'RCEffectManager_EffectDeactivate::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.EffectDestroy
// 0x000C (0x000C - 0x0000)
struct RCEffectManager_EffectDestroy final
{
public:
	class FName                                   InManagedID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectManager_EffectDestroy) == 0x000004, "Wrong alignment on RCEffectManager_EffectDestroy");
static_assert(sizeof(RCEffectManager_EffectDestroy) == 0x00000C, "Wrong size on RCEffectManager_EffectDestroy");
static_assert(offsetof(RCEffectManager_EffectDestroy, InManagedID) == 0x000000, "Member 'RCEffectManager_EffectDestroy::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_EffectDestroy, ReturnValue) == 0x000008, "Member 'RCEffectManager_EffectDestroy::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.GetManagedData
// 0x0030 (0x0030 - 0x0000)
struct RCEffectManager_GetManagedData final
{
public:
	class FName                                   InManagedID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCEffectManagedData                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectManager_GetManagedData) == 0x000008, "Wrong alignment on RCEffectManager_GetManagedData");
static_assert(sizeof(RCEffectManager_GetManagedData) == 0x000030, "Wrong size on RCEffectManager_GetManagedData");
static_assert(offsetof(RCEffectManager_GetManagedData, InManagedID) == 0x000000, "Member 'RCEffectManager_GetManagedData::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_GetManagedData, ReturnValue) == 0x000008, "Member 'RCEffectManager_GetManagedData::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.GetManagedDataNum
// 0x0004 (0x0004 - 0x0000)
struct RCEffectManager_GetManagedDataNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectManager_GetManagedDataNum) == 0x000004, "Wrong alignment on RCEffectManager_GetManagedDataNum");
static_assert(sizeof(RCEffectManager_GetManagedDataNum) == 0x000004, "Wrong size on RCEffectManager_GetManagedDataNum");
static_assert(offsetof(RCEffectManager_GetManagedDataNum, ReturnValue) == 0x000000, "Member 'RCEffectManager_GetManagedDataNum::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.LoadEffect
// 0x000C (0x000C - 0x0000)
struct RCEffectManager_LoadEffect final
{
public:
	class FName                                   InEffectID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectManager_LoadEffect) == 0x000004, "Wrong alignment on RCEffectManager_LoadEffect");
static_assert(sizeof(RCEffectManager_LoadEffect) == 0x00000C, "Wrong size on RCEffectManager_LoadEffect");
static_assert(offsetof(RCEffectManager_LoadEffect, InEffectID) == 0x000000, "Member 'RCEffectManager_LoadEffect::InEffectID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_LoadEffect, ReturnValue) == 0x000008, "Member 'RCEffectManager_LoadEffect::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.OnEffectSequenceFinished
// 0x0008 (0x0008 - 0x0000)
struct RCEffectManager_OnEffectSequenceFinished final
{
public:
	class URCEffectSequence*                      InEffectSequence;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectManager_OnEffectSequenceFinished) == 0x000008, "Wrong alignment on RCEffectManager_OnEffectSequenceFinished");
static_assert(sizeof(RCEffectManager_OnEffectSequenceFinished) == 0x000008, "Wrong size on RCEffectManager_OnEffectSequenceFinished");
static_assert(offsetof(RCEffectManager_OnEffectSequenceFinished, InEffectSequence) == 0x000000, "Member 'RCEffectManager_OnEffectSequenceFinished::InEffectSequence' has a wrong offset!");

// Function RC.RCEffectManager.OnNiagaraFinished
// 0x0008 (0x0008 - 0x0000)
struct RCEffectManager_OnNiagaraFinished final
{
public:
	class UNiagaraComponent*                      InNComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectManager_OnNiagaraFinished) == 0x000008, "Wrong alignment on RCEffectManager_OnNiagaraFinished");
static_assert(sizeof(RCEffectManager_OnNiagaraFinished) == 0x000008, "Wrong size on RCEffectManager_OnNiagaraFinished");
static_assert(offsetof(RCEffectManager_OnNiagaraFinished, InNComponent) == 0x000000, "Member 'RCEffectManager_OnNiagaraFinished::InNComponent' has a wrong offset!");

// Function RC.RCEffectManager.OnParticleFinished
// 0x0008 (0x0008 - 0x0000)
struct RCEffectManager_OnParticleFinished final
{
public:
	class UParticleSystemComponent*               InPSComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectManager_OnParticleFinished) == 0x000008, "Wrong alignment on RCEffectManager_OnParticleFinished");
static_assert(sizeof(RCEffectManager_OnParticleFinished) == 0x000008, "Wrong size on RCEffectManager_OnParticleFinished");
static_assert(offsetof(RCEffectManager_OnParticleFinished, InPSComponent) == 0x000000, "Member 'RCEffectManager_OnParticleFinished::InPSComponent' has a wrong offset!");

// Function RC.RCEffectManager.ReleaseEffect
// 0x000C (0x000C - 0x0000)
struct RCEffectManager_ReleaseEffect final
{
public:
	class FName                                   InEffectID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectManager_ReleaseEffect) == 0x000004, "Wrong alignment on RCEffectManager_ReleaseEffect");
static_assert(sizeof(RCEffectManager_ReleaseEffect) == 0x00000C, "Wrong size on RCEffectManager_ReleaseEffect");
static_assert(offsetof(RCEffectManager_ReleaseEffect, InEffectID) == 0x000000, "Member 'RCEffectManager_ReleaseEffect::InEffectID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_ReleaseEffect, ReturnValue) == 0x000008, "Member 'RCEffectManager_ReleaseEffect::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.SpawnEffectAtLocation
// 0x0040 (0x0040 - 0x0000)
struct RCEffectManager_SpawnEffectAtLocation final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEffectID;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InSpawnLocation;                                   // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InSpawnRotation;                                   // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectManager_SpawnEffectAtLocation) == 0x000008, "Wrong alignment on RCEffectManager_SpawnEffectAtLocation");
static_assert(sizeof(RCEffectManager_SpawnEffectAtLocation) == 0x000040, "Wrong size on RCEffectManager_SpawnEffectAtLocation");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocation, InWorldContextObject) == 0x000000, "Member 'RCEffectManager_SpawnEffectAtLocation::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocation, InEffectID) == 0x000008, "Member 'RCEffectManager_SpawnEffectAtLocation::InEffectID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocation, InSpawnLocation) == 0x000010, "Member 'RCEffectManager_SpawnEffectAtLocation::InSpawnLocation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocation, InSpawnRotation) == 0x00001C, "Member 'RCEffectManager_SpawnEffectAtLocation::InSpawnRotation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocation, InScale) == 0x000028, "Member 'RCEffectManager_SpawnEffectAtLocation::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocation, bInAutoDestroy) == 0x000034, "Member 'RCEffectManager_SpawnEffectAtLocation::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocation, InPoolingMethod) == 0x000035, "Member 'RCEffectManager_SpawnEffectAtLocation::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocation, ReturnValue) == 0x000038, "Member 'RCEffectManager_SpawnEffectAtLocation::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.SpawnEffectAtLocationWithManagedID
// 0x0040 (0x0040 - 0x0000)
struct RCEffectManager_SpawnEffectAtLocationWithManagedID final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InManagedID;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEffectID;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InSpawnLocation;                                   // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InSpawnRotation;                                   // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEffectManager_SpawnEffectAtLocationWithManagedID) == 0x000008, "Wrong alignment on RCEffectManager_SpawnEffectAtLocationWithManagedID");
static_assert(sizeof(RCEffectManager_SpawnEffectAtLocationWithManagedID) == 0x000040, "Wrong size on RCEffectManager_SpawnEffectAtLocationWithManagedID");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocationWithManagedID, InWorldContextObject) == 0x000000, "Member 'RCEffectManager_SpawnEffectAtLocationWithManagedID::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocationWithManagedID, InManagedID) == 0x000008, "Member 'RCEffectManager_SpawnEffectAtLocationWithManagedID::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocationWithManagedID, InEffectID) == 0x000010, "Member 'RCEffectManager_SpawnEffectAtLocationWithManagedID::InEffectID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocationWithManagedID, InSpawnLocation) == 0x000018, "Member 'RCEffectManager_SpawnEffectAtLocationWithManagedID::InSpawnLocation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocationWithManagedID, InSpawnRotation) == 0x000024, "Member 'RCEffectManager_SpawnEffectAtLocationWithManagedID::InSpawnRotation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocationWithManagedID, InScale) == 0x000030, "Member 'RCEffectManager_SpawnEffectAtLocationWithManagedID::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocationWithManagedID, bInAutoDestroy) == 0x00003C, "Member 'RCEffectManager_SpawnEffectAtLocationWithManagedID::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocationWithManagedID, InPoolingMethod) == 0x00003D, "Member 'RCEffectManager_SpawnEffectAtLocationWithManagedID::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAtLocationWithManagedID, ReturnValue) == 0x00003E, "Member 'RCEffectManager_SpawnEffectAtLocationWithManagedID::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.SpawnEffectAttached
// 0x0048 (0x0048 - 0x0000)
struct RCEffectManager_SpawnEffectAttached final
{
public:
	class FName                                   InEffectID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InAttachToComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAttachPointName;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               InLocationType;                                    // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x003E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectManager_SpawnEffectAttached) == 0x000008, "Wrong alignment on RCEffectManager_SpawnEffectAttached");
static_assert(sizeof(RCEffectManager_SpawnEffectAttached) == 0x000048, "Wrong size on RCEffectManager_SpawnEffectAttached");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, InEffectID) == 0x000000, "Member 'RCEffectManager_SpawnEffectAttached::InEffectID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, InAttachToComponent) == 0x000008, "Member 'RCEffectManager_SpawnEffectAttached::InAttachToComponent' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, InAttachPointName) == 0x000010, "Member 'RCEffectManager_SpawnEffectAttached::InAttachPointName' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, InLocation) == 0x000018, "Member 'RCEffectManager_SpawnEffectAttached::InLocation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, InRotation) == 0x000024, "Member 'RCEffectManager_SpawnEffectAttached::InRotation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, InScale) == 0x000030, "Member 'RCEffectManager_SpawnEffectAttached::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, InLocationType) == 0x00003C, "Member 'RCEffectManager_SpawnEffectAttached::InLocationType' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, bInAutoDestroy) == 0x00003D, "Member 'RCEffectManager_SpawnEffectAttached::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, InPoolingMethod) == 0x00003E, "Member 'RCEffectManager_SpawnEffectAttached::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttached, ReturnValue) == 0x000040, "Member 'RCEffectManager_SpawnEffectAttached::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.SpawnEffectAttachedWithManagedID
// 0x0048 (0x0048 - 0x0000)
struct RCEffectManager_SpawnEffectAttachedWithManagedID final
{
public:
	class FName                                   InManagedID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEffectID;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InAttachToComponent;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAttachPointName;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               InLocationType;                                    // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x0046(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0047(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectManager_SpawnEffectAttachedWithManagedID) == 0x000008, "Wrong alignment on RCEffectManager_SpawnEffectAttachedWithManagedID");
static_assert(sizeof(RCEffectManager_SpawnEffectAttachedWithManagedID) == 0x000048, "Wrong size on RCEffectManager_SpawnEffectAttachedWithManagedID");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, InManagedID) == 0x000000, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, InEffectID) == 0x000008, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::InEffectID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, InAttachToComponent) == 0x000010, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::InAttachToComponent' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, InAttachPointName) == 0x000018, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::InAttachPointName' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, InLocation) == 0x000020, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::InLocation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, InRotation) == 0x00002C, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::InRotation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, InScale) == 0x000038, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, InLocationType) == 0x000044, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::InLocationType' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, bInAutoDestroy) == 0x000045, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, InPoolingMethod) == 0x000046, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectAttachedWithManagedID, ReturnValue) == 0x000047, "Member 'RCEffectManager_SpawnEffectAttachedWithManagedID::ReturnValue' has a wrong offset!");

// Function RC.RCEffectManager.SpawnEffectRainSplashAttachedWithManagedID
// 0x0058 (0x0058 - 0x0000)
struct RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID final
{
public:
	class FName                                   InManagedID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEffectID;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InAttachToComponent;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAttachPointName;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            InEmitterMesh;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffset;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpawnRate;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0048(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               InLocationType;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x0056(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0057(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID) == 0x000008, "Wrong alignment on RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID");
static_assert(sizeof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID) == 0x000058, "Wrong size on RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InManagedID) == 0x000000, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InManagedID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InEffectID) == 0x000008, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InEffectID' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InAttachToComponent) == 0x000010, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InAttachToComponent' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InAttachPointName) == 0x000018, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InAttachPointName' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InEmitterMesh) == 0x000020, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InEmitterMesh' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InOffset) == 0x000028, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InOffset' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InSpawnRate) == 0x00002C, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InSpawnRate' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InLocation) == 0x000030, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InLocation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InRotation) == 0x00003C, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InRotation' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InScale) == 0x000048, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InLocationType) == 0x000054, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InLocationType' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, bInAutoDestroy) == 0x000055, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, InPoolingMethod) == 0x000056, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID, ReturnValue) == 0x000057, "Member 'RCEffectManager_SpawnEffectRainSplashAttachedWithManagedID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActorBFL.GetPlayableLoopLevelScriptActor
// 0x0008 (0x0008 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActorBFL_GetPlayableLoopLevelScriptActor final
{
public:
	class ARCNazoPlayableLoopLevelScriptActor*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActorBFL_GetPlayableLoopLevelScriptActor) == 0x000008, "Wrong alignment on RCNazoPlayableLoopLevelScriptActorBFL_GetPlayableLoopLevelScriptActor");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActorBFL_GetPlayableLoopLevelScriptActor) == 0x000008, "Wrong size on RCNazoPlayableLoopLevelScriptActorBFL_GetPlayableLoopLevelScriptActor");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActorBFL_GetPlayableLoopLevelScriptActor, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActorBFL_GetPlayableLoopLevelScriptActor::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActorBFL.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActorBFL_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActorBFL_IsInitialized) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActorBFL_IsInitialized");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActorBFL_IsInitialized) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActorBFL_IsInitialized");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActorBFL_IsInitialized, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActorBFL_IsInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActorBFL.PlayableLoopCheckFinishedBehindWallClosed
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCheckFinishedBehindWallClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCheckFinishedBehindWallClosed) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCheckFinishedBehindWallClosed");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCheckFinishedBehindWallClosed) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCheckFinishedBehindWallClosed");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCheckFinishedBehindWallClosed, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCheckFinishedBehindWallClosed::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActorBFL.PlayableLoopCloseBehindWall
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCloseBehindWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCloseBehindWall) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCloseBehindWall");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCloseBehindWall) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCloseBehindWall");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCloseBehindWall, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopCloseBehindWall::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActorBFL.PlayableLoopFinishLoop
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopFinishLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopFinishLoop) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopFinishLoop");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopFinishLoop) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopFinishLoop");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopFinishLoop, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopFinishLoop::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActorBFL.PlayableLoopGetWarpCount
// 0x0004 (0x0004 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopGetWarpCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopGetWarpCount) == 0x000004, "Wrong alignment on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopGetWarpCount");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopGetWarpCount) == 0x000004, "Wrong size on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopGetWarpCount");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopGetWarpCount, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopGetWarpCount::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActorBFL.PlayableLoopOpenFrontWall
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopOpenFrontWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopOpenFrontWall) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopOpenFrontWall");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopOpenFrontWall) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopOpenFrontWall");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopOpenFrontWall, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopOpenFrontWall::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActorBFL.PlayableLoopSetFreeMoveSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopSetFreeMoveSkipEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopSetFreeMoveSkipEnable) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopSetFreeMoveSkipEnable");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopSetFreeMoveSkipEnable) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopSetFreeMoveSkipEnable");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopSetFreeMoveSkipEnable, bEnable) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopSetFreeMoveSkipEnable::bEnable' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActorBFL.PlayableLoopWarp
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopWarp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopWarp) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopWarp");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopWarp) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopWarp");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopWarp, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActorBFL_PlayableLoopWarp::ReturnValue' has a wrong offset!");

// Function RC.RCEffectSequence.SpawnEffectSequenceAtLocation
// 0x0040 (0x0040 - 0x0000)
struct RCEffectSequence_SpawnEffectSequenceAtLocation final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         InLevelSequence;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InSpawnLocation;                                   // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InSpawnRotation;                                   // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URCEffectSequence*                      ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectSequence_SpawnEffectSequenceAtLocation) == 0x000008, "Wrong alignment on RCEffectSequence_SpawnEffectSequenceAtLocation");
static_assert(sizeof(RCEffectSequence_SpawnEffectSequenceAtLocation) == 0x000040, "Wrong size on RCEffectSequence_SpawnEffectSequenceAtLocation");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAtLocation, InWorldContextObject) == 0x000000, "Member 'RCEffectSequence_SpawnEffectSequenceAtLocation::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAtLocation, InLevelSequence) == 0x000008, "Member 'RCEffectSequence_SpawnEffectSequenceAtLocation::InLevelSequence' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAtLocation, InSpawnLocation) == 0x000010, "Member 'RCEffectSequence_SpawnEffectSequenceAtLocation::InSpawnLocation' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAtLocation, InSpawnRotation) == 0x00001C, "Member 'RCEffectSequence_SpawnEffectSequenceAtLocation::InSpawnRotation' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAtLocation, InScale) == 0x000028, "Member 'RCEffectSequence_SpawnEffectSequenceAtLocation::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAtLocation, bInAutoDestroy) == 0x000034, "Member 'RCEffectSequence_SpawnEffectSequenceAtLocation::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAtLocation, InPoolingMethod) == 0x000035, "Member 'RCEffectSequence_SpawnEffectSequenceAtLocation::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAtLocation, ReturnValue) == 0x000038, "Member 'RCEffectSequence_SpawnEffectSequenceAtLocation::ReturnValue' has a wrong offset!");

// Function RC.RCEffectSequence.SpawnEffectSequenceAttached
// 0x0048 (0x0048 - 0x0000)
struct RCEffectSequence_SpawnEffectSequenceAttached final
{
public:
	class ULevelSequence*                         InLevelSequence;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InAttachToComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAttachPointName;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               InLocationType;                                    // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAutoDestroy;                                    // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                InPoolingMethod;                                   // 0x003E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class URCEffectSequence*                      ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectSequence_SpawnEffectSequenceAttached) == 0x000008, "Wrong alignment on RCEffectSequence_SpawnEffectSequenceAttached");
static_assert(sizeof(RCEffectSequence_SpawnEffectSequenceAttached) == 0x000048, "Wrong size on RCEffectSequence_SpawnEffectSequenceAttached");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, InLevelSequence) == 0x000000, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::InLevelSequence' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, InAttachToComponent) == 0x000008, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::InAttachToComponent' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, InAttachPointName) == 0x000010, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::InAttachPointName' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, InLocation) == 0x000018, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::InLocation' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, InRotation) == 0x000024, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::InRotation' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, InScale) == 0x000030, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::InScale' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, InLocationType) == 0x00003C, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::InLocationType' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, bInAutoDestroy) == 0x00003D, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::bInAutoDestroy' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, InPoolingMethod) == 0x00003E, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::InPoolingMethod' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_SpawnEffectSequenceAttached, ReturnValue) == 0x000040, "Member 'RCEffectSequence_SpawnEffectSequenceAttached::ReturnValue' has a wrong offset!");

// Function RC.RCEffectSequence.Activate
// 0x0002 (0x0002 - 0x0000)
struct RCEffectSequence_Activate final
{
public:
	bool                                          bInReset;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectSequence_Activate) == 0x000001, "Wrong alignment on RCEffectSequence_Activate");
static_assert(sizeof(RCEffectSequence_Activate) == 0x000002, "Wrong size on RCEffectSequence_Activate");
static_assert(offsetof(RCEffectSequence_Activate, bInReset) == 0x000000, "Member 'RCEffectSequence_Activate::bInReset' has a wrong offset!");
static_assert(offsetof(RCEffectSequence_Activate, ReturnValue) == 0x000001, "Member 'RCEffectSequence_Activate::ReturnValue' has a wrong offset!");

// Function RC.RCEffectSequence.Deactivate
// 0x0001 (0x0001 - 0x0000)
struct RCEffectSequence_Deactivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectSequence_Deactivate) == 0x000001, "Wrong alignment on RCEffectSequence_Deactivate");
static_assert(sizeof(RCEffectSequence_Deactivate) == 0x000001, "Wrong size on RCEffectSequence_Deactivate");
static_assert(offsetof(RCEffectSequence_Deactivate, ReturnValue) == 0x000000, "Member 'RCEffectSequence_Deactivate::ReturnValue' has a wrong offset!");

// Function RC.RCEffectSequence.Destroy
// 0x0001 (0x0001 - 0x0000)
struct RCEffectSequence_Destroy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectSequence_Destroy) == 0x000001, "Wrong alignment on RCEffectSequence_Destroy");
static_assert(sizeof(RCEffectSequence_Destroy) == 0x000001, "Wrong size on RCEffectSequence_Destroy");
static_assert(offsetof(RCEffectSequence_Destroy, ReturnValue) == 0x000000, "Member 'RCEffectSequence_Destroy::ReturnValue' has a wrong offset!");

// Function RC.RCEffectSequence.IsActive
// 0x0001 (0x0001 - 0x0000)
struct RCEffectSequence_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEffectSequence_IsActive) == 0x000001, "Wrong alignment on RCEffectSequence_IsActive");
static_assert(sizeof(RCEffectSequence_IsActive) == 0x000001, "Wrong size on RCEffectSequence_IsActive");
static_assert(offsetof(RCEffectSequence_IsActive, ReturnValue) == 0x000000, "Member 'RCEffectSequence_IsActive::ReturnValue' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeAreaNameID
// 0x0008 (0x0008 - 0x0000)
struct RCEnvironmentBFL_ChangeAreaNameID final
{
public:
	class FName                                   InAreaNameID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_ChangeAreaNameID) == 0x000004, "Wrong alignment on RCEnvironmentBFL_ChangeAreaNameID");
static_assert(sizeof(RCEnvironmentBFL_ChangeAreaNameID) == 0x000008, "Wrong size on RCEnvironmentBFL_ChangeAreaNameID");
static_assert(offsetof(RCEnvironmentBFL_ChangeAreaNameID, InAreaNameID) == 0x000000, "Member 'RCEnvironmentBFL_ChangeAreaNameID::InAreaNameID' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeCamera
// 0x000C (0x000C - 0x0000)
struct RCEnvironmentBFL_ChangeCamera final
{
public:
	class FName                                   InCameraID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEnvironmentBFL_ChangeCamera) == 0x000004, "Wrong alignment on RCEnvironmentBFL_ChangeCamera");
static_assert(sizeof(RCEnvironmentBFL_ChangeCamera) == 0x00000C, "Wrong size on RCEnvironmentBFL_ChangeCamera");
static_assert(offsetof(RCEnvironmentBFL_ChangeCamera, InCameraID) == 0x000000, "Member 'RCEnvironmentBFL_ChangeCamera::InCameraID' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_ChangeCamera, bDirect) == 0x000008, "Member 'RCEnvironmentBFL_ChangeCamera::bDirect' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeCharacterDrawLayerList
// 0x0010 (0x0010 - 0x0000)
struct RCEnvironmentBFL_ChangeCharacterDrawLayerList final
{
public:
	TArray<class FName>                           IncharacterDrawLayerList;                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_ChangeCharacterDrawLayerList) == 0x000008, "Wrong alignment on RCEnvironmentBFL_ChangeCharacterDrawLayerList");
static_assert(sizeof(RCEnvironmentBFL_ChangeCharacterDrawLayerList) == 0x000010, "Wrong size on RCEnvironmentBFL_ChangeCharacterDrawLayerList");
static_assert(offsetof(RCEnvironmentBFL_ChangeCharacterDrawLayerList, IncharacterDrawLayerList) == 0x000000, "Member 'RCEnvironmentBFL_ChangeCharacterDrawLayerList::IncharacterDrawLayerList' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeCharacterMaterialID
// 0x0018 (0x0018 - 0x0000)
struct RCEnvironmentBFL_ChangeCharacterMaterialID final
{
public:
	class ARCCharacterRender*                     InCharacterActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPlayerMaterialID;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEnvironmentBFL_ChangeCharacterMaterialID) == 0x000008, "Wrong alignment on RCEnvironmentBFL_ChangeCharacterMaterialID");
static_assert(sizeof(RCEnvironmentBFL_ChangeCharacterMaterialID) == 0x000018, "Wrong size on RCEnvironmentBFL_ChangeCharacterMaterialID");
static_assert(offsetof(RCEnvironmentBFL_ChangeCharacterMaterialID, InCharacterActor) == 0x000000, "Member 'RCEnvironmentBFL_ChangeCharacterMaterialID::InCharacterActor' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_ChangeCharacterMaterialID, InPlayerMaterialID) == 0x000008, "Member 'RCEnvironmentBFL_ChangeCharacterMaterialID::InPlayerMaterialID' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_ChangeCharacterMaterialID, bDirect) == 0x000010, "Member 'RCEnvironmentBFL_ChangeCharacterMaterialID::bDirect' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeCharacterRainMaterialID
// 0x0010 (0x0010 - 0x0000)
struct RCEnvironmentBFL_ChangeCharacterRainMaterialID final
{
public:
	class ARCCharacterRender*                     InCharacterActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCEnvironmentChangeRainType                  InRainType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEnvironmentBFL_ChangeCharacterRainMaterialID) == 0x000008, "Wrong alignment on RCEnvironmentBFL_ChangeCharacterRainMaterialID");
static_assert(sizeof(RCEnvironmentBFL_ChangeCharacterRainMaterialID) == 0x000010, "Wrong size on RCEnvironmentBFL_ChangeCharacterRainMaterialID");
static_assert(offsetof(RCEnvironmentBFL_ChangeCharacterRainMaterialID, InCharacterActor) == 0x000000, "Member 'RCEnvironmentBFL_ChangeCharacterRainMaterialID::InCharacterActor' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_ChangeCharacterRainMaterialID, InRainType) == 0x000008, "Member 'RCEnvironmentBFL_ChangeCharacterRainMaterialID::InRainType' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_ChangeCharacterRainMaterialID, bDirect) == 0x000009, "Member 'RCEnvironmentBFL_ChangeCharacterRainMaterialID::bDirect' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeFaceFilterID
// 0x0008 (0x0008 - 0x0000)
struct RCEnvironmentBFL_ChangeFaceFilterID final
{
public:
	class FName                                   InFaceFilterID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_ChangeFaceFilterID) == 0x000004, "Wrong alignment on RCEnvironmentBFL_ChangeFaceFilterID");
static_assert(sizeof(RCEnvironmentBFL_ChangeFaceFilterID) == 0x000008, "Wrong size on RCEnvironmentBFL_ChangeFaceFilterID");
static_assert(offsetof(RCEnvironmentBFL_ChangeFaceFilterID, InFaceFilterID) == 0x000000, "Member 'RCEnvironmentBFL_ChangeFaceFilterID::InFaceFilterID' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeFogID
// 0x000C (0x000C - 0x0000)
struct RCEnvironmentBFL_ChangeFogID final
{
public:
	class FName                                   InFogID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEnvironmentBFL_ChangeFogID) == 0x000004, "Wrong alignment on RCEnvironmentBFL_ChangeFogID");
static_assert(sizeof(RCEnvironmentBFL_ChangeFogID) == 0x00000C, "Wrong size on RCEnvironmentBFL_ChangeFogID");
static_assert(offsetof(RCEnvironmentBFL_ChangeFogID, InFogID) == 0x000000, "Member 'RCEnvironmentBFL_ChangeFogID::InFogID' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_ChangeFogID, bDirect) == 0x000008, "Member 'RCEnvironmentBFL_ChangeFogID::bDirect' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeMinimapID
// 0x0008 (0x0008 - 0x0000)
struct RCEnvironmentBFL_ChangeMinimapID final
{
public:
	class FName                                   InMinimapID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_ChangeMinimapID) == 0x000004, "Wrong alignment on RCEnvironmentBFL_ChangeMinimapID");
static_assert(sizeof(RCEnvironmentBFL_ChangeMinimapID) == 0x000008, "Wrong size on RCEnvironmentBFL_ChangeMinimapID");
static_assert(offsetof(RCEnvironmentBFL_ChangeMinimapID, InMinimapID) == 0x000000, "Member 'RCEnvironmentBFL_ChangeMinimapID::InMinimapID' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangePlayerMoveSpeed
// 0x0001 (0x0001 - 0x0000)
struct RCEnvironmentBFL_ChangePlayerMoveSpeed final
{
public:
	ERCEnvironmentChangeSpeedType                 InSpeedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_ChangePlayerMoveSpeed) == 0x000001, "Wrong alignment on RCEnvironmentBFL_ChangePlayerMoveSpeed");
static_assert(sizeof(RCEnvironmentBFL_ChangePlayerMoveSpeed) == 0x000001, "Wrong size on RCEnvironmentBFL_ChangePlayerMoveSpeed");
static_assert(offsetof(RCEnvironmentBFL_ChangePlayerMoveSpeed, InSpeedType) == 0x000000, "Member 'RCEnvironmentBFL_ChangePlayerMoveSpeed::InSpeedType' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeRainDraw
// 0x0001 (0x0001 - 0x0000)
struct RCEnvironmentBFL_ChangeRainDraw final
{
public:
	ERCEnvironmentChangeRainType                  InRainType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_ChangeRainDraw) == 0x000001, "Wrong alignment on RCEnvironmentBFL_ChangeRainDraw");
static_assert(sizeof(RCEnvironmentBFL_ChangeRainDraw) == 0x000001, "Wrong size on RCEnvironmentBFL_ChangeRainDraw");
static_assert(offsetof(RCEnvironmentBFL_ChangeRainDraw, InRainType) == 0x000000, "Member 'RCEnvironmentBFL_ChangeRainDraw::InRainType' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeShinigamiMaterialID
// 0x0018 (0x0018 - 0x0000)
struct RCEnvironmentBFL_ChangeShinigamiMaterialID final
{
public:
	class ARCCharacterRender*                     InCharacterActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPlayerMaterialID;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCEnvironmentBFL_ChangeShinigamiMaterialID) == 0x000008, "Wrong alignment on RCEnvironmentBFL_ChangeShinigamiMaterialID");
static_assert(sizeof(RCEnvironmentBFL_ChangeShinigamiMaterialID) == 0x000018, "Wrong size on RCEnvironmentBFL_ChangeShinigamiMaterialID");
static_assert(offsetof(RCEnvironmentBFL_ChangeShinigamiMaterialID, InCharacterActor) == 0x000000, "Member 'RCEnvironmentBFL_ChangeShinigamiMaterialID::InCharacterActor' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_ChangeShinigamiMaterialID, InPlayerMaterialID) == 0x000008, "Member 'RCEnvironmentBFL_ChangeShinigamiMaterialID::InPlayerMaterialID' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_ChangeShinigamiMaterialID, bDirect) == 0x000010, "Member 'RCEnvironmentBFL_ChangeShinigamiMaterialID::bDirect' has a wrong offset!");

// Function RC.RCEnvironmentBFL.ChangeWind
// 0x0010 (0x0010 - 0x0000)
struct RCEnvironmentBFL_ChangeWind final
{
public:
	class FName                                   InWindActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InWindEventName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_ChangeWind) == 0x000004, "Wrong alignment on RCEnvironmentBFL_ChangeWind");
static_assert(sizeof(RCEnvironmentBFL_ChangeWind) == 0x000010, "Wrong size on RCEnvironmentBFL_ChangeWind");
static_assert(offsetof(RCEnvironmentBFL_ChangeWind, InWindActorName) == 0x000000, "Member 'RCEnvironmentBFL_ChangeWind::InWindActorName' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_ChangeWind, InWindEventName) == 0x000008, "Member 'RCEnvironmentBFL_ChangeWind::InWindEventName' has a wrong offset!");

// Function RC.RCEnvironmentBFL.GetAreaNameID
// 0x0008 (0x0008 - 0x0000)
struct RCEnvironmentBFL_GetAreaNameID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_GetAreaNameID) == 0x000004, "Wrong alignment on RCEnvironmentBFL_GetAreaNameID");
static_assert(sizeof(RCEnvironmentBFL_GetAreaNameID) == 0x000008, "Wrong size on RCEnvironmentBFL_GetAreaNameID");
static_assert(offsetof(RCEnvironmentBFL_GetAreaNameID, ReturnValue) == 0x000000, "Member 'RCEnvironmentBFL_GetAreaNameID::ReturnValue' has a wrong offset!");

// Function RC.RCEnvironmentBFL.GetCamera
// 0x0008 (0x0008 - 0x0000)
struct RCEnvironmentBFL_GetCamera final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_GetCamera) == 0x000004, "Wrong alignment on RCEnvironmentBFL_GetCamera");
static_assert(sizeof(RCEnvironmentBFL_GetCamera) == 0x000008, "Wrong size on RCEnvironmentBFL_GetCamera");
static_assert(offsetof(RCEnvironmentBFL_GetCamera, ReturnValue) == 0x000000, "Member 'RCEnvironmentBFL_GetCamera::ReturnValue' has a wrong offset!");

// Function RC.RCEnvironmentBFL.GetEnvironmentChangeTrigger
// 0x0010 (0x0010 - 0x0000)
struct RCEnvironmentBFL_GetEnvironmentChangeTrigger final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCEnvironmentChangeTrigger*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_GetEnvironmentChangeTrigger) == 0x000008, "Wrong alignment on RCEnvironmentBFL_GetEnvironmentChangeTrigger");
static_assert(sizeof(RCEnvironmentBFL_GetEnvironmentChangeTrigger) == 0x000010, "Wrong size on RCEnvironmentBFL_GetEnvironmentChangeTrigger");
static_assert(offsetof(RCEnvironmentBFL_GetEnvironmentChangeTrigger, InName) == 0x000000, "Member 'RCEnvironmentBFL_GetEnvironmentChangeTrigger::InName' has a wrong offset!");
static_assert(offsetof(RCEnvironmentBFL_GetEnvironmentChangeTrigger, ReturnValue) == 0x000008, "Member 'RCEnvironmentBFL_GetEnvironmentChangeTrigger::ReturnValue' has a wrong offset!");

// Function RC.RCEnvironmentBFL.GetFogID
// 0x0008 (0x0008 - 0x0000)
struct RCEnvironmentBFL_GetFogID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_GetFogID) == 0x000004, "Wrong alignment on RCEnvironmentBFL_GetFogID");
static_assert(sizeof(RCEnvironmentBFL_GetFogID) == 0x000008, "Wrong size on RCEnvironmentBFL_GetFogID");
static_assert(offsetof(RCEnvironmentBFL_GetFogID, ReturnValue) == 0x000000, "Member 'RCEnvironmentBFL_GetFogID::ReturnValue' has a wrong offset!");

// Function RC.RCEnvironmentBFL.GetMinimapID
// 0x0008 (0x0008 - 0x0000)
struct RCEnvironmentBFL_GetMinimapID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_GetMinimapID) == 0x000004, "Wrong alignment on RCEnvironmentBFL_GetMinimapID");
static_assert(sizeof(RCEnvironmentBFL_GetMinimapID) == 0x000008, "Wrong size on RCEnvironmentBFL_GetMinimapID");
static_assert(offsetof(RCEnvironmentBFL_GetMinimapID, ReturnValue) == 0x000000, "Member 'RCEnvironmentBFL_GetMinimapID::ReturnValue' has a wrong offset!");

// Function RC.RCEnvironmentBFL.GetPlayerMoveSpeed
// 0x0001 (0x0001 - 0x0000)
struct RCEnvironmentBFL_GetPlayerMoveSpeed final
{
public:
	ERCEnvironmentChangeSpeedType                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_GetPlayerMoveSpeed) == 0x000001, "Wrong alignment on RCEnvironmentBFL_GetPlayerMoveSpeed");
static_assert(sizeof(RCEnvironmentBFL_GetPlayerMoveSpeed) == 0x000001, "Wrong size on RCEnvironmentBFL_GetPlayerMoveSpeed");
static_assert(offsetof(RCEnvironmentBFL_GetPlayerMoveSpeed, ReturnValue) == 0x000000, "Member 'RCEnvironmentBFL_GetPlayerMoveSpeed::ReturnValue' has a wrong offset!");

// Function RC.RCEnvironmentBFL.GetRainDraw
// 0x0001 (0x0001 - 0x0000)
struct RCEnvironmentBFL_GetRainDraw final
{
public:
	ERCEnvironmentChangeRainType                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentBFL_GetRainDraw) == 0x000001, "Wrong alignment on RCEnvironmentBFL_GetRainDraw");
static_assert(sizeof(RCEnvironmentBFL_GetRainDraw) == 0x000001, "Wrong size on RCEnvironmentBFL_GetRainDraw");
static_assert(offsetof(RCEnvironmentBFL_GetRainDraw, ReturnValue) == 0x000000, "Member 'RCEnvironmentBFL_GetRainDraw::ReturnValue' has a wrong offset!");

// Function RC.RCEnvironmentChangeTrigger.OnActorBeginOverlapScriptEntry
// 0x0010 (0x0010 - 0x0000)
struct RCEnvironmentChangeTrigger_OnActorBeginOverlapScriptEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentChangeTrigger_OnActorBeginOverlapScriptEntry) == 0x000008, "Wrong alignment on RCEnvironmentChangeTrigger_OnActorBeginOverlapScriptEntry");
static_assert(sizeof(RCEnvironmentChangeTrigger_OnActorBeginOverlapScriptEntry) == 0x000010, "Wrong size on RCEnvironmentChangeTrigger_OnActorBeginOverlapScriptEntry");
static_assert(offsetof(RCEnvironmentChangeTrigger_OnActorBeginOverlapScriptEntry, OverlappedActor) == 0x000000, "Member 'RCEnvironmentChangeTrigger_OnActorBeginOverlapScriptEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCEnvironmentChangeTrigger_OnActorBeginOverlapScriptEntry, OtherActor) == 0x000008, "Member 'RCEnvironmentChangeTrigger_OnActorBeginOverlapScriptEntry::OtherActor' has a wrong offset!");

// Function RC.RCEnvironmentChangeTrigger.OnActorEndOverlapScriptEntry
// 0x0010 (0x0010 - 0x0000)
struct RCEnvironmentChangeTrigger_OnActorEndOverlapScriptEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEnvironmentChangeTrigger_OnActorEndOverlapScriptEntry) == 0x000008, "Wrong alignment on RCEnvironmentChangeTrigger_OnActorEndOverlapScriptEntry");
static_assert(sizeof(RCEnvironmentChangeTrigger_OnActorEndOverlapScriptEntry) == 0x000010, "Wrong size on RCEnvironmentChangeTrigger_OnActorEndOverlapScriptEntry");
static_assert(offsetof(RCEnvironmentChangeTrigger_OnActorEndOverlapScriptEntry, OverlappedActor) == 0x000000, "Member 'RCEnvironmentChangeTrigger_OnActorEndOverlapScriptEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCEnvironmentChangeTrigger_OnActorEndOverlapScriptEntry, OtherActor) == 0x000008, "Member 'RCEnvironmentChangeTrigger_OnActorEndOverlapScriptEntry::OtherActor' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.ChangeCheckPointScene
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActorBFL_ChangeCheckPointScene final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_ChangeCheckPointScene) == 0x000001, "Wrong alignment on RCNazoLevelScriptActorBFL_ChangeCheckPointScene");
static_assert(sizeof(RCNazoLevelScriptActorBFL_ChangeCheckPointScene) == 0x000001, "Wrong size on RCNazoLevelScriptActorBFL_ChangeCheckPointScene");
static_assert(offsetof(RCNazoLevelScriptActorBFL_ChangeCheckPointScene, bSuccess) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_ChangeCheckPointScene::bSuccess' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.ChangeCheckPointSceneAtGameOver
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActorBFL_ChangeCheckPointSceneAtGameOver final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_ChangeCheckPointSceneAtGameOver) == 0x000001, "Wrong alignment on RCNazoLevelScriptActorBFL_ChangeCheckPointSceneAtGameOver");
static_assert(sizeof(RCNazoLevelScriptActorBFL_ChangeCheckPointSceneAtGameOver) == 0x000001, "Wrong size on RCNazoLevelScriptActorBFL_ChangeCheckPointSceneAtGameOver");
static_assert(offsetof(RCNazoLevelScriptActorBFL_ChangeCheckPointSceneAtGameOver, bSuccess) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_ChangeCheckPointSceneAtGameOver::bSuccess' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.ChangeFirstScene
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActorBFL_ChangeFirstScene final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_ChangeFirstScene) == 0x000001, "Wrong alignment on RCNazoLevelScriptActorBFL_ChangeFirstScene");
static_assert(sizeof(RCNazoLevelScriptActorBFL_ChangeFirstScene) == 0x000001, "Wrong size on RCNazoLevelScriptActorBFL_ChangeFirstScene");
static_assert(offsetof(RCNazoLevelScriptActorBFL_ChangeFirstScene, bSuccess) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_ChangeFirstScene::bSuccess' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.ChangeNextScene
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActorBFL_ChangeNextScene final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_ChangeNextScene) == 0x000001, "Wrong alignment on RCNazoLevelScriptActorBFL_ChangeNextScene");
static_assert(sizeof(RCNazoLevelScriptActorBFL_ChangeNextScene) == 0x000001, "Wrong size on RCNazoLevelScriptActorBFL_ChangeNextScene");
static_assert(offsetof(RCNazoLevelScriptActorBFL_ChangeNextScene, bSuccess) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_ChangeNextScene::bSuccess' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.ChangeScene
// 0x000C (0x000C - 0x0000)
struct RCNazoLevelScriptActorBFL_ChangeScene final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SceneID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_ChangeScene) == 0x000004, "Wrong alignment on RCNazoLevelScriptActorBFL_ChangeScene");
static_assert(sizeof(RCNazoLevelScriptActorBFL_ChangeScene) == 0x00000C, "Wrong size on RCNazoLevelScriptActorBFL_ChangeScene");
static_assert(offsetof(RCNazoLevelScriptActorBFL_ChangeScene, bSuccess) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_ChangeScene::bSuccess' has a wrong offset!");
static_assert(offsetof(RCNazoLevelScriptActorBFL_ChangeScene, SceneID) == 0x000004, "Member 'RCNazoLevelScriptActorBFL_ChangeScene::SceneID' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.GetCurrentSceneID
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActorBFL_GetCurrentSceneID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_GetCurrentSceneID) == 0x000004, "Wrong alignment on RCNazoLevelScriptActorBFL_GetCurrentSceneID");
static_assert(sizeof(RCNazoLevelScriptActorBFL_GetCurrentSceneID) == 0x000008, "Wrong size on RCNazoLevelScriptActorBFL_GetCurrentSceneID");
static_assert(offsetof(RCNazoLevelScriptActorBFL_GetCurrentSceneID, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_GetCurrentSceneID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.GetCurrentSceneLevelScriptActor
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActorBFL_GetCurrentSceneLevelScriptActor final
{
public:
	class ALevelScriptActor*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_GetCurrentSceneLevelScriptActor) == 0x000008, "Wrong alignment on RCNazoLevelScriptActorBFL_GetCurrentSceneLevelScriptActor");
static_assert(sizeof(RCNazoLevelScriptActorBFL_GetCurrentSceneLevelScriptActor) == 0x000008, "Wrong size on RCNazoLevelScriptActorBFL_GetCurrentSceneLevelScriptActor");
static_assert(offsetof(RCNazoLevelScriptActorBFL_GetCurrentSceneLevelScriptActor, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_GetCurrentSceneLevelScriptActor::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.GetLevelScriptActor
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActorBFL_GetLevelScriptActor final
{
public:
	class ARCNazoLevelScriptActor*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_GetLevelScriptActor) == 0x000008, "Wrong alignment on RCNazoLevelScriptActorBFL_GetLevelScriptActor");
static_assert(sizeof(RCNazoLevelScriptActorBFL_GetLevelScriptActor) == 0x000008, "Wrong size on RCNazoLevelScriptActorBFL_GetLevelScriptActor");
static_assert(offsetof(RCNazoLevelScriptActorBFL_GetLevelScriptActor, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_GetLevelScriptActor::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.GotoTitle
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActorBFL_GotoTitle final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_GotoTitle) == 0x000001, "Wrong alignment on RCNazoLevelScriptActorBFL_GotoTitle");
static_assert(sizeof(RCNazoLevelScriptActorBFL_GotoTitle) == 0x000001, "Wrong size on RCNazoLevelScriptActorBFL_GotoTitle");
static_assert(offsetof(RCNazoLevelScriptActorBFL_GotoTitle, bSuccess) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_GotoTitle::bSuccess' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.IsCurrentSceneReady
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActorBFL_IsCurrentSceneReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_IsCurrentSceneReady) == 0x000001, "Wrong alignment on RCNazoLevelScriptActorBFL_IsCurrentSceneReady");
static_assert(sizeof(RCNazoLevelScriptActorBFL_IsCurrentSceneReady) == 0x000001, "Wrong size on RCNazoLevelScriptActorBFL_IsCurrentSceneReady");
static_assert(offsetof(RCNazoLevelScriptActorBFL_IsCurrentSceneReady, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_IsCurrentSceneReady::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.IsCurrentSceneVisibleCompleted
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActorBFL_IsCurrentSceneVisibleCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_IsCurrentSceneVisibleCompleted) == 0x000001, "Wrong alignment on RCNazoLevelScriptActorBFL_IsCurrentSceneVisibleCompleted");
static_assert(sizeof(RCNazoLevelScriptActorBFL_IsCurrentSceneVisibleCompleted) == 0x000001, "Wrong size on RCNazoLevelScriptActorBFL_IsCurrentSceneVisibleCompleted");
static_assert(offsetof(RCNazoLevelScriptActorBFL_IsCurrentSceneVisibleCompleted, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_IsCurrentSceneVisibleCompleted::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLevelScriptActorBFL_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_IsInitialized) == 0x000001, "Wrong alignment on RCNazoLevelScriptActorBFL_IsInitialized");
static_assert(sizeof(RCNazoLevelScriptActorBFL_IsInitialized) == 0x000001, "Wrong size on RCNazoLevelScriptActorBFL_IsInitialized");
static_assert(offsetof(RCNazoLevelScriptActorBFL_IsInitialized, ReturnValue) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_IsInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.IsLoadSceneCompleted
// 0x000C (0x000C - 0x0000)
struct RCNazoLevelScriptActorBFL_IsLoadSceneCompleted final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoLevelScriptActorBFL_IsLoadSceneCompleted) == 0x000004, "Wrong alignment on RCNazoLevelScriptActorBFL_IsLoadSceneCompleted");
static_assert(sizeof(RCNazoLevelScriptActorBFL_IsLoadSceneCompleted) == 0x00000C, "Wrong size on RCNazoLevelScriptActorBFL_IsLoadSceneCompleted");
static_assert(offsetof(RCNazoLevelScriptActorBFL_IsLoadSceneCompleted, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_IsLoadSceneCompleted::SceneID' has a wrong offset!");
static_assert(offsetof(RCNazoLevelScriptActorBFL_IsLoadSceneCompleted, ReturnValue) == 0x000008, "Member 'RCNazoLevelScriptActorBFL_IsLoadSceneCompleted::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.LoadScene
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActorBFL_LoadScene final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_LoadScene) == 0x000004, "Wrong alignment on RCNazoLevelScriptActorBFL_LoadScene");
static_assert(sizeof(RCNazoLevelScriptActorBFL_LoadScene) == 0x000008, "Wrong size on RCNazoLevelScriptActorBFL_LoadScene");
static_assert(offsetof(RCNazoLevelScriptActorBFL_LoadScene, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_LoadScene::SceneID' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.ReleaseScene
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActorBFL_ReleaseScene final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_ReleaseScene) == 0x000004, "Wrong alignment on RCNazoLevelScriptActorBFL_ReleaseScene");
static_assert(sizeof(RCNazoLevelScriptActorBFL_ReleaseScene) == 0x000008, "Wrong size on RCNazoLevelScriptActorBFL_ReleaseScene");
static_assert(offsetof(RCNazoLevelScriptActorBFL_ReleaseScene, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_ReleaseScene::SceneID' has a wrong offset!");

// Function RC.RCNazoLevelScriptActorBFL.StartScene
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLevelScriptActorBFL_StartScene final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLevelScriptActorBFL_StartScene) == 0x000004, "Wrong alignment on RCNazoLevelScriptActorBFL_StartScene");
static_assert(sizeof(RCNazoLevelScriptActorBFL_StartScene) == 0x000008, "Wrong size on RCNazoLevelScriptActorBFL_StartScene");
static_assert(offsetof(RCNazoLevelScriptActorBFL_StartScene, SceneID) == 0x000000, "Member 'RCNazoLevelScriptActorBFL_StartScene::SceneID' has a wrong offset!");

// Function RC.RCEventTriggerSequencerBox.OnActorBeginOverlapPlayerEntry
// 0x0010 (0x0010 - 0x0000)
struct RCEventTriggerSequencerBox_OnActorBeginOverlapPlayerEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTriggerSequencerBox_OnActorBeginOverlapPlayerEntry) == 0x000008, "Wrong alignment on RCEventTriggerSequencerBox_OnActorBeginOverlapPlayerEntry");
static_assert(sizeof(RCEventTriggerSequencerBox_OnActorBeginOverlapPlayerEntry) == 0x000010, "Wrong size on RCEventTriggerSequencerBox_OnActorBeginOverlapPlayerEntry");
static_assert(offsetof(RCEventTriggerSequencerBox_OnActorBeginOverlapPlayerEntry, OverlappedActor) == 0x000000, "Member 'RCEventTriggerSequencerBox_OnActorBeginOverlapPlayerEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCEventTriggerSequencerBox_OnActorBeginOverlapPlayerEntry, OtherActor) == 0x000008, "Member 'RCEventTriggerSequencerBox_OnActorBeginOverlapPlayerEntry::OtherActor' has a wrong offset!");

// Function RC.RCEventTriggerSequencerBox.ResetSequencer
// 0x0001 (0x0001 - 0x0000)
struct RCEventTriggerSequencerBox_ResetSequencer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCEventTriggerSequencerBox_ResetSequencer) == 0x000001, "Wrong alignment on RCEventTriggerSequencerBox_ResetSequencer");
static_assert(sizeof(RCEventTriggerSequencerBox_ResetSequencer) == 0x000001, "Wrong size on RCEventTriggerSequencerBox_ResetSequencer");
static_assert(offsetof(RCEventTriggerSequencerBox_ResetSequencer, ReturnValue) == 0x000000, "Member 'RCEventTriggerSequencerBox_ResetSequencer::ReturnValue' has a wrong offset!");

// Function RC.RCForceFeedBackBFL.StartForceFeedBack
// 0x000C (0x000C - 0x0000)
struct RCForceFeedBackBFL_StartForceFeedBack final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipPlay;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTimeDilation;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCForceFeedBackBFL_StartForceFeedBack) == 0x000004, "Wrong alignment on RCForceFeedBackBFL_StartForceFeedBack");
static_assert(sizeof(RCForceFeedBackBFL_StartForceFeedBack) == 0x00000C, "Wrong size on RCForceFeedBackBFL_StartForceFeedBack");
static_assert(offsetof(RCForceFeedBackBFL_StartForceFeedBack, InID) == 0x000000, "Member 'RCForceFeedBackBFL_StartForceFeedBack::InID' has a wrong offset!");
static_assert(offsetof(RCForceFeedBackBFL_StartForceFeedBack, bSkipPlay) == 0x000008, "Member 'RCForceFeedBackBFL_StartForceFeedBack::bSkipPlay' has a wrong offset!");
static_assert(offsetof(RCForceFeedBackBFL_StartForceFeedBack, bIgnoreTimeDilation) == 0x000009, "Member 'RCForceFeedBackBFL_StartForceFeedBack::bIgnoreTimeDilation' has a wrong offset!");
static_assert(offsetof(RCForceFeedBackBFL_StartForceFeedBack, ReturnValue) == 0x00000A, "Member 'RCForceFeedBackBFL_StartForceFeedBack::ReturnValue' has a wrong offset!");

// Function RC.RCGameInstance.GetEffectManager
// 0x0008 (0x0008 - 0x0000)
struct RCGameInstance_GetEffectManager final
{
public:
	class URCEffectManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameInstance_GetEffectManager) == 0x000008, "Wrong alignment on RCGameInstance_GetEffectManager");
static_assert(sizeof(RCGameInstance_GetEffectManager) == 0x000008, "Wrong size on RCGameInstance_GetEffectManager");
static_assert(offsetof(RCGameInstance_GetEffectManager, ReturnValue) == 0x000000, "Member 'RCGameInstance_GetEffectManager::ReturnValue' has a wrong offset!");

// Function RC.RCGameInstance.GetMovieManager
// 0x0008 (0x0008 - 0x0000)
struct RCGameInstance_GetMovieManager final
{
public:
	class ARCMovieManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameInstance_GetMovieManager) == 0x000008, "Wrong alignment on RCGameInstance_GetMovieManager");
static_assert(sizeof(RCGameInstance_GetMovieManager) == 0x000008, "Wrong size on RCGameInstance_GetMovieManager");
static_assert(offsetof(RCGameInstance_GetMovieManager, ReturnValue) == 0x000000, "Member 'RCGameInstance_GetMovieManager::ReturnValue' has a wrong offset!");

// Function RC.RCGameInstance.GetPlatformUser
// 0x0010 (0x0010 - 0x0000)
struct RCGameInstance_GetPlatformUser final
{
public:
	TScriptInterface<class IRCPlatformUserInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameInstance_GetPlatformUser) == 0x000008, "Wrong alignment on RCGameInstance_GetPlatformUser");
static_assert(sizeof(RCGameInstance_GetPlatformUser) == 0x000010, "Wrong size on RCGameInstance_GetPlatformUser");
static_assert(offsetof(RCGameInstance_GetPlatformUser, ReturnValue) == 0x000000, "Member 'RCGameInstance_GetPlatformUser::ReturnValue' has a wrong offset!");

// Function RC.RCGameInstance.GetSoundManager
// 0x0008 (0x0008 - 0x0000)
struct RCGameInstance_GetSoundManager final
{
public:
	class ARCSoundManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameInstance_GetSoundManager) == 0x000008, "Wrong alignment on RCGameInstance_GetSoundManager");
static_assert(sizeof(RCGameInstance_GetSoundManager) == 0x000008, "Wrong size on RCGameInstance_GetSoundManager");
static_assert(offsetof(RCGameInstance_GetSoundManager, ReturnValue) == 0x000000, "Member 'RCGameInstance_GetSoundManager::ReturnValue' has a wrong offset!");

// Function RC.RCGameInstance.GetStatusProduction
// 0x0001 (0x0001 - 0x0000)
struct RCGameInstance_GetStatusProduction final
{
public:
	ERCProduction                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameInstance_GetStatusProduction) == 0x000001, "Wrong alignment on RCGameInstance_GetStatusProduction");
static_assert(sizeof(RCGameInstance_GetStatusProduction) == 0x000001, "Wrong size on RCGameInstance_GetStatusProduction");
static_assert(offsetof(RCGameInstance_GetStatusProduction, ReturnValue) == 0x000000, "Member 'RCGameInstance_GetStatusProduction::ReturnValue' has a wrong offset!");

// Function RC.RCGameInstance.IsStatusDlcInstall
// 0x0002 (0x0002 - 0x0000)
struct RCGameInstance_IsStatusDlcInstall final
{
public:
	ERCDlcInstall                                 InDlc;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameInstance_IsStatusDlcInstall) == 0x000001, "Wrong alignment on RCGameInstance_IsStatusDlcInstall");
static_assert(sizeof(RCGameInstance_IsStatusDlcInstall) == 0x000002, "Wrong size on RCGameInstance_IsStatusDlcInstall");
static_assert(offsetof(RCGameInstance_IsStatusDlcInstall, InDlc) == 0x000000, "Member 'RCGameInstance_IsStatusDlcInstall::InDlc' has a wrong offset!");
static_assert(offsetof(RCGameInstance_IsStatusDlcInstall, ReturnValue) == 0x000001, "Member 'RCGameInstance_IsStatusDlcInstall::ReturnValue' has a wrong offset!");

// Function RC.RCGameInstance.IsStatusGalleryEnable
// 0x0001 (0x0001 - 0x0000)
struct RCGameInstance_IsStatusGalleryEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameInstance_IsStatusGalleryEnable) == 0x000001, "Wrong alignment on RCGameInstance_IsStatusGalleryEnable");
static_assert(sizeof(RCGameInstance_IsStatusGalleryEnable) == 0x000001, "Wrong size on RCGameInstance_IsStatusGalleryEnable");
static_assert(offsetof(RCGameInstance_IsStatusGalleryEnable, ReturnValue) == 0x000000, "Member 'RCGameInstance_IsStatusGalleryEnable::ReturnValue' has a wrong offset!");

// Function RC.RCGameInstance.SetDrawDebugPrint
// 0x0001 (0x0001 - 0x0000)
struct RCGameInstance_SetDrawDebugPrint final
{
public:
	bool                                          bDebugDraw;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameInstance_SetDrawDebugPrint) == 0x000001, "Wrong alignment on RCGameInstance_SetDrawDebugPrint");
static_assert(sizeof(RCGameInstance_SetDrawDebugPrint) == 0x000001, "Wrong size on RCGameInstance_SetDrawDebugPrint");
static_assert(offsetof(RCGameInstance_SetDrawDebugPrint, bDebugDraw) == 0x000000, "Member 'RCGameInstance_SetDrawDebugPrint::bDebugDraw' has a wrong offset!");

// Function RC.RCGameInstance.SetStatusProduction
// 0x0001 (0x0001 - 0x0000)
struct RCGameInstance_SetStatusProduction final
{
public:
	ERCProduction                                 InProduction;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGameInstance_SetStatusProduction) == 0x000001, "Wrong alignment on RCGameInstance_SetStatusProduction");
static_assert(sizeof(RCGameInstance_SetStatusProduction) == 0x000001, "Wrong size on RCGameInstance_SetStatusProduction");
static_assert(offsetof(RCGameInstance_SetStatusProduction, InProduction) == 0x000000, "Member 'RCGameInstance_SetStatusProduction::InProduction' has a wrong offset!");

// Function RC.RCGrassRippleTransformer.MakeOriginalTransformArray
// 0x0050 (0x0050 - 0x0000)
struct RCGrassRippleTransformer_MakeOriginalTransformArray final
{
public:
	TMap<int32, struct FRCGrassTransformParameter> OutTransformParameters;                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGrassRippleTransformer_MakeOriginalTransformArray) == 0x000008, "Wrong alignment on RCGrassRippleTransformer_MakeOriginalTransformArray");
static_assert(sizeof(RCGrassRippleTransformer_MakeOriginalTransformArray) == 0x000050, "Wrong size on RCGrassRippleTransformer_MakeOriginalTransformArray");
static_assert(offsetof(RCGrassRippleTransformer_MakeOriginalTransformArray, OutTransformParameters) == 0x000000, "Member 'RCGrassRippleTransformer_MakeOriginalTransformArray::OutTransformParameters' has a wrong offset!");

// Function RC.RCGrassSweepTransformer.CalcLookTiltRotator
// 0x001C (0x001C - 0x0000)
struct RCGrassSweepTransformer_CalcLookTiltRotator final
{
public:
	struct FVector                                TargetDirection;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAngle;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCGrassSweepTransformer_CalcLookTiltRotator) == 0x000004, "Wrong alignment on RCGrassSweepTransformer_CalcLookTiltRotator");
static_assert(sizeof(RCGrassSweepTransformer_CalcLookTiltRotator) == 0x00001C, "Wrong size on RCGrassSweepTransformer_CalcLookTiltRotator");
static_assert(offsetof(RCGrassSweepTransformer_CalcLookTiltRotator, TargetDirection) == 0x000000, "Member 'RCGrassSweepTransformer_CalcLookTiltRotator::TargetDirection' has a wrong offset!");
static_assert(offsetof(RCGrassSweepTransformer_CalcLookTiltRotator, RotationAngle) == 0x00000C, "Member 'RCGrassSweepTransformer_CalcLookTiltRotator::RotationAngle' has a wrong offset!");
static_assert(offsetof(RCGrassSweepTransformer_CalcLookTiltRotator, ReturnValue) == 0x000010, "Member 'RCGrassSweepTransformer_CalcLookTiltRotator::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.AddGrassStatus
// 0x0008 (0x0008 - 0x0000)
struct RCInteractiveFoliageComponent_AddGrassStatus final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGrassStatus                                Status;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInteractiveFoliageComponent_AddGrassStatus) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_AddGrassStatus");
static_assert(sizeof(RCInteractiveFoliageComponent_AddGrassStatus) == 0x000008, "Wrong size on RCInteractiveFoliageComponent_AddGrassStatus");
static_assert(offsetof(RCInteractiveFoliageComponent_AddGrassStatus, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_AddGrassStatus::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_AddGrassStatus, Status) == 0x000004, "Member 'RCInteractiveFoliageComponent_AddGrassStatus::Status' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.AddGrassTransformer
// 0x0010 (0x0010 - 0x0000)
struct RCInteractiveFoliageComponent_AddGrassTransformer final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCGrassTransformer*                    Transformer;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInteractiveFoliageComponent_AddGrassTransformer) == 0x000008, "Wrong alignment on RCInteractiveFoliageComponent_AddGrassTransformer");
static_assert(sizeof(RCInteractiveFoliageComponent_AddGrassTransformer) == 0x000010, "Wrong size on RCInteractiveFoliageComponent_AddGrassTransformer");
static_assert(offsetof(RCInteractiveFoliageComponent_AddGrassTransformer, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_AddGrassTransformer::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_AddGrassTransformer, Transformer) == 0x000008, "Member 'RCInteractiveFoliageComponent_AddGrassTransformer::Transformer' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.GetGrassTransformer
// 0x0010 (0x0010 - 0x0000)
struct RCInteractiveFoliageComponent_GetGrassTransformer final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCGrassTransformer*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInteractiveFoliageComponent_GetGrassTransformer) == 0x000008, "Wrong alignment on RCInteractiveFoliageComponent_GetGrassTransformer");
static_assert(sizeof(RCInteractiveFoliageComponent_GetGrassTransformer) == 0x000010, "Wrong size on RCInteractiveFoliageComponent_GetGrassTransformer");
static_assert(offsetof(RCInteractiveFoliageComponent_GetGrassTransformer, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_GetGrassTransformer::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_GetGrassTransformer, ReturnValue) == 0x000008, "Member 'RCInteractiveFoliageComponent_GetGrassTransformer::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.GetInstancesOverlappingMultiSphereTrace_Hierarchial
// 0x0030 (0x0030 - 0x0000)
struct RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial) == 0x000008, "Wrong alignment on RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial");
static_assert(sizeof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial) == 0x000030, "Wrong size on RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial");
static_assert(offsetof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial, Start) == 0x000000, "Member 'RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial::Start' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial, End) == 0x00000C, "Member 'RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial::End' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial, Radius) == 0x000018, "Member 'RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial::Radius' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial, ReturnValue) == 0x000020, "Member 'RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_Hierarchial::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh
// 0x0030 (0x0030 - 0x0000)
struct RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh) == 0x000008, "Wrong alignment on RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh");
static_assert(sizeof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh) == 0x000030, "Wrong size on RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh");
static_assert(offsetof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh, Start) == 0x000000, "Member 'RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh::Start' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh, End) == 0x00000C, "Member 'RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh::End' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh, Radius) == 0x000018, "Member 'RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh::Radius' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh, ReturnValue) == 0x000020, "Member 'RCInteractiveFoliageComponent_GetInstancesOverlappingMultiSphereTrace_InstancedStaticMesh::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.IsGrassChangingTransform
// 0x0008 (0x0008 - 0x0000)
struct RCInteractiveFoliageComponent_IsGrassChangingTransform final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInteractiveFoliageComponent_IsGrassChangingTransform) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_IsGrassChangingTransform");
static_assert(sizeof(RCInteractiveFoliageComponent_IsGrassChangingTransform) == 0x000008, "Wrong size on RCInteractiveFoliageComponent_IsGrassChangingTransform");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassChangingTransform, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_IsGrassChangingTransform::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassChangingTransform, ReturnValue) == 0x000004, "Member 'RCInteractiveFoliageComponent_IsGrassChangingTransform::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.IsGrassDeformed
// 0x0008 (0x0008 - 0x0000)
struct RCInteractiveFoliageComponent_IsGrassDeformed final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInteractiveFoliageComponent_IsGrassDeformed) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_IsGrassDeformed");
static_assert(sizeof(RCInteractiveFoliageComponent_IsGrassDeformed) == 0x000008, "Wrong size on RCInteractiveFoliageComponent_IsGrassDeformed");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassDeformed, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_IsGrassDeformed::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassDeformed, ReturnValue) == 0x000004, "Member 'RCInteractiveFoliageComponent_IsGrassDeformed::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.IsGrassFreshlyDeformed
// 0x0008 (0x0008 - 0x0000)
struct RCInteractiveFoliageComponent_IsGrassFreshlyDeformed final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInteractiveFoliageComponent_IsGrassFreshlyDeformed) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_IsGrassFreshlyDeformed");
static_assert(sizeof(RCInteractiveFoliageComponent_IsGrassFreshlyDeformed) == 0x000008, "Wrong size on RCInteractiveFoliageComponent_IsGrassFreshlyDeformed");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassFreshlyDeformed, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_IsGrassFreshlyDeformed::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassFreshlyDeformed, ReturnValue) == 0x000004, "Member 'RCInteractiveFoliageComponent_IsGrassFreshlyDeformed::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.IsGrassTrampled
// 0x0008 (0x0008 - 0x0000)
struct RCInteractiveFoliageComponent_IsGrassTrampled final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInteractiveFoliageComponent_IsGrassTrampled) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_IsGrassTrampled");
static_assert(sizeof(RCInteractiveFoliageComponent_IsGrassTrampled) == 0x000008, "Wrong size on RCInteractiveFoliageComponent_IsGrassTrampled");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassTrampled, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_IsGrassTrampled::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassTrampled, ReturnValue) == 0x000004, "Member 'RCInteractiveFoliageComponent_IsGrassTrampled::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.IsGrassUnDeforming
// 0x0008 (0x0008 - 0x0000)
struct RCInteractiveFoliageComponent_IsGrassUnDeforming final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInteractiveFoliageComponent_IsGrassUnDeforming) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_IsGrassUnDeforming");
static_assert(sizeof(RCInteractiveFoliageComponent_IsGrassUnDeforming) == 0x000008, "Wrong size on RCInteractiveFoliageComponent_IsGrassUnDeforming");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassUnDeforming, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_IsGrassUnDeforming::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassUnDeforming, ReturnValue) == 0x000004, "Member 'RCInteractiveFoliageComponent_IsGrassUnDeforming::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.IsGrassUnTrampling
// 0x0008 (0x0008 - 0x0000)
struct RCInteractiveFoliageComponent_IsGrassUnTrampling final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInteractiveFoliageComponent_IsGrassUnTrampling) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_IsGrassUnTrampling");
static_assert(sizeof(RCInteractiveFoliageComponent_IsGrassUnTrampling) == 0x000008, "Wrong size on RCInteractiveFoliageComponent_IsGrassUnTrampling");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassUnTrampling, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_IsGrassUnTrampling::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_IsGrassUnTrampling, ReturnValue) == 0x000004, "Member 'RCInteractiveFoliageComponent_IsGrassUnTrampling::ReturnValue' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.RemoveGrassStatus
// 0x0008 (0x0008 - 0x0000)
struct RCInteractiveFoliageComponent_RemoveGrassStatus final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGrassStatus                                Status;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCInteractiveFoliageComponent_RemoveGrassStatus) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_RemoveGrassStatus");
static_assert(sizeof(RCInteractiveFoliageComponent_RemoveGrassStatus) == 0x000008, "Wrong size on RCInteractiveFoliageComponent_RemoveGrassStatus");
static_assert(offsetof(RCInteractiveFoliageComponent_RemoveGrassStatus, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_RemoveGrassStatus::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_RemoveGrassStatus, Status) == 0x000004, "Member 'RCInteractiveFoliageComponent_RemoveGrassStatus::Status' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.RemoveGrassTransformer
// 0x0004 (0x0004 - 0x0000)
struct RCInteractiveFoliageComponent_RemoveGrassTransformer final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInteractiveFoliageComponent_RemoveGrassTransformer) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_RemoveGrassTransformer");
static_assert(sizeof(RCInteractiveFoliageComponent_RemoveGrassTransformer) == 0x000004, "Wrong size on RCInteractiveFoliageComponent_RemoveGrassTransformer");
static_assert(offsetof(RCInteractiveFoliageComponent_RemoveGrassTransformer, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_RemoveGrassTransformer::InstanceIndex' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.SetupOriginalTransformsToDevidedComponents
// 0x0028 (0x0028 - 0x0000)
struct RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents final
{
public:
	struct FVector                                UpperLeft;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChunkSize;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChunkAmountX;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URCInteractiveFoliageComponent*> ChunkedComponents;                                 // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents) == 0x000008, "Wrong alignment on RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents");
static_assert(sizeof(RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents) == 0x000028, "Wrong size on RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents");
static_assert(offsetof(RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents, UpperLeft) == 0x000000, "Member 'RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents::UpperLeft' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents, ChunkSize) == 0x00000C, "Member 'RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents::ChunkSize' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents, ChunkAmountX) == 0x000010, "Member 'RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents::ChunkAmountX' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents, ChunkedComponents) == 0x000018, "Member 'RCInteractiveFoliageComponent_SetupOriginalTransformsToDevidedComponents::ChunkedComponents' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.StopUpdateTransformerInstances
// 0x0010 (0x0010 - 0x0000)
struct RCInteractiveFoliageComponent_StopUpdateTransformerInstances final
{
public:
	TArray<int32>                                 Instances;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInteractiveFoliageComponent_StopUpdateTransformerInstances) == 0x000008, "Wrong alignment on RCInteractiveFoliageComponent_StopUpdateTransformerInstances");
static_assert(sizeof(RCInteractiveFoliageComponent_StopUpdateTransformerInstances) == 0x000010, "Wrong size on RCInteractiveFoliageComponent_StopUpdateTransformerInstances");
static_assert(offsetof(RCInteractiveFoliageComponent_StopUpdateTransformerInstances, Instances) == 0x000000, "Member 'RCInteractiveFoliageComponent_StopUpdateTransformerInstances::Instances' has a wrong offset!");

// Function RC.RCInteractiveFoliageComponent.GetGrassWaitingToResumeGrowAlpha
// 0x0008 (0x0008 - 0x0000)
struct RCInteractiveFoliageComponent_GetGrassWaitingToResumeGrowAlpha final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCInteractiveFoliageComponent_GetGrassWaitingToResumeGrowAlpha) == 0x000004, "Wrong alignment on RCInteractiveFoliageComponent_GetGrassWaitingToResumeGrowAlpha");
static_assert(sizeof(RCInteractiveFoliageComponent_GetGrassWaitingToResumeGrowAlpha) == 0x000008, "Wrong size on RCInteractiveFoliageComponent_GetGrassWaitingToResumeGrowAlpha");
static_assert(offsetof(RCInteractiveFoliageComponent_GetGrassWaitingToResumeGrowAlpha, InstanceIndex) == 0x000000, "Member 'RCInteractiveFoliageComponent_GetGrassWaitingToResumeGrowAlpha::InstanceIndex' has a wrong offset!");
static_assert(offsetof(RCInteractiveFoliageComponent_GetGrassWaitingToResumeGrowAlpha, ReturnValue) == 0x000004, "Member 'RCInteractiveFoliageComponent_GetGrassWaitingToResumeGrowAlpha::ReturnValue' has a wrong offset!");

// Function RC.RCLevel.ChangeGameLevel
// 0x0010 (0x0010 - 0x0000)
struct RCLevel_ChangeGameLevel final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScene;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCLevel_ChangeGameLevel) == 0x000004, "Wrong alignment on RCLevel_ChangeGameLevel");
static_assert(sizeof(RCLevel_ChangeGameLevel) == 0x000010, "Wrong size on RCLevel_ChangeGameLevel");
static_assert(offsetof(RCLevel_ChangeGameLevel, InChapter) == 0x000000, "Member 'RCLevel_ChangeGameLevel::InChapter' has a wrong offset!");
static_assert(offsetof(RCLevel_ChangeGameLevel, InScene) == 0x000004, "Member 'RCLevel_ChangeGameLevel::InScene' has a wrong offset!");
static_assert(offsetof(RCLevel_ChangeGameLevel, ReturnValue) == 0x00000C, "Member 'RCLevel_ChangeGameLevel::ReturnValue' has a wrong offset!");

// Function RC.RCLevel.ChangeTitle
// 0x0001 (0x0001 - 0x0000)
struct RCLevel_ChangeTitle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCLevel_ChangeTitle) == 0x000001, "Wrong alignment on RCLevel_ChangeTitle");
static_assert(sizeof(RCLevel_ChangeTitle) == 0x000001, "Wrong size on RCLevel_ChangeTitle");
static_assert(offsetof(RCLevel_ChangeTitle, ReturnValue) == 0x000000, "Member 'RCLevel_ChangeTitle::ReturnValue' has a wrong offset!");

// Function RC.RCLevel.SetAllMeshVisible
// 0x0002 (0x0002 - 0x0000)
struct RCLevel_SetAllMeshVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActor;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCLevel_SetAllMeshVisible) == 0x000001, "Wrong alignment on RCLevel_SetAllMeshVisible");
static_assert(sizeof(RCLevel_SetAllMeshVisible) == 0x000002, "Wrong size on RCLevel_SetAllMeshVisible");
static_assert(offsetof(RCLevel_SetAllMeshVisible, bVisible) == 0x000000, "Member 'RCLevel_SetAllMeshVisible::bVisible' has a wrong offset!");
static_assert(offsetof(RCLevel_SetAllMeshVisible, bIsActor) == 0x000001, "Member 'RCLevel_SetAllMeshVisible::bIsActor' has a wrong offset!");

// Function RC.RCLevelStreamingDynamic.LoadLevelInstance
// 0x0028 (0x0028 - 0x0000)
struct RCLevelStreamingDynamic_LoadLevelInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInitiallyVisible;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSuccess;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URCLevelStreamingDynamic*               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCLevelStreamingDynamic_LoadLevelInstance) == 0x000008, "Wrong alignment on RCLevelStreamingDynamic_LoadLevelInstance");
static_assert(sizeof(RCLevelStreamingDynamic_LoadLevelInstance) == 0x000028, "Wrong size on RCLevelStreamingDynamic_LoadLevelInstance");
static_assert(offsetof(RCLevelStreamingDynamic_LoadLevelInstance, WorldContextObject) == 0x000000, "Member 'RCLevelStreamingDynamic_LoadLevelInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCLevelStreamingDynamic_LoadLevelInstance, LevelName) == 0x000008, "Member 'RCLevelStreamingDynamic_LoadLevelInstance::LevelName' has a wrong offset!");
static_assert(offsetof(RCLevelStreamingDynamic_LoadLevelInstance, bInInitiallyVisible) == 0x000018, "Member 'RCLevelStreamingDynamic_LoadLevelInstance::bInInitiallyVisible' has a wrong offset!");
static_assert(offsetof(RCLevelStreamingDynamic_LoadLevelInstance, bOutSuccess) == 0x000019, "Member 'RCLevelStreamingDynamic_LoadLevelInstance::bOutSuccess' has a wrong offset!");
static_assert(offsetof(RCLevelStreamingDynamic_LoadLevelInstance, ReturnValue) == 0x000020, "Member 'RCLevelStreamingDynamic_LoadLevelInstance::ReturnValue' has a wrong offset!");

// Function RC.RCLevelStreamingDynamic.UnLoadLevelInstance
// 0x0018 (0x0018 - 0x0000)
struct RCLevelStreamingDynamic_UnLoadLevelInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCLevelStreamingDynamic*               StreamingLevel;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSuccess;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCLevelStreamingDynamic_UnLoadLevelInstance) == 0x000008, "Wrong alignment on RCLevelStreamingDynamic_UnLoadLevelInstance");
static_assert(sizeof(RCLevelStreamingDynamic_UnLoadLevelInstance) == 0x000018, "Wrong size on RCLevelStreamingDynamic_UnLoadLevelInstance");
static_assert(offsetof(RCLevelStreamingDynamic_UnLoadLevelInstance, WorldContextObject) == 0x000000, "Member 'RCLevelStreamingDynamic_UnLoadLevelInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCLevelStreamingDynamic_UnLoadLevelInstance, StreamingLevel) == 0x000008, "Member 'RCLevelStreamingDynamic_UnLoadLevelInstance::StreamingLevel' has a wrong offset!");
static_assert(offsetof(RCLevelStreamingDynamic_UnLoadLevelInstance, bOutSuccess) == 0x000010, "Member 'RCLevelStreamingDynamic_UnLoadLevelInstance::bOutSuccess' has a wrong offset!");

// Function RC.RCText3DActor.GetText
// 0x0018 (0x0018 - 0x0000)
struct RCText3DActor_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActor_GetText) == 0x000008, "Wrong alignment on RCText3DActor_GetText");
static_assert(sizeof(RCText3DActor_GetText) == 0x000018, "Wrong size on RCText3DActor_GetText");
static_assert(offsetof(RCText3DActor_GetText, ReturnValue) == 0x000000, "Member 'RCText3DActor_GetText::ReturnValue' has a wrong offset!");

// Function RC.RCText3DActor.GetTextSize
// 0x000C (0x000C - 0x0000)
struct RCText3DActor_GetTextSize final
{
public:
	struct FVector                                OutTextSize;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActor_GetTextSize) == 0x000004, "Wrong alignment on RCText3DActor_GetTextSize");
static_assert(sizeof(RCText3DActor_GetTextSize) == 0x00000C, "Wrong size on RCText3DActor_GetTextSize");
static_assert(offsetof(RCText3DActor_GetTextSize, OutTextSize) == 0x000000, "Member 'RCText3DActor_GetTextSize::OutTextSize' has a wrong offset!");

// Function RC.RCText3DActor.IsPause
// 0x0001 (0x0001 - 0x0000)
struct RCText3DActor_IsPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActor_IsPause) == 0x000001, "Wrong alignment on RCText3DActor_IsPause");
static_assert(sizeof(RCText3DActor_IsPause) == 0x000001, "Wrong size on RCText3DActor_IsPause");
static_assert(offsetof(RCText3DActor_IsPause, ReturnValue) == 0x000000, "Member 'RCText3DActor_IsPause::ReturnValue' has a wrong offset!");

// Function RC.RCText3DActor.IsVisibility
// 0x0001 (0x0001 - 0x0000)
struct RCText3DActor_IsVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActor_IsVisibility) == 0x000001, "Wrong alignment on RCText3DActor_IsVisibility");
static_assert(sizeof(RCText3DActor_IsVisibility) == 0x000001, "Wrong size on RCText3DActor_IsVisibility");
static_assert(offsetof(RCText3DActor_IsVisibility, ReturnValue) == 0x000000, "Member 'RCText3DActor_IsVisibility::ReturnValue' has a wrong offset!");

// Function RC.RCText3DActor.SetPause
// 0x0002 (0x0002 - 0x0000)
struct RCText3DActor_SetPause final
{
public:
	bool                                          bInPause;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActor_SetPause) == 0x000001, "Wrong alignment on RCText3DActor_SetPause");
static_assert(sizeof(RCText3DActor_SetPause) == 0x000002, "Wrong size on RCText3DActor_SetPause");
static_assert(offsetof(RCText3DActor_SetPause, bInPause) == 0x000000, "Member 'RCText3DActor_SetPause::bInPause' has a wrong offset!");
static_assert(offsetof(RCText3DActor_SetPause, bDirect) == 0x000001, "Member 'RCText3DActor_SetPause::bDirect' has a wrong offset!");

// Function RC.RCText3DActor.SetVisibility
// 0x0002 (0x0002 - 0x0000)
struct RCText3DActor_SetVisibility final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCText3DActor_SetVisibility) == 0x000001, "Wrong alignment on RCText3DActor_SetVisibility");
static_assert(sizeof(RCText3DActor_SetVisibility) == 0x000002, "Wrong size on RCText3DActor_SetVisibility");
static_assert(offsetof(RCText3DActor_SetVisibility, bInVisible) == 0x000000, "Member 'RCText3DActor_SetVisibility::bInVisible' has a wrong offset!");
static_assert(offsetof(RCText3DActor_SetVisibility, bDirect) == 0x000001, "Member 'RCText3DActor_SetVisibility::bDirect' has a wrong offset!");

// Function RC.RCText3DActor.SetWidth
// 0x0008 (0x0008 - 0x0000)
struct RCText3DActor_SetWidth final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActorScale;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExceptJA;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCText3DActor_SetWidth) == 0x000004, "Wrong alignment on RCText3DActor_SetWidth");
static_assert(sizeof(RCText3DActor_SetWidth) == 0x000008, "Wrong size on RCText3DActor_SetWidth");
static_assert(offsetof(RCText3DActor_SetWidth, Width) == 0x000000, "Member 'RCText3DActor_SetWidth::Width' has a wrong offset!");
static_assert(offsetof(RCText3DActor_SetWidth, bActorScale) == 0x000004, "Member 'RCText3DActor_SetWidth::bActorScale' has a wrong offset!");
static_assert(offsetof(RCText3DActor_SetWidth, bExceptJA) == 0x000005, "Member 'RCText3DActor_SetWidth::bExceptJA' has a wrong offset!");

// Function RC.RCLocalizeText3DActor.GetTextID
// 0x0008 (0x0008 - 0x0000)
struct RCLocalizeText3DActor_GetTextID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCLocalizeText3DActor_GetTextID) == 0x000004, "Wrong alignment on RCLocalizeText3DActor_GetTextID");
static_assert(sizeof(RCLocalizeText3DActor_GetTextID) == 0x000008, "Wrong size on RCLocalizeText3DActor_GetTextID");
static_assert(offsetof(RCLocalizeText3DActor_GetTextID, ReturnValue) == 0x000000, "Member 'RCLocalizeText3DActor_GetTextID::ReturnValue' has a wrong offset!");

// Function RC.RCLocalizeText3DActor.SetTextID
// 0x0008 (0x0008 - 0x0000)
struct RCLocalizeText3DActor_SetTextID final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCLocalizeText3DActor_SetTextID) == 0x000004, "Wrong alignment on RCLocalizeText3DActor_SetTextID");
static_assert(sizeof(RCLocalizeText3DActor_SetTextID) == 0x000008, "Wrong size on RCLocalizeText3DActor_SetTextID");
static_assert(offsetof(RCLocalizeText3DActor_SetTextID, InTextID) == 0x000000, "Member 'RCLocalizeText3DActor_SetTextID::InTextID' has a wrong offset!");

// Function RC.RCMenuCollection.CollectionSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCMenuCollection_CollectionSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMenuCollection_CollectionSelectNavigation) == 0x000008, "Wrong alignment on RCMenuCollection_CollectionSelectNavigation");
static_assert(sizeof(RCMenuCollection_CollectionSelectNavigation) == 0x000010, "Wrong size on RCMenuCollection_CollectionSelectNavigation");
static_assert(offsetof(RCMenuCollection_CollectionSelectNavigation, InNavigation) == 0x000000, "Member 'RCMenuCollection_CollectionSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCMenuCollection_CollectionSelectNavigation, ReturnValue) == 0x000008, "Member 'RCMenuCollection_CollectionSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCMenuCollection.PageJump
// 0x0004 (0x0004 - 0x0000)
struct RCMenuCollection_PageJump final
{
public:
	int32                                         InPageIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMenuCollection_PageJump) == 0x000004, "Wrong alignment on RCMenuCollection_PageJump");
static_assert(sizeof(RCMenuCollection_PageJump) == 0x000004, "Wrong size on RCMenuCollection_PageJump");
static_assert(offsetof(RCMenuCollection_PageJump, InPageIndex) == 0x000000, "Member 'RCMenuCollection_PageJump::InPageIndex' has a wrong offset!");

// Function RC.RCMenuCollectionLayout.CancelWrap
// 0x0001 (0x0001 - 0x0000)
struct RCMenuCollectionLayout_CancelWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMenuCollectionLayout_CancelWrap) == 0x000001, "Wrong alignment on RCMenuCollectionLayout_CancelWrap");
static_assert(sizeof(RCMenuCollectionLayout_CancelWrap) == 0x000001, "Wrong size on RCMenuCollectionLayout_CancelWrap");
static_assert(offsetof(RCMenuCollectionLayout_CancelWrap, InKeyType) == 0x000000, "Member 'RCMenuCollectionLayout_CancelWrap::InKeyType' has a wrong offset!");

// Function RC.RCMenuCollectionLayout.DecideWrap
// 0x0001 (0x0001 - 0x0000)
struct RCMenuCollectionLayout_DecideWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMenuCollectionLayout_DecideWrap) == 0x000001, "Wrong alignment on RCMenuCollectionLayout_DecideWrap");
static_assert(sizeof(RCMenuCollectionLayout_DecideWrap) == 0x000001, "Wrong size on RCMenuCollectionLayout_DecideWrap");
static_assert(offsetof(RCMenuCollectionLayout_DecideWrap, InKeyType) == 0x000000, "Member 'RCMenuCollectionLayout_DecideWrap::InKeyType' has a wrong offset!");

// Function RC.RCVariableBFL.AddChapterValueDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_AddChapterValueDirect final
{
public:
	class FName                                   InChapterVariableName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_AddChapterValueDirect) == 0x000004, "Wrong alignment on RCVariableBFL_AddChapterValueDirect");
static_assert(sizeof(RCVariableBFL_AddChapterValueDirect) == 0x00000C, "Wrong size on RCVariableBFL_AddChapterValueDirect");
static_assert(offsetof(RCVariableBFL_AddChapterValueDirect, InChapterVariableName) == 0x000000, "Member 'RCVariableBFL_AddChapterValueDirect::InChapterVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddChapterValueDirect, InValue) == 0x000008, "Member 'RCVariableBFL_AddChapterValueDirect::InValue' has a wrong offset!");

// Function RC.RCVariableBFL.AddGameValueDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_AddGameValueDirect final
{
public:
	class FName                                   InGameVariableName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_AddGameValueDirect) == 0x000004, "Wrong alignment on RCVariableBFL_AddGameValueDirect");
static_assert(sizeof(RCVariableBFL_AddGameValueDirect) == 0x00000C, "Wrong size on RCVariableBFL_AddGameValueDirect");
static_assert(offsetof(RCVariableBFL_AddGameValueDirect, InGameVariableName) == 0x000000, "Member 'RCVariableBFL_AddGameValueDirect::InGameVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddGameValueDirect, InValue) == 0x000008, "Member 'RCVariableBFL_AddGameValueDirect::InValue' has a wrong offset!");

// Function RC.RCVariableBFL.AddLog
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_AddLog final
{
public:
	int32                                         InCharacterFaceID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVoiceID;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_AddLog) == 0x000004, "Wrong alignment on RCVariableBFL_AddLog");
static_assert(sizeof(RCVariableBFL_AddLog) == 0x000018, "Wrong size on RCVariableBFL_AddLog");
static_assert(offsetof(RCVariableBFL_AddLog, InCharacterFaceID) == 0x000000, "Member 'RCVariableBFL_AddLog::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddLog, InCharacterFacialID) == 0x000004, "Member 'RCVariableBFL_AddLog::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddLog, InTextID) == 0x000008, "Member 'RCVariableBFL_AddLog::InTextID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddLog, InVoiceID) == 0x000010, "Member 'RCVariableBFL_AddLog::InVoiceID' has a wrong offset!");

// Function RC.RCVariableBFL.AddNazoResultContinue
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_AddNazoResultContinue final
{
public:
	int32                                         InRound;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMinigameID;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_AddNazoResultContinue) == 0x000004, "Wrong alignment on RCVariableBFL_AddNazoResultContinue");
static_assert(sizeof(RCVariableBFL_AddNazoResultContinue) == 0x00000C, "Wrong size on RCVariableBFL_AddNazoResultContinue");
static_assert(offsetof(RCVariableBFL_AddNazoResultContinue, InRound) == 0x000000, "Member 'RCVariableBFL_AddNazoResultContinue::InRound' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddNazoResultContinue, InMinigameID) == 0x000004, "Member 'RCVariableBFL_AddNazoResultContinue::InMinigameID' has a wrong offset!");

// Function RC.RCVariableBFL.AddNazoResultFailureCount
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_AddNazoResultFailureCount final
{
public:
	class FName                                   InMinigameID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_AddNazoResultFailureCount) == 0x000004, "Wrong alignment on RCVariableBFL_AddNazoResultFailureCount");
static_assert(sizeof(RCVariableBFL_AddNazoResultFailureCount) == 0x000008, "Wrong size on RCVariableBFL_AddNazoResultFailureCount");
static_assert(offsetof(RCVariableBFL_AddNazoResultFailureCount, InMinigameID) == 0x000000, "Member 'RCVariableBFL_AddNazoResultFailureCount::InMinigameID' has a wrong offset!");

// Function RC.RCVariableBFL.AddNazoResultFailureCount2
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_AddNazoResultFailureCount2 final
{
public:
	class FName                                   InMinigameID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_AddNazoResultFailureCount2) == 0x000004, "Wrong alignment on RCVariableBFL_AddNazoResultFailureCount2");
static_assert(sizeof(RCVariableBFL_AddNazoResultFailureCount2) == 0x000008, "Wrong size on RCVariableBFL_AddNazoResultFailureCount2");
static_assert(offsetof(RCVariableBFL_AddNazoResultFailureCount2, InMinigameID) == 0x000000, "Member 'RCVariableBFL_AddNazoResultFailureCount2::InMinigameID' has a wrong offset!");

// Function RC.RCVariableBFL.AddResultTanteiPoint
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_AddResultTanteiPoint final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTanteiPoint;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_AddResultTanteiPoint) == 0x000004, "Wrong alignment on RCVariableBFL_AddResultTanteiPoint");
static_assert(sizeof(RCVariableBFL_AddResultTanteiPoint) == 0x00000C, "Wrong size on RCVariableBFL_AddResultTanteiPoint");
static_assert(offsetof(RCVariableBFL_AddResultTanteiPoint, InChapter) == 0x000000, "Member 'RCVariableBFL_AddResultTanteiPoint::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddResultTanteiPoint, InTanteiPoint) == 0x000004, "Member 'RCVariableBFL_AddResultTanteiPoint::InTanteiPoint' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddResultTanteiPoint, ReturnValue) == 0x000008, "Member 'RCVariableBFL_AddResultTanteiPoint::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.AddSceneValueDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_AddSceneValueDirect final
{
public:
	class FName                                   InSceneVariableName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_AddSceneValueDirect) == 0x000004, "Wrong alignment on RCVariableBFL_AddSceneValueDirect");
static_assert(sizeof(RCVariableBFL_AddSceneValueDirect) == 0x00000C, "Wrong size on RCVariableBFL_AddSceneValueDirect");
static_assert(offsetof(RCVariableBFL_AddSceneValueDirect, InSceneVariableName) == 0x000000, "Member 'RCVariableBFL_AddSceneValueDirect::InSceneVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddSceneValueDirect, InValue) == 0x000008, "Member 'RCVariableBFL_AddSceneValueDirect::InValue' has a wrong offset!");

// Function RC.RCVariableBFL.AddTanteiPoint
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_AddTanteiPoint final
{
public:
	class FName                                   InTanteiPointID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_AddTanteiPoint) == 0x000004, "Wrong alignment on RCVariableBFL_AddTanteiPoint");
static_assert(sizeof(RCVariableBFL_AddTanteiPoint) == 0x00000C, "Wrong size on RCVariableBFL_AddTanteiPoint");
static_assert(offsetof(RCVariableBFL_AddTanteiPoint, InTanteiPointID) == 0x000000, "Member 'RCVariableBFL_AddTanteiPoint::InTanteiPointID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_AddTanteiPoint, ReturnValue) == 0x000008, "Member 'RCVariableBFL_AddTanteiPoint::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.ClearNazoResult
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_ClearNazoResult final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_ClearNazoResult) == 0x000004, "Wrong alignment on RCVariableBFL_ClearNazoResult");
static_assert(sizeof(RCVariableBFL_ClearNazoResult) == 0x000004, "Wrong size on RCVariableBFL_ClearNazoResult");
static_assert(offsetof(RCVariableBFL_ClearNazoResult, InChapter) == 0x000000, "Member 'RCVariableBFL_ClearNazoResult::InChapter' has a wrong offset!");

// Function RC.RCVariableBFL.ClearNazoResultContinue
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_ClearNazoResultContinue final
{
public:
	int32                                         InRound;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMinigameID;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_ClearNazoResultContinue) == 0x000004, "Wrong alignment on RCVariableBFL_ClearNazoResultContinue");
static_assert(sizeof(RCVariableBFL_ClearNazoResultContinue) == 0x00000C, "Wrong size on RCVariableBFL_ClearNazoResultContinue");
static_assert(offsetof(RCVariableBFL_ClearNazoResultContinue, InRound) == 0x000000, "Member 'RCVariableBFL_ClearNazoResultContinue::InRound' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_ClearNazoResultContinue, InMinigameID) == 0x000004, "Member 'RCVariableBFL_ClearNazoResultContinue::InMinigameID' has a wrong offset!");

// Function RC.RCVariableBFL.CreateSaveGameLevelInfo
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_CreateSaveGameLevelInfo final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScene;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_CreateSaveGameLevelInfo) == 0x000004, "Wrong alignment on RCVariableBFL_CreateSaveGameLevelInfo");
static_assert(sizeof(RCVariableBFL_CreateSaveGameLevelInfo) == 0x00000C, "Wrong size on RCVariableBFL_CreateSaveGameLevelInfo");
static_assert(offsetof(RCVariableBFL_CreateSaveGameLevelInfo, InChapter) == 0x000000, "Member 'RCVariableBFL_CreateSaveGameLevelInfo::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_CreateSaveGameLevelInfo, InScene) == 0x000004, "Member 'RCVariableBFL_CreateSaveGameLevelInfo::InScene' has a wrong offset!");

// Function RC.RCVariableBFL.GetBusStopStatus
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_GetBusStopStatus final
{
public:
	ERCRealEventMapConnectStatus                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetBusStopStatus) == 0x000001, "Wrong alignment on RCVariableBFL_GetBusStopStatus");
static_assert(sizeof(RCVariableBFL_GetBusStopStatus) == 0x000001, "Wrong size on RCVariableBFL_GetBusStopStatus");
static_assert(offsetof(RCVariableBFL_GetBusStopStatus, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetBusStopStatus::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetBusStopStatusFromAreamap
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_GetBusStopStatusFromAreamap final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCRealEventMapConnectBusStopStatus           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_GetBusStopStatusFromAreamap) == 0x000004, "Wrong alignment on RCVariableBFL_GetBusStopStatusFromAreamap");
static_assert(sizeof(RCVariableBFL_GetBusStopStatusFromAreamap) == 0x00000C, "Wrong size on RCVariableBFL_GetBusStopStatusFromAreamap");
static_assert(offsetof(RCVariableBFL_GetBusStopStatusFromAreamap, InMapID) == 0x000000, "Member 'RCVariableBFL_GetBusStopStatusFromAreamap::InMapID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetBusStopStatusFromAreamap, ReturnValue) == 0x000008, "Member 'RCVariableBFL_GetBusStopStatusFromAreamap::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetChapter
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetChapter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetChapter) == 0x000004, "Wrong alignment on RCVariableBFL_GetChapter");
static_assert(sizeof(RCVariableBFL_GetChapter) == 0x000004, "Wrong size on RCVariableBFL_GetChapter");
static_assert(offsetof(RCVariableBFL_GetChapter, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetChapter::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetChapterVariableDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_GetChapterVariableDirect final
{
public:
	class FName                                   InChapterVariableName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetChapterVariableDirect) == 0x000004, "Wrong alignment on RCVariableBFL_GetChapterVariableDirect");
static_assert(sizeof(RCVariableBFL_GetChapterVariableDirect) == 0x00000C, "Wrong size on RCVariableBFL_GetChapterVariableDirect");
static_assert(offsetof(RCVariableBFL_GetChapterVariableDirect, InChapterVariableName) == 0x000000, "Member 'RCVariableBFL_GetChapterVariableDirect::InChapterVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetChapterVariableDirect, ReturnValue) == 0x000008, "Member 'RCVariableBFL_GetChapterVariableDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetEndLogNum
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetEndLogNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetEndLogNum) == 0x000004, "Wrong alignment on RCVariableBFL_GetEndLogNum");
static_assert(sizeof(RCVariableBFL_GetEndLogNum) == 0x000004, "Wrong size on RCVariableBFL_GetEndLogNum");
static_assert(offsetof(RCVariableBFL_GetEndLogNum, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetEndLogNum::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetGalleryMenuMovieListIndex
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetGalleryMenuMovieListIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetGalleryMenuMovieListIndex) == 0x000004, "Wrong alignment on RCVariableBFL_GetGalleryMenuMovieListIndex");
static_assert(sizeof(RCVariableBFL_GetGalleryMenuMovieListIndex) == 0x000004, "Wrong size on RCVariableBFL_GetGalleryMenuMovieListIndex");
static_assert(offsetof(RCVariableBFL_GetGalleryMenuMovieListIndex, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetGalleryMenuMovieListIndex::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetGalleryMenuMovieSoundTable
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetGalleryMenuMovieSoundTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetGalleryMenuMovieSoundTable) == 0x000008, "Wrong alignment on RCVariableBFL_GetGalleryMenuMovieSoundTable");
static_assert(sizeof(RCVariableBFL_GetGalleryMenuMovieSoundTable) == 0x000008, "Wrong size on RCVariableBFL_GetGalleryMenuMovieSoundTable");
static_assert(offsetof(RCVariableBFL_GetGalleryMenuMovieSoundTable, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetGalleryMenuMovieSoundTable::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetGalleryMenuPlayingMovieID
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetGalleryMenuPlayingMovieID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetGalleryMenuPlayingMovieID) == 0x000004, "Wrong alignment on RCVariableBFL_GetGalleryMenuPlayingMovieID");
static_assert(sizeof(RCVariableBFL_GetGalleryMenuPlayingMovieID) == 0x000008, "Wrong size on RCVariableBFL_GetGalleryMenuPlayingMovieID");
static_assert(offsetof(RCVariableBFL_GetGalleryMenuPlayingMovieID, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetGalleryMenuPlayingMovieID::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetGameMode
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_GetGameMode final
{
public:
	ERCGameMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetGameMode) == 0x000001, "Wrong alignment on RCVariableBFL_GetGameMode");
static_assert(sizeof(RCVariableBFL_GetGameMode) == 0x000001, "Wrong size on RCVariableBFL_GetGameMode");
static_assert(offsetof(RCVariableBFL_GetGameMode, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetGameMode::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetGameVariableDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_GetGameVariableDirect final
{
public:
	class FName                                   InGameVariableName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetGameVariableDirect) == 0x000004, "Wrong alignment on RCVariableBFL_GetGameVariableDirect");
static_assert(sizeof(RCVariableBFL_GetGameVariableDirect) == 0x00000C, "Wrong size on RCVariableBFL_GetGameVariableDirect");
static_assert(offsetof(RCVariableBFL_GetGameVariableDirect, InGameVariableName) == 0x000000, "Member 'RCVariableBFL_GetGameVariableDirect::InGameVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetGameVariableDirect, ReturnValue) == 0x000008, "Member 'RCVariableBFL_GetGameVariableDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetLastAccessActorName
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetLastAccessActorName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetLastAccessActorName) == 0x000004, "Wrong alignment on RCVariableBFL_GetLastAccessActorName");
static_assert(sizeof(RCVariableBFL_GetLastAccessActorName) == 0x000008, "Wrong size on RCVariableBFL_GetLastAccessActorName");
static_assert(offsetof(RCVariableBFL_GetLastAccessActorName, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetLastAccessActorName::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetLastCameraTagName
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetLastCameraTagName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetLastCameraTagName) == 0x000004, "Wrong alignment on RCVariableBFL_GetLastCameraTagName");
static_assert(sizeof(RCVariableBFL_GetLastCameraTagName) == 0x000008, "Wrong size on RCVariableBFL_GetLastCameraTagName");
static_assert(offsetof(RCVariableBFL_GetLastCameraTagName, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetLastCameraTagName::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetLastLogNum
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetLastLogNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetLastLogNum) == 0x000004, "Wrong alignment on RCVariableBFL_GetLastLogNum");
static_assert(sizeof(RCVariableBFL_GetLastLogNum) == 0x000004, "Wrong size on RCVariableBFL_GetLastLogNum");
static_assert(offsetof(RCVariableBFL_GetLastLogNum, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetLastLogNum::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetLog
// 0x0020 (0x0020 - 0x0000)
struct RCVariableBFL_GetLog final
{
public:
	TArray<struct FRCVariableLogInfo>             OutLogList;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartLogNum;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndLogNum;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_GetLog) == 0x000008, "Wrong alignment on RCVariableBFL_GetLog");
static_assert(sizeof(RCVariableBFL_GetLog) == 0x000020, "Wrong size on RCVariableBFL_GetLog");
static_assert(offsetof(RCVariableBFL_GetLog, OutLogList) == 0x000000, "Member 'RCVariableBFL_GetLog::OutLogList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetLog, StartLogNum) == 0x000010, "Member 'RCVariableBFL_GetLog::StartLogNum' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetLog, EndLogNum) == 0x000014, "Member 'RCVariableBFL_GetLog::EndLogNum' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetLog, ReturnValue) == 0x000018, "Member 'RCVariableBFL_GetLog::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetLogMax
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetLogMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetLogMax) == 0x000004, "Wrong alignment on RCVariableBFL_GetLogMax");
static_assert(sizeof(RCVariableBFL_GetLogMax) == 0x000004, "Wrong size on RCVariableBFL_GetLogMax");
static_assert(offsetof(RCVariableBFL_GetLogMax, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetLogMax::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetMainQuestPhase
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetMainQuestPhase final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetMainQuestPhase) == 0x000004, "Wrong alignment on RCVariableBFL_GetMainQuestPhase");
static_assert(sizeof(RCVariableBFL_GetMainQuestPhase) == 0x000004, "Wrong size on RCVariableBFL_GetMainQuestPhase");
static_assert(offsetof(RCVariableBFL_GetMainQuestPhase, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetMainQuestPhase::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetMapID
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetMapID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetMapID) == 0x000004, "Wrong alignment on RCVariableBFL_GetMapID");
static_assert(sizeof(RCVariableBFL_GetMapID) == 0x000008, "Wrong size on RCVariableBFL_GetMapID");
static_assert(offsetof(RCVariableBFL_GetMapID, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetMapID::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetMapIDLong
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetMapIDLong final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetMapIDLong) == 0x000004, "Wrong alignment on RCVariableBFL_GetMapIDLong");
static_assert(sizeof(RCVariableBFL_GetMapIDLong) == 0x000008, "Wrong size on RCVariableBFL_GetMapIDLong");
static_assert(offsetof(RCVariableBFL_GetMapIDLong, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetMapIDLong::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetNazoResult
// 0x0040 (0x0040 - 0x0000)
struct RCVariableBFL_GetNazoResult final
{
public:
	struct FRCVariableNazoResultList              OutData;                                           // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         InChapter;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrent;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_GetNazoResult) == 0x000008, "Wrong alignment on RCVariableBFL_GetNazoResult");
static_assert(sizeof(RCVariableBFL_GetNazoResult) == 0x000040, "Wrong size on RCVariableBFL_GetNazoResult");
static_assert(offsetof(RCVariableBFL_GetNazoResult, OutData) == 0x000000, "Member 'RCVariableBFL_GetNazoResult::OutData' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetNazoResult, InChapter) == 0x000038, "Member 'RCVariableBFL_GetNazoResult::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetNazoResult, bCurrent) == 0x00003C, "Member 'RCVariableBFL_GetNazoResult::bCurrent' has a wrong offset!");

// Function RC.RCVariableBFL.GetNazoResultContinue
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_GetNazoResultContinue final
{
public:
	int32                                         InRound;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMinigameID;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetNazoResultContinue) == 0x000004, "Wrong alignment on RCVariableBFL_GetNazoResultContinue");
static_assert(sizeof(RCVariableBFL_GetNazoResultContinue) == 0x000010, "Wrong size on RCVariableBFL_GetNazoResultContinue");
static_assert(offsetof(RCVariableBFL_GetNazoResultContinue, InRound) == 0x000000, "Member 'RCVariableBFL_GetNazoResultContinue::InRound' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetNazoResultContinue, InMinigameID) == 0x000004, "Member 'RCVariableBFL_GetNazoResultContinue::InMinigameID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetNazoResultContinue, ReturnValue) == 0x00000C, "Member 'RCVariableBFL_GetNazoResultContinue::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetNazoResultNowMinigameID
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetNazoResultNowMinigameID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetNazoResultNowMinigameID) == 0x000004, "Wrong alignment on RCVariableBFL_GetNazoResultNowMinigameID");
static_assert(sizeof(RCVariableBFL_GetNazoResultNowMinigameID) == 0x000008, "Wrong size on RCVariableBFL_GetNazoResultNowMinigameID");
static_assert(offsetof(RCVariableBFL_GetNazoResultNowMinigameID, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetNazoResultNowMinigameID::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetNextChapter
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetNextChapter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetNextChapter) == 0x000004, "Wrong alignment on RCVariableBFL_GetNextChapter");
static_assert(sizeof(RCVariableBFL_GetNextChapter) == 0x000004, "Wrong size on RCVariableBFL_GetNextChapter");
static_assert(offsetof(RCVariableBFL_GetNextChapter, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetNextChapter::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetNextMapID
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetNextMapID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetNextMapID) == 0x000004, "Wrong alignment on RCVariableBFL_GetNextMapID");
static_assert(sizeof(RCVariableBFL_GetNextMapID) == 0x000008, "Wrong size on RCVariableBFL_GetNextMapID");
static_assert(offsetof(RCVariableBFL_GetNextMapID, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetNextMapID::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetNextMapIDLong
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetNextMapIDLong final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetNextMapIDLong) == 0x000004, "Wrong alignment on RCVariableBFL_GetNextMapIDLong");
static_assert(sizeof(RCVariableBFL_GetNextMapIDLong) == 0x000008, "Wrong size on RCVariableBFL_GetNextMapIDLong");
static_assert(offsetof(RCVariableBFL_GetNextMapIDLong, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetNextMapIDLong::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetNextPlayerStartName
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetNextPlayerStartName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetNextPlayerStartName) == 0x000004, "Wrong alignment on RCVariableBFL_GetNextPlayerStartName");
static_assert(sizeof(RCVariableBFL_GetNextPlayerStartName) == 0x000008, "Wrong size on RCVariableBFL_GetNextPlayerStartName");
static_assert(offsetof(RCVariableBFL_GetNextPlayerStartName, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetNextPlayerStartName::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetNextScene
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetNextScene final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetNextScene) == 0x000004, "Wrong alignment on RCVariableBFL_GetNextScene");
static_assert(sizeof(RCVariableBFL_GetNextScene) == 0x000008, "Wrong size on RCVariableBFL_GetNextScene");
static_assert(offsetof(RCVariableBFL_GetNextScene, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetNextScene::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetOldChapter
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetOldChapter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetOldChapter) == 0x000004, "Wrong alignment on RCVariableBFL_GetOldChapter");
static_assert(sizeof(RCVariableBFL_GetOldChapter) == 0x000004, "Wrong size on RCVariableBFL_GetOldChapter");
static_assert(offsetof(RCVariableBFL_GetOldChapter, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetOldChapter::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetOldMapID
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetOldMapID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetOldMapID) == 0x000004, "Wrong alignment on RCVariableBFL_GetOldMapID");
static_assert(sizeof(RCVariableBFL_GetOldMapID) == 0x000008, "Wrong size on RCVariableBFL_GetOldMapID");
static_assert(offsetof(RCVariableBFL_GetOldMapID, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetOldMapID::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetOldMapIDLong
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetOldMapIDLong final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetOldMapIDLong) == 0x000004, "Wrong alignment on RCVariableBFL_GetOldMapIDLong");
static_assert(sizeof(RCVariableBFL_GetOldMapIDLong) == 0x000008, "Wrong size on RCVariableBFL_GetOldMapIDLong");
static_assert(offsetof(RCVariableBFL_GetOldMapIDLong, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetOldMapIDLong::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetOldScene
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetOldScene final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetOldScene) == 0x000004, "Wrong alignment on RCVariableBFL_GetOldScene");
static_assert(sizeof(RCVariableBFL_GetOldScene) == 0x000008, "Wrong size on RCVariableBFL_GetOldScene");
static_assert(offsetof(RCVariableBFL_GetOldScene, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetOldScene::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetPlayerStartName
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetPlayerStartName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetPlayerStartName) == 0x000004, "Wrong alignment on RCVariableBFL_GetPlayerStartName");
static_assert(sizeof(RCVariableBFL_GetPlayerStartName) == 0x000008, "Wrong size on RCVariableBFL_GetPlayerStartName");
static_assert(offsetof(RCVariableBFL_GetPlayerStartName, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetPlayerStartName::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetSaveLoadMapName
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetSaveLoadMapName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetSaveLoadMapName) == 0x000004, "Wrong alignment on RCVariableBFL_GetSaveLoadMapName");
static_assert(sizeof(RCVariableBFL_GetSaveLoadMapName) == 0x000008, "Wrong size on RCVariableBFL_GetSaveLoadMapName");
static_assert(offsetof(RCVariableBFL_GetSaveLoadMapName, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetSaveLoadMapName::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetScene
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_GetScene final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetScene) == 0x000004, "Wrong alignment on RCVariableBFL_GetScene");
static_assert(sizeof(RCVariableBFL_GetScene) == 0x000008, "Wrong size on RCVariableBFL_GetScene");
static_assert(offsetof(RCVariableBFL_GetScene, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetScene::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetSceneVariableDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_GetSceneVariableDirect final
{
public:
	class FName                                   InSceneVariableName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetSceneVariableDirect) == 0x000004, "Wrong alignment on RCVariableBFL_GetSceneVariableDirect");
static_assert(sizeof(RCVariableBFL_GetSceneVariableDirect) == 0x00000C, "Wrong size on RCVariableBFL_GetSceneVariableDirect");
static_assert(offsetof(RCVariableBFL_GetSceneVariableDirect, InSceneVariableName) == 0x000000, "Member 'RCVariableBFL_GetSceneVariableDirect::InSceneVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_GetSceneVariableDirect, ReturnValue) == 0x000008, "Member 'RCVariableBFL_GetSceneVariableDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetStoryMode
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_GetStoryMode final
{
public:
	ERCStoryMode                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetStoryMode) == 0x000001, "Wrong alignment on RCVariableBFL_GetStoryMode");
static_assert(sizeof(RCVariableBFL_GetStoryMode) == 0x000001, "Wrong size on RCVariableBFL_GetStoryMode");
static_assert(offsetof(RCVariableBFL_GetStoryMode, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetStoryMode::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetTitleBackListIndex
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetTitleBackListIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetTitleBackListIndex) == 0x000004, "Wrong alignment on RCVariableBFL_GetTitleBackListIndex");
static_assert(sizeof(RCVariableBFL_GetTitleBackListIndex) == 0x000004, "Wrong size on RCVariableBFL_GetTitleBackListIndex");
static_assert(offsetof(RCVariableBFL_GetTitleBackListIndex, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetTitleBackListIndex::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetTitleCollectionEvent
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_GetTitleCollectionEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetTitleCollectionEvent) == 0x000001, "Wrong alignment on RCVariableBFL_GetTitleCollectionEvent");
static_assert(sizeof(RCVariableBFL_GetTitleCollectionEvent) == 0x000001, "Wrong size on RCVariableBFL_GetTitleCollectionEvent");
static_assert(offsetof(RCVariableBFL_GetTitleCollectionEvent, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetTitleCollectionEvent::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetTitleFrontListIndex
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetTitleFrontListIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetTitleFrontListIndex) == 0x000004, "Wrong alignment on RCVariableBFL_GetTitleFrontListIndex");
static_assert(sizeof(RCVariableBFL_GetTitleFrontListIndex) == 0x000004, "Wrong size on RCVariableBFL_GetTitleFrontListIndex");
static_assert(offsetof(RCVariableBFL_GetTitleFrontListIndex, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetTitleFrontListIndex::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetTitleGalleryMovieEvent
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_GetTitleGalleryMovieEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetTitleGalleryMovieEvent) == 0x000001, "Wrong alignment on RCVariableBFL_GetTitleGalleryMovieEvent");
static_assert(sizeof(RCVariableBFL_GetTitleGalleryMovieEvent) == 0x000001, "Wrong size on RCVariableBFL_GetTitleGalleryMovieEvent");
static_assert(offsetof(RCVariableBFL_GetTitleGalleryMovieEvent, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetTitleGalleryMovieEvent::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.GetTotalTanteiPoint
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_GetTotalTanteiPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_GetTotalTanteiPoint) == 0x000004, "Wrong alignment on RCVariableBFL_GetTotalTanteiPoint");
static_assert(sizeof(RCVariableBFL_GetTotalTanteiPoint) == 0x000004, "Wrong size on RCVariableBFL_GetTotalTanteiPoint");
static_assert(offsetof(RCVariableBFL_GetTotalTanteiPoint, ReturnValue) == 0x000000, "Member 'RCVariableBFL_GetTotalTanteiPoint::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsBusStopMove
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsBusStopMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsBusStopMove) == 0x000001, "Wrong alignment on RCVariableBFL_IsBusStopMove");
static_assert(sizeof(RCVariableBFL_IsBusStopMove) == 0x000001, "Wrong size on RCVariableBFL_IsBusStopMove");
static_assert(offsetof(RCVariableBFL_IsBusStopMove, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsBusStopMove::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterClear
// 0x0002 (0x0002 - 0x0000)
struct RCVariableBFL_IsChapterClear final
{
public:
	ERCChapter                                    InChapter;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsChapterClear) == 0x000001, "Wrong alignment on RCVariableBFL_IsChapterClear");
static_assert(sizeof(RCVariableBFL_IsChapterClear) == 0x000002, "Wrong size on RCVariableBFL_IsChapterClear");
static_assert(offsetof(RCVariableBFL_IsChapterClear, InChapter) == 0x000000, "Member 'RCVariableBFL_IsChapterClear::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterClear, ReturnValue) == 0x000001, "Member 'RCVariableBFL_IsChapterClear::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValueEqualDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_IsChapterValueEqualDirect final
{
public:
	class FName                                   InChapterVariableName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValueEqualDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsChapterValueEqualDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValueEqualDirect) == 0x000010, "Wrong size on RCVariableBFL_IsChapterValueEqualDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValueEqualDirect, InChapterVariableName) == 0x000000, "Member 'RCVariableBFL_IsChapterValueEqualDirect::InChapterVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueEqualDirect, InValue) == 0x000008, "Member 'RCVariableBFL_IsChapterValueEqualDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueEqualDirect, ReturnValue) == 0x00000C, "Member 'RCVariableBFL_IsChapterValueEqualDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValueLargeDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_IsChapterValueLargeDirect final
{
public:
	class FName                                   InChapterVariableName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValueLargeDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsChapterValueLargeDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValueLargeDirect) == 0x000010, "Wrong size on RCVariableBFL_IsChapterValueLargeDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValueLargeDirect, InChapterVariableName) == 0x000000, "Member 'RCVariableBFL_IsChapterValueLargeDirect::InChapterVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueLargeDirect, InValue) == 0x000008, "Member 'RCVariableBFL_IsChapterValueLargeDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueLargeDirect, bEqual) == 0x00000C, "Member 'RCVariableBFL_IsChapterValueLargeDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueLargeDirect, ReturnValue) == 0x00000D, "Member 'RCVariableBFL_IsChapterValueLargeDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValueNotZeroDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_IsChapterValueNotZeroDirect final
{
public:
	class FName                                   InChapterVariableName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValueNotZeroDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsChapterValueNotZeroDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValueNotZeroDirect) == 0x00000C, "Wrong size on RCVariableBFL_IsChapterValueNotZeroDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValueNotZeroDirect, InChapterVariableName) == 0x000000, "Member 'RCVariableBFL_IsChapterValueNotZeroDirect::InChapterVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueNotZeroDirect, ReturnValue) == 0x000008, "Member 'RCVariableBFL_IsChapterValueNotZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesAndEqualDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesAndEqualDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesAndEqualDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesAndEqualDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesAndEqualDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesAndEqualDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndEqualDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesAndEqualDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndEqualDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesAndEqualDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndEqualDirect, ReturnValue) == 0x000014, "Member 'RCVariableBFL_IsChapterValuesAndEqualDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesAndLargeDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesAndLargeDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesAndLargeDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesAndLargeDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesAndLargeDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesAndLargeDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndLargeDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesAndLargeDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndLargeDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesAndLargeDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndLargeDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsChapterValuesAndLargeDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndLargeDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsChapterValuesAndLargeDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesAndNotZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesAndNotZeroDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesAndNotZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesAndNotZeroDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesAndNotZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesAndNotZeroDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndNotZeroDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesAndNotZeroDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndNotZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesAndNotZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesAndSmallDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesAndSmallDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesAndSmallDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesAndSmallDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesAndSmallDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesAndSmallDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndSmallDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesAndSmallDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndSmallDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesAndSmallDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndSmallDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsChapterValuesAndSmallDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndSmallDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsChapterValuesAndSmallDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesAndZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesAndZeroDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesAndZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesAndZeroDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesAndZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesAndZeroDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndZeroDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesAndZeroDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesAndZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesAndZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValueSmallDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_IsChapterValueSmallDirect final
{
public:
	class FName                                   InChapterVariableName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValueSmallDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsChapterValueSmallDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValueSmallDirect) == 0x000010, "Wrong size on RCVariableBFL_IsChapterValueSmallDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValueSmallDirect, InChapterVariableName) == 0x000000, "Member 'RCVariableBFL_IsChapterValueSmallDirect::InChapterVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueSmallDirect, InValue) == 0x000008, "Member 'RCVariableBFL_IsChapterValueSmallDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueSmallDirect, bEqual) == 0x00000C, "Member 'RCVariableBFL_IsChapterValueSmallDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueSmallDirect, ReturnValue) == 0x00000D, "Member 'RCVariableBFL_IsChapterValueSmallDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesOrEqualDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesOrEqualDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesOrEqualDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesOrEqualDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesOrEqualDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesOrEqualDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrEqualDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesOrEqualDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrEqualDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesOrEqualDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrEqualDirect, ReturnValue) == 0x000014, "Member 'RCVariableBFL_IsChapterValuesOrEqualDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesOrLargeDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesOrLargeDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesOrLargeDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesOrLargeDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesOrLargeDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesOrLargeDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrLargeDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesOrLargeDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrLargeDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesOrLargeDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrLargeDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsChapterValuesOrLargeDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrLargeDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsChapterValuesOrLargeDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesOrNotZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesOrNotZeroDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesOrNotZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesOrNotZeroDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesOrNotZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesOrNotZeroDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrNotZeroDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesOrNotZeroDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrNotZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesOrNotZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesOrSmallDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesOrSmallDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesOrSmallDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesOrSmallDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesOrSmallDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesOrSmallDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrSmallDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesOrSmallDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrSmallDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesOrSmallDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrSmallDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsChapterValuesOrSmallDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrSmallDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsChapterValuesOrSmallDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValuesOrZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsChapterValuesOrZeroDirect final
{
public:
	TArray<class FName>                           InChapterVariableNameList;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValuesOrZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsChapterValuesOrZeroDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValuesOrZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsChapterValuesOrZeroDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrZeroDirect, InChapterVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsChapterValuesOrZeroDirect::InChapterVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValuesOrZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsChapterValuesOrZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsChapterValueZeroDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_IsChapterValueZeroDirect final
{
public:
	class FName                                   InChapterVariableName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsChapterValueZeroDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsChapterValueZeroDirect");
static_assert(sizeof(RCVariableBFL_IsChapterValueZeroDirect) == 0x00000C, "Wrong size on RCVariableBFL_IsChapterValueZeroDirect");
static_assert(offsetof(RCVariableBFL_IsChapterValueZeroDirect, InChapterVariableName) == 0x000000, "Member 'RCVariableBFL_IsChapterValueZeroDirect::InChapterVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsChapterValueZeroDirect, ReturnValue) == 0x000008, "Member 'RCVariableBFL_IsChapterValueZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsCollectionEvent
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsCollectionEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsCollectionEvent) == 0x000001, "Wrong alignment on RCVariableBFL_IsCollectionEvent");
static_assert(sizeof(RCVariableBFL_IsCollectionEvent) == 0x000001, "Wrong size on RCVariableBFL_IsCollectionEvent");
static_assert(offsetof(RCVariableBFL_IsCollectionEvent, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsCollectionEvent::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsCollectionEventStart
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsCollectionEventStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsCollectionEventStart) == 0x000001, "Wrong alignment on RCVariableBFL_IsCollectionEventStart");
static_assert(sizeof(RCVariableBFL_IsCollectionEventStart) == 0x000001, "Wrong size on RCVariableBFL_IsCollectionEventStart");
static_assert(offsetof(RCVariableBFL_IsCollectionEventStart, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsCollectionEventStart::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsCollectionStoryScene
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsCollectionStoryScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsCollectionStoryScene) == 0x000001, "Wrong alignment on RCVariableBFL_IsCollectionStoryScene");
static_assert(sizeof(RCVariableBFL_IsCollectionStoryScene) == 0x000001, "Wrong size on RCVariableBFL_IsCollectionStoryScene");
static_assert(offsetof(RCVariableBFL_IsCollectionStoryScene, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsCollectionStoryScene::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsDataLoadReturn
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsDataLoadReturn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsDataLoadReturn) == 0x000001, "Wrong alignment on RCVariableBFL_IsDataLoadReturn");
static_assert(sizeof(RCVariableBFL_IsDataLoadReturn) == 0x000001, "Wrong size on RCVariableBFL_IsDataLoadReturn");
static_assert(offsetof(RCVariableBFL_IsDataLoadReturn, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsDataLoadReturn::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsDrawDisableSubQuest
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsDrawDisableSubQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsDrawDisableSubQuest) == 0x000001, "Wrong alignment on RCVariableBFL_IsDrawDisableSubQuest");
static_assert(sizeof(RCVariableBFL_IsDrawDisableSubQuest) == 0x000001, "Wrong size on RCVariableBFL_IsDrawDisableSubQuest");
static_assert(offsetof(RCVariableBFL_IsDrawDisableSubQuest, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsDrawDisableSubQuest::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsEnableSaveData
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsEnableSaveData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsEnableSaveData) == 0x000001, "Wrong alignment on RCVariableBFL_IsEnableSaveData");
static_assert(sizeof(RCVariableBFL_IsEnableSaveData) == 0x000001, "Wrong size on RCVariableBFL_IsEnableSaveData");
static_assert(offsetof(RCVariableBFL_IsEnableSaveData, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsEnableSaveData::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsEnableSaveDataSubStory
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsEnableSaveDataSubStory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsEnableSaveDataSubStory) == 0x000001, "Wrong alignment on RCVariableBFL_IsEnableSaveDataSubStory");
static_assert(sizeof(RCVariableBFL_IsEnableSaveDataSubStory) == 0x000001, "Wrong size on RCVariableBFL_IsEnableSaveDataSubStory");
static_assert(offsetof(RCVariableBFL_IsEnableSaveDataSubStory, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsEnableSaveDataSubStory::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsExecMenuSceneLoad
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsExecMenuSceneLoad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsExecMenuSceneLoad) == 0x000001, "Wrong alignment on RCVariableBFL_IsExecMenuSceneLoad");
static_assert(sizeof(RCVariableBFL_IsExecMenuSceneLoad) == 0x000001, "Wrong size on RCVariableBFL_IsExecMenuSceneLoad");
static_assert(offsetof(RCVariableBFL_IsExecMenuSceneLoad, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsExecMenuSceneLoad::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsFreeMoveSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsFreeMoveSkipEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsFreeMoveSkipEnable) == 0x000001, "Wrong alignment on RCVariableBFL_IsFreeMoveSkipEnable");
static_assert(sizeof(RCVariableBFL_IsFreeMoveSkipEnable) == 0x000001, "Wrong size on RCVariableBFL_IsFreeMoveSkipEnable");
static_assert(offsetof(RCVariableBFL_IsFreeMoveSkipEnable, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsFreeMoveSkipEnable::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGalleryMode
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsGalleryMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsGalleryMode) == 0x000001, "Wrong alignment on RCVariableBFL_IsGalleryMode");
static_assert(sizeof(RCVariableBFL_IsGalleryMode) == 0x000001, "Wrong size on RCVariableBFL_IsGalleryMode");
static_assert(offsetof(RCVariableBFL_IsGalleryMode, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsGalleryMode::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameClear
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsGameClear final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsGameClear) == 0x000001, "Wrong alignment on RCVariableBFL_IsGameClear");
static_assert(sizeof(RCVariableBFL_IsGameClear) == 0x000001, "Wrong size on RCVariableBFL_IsGameClear");
static_assert(offsetof(RCVariableBFL_IsGameClear, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsGameClear::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValueEqualDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_IsGameValueEqualDirect final
{
public:
	class FName                                   InGameVariableName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValueEqualDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsGameValueEqualDirect");
static_assert(sizeof(RCVariableBFL_IsGameValueEqualDirect) == 0x000010, "Wrong size on RCVariableBFL_IsGameValueEqualDirect");
static_assert(offsetof(RCVariableBFL_IsGameValueEqualDirect, InGameVariableName) == 0x000000, "Member 'RCVariableBFL_IsGameValueEqualDirect::InGameVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueEqualDirect, InValue) == 0x000008, "Member 'RCVariableBFL_IsGameValueEqualDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueEqualDirect, ReturnValue) == 0x00000C, "Member 'RCVariableBFL_IsGameValueEqualDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValueLargeDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_IsGameValueLargeDirect final
{
public:
	class FName                                   InGameVariableName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValueLargeDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsGameValueLargeDirect");
static_assert(sizeof(RCVariableBFL_IsGameValueLargeDirect) == 0x000010, "Wrong size on RCVariableBFL_IsGameValueLargeDirect");
static_assert(offsetof(RCVariableBFL_IsGameValueLargeDirect, InGameVariableName) == 0x000000, "Member 'RCVariableBFL_IsGameValueLargeDirect::InGameVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueLargeDirect, InValue) == 0x000008, "Member 'RCVariableBFL_IsGameValueLargeDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueLargeDirect, bEqual) == 0x00000C, "Member 'RCVariableBFL_IsGameValueLargeDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueLargeDirect, ReturnValue) == 0x00000D, "Member 'RCVariableBFL_IsGameValueLargeDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValueNotZeroDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_IsGameValueNotZeroDirect final
{
public:
	class FName                                   InGameVariableName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValueNotZeroDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsGameValueNotZeroDirect");
static_assert(sizeof(RCVariableBFL_IsGameValueNotZeroDirect) == 0x00000C, "Wrong size on RCVariableBFL_IsGameValueNotZeroDirect");
static_assert(offsetof(RCVariableBFL_IsGameValueNotZeroDirect, InGameVariableName) == 0x000000, "Member 'RCVariableBFL_IsGameValueNotZeroDirect::InGameVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueNotZeroDirect, ReturnValue) == 0x000008, "Member 'RCVariableBFL_IsGameValueNotZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesAndEqualDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesAndEqualDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesAndEqualDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesAndEqualDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesAndEqualDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesAndEqualDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndEqualDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesAndEqualDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndEqualDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesAndEqualDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndEqualDirect, ReturnValue) == 0x000014, "Member 'RCVariableBFL_IsGameValuesAndEqualDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesAndLargeDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesAndLargeDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesAndLargeDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesAndLargeDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesAndLargeDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesAndLargeDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndLargeDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesAndLargeDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndLargeDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesAndLargeDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndLargeDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsGameValuesAndLargeDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndLargeDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsGameValuesAndLargeDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesAndNotZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesAndNotZeroDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesAndNotZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesAndNotZeroDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesAndNotZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesAndNotZeroDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndNotZeroDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesAndNotZeroDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndNotZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesAndNotZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesAndSmallDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesAndSmallDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesAndSmallDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesAndSmallDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesAndSmallDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesAndSmallDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndSmallDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesAndSmallDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndSmallDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesAndSmallDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndSmallDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsGameValuesAndSmallDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndSmallDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsGameValuesAndSmallDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesAndZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesAndZeroDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesAndZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesAndZeroDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesAndZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesAndZeroDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndZeroDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesAndZeroDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesAndZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesAndZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValueSmallDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_IsGameValueSmallDirect final
{
public:
	class FName                                   InGameVariableName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValueSmallDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsGameValueSmallDirect");
static_assert(sizeof(RCVariableBFL_IsGameValueSmallDirect) == 0x000010, "Wrong size on RCVariableBFL_IsGameValueSmallDirect");
static_assert(offsetof(RCVariableBFL_IsGameValueSmallDirect, InGameVariableName) == 0x000000, "Member 'RCVariableBFL_IsGameValueSmallDirect::InGameVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueSmallDirect, InValue) == 0x000008, "Member 'RCVariableBFL_IsGameValueSmallDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueSmallDirect, bEqual) == 0x00000C, "Member 'RCVariableBFL_IsGameValueSmallDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueSmallDirect, ReturnValue) == 0x00000D, "Member 'RCVariableBFL_IsGameValueSmallDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesOrEqualDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesOrEqualDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesOrEqualDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesOrEqualDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesOrEqualDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesOrEqualDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrEqualDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesOrEqualDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrEqualDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesOrEqualDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrEqualDirect, ReturnValue) == 0x000014, "Member 'RCVariableBFL_IsGameValuesOrEqualDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesOrLargeDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesOrLargeDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesOrLargeDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesOrLargeDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesOrLargeDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesOrLargeDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrLargeDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesOrLargeDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrLargeDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesOrLargeDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrLargeDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsGameValuesOrLargeDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrLargeDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsGameValuesOrLargeDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesOrNotZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesOrNotZeroDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesOrNotZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesOrNotZeroDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesOrNotZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesOrNotZeroDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrNotZeroDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesOrNotZeroDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrNotZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesOrNotZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesOrSmallDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesOrSmallDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesOrSmallDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesOrSmallDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesOrSmallDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesOrSmallDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrSmallDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesOrSmallDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrSmallDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesOrSmallDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrSmallDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsGameValuesOrSmallDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrSmallDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsGameValuesOrSmallDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValuesOrZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsGameValuesOrZeroDirect final
{
public:
	TArray<class FName>                           InGameVariableNameList;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValuesOrZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsGameValuesOrZeroDirect");
static_assert(sizeof(RCVariableBFL_IsGameValuesOrZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsGameValuesOrZeroDirect");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrZeroDirect, InGameVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsGameValuesOrZeroDirect::InGameVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValuesOrZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsGameValuesOrZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsGameValueZeroDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_IsGameValueZeroDirect final
{
public:
	class FName                                   InGameVariableName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsGameValueZeroDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsGameValueZeroDirect");
static_assert(sizeof(RCVariableBFL_IsGameValueZeroDirect) == 0x00000C, "Wrong size on RCVariableBFL_IsGameValueZeroDirect");
static_assert(offsetof(RCVariableBFL_IsGameValueZeroDirect, InGameVariableName) == 0x000000, "Member 'RCVariableBFL_IsGameValueZeroDirect::InGameVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsGameValueZeroDirect, ReturnValue) == 0x000008, "Member 'RCVariableBFL_IsGameValueZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsMessageAuto
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsMessageAuto final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsMessageAuto) == 0x000001, "Wrong alignment on RCVariableBFL_IsMessageAuto");
static_assert(sizeof(RCVariableBFL_IsMessageAuto) == 0x000001, "Wrong size on RCVariableBFL_IsMessageAuto");
static_assert(offsetof(RCVariableBFL_IsMessageAuto, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsMessageAuto::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsMovieSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsMovieSkipEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsMovieSkipEnable) == 0x000001, "Wrong alignment on RCVariableBFL_IsMovieSkipEnable");
static_assert(sizeof(RCVariableBFL_IsMovieSkipEnable) == 0x000001, "Wrong size on RCVariableBFL_IsMovieSkipEnable");
static_assert(offsetof(RCVariableBFL_IsMovieSkipEnable, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsMovieSkipEnable::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSaveEnable
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsSaveEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsSaveEnable) == 0x000001, "Wrong alignment on RCVariableBFL_IsSaveEnable");
static_assert(sizeof(RCVariableBFL_IsSaveEnable) == 0x000001, "Wrong size on RCVariableBFL_IsSaveEnable");
static_assert(offsetof(RCVariableBFL_IsSaveEnable, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsSaveEnable::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneChange
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsSceneChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsSceneChange) == 0x000001, "Wrong alignment on RCVariableBFL_IsSceneChange");
static_assert(sizeof(RCVariableBFL_IsSceneChange) == 0x000001, "Wrong size on RCVariableBFL_IsSceneChange");
static_assert(offsetof(RCVariableBFL_IsSceneChange, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsSceneChange::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValueEqualDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_IsSceneValueEqualDirect final
{
public:
	class FName                                   InSceneVariableName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValueEqualDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsSceneValueEqualDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValueEqualDirect) == 0x000010, "Wrong size on RCVariableBFL_IsSceneValueEqualDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValueEqualDirect, InSceneVariableName) == 0x000000, "Member 'RCVariableBFL_IsSceneValueEqualDirect::InSceneVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueEqualDirect, InValue) == 0x000008, "Member 'RCVariableBFL_IsSceneValueEqualDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueEqualDirect, ReturnValue) == 0x00000C, "Member 'RCVariableBFL_IsSceneValueEqualDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValueLargeDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_IsSceneValueLargeDirect final
{
public:
	class FName                                   InSceneVariableName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValueLargeDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsSceneValueLargeDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValueLargeDirect) == 0x000010, "Wrong size on RCVariableBFL_IsSceneValueLargeDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValueLargeDirect, InSceneVariableName) == 0x000000, "Member 'RCVariableBFL_IsSceneValueLargeDirect::InSceneVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueLargeDirect, InValue) == 0x000008, "Member 'RCVariableBFL_IsSceneValueLargeDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueLargeDirect, bEqual) == 0x00000C, "Member 'RCVariableBFL_IsSceneValueLargeDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueLargeDirect, ReturnValue) == 0x00000D, "Member 'RCVariableBFL_IsSceneValueLargeDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValueNotZeroDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_IsSceneValueNotZeroDirect final
{
public:
	class FName                                   InSceneVariableName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValueNotZeroDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsSceneValueNotZeroDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValueNotZeroDirect) == 0x00000C, "Wrong size on RCVariableBFL_IsSceneValueNotZeroDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValueNotZeroDirect, InSceneVariableName) == 0x000000, "Member 'RCVariableBFL_IsSceneValueNotZeroDirect::InSceneVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueNotZeroDirect, ReturnValue) == 0x000008, "Member 'RCVariableBFL_IsSceneValueNotZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesAndEqualDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesAndEqualDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesAndEqualDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesAndEqualDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesAndEqualDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesAndEqualDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndEqualDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesAndEqualDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndEqualDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesAndEqualDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndEqualDirect, ReturnValue) == 0x000014, "Member 'RCVariableBFL_IsSceneValuesAndEqualDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesAndLargeDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesAndLargeDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesAndLargeDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesAndLargeDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesAndLargeDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesAndLargeDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndLargeDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesAndLargeDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndLargeDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesAndLargeDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndLargeDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsSceneValuesAndLargeDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndLargeDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsSceneValuesAndLargeDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesAndNotZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesAndNotZeroDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesAndNotZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesAndNotZeroDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesAndNotZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesAndNotZeroDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndNotZeroDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesAndNotZeroDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndNotZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesAndNotZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesAndSmallDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesAndSmallDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesAndSmallDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesAndSmallDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesAndSmallDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesAndSmallDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndSmallDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesAndSmallDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndSmallDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesAndSmallDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndSmallDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsSceneValuesAndSmallDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndSmallDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsSceneValuesAndSmallDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesAndZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesAndZeroDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesAndZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesAndZeroDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesAndZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesAndZeroDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndZeroDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesAndZeroDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesAndZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesAndZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValueSmallDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_IsSceneValueSmallDirect final
{
public:
	class FName                                   InSceneVariableName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValueSmallDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsSceneValueSmallDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValueSmallDirect) == 0x000010, "Wrong size on RCVariableBFL_IsSceneValueSmallDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValueSmallDirect, InSceneVariableName) == 0x000000, "Member 'RCVariableBFL_IsSceneValueSmallDirect::InSceneVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueSmallDirect, InValue) == 0x000008, "Member 'RCVariableBFL_IsSceneValueSmallDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueSmallDirect, bEqual) == 0x00000C, "Member 'RCVariableBFL_IsSceneValueSmallDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueSmallDirect, ReturnValue) == 0x00000D, "Member 'RCVariableBFL_IsSceneValueSmallDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesOrEqualDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesOrEqualDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesOrEqualDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesOrEqualDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesOrEqualDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesOrEqualDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrEqualDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesOrEqualDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrEqualDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesOrEqualDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrEqualDirect, ReturnValue) == 0x000014, "Member 'RCVariableBFL_IsSceneValuesOrEqualDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesOrLargeDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesOrLargeDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesOrLargeDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesOrLargeDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesOrLargeDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesOrLargeDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrLargeDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesOrLargeDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrLargeDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesOrLargeDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrLargeDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsSceneValuesOrLargeDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrLargeDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsSceneValuesOrLargeDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesOrNotZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesOrNotZeroDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesOrNotZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesOrNotZeroDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesOrNotZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesOrNotZeroDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrNotZeroDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesOrNotZeroDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrNotZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesOrNotZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesOrSmallDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesOrSmallDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEqual;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesOrSmallDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesOrSmallDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesOrSmallDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesOrSmallDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrSmallDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesOrSmallDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrSmallDirect, InValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesOrSmallDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrSmallDirect, bEqual) == 0x000014, "Member 'RCVariableBFL_IsSceneValuesOrSmallDirect::bEqual' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrSmallDirect, ReturnValue) == 0x000015, "Member 'RCVariableBFL_IsSceneValuesOrSmallDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValuesOrZeroDirect
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_IsSceneValuesOrZeroDirect final
{
public:
	TArray<class FName>                           InSceneVariableNameList;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValuesOrZeroDirect) == 0x000008, "Wrong alignment on RCVariableBFL_IsSceneValuesOrZeroDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValuesOrZeroDirect) == 0x000018, "Wrong size on RCVariableBFL_IsSceneValuesOrZeroDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrZeroDirect, InSceneVariableNameList) == 0x000000, "Member 'RCVariableBFL_IsSceneValuesOrZeroDirect::InSceneVariableNameList' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValuesOrZeroDirect, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsSceneValuesOrZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSceneValueZeroDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_IsSceneValueZeroDirect final
{
public:
	class FName                                   InSceneVariableName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSceneValueZeroDirect) == 0x000004, "Wrong alignment on RCVariableBFL_IsSceneValueZeroDirect");
static_assert(sizeof(RCVariableBFL_IsSceneValueZeroDirect) == 0x00000C, "Wrong size on RCVariableBFL_IsSceneValueZeroDirect");
static_assert(offsetof(RCVariableBFL_IsSceneValueZeroDirect, InSceneVariableName) == 0x000000, "Member 'RCVariableBFL_IsSceneValueZeroDirect::InSceneVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSceneValueZeroDirect, ReturnValue) == 0x000008, "Member 'RCVariableBFL_IsSceneValueZeroDirect::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSelectAlready
// 0x0014 (0x0014 - 0x0000)
struct RCVariableBFL_IsSelectAlready final
{
public:
	class FName                                   InSceneID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_IsSelectAlready) == 0x000004, "Wrong alignment on RCVariableBFL_IsSelectAlready");
static_assert(sizeof(RCVariableBFL_IsSelectAlready) == 0x000014, "Wrong size on RCVariableBFL_IsSelectAlready");
static_assert(offsetof(RCVariableBFL_IsSelectAlready, InSceneID) == 0x000000, "Member 'RCVariableBFL_IsSelectAlready::InSceneID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSelectAlready, InTextID) == 0x000008, "Member 'RCVariableBFL_IsSelectAlready::InTextID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_IsSelectAlready, ReturnValue) == 0x000010, "Member 'RCVariableBFL_IsSelectAlready::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsSkipEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsSkipEnable) == 0x000001, "Wrong alignment on RCVariableBFL_IsSkipEnable");
static_assert(sizeof(RCVariableBFL_IsSkipEnable) == 0x000001, "Wrong size on RCVariableBFL_IsSkipEnable");
static_assert(offsetof(RCVariableBFL_IsSkipEnable, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsSkipEnable::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsStartDebugMenuDraw
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsStartDebugMenuDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsStartDebugMenuDraw) == 0x000001, "Wrong alignment on RCVariableBFL_IsStartDebugMenuDraw");
static_assert(sizeof(RCVariableBFL_IsStartDebugMenuDraw) == 0x000001, "Wrong size on RCVariableBFL_IsStartDebugMenuDraw");
static_assert(offsetof(RCVariableBFL_IsStartDebugMenuDraw, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsStartDebugMenuDraw::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.IsTitleMenuInitListFlag
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_IsTitleMenuInitListFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_IsTitleMenuInitListFlag) == 0x000001, "Wrong alignment on RCVariableBFL_IsTitleMenuInitListFlag");
static_assert(sizeof(RCVariableBFL_IsTitleMenuInitListFlag) == 0x000001, "Wrong size on RCVariableBFL_IsTitleMenuInitListFlag");
static_assert(offsetof(RCVariableBFL_IsTitleMenuInitListFlag, ReturnValue) == 0x000000, "Member 'RCVariableBFL_IsTitleMenuInitListFlag::ReturnValue' has a wrong offset!");

// Function RC.RCVariableBFL.SetBusStopStatus
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetBusStopStatus final
{
public:
	ERCRealEventMapConnectStatus                  InBusStopStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetBusStopStatus) == 0x000001, "Wrong alignment on RCVariableBFL_SetBusStopStatus");
static_assert(sizeof(RCVariableBFL_SetBusStopStatus) == 0x000001, "Wrong size on RCVariableBFL_SetBusStopStatus");
static_assert(offsetof(RCVariableBFL_SetBusStopStatus, InBusStopStatus) == 0x000000, "Member 'RCVariableBFL_SetBusStopStatus::InBusStopStatus' has a wrong offset!");

// Function RC.RCVariableBFL.SetBusStopStatusFromAreamap
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_SetBusStopStatusFromAreamap final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCRealEventMapConnectBusStopStatus           InSatus;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_SetBusStopStatusFromAreamap) == 0x000004, "Wrong alignment on RCVariableBFL_SetBusStopStatusFromAreamap");
static_assert(sizeof(RCVariableBFL_SetBusStopStatusFromAreamap) == 0x00000C, "Wrong size on RCVariableBFL_SetBusStopStatusFromAreamap");
static_assert(offsetof(RCVariableBFL_SetBusStopStatusFromAreamap, InMapID) == 0x000000, "Member 'RCVariableBFL_SetBusStopStatusFromAreamap::InMapID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetBusStopStatusFromAreamap, InSatus) == 0x000008, "Member 'RCVariableBFL_SetBusStopStatusFromAreamap::InSatus' has a wrong offset!");

// Function RC.RCVariableBFL.SetChapterClear
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetChapterClear final
{
public:
	ERCChapter                                    InChapter;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetChapterClear) == 0x000001, "Wrong alignment on RCVariableBFL_SetChapterClear");
static_assert(sizeof(RCVariableBFL_SetChapterClear) == 0x000001, "Wrong size on RCVariableBFL_SetChapterClear");
static_assert(offsetof(RCVariableBFL_SetChapterClear, InChapter) == 0x000000, "Member 'RCVariableBFL_SetChapterClear::InChapter' has a wrong offset!");

// Function RC.RCVariableBFL.SetChapterVariableDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_SetChapterVariableDirect final
{
public:
	class FName                                   InChapterVariableName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetChapterVariableDirect) == 0x000004, "Wrong alignment on RCVariableBFL_SetChapterVariableDirect");
static_assert(sizeof(RCVariableBFL_SetChapterVariableDirect) == 0x00000C, "Wrong size on RCVariableBFL_SetChapterVariableDirect");
static_assert(offsetof(RCVariableBFL_SetChapterVariableDirect, InChapterVariableName) == 0x000000, "Member 'RCVariableBFL_SetChapterVariableDirect::InChapterVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetChapterVariableDirect, InValue) == 0x000008, "Member 'RCVariableBFL_SetChapterVariableDirect::InValue' has a wrong offset!");

// Function RC.RCVariableBFL.SetCollectionEventStart
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_SetCollectionEventStart final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScene;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetCollectionEventStart) == 0x000004, "Wrong alignment on RCVariableBFL_SetCollectionEventStart");
static_assert(sizeof(RCVariableBFL_SetCollectionEventStart) == 0x00000C, "Wrong size on RCVariableBFL_SetCollectionEventStart");
static_assert(offsetof(RCVariableBFL_SetCollectionEventStart, InChapter) == 0x000000, "Member 'RCVariableBFL_SetCollectionEventStart::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetCollectionEventStart, InScene) == 0x000004, "Member 'RCVariableBFL_SetCollectionEventStart::InScene' has a wrong offset!");

// Function RC.RCVariableBFL.SetDataLoadReturn
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetDataLoadReturn final
{
public:
	bool                                          bIsFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetDataLoadReturn) == 0x000001, "Wrong alignment on RCVariableBFL_SetDataLoadReturn");
static_assert(sizeof(RCVariableBFL_SetDataLoadReturn) == 0x000001, "Wrong size on RCVariableBFL_SetDataLoadReturn");
static_assert(offsetof(RCVariableBFL_SetDataLoadReturn, bIsFlag) == 0x000000, "Member 'RCVariableBFL_SetDataLoadReturn::bIsFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetDrawDisableSubQuest
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetDrawDisableSubQuest final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetDrawDisableSubQuest) == 0x000001, "Wrong alignment on RCVariableBFL_SetDrawDisableSubQuest");
static_assert(sizeof(RCVariableBFL_SetDrawDisableSubQuest) == 0x000001, "Wrong size on RCVariableBFL_SetDrawDisableSubQuest");
static_assert(offsetof(RCVariableBFL_SetDrawDisableSubQuest, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetDrawDisableSubQuest::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetEnableSaveData
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetEnableSaveData final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetEnableSaveData) == 0x000001, "Wrong alignment on RCVariableBFL_SetEnableSaveData");
static_assert(sizeof(RCVariableBFL_SetEnableSaveData) == 0x000001, "Wrong size on RCVariableBFL_SetEnableSaveData");
static_assert(offsetof(RCVariableBFL_SetEnableSaveData, IsEnable) == 0x000000, "Member 'RCVariableBFL_SetEnableSaveData::IsEnable' has a wrong offset!");

// Function RC.RCVariableBFL.SetEnableSaveDataSubStory
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetEnableSaveDataSubStory final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetEnableSaveDataSubStory) == 0x000001, "Wrong alignment on RCVariableBFL_SetEnableSaveDataSubStory");
static_assert(sizeof(RCVariableBFL_SetEnableSaveDataSubStory) == 0x000001, "Wrong size on RCVariableBFL_SetEnableSaveDataSubStory");
static_assert(offsetof(RCVariableBFL_SetEnableSaveDataSubStory, IsEnable) == 0x000000, "Member 'RCVariableBFL_SetEnableSaveDataSubStory::IsEnable' has a wrong offset!");

// Function RC.RCVariableBFL.SetExecMenuSceneLoad
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetExecMenuSceneLoad final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetExecMenuSceneLoad) == 0x000001, "Wrong alignment on RCVariableBFL_SetExecMenuSceneLoad");
static_assert(sizeof(RCVariableBFL_SetExecMenuSceneLoad) == 0x000001, "Wrong size on RCVariableBFL_SetExecMenuSceneLoad");
static_assert(offsetof(RCVariableBFL_SetExecMenuSceneLoad, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetExecMenuSceneLoad::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetFreeMoveSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetFreeMoveSkipEnable final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetFreeMoveSkipEnable) == 0x000001, "Wrong alignment on RCVariableBFL_SetFreeMoveSkipEnable");
static_assert(sizeof(RCVariableBFL_SetFreeMoveSkipEnable) == 0x000001, "Wrong size on RCVariableBFL_SetFreeMoveSkipEnable");
static_assert(offsetof(RCVariableBFL_SetFreeMoveSkipEnable, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetFreeMoveSkipEnable::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetGalleryMenuMovieListIndex
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_SetGalleryMenuMovieListIndex final
{
public:
	int32                                         InListIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetGalleryMenuMovieListIndex) == 0x000004, "Wrong alignment on RCVariableBFL_SetGalleryMenuMovieListIndex");
static_assert(sizeof(RCVariableBFL_SetGalleryMenuMovieListIndex) == 0x000004, "Wrong size on RCVariableBFL_SetGalleryMenuMovieListIndex");
static_assert(offsetof(RCVariableBFL_SetGalleryMenuMovieListIndex, InListIndex) == 0x000000, "Member 'RCVariableBFL_SetGalleryMenuMovieListIndex::InListIndex' has a wrong offset!");

// Function RC.RCVariableBFL.SetGalleryMenuMovieSoundTable
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetGalleryMenuMovieSoundTable final
{
public:
	class UDataTable*                             InSoundTable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetGalleryMenuMovieSoundTable) == 0x000008, "Wrong alignment on RCVariableBFL_SetGalleryMenuMovieSoundTable");
static_assert(sizeof(RCVariableBFL_SetGalleryMenuMovieSoundTable) == 0x000008, "Wrong size on RCVariableBFL_SetGalleryMenuMovieSoundTable");
static_assert(offsetof(RCVariableBFL_SetGalleryMenuMovieSoundTable, InSoundTable) == 0x000000, "Member 'RCVariableBFL_SetGalleryMenuMovieSoundTable::InSoundTable' has a wrong offset!");

// Function RC.RCVariableBFL.SetGalleryMenuPlayingMovieID
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetGalleryMenuPlayingMovieID final
{
public:
	class FName                                   InMovieID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetGalleryMenuPlayingMovieID) == 0x000004, "Wrong alignment on RCVariableBFL_SetGalleryMenuPlayingMovieID");
static_assert(sizeof(RCVariableBFL_SetGalleryMenuPlayingMovieID) == 0x000008, "Wrong size on RCVariableBFL_SetGalleryMenuPlayingMovieID");
static_assert(offsetof(RCVariableBFL_SetGalleryMenuPlayingMovieID, InMovieID) == 0x000000, "Member 'RCVariableBFL_SetGalleryMenuPlayingMovieID::InMovieID' has a wrong offset!");

// Function RC.RCVariableBFL.SetGalleryMode
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetGalleryMode final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetGalleryMode) == 0x000001, "Wrong alignment on RCVariableBFL_SetGalleryMode");
static_assert(sizeof(RCVariableBFL_SetGalleryMode) == 0x000001, "Wrong size on RCVariableBFL_SetGalleryMode");
static_assert(offsetof(RCVariableBFL_SetGalleryMode, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetGalleryMode::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetGameMode
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetGameMode final
{
public:
	ERCGameMode                                   InGameMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetGameMode) == 0x000001, "Wrong alignment on RCVariableBFL_SetGameMode");
static_assert(sizeof(RCVariableBFL_SetGameMode) == 0x000001, "Wrong size on RCVariableBFL_SetGameMode");
static_assert(offsetof(RCVariableBFL_SetGameMode, InGameMode) == 0x000000, "Member 'RCVariableBFL_SetGameMode::InGameMode' has a wrong offset!");

// Function RC.RCVariableBFL.SetGameVariableDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_SetGameVariableDirect final
{
public:
	class FName                                   InGameVariableName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetGameVariableDirect) == 0x000004, "Wrong alignment on RCVariableBFL_SetGameVariableDirect");
static_assert(sizeof(RCVariableBFL_SetGameVariableDirect) == 0x00000C, "Wrong size on RCVariableBFL_SetGameVariableDirect");
static_assert(offsetof(RCVariableBFL_SetGameVariableDirect, InGameVariableName) == 0x000000, "Member 'RCVariableBFL_SetGameVariableDirect::InGameVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetGameVariableDirect, InValue) == 0x000008, "Member 'RCVariableBFL_SetGameVariableDirect::InValue' has a wrong offset!");

// Function RC.RCVariableBFL.SetLastCameraTagName
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetLastCameraTagName final
{
public:
	class FName                                   InCameraTagName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetLastCameraTagName) == 0x000004, "Wrong alignment on RCVariableBFL_SetLastCameraTagName");
static_assert(sizeof(RCVariableBFL_SetLastCameraTagName) == 0x000008, "Wrong size on RCVariableBFL_SetLastCameraTagName");
static_assert(offsetof(RCVariableBFL_SetLastCameraTagName, InCameraTagName) == 0x000000, "Member 'RCVariableBFL_SetLastCameraTagName::InCameraTagName' has a wrong offset!");

// Function RC.RCVariableBFL.SetMainQuestPhase
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_SetMainQuestPhase final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetMainQuestPhase) == 0x000004, "Wrong alignment on RCVariableBFL_SetMainQuestPhase");
static_assert(sizeof(RCVariableBFL_SetMainQuestPhase) == 0x000004, "Wrong size on RCVariableBFL_SetMainQuestPhase");
static_assert(offsetof(RCVariableBFL_SetMainQuestPhase, InValue) == 0x000000, "Member 'RCVariableBFL_SetMainQuestPhase::InValue' has a wrong offset!");

// Function RC.RCVariableBFL.SetMessageAuto
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetMessageAuto final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetMessageAuto) == 0x000001, "Wrong alignment on RCVariableBFL_SetMessageAuto");
static_assert(sizeof(RCVariableBFL_SetMessageAuto) == 0x000001, "Wrong size on RCVariableBFL_SetMessageAuto");
static_assert(offsetof(RCVariableBFL_SetMessageAuto, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetMessageAuto::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetMovieSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetMovieSkipEnable final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetMovieSkipEnable) == 0x000001, "Wrong alignment on RCVariableBFL_SetMovieSkipEnable");
static_assert(sizeof(RCVariableBFL_SetMovieSkipEnable) == 0x000001, "Wrong size on RCVariableBFL_SetMovieSkipEnable");
static_assert(offsetof(RCVariableBFL_SetMovieSkipEnable, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetMovieSkipEnable::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetNazoResultContinueCount
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNazoResultContinueCount final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNazoResultContinueCount) == 0x000004, "Wrong alignment on RCVariableBFL_SetNazoResultContinueCount");
static_assert(sizeof(RCVariableBFL_SetNazoResultContinueCount) == 0x000008, "Wrong size on RCVariableBFL_SetNazoResultContinueCount");
static_assert(offsetof(RCVariableBFL_SetNazoResultContinueCount, InChapter) == 0x000000, "Member 'RCVariableBFL_SetNazoResultContinueCount::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNazoResultContinueCount, InCount) == 0x000004, "Member 'RCVariableBFL_SetNazoResultContinueCount::InCount' has a wrong offset!");

// Function RC.RCVariableBFL.SetNazoResultFailureCount
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_SetNazoResultFailureCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMinigameID;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNazoResultFailureCount) == 0x000004, "Wrong alignment on RCVariableBFL_SetNazoResultFailureCount");
static_assert(sizeof(RCVariableBFL_SetNazoResultFailureCount) == 0x00000C, "Wrong size on RCVariableBFL_SetNazoResultFailureCount");
static_assert(offsetof(RCVariableBFL_SetNazoResultFailureCount, InCount) == 0x000000, "Member 'RCVariableBFL_SetNazoResultFailureCount::InCount' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNazoResultFailureCount, InMinigameID) == 0x000004, "Member 'RCVariableBFL_SetNazoResultFailureCount::InMinigameID' has a wrong offset!");

// Function RC.RCVariableBFL.SetNazoResultHpRank
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNazoResultHpRank final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNzResultRankValue                          InRank;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_SetNazoResultHpRank) == 0x000004, "Wrong alignment on RCVariableBFL_SetNazoResultHpRank");
static_assert(sizeof(RCVariableBFL_SetNazoResultHpRank) == 0x000008, "Wrong size on RCVariableBFL_SetNazoResultHpRank");
static_assert(offsetof(RCVariableBFL_SetNazoResultHpRank, InChapter) == 0x000000, "Member 'RCVariableBFL_SetNazoResultHpRank::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNazoResultHpRank, InRank) == 0x000004, "Member 'RCVariableBFL_SetNazoResultHpRank::InRank' has a wrong offset!");

// Function RC.RCVariableBFL.SetNazoResultPoint
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNazoResultPoint final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPoint;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNazoResultPoint) == 0x000004, "Wrong alignment on RCVariableBFL_SetNazoResultPoint");
static_assert(sizeof(RCVariableBFL_SetNazoResultPoint) == 0x000008, "Wrong size on RCVariableBFL_SetNazoResultPoint");
static_assert(offsetof(RCVariableBFL_SetNazoResultPoint, InChapter) == 0x000000, "Member 'RCVariableBFL_SetNazoResultPoint::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNazoResultPoint, InPoint) == 0x000004, "Member 'RCVariableBFL_SetNazoResultPoint::InPoint' has a wrong offset!");

// Function RC.RCVariableBFL.SetNazoResultRank
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNazoResultRank final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNzResultRankValue                          InRank;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_SetNazoResultRank) == 0x000004, "Wrong alignment on RCVariableBFL_SetNazoResultRank");
static_assert(sizeof(RCVariableBFL_SetNazoResultRank) == 0x000008, "Wrong size on RCVariableBFL_SetNazoResultRank");
static_assert(offsetof(RCVariableBFL_SetNazoResultRank, InChapter) == 0x000000, "Member 'RCVariableBFL_SetNazoResultRank::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNazoResultRank, InRank) == 0x000004, "Member 'RCVariableBFL_SetNazoResultRank::InRank' has a wrong offset!");

// Function RC.RCVariableBFL.SetNazoResultScene
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNazoResultScene final
{
public:
	class FName                                   InMinigameID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNazoResultScene) == 0x000004, "Wrong alignment on RCVariableBFL_SetNazoResultScene");
static_assert(sizeof(RCVariableBFL_SetNazoResultScene) == 0x000008, "Wrong size on RCVariableBFL_SetNazoResultScene");
static_assert(offsetof(RCVariableBFL_SetNazoResultScene, InMinigameID) == 0x000000, "Member 'RCVariableBFL_SetNazoResultScene::InMinigameID' has a wrong offset!");

// Function RC.RCVariableBFL.SetNazoResultTanteiPoint
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_SetNazoResultTanteiPoint final
{
public:
	int32                                         InTanteiPoint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMinigameID;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNazoResultTanteiPoint) == 0x000004, "Wrong alignment on RCVariableBFL_SetNazoResultTanteiPoint");
static_assert(sizeof(RCVariableBFL_SetNazoResultTanteiPoint) == 0x00000C, "Wrong size on RCVariableBFL_SetNazoResultTanteiPoint");
static_assert(offsetof(RCVariableBFL_SetNazoResultTanteiPoint, InTanteiPoint) == 0x000000, "Member 'RCVariableBFL_SetNazoResultTanteiPoint::InTanteiPoint' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNazoResultTanteiPoint, InMinigameID) == 0x000004, "Member 'RCVariableBFL_SetNazoResultTanteiPoint::InMinigameID' has a wrong offset!");

// Function RC.RCVariableBFL.SetNazoResultTanteiPoint2
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_SetNazoResultTanteiPoint2 final
{
public:
	int32                                         InTanteiPoint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMinigameID;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNazoResultTanteiPoint2) == 0x000004, "Wrong alignment on RCVariableBFL_SetNazoResultTanteiPoint2");
static_assert(sizeof(RCVariableBFL_SetNazoResultTanteiPoint2) == 0x00000C, "Wrong size on RCVariableBFL_SetNazoResultTanteiPoint2");
static_assert(offsetof(RCVariableBFL_SetNazoResultTanteiPoint2, InTanteiPoint) == 0x000000, "Member 'RCVariableBFL_SetNazoResultTanteiPoint2::InTanteiPoint' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNazoResultTanteiPoint2, InMinigameID) == 0x000004, "Member 'RCVariableBFL_SetNazoResultTanteiPoint2::InMinigameID' has a wrong offset!");

// Function RC.RCVariableBFL.SetNazoRewardPoint
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNazoRewardPoint final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRewardPoint;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNazoRewardPoint) == 0x000004, "Wrong alignment on RCVariableBFL_SetNazoRewardPoint");
static_assert(sizeof(RCVariableBFL_SetNazoRewardPoint) == 0x000008, "Wrong size on RCVariableBFL_SetNazoRewardPoint");
static_assert(offsetof(RCVariableBFL_SetNazoRewardPoint, InChapter) == 0x000000, "Member 'RCVariableBFL_SetNazoRewardPoint::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNazoRewardPoint, InRewardPoint) == 0x000004, "Member 'RCVariableBFL_SetNazoRewardPoint::InRewardPoint' has a wrong offset!");

// Function RC.RCVariableBFL.SetNewGame
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetNewGame final
{
public:
	ERCStoryMode                                  InStoryMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNewGame) == 0x000001, "Wrong alignment on RCVariableBFL_SetNewGame");
static_assert(sizeof(RCVariableBFL_SetNewGame) == 0x000001, "Wrong size on RCVariableBFL_SetNewGame");
static_assert(offsetof(RCVariableBFL_SetNewGame, InStoryMode) == 0x000000, "Member 'RCVariableBFL_SetNewGame::InStoryMode' has a wrong offset!");

// Function RC.RCVariableBFL.SetNextBusStopMove
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNextBusStopMove final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNextBusStopMove) == 0x000004, "Wrong alignment on RCVariableBFL_SetNextBusStopMove");
static_assert(sizeof(RCVariableBFL_SetNextBusStopMove) == 0x000008, "Wrong size on RCVariableBFL_SetNextBusStopMove");
static_assert(offsetof(RCVariableBFL_SetNextBusStopMove, InMapID) == 0x000000, "Member 'RCVariableBFL_SetNextBusStopMove::InMapID' has a wrong offset!");

// Function RC.RCVariableBFL.SetNextGameLevelInfo
// 0x001C (0x001C - 0x0000)
struct RCVariableBFL_SetNextGameLevelInfo final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScene;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMapID;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPlayerStartName;                                 // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNextGameLevelInfo) == 0x000004, "Wrong alignment on RCVariableBFL_SetNextGameLevelInfo");
static_assert(sizeof(RCVariableBFL_SetNextGameLevelInfo) == 0x00001C, "Wrong size on RCVariableBFL_SetNextGameLevelInfo");
static_assert(offsetof(RCVariableBFL_SetNextGameLevelInfo, InChapter) == 0x000000, "Member 'RCVariableBFL_SetNextGameLevelInfo::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNextGameLevelInfo, InScene) == 0x000004, "Member 'RCVariableBFL_SetNextGameLevelInfo::InScene' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNextGameLevelInfo, InMapID) == 0x00000C, "Member 'RCVariableBFL_SetNextGameLevelInfo::InMapID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNextGameLevelInfo, InPlayerStartName) == 0x000014, "Member 'RCVariableBFL_SetNextGameLevelInfo::InPlayerStartName' has a wrong offset!");

// Function RC.RCVariableBFL.SetNextGameLevelInfoFromData
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_SetNextGameLevelInfoFromData final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScene;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNextGameLevelInfoFromData) == 0x000004, "Wrong alignment on RCVariableBFL_SetNextGameLevelInfoFromData");
static_assert(sizeof(RCVariableBFL_SetNextGameLevelInfoFromData) == 0x00000C, "Wrong size on RCVariableBFL_SetNextGameLevelInfoFromData");
static_assert(offsetof(RCVariableBFL_SetNextGameLevelInfoFromData, InChapter) == 0x000000, "Member 'RCVariableBFL_SetNextGameLevelInfoFromData::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNextGameLevelInfoFromData, InScene) == 0x000004, "Member 'RCVariableBFL_SetNextGameLevelInfoFromData::InScene' has a wrong offset!");

// Function RC.RCVariableBFL.SetNextMapID
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_SetNextMapID final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPlayerStartName;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNextMapID) == 0x000004, "Wrong alignment on RCVariableBFL_SetNextMapID");
static_assert(sizeof(RCVariableBFL_SetNextMapID) == 0x000010, "Wrong size on RCVariableBFL_SetNextMapID");
static_assert(offsetof(RCVariableBFL_SetNextMapID, InMapID) == 0x000000, "Member 'RCVariableBFL_SetNextMapID::InMapID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNextMapID, InPlayerStartName) == 0x000008, "Member 'RCVariableBFL_SetNextMapID::InPlayerStartName' has a wrong offset!");

// Function RC.RCVariableBFL.SetNextMapIDLong
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNextMapIDLong final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNextMapIDLong) == 0x000004, "Wrong alignment on RCVariableBFL_SetNextMapIDLong");
static_assert(sizeof(RCVariableBFL_SetNextMapIDLong) == 0x000008, "Wrong size on RCVariableBFL_SetNextMapIDLong");
static_assert(offsetof(RCVariableBFL_SetNextMapIDLong, InMapID) == 0x000000, "Member 'RCVariableBFL_SetNextMapIDLong::InMapID' has a wrong offset!");

// Function RC.RCVariableBFL.SetNextScene
// 0x0018 (0x0018 - 0x0000)
struct RCVariableBFL_SetNextScene final
{
public:
	class FName                                   InScene;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMapID;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPlayerStartName;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNextScene) == 0x000004, "Wrong alignment on RCVariableBFL_SetNextScene");
static_assert(sizeof(RCVariableBFL_SetNextScene) == 0x000018, "Wrong size on RCVariableBFL_SetNextScene");
static_assert(offsetof(RCVariableBFL_SetNextScene, InScene) == 0x000000, "Member 'RCVariableBFL_SetNextScene::InScene' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNextScene, InMapID) == 0x000008, "Member 'RCVariableBFL_SetNextScene::InMapID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNextScene, InPlayerStartName) == 0x000010, "Member 'RCVariableBFL_SetNextScene::InPlayerStartName' has a wrong offset!");

// Function RC.RCVariableBFL.SetNowGameLevelInfo
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNowGameLevelInfo final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNowGameLevelInfo) == 0x000004, "Wrong alignment on RCVariableBFL_SetNowGameLevelInfo");
static_assert(sizeof(RCVariableBFL_SetNowGameLevelInfo) == 0x000008, "Wrong size on RCVariableBFL_SetNowGameLevelInfo");
static_assert(offsetof(RCVariableBFL_SetNowGameLevelInfo, InMapID) == 0x000000, "Member 'RCVariableBFL_SetNowGameLevelInfo::InMapID' has a wrong offset!");

// Function RC.RCVariableBFL.SetNowGameLevelInfoDetail
// 0x001C (0x001C - 0x0000)
struct RCVariableBFL_SetNowGameLevelInfoDetail final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScene;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMapID;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPlayerStartName;                                 // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNowGameLevelInfoDetail) == 0x000004, "Wrong alignment on RCVariableBFL_SetNowGameLevelInfoDetail");
static_assert(sizeof(RCVariableBFL_SetNowGameLevelInfoDetail) == 0x00001C, "Wrong size on RCVariableBFL_SetNowGameLevelInfoDetail");
static_assert(offsetof(RCVariableBFL_SetNowGameLevelInfoDetail, InChapter) == 0x000000, "Member 'RCVariableBFL_SetNowGameLevelInfoDetail::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNowGameLevelInfoDetail, InScene) == 0x000004, "Member 'RCVariableBFL_SetNowGameLevelInfoDetail::InScene' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNowGameLevelInfoDetail, InMapID) == 0x00000C, "Member 'RCVariableBFL_SetNowGameLevelInfoDetail::InMapID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetNowGameLevelInfoDetail, InPlayerStartName) == 0x000014, "Member 'RCVariableBFL_SetNowGameLevelInfoDetail::InPlayerStartName' has a wrong offset!");

// Function RC.RCVariableBFL.SetNowMapIDLong
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetNowMapIDLong final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetNowMapIDLong) == 0x000004, "Wrong alignment on RCVariableBFL_SetNowMapIDLong");
static_assert(sizeof(RCVariableBFL_SetNowMapIDLong) == 0x000008, "Wrong size on RCVariableBFL_SetNowMapIDLong");
static_assert(offsetof(RCVariableBFL_SetNowMapIDLong, InMapID) == 0x000000, "Member 'RCVariableBFL_SetNowMapIDLong::InMapID' has a wrong offset!");

// Function RC.RCVariableBFL.SetSaveEnable
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetSaveEnable final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetSaveEnable) == 0x000001, "Wrong alignment on RCVariableBFL_SetSaveEnable");
static_assert(sizeof(RCVariableBFL_SetSaveEnable) == 0x000001, "Wrong size on RCVariableBFL_SetSaveEnable");
static_assert(offsetof(RCVariableBFL_SetSaveEnable, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetSaveEnable::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetSaveLoadMapName
// 0x0008 (0x0008 - 0x0000)
struct RCVariableBFL_SetSaveLoadMapName final
{
public:
	class FName                                   InSaveLoadMapName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetSaveLoadMapName) == 0x000004, "Wrong alignment on RCVariableBFL_SetSaveLoadMapName");
static_assert(sizeof(RCVariableBFL_SetSaveLoadMapName) == 0x000008, "Wrong size on RCVariableBFL_SetSaveLoadMapName");
static_assert(offsetof(RCVariableBFL_SetSaveLoadMapName, InSaveLoadMapName) == 0x000000, "Member 'RCVariableBFL_SetSaveLoadMapName::InSaveLoadMapName' has a wrong offset!");

// Function RC.RCVariableBFL.SetSceneVariableDirect
// 0x000C (0x000C - 0x0000)
struct RCVariableBFL_SetSceneVariableDirect final
{
public:
	class FName                                   InSceneVariableName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetSceneVariableDirect) == 0x000004, "Wrong alignment on RCVariableBFL_SetSceneVariableDirect");
static_assert(sizeof(RCVariableBFL_SetSceneVariableDirect) == 0x00000C, "Wrong size on RCVariableBFL_SetSceneVariableDirect");
static_assert(offsetof(RCVariableBFL_SetSceneVariableDirect, InSceneVariableName) == 0x000000, "Member 'RCVariableBFL_SetSceneVariableDirect::InSceneVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetSceneVariableDirect, InValue) == 0x000008, "Member 'RCVariableBFL_SetSceneVariableDirect::InValue' has a wrong offset!");

// Function RC.RCVariableBFL.SetSelectAlready
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_SetSelectAlready final
{
public:
	class FName                                   InSceneID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetSelectAlready) == 0x000004, "Wrong alignment on RCVariableBFL_SetSelectAlready");
static_assert(sizeof(RCVariableBFL_SetSelectAlready) == 0x000010, "Wrong size on RCVariableBFL_SetSelectAlready");
static_assert(offsetof(RCVariableBFL_SetSelectAlready, InSceneID) == 0x000000, "Member 'RCVariableBFL_SetSelectAlready::InSceneID' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SetSelectAlready, InTextID) == 0x000008, "Member 'RCVariableBFL_SetSelectAlready::InTextID' has a wrong offset!");

// Function RC.RCVariableBFL.SetSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetSkipEnable final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetSkipEnable) == 0x000001, "Wrong alignment on RCVariableBFL_SetSkipEnable");
static_assert(sizeof(RCVariableBFL_SetSkipEnable) == 0x000001, "Wrong size on RCVariableBFL_SetSkipEnable");
static_assert(offsetof(RCVariableBFL_SetSkipEnable, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetSkipEnable::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetStartDebugMenuDraw
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetStartDebugMenuDraw final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetStartDebugMenuDraw) == 0x000001, "Wrong alignment on RCVariableBFL_SetStartDebugMenuDraw");
static_assert(sizeof(RCVariableBFL_SetStartDebugMenuDraw) == 0x000001, "Wrong size on RCVariableBFL_SetStartDebugMenuDraw");
static_assert(offsetof(RCVariableBFL_SetStartDebugMenuDraw, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetStartDebugMenuDraw::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetStoryMode
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetStoryMode final
{
public:
	ERCStoryMode                                  InStoryMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetStoryMode) == 0x000001, "Wrong alignment on RCVariableBFL_SetStoryMode");
static_assert(sizeof(RCVariableBFL_SetStoryMode) == 0x000001, "Wrong size on RCVariableBFL_SetStoryMode");
static_assert(offsetof(RCVariableBFL_SetStoryMode, InStoryMode) == 0x000000, "Member 'RCVariableBFL_SetStoryMode::InStoryMode' has a wrong offset!");

// Function RC.RCVariableBFL.SetTitleBackListIndex
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_SetTitleBackListIndex final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetTitleBackListIndex) == 0x000004, "Wrong alignment on RCVariableBFL_SetTitleBackListIndex");
static_assert(sizeof(RCVariableBFL_SetTitleBackListIndex) == 0x000004, "Wrong size on RCVariableBFL_SetTitleBackListIndex");
static_assert(offsetof(RCVariableBFL_SetTitleBackListIndex, SelectedIndex) == 0x000000, "Member 'RCVariableBFL_SetTitleBackListIndex::SelectedIndex' has a wrong offset!");

// Function RC.RCVariableBFL.SetTitleCollectionEvent
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetTitleCollectionEvent final
{
public:
	bool                                          isTitle;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetTitleCollectionEvent) == 0x000001, "Wrong alignment on RCVariableBFL_SetTitleCollectionEvent");
static_assert(sizeof(RCVariableBFL_SetTitleCollectionEvent) == 0x000001, "Wrong size on RCVariableBFL_SetTitleCollectionEvent");
static_assert(offsetof(RCVariableBFL_SetTitleCollectionEvent, isTitle) == 0x000000, "Member 'RCVariableBFL_SetTitleCollectionEvent::isTitle' has a wrong offset!");

// Function RC.RCVariableBFL.SetTitleFrontListIndex
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_SetTitleFrontListIndex final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetTitleFrontListIndex) == 0x000004, "Wrong alignment on RCVariableBFL_SetTitleFrontListIndex");
static_assert(sizeof(RCVariableBFL_SetTitleFrontListIndex) == 0x000004, "Wrong size on RCVariableBFL_SetTitleFrontListIndex");
static_assert(offsetof(RCVariableBFL_SetTitleFrontListIndex, SelectedIndex) == 0x000000, "Member 'RCVariableBFL_SetTitleFrontListIndex::SelectedIndex' has a wrong offset!");

// Function RC.RCVariableBFL.SetTitleGalleryMovieEvent
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetTitleGalleryMovieEvent final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetTitleGalleryMovieEvent) == 0x000001, "Wrong alignment on RCVariableBFL_SetTitleGalleryMovieEvent");
static_assert(sizeof(RCVariableBFL_SetTitleGalleryMovieEvent) == 0x000001, "Wrong size on RCVariableBFL_SetTitleGalleryMovieEvent");
static_assert(offsetof(RCVariableBFL_SetTitleGalleryMovieEvent, bInFlag) == 0x000000, "Member 'RCVariableBFL_SetTitleGalleryMovieEvent::bInFlag' has a wrong offset!");

// Function RC.RCVariableBFL.SetTitleMenuInitListFlag
// 0x0001 (0x0001 - 0x0000)
struct RCVariableBFL_SetTitleMenuInitListFlag final
{
public:
	bool                                          isFront;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SetTitleMenuInitListFlag) == 0x000001, "Wrong alignment on RCVariableBFL_SetTitleMenuInitListFlag");
static_assert(sizeof(RCVariableBFL_SetTitleMenuInitListFlag) == 0x000001, "Wrong size on RCVariableBFL_SetTitleMenuInitListFlag");
static_assert(offsetof(RCVariableBFL_SetTitleMenuInitListFlag, isFront) == 0x000000, "Member 'RCVariableBFL_SetTitleMenuInitListFlag::isFront' has a wrong offset!");

// Function RC.RCVariableBFL.SubChapterValueDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_SubChapterValueDirect final
{
public:
	class FName                                   InChapterVariableName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZeroStop;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_SubChapterValueDirect) == 0x000004, "Wrong alignment on RCVariableBFL_SubChapterValueDirect");
static_assert(sizeof(RCVariableBFL_SubChapterValueDirect) == 0x000010, "Wrong size on RCVariableBFL_SubChapterValueDirect");
static_assert(offsetof(RCVariableBFL_SubChapterValueDirect, InChapterVariableName) == 0x000000, "Member 'RCVariableBFL_SubChapterValueDirect::InChapterVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SubChapterValueDirect, InValue) == 0x000008, "Member 'RCVariableBFL_SubChapterValueDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SubChapterValueDirect, bZeroStop) == 0x00000C, "Member 'RCVariableBFL_SubChapterValueDirect::bZeroStop' has a wrong offset!");

// Function RC.RCVariableBFL.SubGameValueDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_SubGameValueDirect final
{
public:
	class FName                                   InGameVariableName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZeroStop;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_SubGameValueDirect) == 0x000004, "Wrong alignment on RCVariableBFL_SubGameValueDirect");
static_assert(sizeof(RCVariableBFL_SubGameValueDirect) == 0x000010, "Wrong size on RCVariableBFL_SubGameValueDirect");
static_assert(offsetof(RCVariableBFL_SubGameValueDirect, InGameVariableName) == 0x000000, "Member 'RCVariableBFL_SubGameValueDirect::InGameVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SubGameValueDirect, InValue) == 0x000008, "Member 'RCVariableBFL_SubGameValueDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SubGameValueDirect, bZeroStop) == 0x00000C, "Member 'RCVariableBFL_SubGameValueDirect::bZeroStop' has a wrong offset!");

// Function RC.RCVariableBFL.SubSceneValueDirect
// 0x0010 (0x0010 - 0x0000)
struct RCVariableBFL_SubSceneValueDirect final
{
public:
	class FName                                   InSceneVariableName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZeroStop;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableBFL_SubSceneValueDirect) == 0x000004, "Wrong alignment on RCVariableBFL_SubSceneValueDirect");
static_assert(sizeof(RCVariableBFL_SubSceneValueDirect) == 0x000010, "Wrong size on RCVariableBFL_SubSceneValueDirect");
static_assert(offsetof(RCVariableBFL_SubSceneValueDirect, InSceneVariableName) == 0x000000, "Member 'RCVariableBFL_SubSceneValueDirect::InSceneVariableName' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SubSceneValueDirect, InValue) == 0x000008, "Member 'RCVariableBFL_SubSceneValueDirect::InValue' has a wrong offset!");
static_assert(offsetof(RCVariableBFL_SubSceneValueDirect, bZeroStop) == 0x00000C, "Member 'RCVariableBFL_SubSceneValueDirect::bZeroStop' has a wrong offset!");

// Function RC.RCVariableBFL.SubTanteiPoint
// 0x0004 (0x0004 - 0x0000)
struct RCVariableBFL_SubTanteiPoint final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableBFL_SubTanteiPoint) == 0x000004, "Wrong alignment on RCVariableBFL_SubTanteiPoint");
static_assert(sizeof(RCVariableBFL_SubTanteiPoint) == 0x000004, "Wrong size on RCVariableBFL_SubTanteiPoint");
static_assert(offsetof(RCVariableBFL_SubTanteiPoint, InValue) == 0x000000, "Member 'RCVariableBFL_SubTanteiPoint::InValue' has a wrong offset!");

// Function RC.RCMenuCollectionWindow.CollectionSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCMenuCollectionWindow_CollectionSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMenuCollectionWindow_CollectionSelectNavigation) == 0x000008, "Wrong alignment on RCMenuCollectionWindow_CollectionSelectNavigation");
static_assert(sizeof(RCMenuCollectionWindow_CollectionSelectNavigation) == 0x000010, "Wrong size on RCMenuCollectionWindow_CollectionSelectNavigation");
static_assert(offsetof(RCMenuCollectionWindow_CollectionSelectNavigation, InNavigation) == 0x000000, "Member 'RCMenuCollectionWindow_CollectionSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCMenuCollectionWindow_CollectionSelectNavigation, ReturnValue) == 0x000008, "Member 'RCMenuCollectionWindow_CollectionSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.AddCharacter
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_AddCharacter final
{
public:
	class FName                                   InCharacterID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPhase;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_AddCharacter) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_AddCharacter");
static_assert(sizeof(RCVariableGameMenuBFL_AddCharacter) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_AddCharacter");
static_assert(offsetof(RCVariableGameMenuBFL_AddCharacter, InCharacterID) == 0x000000, "Member 'RCVariableGameMenuBFL_AddCharacter::InCharacterID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_AddCharacter, InPhase) == 0x000008, "Member 'RCVariableGameMenuBFL_AddCharacter::InPhase' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.AddGlossary
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_AddGlossary final
{
public:
	class FName                                   InGlossaryID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPhase;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_AddGlossary) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_AddGlossary");
static_assert(sizeof(RCVariableGameMenuBFL_AddGlossary) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_AddGlossary");
static_assert(offsetof(RCVariableGameMenuBFL_AddGlossary, InGlossaryID) == 0x000000, "Member 'RCVariableGameMenuBFL_AddGlossary::InGlossaryID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_AddGlossary, InPhase) == 0x000008, "Member 'RCVariableGameMenuBFL_AddGlossary::InPhase' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.AddKaikagi
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_AddKaikagi final
{
public:
	class FName                                   InKaiKagiID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPhase;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_AddKaikagi) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_AddKaikagi");
static_assert(sizeof(RCVariableGameMenuBFL_AddKaikagi) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_AddKaikagi");
static_assert(offsetof(RCVariableGameMenuBFL_AddKaikagi, InKaiKagiID) == 0x000000, "Member 'RCVariableGameMenuBFL_AddKaikagi::InKaiKagiID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_AddKaikagi, InPhase) == 0x000008, "Member 'RCVariableGameMenuBFL_AddKaikagi::InPhase' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.AddQuest
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_AddQuest final
{
public:
	class FName                                   InQuestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPhase;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_AddQuest) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_AddQuest");
static_assert(sizeof(RCVariableGameMenuBFL_AddQuest) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_AddQuest");
static_assert(offsetof(RCVariableGameMenuBFL_AddQuest, InQuestID) == 0x000000, "Member 'RCVariableGameMenuBFL_AddQuest::InQuestID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_AddQuest, InPhase) == 0x000008, "Member 'RCVariableGameMenuBFL_AddQuest::InPhase' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.AddTutorial
// 0x0008 (0x0008 - 0x0000)
struct RCVariableGameMenuBFL_AddTutorial final
{
public:
	class FName                                   InTutorialID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_AddTutorial) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_AddTutorial");
static_assert(sizeof(RCVariableGameMenuBFL_AddTutorial) == 0x000008, "Wrong size on RCVariableGameMenuBFL_AddTutorial");
static_assert(offsetof(RCVariableGameMenuBFL_AddTutorial, InTutorialID) == 0x000000, "Member 'RCVariableGameMenuBFL_AddTutorial::InTutorialID' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.GetMapM03IconType
// 0x0001 (0x0001 - 0x0000)
struct RCVariableGameMenuBFL_GetMapM03IconType final
{
public:
	ERCGameMenuMapM03IconType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_GetMapM03IconType) == 0x000001, "Wrong alignment on RCVariableGameMenuBFL_GetMapM03IconType");
static_assert(sizeof(RCVariableGameMenuBFL_GetMapM03IconType) == 0x000001, "Wrong size on RCVariableGameMenuBFL_GetMapM03IconType");
static_assert(offsetof(RCVariableGameMenuBFL_GetMapM03IconType, ReturnValue) == 0x000000, "Member 'RCVariableGameMenuBFL_GetMapM03IconType::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.GetMapM07IconType
// 0x0001 (0x0001 - 0x0000)
struct RCVariableGameMenuBFL_GetMapM07IconType final
{
public:
	ERCGameMenuMapM07IconType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_GetMapM07IconType) == 0x000001, "Wrong alignment on RCVariableGameMenuBFL_GetMapM07IconType");
static_assert(sizeof(RCVariableGameMenuBFL_GetMapM07IconType) == 0x000001, "Wrong size on RCVariableGameMenuBFL_GetMapM07IconType");
static_assert(offsetof(RCVariableGameMenuBFL_GetMapM07IconType, ReturnValue) == 0x000000, "Member 'RCVariableGameMenuBFL_GetMapM07IconType::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.GetNowMainQuestID
// 0x0008 (0x0008 - 0x0000)
struct RCVariableGameMenuBFL_GetNowMainQuestID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_GetNowMainQuestID) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_GetNowMainQuestID");
static_assert(sizeof(RCVariableGameMenuBFL_GetNowMainQuestID) == 0x000008, "Wrong size on RCVariableGameMenuBFL_GetNowMainQuestID");
static_assert(offsetof(RCVariableGameMenuBFL_GetNowMainQuestID, ReturnValue) == 0x000000, "Member 'RCVariableGameMenuBFL_GetNowMainQuestID::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.GetPlayerIconType
// 0x0001 (0x0001 - 0x0000)
struct RCVariableGameMenuBFL_GetPlayerIconType final
{
public:
	ERCGameMenuPlayerIconType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_GetPlayerIconType) == 0x000001, "Wrong alignment on RCVariableGameMenuBFL_GetPlayerIconType");
static_assert(sizeof(RCVariableGameMenuBFL_GetPlayerIconType) == 0x000001, "Wrong size on RCVariableGameMenuBFL_GetPlayerIconType");
static_assert(offsetof(RCVariableGameMenuBFL_GetPlayerIconType, ReturnValue) == 0x000000, "Member 'RCVariableGameMenuBFL_GetPlayerIconType::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.GetQuestPhase
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_GetQuestPhase final
{
public:
	class FName                                   InQuestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_GetQuestPhase) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_GetQuestPhase");
static_assert(sizeof(RCVariableGameMenuBFL_GetQuestPhase) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_GetQuestPhase");
static_assert(offsetof(RCVariableGameMenuBFL_GetQuestPhase, InQuestID) == 0x000000, "Member 'RCVariableGameMenuBFL_GetQuestPhase::InQuestID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_GetQuestPhase, ReturnValue) == 0x000008, "Member 'RCVariableGameMenuBFL_GetQuestPhase::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.GetQuestStatus
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_GetQuestStatus final
{
public:
	class FName                                   InQuestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuQuestStatus                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableGameMenuBFL_GetQuestStatus) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_GetQuestStatus");
static_assert(sizeof(RCVariableGameMenuBFL_GetQuestStatus) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_GetQuestStatus");
static_assert(offsetof(RCVariableGameMenuBFL_GetQuestStatus, InQuestID) == 0x000000, "Member 'RCVariableGameMenuBFL_GetQuestStatus::InQuestID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_GetQuestStatus, ReturnValue) == 0x000008, "Member 'RCVariableGameMenuBFL_GetQuestStatus::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.GetTopMenuType
// 0x0001 (0x0001 - 0x0000)
struct RCVariableGameMenuBFL_GetTopMenuType final
{
public:
	ERCGameMenuType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_GetTopMenuType) == 0x000001, "Wrong alignment on RCVariableGameMenuBFL_GetTopMenuType");
static_assert(sizeof(RCVariableGameMenuBFL_GetTopMenuType) == 0x000001, "Wrong size on RCVariableGameMenuBFL_GetTopMenuType");
static_assert(offsetof(RCVariableGameMenuBFL_GetTopMenuType, ReturnValue) == 0x000000, "Member 'RCVariableGameMenuBFL_GetTopMenuType::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.IsAllQuestCheckActor
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_IsAllQuestCheckActor final
{
public:
	class FName                                   InQuestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableGameMenuBFL_IsAllQuestCheckActor) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_IsAllQuestCheckActor");
static_assert(sizeof(RCVariableGameMenuBFL_IsAllQuestCheckActor) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_IsAllQuestCheckActor");
static_assert(offsetof(RCVariableGameMenuBFL_IsAllQuestCheckActor, InQuestID) == 0x000000, "Member 'RCVariableGameMenuBFL_IsAllQuestCheckActor::InQuestID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_IsAllQuestCheckActor, ReturnValue) == 0x000008, "Member 'RCVariableGameMenuBFL_IsAllQuestCheckActor::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.IsDrawWorldMap
// 0x0001 (0x0001 - 0x0000)
struct RCVariableGameMenuBFL_IsDrawWorldMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_IsDrawWorldMap) == 0x000001, "Wrong alignment on RCVariableGameMenuBFL_IsDrawWorldMap");
static_assert(sizeof(RCVariableGameMenuBFL_IsDrawWorldMap) == 0x000001, "Wrong size on RCVariableGameMenuBFL_IsDrawWorldMap");
static_assert(offsetof(RCVariableGameMenuBFL_IsDrawWorldMap, ReturnValue) == 0x000000, "Member 'RCVariableGameMenuBFL_IsDrawWorldMap::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.IsFastTravel
// 0x0001 (0x0001 - 0x0000)
struct RCVariableGameMenuBFL_IsFastTravel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_IsFastTravel) == 0x000001, "Wrong alignment on RCVariableGameMenuBFL_IsFastTravel");
static_assert(sizeof(RCVariableGameMenuBFL_IsFastTravel) == 0x000001, "Wrong size on RCVariableGameMenuBFL_IsFastTravel");
static_assert(offsetof(RCVariableGameMenuBFL_IsFastTravel, ReturnValue) == 0x000000, "Member 'RCVariableGameMenuBFL_IsFastTravel::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.IsPlayerUnknown
// 0x0001 (0x0001 - 0x0000)
struct RCVariableGameMenuBFL_IsPlayerUnknown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_IsPlayerUnknown) == 0x000001, "Wrong alignment on RCVariableGameMenuBFL_IsPlayerUnknown");
static_assert(sizeof(RCVariableGameMenuBFL_IsPlayerUnknown) == 0x000001, "Wrong size on RCVariableGameMenuBFL_IsPlayerUnknown");
static_assert(offsetof(RCVariableGameMenuBFL_IsPlayerUnknown, ReturnValue) == 0x000000, "Member 'RCVariableGameMenuBFL_IsPlayerUnknown::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.IsQuestCheckActor
// 0x0014 (0x0014 - 0x0000)
struct RCVariableGameMenuBFL_IsQuestCheckActor final
{
public:
	class FName                                   InQuestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InActorName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableGameMenuBFL_IsQuestCheckActor) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_IsQuestCheckActor");
static_assert(sizeof(RCVariableGameMenuBFL_IsQuestCheckActor) == 0x000014, "Wrong size on RCVariableGameMenuBFL_IsQuestCheckActor");
static_assert(offsetof(RCVariableGameMenuBFL_IsQuestCheckActor, InQuestID) == 0x000000, "Member 'RCVariableGameMenuBFL_IsQuestCheckActor::InQuestID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_IsQuestCheckActor, InActorName) == 0x000008, "Member 'RCVariableGameMenuBFL_IsQuestCheckActor::InActorName' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_IsQuestCheckActor, ReturnValue) == 0x000010, "Member 'RCVariableGameMenuBFL_IsQuestCheckActor::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.IsTanteiPointDraw
// 0x0001 (0x0001 - 0x0000)
struct RCVariableGameMenuBFL_IsTanteiPointDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_IsTanteiPointDraw) == 0x000001, "Wrong alignment on RCVariableGameMenuBFL_IsTanteiPointDraw");
static_assert(sizeof(RCVariableGameMenuBFL_IsTanteiPointDraw) == 0x000001, "Wrong size on RCVariableGameMenuBFL_IsTanteiPointDraw");
static_assert(offsetof(RCVariableGameMenuBFL_IsTanteiPointDraw, ReturnValue) == 0x000000, "Member 'RCVariableGameMenuBFL_IsTanteiPointDraw::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.IsTutorial
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_IsTutorial final
{
public:
	class FName                                   InTutorialID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableGameMenuBFL_IsTutorial) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_IsTutorial");
static_assert(sizeof(RCVariableGameMenuBFL_IsTutorial) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_IsTutorial");
static_assert(offsetof(RCVariableGameMenuBFL_IsTutorial, InTutorialID) == 0x000000, "Member 'RCVariableGameMenuBFL_IsTutorial::InTutorialID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_IsTutorial, ReturnValue) == 0x000008, "Member 'RCVariableGameMenuBFL_IsTutorial::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.RemoveKaikagi
// 0x0008 (0x0008 - 0x0000)
struct RCVariableGameMenuBFL_RemoveKaikagi final
{
public:
	class FName                                   InKaiKagiID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_RemoveKaikagi) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_RemoveKaikagi");
static_assert(sizeof(RCVariableGameMenuBFL_RemoveKaikagi) == 0x000008, "Wrong size on RCVariableGameMenuBFL_RemoveKaikagi");
static_assert(offsetof(RCVariableGameMenuBFL_RemoveKaikagi, InKaiKagiID) == 0x000000, "Member 'RCVariableGameMenuBFL_RemoveKaikagi::InKaiKagiID' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.ResetTopMenu
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_ResetTopMenu final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScene;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_ResetTopMenu) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_ResetTopMenu");
static_assert(sizeof(RCVariableGameMenuBFL_ResetTopMenu) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_ResetTopMenu");
static_assert(offsetof(RCVariableGameMenuBFL_ResetTopMenu, InChapter) == 0x000000, "Member 'RCVariableGameMenuBFL_ResetTopMenu::InChapter' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_ResetTopMenu, InScene) == 0x000004, "Member 'RCVariableGameMenuBFL_ResetTopMenu::InScene' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.SetQuestCheckActor
// 0x0014 (0x0014 - 0x0000)
struct RCVariableGameMenuBFL_SetQuestCheckActor final
{
public:
	class FName                                   InQuestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InActorName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableGameMenuBFL_SetQuestCheckActor) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_SetQuestCheckActor");
static_assert(sizeof(RCVariableGameMenuBFL_SetQuestCheckActor) == 0x000014, "Wrong size on RCVariableGameMenuBFL_SetQuestCheckActor");
static_assert(offsetof(RCVariableGameMenuBFL_SetQuestCheckActor, InQuestID) == 0x000000, "Member 'RCVariableGameMenuBFL_SetQuestCheckActor::InQuestID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_SetQuestCheckActor, InActorName) == 0x000008, "Member 'RCVariableGameMenuBFL_SetQuestCheckActor::InActorName' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_SetQuestCheckActor, ReturnValue) == 0x000010, "Member 'RCVariableGameMenuBFL_SetQuestCheckActor::ReturnValue' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.SetQuestComplete
// 0x0008 (0x0008 - 0x0000)
struct RCVariableGameMenuBFL_SetQuestComplete final
{
public:
	class FName                                   InQuestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_SetQuestComplete) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_SetQuestComplete");
static_assert(sizeof(RCVariableGameMenuBFL_SetQuestComplete) == 0x000008, "Wrong size on RCVariableGameMenuBFL_SetQuestComplete");
static_assert(offsetof(RCVariableGameMenuBFL_SetQuestComplete, InQuestID) == 0x000000, "Member 'RCVariableGameMenuBFL_SetQuestComplete::InQuestID' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.SetQuestFailure
// 0x0008 (0x0008 - 0x0000)
struct RCVariableGameMenuBFL_SetQuestFailure final
{
public:
	class FName                                   InQuestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableGameMenuBFL_SetQuestFailure) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_SetQuestFailure");
static_assert(sizeof(RCVariableGameMenuBFL_SetQuestFailure) == 0x000008, "Wrong size on RCVariableGameMenuBFL_SetQuestFailure");
static_assert(offsetof(RCVariableGameMenuBFL_SetQuestFailure, InQuestID) == 0x000000, "Member 'RCVariableGameMenuBFL_SetQuestFailure::InQuestID' has a wrong offset!");

// Function RC.RCVariableGameMenuBFL.SetTopMenuID
// 0x000C (0x000C - 0x0000)
struct RCVariableGameMenuBFL_SetTopMenuID final
{
public:
	class FName                                   InMenuID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableGameMenuBFL_SetTopMenuID) == 0x000004, "Wrong alignment on RCVariableGameMenuBFL_SetTopMenuID");
static_assert(sizeof(RCVariableGameMenuBFL_SetTopMenuID) == 0x00000C, "Wrong size on RCVariableGameMenuBFL_SetTopMenuID");
static_assert(offsetof(RCVariableGameMenuBFL_SetTopMenuID, InMenuID) == 0x000000, "Member 'RCVariableGameMenuBFL_SetTopMenuID::InMenuID' has a wrong offset!");
static_assert(offsetof(RCVariableGameMenuBFL_SetTopMenuID, ReturnValue) == 0x000008, "Member 'RCVariableGameMenuBFL_SetTopMenuID::ReturnValue' has a wrong offset!");

// Function RC.RCPawnRender.ChangeColorOfMaterials
// 0x0024 (0x0024 - 0x0000)
struct RCPawnRender_ChangeColorOfMaterials final
{
public:
	struct FLinearColor                           InAmbientColor;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InDirectionalColor;                                // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationSec;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnRender_ChangeColorOfMaterials) == 0x000004, "Wrong alignment on RCPawnRender_ChangeColorOfMaterials");
static_assert(sizeof(RCPawnRender_ChangeColorOfMaterials) == 0x000024, "Wrong size on RCPawnRender_ChangeColorOfMaterials");
static_assert(offsetof(RCPawnRender_ChangeColorOfMaterials, InAmbientColor) == 0x000000, "Member 'RCPawnRender_ChangeColorOfMaterials::InAmbientColor' has a wrong offset!");
static_assert(offsetof(RCPawnRender_ChangeColorOfMaterials, InDirectionalColor) == 0x000010, "Member 'RCPawnRender_ChangeColorOfMaterials::InDirectionalColor' has a wrong offset!");
static_assert(offsetof(RCPawnRender_ChangeColorOfMaterials, InDurationSec) == 0x000020, "Member 'RCPawnRender_ChangeColorOfMaterials::InDurationSec' has a wrong offset!");

// Function RC.RCPawnRender.IsCameraFadeEnable
// 0x0001 (0x0001 - 0x0000)
struct RCPawnRender_IsCameraFadeEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnRender_IsCameraFadeEnable) == 0x000001, "Wrong alignment on RCPawnRender_IsCameraFadeEnable");
static_assert(sizeof(RCPawnRender_IsCameraFadeEnable) == 0x000001, "Wrong size on RCPawnRender_IsCameraFadeEnable");
static_assert(offsetof(RCPawnRender_IsCameraFadeEnable, ReturnValue) == 0x000000, "Member 'RCPawnRender_IsCameraFadeEnable::ReturnValue' has a wrong offset!");

// Function RC.RCPawnRender.IsFadeEnd
// 0x0001 (0x0001 - 0x0000)
struct RCPawnRender_IsFadeEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnRender_IsFadeEnd) == 0x000001, "Wrong alignment on RCPawnRender_IsFadeEnd");
static_assert(sizeof(RCPawnRender_IsFadeEnd) == 0x000001, "Wrong size on RCPawnRender_IsFadeEnd");
static_assert(offsetof(RCPawnRender_IsFadeEnd, ReturnValue) == 0x000000, "Member 'RCPawnRender_IsFadeEnd::ReturnValue' has a wrong offset!");

// Function RC.RCPawnRender.SetCameraFadeEnable
// 0x0001 (0x0001 - 0x0000)
struct RCPawnRender_SetCameraFadeEnable final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnRender_SetCameraFadeEnable) == 0x000001, "Wrong alignment on RCPawnRender_SetCameraFadeEnable");
static_assert(sizeof(RCPawnRender_SetCameraFadeEnable) == 0x000001, "Wrong size on RCPawnRender_SetCameraFadeEnable");
static_assert(offsetof(RCPawnRender_SetCameraFadeEnable, bFlag) == 0x000000, "Member 'RCPawnRender_SetCameraFadeEnable::bFlag' has a wrong offset!");

// Function RC.RCPawnRender.SetupBgCharacterMaterial
// 0x0004 (0x0004 - 0x0000)
struct RCPawnRender_SetupBgCharacterMaterial final
{
public:
	float                                         InDurationSec;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPawnRender_SetupBgCharacterMaterial) == 0x000004, "Wrong alignment on RCPawnRender_SetupBgCharacterMaterial");
static_assert(sizeof(RCPawnRender_SetupBgCharacterMaterial) == 0x000004, "Wrong size on RCPawnRender_SetupBgCharacterMaterial");
static_assert(offsetof(RCPawnRender_SetupBgCharacterMaterial, InDurationSec) == 0x000000, "Member 'RCPawnRender_SetupBgCharacterMaterial::InDurationSec' has a wrong offset!");

// Function RC.RCPawnRender.StartFadeIn
// 0x0008 (0x0008 - 0x0000)
struct RCPawnRender_StartFadeIn final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDirect;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnRender_StartFadeIn) == 0x000004, "Wrong alignment on RCPawnRender_StartFadeIn");
static_assert(sizeof(RCPawnRender_StartFadeIn) == 0x000008, "Wrong size on RCPawnRender_StartFadeIn");
static_assert(offsetof(RCPawnRender_StartFadeIn, InTime) == 0x000000, "Member 'RCPawnRender_StartFadeIn::InTime' has a wrong offset!");
static_assert(offsetof(RCPawnRender_StartFadeIn, InDirect) == 0x000004, "Member 'RCPawnRender_StartFadeIn::InDirect' has a wrong offset!");

// Function RC.RCPawnRender.StartFadeOut
// 0x0008 (0x0008 - 0x0000)
struct RCPawnRender_StartFadeOut final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDirect;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCPawnRender_StartFadeOut) == 0x000004, "Wrong alignment on RCPawnRender_StartFadeOut");
static_assert(sizeof(RCPawnRender_StartFadeOut) == 0x000008, "Wrong size on RCPawnRender_StartFadeOut");
static_assert(offsetof(RCPawnRender_StartFadeOut, InTime) == 0x000000, "Member 'RCPawnRender_StartFadeOut::InTime' has a wrong offset!");
static_assert(offsetof(RCPawnRender_StartFadeOut, InDirect) == 0x000004, "Member 'RCPawnRender_StartFadeOut::InDirect' has a wrong offset!");

// Function RC.RCMobCharacter.GetAnimCtrl
// 0x0008 (0x0008 - 0x0000)
struct RCMobCharacter_GetAnimCtrl final
{
public:
	class URCCharacterAnimCtrl*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMobCharacter_GetAnimCtrl) == 0x000008, "Wrong alignment on RCMobCharacter_GetAnimCtrl");
static_assert(sizeof(RCMobCharacter_GetAnimCtrl) == 0x000008, "Wrong size on RCMobCharacter_GetAnimCtrl");
static_assert(offsetof(RCMobCharacter_GetAnimCtrl, ReturnValue) == 0x000000, "Member 'RCMobCharacter_GetAnimCtrl::ReturnValue' has a wrong offset!");

// Function RC.RCMobCharacter.Setup
// 0x0008 (0x0008 - 0x0000)
struct RCMobCharacter_Setup final
{
public:
	class FName                                   InMobId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMobCharacter_Setup) == 0x000004, "Wrong alignment on RCMobCharacter_Setup");
static_assert(sizeof(RCMobCharacter_Setup) == 0x000008, "Wrong size on RCMobCharacter_Setup");
static_assert(offsetof(RCMobCharacter_Setup, InMobId) == 0x000000, "Member 'RCMobCharacter_Setup::InMobId' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.CanClose
// 0x0001 (0x0001 - 0x0000)
struct RCMojimichiBPDFunctionLibrary_CanClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_CanClose) == 0x000001, "Wrong alignment on RCMojimichiBPDFunctionLibrary_CanClose");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_CanClose) == 0x000001, "Wrong size on RCMojimichiBPDFunctionLibrary_CanClose");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_CanClose, ReturnValue) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_CanClose::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.DisolveText
// 0x0008 (0x0008 - 0x0000)
struct RCMojimichiBPDFunctionLibrary_DisolveText final
{
public:
	float                                         DisolveTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_DisolveText) == 0x000004, "Wrong alignment on RCMojimichiBPDFunctionLibrary_DisolveText");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_DisolveText) == 0x000008, "Wrong size on RCMojimichiBPDFunctionLibrary_DisolveText");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_DisolveText, DisolveTime) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_DisolveText::DisolveTime' has a wrong offset!");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_DisolveText, ReturnValue) == 0x000004, "Member 'RCMojimichiBPDFunctionLibrary_DisolveText::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.IsEnd
// 0x0001 (0x0001 - 0x0000)
struct RCMojimichiBPDFunctionLibrary_IsEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_IsEnd) == 0x000001, "Wrong alignment on RCMojimichiBPDFunctionLibrary_IsEnd");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_IsEnd) == 0x000001, "Wrong size on RCMojimichiBPDFunctionLibrary_IsEnd");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_IsEnd, ReturnValue) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_IsEnd::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.ShowText
// 0x0001 (0x0001 - 0x0000)
struct RCMojimichiBPDFunctionLibrary_ShowText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_ShowText) == 0x000001, "Wrong alignment on RCMojimichiBPDFunctionLibrary_ShowText");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_ShowText) == 0x000001, "Wrong size on RCMojimichiBPDFunctionLibrary_ShowText");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_ShowText, ReturnValue) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_ShowText::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.StartConstruction
// 0x000C (0x000C - 0x0000)
struct RCMojimichiBPDFunctionLibrary_StartConstruction final
{
public:
	class FName                                   Meshtag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_StartConstruction) == 0x000004, "Wrong alignment on RCMojimichiBPDFunctionLibrary_StartConstruction");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_StartConstruction) == 0x00000C, "Wrong size on RCMojimichiBPDFunctionLibrary_StartConstruction");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_StartConstruction, Meshtag) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_StartConstruction::Meshtag' has a wrong offset!");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_StartConstruction, ReturnValue) == 0x000008, "Member 'RCMojimichiBPDFunctionLibrary_StartConstruction::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.StartConstructionWithActorTag
// 0x0014 (0x0014 - 0x0000)
struct RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag final
{
public:
	class FName                                   Meshtag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorTag;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag) == 0x000004, "Wrong alignment on RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag) == 0x000014, "Wrong size on RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag, Meshtag) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag::Meshtag' has a wrong offset!");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag, ActorTag) == 0x000008, "Member 'RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag::ActorTag' has a wrong offset!");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag, ReturnValue) == 0x000010, "Member 'RCMojimichiBPDFunctionLibrary_StartConstructionWithActorTag::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.StartFracture
// 0x0001 (0x0001 - 0x0000)
struct RCMojimichiBPDFunctionLibrary_StartFracture final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_StartFracture) == 0x000001, "Wrong alignment on RCMojimichiBPDFunctionLibrary_StartFracture");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_StartFracture) == 0x000001, "Wrong size on RCMojimichiBPDFunctionLibrary_StartFracture");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_StartFracture, ReturnValue) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_StartFracture::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.StartSystem
// 0x0008 (0x0008 - 0x0000)
struct RCMojimichiBPDFunctionLibrary_StartSystem final
{
public:
	class ACameraActor*                           CameraActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_StartSystem) == 0x000008, "Wrong alignment on RCMojimichiBPDFunctionLibrary_StartSystem");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_StartSystem) == 0x000008, "Wrong size on RCMojimichiBPDFunctionLibrary_StartSystem");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_StartSystem, CameraActor) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_StartSystem::CameraActor' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.StopFracture
// 0x0001 (0x0001 - 0x0000)
struct RCMojimichiBPDFunctionLibrary_StopFracture final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_StopFracture) == 0x000001, "Wrong alignment on RCMojimichiBPDFunctionLibrary_StopFracture");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_StopFracture) == 0x000001, "Wrong size on RCMojimichiBPDFunctionLibrary_StopFracture");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_StopFracture, ReturnValue) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_StopFracture::ReturnValue' has a wrong offset!");

// Function RC.RCMojimichiBPDFunctionLibrary.WasTextCaptured
// 0x0001 (0x0001 - 0x0000)
struct RCMojimichiBPDFunctionLibrary_WasTextCaptured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMojimichiBPDFunctionLibrary_WasTextCaptured) == 0x000001, "Wrong alignment on RCMojimichiBPDFunctionLibrary_WasTextCaptured");
static_assert(sizeof(RCMojimichiBPDFunctionLibrary_WasTextCaptured) == 0x000001, "Wrong size on RCMojimichiBPDFunctionLibrary_WasTextCaptured");
static_assert(offsetof(RCMojimichiBPDFunctionLibrary_WasTextCaptured, ReturnValue) == 0x000000, "Member 'RCMojimichiBPDFunctionLibrary_WasTextCaptured::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManager.CheckSkip
// 0x0004 (0x0004 - 0x0000)
struct RCMovieManager_CheckSkip final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_CheckSkip) == 0x000004, "Wrong alignment on RCMovieManager_CheckSkip");
static_assert(sizeof(RCMovieManager_CheckSkip) == 0x000004, "Wrong size on RCMovieManager_CheckSkip");
static_assert(offsetof(RCMovieManager_CheckSkip, DeltaTime) == 0x000000, "Member 'RCMovieManager_CheckSkip::DeltaTime' has a wrong offset!");

// Function RC.RCMovieManager.CheckSkipButtonCount
// 0x0008 (0x0008 - 0x0000)
struct RCMovieManager_CheckSkipButtonCount final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCMovieManager_CheckSkipButtonCount) == 0x000004, "Wrong alignment on RCMovieManager_CheckSkipButtonCount");
static_assert(sizeof(RCMovieManager_CheckSkipButtonCount) == 0x000008, "Wrong size on RCMovieManager_CheckSkipButtonCount");
static_assert(offsetof(RCMovieManager_CheckSkipButtonCount, DeltaTime) == 0x000000, "Member 'RCMovieManager_CheckSkipButtonCount::DeltaTime' has a wrong offset!");
static_assert(offsetof(RCMovieManager_CheckSkipButtonCount, ReturnValue) == 0x000004, "Member 'RCMovieManager_CheckSkipButtonCount::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManager.GetIsLoop
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManager_GetIsLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_GetIsLoop) == 0x000001, "Wrong alignment on RCMovieManager_GetIsLoop");
static_assert(sizeof(RCMovieManager_GetIsLoop) == 0x000001, "Wrong size on RCMovieManager_GetIsLoop");
static_assert(offsetof(RCMovieManager_GetIsLoop, ReturnValue) == 0x000000, "Member 'RCMovieManager_GetIsLoop::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManager.GetMovieTime
// 0x0004 (0x0004 - 0x0000)
struct RCMovieManager_GetMovieTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_GetMovieTime) == 0x000004, "Wrong alignment on RCMovieManager_GetMovieTime");
static_assert(sizeof(RCMovieManager_GetMovieTime) == 0x000004, "Wrong size on RCMovieManager_GetMovieTime");
static_assert(offsetof(RCMovieManager_GetMovieTime, ReturnValue) == 0x000000, "Member 'RCMovieManager_GetMovieTime::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManager.IsLoadedMovie
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManager_IsLoadedMovie final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_IsLoadedMovie) == 0x000001, "Wrong alignment on RCMovieManager_IsLoadedMovie");
static_assert(sizeof(RCMovieManager_IsLoadedMovie) == 0x000001, "Wrong size on RCMovieManager_IsLoadedMovie");
static_assert(offsetof(RCMovieManager_IsLoadedMovie, ReturnValue) == 0x000000, "Member 'RCMovieManager_IsLoadedMovie::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManager.IsPlayEnd
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManager_IsPlayEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_IsPlayEnd) == 0x000001, "Wrong alignment on RCMovieManager_IsPlayEnd");
static_assert(sizeof(RCMovieManager_IsPlayEnd) == 0x000001, "Wrong size on RCMovieManager_IsPlayEnd");
static_assert(offsetof(RCMovieManager_IsPlayEnd, ReturnValue) == 0x000000, "Member 'RCMovieManager_IsPlayEnd::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManager.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManager_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_IsPlaying) == 0x000001, "Wrong alignment on RCMovieManager_IsPlaying");
static_assert(sizeof(RCMovieManager_IsPlaying) == 0x000001, "Wrong size on RCMovieManager_IsPlaying");
static_assert(offsetof(RCMovieManager_IsPlaying, ReturnValue) == 0x000000, "Member 'RCMovieManager_IsPlaying::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManager.Pause
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManager_Pause final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_Pause) == 0x000001, "Wrong alignment on RCMovieManager_Pause");
static_assert(sizeof(RCMovieManager_Pause) == 0x000001, "Wrong size on RCMovieManager_Pause");
static_assert(offsetof(RCMovieManager_Pause, IsPause) == 0x000000, "Member 'RCMovieManager_Pause::IsPause' has a wrong offset!");

// Function RC.RCMovieManager.ReadyMovieMaterial
// 0x0008 (0x0008 - 0x0000)
struct RCMovieManager_ReadyMovieMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_ReadyMovieMaterial) == 0x000008, "Wrong alignment on RCMovieManager_ReadyMovieMaterial");
static_assert(sizeof(RCMovieManager_ReadyMovieMaterial) == 0x000008, "Wrong size on RCMovieManager_ReadyMovieMaterial");
static_assert(offsetof(RCMovieManager_ReadyMovieMaterial, ReturnValue) == 0x000000, "Member 'RCMovieManager_ReadyMovieMaterial::ReturnValue' has a wrong offset!");

// Function RC.RCMovieManager.SetIsLoop
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManager_SetIsLoop final
{
public:
	bool                                          misloop;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_SetIsLoop) == 0x000001, "Wrong alignment on RCMovieManager_SetIsLoop");
static_assert(sizeof(RCMovieManager_SetIsLoop) == 0x000001, "Wrong size on RCMovieManager_SetIsLoop");
static_assert(offsetof(RCMovieManager_SetIsLoop, misloop) == 0x000000, "Member 'RCMovieManager_SetIsLoop::misloop' has a wrong offset!");

// Function RC.RCMovieManager.SetMovieData
// 0x0020 (0x0020 - 0x0000)
struct RCMovieManager_SetMovieData final
{
public:
	class FString                                 mmovieID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCUserWidget*                          mwidget;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCManaComponent*                       mmanaComponent;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_SetMovieData) == 0x000008, "Wrong alignment on RCMovieManager_SetMovieData");
static_assert(sizeof(RCMovieManager_SetMovieData) == 0x000020, "Wrong size on RCMovieManager_SetMovieData");
static_assert(offsetof(RCMovieManager_SetMovieData, mmovieID) == 0x000000, "Member 'RCMovieManager_SetMovieData::mmovieID' has a wrong offset!");
static_assert(offsetof(RCMovieManager_SetMovieData, mwidget) == 0x000010, "Member 'RCMovieManager_SetMovieData::mwidget' has a wrong offset!");
static_assert(offsetof(RCMovieManager_SetMovieData, mmanaComponent) == 0x000018, "Member 'RCMovieManager_SetMovieData::mmanaComponent' has a wrong offset!");

// Function RC.RCMovieManager.SetOpeningFlag
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManager_SetOpeningFlag final
{
public:
	bool                                          isOpening_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_SetOpeningFlag) == 0x000001, "Wrong alignment on RCMovieManager_SetOpeningFlag");
static_assert(sizeof(RCMovieManager_SetOpeningFlag) == 0x000001, "Wrong size on RCMovieManager_SetOpeningFlag");
static_assert(offsetof(RCMovieManager_SetOpeningFlag, isOpening_0) == 0x000000, "Member 'RCMovieManager_SetOpeningFlag::isOpening_0' has a wrong offset!");

// Function RC.RCMovieManager.SetRain
// 0x0001 (0x0001 - 0x0000)
struct RCMovieManager_SetRain final
{
public:
	bool                                          isPlay;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_SetRain) == 0x000001, "Wrong alignment on RCMovieManager_SetRain");
static_assert(sizeof(RCMovieManager_SetRain) == 0x000001, "Wrong size on RCMovieManager_SetRain");
static_assert(offsetof(RCMovieManager_SetRain, isPlay) == 0x000000, "Member 'RCMovieManager_SetRain::isPlay' has a wrong offset!");

// Function RC.RCMovieManager.SetSkipTime
// 0x0004 (0x0004 - 0x0000)
struct RCMovieManager_SetSkipTime final
{
public:
	float                                         skipTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_SetSkipTime) == 0x000004, "Wrong alignment on RCMovieManager_SetSkipTime");
static_assert(sizeof(RCMovieManager_SetSkipTime) == 0x000004, "Wrong size on RCMovieManager_SetSkipTime");
static_assert(offsetof(RCMovieManager_SetSkipTime, skipTime) == 0x000000, "Member 'RCMovieManager_SetSkipTime::skipTime' has a wrong offset!");

// Function RC.RCMovieManager.Update
// 0x0004 (0x0004 - 0x0000)
struct RCMovieManager_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovieManager_Update) == 0x000004, "Wrong alignment on RCMovieManager_Update");
static_assert(sizeof(RCMovieManager_Update) == 0x000004, "Wrong size on RCMovieManager_Update");
static_assert(offsetof(RCMovieManager_Update, DeltaTime) == 0x000000, "Member 'RCMovieManager_Update::DeltaTime' has a wrong offset!");

// Function RC.RCMovingActorComponent.EnableEngineSound
// 0x0001 (0x0001 - 0x0000)
struct RCMovingActorComponent_EnableEngineSound final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovingActorComponent_EnableEngineSound) == 0x000001, "Wrong alignment on RCMovingActorComponent_EnableEngineSound");
static_assert(sizeof(RCMovingActorComponent_EnableEngineSound) == 0x000001, "Wrong size on RCMovingActorComponent_EnableEngineSound");
static_assert(offsetof(RCMovingActorComponent_EnableEngineSound, IsEnable) == 0x000000, "Member 'RCMovingActorComponent_EnableEngineSound::IsEnable' has a wrong offset!");

// Function RC.RCMovingActorComponent.GetEngineSoundID
// 0x0010 (0x0010 - 0x0000)
struct RCMovingActorComponent_GetEngineSoundID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovingActorComponent_GetEngineSoundID) == 0x000008, "Wrong alignment on RCMovingActorComponent_GetEngineSoundID");
static_assert(sizeof(RCMovingActorComponent_GetEngineSoundID) == 0x000010, "Wrong size on RCMovingActorComponent_GetEngineSoundID");
static_assert(offsetof(RCMovingActorComponent_GetEngineSoundID, ReturnValue) == 0x000000, "Member 'RCMovingActorComponent_GetEngineSoundID::ReturnValue' has a wrong offset!");

// Function RC.RCMovingActorComponent.IsEnableEngineSound
// 0x0001 (0x0001 - 0x0000)
struct RCMovingActorComponent_IsEnableEngineSound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovingActorComponent_IsEnableEngineSound) == 0x000001, "Wrong alignment on RCMovingActorComponent_IsEnableEngineSound");
static_assert(sizeof(RCMovingActorComponent_IsEnableEngineSound) == 0x000001, "Wrong size on RCMovingActorComponent_IsEnableEngineSound");
static_assert(offsetof(RCMovingActorComponent_IsEnableEngineSound, ReturnValue) == 0x000000, "Member 'RCMovingActorComponent_IsEnableEngineSound::ReturnValue' has a wrong offset!");

// Function RC.RCMovingActorComponent.SetEngineSoundID
// 0x0010 (0x0010 - 0x0000)
struct RCMovingActorComponent_SetEngineSoundID final
{
public:
	class FString                                 SoundId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCMovingActorComponent_SetEngineSoundID) == 0x000008, "Wrong alignment on RCMovingActorComponent_SetEngineSoundID");
static_assert(sizeof(RCMovingActorComponent_SetEngineSoundID) == 0x000010, "Wrong size on RCMovingActorComponent_SetEngineSoundID");
static_assert(offsetof(RCMovingActorComponent_SetEngineSoundID, SoundId) == 0x000000, "Member 'RCMovingActorComponent_SetEngineSoundID::SoundId' has a wrong offset!");

// Function RC.RCNazoBattleRebuttalLetter.OnHitBoxOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RCNazoBattleRebuttalLetter_OnHitBoxOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleRebuttalLetter_OnHitBoxOverlap) == 0x000008, "Wrong alignment on RCNazoBattleRebuttalLetter_OnHitBoxOverlap");
static_assert(sizeof(RCNazoBattleRebuttalLetter_OnHitBoxOverlap) == 0x0000A8, "Wrong size on RCNazoBattleRebuttalLetter_OnHitBoxOverlap");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnHitBoxOverlap, OverlappedComponent) == 0x000000, "Member 'RCNazoBattleRebuttalLetter_OnHitBoxOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnHitBoxOverlap, OtherActor) == 0x000008, "Member 'RCNazoBattleRebuttalLetter_OnHitBoxOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnHitBoxOverlap, OtherComp) == 0x000010, "Member 'RCNazoBattleRebuttalLetter_OnHitBoxOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnHitBoxOverlap, OtherBodyIndex) == 0x000018, "Member 'RCNazoBattleRebuttalLetter_OnHitBoxOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnHitBoxOverlap, bFromSweep) == 0x00001C, "Member 'RCNazoBattleRebuttalLetter_OnHitBoxOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnHitBoxOverlap, SweepResult) == 0x000020, "Member 'RCNazoBattleRebuttalLetter_OnHitBoxOverlap::SweepResult' has a wrong offset!");

// Function RC.RCNazoBattleRebuttalLetter.OnJustAvoidBoxBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap) == 0x000008, "Wrong alignment on RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap");
static_assert(sizeof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap) == 0x0000A8, "Wrong size on RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap, OtherActor) == 0x000008, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap, OtherComp) == 0x000010, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap, bFromSweep) == 0x00001C, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap, SweepResult) == 0x000020, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxBeginOverlap::SweepResult' has a wrong offset!");

// Function RC.RCNazoBattleRebuttalLetter.OnJustAvoidBoxEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap) == 0x000008, "Wrong alignment on RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap");
static_assert(sizeof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap) == 0x000020, "Wrong size on RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap, OverlappedComponent) == 0x000000, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap, OtherActor) == 0x000008, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap, OtherComp) == 0x000010, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RCNazoBattleRebuttalLetter_OnJustAvoidBoxEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function RC.RCNazoBattleRebuttalLetter.SetHitCharaEnable
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleRebuttalLetter_SetHitCharaEnable final
{
public:
	bool                                          InHitCharaEnable;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleRebuttalLetter_SetHitCharaEnable) == 0x000001, "Wrong alignment on RCNazoBattleRebuttalLetter_SetHitCharaEnable");
static_assert(sizeof(RCNazoBattleRebuttalLetter_SetHitCharaEnable) == 0x000001, "Wrong size on RCNazoBattleRebuttalLetter_SetHitCharaEnable");
static_assert(offsetof(RCNazoBattleRebuttalLetter_SetHitCharaEnable, InHitCharaEnable) == 0x000000, "Member 'RCNazoBattleRebuttalLetter_SetHitCharaEnable::InHitCharaEnable' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleAllRebuttalLetterForceFinish
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleAllRebuttalLetterForceFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleAllRebuttalLetterForceFinish) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleAllRebuttalLetterForceFinish");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleAllRebuttalLetterForceFinish) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleAllRebuttalLetterForceFinish");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleAllRebuttalLetterForceFinish, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleAllRebuttalLetterForceFinish::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGameOverUI_GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_GetSelectedIndex) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_GetSelectedIndex");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_GetSelectedIndex) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_GetSelectedIndex");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGameOverUI_IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_IsFinished) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_IsFinished");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_IsFinished) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_IsFinished");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_IsFinished, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGameOverUI_Start
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_Start) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_Start) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_Start, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGameOverUI_Start::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetCurrentRebuttalGroupNo
// 0x0004 (0x0004 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetCurrentRebuttalGroupNo final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetCurrentRebuttalGroupNo) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetCurrentRebuttalGroupNo");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetCurrentRebuttalGroupNo) == 0x000004, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetCurrentRebuttalGroupNo");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetCurrentRebuttalGroupNo, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetCurrentRebuttalGroupNo::RebuttalGroupNo' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetRebuttalPhaseParameter_AttackFailure
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleLSARebuttalAttackFailureType     FailureType;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkID;                                            // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure, RebuttalNo) == 0x000004, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure::RebuttalNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure, FailureType) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure::FailureType' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure, TalkID) == 0x00000C, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure, ReturnValue) == 0x000014, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackFailure::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetRebuttalPhaseParameter_AttackSuccess
// 0x0014 (0x0014 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess) == 0x000014, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess, RebuttalNo) == 0x000004, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess::RebuttalNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess, TalkID) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess, ReturnValue) == 0x000010, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_AttackSuccess::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetRebuttalPhaseParameter_ClearEvent
// 0x0020 (0x0020 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TalkIDArray;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent) == 0x000008, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent) == 0x000020, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent, TalkID) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent, TalkIDArray) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent::TalkIDArray' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent, ReturnValue) == 0x000018, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_ClearEvent::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetRebuttalPhaseParameter_CloseContest
// 0x0018 (0x0018 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputTime;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputCount;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailureDamage;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest) == 0x000018, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest, RebuttalNo) == 0x000004, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest::RebuttalNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest, InputTime) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest::InputTime' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest, InputCount) == 0x00000C, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest::InputCount' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest, FailureDamage) == 0x000010, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest::FailureDamage' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest, ReturnValue) == 0x000014, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_CloseContest::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetRebuttalPhaseParameter_Confrontation
// 0x0014 (0x0014 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstChallenge;                                   // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkID;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation) == 0x000014, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation, bFirstChallenge) == 0x000004, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation::bFirstChallenge' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation, TalkID) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation, ReturnValue) == 0x000010, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Confrontation::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetRebuttalPhaseParameter_GameOver
// 0x001C (0x001C - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HintTextId;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver) == 0x00001C, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver, RebuttalNo) == 0x000004, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver::RebuttalNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver, TalkID) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver, HintTextId) == 0x000010, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver::HintTextId' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver, ReturnValue) == 0x000018, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_GameOver::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetRebuttalPhaseParameter_Interval
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval, TalkID) == 0x000004, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval, ReturnValue) == 0x00000C, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_Interval::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetRebuttalPhaseParameter_NextRebuttalEvent
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent final
{
public:
	int32                                         RebuttalGroupNo;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent, RebuttalGroupNo) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent, TalkID) == 0x000004, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent, ReturnValue) == 0x00000C, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_NextRebuttalEvent::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleGetRebuttalPhaseParameter_PreEvent
// 0x000C (0x000C - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_PreEvent final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_PreEvent) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_PreEvent");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_PreEvent) == 0x00000C, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_PreEvent");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_PreEvent, TalkID) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_PreEvent::TalkID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_PreEvent, ReturnValue) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_BattleGetRebuttalPhaseParameter_PreEvent::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleHintUI_IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleHintUI_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleHintUI_IsFinished) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleHintUI_IsFinished");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleHintUI_IsFinished) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleHintUI_IsFinished");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleHintUI_IsFinished, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleHintUI_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleHintUI_Start
// 0x000C (0x000C - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleHintUI_Start final
{
public:
	class FName                                   HintTextId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleHintUI_Start) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleHintUI_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleHintUI_Start) == 0x00000C, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleHintUI_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleHintUI_Start, HintTextId) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleHintUI_Start::HintTextId' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleHintUI_Start, ReturnValue) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_BattleHintUI_Start::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleRebuttalEndCloseContest
// 0x0002 (0x0002 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndCloseContest final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndCloseContest) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndCloseContest");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndCloseContest) == 0x000002, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndCloseContest");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndCloseContest, bSuccess) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndCloseContest::bSuccess' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndCloseContest, ReturnValue) == 0x000001, "Member 'RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndCloseContest::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleRebuttalEndPhase
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndPhase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndPhase) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndPhase");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndPhase) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndPhase");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndPhase, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleRebuttalEndPhase::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleRebuttalResetPosition
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleRebuttalResetPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalResetPosition) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleRebuttalResetPosition");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalResetPosition) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleRebuttalResetPosition");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleRebuttalResetPosition, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleRebuttalResetPosition::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleStartUI_IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleStartUI_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleStartUI_IsFinished) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleStartUI_IsFinished");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleStartUI_IsFinished) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleStartUI_IsFinished");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleStartUI_IsFinished, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleStartUI_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.BattleStartUI_Start
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_BattleStartUI_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_BattleStartUI_Start) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_BattleStartUI_Start");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_BattleStartUI_Start) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_BattleStartUI_Start");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_BattleStartUI_Start, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_BattleStartUI_Start::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.GetActiveRebuttalDataArray
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_GetActiveRebuttalDataArray final
{
public:
	TArray<struct FRCNazoBattleLSARebuttalData>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_GetActiveRebuttalDataArray) == 0x000008, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_GetActiveRebuttalDataArray");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_GetActiveRebuttalDataArray) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActorBFL_GetActiveRebuttalDataArray");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetActiveRebuttalDataArray, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_GetActiveRebuttalDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.GetBattleLevelScriptActor
// 0x0008 (0x0008 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_GetBattleLevelScriptActor final
{
public:
	class ARCNazoBattleLevelScriptActor*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_GetBattleLevelScriptActor) == 0x000008, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_GetBattleLevelScriptActor");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_GetBattleLevelScriptActor) == 0x000008, "Wrong size on RCNazoBattleLevelScriptActorBFL_GetBattleLevelScriptActor");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetBattleLevelScriptActor, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_GetBattleLevelScriptActor::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.GetBattleSettings
// 0x0318 (0x0318 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_GetBattleSettings final
{
public:
	struct FRCNazoBattleSettings                  ReturnValue;                                       // 0x0000(0x0318)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_GetBattleSettings) == 0x000008, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_GetBattleSettings");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_GetBattleSettings) == 0x000318, "Wrong size on RCNazoBattleLevelScriptActorBFL_GetBattleSettings");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetBattleSettings, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_GetBattleSettings::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.GetDefaultKaijinPartVoiceID
// 0x0010 (0x0010 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID final
{
public:
	class FName                                   PartVoiceID;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleKaijinPartVoiceType              PartVoiceType;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID) == 0x000010, "Wrong size on RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID, PartVoiceID) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID::PartVoiceID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID, DelayTime) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID::DelayTime' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID, PartVoiceType) == 0x00000C, "Member 'RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID::PartVoiceType' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID, ReturnValue) == 0x00000D, "Member 'RCNazoBattleLevelScriptActorBFL_GetDefaultKaijinPartVoiceID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.GetKaijinPartVoiceID
// 0x001C (0x001C - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID final
{
public:
	class FName                                   PartVoiceID;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleKaijinPartVoiceType              PartVoiceType;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KaijinTag;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID) == 0x00001C, "Wrong size on RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID, PartVoiceID) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID::PartVoiceID' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID, DelayTime) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID::DelayTime' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID, PartVoiceType) == 0x00000C, "Member 'RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID::PartVoiceType' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID, KaijinTag) == 0x000010, "Member 'RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID::KaijinTag' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID, ReturnValue) == 0x000018, "Member 'RCNazoBattleLevelScriptActorBFL_GetKaijinPartVoiceID::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.GetPreEventPartVoiceKaijinTag
// 0x000C (0x000C - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_GetPreEventPartVoiceKaijinTag final
{
public:
	class FName                                   KaijinTag;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_GetPreEventPartVoiceKaijinTag) == 0x000004, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_GetPreEventPartVoiceKaijinTag");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_GetPreEventPartVoiceKaijinTag) == 0x00000C, "Wrong size on RCNazoBattleLevelScriptActorBFL_GetPreEventPartVoiceKaijinTag");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetPreEventPartVoiceKaijinTag, KaijinTag) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_GetPreEventPartVoiceKaijinTag::KaijinTag' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_GetPreEventPartVoiceKaijinTag, ReturnValue) == 0x000008, "Member 'RCNazoBattleLevelScriptActorBFL_GetPreEventPartVoiceKaijinTag::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.IsBattle
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_IsBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_IsBattle) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_IsBattle");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_IsBattle) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_IsBattle");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_IsBattle, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_IsBattle::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.IsBattleInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_IsBattleInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_IsBattleInitialized) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_IsBattleInitialized");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_IsBattleInitialized) == 0x000001, "Wrong size on RCNazoBattleLevelScriptActorBFL_IsBattleInitialized");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_IsBattleInitialized, ReturnValue) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_IsBattleInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNazoBattleLevelScriptActorBFL.SetBattleInputEnable
// 0x0002 (0x0002 - 0x0000)
struct RCNazoBattleLevelScriptActorBFL_SetBattleInputEnable final
{
public:
	bool                                          bInputEnable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoBattleLevelScriptActorBFL_SetBattleInputEnable) == 0x000001, "Wrong alignment on RCNazoBattleLevelScriptActorBFL_SetBattleInputEnable");
static_assert(sizeof(RCNazoBattleLevelScriptActorBFL_SetBattleInputEnable) == 0x000002, "Wrong size on RCNazoBattleLevelScriptActorBFL_SetBattleInputEnable");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_SetBattleInputEnable, bInputEnable) == 0x000000, "Member 'RCNazoBattleLevelScriptActorBFL_SetBattleInputEnable::bInputEnable' has a wrong offset!");
static_assert(offsetof(RCNazoBattleLevelScriptActorBFL_SetBattleInputEnable, ReturnValue) == 0x000001, "Member 'RCNazoBattleLevelScriptActorBFL_SetBattleInputEnable::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLoopLevelScriptActorBFL.GetLoopLevelScriptActor
// 0x0008 (0x0008 - 0x0000)
struct RCNazoLoopLevelScriptActorBFL_GetLoopLevelScriptActor final
{
public:
	class ARCNazoLoopLevelScriptActor*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLoopLevelScriptActorBFL_GetLoopLevelScriptActor) == 0x000008, "Wrong alignment on RCNazoLoopLevelScriptActorBFL_GetLoopLevelScriptActor");
static_assert(sizeof(RCNazoLoopLevelScriptActorBFL_GetLoopLevelScriptActor) == 0x000008, "Wrong size on RCNazoLoopLevelScriptActorBFL_GetLoopLevelScriptActor");
static_assert(offsetof(RCNazoLoopLevelScriptActorBFL_GetLoopLevelScriptActor, ReturnValue) == 0x000000, "Member 'RCNazoLoopLevelScriptActorBFL_GetLoopLevelScriptActor::ReturnValue' has a wrong offset!");

// Function RC.RCNazoLoopLevelScriptActorBFL.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNazoLoopLevelScriptActorBFL_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoLoopLevelScriptActorBFL_IsInitialized) == 0x000001, "Wrong alignment on RCNazoLoopLevelScriptActorBFL_IsInitialized");
static_assert(sizeof(RCNazoLoopLevelScriptActorBFL_IsInitialized) == 0x000001, "Wrong size on RCNazoLoopLevelScriptActorBFL_IsInitialized");
static_assert(offsetof(RCNazoLoopLevelScriptActorBFL_IsInitialized, ReturnValue) == 0x000000, "Member 'RCNazoLoopLevelScriptActorBFL_IsInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActorBFL.ChangeBackCamera
// 0x000C (0x000C - 0x0000)
struct RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera) == 0x00000C, "Wrong size on RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera, BlendTime) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera, BlendFunc) == 0x000004, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera, BlendExp) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeBackCamera::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActorBFL.ChangeCamera
// 0x0018 (0x0018 - 0x0000)
struct RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera final
{
public:
	class ARCCineCameraActor*                     Camera;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera) == 0x000008, "Wrong alignment on RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera) == 0x000018, "Wrong size on RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera, Camera) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera::Camera' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera, BlendTime) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera, BlendFunc) == 0x00000C, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera, BlendExp) == 0x000010, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCamera::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActorBFL.ChangeCameraBase
// 0x0020 (0x0020 - 0x0000)
struct RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase final
{
public:
	class AActor*                                 CameraBase;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCCineCameraActor*                     Camera;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase) == 0x000008, "Wrong alignment on RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase) == 0x000020, "Wrong size on RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase, CameraBase) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase::CameraBase' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase, Camera) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase::Camera' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase, BlendTime) == 0x000010, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase, BlendFunc) == 0x000014, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase, BlendExp) == 0x000018, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBase::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActorBFL.ChangeCameraBaseFromTag
// 0x001C (0x001C - 0x0000)
struct RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag final
{
public:
	class FName                                   CameraBaseTag;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraTag;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag) == 0x00001C, "Wrong size on RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag, CameraBaseTag) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag::CameraBaseTag' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag, CameraTag) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag::CameraTag' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag, BlendTime) == 0x000010, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag, BlendFunc) == 0x000014, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag, BlendExp) == 0x000018, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraBaseFromTag::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActorBFL.ChangeCameraFromTag
// 0x0014 (0x0014 - 0x0000)
struct RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag final
{
public:
	class FName                                   CameraTag;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag) == 0x000014, "Wrong size on RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag, CameraTag) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag::CameraTag' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag, BlendTime) == 0x000008, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag::BlendTime' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag, BlendFunc) == 0x00000C, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag::BlendFunc' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag, BlendExp) == 0x000010, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangeCameraFromTag::BlendExp' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActorBFL.ChangePlayerSpeed
// 0x0008 (0x0008 - 0x0000)
struct RCNazoMoveLoopLevelScriptActorBFL_ChangePlayerSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActorBFL_ChangePlayerSpeed) == 0x000004, "Wrong alignment on RCNazoMoveLoopLevelScriptActorBFL_ChangePlayerSpeed");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActorBFL_ChangePlayerSpeed) == 0x000008, "Wrong size on RCNazoMoveLoopLevelScriptActorBFL_ChangePlayerSpeed");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangePlayerSpeed, Speed) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangePlayerSpeed::Speed' has a wrong offset!");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_ChangePlayerSpeed, Time) == 0x000004, "Member 'RCNazoMoveLoopLevelScriptActorBFL_ChangePlayerSpeed::Time' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActorBFL.GetMoveLoopLevelScriptActor
// 0x0008 (0x0008 - 0x0000)
struct RCNazoMoveLoopLevelScriptActorBFL_GetMoveLoopLevelScriptActor final
{
public:
	class ARCNazoMoveLoopLevelScriptActor*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActorBFL_GetMoveLoopLevelScriptActor) == 0x000008, "Wrong alignment on RCNazoMoveLoopLevelScriptActorBFL_GetMoveLoopLevelScriptActor");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActorBFL_GetMoveLoopLevelScriptActor) == 0x000008, "Wrong size on RCNazoMoveLoopLevelScriptActorBFL_GetMoveLoopLevelScriptActor");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_GetMoveLoopLevelScriptActor, ReturnValue) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActorBFL_GetMoveLoopLevelScriptActor::ReturnValue' has a wrong offset!");

// Function RC.RCNazoMoveLoopLevelScriptActorBFL.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNazoMoveLoopLevelScriptActorBFL_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoMoveLoopLevelScriptActorBFL_IsInitialized) == 0x000001, "Wrong alignment on RCNazoMoveLoopLevelScriptActorBFL_IsInitialized");
static_assert(sizeof(RCNazoMoveLoopLevelScriptActorBFL_IsInitialized) == 0x000001, "Wrong size on RCNazoMoveLoopLevelScriptActorBFL_IsInitialized");
static_assert(offsetof(RCNazoMoveLoopLevelScriptActorBFL_IsInitialized, ReturnValue) == 0x000000, "Member 'RCNazoMoveLoopLevelScriptActorBFL_IsInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActor.ChangeStateEvent
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActor_ChangeStateEvent final
{
public:
	ERCNazoPlayableLoopLSAState                   PlayableLoopState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActor_ChangeStateEvent) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActor_ChangeStateEvent");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActor_ChangeStateEvent) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActor_ChangeStateEvent");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActor_ChangeStateEvent, PlayableLoopState) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActor_ChangeStateEvent::PlayableLoopState' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActor.CheckFinishedBehindWallClosed
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActor_CheckFinishedBehindWallClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActor_CheckFinishedBehindWallClosed) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActor_CheckFinishedBehindWallClosed");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActor_CheckFinishedBehindWallClosed) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActor_CheckFinishedBehindWallClosed");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActor_CheckFinishedBehindWallClosed, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActor_CheckFinishedBehindWallClosed::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActor.CloseBehindWall
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActor_CloseBehindWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActor_CloseBehindWall) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActor_CloseBehindWall");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActor_CloseBehindWall) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActor_CloseBehindWall");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActor_CloseBehindWall, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActor_CloseBehindWall::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActor.FinishLoop
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActor_FinishLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActor_FinishLoop) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActor_FinishLoop");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActor_FinishLoop) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActor_FinishLoop");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActor_FinishLoop, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActor_FinishLoop::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActor.GetWarpCount
// 0x0004 (0x0004 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActor_GetWarpCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActor_GetWarpCount) == 0x000004, "Wrong alignment on RCNazoPlayableLoopLevelScriptActor_GetWarpCount");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActor_GetWarpCount) == 0x000004, "Wrong size on RCNazoPlayableLoopLevelScriptActor_GetWarpCount");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActor_GetWarpCount, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActor_GetWarpCount::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActor.OpenFrontWall
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActor_OpenFrontWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActor_OpenFrontWall) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActor_OpenFrontWall");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActor_OpenFrontWall) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActor_OpenFrontWall");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActor_OpenFrontWall, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActor_OpenFrontWall::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActor.Warp
// 0x0001 (0x0001 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActor_Warp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActor_Warp) == 0x000001, "Wrong alignment on RCNazoPlayableLoopLevelScriptActor_Warp");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActor_Warp) == 0x000001, "Wrong size on RCNazoPlayableLoopLevelScriptActor_Warp");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActor_Warp, ReturnValue) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActor_Warp::ReturnValue' has a wrong offset!");

// Function RC.RCNazoPlayableLoopLevelScriptActor.WarpFinishedEvent
// 0x0004 (0x0004 - 0x0000)
struct RCNazoPlayableLoopLevelScriptActor_WarpFinishedEvent final
{
public:
	int32                                         WarpCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNazoPlayableLoopLevelScriptActor_WarpFinishedEvent) == 0x000004, "Wrong alignment on RCNazoPlayableLoopLevelScriptActor_WarpFinishedEvent");
static_assert(sizeof(RCNazoPlayableLoopLevelScriptActor_WarpFinishedEvent) == 0x000004, "Wrong size on RCNazoPlayableLoopLevelScriptActor_WarpFinishedEvent");
static_assert(offsetof(RCNazoPlayableLoopLevelScriptActor_WarpFinishedEvent, WarpCount) == 0x000000, "Member 'RCNazoPlayableLoopLevelScriptActor_WarpFinishedEvent::WarpCount' has a wrong offset!");

// Function RC.RCNzCriminalManager.GetEvent
// 0x0001 (0x0001 - 0x0000)
struct RCNzCriminalManager_GetEvent final
{
public:
	ERCNzCriminalEventType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_GetEvent) == 0x000001, "Wrong alignment on RCNzCriminalManager_GetEvent");
static_assert(sizeof(RCNzCriminalManager_GetEvent) == 0x000001, "Wrong size on RCNzCriminalManager_GetEvent");
static_assert(offsetof(RCNzCriminalManager_GetEvent, ReturnValue) == 0x000000, "Member 'RCNzCriminalManager_GetEvent::ReturnValue' has a wrong offset!");

// Function RC.RCNzCriminalManager.GetFailureLineId
// 0x0008 (0x0008 - 0x0000)
struct RCNzCriminalManager_GetFailureLineId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_GetFailureLineId) == 0x000004, "Wrong alignment on RCNzCriminalManager_GetFailureLineId");
static_assert(sizeof(RCNzCriminalManager_GetFailureLineId) == 0x000008, "Wrong size on RCNzCriminalManager_GetFailureLineId");
static_assert(offsetof(RCNzCriminalManager_GetFailureLineId, ReturnValue) == 0x000000, "Member 'RCNzCriminalManager_GetFailureLineId::ReturnValue' has a wrong offset!");

// Function RC.RCNzCriminalManager.GetHintTextId
// 0x0008 (0x0008 - 0x0000)
struct RCNzCriminalManager_GetHintTextId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_GetHintTextId) == 0x000004, "Wrong alignment on RCNzCriminalManager_GetHintTextId");
static_assert(sizeof(RCNzCriminalManager_GetHintTextId) == 0x000008, "Wrong size on RCNzCriminalManager_GetHintTextId");
static_assert(offsetof(RCNzCriminalManager_GetHintTextId, ReturnValue) == 0x000000, "Member 'RCNzCriminalManager_GetHintTextId::ReturnValue' has a wrong offset!");

// Function RC.RCNzCriminalManager.GetSelectedSuspectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCNzCriminalManager_GetSelectedSuspectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_GetSelectedSuspectIndex) == 0x000004, "Wrong alignment on RCNzCriminalManager_GetSelectedSuspectIndex");
static_assert(sizeof(RCNzCriminalManager_GetSelectedSuspectIndex) == 0x000004, "Wrong size on RCNzCriminalManager_GetSelectedSuspectIndex");
static_assert(offsetof(RCNzCriminalManager_GetSelectedSuspectIndex, ReturnValue) == 0x000000, "Member 'RCNzCriminalManager_GetSelectedSuspectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNzCriminalManager.IsCorrectCriminal
// 0x0001 (0x0001 - 0x0000)
struct RCNzCriminalManager_IsCorrectCriminal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_IsCorrectCriminal) == 0x000001, "Wrong alignment on RCNzCriminalManager_IsCorrectCriminal");
static_assert(sizeof(RCNzCriminalManager_IsCorrectCriminal) == 0x000001, "Wrong size on RCNzCriminalManager_IsCorrectCriminal");
static_assert(offsetof(RCNzCriminalManager_IsCorrectCriminal, ReturnValue) == 0x000000, "Member 'RCNzCriminalManager_IsCorrectCriminal::ReturnValue' has a wrong offset!");

// Function RC.RCNzCriminalManager.IsGameOver
// 0x0001 (0x0001 - 0x0000)
struct RCNzCriminalManager_IsGameOver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_IsGameOver) == 0x000001, "Wrong alignment on RCNzCriminalManager_IsGameOver");
static_assert(sizeof(RCNzCriminalManager_IsGameOver) == 0x000001, "Wrong size on RCNzCriminalManager_IsGameOver");
static_assert(offsetof(RCNzCriminalManager_IsGameOver, ReturnValue) == 0x000000, "Member 'RCNzCriminalManager_IsGameOver::ReturnValue' has a wrong offset!");

// Function RC.RCNzCriminalManager.IsLoadedAsset
// 0x0001 (0x0001 - 0x0000)
struct RCNzCriminalManager_IsLoadedAsset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_IsLoadedAsset) == 0x000001, "Wrong alignment on RCNzCriminalManager_IsLoadedAsset");
static_assert(sizeof(RCNzCriminalManager_IsLoadedAsset) == 0x000001, "Wrong size on RCNzCriminalManager_IsLoadedAsset");
static_assert(offsetof(RCNzCriminalManager_IsLoadedAsset, ReturnValue) == 0x000000, "Member 'RCNzCriminalManager_IsLoadedAsset::ReturnValue' has a wrong offset!");

// Function RC.RCNzCriminalManager.IsNextState
// 0x0001 (0x0001 - 0x0000)
struct RCNzCriminalManager_IsNextState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_IsNextState) == 0x000001, "Wrong alignment on RCNzCriminalManager_IsNextState");
static_assert(sizeof(RCNzCriminalManager_IsNextState) == 0x000001, "Wrong size on RCNzCriminalManager_IsNextState");
static_assert(offsetof(RCNzCriminalManager_IsNextState, ReturnValue) == 0x000000, "Member 'RCNzCriminalManager_IsNextState::ReturnValue' has a wrong offset!");

// Function RC.RCNzCriminalManager.SetLineFromTextId
// 0x0008 (0x0008 - 0x0000)
struct RCNzCriminalManager_SetLineFromTextId final
{
public:
	class FName                                   InLineTextId;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_SetLineFromTextId) == 0x000004, "Wrong alignment on RCNzCriminalManager_SetLineFromTextId");
static_assert(sizeof(RCNzCriminalManager_SetLineFromTextId) == 0x000008, "Wrong size on RCNzCriminalManager_SetLineFromTextId");
static_assert(offsetof(RCNzCriminalManager_SetLineFromTextId, InLineTextId) == 0x000000, "Member 'RCNzCriminalManager_SetLineFromTextId::InLineTextId' has a wrong offset!");

// Function RC.RCNzCriminalManager.SetupBegin
// 0x0010 (0x0010 - 0x0000)
struct RCNzCriminalManager_SetupBegin final
{
public:
	TArray<class AActor*>                         InSuspectCharacterActorList;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_SetupBegin) == 0x000008, "Wrong alignment on RCNzCriminalManager_SetupBegin");
static_assert(sizeof(RCNzCriminalManager_SetupBegin) == 0x000010, "Wrong size on RCNzCriminalManager_SetupBegin");
static_assert(offsetof(RCNzCriminalManager_SetupBegin, InSuspectCharacterActorList) == 0x000000, "Member 'RCNzCriminalManager_SetupBegin::InSuspectCharacterActorList' has a wrong offset!");

// Function RC.RCNzCriminalManager.SetWaitPushKey
// 0x0001 (0x0001 - 0x0000)
struct RCNzCriminalManager_SetWaitPushKey final
{
public:
	bool                                          bState;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_SetWaitPushKey) == 0x000001, "Wrong alignment on RCNzCriminalManager_SetWaitPushKey");
static_assert(sizeof(RCNzCriminalManager_SetWaitPushKey) == 0x000001, "Wrong size on RCNzCriminalManager_SetWaitPushKey");
static_assert(offsetof(RCNzCriminalManager_SetWaitPushKey, bState) == 0x000000, "Member 'RCNzCriminalManager_SetWaitPushKey::bState' has a wrong offset!");

// Function RC.RCNzCriminalManager.GetCameraBlendTime
// 0x0008 (0x0008 - 0x0000)
struct RCNzCriminalManager_GetCameraBlendTime final
{
public:
	int32                                         InCameraIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_GetCameraBlendTime) == 0x000004, "Wrong alignment on RCNzCriminalManager_GetCameraBlendTime");
static_assert(sizeof(RCNzCriminalManager_GetCameraBlendTime) == 0x000008, "Wrong size on RCNzCriminalManager_GetCameraBlendTime");
static_assert(offsetof(RCNzCriminalManager_GetCameraBlendTime, InCameraIndex) == 0x000000, "Member 'RCNzCriminalManager_GetCameraBlendTime::InCameraIndex' has a wrong offset!");
static_assert(offsetof(RCNzCriminalManager_GetCameraBlendTime, ReturnValue) == 0x000004, "Member 'RCNzCriminalManager_GetCameraBlendTime::ReturnValue' has a wrong offset!");

// Function RC.RCNzCriminalManager.GetCameraFocalLength
// 0x0008 (0x0008 - 0x0000)
struct RCNzCriminalManager_GetCameraFocalLength final
{
public:
	int32                                         InCameraIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzCriminalManager_GetCameraFocalLength) == 0x000004, "Wrong alignment on RCNzCriminalManager_GetCameraFocalLength");
static_assert(sizeof(RCNzCriminalManager_GetCameraFocalLength) == 0x000008, "Wrong size on RCNzCriminalManager_GetCameraFocalLength");
static_assert(offsetof(RCNzCriminalManager_GetCameraFocalLength, InCameraIndex) == 0x000000, "Member 'RCNzCriminalManager_GetCameraFocalLength::InCameraIndex' has a wrong offset!");
static_assert(offsetof(RCNzCriminalManager_GetCameraFocalLength, ReturnValue) == 0x000004, "Member 'RCNzCriminalManager_GetCameraFocalLength::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleCameraActorBase.ChangeDetectiveMode
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleCameraActorBase_ChangeDetectiveMode final
{
public:
	EFinaleSceneType                              nextType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleCameraActorBase_ChangeDetectiveMode) == 0x000001, "Wrong alignment on RCNzFinaleCameraActorBase_ChangeDetectiveMode");
static_assert(sizeof(RCNzFinaleCameraActorBase_ChangeDetectiveMode) == 0x000001, "Wrong size on RCNzFinaleCameraActorBase_ChangeDetectiveMode");
static_assert(offsetof(RCNzFinaleCameraActorBase_ChangeDetectiveMode, nextType) == 0x000000, "Member 'RCNzFinaleCameraActorBase_ChangeDetectiveMode::nextType' has a wrong offset!");

// Function RC.RCNzFinaleEditableManagerBase.GetAllPieceInfoList
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleEditableManagerBase_GetAllPieceInfoList final
{
public:
	TArray<struct FRCNzFinaleEditableSpawnPieceData> dataList;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleEditableManagerBase_GetAllPieceInfoList) == 0x000008, "Wrong alignment on RCNzFinaleEditableManagerBase_GetAllPieceInfoList");
static_assert(sizeof(RCNzFinaleEditableManagerBase_GetAllPieceInfoList) == 0x000010, "Wrong size on RCNzFinaleEditableManagerBase_GetAllPieceInfoList");
static_assert(offsetof(RCNzFinaleEditableManagerBase_GetAllPieceInfoList, dataList) == 0x000000, "Member 'RCNzFinaleEditableManagerBase_GetAllPieceInfoList::dataList' has a wrong offset!");

// Function RC.RCNzFinaleEditableManagerBase.GetAllPieceNameList
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleEditableManagerBase_GetAllPieceNameList final
{
public:
	TArray<class FName>                           nameList;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleEditableManagerBase_GetAllPieceNameList) == 0x000008, "Wrong alignment on RCNzFinaleEditableManagerBase_GetAllPieceNameList");
static_assert(sizeof(RCNzFinaleEditableManagerBase_GetAllPieceNameList) == 0x000010, "Wrong size on RCNzFinaleEditableManagerBase_GetAllPieceNameList");
static_assert(offsetof(RCNzFinaleEditableManagerBase_GetAllPieceNameList, nameList) == 0x000000, "Member 'RCNzFinaleEditableManagerBase_GetAllPieceNameList::nameList' has a wrong offset!");

// Function RC.RCNzFinaleEditableManagerBase.GetSpawnPieceInfoList
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleEditableManagerBase_GetSpawnPieceInfoList final
{
public:
	TArray<struct FRCNzFinaleEditableSpawnPieceData> dataList;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleEditableManagerBase_GetSpawnPieceInfoList) == 0x000008, "Wrong alignment on RCNzFinaleEditableManagerBase_GetSpawnPieceInfoList");
static_assert(sizeof(RCNzFinaleEditableManagerBase_GetSpawnPieceInfoList) == 0x000010, "Wrong size on RCNzFinaleEditableManagerBase_GetSpawnPieceInfoList");
static_assert(offsetof(RCNzFinaleEditableManagerBase_GetSpawnPieceInfoList, dataList) == 0x000000, "Member 'RCNzFinaleEditableManagerBase_GetSpawnPieceInfoList::dataList' has a wrong offset!");

// Function RC.RCNzFinaleHeadingLineBase.GetDetectiveBackgroundImagePath
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleHeadingLineBase_GetDetectiveBackgroundImagePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleHeadingLineBase_GetDetectiveBackgroundImagePath) == 0x000008, "Wrong alignment on RCNzFinaleHeadingLineBase_GetDetectiveBackgroundImagePath");
static_assert(sizeof(RCNzFinaleHeadingLineBase_GetDetectiveBackgroundImagePath) == 0x000010, "Wrong size on RCNzFinaleHeadingLineBase_GetDetectiveBackgroundImagePath");
static_assert(offsetof(RCNzFinaleHeadingLineBase_GetDetectiveBackgroundImagePath, ReturnValue) == 0x000000, "Member 'RCNzFinaleHeadingLineBase_GetDetectiveBackgroundImagePath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleHeadingLineBase.GetDetectivepointNum
// 0x0004 (0x0004 - 0x0000)
struct RCNzFinaleHeadingLineBase_GetDetectivepointNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleHeadingLineBase_GetDetectivepointNum) == 0x000004, "Wrong alignment on RCNzFinaleHeadingLineBase_GetDetectivepointNum");
static_assert(sizeof(RCNzFinaleHeadingLineBase_GetDetectivepointNum) == 0x000004, "Wrong size on RCNzFinaleHeadingLineBase_GetDetectivepointNum");
static_assert(offsetof(RCNzFinaleHeadingLineBase_GetDetectivepointNum, ReturnValue) == 0x000000, "Member 'RCNzFinaleHeadingLineBase_GetDetectivepointNum::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleHeadingLineBase.GetDetectivePointState
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleHeadingLineBase_GetDetectivePointState final
{
public:
	TArray<bool>                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleHeadingLineBase_GetDetectivePointState) == 0x000008, "Wrong alignment on RCNzFinaleHeadingLineBase_GetDetectivePointState");
static_assert(sizeof(RCNzFinaleHeadingLineBase_GetDetectivePointState) == 0x000010, "Wrong size on RCNzFinaleHeadingLineBase_GetDetectivePointState");
static_assert(offsetof(RCNzFinaleHeadingLineBase_GetDetectivePointState, ReturnValue) == 0x000000, "Member 'RCNzFinaleHeadingLineBase_GetDetectivePointState::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleHeadingLineBase.InitializeHeadingLine
// 0x0028 (0x0028 - 0x0000)
struct RCNzFinaleHeadingLineBase_InitializeHeadingLine final
{
public:
	class FName                                   SectionID_0;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionTextID;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           pieceIDList_0;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ARCNzFinaleManagerBase*                 FinaleManager_0;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleHeadingLineBase_InitializeHeadingLine) == 0x000008, "Wrong alignment on RCNzFinaleHeadingLineBase_InitializeHeadingLine");
static_assert(sizeof(RCNzFinaleHeadingLineBase_InitializeHeadingLine) == 0x000028, "Wrong size on RCNzFinaleHeadingLineBase_InitializeHeadingLine");
static_assert(offsetof(RCNzFinaleHeadingLineBase_InitializeHeadingLine, SectionID_0) == 0x000000, "Member 'RCNzFinaleHeadingLineBase_InitializeHeadingLine::SectionID_0' has a wrong offset!");
static_assert(offsetof(RCNzFinaleHeadingLineBase_InitializeHeadingLine, SectionTextID) == 0x000008, "Member 'RCNzFinaleHeadingLineBase_InitializeHeadingLine::SectionTextID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleHeadingLineBase_InitializeHeadingLine, pieceIDList_0) == 0x000010, "Member 'RCNzFinaleHeadingLineBase_InitializeHeadingLine::pieceIDList_0' has a wrong offset!");
static_assert(offsetof(RCNzFinaleHeadingLineBase_InitializeHeadingLine, FinaleManager_0) == 0x000020, "Member 'RCNzFinaleHeadingLineBase_InitializeHeadingLine::FinaleManager_0' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.AddDamage
// 0x0004 (0x0004 - 0x0000)
struct RCNzFinaleManagerBase_AddDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_AddDamage) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_AddDamage");
static_assert(sizeof(RCNzFinaleManagerBase_AddDamage) == 0x000004, "Wrong size on RCNzFinaleManagerBase_AddDamage");
static_assert(offsetof(RCNzFinaleManagerBase_AddDamage, Damage) == 0x000000, "Member 'RCNzFinaleManagerBase_AddDamage::Damage' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CalcDetectivePointNum
// 0x0004 (0x0004 - 0x0000)
struct RCNzFinaleManagerBase_CalcDetectivePointNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_CalcDetectivePointNum) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_CalcDetectivePointNum");
static_assert(sizeof(RCNzFinaleManagerBase_CalcDetectivePointNum) == 0x000004, "Wrong size on RCNzFinaleManagerBase_CalcDetectivePointNum");
static_assert(offsetof(RCNzFinaleManagerBase_CalcDetectivePointNum, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_CalcDetectivePointNum::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CalcIsHoverCursor
// 0x003C (0x003C - 0x0000)
struct RCNzFinaleManagerBase_CalcIsHoverCursor final
{
public:
	struct FMargin                                Offsets;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              halfViewportSize;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              cursorPos;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              listParentSize;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         idx;                                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         colScale;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_CalcIsHoverCursor) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_CalcIsHoverCursor");
static_assert(sizeof(RCNzFinaleManagerBase_CalcIsHoverCursor) == 0x00003C, "Wrong size on RCNzFinaleManagerBase_CalcIsHoverCursor");
static_assert(offsetof(RCNzFinaleManagerBase_CalcIsHoverCursor, Offsets) == 0x000000, "Member 'RCNzFinaleManagerBase_CalcIsHoverCursor::Offsets' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcIsHoverCursor, Size) == 0x000010, "Member 'RCNzFinaleManagerBase_CalcIsHoverCursor::Size' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcIsHoverCursor, halfViewportSize) == 0x000018, "Member 'RCNzFinaleManagerBase_CalcIsHoverCursor::halfViewportSize' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcIsHoverCursor, cursorPos) == 0x000020, "Member 'RCNzFinaleManagerBase_CalcIsHoverCursor::cursorPos' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcIsHoverCursor, listParentSize) == 0x000028, "Member 'RCNzFinaleManagerBase_CalcIsHoverCursor::listParentSize' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcIsHoverCursor, idx) == 0x000030, "Member 'RCNzFinaleManagerBase_CalcIsHoverCursor::idx' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcIsHoverCursor, colScale) == 0x000034, "Member 'RCNzFinaleManagerBase_CalcIsHoverCursor::colScale' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcIsHoverCursor, ReturnValue) == 0x000038, "Member 'RCNzFinaleManagerBase_CalcIsHoverCursor::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CalcUpdateCursorPosition
// 0x0018 (0x0018 - 0x0000)
struct RCNzFinaleManagerBase_CalcUpdateCursorPosition final
{
public:
	float                                         deltaSecond;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_CalcUpdateCursorPosition) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_CalcUpdateCursorPosition");
static_assert(sizeof(RCNzFinaleManagerBase_CalcUpdateCursorPosition) == 0x000018, "Wrong size on RCNzFinaleManagerBase_CalcUpdateCursorPosition");
static_assert(offsetof(RCNzFinaleManagerBase_CalcUpdateCursorPosition, deltaSecond) == 0x000000, "Member 'RCNzFinaleManagerBase_CalcUpdateCursorPosition::deltaSecond' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcUpdateCursorPosition, X) == 0x000004, "Member 'RCNzFinaleManagerBase_CalcUpdateCursorPosition::X' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcUpdateCursorPosition, Y) == 0x000008, "Member 'RCNzFinaleManagerBase_CalcUpdateCursorPosition::Y' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcUpdateCursorPosition, MoveSpeed) == 0x00000C, "Member 'RCNzFinaleManagerBase_CalcUpdateCursorPosition::MoveSpeed' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CalcUpdateCursorPosition, ReturnValue) == 0x000010, "Member 'RCNzFinaleManagerBase_CalcUpdateCursorPosition::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.ChangeBackgroundImg
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_ChangeBackgroundImg final
{
public:
	const class UTexture2D*                       Img;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFinaleInteractPointType                      InteractType;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_ChangeBackgroundImg) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_ChangeBackgroundImg");
static_assert(sizeof(RCNzFinaleManagerBase_ChangeBackgroundImg) == 0x000010, "Wrong size on RCNzFinaleManagerBase_ChangeBackgroundImg");
static_assert(offsetof(RCNzFinaleManagerBase_ChangeBackgroundImg, Img) == 0x000000, "Member 'RCNzFinaleManagerBase_ChangeBackgroundImg::Img' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_ChangeBackgroundImg, InteractType) == 0x000008, "Member 'RCNzFinaleManagerBase_ChangeBackgroundImg::InteractType' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckAllDetectiveSectionState
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_CheckAllDetectiveSectionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_CheckAllDetectiveSectionState) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_CheckAllDetectiveSectionState");
static_assert(sizeof(RCNzFinaleManagerBase_CheckAllDetectiveSectionState) == 0x000001, "Wrong size on RCNzFinaleManagerBase_CheckAllDetectiveSectionState");
static_assert(offsetof(RCNzFinaleManagerBase_CheckAllDetectiveSectionState, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckAllDetectiveSectionState::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckCurrentFrameInput
// 0x0002 (0x0002 - 0x0000)
struct RCNzFinaleManagerBase_CheckCurrentFrameInput final
{
public:
	EFinaleAutoPlayInputType                      targetInput;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_CheckCurrentFrameInput) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_CheckCurrentFrameInput");
static_assert(sizeof(RCNzFinaleManagerBase_CheckCurrentFrameInput) == 0x000002, "Wrong size on RCNzFinaleManagerBase_CheckCurrentFrameInput");
static_assert(offsetof(RCNzFinaleManagerBase_CheckCurrentFrameInput, targetInput) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckCurrentFrameInput::targetInput' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CheckCurrentFrameInput, ReturnValue) == 0x000001, "Member 'RCNzFinaleManagerBase_CheckCurrentFrameInput::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckCurrentMode
// 0x0002 (0x0002 - 0x0000)
struct RCNzFinaleManagerBase_CheckCurrentMode final
{
public:
	EFinaleSceneType                              isMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_CheckCurrentMode) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_CheckCurrentMode");
static_assert(sizeof(RCNzFinaleManagerBase_CheckCurrentMode) == 0x000002, "Wrong size on RCNzFinaleManagerBase_CheckCurrentMode");
static_assert(offsetof(RCNzFinaleManagerBase_CheckCurrentMode, isMode) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckCurrentMode::isMode' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CheckCurrentMode, ReturnValue) == 0x000001, "Member 'RCNzFinaleManagerBase_CheckCurrentMode::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckCursorHoverPageMoveIcon
// 0x0002 (0x0002 - 0x0000)
struct RCNzFinaleManagerBase_CheckCursorHoverPageMoveIcon final
{
public:
	bool                                          isAutoMove;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_CheckCursorHoverPageMoveIcon) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_CheckCursorHoverPageMoveIcon");
static_assert(sizeof(RCNzFinaleManagerBase_CheckCursorHoverPageMoveIcon) == 0x000002, "Wrong size on RCNzFinaleManagerBase_CheckCursorHoverPageMoveIcon");
static_assert(offsetof(RCNzFinaleManagerBase_CheckCursorHoverPageMoveIcon, isAutoMove) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckCursorHoverPageMoveIcon::isAutoMove' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CheckCursorHoverPageMoveIcon, ReturnValue) == 0x000001, "Member 'RCNzFinaleManagerBase_CheckCursorHoverPageMoveIcon::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckCursorHoverPieceListOpenIcon
// 0x0002 (0x0002 - 0x0000)
struct RCNzFinaleManagerBase_CheckCursorHoverPieceListOpenIcon final
{
public:
	bool                                          isAutoMove;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_CheckCursorHoverPieceListOpenIcon) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_CheckCursorHoverPieceListOpenIcon");
static_assert(sizeof(RCNzFinaleManagerBase_CheckCursorHoverPieceListOpenIcon) == 0x000002, "Wrong size on RCNzFinaleManagerBase_CheckCursorHoverPieceListOpenIcon");
static_assert(offsetof(RCNzFinaleManagerBase_CheckCursorHoverPieceListOpenIcon, isAutoMove) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckCursorHoverPieceListOpenIcon::isAutoMove' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CheckCursorHoverPieceListOpenIcon, ReturnValue) == 0x000001, "Member 'RCNzFinaleManagerBase_CheckCursorHoverPieceListOpenIcon::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckDetectiveState
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_CheckDetectiveState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_CheckDetectiveState) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_CheckDetectiveState");
static_assert(sizeof(RCNzFinaleManagerBase_CheckDetectiveState) == 0x000001, "Wrong size on RCNzFinaleManagerBase_CheckDetectiveState");
static_assert(offsetof(RCNzFinaleManagerBase_CheckDetectiveState, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckDetectiveState::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckHoverItem
// 0x0004 (0x0004 - 0x0000)
struct RCNzFinaleManagerBase_CheckHoverItem final
{
public:
	float                                         deltaSecond;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_CheckHoverItem) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_CheckHoverItem");
static_assert(sizeof(RCNzFinaleManagerBase_CheckHoverItem) == 0x000004, "Wrong size on RCNzFinaleManagerBase_CheckHoverItem");
static_assert(offsetof(RCNzFinaleManagerBase_CheckHoverItem, deltaSecond) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckHoverItem::deltaSecond' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckIsLockCurrentSelectedPiece
// 0x0060 (0x0060 - 0x0000)
struct RCNzFinaleManagerBase_CheckIsLockCurrentSelectedPiece final
{
public:
	struct FRCNzFinalePieceObjectInfo             pieceInfo;                                         // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_CheckIsLockCurrentSelectedPiece) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_CheckIsLockCurrentSelectedPiece");
static_assert(sizeof(RCNzFinaleManagerBase_CheckIsLockCurrentSelectedPiece) == 0x000060, "Wrong size on RCNzFinaleManagerBase_CheckIsLockCurrentSelectedPiece");
static_assert(offsetof(RCNzFinaleManagerBase_CheckIsLockCurrentSelectedPiece, pieceInfo) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckIsLockCurrentSelectedPiece::pieceInfo' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CheckIsLockCurrentSelectedPiece, ReturnValue) == 0x000058, "Member 'RCNzFinaleManagerBase_CheckIsLockCurrentSelectedPiece::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckSelectPiece
// 0x0068 (0x0068 - 0x0000)
struct RCNzFinaleManagerBase_CheckSelectPiece final
{
public:
	struct FRCNzFinalePieceObjectInfo             Info;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	struct FVector2D                              PiecePosition;                                     // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_CheckSelectPiece) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_CheckSelectPiece");
static_assert(sizeof(RCNzFinaleManagerBase_CheckSelectPiece) == 0x000068, "Wrong size on RCNzFinaleManagerBase_CheckSelectPiece");
static_assert(offsetof(RCNzFinaleManagerBase_CheckSelectPiece, Info) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckSelectPiece::Info' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CheckSelectPiece, PiecePosition) == 0x000058, "Member 'RCNzFinaleManagerBase_CheckSelectPiece::PiecePosition' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CheckSelectPiece, ReturnValue) == 0x000060, "Member 'RCNzFinaleManagerBase_CheckSelectPiece::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.CheckTargetDetectiveSectionState
// 0x000C (0x000C - 0x0000)
struct RCNzFinaleManagerBase_CheckTargetDetectiveSectionState final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_CheckTargetDetectiveSectionState) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_CheckTargetDetectiveSectionState");
static_assert(sizeof(RCNzFinaleManagerBase_CheckTargetDetectiveSectionState) == 0x00000C, "Wrong size on RCNzFinaleManagerBase_CheckTargetDetectiveSectionState");
static_assert(offsetof(RCNzFinaleManagerBase_CheckTargetDetectiveSectionState, ID) == 0x000000, "Member 'RCNzFinaleManagerBase_CheckTargetDetectiveSectionState::ID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_CheckTargetDetectiveSectionState, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_CheckTargetDetectiveSectionState::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.DebugAutoPlay
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_DebugAutoPlay final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isClearMode;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_DebugAutoPlay) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_DebugAutoPlay");
static_assert(sizeof(RCNzFinaleManagerBase_DebugAutoPlay) == 0x000008, "Wrong size on RCNzFinaleManagerBase_DebugAutoPlay");
static_assert(offsetof(RCNzFinaleManagerBase_DebugAutoPlay, DeltaTime) == 0x000000, "Member 'RCNzFinaleManagerBase_DebugAutoPlay::DeltaTime' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_DebugAutoPlay, isClearMode) == 0x000004, "Member 'RCNzFinaleManagerBase_DebugAutoPlay::isClearMode' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.EnterPieceObject
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_EnterPieceObject final
{
public:
	class ARCNzFinalePieceBase*                   piece;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_EnterPieceObject) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_EnterPieceObject");
static_assert(sizeof(RCNzFinaleManagerBase_EnterPieceObject) == 0x000008, "Wrong size on RCNzFinaleManagerBase_EnterPieceObject");
static_assert(offsetof(RCNzFinaleManagerBase_EnterPieceObject, piece) == 0x000000, "Member 'RCNzFinaleManagerBase_EnterPieceObject::piece' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.EnterSectionActor
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_EnterSectionActor final
{
public:
	class ARCNzFinaleHeadingLineBase*             TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_EnterSectionActor) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_EnterSectionActor");
static_assert(sizeof(RCNzFinaleManagerBase_EnterSectionActor) == 0x000008, "Wrong size on RCNzFinaleManagerBase_EnterSectionActor");
static_assert(offsetof(RCNzFinaleManagerBase_EnterSectionActor, TargetActor) == 0x000000, "Member 'RCNzFinaleManagerBase_EnterSectionActor::TargetActor' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.ExitPieceObject
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_ExitPieceObject final
{
public:
	class ARCNzFinalePieceBase*                   piece;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_ExitPieceObject) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_ExitPieceObject");
static_assert(sizeof(RCNzFinaleManagerBase_ExitPieceObject) == 0x000008, "Wrong size on RCNzFinaleManagerBase_ExitPieceObject");
static_assert(offsetof(RCNzFinaleManagerBase_ExitPieceObject, piece) == 0x000000, "Member 'RCNzFinaleManagerBase_ExitPieceObject::piece' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.ExitSectionActor
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_ExitSectionActor final
{
public:
	class ARCNzFinaleHeadingLineBase*             TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_ExitSectionActor) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_ExitSectionActor");
static_assert(sizeof(RCNzFinaleManagerBase_ExitSectionActor) == 0x000008, "Wrong size on RCNzFinaleManagerBase_ExitSectionActor");
static_assert(offsetof(RCNzFinaleManagerBase_ExitSectionActor, TargetActor) == 0x000000, "Member 'RCNzFinaleManagerBase_ExitSectionActor::TargetActor' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.FinishedFinaleInteractIconWidgetAnim
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_FinishedFinaleInteractIconWidgetAnim final
{
public:
	bool                                          isSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_FinishedFinaleInteractIconWidgetAnim) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_FinishedFinaleInteractIconWidgetAnim");
static_assert(sizeof(RCNzFinaleManagerBase_FinishedFinaleInteractIconWidgetAnim) == 0x000001, "Wrong size on RCNzFinaleManagerBase_FinishedFinaleInteractIconWidgetAnim");
static_assert(offsetof(RCNzFinaleManagerBase_FinishedFinaleInteractIconWidgetAnim, isSuccess) == 0x000000, "Member 'RCNzFinaleManagerBase_FinishedFinaleInteractIconWidgetAnim::isSuccess' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetBackgroundImgPath
// 0x0018 (0x0018 - 0x0000)
struct RCNzFinaleManagerBase_GetBackgroundImgPath final
{
public:
	class FName                                   BackgroundImgID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetBackgroundImgPath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetBackgroundImgPath");
static_assert(sizeof(RCNzFinaleManagerBase_GetBackgroundImgPath) == 0x000018, "Wrong size on RCNzFinaleManagerBase_GetBackgroundImgPath");
static_assert(offsetof(RCNzFinaleManagerBase_GetBackgroundImgPath, BackgroundImgID) == 0x000000, "Member 'RCNzFinaleManagerBase_GetBackgroundImgPath::BackgroundImgID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetBackgroundImgPath, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_GetBackgroundImgPath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCurrentCursorMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCNzFinaleManagerBase_GetCurrentCursorMoveSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCurrentCursorMoveSpeed) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetCurrentCursorMoveSpeed");
static_assert(sizeof(RCNzFinaleManagerBase_GetCurrentCursorMoveSpeed) == 0x000004, "Wrong size on RCNzFinaleManagerBase_GetCurrentCursorMoveSpeed");
static_assert(offsetof(RCNzFinaleManagerBase_GetCurrentCursorMoveSpeed, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCurrentCursorMoveSpeed::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCurrentDPI
// 0x0004 (0x0004 - 0x0000)
struct RCNzFinaleManagerBase_GetCurrentDPI final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCurrentDPI) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetCurrentDPI");
static_assert(sizeof(RCNzFinaleManagerBase_GetCurrentDPI) == 0x000004, "Wrong size on RCNzFinaleManagerBase_GetCurrentDPI");
static_assert(offsetof(RCNzFinaleManagerBase_GetCurrentDPI, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCurrentDPI::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCurrentHoverInteratPointType
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_GetCurrentHoverInteratPointType final
{
public:
	EFinaleInteractPointType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCurrentHoverInteratPointType) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_GetCurrentHoverInteratPointType");
static_assert(sizeof(RCNzFinaleManagerBase_GetCurrentHoverInteratPointType) == 0x000001, "Wrong size on RCNzFinaleManagerBase_GetCurrentHoverInteratPointType");
static_assert(offsetof(RCNzFinaleManagerBase_GetCurrentHoverInteratPointType, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCurrentHoverInteratPointType::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCurrentHoverPiecePosition
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_GetCurrentHoverPiecePosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCurrentHoverPiecePosition) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetCurrentHoverPiecePosition");
static_assert(sizeof(RCNzFinaleManagerBase_GetCurrentHoverPiecePosition) == 0x000008, "Wrong size on RCNzFinaleManagerBase_GetCurrentHoverPiecePosition");
static_assert(offsetof(RCNzFinaleManagerBase_GetCurrentHoverPiecePosition, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCurrentHoverPiecePosition::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCurrentSceneID
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_GetCurrentSceneID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCurrentSceneID) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetCurrentSceneID");
static_assert(sizeof(RCNzFinaleManagerBase_GetCurrentSceneID) == 0x000008, "Wrong size on RCNzFinaleManagerBase_GetCurrentSceneID");
static_assert(offsetof(RCNzFinaleManagerBase_GetCurrentSceneID, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCurrentSceneID::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCurrentSection
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_GetCurrentSection final
{
public:
	class ARCNzFinaleHeadingLineBase*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCurrentSection) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetCurrentSection");
static_assert(sizeof(RCNzFinaleManagerBase_GetCurrentSection) == 0x000008, "Wrong size on RCNzFinaleManagerBase_GetCurrentSection");
static_assert(offsetof(RCNzFinaleManagerBase_GetCurrentSection, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCurrentSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCurrentSectionDetectivePointState
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetCurrentSectionDetectivePointState final
{
public:
	TArray<bool>                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCurrentSectionDetectivePointState) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetCurrentSectionDetectivePointState");
static_assert(sizeof(RCNzFinaleManagerBase_GetCurrentSectionDetectivePointState) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetCurrentSectionDetectivePointState");
static_assert(offsetof(RCNzFinaleManagerBase_GetCurrentSectionDetectivePointState, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCurrentSectionDetectivePointState::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCurrentSectionID
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_GetCurrentSectionID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCurrentSectionID) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetCurrentSectionID");
static_assert(sizeof(RCNzFinaleManagerBase_GetCurrentSectionID) == 0x000008, "Wrong size on RCNzFinaleManagerBase_GetCurrentSectionID");
static_assert(offsetof(RCNzFinaleManagerBase_GetCurrentSectionID, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCurrentSectionID::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCursorPosViewPortSize
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_GetCursorPosViewPortSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCursorPosViewPortSize) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetCursorPosViewPortSize");
static_assert(sizeof(RCNzFinaleManagerBase_GetCursorPosViewPortSize) == 0x000008, "Wrong size on RCNzFinaleManagerBase_GetCursorPosViewPortSize");
static_assert(offsetof(RCNzFinaleManagerBase_GetCursorPosViewPortSize, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCursorPosViewPortSize::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetCursorScreenPosition
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_GetCursorScreenPosition final
{
public:
	float                                         PositionX;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionY;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetCursorScreenPosition) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetCursorScreenPosition");
static_assert(sizeof(RCNzFinaleManagerBase_GetCursorScreenPosition) == 0x000008, "Wrong size on RCNzFinaleManagerBase_GetCursorScreenPosition");
static_assert(offsetof(RCNzFinaleManagerBase_GetCursorScreenPosition, PositionX) == 0x000000, "Member 'RCNzFinaleManagerBase_GetCursorScreenPosition::PositionX' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetCursorScreenPosition, PositionY) == 0x000004, "Member 'RCNzFinaleManagerBase_GetCursorScreenPosition::PositionY' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetDataTableRootPath
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetDataTableRootPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetDataTableRootPath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetDataTableRootPath");
static_assert(sizeof(RCNzFinaleManagerBase_GetDataTableRootPath) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetDataTableRootPath");
static_assert(offsetof(RCNzFinaleManagerBase_GetDataTableRootPath, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetDataTableRootPath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetDetectiveBackgroundImageList
// 0x0018 (0x0018 - 0x0000)
struct RCNzFinaleManagerBase_GetDetectiveBackgroundImageList final
{
public:
	class FString                                 targetSectionID;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetDetectiveBackgroundImageList) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetDetectiveBackgroundImageList");
static_assert(sizeof(RCNzFinaleManagerBase_GetDetectiveBackgroundImageList) == 0x000018, "Wrong size on RCNzFinaleManagerBase_GetDetectiveBackgroundImageList");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveBackgroundImageList, targetSectionID) == 0x000000, "Member 'RCNzFinaleManagerBase_GetDetectiveBackgroundImageList::targetSectionID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveBackgroundImageList, ReturnValue) == 0x000010, "Member 'RCNzFinaleManagerBase_GetDetectiveBackgroundImageList::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetDetectiveBackgroundImgScale
// 0x0018 (0x0018 - 0x0000)
struct RCNzFinaleManagerBase_GetDetectiveBackgroundImgScale final
{
public:
	class FString                                 targetSectionID;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetDetectiveBackgroundImgScale) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetDetectiveBackgroundImgScale");
static_assert(sizeof(RCNzFinaleManagerBase_GetDetectiveBackgroundImgScale) == 0x000018, "Wrong size on RCNzFinaleManagerBase_GetDetectiveBackgroundImgScale");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveBackgroundImgScale, targetSectionID) == 0x000000, "Member 'RCNzFinaleManagerBase_GetDetectiveBackgroundImgScale::targetSectionID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveBackgroundImgScale, ReturnValue) == 0x000010, "Member 'RCNzFinaleManagerBase_GetDetectiveBackgroundImgScale::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetDetectiveBackgroundWidget
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetDetectiveBackgroundWidget final
{
public:
	class FName                                   targetSectionID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCNzUiFinaleDetectiveSceneWidget*      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetDetectiveBackgroundWidget) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetDetectiveBackgroundWidget");
static_assert(sizeof(RCNzFinaleManagerBase_GetDetectiveBackgroundWidget) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetDetectiveBackgroundWidget");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveBackgroundWidget, targetSectionID) == 0x000000, "Member 'RCNzFinaleManagerBase_GetDetectiveBackgroundWidget::targetSectionID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveBackgroundWidget, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_GetDetectiveBackgroundWidget::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetDetectiveImageRootPath
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetDetectiveImageRootPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetDetectiveImageRootPath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetDetectiveImageRootPath");
static_assert(sizeof(RCNzFinaleManagerBase_GetDetectiveImageRootPath) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetDetectiveImageRootPath");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveImageRootPath, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetDetectiveImageRootPath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetDetectiveSceneWidgetClass
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetDetectiveSceneWidgetClass final
{
public:
	class FName                                   targetSectionID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetDetectiveSceneWidgetClass) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetDetectiveSceneWidgetClass");
static_assert(sizeof(RCNzFinaleManagerBase_GetDetectiveSceneWidgetClass) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetDetectiveSceneWidgetClass");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveSceneWidgetClass, targetSectionID) == 0x000000, "Member 'RCNzFinaleManagerBase_GetDetectiveSceneWidgetClass::targetSectionID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveSceneWidgetClass, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_GetDetectiveSceneWidgetClass::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetDetectiveSceneWidgetPath
// 0x0018 (0x0018 - 0x0000)
struct RCNzFinaleManagerBase_GetDetectiveSceneWidgetPath final
{
public:
	class FName                                   targetSectionID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetDetectiveSceneWidgetPath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetDetectiveSceneWidgetPath");
static_assert(sizeof(RCNzFinaleManagerBase_GetDetectiveSceneWidgetPath) == 0x000018, "Wrong size on RCNzFinaleManagerBase_GetDetectiveSceneWidgetPath");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveSceneWidgetPath, targetSectionID) == 0x000000, "Member 'RCNzFinaleManagerBase_GetDetectiveSceneWidgetPath::targetSectionID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetDetectiveSceneWidgetPath, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_GetDetectiveSceneWidgetPath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetFinaleDataTablePath
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetFinaleDataTablePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetFinaleDataTablePath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetFinaleDataTablePath");
static_assert(sizeof(RCNzFinaleManagerBase_GetFinaleDataTablePath) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetFinaleDataTablePath");
static_assert(offsetof(RCNzFinaleManagerBase_GetFinaleDataTablePath, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetFinaleDataTablePath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetFinaleDetectiveBackgroundImageDataTablePath
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetFinaleDetectiveBackgroundImageDataTablePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetFinaleDetectiveBackgroundImageDataTablePath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetFinaleDetectiveBackgroundImageDataTablePath");
static_assert(sizeof(RCNzFinaleManagerBase_GetFinaleDetectiveBackgroundImageDataTablePath) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetFinaleDetectiveBackgroundImageDataTablePath");
static_assert(offsetof(RCNzFinaleManagerBase_GetFinaleDetectiveBackgroundImageDataTablePath, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetFinaleDetectiveBackgroundImageDataTablePath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetFinalePieceDataTablePath
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetFinalePieceDataTablePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetFinalePieceDataTablePath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetFinalePieceDataTablePath");
static_assert(sizeof(RCNzFinaleManagerBase_GetFinalePieceDataTablePath) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetFinalePieceDataTablePath");
static_assert(offsetof(RCNzFinaleManagerBase_GetFinalePieceDataTablePath, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetFinalePieceDataTablePath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetFinaleSceneDataTablePath
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetFinaleSceneDataTablePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetFinaleSceneDataTablePath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetFinaleSceneDataTablePath");
static_assert(sizeof(RCNzFinaleManagerBase_GetFinaleSceneDataTablePath) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetFinaleSceneDataTablePath");
static_assert(offsetof(RCNzFinaleManagerBase_GetFinaleSceneDataTablePath, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetFinaleSceneDataTablePath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetFinaleSectionDataTablePath
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_GetFinaleSectionDataTablePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetFinaleSectionDataTablePath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetFinaleSectionDataTablePath");
static_assert(sizeof(RCNzFinaleManagerBase_GetFinaleSectionDataTablePath) == 0x000010, "Wrong size on RCNzFinaleManagerBase_GetFinaleSectionDataTablePath");
static_assert(offsetof(RCNzFinaleManagerBase_GetFinaleSectionDataTablePath, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetFinaleSectionDataTablePath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetIsUseDetectiveSceneScaleParam
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_GetIsUseDetectiveSceneScaleParam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetIsUseDetectiveSceneScaleParam) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_GetIsUseDetectiveSceneScaleParam");
static_assert(sizeof(RCNzFinaleManagerBase_GetIsUseDetectiveSceneScaleParam) == 0x000001, "Wrong size on RCNzFinaleManagerBase_GetIsUseDetectiveSceneScaleParam");
static_assert(offsetof(RCNzFinaleManagerBase_GetIsUseDetectiveSceneScaleParam, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetIsUseDetectiveSceneScaleParam::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetPieceImageRootPath
// 0x0018 (0x0018 - 0x0000)
struct RCNzFinaleManagerBase_GetPieceImageRootPath final
{
public:
	bool                                          isSmall;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetPieceImageRootPath) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetPieceImageRootPath");
static_assert(sizeof(RCNzFinaleManagerBase_GetPieceImageRootPath) == 0x000018, "Wrong size on RCNzFinaleManagerBase_GetPieceImageRootPath");
static_assert(offsetof(RCNzFinaleManagerBase_GetPieceImageRootPath, isSmall) == 0x000000, "Member 'RCNzFinaleManagerBase_GetPieceImageRootPath::isSmall' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetPieceImageRootPath, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_GetPieceImageRootPath::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetPieceSuccessTargetPage
// 0x0070 (0x0070 - 0x0000)
struct RCNzFinaleManagerBase_GetPieceSuccessTargetPage final
{
public:
	struct FRCNzFinalePieceObjectInfo             pieceInfo;                                         // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         currentIdx;                                        // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         idx;                                               // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pageMoveDir;                                       // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x006C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_GetPieceSuccessTargetPage) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetPieceSuccessTargetPage");
static_assert(sizeof(RCNzFinaleManagerBase_GetPieceSuccessTargetPage) == 0x000070, "Wrong size on RCNzFinaleManagerBase_GetPieceSuccessTargetPage");
static_assert(offsetof(RCNzFinaleManagerBase_GetPieceSuccessTargetPage, pieceInfo) == 0x000000, "Member 'RCNzFinaleManagerBase_GetPieceSuccessTargetPage::pieceInfo' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetPieceSuccessTargetPage, currentIdx) == 0x000058, "Member 'RCNzFinaleManagerBase_GetPieceSuccessTargetPage::currentIdx' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetPieceSuccessTargetPage, idx) == 0x00005C, "Member 'RCNzFinaleManagerBase_GetPieceSuccessTargetPage::idx' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetPieceSuccessTargetPage, SectionName) == 0x000060, "Member 'RCNzFinaleManagerBase_GetPieceSuccessTargetPage::SectionName' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetPieceSuccessTargetPage, pageMoveDir) == 0x000068, "Member 'RCNzFinaleManagerBase_GetPieceSuccessTargetPage::pageMoveDir' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetPieceSuccessTargetPage, ReturnValue) == 0x00006C, "Member 'RCNzFinaleManagerBase_GetPieceSuccessTargetPage::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetSectionActorPosition
// 0x000C (0x000C - 0x0000)
struct RCNzFinaleManagerBase_GetSectionActorPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetSectionActorPosition) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetSectionActorPosition");
static_assert(sizeof(RCNzFinaleManagerBase_GetSectionActorPosition) == 0x00000C, "Wrong size on RCNzFinaleManagerBase_GetSectionActorPosition");
static_assert(offsetof(RCNzFinaleManagerBase_GetSectionActorPosition, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_GetSectionActorPosition::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetTargetIdxPageText
// 0x0020 (0x0020 - 0x0000)
struct RCNzFinaleManagerBase_GetTargetIdxPageText final
{
public:
	int32                                         targetIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 titleTxt;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sectionTxt;                                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_GetTargetIdxPageText) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetTargetIdxPageText");
static_assert(sizeof(RCNzFinaleManagerBase_GetTargetIdxPageText) == 0x000020, "Wrong size on RCNzFinaleManagerBase_GetTargetIdxPageText");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetIdxPageText, targetIdx) == 0x000000, "Member 'RCNzFinaleManagerBase_GetTargetIdxPageText::targetIdx' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetIdxPageText, titleTxt) == 0x000008, "Member 'RCNzFinaleManagerBase_GetTargetIdxPageText::titleTxt' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetIdxPageText, sectionTxt) == 0x000018, "Member 'RCNzFinaleManagerBase_GetTargetIdxPageText::sectionTxt' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetTargetIndexSectionID
// 0x000C (0x000C - 0x0000)
struct RCNzFinaleManagerBase_GetTargetIndexSectionID final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetTargetIndexSectionID) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetTargetIndexSectionID");
static_assert(sizeof(RCNzFinaleManagerBase_GetTargetIndexSectionID) == 0x00000C, "Wrong size on RCNzFinaleManagerBase_GetTargetIndexSectionID");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetIndexSectionID, idx) == 0x000000, "Member 'RCNzFinaleManagerBase_GetTargetIndexSectionID::idx' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetIndexSectionID, ReturnValue) == 0x000004, "Member 'RCNzFinaleManagerBase_GetTargetIndexSectionID::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetTargetPiecePosition
// 0x0014 (0x0014 - 0x0000)
struct RCNzFinaleManagerBase_GetTargetPiecePosition final
{
public:
	class FName                                   TargetID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetTargetPiecePosition) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_GetTargetPiecePosition");
static_assert(sizeof(RCNzFinaleManagerBase_GetTargetPiecePosition) == 0x000014, "Wrong size on RCNzFinaleManagerBase_GetTargetPiecePosition");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetPiecePosition, TargetID) == 0x000000, "Member 'RCNzFinaleManagerBase_GetTargetPiecePosition::TargetID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetPiecePosition, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_GetTargetPiecePosition::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetTargetPieceSpawnPosition
// 0x0050 (0x0050 - 0x0000)
struct RCNzFinaleManagerBase_GetTargetPieceSpawnPosition final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCParamNzFinaleSectionTableRow        Data;                                              // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetTargetPieceSpawnPosition) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetTargetPieceSpawnPosition");
static_assert(sizeof(RCNzFinaleManagerBase_GetTargetPieceSpawnPosition) == 0x000050, "Wrong size on RCNzFinaleManagerBase_GetTargetPieceSpawnPosition");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetPieceSpawnPosition, idx) == 0x000000, "Member 'RCNzFinaleManagerBase_GetTargetPieceSpawnPosition::idx' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetPieceSpawnPosition, Data) == 0x000008, "Member 'RCNzFinaleManagerBase_GetTargetPieceSpawnPosition::Data' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetPieceSpawnPosition, ReturnValue) == 0x000048, "Member 'RCNzFinaleManagerBase_GetTargetPieceSpawnPosition::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetTargetSectionDetectivePointState
// 0x0018 (0x0018 - 0x0000)
struct RCNzFinaleManagerBase_GetTargetSectionDetectivePointState final
{
public:
	class FName                                   targetSectionID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetTargetSectionDetectivePointState) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetTargetSectionDetectivePointState");
static_assert(sizeof(RCNzFinaleManagerBase_GetTargetSectionDetectivePointState) == 0x000018, "Wrong size on RCNzFinaleManagerBase_GetTargetSectionDetectivePointState");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetSectionDetectivePointState, targetSectionID) == 0x000000, "Member 'RCNzFinaleManagerBase_GetTargetSectionDetectivePointState::targetSectionID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetSectionDetectivePointState, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_GetTargetSectionDetectivePointState::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.GetTargetSectionPieceList
// 0x0018 (0x0018 - 0x0000)
struct RCNzFinaleManagerBase_GetTargetSectionPieceList final
{
public:
	class FName                                   targetSectionID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCNzFinaleGamePieceData>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_GetTargetSectionPieceList) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_GetTargetSectionPieceList");
static_assert(sizeof(RCNzFinaleManagerBase_GetTargetSectionPieceList) == 0x000018, "Wrong size on RCNzFinaleManagerBase_GetTargetSectionPieceList");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetSectionPieceList, targetSectionID) == 0x000000, "Member 'RCNzFinaleManagerBase_GetTargetSectionPieceList::targetSectionID' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_GetTargetSectionPieceList, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_GetTargetSectionPieceList::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.IsCheckHoverCursorIsPick
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_IsCheckHoverCursorIsPick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_IsCheckHoverCursorIsPick) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_IsCheckHoverCursorIsPick");
static_assert(sizeof(RCNzFinaleManagerBase_IsCheckHoverCursorIsPick) == 0x000001, "Wrong size on RCNzFinaleManagerBase_IsCheckHoverCursorIsPick");
static_assert(offsetof(RCNzFinaleManagerBase_IsCheckHoverCursorIsPick, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_IsCheckHoverCursorIsPick::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.IsCurrentSection
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_IsCurrentSection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_IsCurrentSection) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_IsCurrentSection");
static_assert(sizeof(RCNzFinaleManagerBase_IsCurrentSection) == 0x000001, "Wrong size on RCNzFinaleManagerBase_IsCurrentSection");
static_assert(offsetof(RCNzFinaleManagerBase_IsCurrentSection, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_IsCurrentSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.IsExistNextSection
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_IsExistNextSection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_IsExistNextSection) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_IsExistNextSection");
static_assert(sizeof(RCNzFinaleManagerBase_IsExistNextSection) == 0x000001, "Wrong size on RCNzFinaleManagerBase_IsExistNextSection");
static_assert(offsetof(RCNzFinaleManagerBase_IsExistNextSection, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_IsExistNextSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.IsExistPrevSection
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_IsExistPrevSection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_IsExistPrevSection) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_IsExistPrevSection");
static_assert(sizeof(RCNzFinaleManagerBase_IsExistPrevSection) == 0x000001, "Wrong size on RCNzFinaleManagerBase_IsExistPrevSection");
static_assert(offsetof(RCNzFinaleManagerBase_IsExistPrevSection, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_IsExistPrevSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.IsExistTargetSection
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_IsExistTargetSection final
{
public:
	int32                                         TargetSceneIdx;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_IsExistTargetSection) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_IsExistTargetSection");
static_assert(sizeof(RCNzFinaleManagerBase_IsExistTargetSection) == 0x000008, "Wrong size on RCNzFinaleManagerBase_IsExistTargetSection");
static_assert(offsetof(RCNzFinaleManagerBase_IsExistTargetSection, TargetSceneIdx) == 0x000000, "Member 'RCNzFinaleManagerBase_IsExistTargetSection::TargetSceneIdx' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_IsExistTargetSection, ReturnValue) == 0x000004, "Member 'RCNzFinaleManagerBase_IsExistTargetSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.IsHoverCusor
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_IsHoverCusor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_IsHoverCusor) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_IsHoverCusor");
static_assert(sizeof(RCNzFinaleManagerBase_IsHoverCusor) == 0x000001, "Wrong size on RCNzFinaleManagerBase_IsHoverCusor");
static_assert(offsetof(RCNzFinaleManagerBase_IsHoverCusor, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_IsHoverCusor::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.LoadTexture
// 0x0018 (0x0018 - 0x0000)
struct RCNzFinaleManagerBase_LoadTexture final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_LoadTexture) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_LoadTexture");
static_assert(sizeof(RCNzFinaleManagerBase_LoadTexture) == 0x000018, "Wrong size on RCNzFinaleManagerBase_LoadTexture");
static_assert(offsetof(RCNzFinaleManagerBase_LoadTexture, Path) == 0x000000, "Member 'RCNzFinaleManagerBase_LoadTexture::Path' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_LoadTexture, ReturnValue) == 0x000010, "Member 'RCNzFinaleManagerBase_LoadTexture::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.MoveSection
// 0x0004 (0x0004 - 0x0000)
struct RCNzFinaleManagerBase_MoveSection final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_MoveSection) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_MoveSection");
static_assert(sizeof(RCNzFinaleManagerBase_MoveSection) == 0x000004, "Wrong size on RCNzFinaleManagerBase_MoveSection");
static_assert(offsetof(RCNzFinaleManagerBase_MoveSection, idx) == 0x000000, "Member 'RCNzFinaleManagerBase_MoveSection::idx' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.MoveSectionProcess
// 0x0004 (0x0004 - 0x0000)
struct RCNzFinaleManagerBase_MoveSectionProcess final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_MoveSectionProcess) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_MoveSectionProcess");
static_assert(sizeof(RCNzFinaleManagerBase_MoveSectionProcess) == 0x000004, "Wrong size on RCNzFinaleManagerBase_MoveSectionProcess");
static_assert(offsetof(RCNzFinaleManagerBase_MoveSectionProcess, idx) == 0x000000, "Member 'RCNzFinaleManagerBase_MoveSectionProcess::idx' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.NextSection
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_NextSection final
{
public:
	class ARCNzFinaleHeadingLineBase*             Section;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_NextSection) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_NextSection");
static_assert(sizeof(RCNzFinaleManagerBase_NextSection) == 0x000010, "Wrong size on RCNzFinaleManagerBase_NextSection");
static_assert(offsetof(RCNzFinaleManagerBase_NextSection, Section) == 0x000000, "Member 'RCNzFinaleManagerBase_NextSection::Section' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_NextSection, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_NextSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.OnPageGuideClick
// 0x0078 (0x0078 - 0x0000)
struct RCNzFinaleManagerBase_OnPageGuideClick final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          InMouseEvent;                                      // 0x0008(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_OnPageGuideClick) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_OnPageGuideClick");
static_assert(sizeof(RCNzFinaleManagerBase_OnPageGuideClick) == 0x000078, "Wrong size on RCNzFinaleManagerBase_OnPageGuideClick");
static_assert(offsetof(RCNzFinaleManagerBase_OnPageGuideClick, PageIndex) == 0x000000, "Member 'RCNzFinaleManagerBase_OnPageGuideClick::PageIndex' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_OnPageGuideClick, InMouseEvent) == 0x000008, "Member 'RCNzFinaleManagerBase_OnPageGuideClick::InMouseEvent' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.PlayFinaleSE
// 0x0002 (0x0002 - 0x0000)
struct RCNzFinaleManagerBase_PlayFinaleSE final
{
public:
	EFinaleSEType                                 targetSE;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_PlayFinaleSE) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_PlayFinaleSE");
static_assert(sizeof(RCNzFinaleManagerBase_PlayFinaleSE) == 0x000002, "Wrong size on RCNzFinaleManagerBase_PlayFinaleSE");
static_assert(offsetof(RCNzFinaleManagerBase_PlayFinaleSE, targetSE) == 0x000000, "Member 'RCNzFinaleManagerBase_PlayFinaleSE::targetSE' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_PlayFinaleSE, IsLoop) == 0x000001, "Member 'RCNzFinaleManagerBase_PlayFinaleSE::IsLoop' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.PrevSection
// 0x0010 (0x0010 - 0x0000)
struct RCNzFinaleManagerBase_PrevSection final
{
public:
	class ARCNzFinaleHeadingLineBase*             Section;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_PrevSection) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_PrevSection");
static_assert(sizeof(RCNzFinaleManagerBase_PrevSection) == 0x000010, "Wrong size on RCNzFinaleManagerBase_PrevSection");
static_assert(offsetof(RCNzFinaleManagerBase_PrevSection, Section) == 0x000000, "Member 'RCNzFinaleManagerBase_PrevSection::Section' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_PrevSection, ReturnValue) == 0x000008, "Member 'RCNzFinaleManagerBase_PrevSection::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.SetCursorPosition
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_SetCursorPosition final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_SetCursorPosition) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_SetCursorPosition");
static_assert(sizeof(RCNzFinaleManagerBase_SetCursorPosition) == 0x000008, "Wrong size on RCNzFinaleManagerBase_SetCursorPosition");
static_assert(offsetof(RCNzFinaleManagerBase_SetCursorPosition, Pos) == 0x000000, "Member 'RCNzFinaleManagerBase_SetCursorPosition::Pos' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.SetCursorVisible
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_SetCursorVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_SetCursorVisible) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_SetCursorVisible");
static_assert(sizeof(RCNzFinaleManagerBase_SetCursorVisible) == 0x000001, "Wrong size on RCNzFinaleManagerBase_SetCursorVisible");
static_assert(offsetof(RCNzFinaleManagerBase_SetCursorVisible, IsVisible) == 0x000000, "Member 'RCNzFinaleManagerBase_SetCursorVisible::IsVisible' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.SetIsMouseCursor
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_SetIsMouseCursor final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_SetIsMouseCursor) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_SetIsMouseCursor");
static_assert(sizeof(RCNzFinaleManagerBase_SetIsMouseCursor) == 0x000001, "Wrong size on RCNzFinaleManagerBase_SetIsMouseCursor");
static_assert(offsetof(RCNzFinaleManagerBase_SetIsMouseCursor, Val) == 0x000000, "Member 'RCNzFinaleManagerBase_SetIsMouseCursor::Val' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.SetIsMouseCursorState
// 0x0002 (0x0002 - 0x0000)
struct RCNzFinaleManagerBase_SetIsMouseCursorState final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isStatic;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_SetIsMouseCursorState) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_SetIsMouseCursorState");
static_assert(sizeof(RCNzFinaleManagerBase_SetIsMouseCursorState) == 0x000002, "Wrong size on RCNzFinaleManagerBase_SetIsMouseCursorState");
static_assert(offsetof(RCNzFinaleManagerBase_SetIsMouseCursorState, IsVisible) == 0x000000, "Member 'RCNzFinaleManagerBase_SetIsMouseCursorState::IsVisible' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_SetIsMouseCursorState, isStatic) == 0x000001, "Member 'RCNzFinaleManagerBase_SetIsMouseCursorState::isStatic' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.SetSelectedPieceIdx
// 0x0004 (0x0004 - 0x0000)
struct RCNzFinaleManagerBase_SetSelectedPieceIdx final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_SetSelectedPieceIdx) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_SetSelectedPieceIdx");
static_assert(sizeof(RCNzFinaleManagerBase_SetSelectedPieceIdx) == 0x000004, "Wrong size on RCNzFinaleManagerBase_SetSelectedPieceIdx");
static_assert(offsetof(RCNzFinaleManagerBase_SetSelectedPieceIdx, idx) == 0x000000, "Member 'RCNzFinaleManagerBase_SetSelectedPieceIdx::idx' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.ShowDirectingUI
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_ShowDirectingUI final
{
public:
	bool                                          isSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_ShowDirectingUI) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_ShowDirectingUI");
static_assert(sizeof(RCNzFinaleManagerBase_ShowDirectingUI) == 0x000001, "Wrong size on RCNzFinaleManagerBase_ShowDirectingUI");
static_assert(offsetof(RCNzFinaleManagerBase_ShowDirectingUI, isSuccess) == 0x000000, "Member 'RCNzFinaleManagerBase_ShowDirectingUI::isSuccess' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.ShowPieceLayout
// 0x0001 (0x0001 - 0x0000)
struct RCNzFinaleManagerBase_ShowPieceLayout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_ShowPieceLayout) == 0x000001, "Wrong alignment on RCNzFinaleManagerBase_ShowPieceLayout");
static_assert(sizeof(RCNzFinaleManagerBase_ShowPieceLayout) == 0x000001, "Wrong size on RCNzFinaleManagerBase_ShowPieceLayout");
static_assert(offsetof(RCNzFinaleManagerBase_ShowPieceLayout, ReturnValue) == 0x000000, "Member 'RCNzFinaleManagerBase_ShowPieceLayout::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.UpdateCursor
// 0x000C (0x000C - 0x0000)
struct RCNzFinaleManagerBase_UpdateCursor final
{
public:
	float                                         deltaSecond;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_UpdateCursor) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_UpdateCursor");
static_assert(sizeof(RCNzFinaleManagerBase_UpdateCursor) == 0x00000C, "Wrong size on RCNzFinaleManagerBase_UpdateCursor");
static_assert(offsetof(RCNzFinaleManagerBase_UpdateCursor, deltaSecond) == 0x000000, "Member 'RCNzFinaleManagerBase_UpdateCursor::deltaSecond' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_UpdateCursor, X) == 0x000004, "Member 'RCNzFinaleManagerBase_UpdateCursor::X' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_UpdateCursor, Y) == 0x000008, "Member 'RCNzFinaleManagerBase_UpdateCursor::Y' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.UpdateLimitTime
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinaleManagerBase_UpdateLimitTime final
{
public:
	float                                         deltaSecond;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinaleManagerBase_UpdateLimitTime) == 0x000004, "Wrong alignment on RCNzFinaleManagerBase_UpdateLimitTime");
static_assert(sizeof(RCNzFinaleManagerBase_UpdateLimitTime) == 0x000008, "Wrong size on RCNzFinaleManagerBase_UpdateLimitTime");
static_assert(offsetof(RCNzFinaleManagerBase_UpdateLimitTime, deltaSecond) == 0x000000, "Member 'RCNzFinaleManagerBase_UpdateLimitTime::deltaSecond' has a wrong offset!");
static_assert(offsetof(RCNzFinaleManagerBase_UpdateLimitTime, ReturnValue) == 0x000004, "Member 'RCNzFinaleManagerBase_UpdateLimitTime::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinaleManagerBase.UpdatePieceDataList
// 0x0058 (0x0058 - 0x0000)
struct RCNzFinaleManagerBase_UpdatePieceDataList final
{
public:
	struct FRCNzFinalePieceObjectInfo             Info;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinaleManagerBase_UpdatePieceDataList) == 0x000008, "Wrong alignment on RCNzFinaleManagerBase_UpdatePieceDataList");
static_assert(sizeof(RCNzFinaleManagerBase_UpdatePieceDataList) == 0x000058, "Wrong size on RCNzFinaleManagerBase_UpdatePieceDataList");
static_assert(offsetof(RCNzFinaleManagerBase_UpdatePieceDataList, Info) == 0x000000, "Member 'RCNzFinaleManagerBase_UpdatePieceDataList::Info' has a wrong offset!");

// Function RC.RCNzFinalePieceBase.CheckPieceID
// 0x000C (0x000C - 0x0000)
struct RCNzFinalePieceBase_CheckPieceID final
{
public:
	class FName                                   TargetID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinalePieceBase_CheckPieceID) == 0x000004, "Wrong alignment on RCNzFinalePieceBase_CheckPieceID");
static_assert(sizeof(RCNzFinalePieceBase_CheckPieceID) == 0x00000C, "Wrong size on RCNzFinalePieceBase_CheckPieceID");
static_assert(offsetof(RCNzFinalePieceBase_CheckPieceID, TargetID) == 0x000000, "Member 'RCNzFinalePieceBase_CheckPieceID::TargetID' has a wrong offset!");
static_assert(offsetof(RCNzFinalePieceBase_CheckPieceID, ReturnValue) == 0x000008, "Member 'RCNzFinalePieceBase_CheckPieceID::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinalePieceBase.GetAnswerPieceID
// 0x0008 (0x0008 - 0x0000)
struct RCNzFinalePieceBase_GetAnswerPieceID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzFinalePieceBase_GetAnswerPieceID) == 0x000004, "Wrong alignment on RCNzFinalePieceBase_GetAnswerPieceID");
static_assert(sizeof(RCNzFinalePieceBase_GetAnswerPieceID) == 0x000008, "Wrong size on RCNzFinalePieceBase_GetAnswerPieceID");
static_assert(offsetof(RCNzFinalePieceBase_GetAnswerPieceID, ReturnValue) == 0x000000, "Member 'RCNzFinalePieceBase_GetAnswerPieceID::ReturnValue' has a wrong offset!");

// Function RC.RCNzFinalePieceBase.InitializeFinalePiece
// 0x0038 (0x0038 - 0x0000)
struct RCNzFinalePieceBase_InitializeFinalePiece final
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameTextID;                                        // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x001C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   answerID_0;                                        // 0x0024(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PieceID_0;                                         // 0x002C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzFinalePieceBase_InitializeFinalePiece) == 0x000008, "Wrong alignment on RCNzFinalePieceBase_InitializeFinalePiece");
static_assert(sizeof(RCNzFinalePieceBase_InitializeFinalePiece) == 0x000038, "Wrong size on RCNzFinalePieceBase_InitializeFinalePiece");
static_assert(offsetof(RCNzFinalePieceBase_InitializeFinalePiece, ImagePath) == 0x000000, "Member 'RCNzFinalePieceBase_InitializeFinalePiece::ImagePath' has a wrong offset!");
static_assert(offsetof(RCNzFinalePieceBase_InitializeFinalePiece, Type) == 0x000010, "Member 'RCNzFinalePieceBase_InitializeFinalePiece::Type' has a wrong offset!");
static_assert(offsetof(RCNzFinalePieceBase_InitializeFinalePiece, NameTextID) == 0x000014, "Member 'RCNzFinalePieceBase_InitializeFinalePiece::NameTextID' has a wrong offset!");
static_assert(offsetof(RCNzFinalePieceBase_InitializeFinalePiece, TextID) == 0x00001C, "Member 'RCNzFinalePieceBase_InitializeFinalePiece::TextID' has a wrong offset!");
static_assert(offsetof(RCNzFinalePieceBase_InitializeFinalePiece, answerID_0) == 0x000024, "Member 'RCNzFinalePieceBase_InitializeFinalePiece::answerID_0' has a wrong offset!");
static_assert(offsetof(RCNzFinalePieceBase_InitializeFinalePiece, PieceID_0) == 0x00002C, "Member 'RCNzFinalePieceBase_InitializeFinalePiece::PieceID_0' has a wrong offset!");

// Function RC.RCReHUD.CheckFreeMoveButtonGuide
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_CheckFreeMoveButtonGuide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_CheckFreeMoveButtonGuide) == 0x000001, "Wrong alignment on RCReHUD_CheckFreeMoveButtonGuide");
static_assert(sizeof(RCReHUD_CheckFreeMoveButtonGuide) == 0x000001, "Wrong size on RCReHUD_CheckFreeMoveButtonGuide");
static_assert(offsetof(RCReHUD_CheckFreeMoveButtonGuide, ReturnValue) == 0x000000, "Member 'RCReHUD_CheckFreeMoveButtonGuide::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.CheckLocationFinished
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_CheckLocationFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_CheckLocationFinished) == 0x000001, "Wrong alignment on RCReHUD_CheckLocationFinished");
static_assert(sizeof(RCReHUD_CheckLocationFinished) == 0x000001, "Wrong size on RCReHUD_CheckLocationFinished");
static_assert(offsetof(RCReHUD_CheckLocationFinished, ReturnValue) == 0x000000, "Member 'RCReHUD_CheckLocationFinished::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.CheckLocationRunning
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_CheckLocationRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_CheckLocationRunning) == 0x000001, "Wrong alignment on RCReHUD_CheckLocationRunning");
static_assert(sizeof(RCReHUD_CheckLocationRunning) == 0x000001, "Wrong size on RCReHUD_CheckLocationRunning");
static_assert(offsetof(RCReHUD_CheckLocationRunning, ReturnValue) == 0x000000, "Member 'RCReHUD_CheckLocationRunning::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.CheckLocationStarted
// 0x0003 (0x0003 - 0x0000)
struct RCReHUD_CheckLocationStarted final
{
public:
	bool                                          bInMiniMap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLocation;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_CheckLocationStarted) == 0x000001, "Wrong alignment on RCReHUD_CheckLocationStarted");
static_assert(sizeof(RCReHUD_CheckLocationStarted) == 0x000003, "Wrong size on RCReHUD_CheckLocationStarted");
static_assert(offsetof(RCReHUD_CheckLocationStarted, bInMiniMap) == 0x000000, "Member 'RCReHUD_CheckLocationStarted::bInMiniMap' has a wrong offset!");
static_assert(offsetof(RCReHUD_CheckLocationStarted, bInLocation) == 0x000001, "Member 'RCReHUD_CheckLocationStarted::bInLocation' has a wrong offset!");
static_assert(offsetof(RCReHUD_CheckLocationStarted, ReturnValue) == 0x000002, "Member 'RCReHUD_CheckLocationStarted::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.CheckSelectFinished
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_CheckSelectFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_CheckSelectFinished) == 0x000001, "Wrong alignment on RCReHUD_CheckSelectFinished");
static_assert(sizeof(RCReHUD_CheckSelectFinished) == 0x000001, "Wrong size on RCReHUD_CheckSelectFinished");
static_assert(offsetof(RCReHUD_CheckSelectFinished, ReturnValue) == 0x000000, "Member 'RCReHUD_CheckSelectFinished::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.CheckSelectStarted
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_CheckSelectStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_CheckSelectStarted) == 0x000001, "Wrong alignment on RCReHUD_CheckSelectStarted");
static_assert(sizeof(RCReHUD_CheckSelectStarted) == 0x000001, "Wrong size on RCReHUD_CheckSelectStarted");
static_assert(offsetof(RCReHUD_CheckSelectStarted, ReturnValue) == 0x000000, "Member 'RCReHUD_CheckSelectStarted::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.CheckSelectWindow
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_CheckSelectWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_CheckSelectWindow) == 0x000001, "Wrong alignment on RCReHUD_CheckSelectWindow");
static_assert(sizeof(RCReHUD_CheckSelectWindow) == 0x000001, "Wrong size on RCReHUD_CheckSelectWindow");
static_assert(offsetof(RCReHUD_CheckSelectWindow, ReturnValue) == 0x000000, "Member 'RCReHUD_CheckSelectWindow::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.CheckSoundNovelFinished
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_CheckSoundNovelFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_CheckSoundNovelFinished) == 0x000001, "Wrong alignment on RCReHUD_CheckSoundNovelFinished");
static_assert(sizeof(RCReHUD_CheckSoundNovelFinished) == 0x000001, "Wrong size on RCReHUD_CheckSoundNovelFinished");
static_assert(offsetof(RCReHUD_CheckSoundNovelFinished, ReturnValue) == 0x000000, "Member 'RCReHUD_CheckSoundNovelFinished::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.FreeMoveButtonGuideFinish
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_FreeMoveButtonGuideFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_FreeMoveButtonGuideFinish) == 0x000001, "Wrong alignment on RCReHUD_FreeMoveButtonGuideFinish");
static_assert(sizeof(RCReHUD_FreeMoveButtonGuideFinish) == 0x000001, "Wrong size on RCReHUD_FreeMoveButtonGuideFinish");
static_assert(offsetof(RCReHUD_FreeMoveButtonGuideFinish, ReturnValue) == 0x000000, "Member 'RCReHUD_FreeMoveButtonGuideFinish::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.FreeMoveButtonGuideStart
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_FreeMoveButtonGuideStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_FreeMoveButtonGuideStart) == 0x000001, "Wrong alignment on RCReHUD_FreeMoveButtonGuideStart");
static_assert(sizeof(RCReHUD_FreeMoveButtonGuideStart) == 0x000001, "Wrong size on RCReHUD_FreeMoveButtonGuideStart");
static_assert(offsetof(RCReHUD_FreeMoveButtonGuideStart, ReturnValue) == 0x000000, "Member 'RCReHUD_FreeMoveButtonGuideStart::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.FreeMoveButtonGuideUpdate
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_FreeMoveButtonGuideUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_FreeMoveButtonGuideUpdate) == 0x000001, "Wrong alignment on RCReHUD_FreeMoveButtonGuideUpdate");
static_assert(sizeof(RCReHUD_FreeMoveButtonGuideUpdate) == 0x000001, "Wrong size on RCReHUD_FreeMoveButtonGuideUpdate");
static_assert(offsetof(RCReHUD_FreeMoveButtonGuideUpdate, ReturnValue) == 0x000000, "Member 'RCReHUD_FreeMoveButtonGuideUpdate::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetCurrentLocationDisplayLocationID
// 0x0008 (0x0008 - 0x0000)
struct RCReHUD_GetCurrentLocationDisplayLocationID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetCurrentLocationDisplayLocationID) == 0x000004, "Wrong alignment on RCReHUD_GetCurrentLocationDisplayLocationID");
static_assert(sizeof(RCReHUD_GetCurrentLocationDisplayLocationID) == 0x000008, "Wrong size on RCReHUD_GetCurrentLocationDisplayLocationID");
static_assert(offsetof(RCReHUD_GetCurrentLocationDisplayLocationID, ReturnValue) == 0x000000, "Member 'RCReHUD_GetCurrentLocationDisplayLocationID::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetCurrentLocationDisplayTextID
// 0x0008 (0x0008 - 0x0000)
struct RCReHUD_GetCurrentLocationDisplayTextID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetCurrentLocationDisplayTextID) == 0x000004, "Wrong alignment on RCReHUD_GetCurrentLocationDisplayTextID");
static_assert(sizeof(RCReHUD_GetCurrentLocationDisplayTextID) == 0x000008, "Wrong size on RCReHUD_GetCurrentLocationDisplayTextID");
static_assert(offsetof(RCReHUD_GetCurrentLocationDisplayTextID, ReturnValue) == 0x000000, "Member 'RCReHUD_GetCurrentLocationDisplayTextID::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetCurrentLocationID
// 0x0008 (0x0008 - 0x0000)
struct RCReHUD_GetCurrentLocationID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetCurrentLocationID) == 0x000004, "Wrong alignment on RCReHUD_GetCurrentLocationID");
static_assert(sizeof(RCReHUD_GetCurrentLocationID) == 0x000008, "Wrong size on RCReHUD_GetCurrentLocationID");
static_assert(offsetof(RCReHUD_GetCurrentLocationID, ReturnValue) == 0x000000, "Member 'RCReHUD_GetCurrentLocationID::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetCurrentLocationTextID
// 0x0008 (0x0008 - 0x0000)
struct RCReHUD_GetCurrentLocationTextID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetCurrentLocationTextID) == 0x000004, "Wrong alignment on RCReHUD_GetCurrentLocationTextID");
static_assert(sizeof(RCReHUD_GetCurrentLocationTextID) == 0x000008, "Wrong size on RCReHUD_GetCurrentLocationTextID");
static_assert(offsetof(RCReHUD_GetCurrentLocationTextID, ReturnValue) == 0x000000, "Member 'RCReHUD_GetCurrentLocationTextID::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetCurrentMiniMapLocationID
// 0x0008 (0x0008 - 0x0000)
struct RCReHUD_GetCurrentMiniMapLocationID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetCurrentMiniMapLocationID) == 0x000004, "Wrong alignment on RCReHUD_GetCurrentMiniMapLocationID");
static_assert(sizeof(RCReHUD_GetCurrentMiniMapLocationID) == 0x000008, "Wrong size on RCReHUD_GetCurrentMiniMapLocationID");
static_assert(offsetof(RCReHUD_GetCurrentMiniMapLocationID, ReturnValue) == 0x000000, "Member 'RCReHUD_GetCurrentMiniMapLocationID::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetCurrentMiniMapTextID
// 0x0008 (0x0008 - 0x0000)
struct RCReHUD_GetCurrentMiniMapTextID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetCurrentMiniMapTextID) == 0x000004, "Wrong alignment on RCReHUD_GetCurrentMiniMapTextID");
static_assert(sizeof(RCReHUD_GetCurrentMiniMapTextID) == 0x000008, "Wrong size on RCReHUD_GetCurrentMiniMapTextID");
static_assert(offsetof(RCReHUD_GetCurrentMiniMapTextID, ReturnValue) == 0x000000, "Member 'RCReHUD_GetCurrentMiniMapTextID::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetFreeMoveState
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_GetFreeMoveState final
{
public:
	ERCReHUDFreeMoveState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetFreeMoveState) == 0x000001, "Wrong alignment on RCReHUD_GetFreeMoveState");
static_assert(sizeof(RCReHUD_GetFreeMoveState) == 0x000001, "Wrong size on RCReHUD_GetFreeMoveState");
static_assert(offsetof(RCReHUD_GetFreeMoveState, ReturnValue) == 0x000000, "Member 'RCReHUD_GetFreeMoveState::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetHUDState
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_GetHUDState final
{
public:
	ERCReHUDState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetHUDState) == 0x000001, "Wrong alignment on RCReHUD_GetHUDState");
static_assert(sizeof(RCReHUD_GetHUDState) == 0x000001, "Wrong size on RCReHUD_GetHUDState");
static_assert(offsetof(RCReHUD_GetHUDState, ReturnValue) == 0x000000, "Member 'RCReHUD_GetHUDState::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct RCReHUD_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetSelectedIndex) == 0x000004, "Wrong alignment on RCReHUD_GetSelectedIndex");
static_assert(sizeof(RCReHUD_GetSelectedIndex) == 0x000004, "Wrong size on RCReHUD_GetSelectedIndex");
static_assert(offsetof(RCReHUD_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'RCReHUD_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCReHUD_GetSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetSelectIndex) == 0x000004, "Wrong alignment on RCReHUD_GetSelectIndex");
static_assert(sizeof(RCReHUD_GetSelectIndex) == 0x000004, "Wrong size on RCReHUD_GetSelectIndex");
static_assert(offsetof(RCReHUD_GetSelectIndex, ReturnValue) == 0x000000, "Member 'RCReHUD_GetSelectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetSelectWindowState
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_GetSelectWindowState final
{
public:
	ERCAdvHUDWidgetState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetSelectWindowState) == 0x000001, "Wrong alignment on RCReHUD_GetSelectWindowState");
static_assert(sizeof(RCReHUD_GetSelectWindowState) == 0x000001, "Wrong size on RCReHUD_GetSelectWindowState");
static_assert(offsetof(RCReHUD_GetSelectWindowState, ReturnValue) == 0x000000, "Member 'RCReHUD_GetSelectWindowState::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.GetTalkWindowState
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_GetTalkWindowState final
{
public:
	ERCAdvHUDWidgetState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_GetTalkWindowState) == 0x000001, "Wrong alignment on RCReHUD_GetTalkWindowState");
static_assert(sizeof(RCReHUD_GetTalkWindowState) == 0x000001, "Wrong size on RCReHUD_GetTalkWindowState");
static_assert(offsetof(RCReHUD_GetTalkWindowState, ReturnValue) == 0x000000, "Member 'RCReHUD_GetTalkWindowState::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.LoadLocationDataName
// 0x0014 (0x0014 - 0x0000)
struct RCReHUD_LoadLocationDataName final
{
public:
	class FName                                   in_LocationID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   in_LocationTextID;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReHUD_LoadLocationDataName) == 0x000004, "Wrong alignment on RCReHUD_LoadLocationDataName");
static_assert(sizeof(RCReHUD_LoadLocationDataName) == 0x000014, "Wrong size on RCReHUD_LoadLocationDataName");
static_assert(offsetof(RCReHUD_LoadLocationDataName, in_LocationID) == 0x000000, "Member 'RCReHUD_LoadLocationDataName::in_LocationID' has a wrong offset!");
static_assert(offsetof(RCReHUD_LoadLocationDataName, in_LocationTextID) == 0x000008, "Member 'RCReHUD_LoadLocationDataName::in_LocationTextID' has a wrong offset!");
static_assert(offsetof(RCReHUD_LoadLocationDataName, ReturnValue) == 0x000010, "Member 'RCReHUD_LoadLocationDataName::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SelectFinish
// 0x0001 (0x0001 - 0x0000)
struct RCReHUD_SelectFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_SelectFinish) == 0x000001, "Wrong alignment on RCReHUD_SelectFinish");
static_assert(sizeof(RCReHUD_SelectFinish) == 0x000001, "Wrong size on RCReHUD_SelectFinish");
static_assert(offsetof(RCReHUD_SelectFinish, ReturnValue) == 0x000000, "Member 'RCReHUD_SelectFinish::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SelectSetData
// 0x0010 (0x0010 - 0x0000)
struct RCReHUD_SelectSetData final
{
public:
	int32                                         in_Index;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   in_TextID;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          in_bCheckMark;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReHUD_SelectSetData) == 0x000004, "Wrong alignment on RCReHUD_SelectSetData");
static_assert(sizeof(RCReHUD_SelectSetData) == 0x000010, "Wrong size on RCReHUD_SelectSetData");
static_assert(offsetof(RCReHUD_SelectSetData, in_Index) == 0x000000, "Member 'RCReHUD_SelectSetData::in_Index' has a wrong offset!");
static_assert(offsetof(RCReHUD_SelectSetData, in_TextID) == 0x000004, "Member 'RCReHUD_SelectSetData::in_TextID' has a wrong offset!");
static_assert(offsetof(RCReHUD_SelectSetData, in_bCheckMark) == 0x00000C, "Member 'RCReHUD_SelectSetData::in_bCheckMark' has a wrong offset!");
static_assert(offsetof(RCReHUD_SelectSetData, ReturnValue) == 0x00000D, "Member 'RCReHUD_SelectSetData::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SelectStart
// 0x0010 (0x0010 - 0x0000)
struct RCReHUD_SelectStart final
{
public:
	int32                                         in_SelectNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   in_QuestionTextID;                                 // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReHUD_SelectStart) == 0x000004, "Wrong alignment on RCReHUD_SelectStart");
static_assert(sizeof(RCReHUD_SelectStart) == 0x000010, "Wrong size on RCReHUD_SelectStart");
static_assert(offsetof(RCReHUD_SelectStart, in_SelectNum) == 0x000000, "Member 'RCReHUD_SelectStart::in_SelectNum' has a wrong offset!");
static_assert(offsetof(RCReHUD_SelectStart, in_QuestionTextID) == 0x000004, "Member 'RCReHUD_SelectStart::in_QuestionTextID' has a wrong offset!");
static_assert(offsetof(RCReHUD_SelectStart, ReturnValue) == 0x00000C, "Member 'RCReHUD_SelectStart::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SelectStartWithDataArray
// 0x0020 (0x0020 - 0x0000)
struct RCReHUD_SelectStartWithDataArray final
{
public:
	TArray<struct FRCReHUDSelectData>             InSelectDataArray;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InQuestionTextID;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReHUD_SelectStartWithDataArray) == 0x000008, "Wrong alignment on RCReHUD_SelectStartWithDataArray");
static_assert(sizeof(RCReHUD_SelectStartWithDataArray) == 0x000020, "Wrong size on RCReHUD_SelectStartWithDataArray");
static_assert(offsetof(RCReHUD_SelectStartWithDataArray, InSelectDataArray) == 0x000000, "Member 'RCReHUD_SelectStartWithDataArray::InSelectDataArray' has a wrong offset!");
static_assert(offsetof(RCReHUD_SelectStartWithDataArray, InQuestionTextID) == 0x000010, "Member 'RCReHUD_SelectStartWithDataArray::InQuestionTextID' has a wrong offset!");
static_assert(offsetof(RCReHUD_SelectStartWithDataArray, ReturnValue) == 0x000018, "Member 'RCReHUD_SelectStartWithDataArray::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SetLocationDisplayLocation
// 0x0014 (0x0014 - 0x0000)
struct RCReHUD_SetLocationDisplayLocation final
{
public:
	class FName                                   in_LocationID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   in_LocationTextID;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReHUD_SetLocationDisplayLocation) == 0x000004, "Wrong alignment on RCReHUD_SetLocationDisplayLocation");
static_assert(sizeof(RCReHUD_SetLocationDisplayLocation) == 0x000014, "Wrong size on RCReHUD_SetLocationDisplayLocation");
static_assert(offsetof(RCReHUD_SetLocationDisplayLocation, in_LocationID) == 0x000000, "Member 'RCReHUD_SetLocationDisplayLocation::in_LocationID' has a wrong offset!");
static_assert(offsetof(RCReHUD_SetLocationDisplayLocation, in_LocationTextID) == 0x000008, "Member 'RCReHUD_SetLocationDisplayLocation::in_LocationTextID' has a wrong offset!");
static_assert(offsetof(RCReHUD_SetLocationDisplayLocation, ReturnValue) == 0x000010, "Member 'RCReHUD_SetLocationDisplayLocation::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SetLocationName
// 0x0014 (0x0014 - 0x0000)
struct RCReHUD_SetLocationName final
{
public:
	class FName                                   in_LocationID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   in_LocationTextID;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReHUD_SetLocationName) == 0x000004, "Wrong alignment on RCReHUD_SetLocationName");
static_assert(sizeof(RCReHUD_SetLocationName) == 0x000014, "Wrong size on RCReHUD_SetLocationName");
static_assert(offsetof(RCReHUD_SetLocationName, in_LocationID) == 0x000000, "Member 'RCReHUD_SetLocationName::in_LocationID' has a wrong offset!");
static_assert(offsetof(RCReHUD_SetLocationName, in_LocationTextID) == 0x000008, "Member 'RCReHUD_SetLocationName::in_LocationTextID' has a wrong offset!");
static_assert(offsetof(RCReHUD_SetLocationName, ReturnValue) == 0x000010, "Member 'RCReHUD_SetLocationName::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SetMiniMapLocation
// 0x0014 (0x0014 - 0x0000)
struct RCReHUD_SetMiniMapLocation final
{
public:
	class FName                                   in_LocationID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   in_LocationTextID;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReHUD_SetMiniMapLocation) == 0x000004, "Wrong alignment on RCReHUD_SetMiniMapLocation");
static_assert(sizeof(RCReHUD_SetMiniMapLocation) == 0x000014, "Wrong size on RCReHUD_SetMiniMapLocation");
static_assert(offsetof(RCReHUD_SetMiniMapLocation, in_LocationID) == 0x000000, "Member 'RCReHUD_SetMiniMapLocation::in_LocationID' has a wrong offset!");
static_assert(offsetof(RCReHUD_SetMiniMapLocation, in_LocationTextID) == 0x000008, "Member 'RCReHUD_SetMiniMapLocation::in_LocationTextID' has a wrong offset!");
static_assert(offsetof(RCReHUD_SetMiniMapLocation, ReturnValue) == 0x000010, "Member 'RCReHUD_SetMiniMapLocation::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SoundNovelShowBackgroundFade
// 0x0002 (0x0002 - 0x0000)
struct RCReHUD_SoundNovelShowBackgroundFade final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_SoundNovelShowBackgroundFade) == 0x000001, "Wrong alignment on RCReHUD_SoundNovelShowBackgroundFade");
static_assert(sizeof(RCReHUD_SoundNovelShowBackgroundFade) == 0x000002, "Wrong size on RCReHUD_SoundNovelShowBackgroundFade");
static_assert(offsetof(RCReHUD_SoundNovelShowBackgroundFade, bInShow) == 0x000000, "Member 'RCReHUD_SoundNovelShowBackgroundFade::bInShow' has a wrong offset!");
static_assert(offsetof(RCReHUD_SoundNovelShowBackgroundFade, ReturnValue) == 0x000001, "Member 'RCReHUD_SoundNovelShowBackgroundFade::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SoundNovelStart
// 0x0010 (0x0010 - 0x0000)
struct RCReHUD_SoundNovelStart final
{
public:
	class UDataTable*                             InSoundNovelDataTable;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowBackgroundFade;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReHUD_SoundNovelStart) == 0x000008, "Wrong alignment on RCReHUD_SoundNovelStart");
static_assert(sizeof(RCReHUD_SoundNovelStart) == 0x000010, "Wrong size on RCReHUD_SoundNovelStart");
static_assert(offsetof(RCReHUD_SoundNovelStart, InSoundNovelDataTable) == 0x000000, "Member 'RCReHUD_SoundNovelStart::InSoundNovelDataTable' has a wrong offset!");
static_assert(offsetof(RCReHUD_SoundNovelStart, bInShowBackgroundFade) == 0x000008, "Member 'RCReHUD_SoundNovelStart::bInShowBackgroundFade' has a wrong offset!");
static_assert(offsetof(RCReHUD_SoundNovelStart, ReturnValue) == 0x000009, "Member 'RCReHUD_SoundNovelStart::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.SoundNovelWidgetStart
// 0x0002 (0x0002 - 0x0000)
struct RCReHUD_SoundNovelWidgetStart final
{
public:
	bool                                          bInShowBackgroundFade;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_SoundNovelWidgetStart) == 0x000001, "Wrong alignment on RCReHUD_SoundNovelWidgetStart");
static_assert(sizeof(RCReHUD_SoundNovelWidgetStart) == 0x000002, "Wrong size on RCReHUD_SoundNovelWidgetStart");
static_assert(offsetof(RCReHUD_SoundNovelWidgetStart, bInShowBackgroundFade) == 0x000000, "Member 'RCReHUD_SoundNovelWidgetStart::bInShowBackgroundFade' has a wrong offset!");
static_assert(offsetof(RCReHUD_SoundNovelWidgetStart, ReturnValue) == 0x000001, "Member 'RCReHUD_SoundNovelWidgetStart::ReturnValue' has a wrong offset!");

// Function RC.RCReHUD.StartLocation
// 0x0002 (0x0002 - 0x0000)
struct RCReHUD_StartLocation final
{
public:
	bool                                          bInMiniMap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLocation;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReHUD_StartLocation) == 0x000001, "Wrong alignment on RCReHUD_StartLocation");
static_assert(sizeof(RCReHUD_StartLocation) == 0x000002, "Wrong size on RCReHUD_StartLocation");
static_assert(offsetof(RCReHUD_StartLocation, bInMiniMap) == 0x000000, "Member 'RCReHUD_StartLocation::bInMiniMap' has a wrong offset!");
static_assert(offsetof(RCReHUD_StartLocation, bInLocation) == 0x000001, "Member 'RCReHUD_StartLocation::bInLocation' has a wrong offset!");

// Function RC.RCNzHUD.CountdownGetMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct RCNzHUD_CountdownGetMilliseconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownGetMilliseconds) == 0x000004, "Wrong alignment on RCNzHUD_CountdownGetMilliseconds");
static_assert(sizeof(RCNzHUD_CountdownGetMilliseconds) == 0x000004, "Wrong size on RCNzHUD_CountdownGetMilliseconds");
static_assert(offsetof(RCNzHUD_CountdownGetMilliseconds, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownGetMilliseconds::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownGetProgressAndMilliseconds
// 0x000C (0x000C - 0x0000)
struct RCNzHUD_CountdownGetProgressAndMilliseconds final
{
public:
	int32                                         OutProgress;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMilliseconds;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_CountdownGetProgressAndMilliseconds) == 0x000004, "Wrong alignment on RCNzHUD_CountdownGetProgressAndMilliseconds");
static_assert(sizeof(RCNzHUD_CountdownGetProgressAndMilliseconds) == 0x00000C, "Wrong size on RCNzHUD_CountdownGetProgressAndMilliseconds");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndMilliseconds, OutProgress) == 0x000000, "Member 'RCNzHUD_CountdownGetProgressAndMilliseconds::OutProgress' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndMilliseconds, OutMilliseconds) == 0x000004, "Member 'RCNzHUD_CountdownGetProgressAndMilliseconds::OutMilliseconds' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndMilliseconds, ReturnValue) == 0x000008, "Member 'RCNzHUD_CountdownGetProgressAndMilliseconds::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownGetProgressAndSeconds
// 0x000C (0x000C - 0x0000)
struct RCNzHUD_CountdownGetProgressAndSeconds final
{
public:
	int32                                         OutProgress;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSeconds;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_CountdownGetProgressAndSeconds) == 0x000004, "Wrong alignment on RCNzHUD_CountdownGetProgressAndSeconds");
static_assert(sizeof(RCNzHUD_CountdownGetProgressAndSeconds) == 0x00000C, "Wrong size on RCNzHUD_CountdownGetProgressAndSeconds");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndSeconds, OutProgress) == 0x000000, "Member 'RCNzHUD_CountdownGetProgressAndSeconds::OutProgress' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndSeconds, OutSeconds) == 0x000004, "Member 'RCNzHUD_CountdownGetProgressAndSeconds::OutSeconds' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndSeconds, ReturnValue) == 0x000008, "Member 'RCNzHUD_CountdownGetProgressAndSeconds::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownGetProgressAndTime
// 0x0018 (0x0018 - 0x0000)
struct RCNzHUD_CountdownGetProgressAndTime final
{
public:
	int32                                         OutProgress;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutHours;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMinutes;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSeconds;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMilliseconds;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_CountdownGetProgressAndTime) == 0x000004, "Wrong alignment on RCNzHUD_CountdownGetProgressAndTime");
static_assert(sizeof(RCNzHUD_CountdownGetProgressAndTime) == 0x000018, "Wrong size on RCNzHUD_CountdownGetProgressAndTime");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndTime, OutProgress) == 0x000000, "Member 'RCNzHUD_CountdownGetProgressAndTime::OutProgress' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndTime, OutHours) == 0x000004, "Member 'RCNzHUD_CountdownGetProgressAndTime::OutHours' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndTime, OutMinutes) == 0x000008, "Member 'RCNzHUD_CountdownGetProgressAndTime::OutMinutes' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndTime, OutSeconds) == 0x00000C, "Member 'RCNzHUD_CountdownGetProgressAndTime::OutSeconds' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndTime, OutMilliseconds) == 0x000010, "Member 'RCNzHUD_CountdownGetProgressAndTime::OutMilliseconds' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetProgressAndTime, ReturnValue) == 0x000014, "Member 'RCNzHUD_CountdownGetProgressAndTime::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownGetSeconds
// 0x0004 (0x0004 - 0x0000)
struct RCNzHUD_CountdownGetSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownGetSeconds) == 0x000004, "Wrong alignment on RCNzHUD_CountdownGetSeconds");
static_assert(sizeof(RCNzHUD_CountdownGetSeconds) == 0x000004, "Wrong size on RCNzHUD_CountdownGetSeconds");
static_assert(offsetof(RCNzHUD_CountdownGetSeconds, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownGetSeconds::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownGetTime
// 0x0014 (0x0014 - 0x0000)
struct RCNzHUD_CountdownGetTime final
{
public:
	int32                                         OutHours;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMinutes;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSeconds;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMilliseconds;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_CountdownGetTime) == 0x000004, "Wrong alignment on RCNzHUD_CountdownGetTime");
static_assert(sizeof(RCNzHUD_CountdownGetTime) == 0x000014, "Wrong size on RCNzHUD_CountdownGetTime");
static_assert(offsetof(RCNzHUD_CountdownGetTime, OutHours) == 0x000000, "Member 'RCNzHUD_CountdownGetTime::OutHours' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetTime, OutMinutes) == 0x000004, "Member 'RCNzHUD_CountdownGetTime::OutMinutes' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetTime, OutSeconds) == 0x000008, "Member 'RCNzHUD_CountdownGetTime::OutSeconds' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetTime, OutMilliseconds) == 0x00000C, "Member 'RCNzHUD_CountdownGetTime::OutMilliseconds' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownGetTime, ReturnValue) == 0x000010, "Member 'RCNzHUD_CountdownGetTime::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownInitialize
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_CountdownInitialize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownInitialize) == 0x000001, "Wrong alignment on RCNzHUD_CountdownInitialize");
static_assert(sizeof(RCNzHUD_CountdownInitialize) == 0x000001, "Wrong size on RCNzHUD_CountdownInitialize");
static_assert(offsetof(RCNzHUD_CountdownInitialize, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownInitialize::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownIsInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_CountdownIsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownIsInitialized) == 0x000001, "Wrong alignment on RCNzHUD_CountdownIsInitialized");
static_assert(sizeof(RCNzHUD_CountdownIsInitialized) == 0x000001, "Wrong size on RCNzHUD_CountdownIsInitialized");
static_assert(offsetof(RCNzHUD_CountdownIsInitialized, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownIsInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownPause
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_CountdownPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownPause) == 0x000001, "Wrong alignment on RCNzHUD_CountdownPause");
static_assert(sizeof(RCNzHUD_CountdownPause) == 0x000001, "Wrong size on RCNzHUD_CountdownPause");
static_assert(offsetof(RCNzHUD_CountdownPause, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownPause::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownRelease
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_CountdownRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownRelease) == 0x000001, "Wrong alignment on RCNzHUD_CountdownRelease");
static_assert(sizeof(RCNzHUD_CountdownRelease) == 0x000001, "Wrong size on RCNzHUD_CountdownRelease");
static_assert(offsetof(RCNzHUD_CountdownRelease, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownRelease::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownResume
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_CountdownResume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownResume) == 0x000001, "Wrong alignment on RCNzHUD_CountdownResume");
static_assert(sizeof(RCNzHUD_CountdownResume) == 0x000001, "Wrong size on RCNzHUD_CountdownResume");
static_assert(offsetof(RCNzHUD_CountdownResume, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownResume::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownSetProgressAndTime
// 0x0008 (0x0008 - 0x0000)
struct RCNzHUD_CountdownSetProgressAndTime final
{
public:
	int32                                         InProgress;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_CountdownSetProgressAndTime) == 0x000004, "Wrong alignment on RCNzHUD_CountdownSetProgressAndTime");
static_assert(sizeof(RCNzHUD_CountdownSetProgressAndTime) == 0x000008, "Wrong size on RCNzHUD_CountdownSetProgressAndTime");
static_assert(offsetof(RCNzHUD_CountdownSetProgressAndTime, InProgress) == 0x000000, "Member 'RCNzHUD_CountdownSetProgressAndTime::InProgress' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownSetProgressAndTime, ReturnValue) == 0x000004, "Member 'RCNzHUD_CountdownSetProgressAndTime::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownStartMillisecond
// 0x0008 (0x0008 - 0x0000)
struct RCNzHUD_CountdownStartMillisecond final
{
public:
	int32                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWidgetOpen;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_CountdownStartMillisecond) == 0x000004, "Wrong alignment on RCNzHUD_CountdownStartMillisecond");
static_assert(sizeof(RCNzHUD_CountdownStartMillisecond) == 0x000008, "Wrong size on RCNzHUD_CountdownStartMillisecond");
static_assert(offsetof(RCNzHUD_CountdownStartMillisecond, InTime) == 0x000000, "Member 'RCNzHUD_CountdownStartMillisecond::InTime' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownStartMillisecond, bInWidgetOpen) == 0x000004, "Member 'RCNzHUD_CountdownStartMillisecond::bInWidgetOpen' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownStartMillisecond, ReturnValue) == 0x000005, "Member 'RCNzHUD_CountdownStartMillisecond::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownStartSecond
// 0x0008 (0x0008 - 0x0000)
struct RCNzHUD_CountdownStartSecond final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWidgetOpen;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_CountdownStartSecond) == 0x000004, "Wrong alignment on RCNzHUD_CountdownStartSecond");
static_assert(sizeof(RCNzHUD_CountdownStartSecond) == 0x000008, "Wrong size on RCNzHUD_CountdownStartSecond");
static_assert(offsetof(RCNzHUD_CountdownStartSecond, InTime) == 0x000000, "Member 'RCNzHUD_CountdownStartSecond::InTime' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownStartSecond, bInWidgetOpen) == 0x000004, "Member 'RCNzHUD_CountdownStartSecond::bInWidgetOpen' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownStartSecond, ReturnValue) == 0x000005, "Member 'RCNzHUD_CountdownStartSecond::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownStartTime
// 0x0014 (0x0014 - 0x0000)
struct RCNzHUD_CountdownStartTime final
{
public:
	int32                                         InHours;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMinutes;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSeconds;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMilliseconds;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWidgetOpen;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_CountdownStartTime) == 0x000004, "Wrong alignment on RCNzHUD_CountdownStartTime");
static_assert(sizeof(RCNzHUD_CountdownStartTime) == 0x000014, "Wrong size on RCNzHUD_CountdownStartTime");
static_assert(offsetof(RCNzHUD_CountdownStartTime, InHours) == 0x000000, "Member 'RCNzHUD_CountdownStartTime::InHours' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownStartTime, InMinutes) == 0x000004, "Member 'RCNzHUD_CountdownStartTime::InMinutes' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownStartTime, InSeconds) == 0x000008, "Member 'RCNzHUD_CountdownStartTime::InSeconds' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownStartTime, InMilliseconds) == 0x00000C, "Member 'RCNzHUD_CountdownStartTime::InMilliseconds' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownStartTime, bInWidgetOpen) == 0x000010, "Member 'RCNzHUD_CountdownStartTime::bInWidgetOpen' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownStartTime, ReturnValue) == 0x000011, "Member 'RCNzHUD_CountdownStartTime::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownStop
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_CountdownStop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownStop) == 0x000001, "Wrong alignment on RCNzHUD_CountdownStop");
static_assert(sizeof(RCNzHUD_CountdownStop) == 0x000001, "Wrong size on RCNzHUD_CountdownStop");
static_assert(offsetof(RCNzHUD_CountdownStop, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownStop::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownWidgetClose
// 0x0002 (0x0002 - 0x0000)
struct RCNzHUD_CountdownWidgetClose final
{
public:
	bool                                          bInTimerPause;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownWidgetClose) == 0x000001, "Wrong alignment on RCNzHUD_CountdownWidgetClose");
static_assert(sizeof(RCNzHUD_CountdownWidgetClose) == 0x000002, "Wrong size on RCNzHUD_CountdownWidgetClose");
static_assert(offsetof(RCNzHUD_CountdownWidgetClose, bInTimerPause) == 0x000000, "Member 'RCNzHUD_CountdownWidgetClose::bInTimerPause' has a wrong offset!");
static_assert(offsetof(RCNzHUD_CountdownWidgetClose, ReturnValue) == 0x000001, "Member 'RCNzHUD_CountdownWidgetClose::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownWidgetIsClosed
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_CountdownWidgetIsClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownWidgetIsClosed) == 0x000001, "Wrong alignment on RCNzHUD_CountdownWidgetIsClosed");
static_assert(sizeof(RCNzHUD_CountdownWidgetIsClosed) == 0x000001, "Wrong size on RCNzHUD_CountdownWidgetIsClosed");
static_assert(offsetof(RCNzHUD_CountdownWidgetIsClosed, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownWidgetIsClosed::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownWidgetIsOpened
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_CountdownWidgetIsOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownWidgetIsOpened) == 0x000001, "Wrong alignment on RCNzHUD_CountdownWidgetIsOpened");
static_assert(sizeof(RCNzHUD_CountdownWidgetIsOpened) == 0x000001, "Wrong size on RCNzHUD_CountdownWidgetIsOpened");
static_assert(offsetof(RCNzHUD_CountdownWidgetIsOpened, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownWidgetIsOpened::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.CountdownWidgetOpen
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_CountdownWidgetOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_CountdownWidgetOpen) == 0x000001, "Wrong alignment on RCNzHUD_CountdownWidgetOpen");
static_assert(sizeof(RCNzHUD_CountdownWidgetOpen) == 0x000001, "Wrong size on RCNzHUD_CountdownWidgetOpen");
static_assert(offsetof(RCNzHUD_CountdownWidgetOpen, ReturnValue) == 0x000000, "Member 'RCNzHUD_CountdownWidgetOpen::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.GameOverGetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct RCNzHUD_GameOverGetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_GameOverGetSelectedIndex) == 0x000004, "Wrong alignment on RCNzHUD_GameOverGetSelectedIndex");
static_assert(sizeof(RCNzHUD_GameOverGetSelectedIndex) == 0x000004, "Wrong size on RCNzHUD_GameOverGetSelectedIndex");
static_assert(offsetof(RCNzHUD_GameOverGetSelectedIndex, ReturnValue) == 0x000000, "Member 'RCNzHUD_GameOverGetSelectedIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.GameOverIsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_GameOverIsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_GameOverIsFinished) == 0x000001, "Wrong alignment on RCNzHUD_GameOverIsFinished");
static_assert(sizeof(RCNzHUD_GameOverIsFinished) == 0x000001, "Wrong size on RCNzHUD_GameOverIsFinished");
static_assert(offsetof(RCNzHUD_GameOverIsFinished, ReturnValue) == 0x000000, "Member 'RCNzHUD_GameOverIsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.GameOverStart
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_GameOverStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_GameOverStart) == 0x000001, "Wrong alignment on RCNzHUD_GameOverStart");
static_assert(sizeof(RCNzHUD_GameOverStart) == 0x000001, "Wrong size on RCNzHUD_GameOverStart");
static_assert(offsetof(RCNzHUD_GameOverStart, ReturnValue) == 0x000000, "Member 'RCNzHUD_GameOverStart::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.HintIsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_HintIsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_HintIsFinished) == 0x000001, "Wrong alignment on RCNzHUD_HintIsFinished");
static_assert(sizeof(RCNzHUD_HintIsFinished) == 0x000001, "Wrong size on RCNzHUD_HintIsFinished");
static_assert(offsetof(RCNzHUD_HintIsFinished, ReturnValue) == 0x000000, "Member 'RCNzHUD_HintIsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.HintStart
// 0x000C (0x000C - 0x0000)
struct RCNzHUD_HintStart final
{
public:
	class FName                                   HintTextId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_HintStart) == 0x000004, "Wrong alignment on RCNzHUD_HintStart");
static_assert(sizeof(RCNzHUD_HintStart) == 0x00000C, "Wrong size on RCNzHUD_HintStart");
static_assert(offsetof(RCNzHUD_HintStart, HintTextId) == 0x000000, "Member 'RCNzHUD_HintStart::HintTextId' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HintStart, ReturnValue) == 0x000008, "Member 'RCNzHUD_HintStart::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.HPGaugeDamage
// 0x000C (0x000C - 0x0000)
struct RCNzHUD_HPGaugeDamage final
{
public:
	int32                                         InDamage;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutResultHP;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_HPGaugeDamage) == 0x000004, "Wrong alignment on RCNzHUD_HPGaugeDamage");
static_assert(sizeof(RCNzHUD_HPGaugeDamage) == 0x00000C, "Wrong size on RCNzHUD_HPGaugeDamage");
static_assert(offsetof(RCNzHUD_HPGaugeDamage, InDamage) == 0x000000, "Member 'RCNzHUD_HPGaugeDamage::InDamage' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeDamage, OutResultHP) == 0x000004, "Member 'RCNzHUD_HPGaugeDamage::OutResultHP' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeDamage, bInSilence) == 0x000008, "Member 'RCNzHUD_HPGaugeDamage::bInSilence' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeDamage, ReturnValue) == 0x000009, "Member 'RCNzHUD_HPGaugeDamage::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.HPGaugeDamageForScene
// 0x0008 (0x0008 - 0x0000)
struct RCNzHUD_HPGaugeDamageForScene final
{
public:
	int32                                         OutResultHP;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_HPGaugeDamageForScene) == 0x000004, "Wrong alignment on RCNzHUD_HPGaugeDamageForScene");
static_assert(sizeof(RCNzHUD_HPGaugeDamageForScene) == 0x000008, "Wrong size on RCNzHUD_HPGaugeDamageForScene");
static_assert(offsetof(RCNzHUD_HPGaugeDamageForScene, OutResultHP) == 0x000000, "Member 'RCNzHUD_HPGaugeDamageForScene::OutResultHP' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeDamageForScene, bInSilence) == 0x000004, "Member 'RCNzHUD_HPGaugeDamageForScene::bInSilence' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeDamageForScene, ReturnValue) == 0x000005, "Member 'RCNzHUD_HPGaugeDamageForScene::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.HPGaugeFinish
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_HPGaugeFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_HPGaugeFinish) == 0x000001, "Wrong alignment on RCNzHUD_HPGaugeFinish");
static_assert(sizeof(RCNzHUD_HPGaugeFinish) == 0x000001, "Wrong size on RCNzHUD_HPGaugeFinish");
static_assert(offsetof(RCNzHUD_HPGaugeFinish, ReturnValue) == 0x000000, "Member 'RCNzHUD_HPGaugeFinish::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.HPGaugeGetState
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_HPGaugeGetState final
{
public:
	ERCAdvHUDWidgetState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_HPGaugeGetState) == 0x000001, "Wrong alignment on RCNzHUD_HPGaugeGetState");
static_assert(sizeof(RCNzHUD_HPGaugeGetState) == 0x000001, "Wrong size on RCNzHUD_HPGaugeGetState");
static_assert(offsetof(RCNzHUD_HPGaugeGetState, ReturnValue) == 0x000000, "Member 'RCNzHUD_HPGaugeGetState::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.HPGaugeRecover
// 0x000C (0x000C - 0x0000)
struct RCNzHUD_HPGaugeRecover final
{
public:
	int32                                         InRecover;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutResultHP;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_HPGaugeRecover) == 0x000004, "Wrong alignment on RCNzHUD_HPGaugeRecover");
static_assert(sizeof(RCNzHUD_HPGaugeRecover) == 0x00000C, "Wrong size on RCNzHUD_HPGaugeRecover");
static_assert(offsetof(RCNzHUD_HPGaugeRecover, InRecover) == 0x000000, "Member 'RCNzHUD_HPGaugeRecover::InRecover' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeRecover, OutResultHP) == 0x000004, "Member 'RCNzHUD_HPGaugeRecover::OutResultHP' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeRecover, bInSilence) == 0x000008, "Member 'RCNzHUD_HPGaugeRecover::bInSilence' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeRecover, ReturnValue) == 0x000009, "Member 'RCNzHUD_HPGaugeRecover::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.HPGaugeRecoverForScene
// 0x0008 (0x0008 - 0x0000)
struct RCNzHUD_HPGaugeRecoverForScene final
{
public:
	int32                                         OutResultHP;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_HPGaugeRecoverForScene) == 0x000004, "Wrong alignment on RCNzHUD_HPGaugeRecoverForScene");
static_assert(sizeof(RCNzHUD_HPGaugeRecoverForScene) == 0x000008, "Wrong size on RCNzHUD_HPGaugeRecoverForScene");
static_assert(offsetof(RCNzHUD_HPGaugeRecoverForScene, OutResultHP) == 0x000000, "Member 'RCNzHUD_HPGaugeRecoverForScene::OutResultHP' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeRecoverForScene, bInSilence) == 0x000004, "Member 'RCNzHUD_HPGaugeRecoverForScene::bInSilence' has a wrong offset!");
static_assert(offsetof(RCNzHUD_HPGaugeRecoverForScene, ReturnValue) == 0x000005, "Member 'RCNzHUD_HPGaugeRecoverForScene::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.HPGaugeStart
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_HPGaugeStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_HPGaugeStart) == 0x000001, "Wrong alignment on RCNzHUD_HPGaugeStart");
static_assert(sizeof(RCNzHUD_HPGaugeStart) == 0x000001, "Wrong size on RCNzHUD_HPGaugeStart");
static_assert(offsetof(RCNzHUD_HPGaugeStart, ReturnValue) == 0x000000, "Member 'RCNzHUD_HPGaugeStart::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.SkillInfoListStart
// 0x0018 (0x0018 - 0x0000)
struct RCNzHUD_SkillInfoListStart final
{
public:
	TArray<class FName>                           skillNameTextIDList;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_SkillInfoListStart) == 0x000008, "Wrong alignment on RCNzHUD_SkillInfoListStart");
static_assert(sizeof(RCNzHUD_SkillInfoListStart) == 0x000018, "Wrong size on RCNzHUD_SkillInfoListStart");
static_assert(offsetof(RCNzHUD_SkillInfoListStart, skillNameTextIDList) == 0x000000, "Member 'RCNzHUD_SkillInfoListStart::skillNameTextIDList' has a wrong offset!");
static_assert(offsetof(RCNzHUD_SkillInfoListStart, ReturnValue) == 0x000010, "Member 'RCNzHUD_SkillInfoListStart::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.SkillInfoListStartByType
// 0x0018 (0x0018 - 0x0000)
struct RCNzHUD_SkillInfoListStartByType final
{
public:
	TArray<ERCSkillFunctionType>                  skillFunctionTypeList;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUD_SkillInfoListStartByType) == 0x000008, "Wrong alignment on RCNzHUD_SkillInfoListStartByType");
static_assert(sizeof(RCNzHUD_SkillInfoListStartByType) == 0x000018, "Wrong size on RCNzHUD_SkillInfoListStartByType");
static_assert(offsetof(RCNzHUD_SkillInfoListStartByType, skillFunctionTypeList) == 0x000000, "Member 'RCNzHUD_SkillInfoListStartByType::skillFunctionTypeList' has a wrong offset!");
static_assert(offsetof(RCNzHUD_SkillInfoListStartByType, ReturnValue) == 0x000010, "Member 'RCNzHUD_SkillInfoListStartByType::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUD.SkillInfoListIsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUD_SkillInfoListIsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUD_SkillInfoListIsFinished) == 0x000001, "Wrong alignment on RCNzHUD_SkillInfoListIsFinished");
static_assert(sizeof(RCNzHUD_SkillInfoListIsFinished) == 0x000001, "Wrong size on RCNzHUD_SkillInfoListIsFinished");
static_assert(offsetof(RCNzHUD_SkillInfoListIsFinished, ReturnValue) == 0x000000, "Member 'RCNzHUD_SkillInfoListIsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownGetMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct RCNzHUDBFL_CountdownGetMilliseconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownGetMilliseconds) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownGetMilliseconds");
static_assert(sizeof(RCNzHUDBFL_CountdownGetMilliseconds) == 0x000004, "Wrong size on RCNzHUDBFL_CountdownGetMilliseconds");
static_assert(offsetof(RCNzHUDBFL_CountdownGetMilliseconds, ReturnValue) == 0x000000, "Member 'RCNzHUDBFL_CountdownGetMilliseconds::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownGetProgressAndMilliseconds
// 0x000C (0x000C - 0x0000)
struct RCNzHUDBFL_CountdownGetProgressAndMilliseconds final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Progress;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Milliseconds;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownGetProgressAndMilliseconds) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownGetProgressAndMilliseconds");
static_assert(sizeof(RCNzHUDBFL_CountdownGetProgressAndMilliseconds) == 0x00000C, "Wrong size on RCNzHUDBFL_CountdownGetProgressAndMilliseconds");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndMilliseconds, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownGetProgressAndMilliseconds::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndMilliseconds, Progress) == 0x000004, "Member 'RCNzHUDBFL_CountdownGetProgressAndMilliseconds::Progress' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndMilliseconds, Milliseconds) == 0x000008, "Member 'RCNzHUDBFL_CountdownGetProgressAndMilliseconds::Milliseconds' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownGetProgressAndSeconds
// 0x000C (0x000C - 0x0000)
struct RCNzHUDBFL_CountdownGetProgressAndSeconds final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Progress;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownGetProgressAndSeconds) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownGetProgressAndSeconds");
static_assert(sizeof(RCNzHUDBFL_CountdownGetProgressAndSeconds) == 0x00000C, "Wrong size on RCNzHUDBFL_CountdownGetProgressAndSeconds");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndSeconds, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownGetProgressAndSeconds::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndSeconds, Progress) == 0x000004, "Member 'RCNzHUDBFL_CountdownGetProgressAndSeconds::Progress' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndSeconds, Seconds) == 0x000008, "Member 'RCNzHUDBFL_CountdownGetProgressAndSeconds::Seconds' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownGetProgressAndTime
// 0x0018 (0x0018 - 0x0000)
struct RCNzHUDBFL_CountdownGetProgressAndTime final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Progress;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Milliseconds;                                      // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownGetProgressAndTime) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownGetProgressAndTime");
static_assert(sizeof(RCNzHUDBFL_CountdownGetProgressAndTime) == 0x000018, "Wrong size on RCNzHUDBFL_CountdownGetProgressAndTime");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndTime, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownGetProgressAndTime::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndTime, Progress) == 0x000004, "Member 'RCNzHUDBFL_CountdownGetProgressAndTime::Progress' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndTime, Hours) == 0x000008, "Member 'RCNzHUDBFL_CountdownGetProgressAndTime::Hours' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndTime, Minutes) == 0x00000C, "Member 'RCNzHUDBFL_CountdownGetProgressAndTime::Minutes' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndTime, Seconds) == 0x000010, "Member 'RCNzHUDBFL_CountdownGetProgressAndTime::Seconds' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetProgressAndTime, Milliseconds) == 0x000014, "Member 'RCNzHUDBFL_CountdownGetProgressAndTime::Milliseconds' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownGetSeconds
// 0x0004 (0x0004 - 0x0000)
struct RCNzHUDBFL_CountdownGetSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownGetSeconds) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownGetSeconds");
static_assert(sizeof(RCNzHUDBFL_CountdownGetSeconds) == 0x000004, "Wrong size on RCNzHUDBFL_CountdownGetSeconds");
static_assert(offsetof(RCNzHUDBFL_CountdownGetSeconds, ReturnValue) == 0x000000, "Member 'RCNzHUDBFL_CountdownGetSeconds::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownGetTime
// 0x0014 (0x0014 - 0x0000)
struct RCNzHUDBFL_CountdownGetTime final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Hours;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Milliseconds;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownGetTime) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownGetTime");
static_assert(sizeof(RCNzHUDBFL_CountdownGetTime) == 0x000014, "Wrong size on RCNzHUDBFL_CountdownGetTime");
static_assert(offsetof(RCNzHUDBFL_CountdownGetTime, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownGetTime::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetTime, Hours) == 0x000004, "Member 'RCNzHUDBFL_CountdownGetTime::Hours' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetTime, Minutes) == 0x000008, "Member 'RCNzHUDBFL_CountdownGetTime::Minutes' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetTime, Seconds) == 0x00000C, "Member 'RCNzHUDBFL_CountdownGetTime::Seconds' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownGetTime, Milliseconds) == 0x000010, "Member 'RCNzHUDBFL_CountdownGetTime::Milliseconds' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownInitialize
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUDBFL_CountdownInitialize final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownInitialize) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownInitialize");
static_assert(sizeof(RCNzHUDBFL_CountdownInitialize) == 0x000001, "Wrong size on RCNzHUDBFL_CountdownInitialize");
static_assert(offsetof(RCNzHUDBFL_CountdownInitialize, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownInitialize::bSucceeded' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownIsInitialized
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUDBFL_CountdownIsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownIsInitialized) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownIsInitialized");
static_assert(sizeof(RCNzHUDBFL_CountdownIsInitialized) == 0x000001, "Wrong size on RCNzHUDBFL_CountdownIsInitialized");
static_assert(offsetof(RCNzHUDBFL_CountdownIsInitialized, ReturnValue) == 0x000000, "Member 'RCNzHUDBFL_CountdownIsInitialized::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownPause
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUDBFL_CountdownPause final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownPause) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownPause");
static_assert(sizeof(RCNzHUDBFL_CountdownPause) == 0x000001, "Wrong size on RCNzHUDBFL_CountdownPause");
static_assert(offsetof(RCNzHUDBFL_CountdownPause, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownPause::bSucceeded' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownRelease
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUDBFL_CountdownRelease final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownRelease) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownRelease");
static_assert(sizeof(RCNzHUDBFL_CountdownRelease) == 0x000001, "Wrong size on RCNzHUDBFL_CountdownRelease");
static_assert(offsetof(RCNzHUDBFL_CountdownRelease, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownRelease::bSucceeded' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownResume
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUDBFL_CountdownResume final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownResume) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownResume");
static_assert(sizeof(RCNzHUDBFL_CountdownResume) == 0x000001, "Wrong size on RCNzHUDBFL_CountdownResume");
static_assert(offsetof(RCNzHUDBFL_CountdownResume, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownResume::bSucceeded' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownSetProgressAndTime
// 0x0008 (0x0008 - 0x0000)
struct RCNzHUDBFL_CountdownSetProgressAndTime final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Progress;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownSetProgressAndTime) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownSetProgressAndTime");
static_assert(sizeof(RCNzHUDBFL_CountdownSetProgressAndTime) == 0x000008, "Wrong size on RCNzHUDBFL_CountdownSetProgressAndTime");
static_assert(offsetof(RCNzHUDBFL_CountdownSetProgressAndTime, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownSetProgressAndTime::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownSetProgressAndTime, Progress) == 0x000004, "Member 'RCNzHUDBFL_CountdownSetProgressAndTime::Progress' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownStartMillisecond
// 0x000C (0x000C - 0x0000)
struct RCNzHUDBFL_CountdownStartMillisecond final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWidgetOpen;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUDBFL_CountdownStartMillisecond) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownStartMillisecond");
static_assert(sizeof(RCNzHUDBFL_CountdownStartMillisecond) == 0x00000C, "Wrong size on RCNzHUDBFL_CountdownStartMillisecond");
static_assert(offsetof(RCNzHUDBFL_CountdownStartMillisecond, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownStartMillisecond::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownStartMillisecond, Time) == 0x000004, "Member 'RCNzHUDBFL_CountdownStartMillisecond::Time' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownStartMillisecond, bWidgetOpen) == 0x000008, "Member 'RCNzHUDBFL_CountdownStartMillisecond::bWidgetOpen' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownStartSecond
// 0x000C (0x000C - 0x0000)
struct RCNzHUDBFL_CountdownStartSecond final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWidgetOpen;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUDBFL_CountdownStartSecond) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownStartSecond");
static_assert(sizeof(RCNzHUDBFL_CountdownStartSecond) == 0x00000C, "Wrong size on RCNzHUDBFL_CountdownStartSecond");
static_assert(offsetof(RCNzHUDBFL_CountdownStartSecond, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownStartSecond::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownStartSecond, Time) == 0x000004, "Member 'RCNzHUDBFL_CountdownStartSecond::Time' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownStartSecond, bWidgetOpen) == 0x000008, "Member 'RCNzHUDBFL_CountdownStartSecond::bWidgetOpen' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownStartTime
// 0x0018 (0x0018 - 0x0000)
struct RCNzHUDBFL_CountdownStartTime final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Hours;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Milliseconds;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWidgetOpen;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzHUDBFL_CountdownStartTime) == 0x000004, "Wrong alignment on RCNzHUDBFL_CountdownStartTime");
static_assert(sizeof(RCNzHUDBFL_CountdownStartTime) == 0x000018, "Wrong size on RCNzHUDBFL_CountdownStartTime");
static_assert(offsetof(RCNzHUDBFL_CountdownStartTime, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownStartTime::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownStartTime, Hours) == 0x000004, "Member 'RCNzHUDBFL_CountdownStartTime::Hours' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownStartTime, Minutes) == 0x000008, "Member 'RCNzHUDBFL_CountdownStartTime::Minutes' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownStartTime, Seconds) == 0x00000C, "Member 'RCNzHUDBFL_CountdownStartTime::Seconds' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownStartTime, Milliseconds) == 0x000010, "Member 'RCNzHUDBFL_CountdownStartTime::Milliseconds' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownStartTime, bWidgetOpen) == 0x000014, "Member 'RCNzHUDBFL_CountdownStartTime::bWidgetOpen' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownStop
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUDBFL_CountdownStop final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownStop) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownStop");
static_assert(sizeof(RCNzHUDBFL_CountdownStop) == 0x000001, "Wrong size on RCNzHUDBFL_CountdownStop");
static_assert(offsetof(RCNzHUDBFL_CountdownStop, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownStop::bSucceeded' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownWidgetClose
// 0x0002 (0x0002 - 0x0000)
struct RCNzHUDBFL_CountdownWidgetClose final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimerPause;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownWidgetClose) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownWidgetClose");
static_assert(sizeof(RCNzHUDBFL_CountdownWidgetClose) == 0x000002, "Wrong size on RCNzHUDBFL_CountdownWidgetClose");
static_assert(offsetof(RCNzHUDBFL_CountdownWidgetClose, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownWidgetClose::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCNzHUDBFL_CountdownWidgetClose, bTimerPause) == 0x000001, "Member 'RCNzHUDBFL_CountdownWidgetClose::bTimerPause' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownWidgetIsClosed
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUDBFL_CountdownWidgetIsClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownWidgetIsClosed) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownWidgetIsClosed");
static_assert(sizeof(RCNzHUDBFL_CountdownWidgetIsClosed) == 0x000001, "Wrong size on RCNzHUDBFL_CountdownWidgetIsClosed");
static_assert(offsetof(RCNzHUDBFL_CountdownWidgetIsClosed, ReturnValue) == 0x000000, "Member 'RCNzHUDBFL_CountdownWidgetIsClosed::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownWidgetIsOpened
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUDBFL_CountdownWidgetIsOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownWidgetIsOpened) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownWidgetIsOpened");
static_assert(sizeof(RCNzHUDBFL_CountdownWidgetIsOpened) == 0x000001, "Wrong size on RCNzHUDBFL_CountdownWidgetIsOpened");
static_assert(offsetof(RCNzHUDBFL_CountdownWidgetIsOpened, ReturnValue) == 0x000000, "Member 'RCNzHUDBFL_CountdownWidgetIsOpened::ReturnValue' has a wrong offset!");

// Function RC.RCNzHUDBFL.CountdownWidgetOpen
// 0x0001 (0x0001 - 0x0000)
struct RCNzHUDBFL_CountdownWidgetOpen final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_CountdownWidgetOpen) == 0x000001, "Wrong alignment on RCNzHUDBFL_CountdownWidgetOpen");
static_assert(sizeof(RCNzHUDBFL_CountdownWidgetOpen) == 0x000001, "Wrong size on RCNzHUDBFL_CountdownWidgetOpen");
static_assert(offsetof(RCNzHUDBFL_CountdownWidgetOpen, bSucceeded) == 0x000000, "Member 'RCNzHUDBFL_CountdownWidgetOpen::bSucceeded' has a wrong offset!");

// Function RC.RCNzHUDBFL.GetBattleCutinPriority
// 0x0004 (0x0004 - 0x0000)
struct RCNzHUDBFL_GetBattleCutinPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_GetBattleCutinPriority) == 0x000004, "Wrong alignment on RCNzHUDBFL_GetBattleCutinPriority");
static_assert(sizeof(RCNzHUDBFL_GetBattleCutinPriority) == 0x000004, "Wrong size on RCNzHUDBFL_GetBattleCutinPriority");
static_assert(offsetof(RCNzHUDBFL_GetBattleCutinPriority, Priority) == 0x000000, "Member 'RCNzHUDBFL_GetBattleCutinPriority::Priority' has a wrong offset!");

// Function RC.RCNzHUDBFL.GetNzHUD
// 0x0008 (0x0008 - 0x0000)
struct RCNzHUDBFL_GetNzHUD final
{
public:
	class ARCNzHUD*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzHUDBFL_GetNzHUD) == 0x000008, "Wrong alignment on RCNzHUDBFL_GetNzHUD");
static_assert(sizeof(RCNzHUDBFL_GetNzHUD) == 0x000008, "Wrong size on RCNzHUDBFL_GetNzHUD");
static_assert(offsetof(RCNzHUDBFL_GetNzHUD, ReturnValue) == 0x000000, "Member 'RCNzHUDBFL_GetNzHUD::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTB_FortActorBase.AttackFort
// 0x000C (0x000C - 0x0000)
struct RCNzMTB_FortActorBase_AttackFort final
{
public:
	bool                                          DamageCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitCount;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hp;                                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTB_FortActorBase_AttackFort) == 0x000004, "Wrong alignment on RCNzMTB_FortActorBase_AttackFort");
static_assert(sizeof(RCNzMTB_FortActorBase_AttackFort) == 0x00000C, "Wrong size on RCNzMTB_FortActorBase_AttackFort");
static_assert(offsetof(RCNzMTB_FortActorBase_AttackFort, DamageCheck) == 0x000000, "Member 'RCNzMTB_FortActorBase_AttackFort::DamageCheck' has a wrong offset!");
static_assert(offsetof(RCNzMTB_FortActorBase_AttackFort, Result) == 0x000001, "Member 'RCNzMTB_FortActorBase_AttackFort::Result' has a wrong offset!");
static_assert(offsetof(RCNzMTB_FortActorBase_AttackFort, HitCount) == 0x000004, "Member 'RCNzMTB_FortActorBase_AttackFort::HitCount' has a wrong offset!");
static_assert(offsetof(RCNzMTB_FortActorBase_AttackFort, Hp) == 0x000008, "Member 'RCNzMTB_FortActorBase_AttackFort::Hp' has a wrong offset!");

// Function RC.RCNzMTB_FortActorBase.CheckAnswerKaikagiID
// 0x000C (0x000C - 0x0000)
struct RCNzMTB_FortActorBase_CheckAnswerKaikagiID final
{
public:
	class FName                                   InKaiKagiID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzMTB_FortActorBase_CheckAnswerKaikagiID) == 0x000004, "Wrong alignment on RCNzMTB_FortActorBase_CheckAnswerKaikagiID");
static_assert(sizeof(RCNzMTB_FortActorBase_CheckAnswerKaikagiID) == 0x00000C, "Wrong size on RCNzMTB_FortActorBase_CheckAnswerKaikagiID");
static_assert(offsetof(RCNzMTB_FortActorBase_CheckAnswerKaikagiID, InKaiKagiID) == 0x000000, "Member 'RCNzMTB_FortActorBase_CheckAnswerKaikagiID::InKaiKagiID' has a wrong offset!");
static_assert(offsetof(RCNzMTB_FortActorBase_CheckAnswerKaikagiID, ReturnValue) == 0x000008, "Member 'RCNzMTB_FortActorBase_CheckAnswerKaikagiID::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTB_FortActorBase.LoadParamData
// 0x000C (0x000C - 0x0000)
struct RCNzMTB_FortActorBase_LoadParamData final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzMTB_FortActorBase_LoadParamData) == 0x000004, "Wrong alignment on RCNzMTB_FortActorBase_LoadParamData");
static_assert(sizeof(RCNzMTB_FortActorBase_LoadParamData) == 0x00000C, "Wrong size on RCNzMTB_FortActorBase_LoadParamData");
static_assert(offsetof(RCNzMTB_FortActorBase_LoadParamData, SceneID) == 0x000000, "Member 'RCNzMTB_FortActorBase_LoadParamData::SceneID' has a wrong offset!");
static_assert(offsetof(RCNzMTB_FortActorBase_LoadParamData, ReturnValue) == 0x000008, "Member 'RCNzMTB_FortActorBase_LoadParamData::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTB_FortActorBase.PlayFortTextVoice
// 0x0008 (0x0008 - 0x0000)
struct RCNzMTB_FortActorBase_PlayFortTextVoice final
{
public:
	class ARCCharacterRender*                     InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTB_FortActorBase_PlayFortTextVoice) == 0x000008, "Wrong alignment on RCNzMTB_FortActorBase_PlayFortTextVoice");
static_assert(sizeof(RCNzMTB_FortActorBase_PlayFortTextVoice) == 0x000008, "Wrong size on RCNzMTB_FortActorBase_PlayFortTextVoice");
static_assert(offsetof(RCNzMTB_FortActorBase_PlayFortTextVoice, InChara) == 0x000000, "Member 'RCNzMTB_FortActorBase_PlayFortTextVoice::InChara' has a wrong offset!");

// Function RC.RCNzMTB_FortActorBase.PlayTextVoice
// 0x0010 (0x0010 - 0x0000)
struct RCNzMTB_FortActorBase_PlayTextVoice final
{
public:
	class ARCCharacterRender*                     InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTB_FortActorBase_PlayTextVoice) == 0x000008, "Wrong alignment on RCNzMTB_FortActorBase_PlayTextVoice");
static_assert(sizeof(RCNzMTB_FortActorBase_PlayTextVoice) == 0x000010, "Wrong size on RCNzMTB_FortActorBase_PlayTextVoice");
static_assert(offsetof(RCNzMTB_FortActorBase_PlayTextVoice, InChara) == 0x000000, "Member 'RCNzMTB_FortActorBase_PlayTextVoice::InChara' has a wrong offset!");
static_assert(offsetof(RCNzMTB_FortActorBase_PlayTextVoice, VoiceID) == 0x000008, "Member 'RCNzMTB_FortActorBase_PlayTextVoice::VoiceID' has a wrong offset!");

// Function RC.RCNzMTB_WallActorBase.AttackWall
// 0x0002 (0x0002 - 0x0000)
struct RCNzMTB_WallActorBase_AttackWall final
{
public:
	EWallWeakPointType                            Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTB_WallActorBase_AttackWall) == 0x000001, "Wrong alignment on RCNzMTB_WallActorBase_AttackWall");
static_assert(sizeof(RCNzMTB_WallActorBase_AttackWall) == 0x000002, "Wrong size on RCNzMTB_WallActorBase_AttackWall");
static_assert(offsetof(RCNzMTB_WallActorBase_AttackWall, Type) == 0x000000, "Member 'RCNzMTB_WallActorBase_AttackWall::Type' has a wrong offset!");
static_assert(offsetof(RCNzMTB_WallActorBase_AttackWall, Result) == 0x000001, "Member 'RCNzMTB_WallActorBase_AttackWall::Result' has a wrong offset!");

// Function RC.RCNzMTB_WallActorBase.GetWallType
// 0x0001 (0x0001 - 0x0000)
struct RCNzMTB_WallActorBase_GetWallType final
{
public:
	EWallType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTB_WallActorBase_GetWallType) == 0x000001, "Wrong alignment on RCNzMTB_WallActorBase_GetWallType");
static_assert(sizeof(RCNzMTB_WallActorBase_GetWallType) == 0x000001, "Wrong size on RCNzMTB_WallActorBase_GetWallType");
static_assert(offsetof(RCNzMTB_WallActorBase_GetWallType, ReturnValue) == 0x000000, "Member 'RCNzMTB_WallActorBase_GetWallType::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTB_WallActorBase.LoadParamData
// 0x0010 (0x0010 - 0x0000)
struct RCNzMTB_WallActorBase_LoadParamData final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzMTB_WallActorBase_LoadParamData) == 0x000004, "Wrong alignment on RCNzMTB_WallActorBase_LoadParamData");
static_assert(sizeof(RCNzMTB_WallActorBase_LoadParamData) == 0x000010, "Wrong size on RCNzMTB_WallActorBase_LoadParamData");
static_assert(offsetof(RCNzMTB_WallActorBase_LoadParamData, SceneID) == 0x000000, "Member 'RCNzMTB_WallActorBase_LoadParamData::SceneID' has a wrong offset!");
static_assert(offsetof(RCNzMTB_WallActorBase_LoadParamData, Index_0) == 0x000008, "Member 'RCNzMTB_WallActorBase_LoadParamData::Index_0' has a wrong offset!");
static_assert(offsetof(RCNzMTB_WallActorBase_LoadParamData, ReturnValue) == 0x00000C, "Member 'RCNzMTB_WallActorBase_LoadParamData::ReturnValue' has a wrong offset!");

// Function RC.RCNzMTB_WallActorBase.PlayTextVoice
// 0x0010 (0x0010 - 0x0000)
struct RCNzMTB_WallActorBase_PlayTextVoice final
{
public:
	class ARCCharacterRender*                     InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTB_WallActorBase_PlayTextVoice) == 0x000008, "Wrong alignment on RCNzMTB_WallActorBase_PlayTextVoice");
static_assert(sizeof(RCNzMTB_WallActorBase_PlayTextVoice) == 0x000010, "Wrong size on RCNzMTB_WallActorBase_PlayTextVoice");
static_assert(offsetof(RCNzMTB_WallActorBase_PlayTextVoice, InChara) == 0x000000, "Member 'RCNzMTB_WallActorBase_PlayTextVoice::InChara' has a wrong offset!");
static_assert(offsetof(RCNzMTB_WallActorBase_PlayTextVoice, VoiceID) == 0x000008, "Member 'RCNzMTB_WallActorBase_PlayTextVoice::VoiceID' has a wrong offset!");

// Function RC.RCNzMTB_WallActorBase.PlayWallTextVoice
// 0x0008 (0x0008 - 0x0000)
struct RCNzMTB_WallActorBase_PlayWallTextVoice final
{
public:
	class ARCCharacterRender*                     InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzMTB_WallActorBase_PlayWallTextVoice) == 0x000008, "Wrong alignment on RCNzMTB_WallActorBase_PlayWallTextVoice");
static_assert(sizeof(RCNzMTB_WallActorBase_PlayWallTextVoice) == 0x000008, "Wrong size on RCNzMTB_WallActorBase_PlayWallTextVoice");
static_assert(offsetof(RCNzMTB_WallActorBase_PlayWallTextVoice, InChara) == 0x000000, "Member 'RCNzMTB_WallActorBase_PlayWallTextVoice::InChara' has a wrong offset!");

// Function RC.RCNzPazzleAnswerWordBase.AnswerCheck
// 0x0008 (0x0008 - 0x0000)
struct RCNzPazzleAnswerWordBase_AnswerCheck final
{
public:
	int32                                         answerID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzPazzleAnswerWordBase_AnswerCheck) == 0x000004, "Wrong alignment on RCNzPazzleAnswerWordBase_AnswerCheck");
static_assert(sizeof(RCNzPazzleAnswerWordBase_AnswerCheck) == 0x000008, "Wrong size on RCNzPazzleAnswerWordBase_AnswerCheck");
static_assert(offsetof(RCNzPazzleAnswerWordBase_AnswerCheck, answerID) == 0x000000, "Member 'RCNzPazzleAnswerWordBase_AnswerCheck::answerID' has a wrong offset!");
static_assert(offsetof(RCNzPazzleAnswerWordBase_AnswerCheck, ReturnValue) == 0x000004, "Member 'RCNzPazzleAnswerWordBase_AnswerCheck::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleAnswerWordBase.LoadAnswerList
// 0x000C (0x000C - 0x0000)
struct RCNzPazzleAnswerWordBase_LoadAnswerList final
{
public:
	class FName                                   SceneWordID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetBarrelIndex;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleAnswerWordBase_LoadAnswerList) == 0x000004, "Wrong alignment on RCNzPazzleAnswerWordBase_LoadAnswerList");
static_assert(sizeof(RCNzPazzleAnswerWordBase_LoadAnswerList) == 0x00000C, "Wrong size on RCNzPazzleAnswerWordBase_LoadAnswerList");
static_assert(offsetof(RCNzPazzleAnswerWordBase_LoadAnswerList, SceneWordID) == 0x000000, "Member 'RCNzPazzleAnswerWordBase_LoadAnswerList::SceneWordID' has a wrong offset!");
static_assert(offsetof(RCNzPazzleAnswerWordBase_LoadAnswerList, targetBarrelIndex) == 0x000008, "Member 'RCNzPazzleAnswerWordBase_LoadAnswerList::targetBarrelIndex' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.AddRotateCameraParent
// 0x000C (0x000C - 0x0000)
struct RCNzPazzleBarrelBase_AddRotateCameraParent final
{
public:
	struct FRotator                               addRot;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_AddRotateCameraParent) == 0x000004, "Wrong alignment on RCNzPazzleBarrelBase_AddRotateCameraParent");
static_assert(sizeof(RCNzPazzleBarrelBase_AddRotateCameraParent) == 0x00000C, "Wrong size on RCNzPazzleBarrelBase_AddRotateCameraParent");
static_assert(offsetof(RCNzPazzleBarrelBase_AddRotateCameraParent, addRot) == 0x000000, "Member 'RCNzPazzleBarrelBase_AddRotateCameraParent::addRot' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.AddZoomCamera
// 0x0004 (0x0004 - 0x0000)
struct RCNzPazzleBarrelBase_AddZoomCamera final
{
public:
	float                                         AddForward;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_AddZoomCamera) == 0x000004, "Wrong alignment on RCNzPazzleBarrelBase_AddZoomCamera");
static_assert(sizeof(RCNzPazzleBarrelBase_AddZoomCamera) == 0x000004, "Wrong size on RCNzPazzleBarrelBase_AddZoomCamera");
static_assert(offsetof(RCNzPazzleBarrelBase_AddZoomCamera, AddForward) == 0x000000, "Member 'RCNzPazzleBarrelBase_AddZoomCamera::AddForward' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.ChangeRotate
// 0x0001 (0x0001 - 0x0000)
struct RCNzPazzleBarrelBase_ChangeRotate final
{
public:
	bool                                          isRot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_ChangeRotate) == 0x000001, "Wrong alignment on RCNzPazzleBarrelBase_ChangeRotate");
static_assert(sizeof(RCNzPazzleBarrelBase_ChangeRotate) == 0x000001, "Wrong size on RCNzPazzleBarrelBase_ChangeRotate");
static_assert(offsetof(RCNzPazzleBarrelBase_ChangeRotate, isRot) == 0x000000, "Member 'RCNzPazzleBarrelBase_ChangeRotate::isRot' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.GetAnswerWordActorList
// 0x0010 (0x0010 - 0x0000)
struct RCNzPazzleBarrelBase_GetAnswerWordActorList final
{
public:
	TArray<class ARCNzPazzleAnswerWordBase*>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_GetAnswerWordActorList) == 0x000008, "Wrong alignment on RCNzPazzleBarrelBase_GetAnswerWordActorList");
static_assert(sizeof(RCNzPazzleBarrelBase_GetAnswerWordActorList) == 0x000010, "Wrong size on RCNzPazzleBarrelBase_GetAnswerWordActorList");
static_assert(offsetof(RCNzPazzleBarrelBase_GetAnswerWordActorList, ReturnValue) == 0x000000, "Member 'RCNzPazzleBarrelBase_GetAnswerWordActorList::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.GetRotateSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCNzPazzleBarrelBase_GetRotateSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_GetRotateSpeed) == 0x000004, "Wrong alignment on RCNzPazzleBarrelBase_GetRotateSpeed");
static_assert(sizeof(RCNzPazzleBarrelBase_GetRotateSpeed) == 0x000004, "Wrong size on RCNzPazzleBarrelBase_GetRotateSpeed");
static_assert(offsetof(RCNzPazzleBarrelBase_GetRotateSpeed, ReturnValue) == 0x000000, "Member 'RCNzPazzleBarrelBase_GetRotateSpeed::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.GetRotateSpeedScale
// 0x0004 (0x0004 - 0x0000)
struct RCNzPazzleBarrelBase_GetRotateSpeedScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_GetRotateSpeedScale) == 0x000004, "Wrong alignment on RCNzPazzleBarrelBase_GetRotateSpeedScale");
static_assert(sizeof(RCNzPazzleBarrelBase_GetRotateSpeedScale) == 0x000004, "Wrong size on RCNzPazzleBarrelBase_GetRotateSpeedScale");
static_assert(offsetof(RCNzPazzleBarrelBase_GetRotateSpeedScale, ReturnValue) == 0x000000, "Member 'RCNzPazzleBarrelBase_GetRotateSpeedScale::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.InitializeAnswerWord
// 0x0068 (0x0068 - 0x0000)
struct RCNzPazzleBarrelBase_InitializeAnswerWord final
{
public:
	TArray<class FText>                           UpperTextList;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 UpperTextPosList;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FText>                           LowerTextList;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 LowerTextPosList;                                  // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     UpperTextTextureList;                              // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     LowerTextTextureList;                              // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_InitializeAnswerWord) == 0x000008, "Wrong alignment on RCNzPazzleBarrelBase_InitializeAnswerWord");
static_assert(sizeof(RCNzPazzleBarrelBase_InitializeAnswerWord) == 0x000068, "Wrong size on RCNzPazzleBarrelBase_InitializeAnswerWord");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeAnswerWord, UpperTextList) == 0x000000, "Member 'RCNzPazzleBarrelBase_InitializeAnswerWord::UpperTextList' has a wrong offset!");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeAnswerWord, UpperTextPosList) == 0x000010, "Member 'RCNzPazzleBarrelBase_InitializeAnswerWord::UpperTextPosList' has a wrong offset!");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeAnswerWord, LowerTextList) == 0x000020, "Member 'RCNzPazzleBarrelBase_InitializeAnswerWord::LowerTextList' has a wrong offset!");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeAnswerWord, LowerTextPosList) == 0x000030, "Member 'RCNzPazzleBarrelBase_InitializeAnswerWord::LowerTextPosList' has a wrong offset!");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeAnswerWord, UpperTextTextureList) == 0x000040, "Member 'RCNzPazzleBarrelBase_InitializeAnswerWord::UpperTextTextureList' has a wrong offset!");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeAnswerWord, LowerTextTextureList) == 0x000050, "Member 'RCNzPazzleBarrelBase_InitializeAnswerWord::LowerTextTextureList' has a wrong offset!");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeAnswerWord, SceneID) == 0x000060, "Member 'RCNzPazzleBarrelBase_InitializeAnswerWord::SceneID' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.InitializeKaikagiActor
// 0x0028 (0x0028 - 0x0000)
struct RCNzPazzleBarrelBase_InitializeKaikagiActor final
{
public:
	TArray<class FString>                         KaikagiNameList;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         KaikagiTextList;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzPazzleBarrelBase_InitializeKaikagiActor) == 0x000008, "Wrong alignment on RCNzPazzleBarrelBase_InitializeKaikagiActor");
static_assert(sizeof(RCNzPazzleBarrelBase_InitializeKaikagiActor) == 0x000028, "Wrong size on RCNzPazzleBarrelBase_InitializeKaikagiActor");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeKaikagiActor, KaikagiNameList) == 0x000000, "Member 'RCNzPazzleBarrelBase_InitializeKaikagiActor::KaikagiNameList' has a wrong offset!");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeKaikagiActor, KaikagiTextList) == 0x000010, "Member 'RCNzPazzleBarrelBase_InitializeKaikagiActor::KaikagiTextList' has a wrong offset!");
static_assert(offsetof(RCNzPazzleBarrelBase_InitializeKaikagiActor, Length) == 0x000020, "Member 'RCNzPazzleBarrelBase_InitializeKaikagiActor::Length' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.PlayVoice
// 0x0010 (0x0010 - 0x0000)
struct RCNzPazzleBarrelBase_PlayVoice final
{
public:
	class ARCCharacterRender*                     InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_PlayVoice) == 0x000008, "Wrong alignment on RCNzPazzleBarrelBase_PlayVoice");
static_assert(sizeof(RCNzPazzleBarrelBase_PlayVoice) == 0x000010, "Wrong size on RCNzPazzleBarrelBase_PlayVoice");
static_assert(offsetof(RCNzPazzleBarrelBase_PlayVoice, InChara) == 0x000000, "Member 'RCNzPazzleBarrelBase_PlayVoice::InChara' has a wrong offset!");
static_assert(offsetof(RCNzPazzleBarrelBase_PlayVoice, VoiceID) == 0x000008, "Member 'RCNzPazzleBarrelBase_PlayVoice::VoiceID' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.SetKaikagiListLocation
// 0x0004 (0x0004 - 0x0000)
struct RCNzPazzleBarrelBase_SetKaikagiListLocation final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_SetKaikagiListLocation) == 0x000004, "Wrong alignment on RCNzPazzleBarrelBase_SetKaikagiListLocation");
static_assert(sizeof(RCNzPazzleBarrelBase_SetKaikagiListLocation) == 0x000004, "Wrong size on RCNzPazzleBarrelBase_SetKaikagiListLocation");
static_assert(offsetof(RCNzPazzleBarrelBase_SetKaikagiListLocation, Length) == 0x000000, "Member 'RCNzPazzleBarrelBase_SetKaikagiListLocation::Length' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.SetRotateCameraParent
// 0x000C (0x000C - 0x0000)
struct RCNzPazzleBarrelBase_SetRotateCameraParent final
{
public:
	struct FRotator                               NewRot;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_SetRotateCameraParent) == 0x000004, "Wrong alignment on RCNzPazzleBarrelBase_SetRotateCameraParent");
static_assert(sizeof(RCNzPazzleBarrelBase_SetRotateCameraParent) == 0x00000C, "Wrong size on RCNzPazzleBarrelBase_SetRotateCameraParent");
static_assert(offsetof(RCNzPazzleBarrelBase_SetRotateCameraParent, NewRot) == 0x000000, "Member 'RCNzPazzleBarrelBase_SetRotateCameraParent::NewRot' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.SetRotateCameraParentForPointer
// 0x0008 (0x0008 - 0x0000)
struct RCNzPazzleBarrelBase_SetRotateCameraParentForPointer final
{
public:
	struct FVector2D                              pointerPos;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_SetRotateCameraParentForPointer) == 0x000004, "Wrong alignment on RCNzPazzleBarrelBase_SetRotateCameraParentForPointer");
static_assert(sizeof(RCNzPazzleBarrelBase_SetRotateCameraParentForPointer) == 0x000008, "Wrong size on RCNzPazzleBarrelBase_SetRotateCameraParentForPointer");
static_assert(offsetof(RCNzPazzleBarrelBase_SetRotateCameraParentForPointer, pointerPos) == 0x000000, "Member 'RCNzPazzleBarrelBase_SetRotateCameraParentForPointer::pointerPos' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.SetRotateSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCNzPazzleBarrelBase_SetRotateSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_SetRotateSpeed) == 0x000004, "Wrong alignment on RCNzPazzleBarrelBase_SetRotateSpeed");
static_assert(sizeof(RCNzPazzleBarrelBase_SetRotateSpeed) == 0x000004, "Wrong size on RCNzPazzleBarrelBase_SetRotateSpeed");
static_assert(offsetof(RCNzPazzleBarrelBase_SetRotateSpeed, Speed) == 0x000000, "Member 'RCNzPazzleBarrelBase_SetRotateSpeed::Speed' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.SetRotateSpeedScale
// 0x0004 (0x0004 - 0x0000)
struct RCNzPazzleBarrelBase_SetRotateSpeedScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_SetRotateSpeedScale) == 0x000004, "Wrong alignment on RCNzPazzleBarrelBase_SetRotateSpeedScale");
static_assert(sizeof(RCNzPazzleBarrelBase_SetRotateSpeedScale) == 0x000004, "Wrong size on RCNzPazzleBarrelBase_SetRotateSpeedScale");
static_assert(offsetof(RCNzPazzleBarrelBase_SetRotateSpeedScale, Scale) == 0x000000, "Member 'RCNzPazzleBarrelBase_SetRotateSpeedScale::Scale' has a wrong offset!");

// Function RC.RCNzPazzleBarrelBase.SwitchIsRotate
// 0x0001 (0x0001 - 0x0000)
struct RCNzPazzleBarrelBase_SwitchIsRotate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleBarrelBase_SwitchIsRotate) == 0x000001, "Wrong alignment on RCNzPazzleBarrelBase_SwitchIsRotate");
static_assert(sizeof(RCNzPazzleBarrelBase_SwitchIsRotate) == 0x000001, "Wrong size on RCNzPazzleBarrelBase_SwitchIsRotate");
static_assert(offsetof(RCNzPazzleBarrelBase_SwitchIsRotate, ReturnValue) == 0x000000, "Member 'RCNzPazzleBarrelBase_SwitchIsRotate::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleKaikagiActorBase.GetCapText
// 0x0010 (0x0010 - 0x0000)
struct RCNzPazzleKaikagiActorBase_GetCapText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleKaikagiActorBase_GetCapText) == 0x000008, "Wrong alignment on RCNzPazzleKaikagiActorBase_GetCapText");
static_assert(sizeof(RCNzPazzleKaikagiActorBase_GetCapText) == 0x000010, "Wrong size on RCNzPazzleKaikagiActorBase_GetCapText");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_GetCapText, ReturnValue) == 0x000000, "Member 'RCNzPazzleKaikagiActorBase_GetCapText::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleKaikagiActorBase.GetKaikagiTextData
// 0x0020 (0x0020 - 0x0000)
struct RCNzPazzleKaikagiActorBase_GetKaikagiTextData final
{
public:
	class FString                                 nameText;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 capText;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleKaikagiActorBase_GetKaikagiTextData) == 0x000008, "Wrong alignment on RCNzPazzleKaikagiActorBase_GetKaikagiTextData");
static_assert(sizeof(RCNzPazzleKaikagiActorBase_GetKaikagiTextData) == 0x000020, "Wrong size on RCNzPazzleKaikagiActorBase_GetKaikagiTextData");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_GetKaikagiTextData, nameText) == 0x000000, "Member 'RCNzPazzleKaikagiActorBase_GetKaikagiTextData::nameText' has a wrong offset!");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_GetKaikagiTextData, capText) == 0x000010, "Member 'RCNzPazzleKaikagiActorBase_GetKaikagiTextData::capText' has a wrong offset!");

// Function RC.RCNzPazzleKaikagiActorBase.GetNameText
// 0x0010 (0x0010 - 0x0000)
struct RCNzPazzleKaikagiActorBase_GetNameText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleKaikagiActorBase_GetNameText) == 0x000008, "Wrong alignment on RCNzPazzleKaikagiActorBase_GetNameText");
static_assert(sizeof(RCNzPazzleKaikagiActorBase_GetNameText) == 0x000010, "Wrong size on RCNzPazzleKaikagiActorBase_GetNameText");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_GetNameText, ReturnValue) == 0x000000, "Member 'RCNzPazzleKaikagiActorBase_GetNameText::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleKaikagiActorBase.HoldMove
// 0x000C (0x000C - 0x0000)
struct RCNzPazzleKaikagiActorBase_HoldMove final
{
public:
	struct FVector                                nextLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleKaikagiActorBase_HoldMove) == 0x000004, "Wrong alignment on RCNzPazzleKaikagiActorBase_HoldMove");
static_assert(sizeof(RCNzPazzleKaikagiActorBase_HoldMove) == 0x00000C, "Wrong size on RCNzPazzleKaikagiActorBase_HoldMove");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_HoldMove, nextLocation) == 0x000000, "Member 'RCNzPazzleKaikagiActorBase_HoldMove::nextLocation' has a wrong offset!");

// Function RC.RCNzPazzleKaikagiActorBase.Initialize
// 0x0020 (0x0020 - 0x0000)
struct RCNzPazzleKaikagiActorBase_Initialize final
{
public:
	class FString                                 kaikagiName_0;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 kaikagiCapText_0;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleKaikagiActorBase_Initialize) == 0x000008, "Wrong alignment on RCNzPazzleKaikagiActorBase_Initialize");
static_assert(sizeof(RCNzPazzleKaikagiActorBase_Initialize) == 0x000020, "Wrong size on RCNzPazzleKaikagiActorBase_Initialize");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_Initialize, kaikagiName_0) == 0x000000, "Member 'RCNzPazzleKaikagiActorBase_Initialize::kaikagiName_0' has a wrong offset!");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_Initialize, kaikagiCapText_0) == 0x000010, "Member 'RCNzPazzleKaikagiActorBase_Initialize::kaikagiCapText_0' has a wrong offset!");

// Function RC.RCNzPazzleKaikagiActorBase.SetKaikagiTextSize
// 0x0004 (0x0004 - 0x0000)
struct RCNzPazzleKaikagiActorBase_SetKaikagiTextSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleKaikagiActorBase_SetKaikagiTextSize) == 0x000004, "Wrong alignment on RCNzPazzleKaikagiActorBase_SetKaikagiTextSize");
static_assert(sizeof(RCNzPazzleKaikagiActorBase_SetKaikagiTextSize) == 0x000004, "Wrong size on RCNzPazzleKaikagiActorBase_SetKaikagiTextSize");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_SetKaikagiTextSize, Size) == 0x000000, "Member 'RCNzPazzleKaikagiActorBase_SetKaikagiTextSize::Size' has a wrong offset!");

// Function RC.RCNzPazzleKaikagiActorBase.SetStartTransform
// 0x0040 (0x0040 - 0x0000)
struct RCNzPazzleKaikagiActorBase_SetStartTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ParentActor;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzPazzleKaikagiActorBase_SetStartTransform) == 0x000010, "Wrong alignment on RCNzPazzleKaikagiActorBase_SetStartTransform");
static_assert(sizeof(RCNzPazzleKaikagiActorBase_SetStartTransform) == 0x000040, "Wrong size on RCNzPazzleKaikagiActorBase_SetStartTransform");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_SetStartTransform, Transform) == 0x000000, "Member 'RCNzPazzleKaikagiActorBase_SetStartTransform::Transform' has a wrong offset!");
static_assert(offsetof(RCNzPazzleKaikagiActorBase_SetStartTransform, ParentActor) == 0x000030, "Member 'RCNzPazzleKaikagiActorBase_SetStartTransform::ParentActor' has a wrong offset!");

// Function RC.RCNzPazzleManagerBase.GetKaikagiData
// 0x0028 (0x0028 - 0x0000)
struct RCNzPazzleManagerBase_GetKaikagiData final
{
public:
	int32                                         listLength;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         kaikagiNameTextList;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         KaikagiTextList;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleManagerBase_GetKaikagiData) == 0x000008, "Wrong alignment on RCNzPazzleManagerBase_GetKaikagiData");
static_assert(sizeof(RCNzPazzleManagerBase_GetKaikagiData) == 0x000028, "Wrong size on RCNzPazzleManagerBase_GetKaikagiData");
static_assert(offsetof(RCNzPazzleManagerBase_GetKaikagiData, listLength) == 0x000000, "Member 'RCNzPazzleManagerBase_GetKaikagiData::listLength' has a wrong offset!");
static_assert(offsetof(RCNzPazzleManagerBase_GetKaikagiData, kaikagiNameTextList) == 0x000008, "Member 'RCNzPazzleManagerBase_GetKaikagiData::kaikagiNameTextList' has a wrong offset!");
static_assert(offsetof(RCNzPazzleManagerBase_GetKaikagiData, KaikagiTextList) == 0x000018, "Member 'RCNzPazzleManagerBase_GetKaikagiData::KaikagiTextList' has a wrong offset!");

// Function RC.RCNzPazzleManagerBase.GetKaikagiNameText
// 0x0018 (0x0018 - 0x0000)
struct RCNzPazzleManagerBase_GetKaikagiNameText final
{
public:
	class FName                                   InKaiKagiID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 kaikagiNameText;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleManagerBase_GetKaikagiNameText) == 0x000008, "Wrong alignment on RCNzPazzleManagerBase_GetKaikagiNameText");
static_assert(sizeof(RCNzPazzleManagerBase_GetKaikagiNameText) == 0x000018, "Wrong size on RCNzPazzleManagerBase_GetKaikagiNameText");
static_assert(offsetof(RCNzPazzleManagerBase_GetKaikagiNameText, InKaiKagiID) == 0x000000, "Member 'RCNzPazzleManagerBase_GetKaikagiNameText::InKaiKagiID' has a wrong offset!");
static_assert(offsetof(RCNzPazzleManagerBase_GetKaikagiNameText, kaikagiNameText) == 0x000008, "Member 'RCNzPazzleManagerBase_GetKaikagiNameText::kaikagiNameText' has a wrong offset!");

// Function RC.RCNzPazzleManagerBase.GetSceneIDFName
// 0x0008 (0x0008 - 0x0000)
struct RCNzPazzleManagerBase_GetSceneIDFName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleManagerBase_GetSceneIDFName) == 0x000004, "Wrong alignment on RCNzPazzleManagerBase_GetSceneIDFName");
static_assert(sizeof(RCNzPazzleManagerBase_GetSceneIDFName) == 0x000008, "Wrong size on RCNzPazzleManagerBase_GetSceneIDFName");
static_assert(offsetof(RCNzPazzleManagerBase_GetSceneIDFName, ReturnValue) == 0x000000, "Member 'RCNzPazzleManagerBase_GetSceneIDFName::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleManagerBase.InitFocusIndex
// 0x0004 (0x0004 - 0x0000)
struct RCNzPazzleManagerBase_InitFocusIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleManagerBase_InitFocusIndex) == 0x000004, "Wrong alignment on RCNzPazzleManagerBase_InitFocusIndex");
static_assert(sizeof(RCNzPazzleManagerBase_InitFocusIndex) == 0x000004, "Wrong size on RCNzPazzleManagerBase_InitFocusIndex");
static_assert(offsetof(RCNzPazzleManagerBase_InitFocusIndex, ReturnValue) == 0x000000, "Member 'RCNzPazzleManagerBase_InitFocusIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleManagerBase.InitializeBarrelWord
// 0x0004 (0x0004 - 0x0000)
struct RCNzPazzleManagerBase_InitializeBarrelWord final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleManagerBase_InitializeBarrelWord) == 0x000004, "Wrong alignment on RCNzPazzleManagerBase_InitializeBarrelWord");
static_assert(sizeof(RCNzPazzleManagerBase_InitializeBarrelWord) == 0x000004, "Wrong size on RCNzPazzleManagerBase_InitializeBarrelWord");
static_assert(offsetof(RCNzPazzleManagerBase_InitializeBarrelWord, ReturnValue) == 0x000000, "Member 'RCNzPazzleManagerBase_InitializeBarrelWord::ReturnValue' has a wrong offset!");

// Function RC.RCNzPazzleManagerBase.NextFocusIndex
// 0x0008 (0x0008 - 0x0000)
struct RCNzPazzleManagerBase_NextFocusIndex final
{
public:
	bool                                          bAnimation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPazzleManagerBase_NextFocusIndex) == 0x000004, "Wrong alignment on RCNzPazzleManagerBase_NextFocusIndex");
static_assert(sizeof(RCNzPazzleManagerBase_NextFocusIndex) == 0x000008, "Wrong size on RCNzPazzleManagerBase_NextFocusIndex");
static_assert(offsetof(RCNzPazzleManagerBase_NextFocusIndex, bAnimation) == 0x000000, "Member 'RCNzPazzleManagerBase_NextFocusIndex::bAnimation' has a wrong offset!");
static_assert(offsetof(RCNzPazzleManagerBase_NextFocusIndex, ReturnValue) == 0x000004, "Member 'RCNzPazzleManagerBase_NextFocusIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzle3DText.CheckTextID
// 0x0028 (0x0028 - 0x0000)
struct RCNzPuzzle3DText_CheckTextID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   resultText;                                        // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzPuzzle3DText_CheckTextID) == 0x000008, "Wrong alignment on RCNzPuzzle3DText_CheckTextID");
static_assert(sizeof(RCNzPuzzle3DText_CheckTextID) == 0x000028, "Wrong size on RCNzPuzzle3DText_CheckTextID");
static_assert(offsetof(RCNzPuzzle3DText_CheckTextID, ID) == 0x000000, "Member 'RCNzPuzzle3DText_CheckTextID::ID' has a wrong offset!");
static_assert(offsetof(RCNzPuzzle3DText_CheckTextID, resultText) == 0x000008, "Member 'RCNzPuzzle3DText_CheckTextID::resultText' has a wrong offset!");
static_assert(offsetof(RCNzPuzzle3DText_CheckTextID, ReturnValue) == 0x000020, "Member 'RCNzPuzzle3DText_CheckTextID::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleAnswerLayoutBase.SetAnswer
// 0x0018 (0x0018 - 0x0000)
struct RCNzPuzzleAnswerLayoutBase_SetAnswer final
{
public:
	int32                                         wordPos;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   wordText;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             wordTexture;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleAnswerLayoutBase_SetAnswer) == 0x000008, "Wrong alignment on RCNzPuzzleAnswerLayoutBase_SetAnswer");
static_assert(sizeof(RCNzPuzzleAnswerLayoutBase_SetAnswer) == 0x000018, "Wrong size on RCNzPuzzleAnswerLayoutBase_SetAnswer");
static_assert(offsetof(RCNzPuzzleAnswerLayoutBase_SetAnswer, wordPos) == 0x000000, "Member 'RCNzPuzzleAnswerLayoutBase_SetAnswer::wordPos' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleAnswerLayoutBase_SetAnswer, wordText) == 0x000004, "Member 'RCNzPuzzleAnswerLayoutBase_SetAnswer::wordText' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleAnswerLayoutBase_SetAnswer, wordTexture) == 0x000010, "Member 'RCNzPuzzleAnswerLayoutBase_SetAnswer::wordTexture' has a wrong offset!");

// Function RC.RCNzPuzzleAnswerLayoutBase.SetWordList
// 0x0004 (0x0004 - 0x0000)
struct RCNzPuzzleAnswerLayoutBase_SetWordList final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleAnswerLayoutBase_SetWordList) == 0x000004, "Wrong alignment on RCNzPuzzleAnswerLayoutBase_SetWordList");
static_assert(sizeof(RCNzPuzzleAnswerLayoutBase_SetWordList) == 0x000004, "Wrong size on RCNzPuzzleAnswerLayoutBase_SetWordList");
static_assert(offsetof(RCNzPuzzleAnswerLayoutBase_SetWordList, Length) == 0x000000, "Member 'RCNzPuzzleAnswerLayoutBase_SetWordList::Length' has a wrong offset!");

// Function RC.RCNzPuzzleCameraActor.CalcKaikagiSpawnLocationList
// 0x0030 (0x0030 - 0x0000)
struct RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList final
{
public:
	TArray<struct FVector>                        locList;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        dirList;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        HintDirList;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList) == 0x000008, "Wrong alignment on RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList");
static_assert(sizeof(RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList) == 0x000030, "Wrong size on RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList");
static_assert(offsetof(RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList, locList) == 0x000000, "Member 'RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList::locList' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList, dirList) == 0x000010, "Member 'RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList::dirList' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList, HintDirList) == 0x000020, "Member 'RCNzPuzzleCameraActor_CalcKaikagiSpawnLocationList::HintDirList' has a wrong offset!");

// Function RC.RCNzPuzzleCameraActor.GetKaikagiDistance
// 0x0004 (0x0004 - 0x0000)
struct RCNzPuzzleCameraActor_GetKaikagiDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleCameraActor_GetKaikagiDistance) == 0x000004, "Wrong alignment on RCNzPuzzleCameraActor_GetKaikagiDistance");
static_assert(sizeof(RCNzPuzzleCameraActor_GetKaikagiDistance) == 0x000004, "Wrong size on RCNzPuzzleCameraActor_GetKaikagiDistance");
static_assert(offsetof(RCNzPuzzleCameraActor_GetKaikagiDistance, ReturnValue) == 0x000000, "Member 'RCNzPuzzleCameraActor_GetKaikagiDistance::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleCameraActor.InitializeKaikagiActor
// 0x0028 (0x0028 - 0x0000)
struct RCNzPuzzleCameraActor_InitializeKaikagiActor final
{
public:
	TArray<class FString>                         KaikagiNameList;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         KaikagiTextList;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WordSize;                                          // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleCameraActor_InitializeKaikagiActor) == 0x000008, "Wrong alignment on RCNzPuzzleCameraActor_InitializeKaikagiActor");
static_assert(sizeof(RCNzPuzzleCameraActor_InitializeKaikagiActor) == 0x000028, "Wrong size on RCNzPuzzleCameraActor_InitializeKaikagiActor");
static_assert(offsetof(RCNzPuzzleCameraActor_InitializeKaikagiActor, KaikagiNameList) == 0x000000, "Member 'RCNzPuzzleCameraActor_InitializeKaikagiActor::KaikagiNameList' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleCameraActor_InitializeKaikagiActor, KaikagiTextList) == 0x000010, "Member 'RCNzPuzzleCameraActor_InitializeKaikagiActor::KaikagiTextList' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleCameraActor_InitializeKaikagiActor, Length) == 0x000020, "Member 'RCNzPuzzleCameraActor_InitializeKaikagiActor::Length' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleCameraActor_InitializeKaikagiActor, WordSize) == 0x000024, "Member 'RCNzPuzzleCameraActor_InitializeKaikagiActor::WordSize' has a wrong offset!");

// Function RC.RCNzPuzzleCameraActor.SetKaikagiListLocation
// 0x0004 (0x0004 - 0x0000)
struct RCNzPuzzleCameraActor_SetKaikagiListLocation final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleCameraActor_SetKaikagiListLocation) == 0x000004, "Wrong alignment on RCNzPuzzleCameraActor_SetKaikagiListLocation");
static_assert(sizeof(RCNzPuzzleCameraActor_SetKaikagiListLocation) == 0x000004, "Wrong size on RCNzPuzzleCameraActor_SetKaikagiListLocation");
static_assert(offsetof(RCNzPuzzleCameraActor_SetKaikagiListLocation, Length) == 0x000000, "Member 'RCNzPuzzleCameraActor_SetKaikagiListLocation::Length' has a wrong offset!");

// Function RC.RCNzPuzzleCameraActor.SetZoomLength
// 0x0004 (0x0004 - 0x0000)
struct RCNzPuzzleCameraActor_SetZoomLength final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleCameraActor_SetZoomLength) == 0x000004, "Wrong alignment on RCNzPuzzleCameraActor_SetZoomLength");
static_assert(sizeof(RCNzPuzzleCameraActor_SetZoomLength) == 0x000004, "Wrong size on RCNzPuzzleCameraActor_SetZoomLength");
static_assert(offsetof(RCNzPuzzleCameraActor_SetZoomLength, Length) == 0x000000, "Member 'RCNzPuzzleCameraActor_SetZoomLength::Length' has a wrong offset!");

// Function RC.RCNzPuzzleHintBalloonBase.CheckCursorHover
// 0x000C (0x000C - 0x0000)
struct RCNzPuzzleHintBalloonBase_CheckCursorHover final
{
public:
	struct FVector2D                              cursorPos;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzPuzzleHintBalloonBase_CheckCursorHover) == 0x000004, "Wrong alignment on RCNzPuzzleHintBalloonBase_CheckCursorHover");
static_assert(sizeof(RCNzPuzzleHintBalloonBase_CheckCursorHover) == 0x00000C, "Wrong size on RCNzPuzzleHintBalloonBase_CheckCursorHover");
static_assert(offsetof(RCNzPuzzleHintBalloonBase_CheckCursorHover, cursorPos) == 0x000000, "Member 'RCNzPuzzleHintBalloonBase_CheckCursorHover::cursorPos' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleHintBalloonBase_CheckCursorHover, ReturnValue) == 0x000008, "Member 'RCNzPuzzleHintBalloonBase_CheckCursorHover::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleHintBalloonBase.SetWidgetPosition
// 0x0008 (0x0008 - 0x0000)
struct RCNzPuzzleHintBalloonBase_SetWidgetPosition final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleHintBalloonBase_SetWidgetPosition) == 0x000004, "Wrong alignment on RCNzPuzzleHintBalloonBase_SetWidgetPosition");
static_assert(sizeof(RCNzPuzzleHintBalloonBase_SetWidgetPosition) == 0x000008, "Wrong size on RCNzPuzzleHintBalloonBase_SetWidgetPosition");
static_assert(offsetof(RCNzPuzzleHintBalloonBase_SetWidgetPosition, NewPosition) == 0x000000, "Member 'RCNzPuzzleHintBalloonBase_SetWidgetPosition::NewPosition' has a wrong offset!");

// Function RC.RCNzPuzzleHintBalloonBase.ShowHint
// 0x0020 (0x0020 - 0x0000)
struct RCNzPuzzleHintBalloonBase_ShowHint final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FName                                   VoiceID_0;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleHintBalloonBase_ShowHint) == 0x000008, "Wrong alignment on RCNzPuzzleHintBalloonBase_ShowHint");
static_assert(sizeof(RCNzPuzzleHintBalloonBase_ShowHint) == 0x000020, "Wrong size on RCNzPuzzleHintBalloonBase_ShowHint");
static_assert(offsetof(RCNzPuzzleHintBalloonBase_ShowHint, Text) == 0x000000, "Member 'RCNzPuzzleHintBalloonBase_ShowHint::Text' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleHintBalloonBase_ShowHint, VoiceID_0) == 0x000018, "Member 'RCNzPuzzleHintBalloonBase_ShowHint::VoiceID_0' has a wrong offset!");

// Function RC.RCNzPuzzleHintBalloonTextBase.GetHintText
// 0x0018 (0x0018 - 0x0000)
struct RCNzPuzzleHintBalloonTextBase_GetHintText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleHintBalloonTextBase_GetHintText) == 0x000008, "Wrong alignment on RCNzPuzzleHintBalloonTextBase_GetHintText");
static_assert(sizeof(RCNzPuzzleHintBalloonTextBase_GetHintText) == 0x000018, "Wrong size on RCNzPuzzleHintBalloonTextBase_GetHintText");
static_assert(offsetof(RCNzPuzzleHintBalloonTextBase_GetHintText, ReturnValue) == 0x000000, "Member 'RCNzPuzzleHintBalloonTextBase_GetHintText::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleHintBalloonTextBase.SetHintText
// 0x0018 (0x0018 - 0x0000)
struct RCNzPuzzleHintBalloonTextBase_SetHintText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleHintBalloonTextBase_SetHintText) == 0x000008, "Wrong alignment on RCNzPuzzleHintBalloonTextBase_SetHintText");
static_assert(sizeof(RCNzPuzzleHintBalloonTextBase_SetHintText) == 0x000018, "Wrong size on RCNzPuzzleHintBalloonTextBase_SetHintText");
static_assert(offsetof(RCNzPuzzleHintBalloonTextBase_SetHintText, Text) == 0x000000, "Member 'RCNzPuzzleHintBalloonTextBase_SetHintText::Text' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.CalcIsHoverCursor
// 0x002C (0x002C - 0x0000)
struct RCNzPuzzleMainLayoutBase_CalcIsHoverCursor final
{
public:
	struct FMargin                                Offsets;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              halfViewportSize;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              cursorPos;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLeft;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_CalcIsHoverCursor) == 0x000004, "Wrong alignment on RCNzPuzzleMainLayoutBase_CalcIsHoverCursor");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_CalcIsHoverCursor) == 0x00002C, "Wrong size on RCNzPuzzleMainLayoutBase_CalcIsHoverCursor");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_CalcIsHoverCursor, Offsets) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_CalcIsHoverCursor::Offsets' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_CalcIsHoverCursor, Size) == 0x000010, "Member 'RCNzPuzzleMainLayoutBase_CalcIsHoverCursor::Size' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_CalcIsHoverCursor, halfViewportSize) == 0x000018, "Member 'RCNzPuzzleMainLayoutBase_CalcIsHoverCursor::halfViewportSize' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_CalcIsHoverCursor, cursorPos) == 0x000020, "Member 'RCNzPuzzleMainLayoutBase_CalcIsHoverCursor::cursorPos' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_CalcIsHoverCursor, isLeft) == 0x000028, "Member 'RCNzPuzzleMainLayoutBase_CalcIsHoverCursor::isLeft' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_CalcIsHoverCursor, ReturnValue) == 0x000029, "Member 'RCNzPuzzleMainLayoutBase_CalcIsHoverCursor::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.CheckPointerHoverType
// 0x0002 (0x0002 - 0x0000)
struct RCNzPuzzleMainLayoutBase_CheckPointerHoverType final
{
public:
	EPuzzlePointerHoverType                       Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_CheckPointerHoverType) == 0x000001, "Wrong alignment on RCNzPuzzleMainLayoutBase_CheckPointerHoverType");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_CheckPointerHoverType) == 0x000002, "Wrong size on RCNzPuzzleMainLayoutBase_CheckPointerHoverType");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_CheckPointerHoverType, Type) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_CheckPointerHoverType::Type' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_CheckPointerHoverType, ReturnValue) == 0x000001, "Member 'RCNzPuzzleMainLayoutBase_CheckPointerHoverType::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.GetHintBalloonBox
// 0x0020 (0x0020 - 0x0000)
struct RCNzPuzzleMainLayoutBase_GetHintBalloonBox final
{
public:
	class URCNzPuzzleHintBalloonBase*             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLeft;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_GetHintBalloonBox) == 0x000008, "Wrong alignment on RCNzPuzzleMainLayoutBase_GetHintBalloonBox");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_GetHintBalloonBox) == 0x000020, "Wrong size on RCNzPuzzleMainLayoutBase_GetHintBalloonBox");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetHintBalloonBox, Widget) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_GetHintBalloonBox::Widget' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetHintBalloonBox, isLeft) == 0x000008, "Member 'RCNzPuzzleMainLayoutBase_GetHintBalloonBox::isLeft' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetHintBalloonBox, ReturnValue) == 0x000010, "Member 'RCNzPuzzleMainLayoutBase_GetHintBalloonBox::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.GetPointerLocation
// 0x0018 (0x0018 - 0x0000)
struct RCNzPuzzleMainLayoutBase_GetPointerLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_GetPointerLocation) == 0x000004, "Wrong alignment on RCNzPuzzleMainLayoutBase_GetPointerLocation");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_GetPointerLocation) == 0x000018, "Wrong size on RCNzPuzzleMainLayoutBase_GetPointerLocation");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetPointerLocation, Location) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_GetPointerLocation::Location' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetPointerLocation, Direction) == 0x00000C, "Member 'RCNzPuzzleMainLayoutBase_GetPointerLocation::Direction' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.GetPointerMoveDistance
// 0x000C (0x000C - 0x0000)
struct RCNzPuzzleMainLayoutBase_GetPointerMoveDistance final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_GetPointerMoveDistance) == 0x000004, "Wrong alignment on RCNzPuzzleMainLayoutBase_GetPointerMoveDistance");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_GetPointerMoveDistance) == 0x00000C, "Wrong size on RCNzPuzzleMainLayoutBase_GetPointerMoveDistance");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetPointerMoveDistance, ReturnValue) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_GetPointerMoveDistance::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.GetPointerScreenPosition
// 0x0008 (0x0008 - 0x0000)
struct RCNzPuzzleMainLayoutBase_GetPointerScreenPosition final
{
public:
	float                                         PositionX;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionY;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_GetPointerScreenPosition) == 0x000004, "Wrong alignment on RCNzPuzzleMainLayoutBase_GetPointerScreenPosition");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_GetPointerScreenPosition) == 0x000008, "Wrong size on RCNzPuzzleMainLayoutBase_GetPointerScreenPosition");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetPointerScreenPosition, PositionX) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_GetPointerScreenPosition::PositionX' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetPointerScreenPosition, PositionY) == 0x000004, "Member 'RCNzPuzzleMainLayoutBase_GetPointerScreenPosition::PositionY' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.GetPointerScreenPositionAlpha
// 0x0008 (0x0008 - 0x0000)
struct RCNzPuzzleMainLayoutBase_GetPointerScreenPositionAlpha final
{
public:
	float                                         PositionX;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionY;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_GetPointerScreenPositionAlpha) == 0x000004, "Wrong alignment on RCNzPuzzleMainLayoutBase_GetPointerScreenPositionAlpha");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_GetPointerScreenPositionAlpha) == 0x000008, "Wrong size on RCNzPuzzleMainLayoutBase_GetPointerScreenPositionAlpha");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetPointerScreenPositionAlpha, PositionX) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_GetPointerScreenPositionAlpha::PositionX' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetPointerScreenPositionAlpha, PositionY) == 0x000004, "Member 'RCNzPuzzleMainLayoutBase_GetPointerScreenPositionAlpha::PositionY' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.GetWidget3DLocAndDir
// 0x0020 (0x0020 - 0x0000)
struct RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir) == 0x000008, "Wrong alignment on RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir) == 0x000020, "Wrong size on RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir, Widget) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir::Widget' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir, Location) == 0x000008, "Member 'RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir::Location' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir, Direction) == 0x000014, "Member 'RCNzPuzzleMainLayoutBase_GetWidget3DLocAndDir::Direction' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.PointerMove
// 0x000C (0x000C - 0x0000)
struct RCNzPuzzleMainLayoutBase_PointerMove final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aspect;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_PointerMove) == 0x000004, "Wrong alignment on RCNzPuzzleMainLayoutBase_PointerMove");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_PointerMove) == 0x00000C, "Wrong size on RCNzPuzzleMainLayoutBase_PointerMove");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_PointerMove, DeltaTime) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_PointerMove::DeltaTime' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_PointerMove, Aspect) == 0x000004, "Member 'RCNzPuzzleMainLayoutBase_PointerMove::Aspect' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_PointerMove, ReturnValue) == 0x000008, "Member 'RCNzPuzzleMainLayoutBase_PointerMove::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.SetAnswer
// 0x0018 (0x0018 - 0x0000)
struct RCNzPuzzleMainLayoutBase_SetAnswer final
{
public:
	int32                                         wordPos;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   wordText;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             wordTexture;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_SetAnswer) == 0x000008, "Wrong alignment on RCNzPuzzleMainLayoutBase_SetAnswer");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_SetAnswer) == 0x000018, "Wrong size on RCNzPuzzleMainLayoutBase_SetAnswer");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_SetAnswer, wordPos) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_SetAnswer::wordPos' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_SetAnswer, wordText) == 0x000004, "Member 'RCNzPuzzleMainLayoutBase_SetAnswer::wordText' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_SetAnswer, wordTexture) == 0x000010, "Member 'RCNzPuzzleMainLayoutBase_SetAnswer::wordTexture' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.SetHoverPointer
// 0x0001 (0x0001 - 0x0000)
struct RCNzPuzzleMainLayoutBase_SetHoverPointer final
{
public:
	EPuzzlePointerHoverType                       Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_SetHoverPointer) == 0x000001, "Wrong alignment on RCNzPuzzleMainLayoutBase_SetHoverPointer");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_SetHoverPointer) == 0x000001, "Wrong size on RCNzPuzzleMainLayoutBase_SetHoverPointer");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_SetHoverPointer, Type) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_SetHoverPointer::Type' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.SetQuestion
// 0x0018 (0x0018 - 0x0000)
struct RCNzPuzzleMainLayoutBase_SetQuestion final
{
public:
	class FText                                   wordText;                                          // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_SetQuestion) == 0x000008, "Wrong alignment on RCNzPuzzleMainLayoutBase_SetQuestion");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_SetQuestion) == 0x000018, "Wrong size on RCNzPuzzleMainLayoutBase_SetQuestion");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_SetQuestion, wordText) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_SetQuestion::wordText' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.SetTimeLimit
// 0x0004 (0x0004 - 0x0000)
struct RCNzPuzzleMainLayoutBase_SetTimeLimit final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_SetTimeLimit) == 0x000004, "Wrong alignment on RCNzPuzzleMainLayoutBase_SetTimeLimit");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_SetTimeLimit) == 0x000004, "Wrong size on RCNzPuzzleMainLayoutBase_SetTimeLimit");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_SetTimeLimit, Time) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_SetTimeLimit::Time' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.SetWordListNum
// 0x0004 (0x0004 - 0x0000)
struct RCNzPuzzleMainLayoutBase_SetWordListNum final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_SetWordListNum) == 0x000004, "Wrong alignment on RCNzPuzzleMainLayoutBase_SetWordListNum");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_SetWordListNum) == 0x000004, "Wrong size on RCNzPuzzleMainLayoutBase_SetWordListNum");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_SetWordListNum, Length) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_SetWordListNum::Length' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.ShowHint
// 0x0028 (0x0028 - 0x0000)
struct RCNzPuzzleMainLayoutBase_ShowHint final
{
public:
	int32                                         KaikagiNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HintText;                                          // 0x0008(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FName                                   hintVoiceID;                                       // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_ShowHint) == 0x000008, "Wrong alignment on RCNzPuzzleMainLayoutBase_ShowHint");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_ShowHint) == 0x000028, "Wrong size on RCNzPuzzleMainLayoutBase_ShowHint");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_ShowHint, KaikagiNum) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_ShowHint::KaikagiNum' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_ShowHint, HintText) == 0x000008, "Member 'RCNzPuzzleMainLayoutBase_ShowHint::HintText' has a wrong offset!");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_ShowHint, hintVoiceID) == 0x000020, "Member 'RCNzPuzzleMainLayoutBase_ShowHint::hintVoiceID' has a wrong offset!");

// Function RC.RCNzPuzzleMainLayoutBase.SynchronizeToInputPlatform
// 0x0001 (0x0001 - 0x0000)
struct RCNzPuzzleMainLayoutBase_SynchronizeToInputPlatform final
{
public:
	ERCInputPlatform                              InputPlatform;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzleMainLayoutBase_SynchronizeToInputPlatform) == 0x000001, "Wrong alignment on RCNzPuzzleMainLayoutBase_SynchronizeToInputPlatform");
static_assert(sizeof(RCNzPuzzleMainLayoutBase_SynchronizeToInputPlatform) == 0x000001, "Wrong size on RCNzPuzzleMainLayoutBase_SynchronizeToInputPlatform");
static_assert(offsetof(RCNzPuzzleMainLayoutBase_SynchronizeToInputPlatform, InputPlatform) == 0x000000, "Member 'RCNzPuzzleMainLayoutBase_SynchronizeToInputPlatform::InputPlatform' has a wrong offset!");

// Function RC.RCNzPuzzlePointerBase.CheckHoverType
// 0x0002 (0x0002 - 0x0000)
struct RCNzPuzzlePointerBase_CheckHoverType final
{
public:
	EPuzzlePointerHoverType                       Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzlePointerBase_CheckHoverType) == 0x000001, "Wrong alignment on RCNzPuzzlePointerBase_CheckHoverType");
static_assert(sizeof(RCNzPuzzlePointerBase_CheckHoverType) == 0x000002, "Wrong size on RCNzPuzzlePointerBase_CheckHoverType");
static_assert(offsetof(RCNzPuzzlePointerBase_CheckHoverType, Type) == 0x000000, "Member 'RCNzPuzzlePointerBase_CheckHoverType::Type' has a wrong offset!");
static_assert(offsetof(RCNzPuzzlePointerBase_CheckHoverType, ReturnValue) == 0x000001, "Member 'RCNzPuzzlePointerBase_CheckHoverType::ReturnValue' has a wrong offset!");

// Function RC.RCNzPuzzlePointerBase.SetHover
// 0x0001 (0x0001 - 0x0000)
struct RCNzPuzzlePointerBase_SetHover final
{
public:
	EPuzzlePointerHoverType                       Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzPuzzlePointerBase_SetHover) == 0x000001, "Wrong alignment on RCNzPuzzlePointerBase_SetHover");
static_assert(sizeof(RCNzPuzzlePointerBase_SetHover) == 0x000001, "Wrong size on RCNzPuzzlePointerBase_SetHover");
static_assert(offsetof(RCNzPuzzlePointerBase_SetHover, Type) == 0x000000, "Member 'RCNzPuzzlePointerBase_SetHover::Type' has a wrong offset!");

// Function RC.RCVehicleControllerBFL.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct RCVehicleControllerBFL_SetVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControllerBFL_SetVisible) == 0x000001, "Wrong alignment on RCVehicleControllerBFL_SetVisible");
static_assert(sizeof(RCVehicleControllerBFL_SetVisible) == 0x000001, "Wrong size on RCVehicleControllerBFL_SetVisible");
static_assert(offsetof(RCVehicleControllerBFL_SetVisible, IsVisible) == 0x000000, "Member 'RCVehicleControllerBFL_SetVisible::IsVisible' has a wrong offset!");

// Function RC.RCNzUiBattleAssist.GetBattleCutinStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleAssist_GetBattleCutinStatus final
{
public:
	ERCNzUiBattleAssistStatus                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleAssist_GetBattleCutinStatus) == 0x000001, "Wrong alignment on RCNzUiBattleAssist_GetBattleCutinStatus");
static_assert(sizeof(RCNzUiBattleAssist_GetBattleCutinStatus) == 0x000001, "Wrong size on RCNzUiBattleAssist_GetBattleCutinStatus");
static_assert(offsetof(RCNzUiBattleAssist_GetBattleCutinStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleAssist_GetBattleCutinStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleAssist.InitializeBattleAssist
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiBattleAssist_InitializeBattleAssist final
{
public:
	struct FSoftObjectPath                        InFaceImagePath;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleAssist_InitializeBattleAssist) == 0x000008, "Wrong alignment on RCNzUiBattleAssist_InitializeBattleAssist");
static_assert(sizeof(RCNzUiBattleAssist_InitializeBattleAssist) == 0x000018, "Wrong size on RCNzUiBattleAssist_InitializeBattleAssist");
static_assert(offsetof(RCNzUiBattleAssist_InitializeBattleAssist, InFaceImagePath) == 0x000000, "Member 'RCNzUiBattleAssist_InitializeBattleAssist::InFaceImagePath' has a wrong offset!");

// Function RC.RCNzUiBattleAssist.SetAssistGauge
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleAssist_SetAssistGauge final
{
public:
	float                                         InAssistGauge;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAssistGaugeMax;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleAssist_SetAssistGauge) == 0x000004, "Wrong alignment on RCNzUiBattleAssist_SetAssistGauge");
static_assert(sizeof(RCNzUiBattleAssist_SetAssistGauge) == 0x000008, "Wrong size on RCNzUiBattleAssist_SetAssistGauge");
static_assert(offsetof(RCNzUiBattleAssist_SetAssistGauge, InAssistGauge) == 0x000000, "Member 'RCNzUiBattleAssist_SetAssistGauge::InAssistGauge' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleAssist_SetAssistGauge, InAssistGaugeMax) == 0x000004, "Member 'RCNzUiBattleAssist_SetAssistGauge::InAssistGaugeMax' has a wrong offset!");

// Function RC.RCNzUiBattleDodge.GetBattleDodgeStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleDodge_GetBattleDodgeStatus final
{
public:
	ERCNzUiBattleDodgeStatus                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleDodge_GetBattleDodgeStatus) == 0x000001, "Wrong alignment on RCNzUiBattleDodge_GetBattleDodgeStatus");
static_assert(sizeof(RCNzUiBattleDodge_GetBattleDodgeStatus) == 0x000001, "Wrong size on RCNzUiBattleDodge_GetBattleDodgeStatus");
static_assert(offsetof(RCNzUiBattleDodge_GetBattleDodgeStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleDodge_GetBattleDodgeStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleGameOver.GetBattleGameOverStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleGameOver_GetBattleGameOverStatus final
{
public:
	ERCNzUiBattleGameOverStatus                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleGameOver_GetBattleGameOverStatus) == 0x000001, "Wrong alignment on RCNzUiBattleGameOver_GetBattleGameOverStatus");
static_assert(sizeof(RCNzUiBattleGameOver_GetBattleGameOverStatus) == 0x000001, "Wrong size on RCNzUiBattleGameOver_GetBattleGameOverStatus");
static_assert(offsetof(RCNzUiBattleGameOver_GetBattleGameOverStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleGameOver_GetBattleGameOverStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleGameOver.GetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiBattleGameOver_GetSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleGameOver_GetSelectIndex) == 0x000004, "Wrong alignment on RCNzUiBattleGameOver_GetSelectIndex");
static_assert(sizeof(RCNzUiBattleGameOver_GetSelectIndex) == 0x000004, "Wrong size on RCNzUiBattleGameOver_GetSelectIndex");
static_assert(offsetof(RCNzUiBattleGameOver_GetSelectIndex, ReturnValue) == 0x000000, "Member 'RCNzUiBattleGameOver_GetSelectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleGameOver.Select
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleGameOver_Select final
{
public:
	int32                                         InSelectIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleGameOver_Select) == 0x000004, "Wrong alignment on RCNzUiBattleGameOver_Select");
static_assert(sizeof(RCNzUiBattleGameOver_Select) == 0x000008, "Wrong size on RCNzUiBattleGameOver_Select");
static_assert(offsetof(RCNzUiBattleGameOver_Select, InSelectIndex) == 0x000000, "Member 'RCNzUiBattleGameOver_Select::InSelectIndex' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleGameOver_Select, ReturnValue) == 0x000004, "Member 'RCNzUiBattleGameOver_Select::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleGameOver.SelectStart
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleGameOver_SelectStart final
{
public:
	int32                                         InSelectIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleGameOver_SelectStart) == 0x000004, "Wrong alignment on RCNzUiBattleGameOver_SelectStart");
static_assert(sizeof(RCNzUiBattleGameOver_SelectStart) == 0x000008, "Wrong size on RCNzUiBattleGameOver_SelectStart");
static_assert(offsetof(RCNzUiBattleGameOver_SelectStart, InSelectIndex) == 0x000000, "Member 'RCNzUiBattleGameOver_SelectStart::InSelectIndex' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleGameOver_SelectStart, ReturnValue) == 0x000004, "Member 'RCNzUiBattleGameOver_SelectStart::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleGameOver.UpAndDown
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiBattleGameOver_UpAndDown final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleGameOver_UpAndDown) == 0x000008, "Wrong alignment on RCNzUiBattleGameOver_UpAndDown");
static_assert(sizeof(RCNzUiBattleGameOver_UpAndDown) == 0x000010, "Wrong size on RCNzUiBattleGameOver_UpAndDown");
static_assert(offsetof(RCNzUiBattleGameOver_UpAndDown, InNavigation) == 0x000000, "Member 'RCNzUiBattleGameOver_UpAndDown::InNavigation' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleGameOver_UpAndDown, ReturnValue) == 0x000008, "Member 'RCNzUiBattleGameOver_UpAndDown::ReturnValue' has a wrong offset!");

// Function RC.RCUiOptionKeyList.OnPagerSetClickEvent
// 0x0080 (0x0080 - 0x0000)
struct RCUiOptionKeyList_OnPagerSetClickEvent final
{
public:
	int32                                         ind;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          InMouseEvent;                                      // 0x0008(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUiOptionKeyList_OnPagerSetClickEvent) == 0x000008, "Wrong alignment on RCUiOptionKeyList_OnPagerSetClickEvent");
static_assert(sizeof(RCUiOptionKeyList_OnPagerSetClickEvent) == 0x000080, "Wrong size on RCUiOptionKeyList_OnPagerSetClickEvent");
static_assert(offsetof(RCUiOptionKeyList_OnPagerSetClickEvent, ind) == 0x000000, "Member 'RCUiOptionKeyList_OnPagerSetClickEvent::ind' has a wrong offset!");
static_assert(offsetof(RCUiOptionKeyList_OnPagerSetClickEvent, InMouseEvent) == 0x000008, "Member 'RCUiOptionKeyList_OnPagerSetClickEvent::InMouseEvent' has a wrong offset!");
static_assert(offsetof(RCUiOptionKeyList_OnPagerSetClickEvent, ReturnValue) == 0x000078, "Member 'RCUiOptionKeyList_OnPagerSetClickEvent::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleGameOverSelectBar.SetText
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleGameOverSelectBar_SetText final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleGameOverSelectBar_SetText) == 0x000004, "Wrong alignment on RCNzUiBattleGameOverSelectBar_SetText");
static_assert(sizeof(RCNzUiBattleGameOverSelectBar_SetText) == 0x000008, "Wrong size on RCNzUiBattleGameOverSelectBar_SetText");
static_assert(offsetof(RCNzUiBattleGameOverSelectBar_SetText, InTextID) == 0x000000, "Member 'RCNzUiBattleGameOverSelectBar_SetText::InTextID' has a wrong offset!");

// Function RC.RCNzUiBattleGameOverSelectBar.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleGameOverSelectBar_SetVisible final
{
public:
	bool                                          bInVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleGameOverSelectBar_SetVisible) == 0x000001, "Wrong alignment on RCNzUiBattleGameOverSelectBar_SetVisible");
static_assert(sizeof(RCNzUiBattleGameOverSelectBar_SetVisible) == 0x000001, "Wrong size on RCNzUiBattleGameOverSelectBar_SetVisible");
static_assert(offsetof(RCNzUiBattleGameOverSelectBar_SetVisible, bInVisibility) == 0x000000, "Member 'RCNzUiBattleGameOverSelectBar_SetVisible::bInVisibility' has a wrong offset!");

// Function RC.RCNzUiBattleHint.GetBattleHintStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleHint_GetBattleHintStatus final
{
public:
	ERCNzUiBattleHintStatus                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHint_GetBattleHintStatus) == 0x000001, "Wrong alignment on RCNzUiBattleHint_GetBattleHintStatus");
static_assert(sizeof(RCNzUiBattleHint_GetBattleHintStatus) == 0x000001, "Wrong size on RCNzUiBattleHint_GetBattleHintStatus");
static_assert(offsetof(RCNzUiBattleHint_GetBattleHintStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleHint_GetBattleHintStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleHint.SetText
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleHint_SetText final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHint_SetText) == 0x000004, "Wrong alignment on RCNzUiBattleHint_SetText");
static_assert(sizeof(RCNzUiBattleHint_SetText) == 0x000008, "Wrong size on RCNzUiBattleHint_SetText");
static_assert(offsetof(RCNzUiBattleHint_SetText, InTextID) == 0x000000, "Member 'RCNzUiBattleHint_SetText::InTextID' has a wrong offset!");

// Function RC.RCNzUiBattleHPBar.GetBattleHPBarStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleHPBar_GetBattleHPBarStatus final
{
public:
	ERCNzUiBattleHPBarStatus                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHPBar_GetBattleHPBarStatus) == 0x000001, "Wrong alignment on RCNzUiBattleHPBar_GetBattleHPBarStatus");
static_assert(sizeof(RCNzUiBattleHPBar_GetBattleHPBarStatus) == 0x000001, "Wrong size on RCNzUiBattleHPBar_GetBattleHPBarStatus");
static_assert(offsetof(RCNzUiBattleHPBar_GetBattleHPBarStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleHPBar_GetBattleHPBarStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleHPBar.ResetHP
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleHPBar_ResetHP final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHPBar_ResetHP) == 0x000004, "Wrong alignment on RCNzUiBattleHPBar_ResetHP");
static_assert(sizeof(RCNzUiBattleHPBar_ResetHP) == 0x000008, "Wrong size on RCNzUiBattleHPBar_ResetHP");
static_assert(offsetof(RCNzUiBattleHPBar_ResetHP, InHP) == 0x000000, "Member 'RCNzUiBattleHPBar_ResetHP::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPBar_ResetHP, InMaxHP) == 0x000004, "Member 'RCNzUiBattleHPBar_ResetHP::InMaxHP' has a wrong offset!");

// Function RC.RCNzUiBattleHPBar.SetDelayHP
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiBattleHPBar_SetDelayHP final
{
public:
	int32                                         InDelayHP;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHPBar_SetDelayHP) == 0x000004, "Wrong alignment on RCNzUiBattleHPBar_SetDelayHP");
static_assert(sizeof(RCNzUiBattleHPBar_SetDelayHP) == 0x000004, "Wrong size on RCNzUiBattleHPBar_SetDelayHP");
static_assert(offsetof(RCNzUiBattleHPBar_SetDelayHP, InDelayHP) == 0x000000, "Member 'RCNzUiBattleHPBar_SetDelayHP::InDelayHP' has a wrong offset!");

// Function RC.RCNzUiBattleHPBar.SetHP
// 0x000C (0x000C - 0x0000)
struct RCNzUiBattleHPBar_SetHP final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInApplyDelayHP;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleHPBar_SetHP) == 0x000004, "Wrong alignment on RCNzUiBattleHPBar_SetHP");
static_assert(sizeof(RCNzUiBattleHPBar_SetHP) == 0x00000C, "Wrong size on RCNzUiBattleHPBar_SetHP");
static_assert(offsetof(RCNzUiBattleHPBar_SetHP, InHP) == 0x000000, "Member 'RCNzUiBattleHPBar_SetHP::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPBar_SetHP, InMaxHP) == 0x000004, "Member 'RCNzUiBattleHPBar_SetHP::InMaxHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPBar_SetHP, bInApplyDelayHP) == 0x000008, "Member 'RCNzUiBattleHPBar_SetHP::bInApplyDelayHP' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.ApplyHP
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleHPGauge_ApplyHP final
{
public:
	bool                                          bInReset;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHPGauge_ApplyHP) == 0x000001, "Wrong alignment on RCNzUiBattleHPGauge_ApplyHP");
static_assert(sizeof(RCNzUiBattleHPGauge_ApplyHP) == 0x000001, "Wrong size on RCNzUiBattleHPGauge_ApplyHP");
static_assert(offsetof(RCNzUiBattleHPGauge_ApplyHP, bInReset) == 0x000000, "Member 'RCNzUiBattleHPGauge_ApplyHP::bInReset' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.AutoDamage
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiBattleHPGauge_AutoDamage final
{
public:
	int32                                         InNewHP;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHP;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleHPGauge_AutoDamage) == 0x000004, "Wrong alignment on RCNzUiBattleHPGauge_AutoDamage");
static_assert(sizeof(RCNzUiBattleHPGauge_AutoDamage) == 0x000010, "Wrong size on RCNzUiBattleHPGauge_AutoDamage");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage, InNewHP) == 0x000000, "Member 'RCNzUiBattleHPGauge_AutoDamage::InNewHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage, InHP) == 0x000004, "Member 'RCNzUiBattleHPGauge_AutoDamage::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage, InMaxHP) == 0x000008, "Member 'RCNzUiBattleHPGauge_AutoDamage::InMaxHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage, bInSilence) == 0x00000C, "Member 'RCNzUiBattleHPGauge_AutoDamage::bInSilence' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage, ReturnValue) == 0x00000D, "Member 'RCNzUiBattleHPGauge_AutoDamage::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.AutoDamage2
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiBattleHPGauge_AutoDamage2 final
{
public:
	int32                                         InDamage;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHP;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleHPGauge_AutoDamage2) == 0x000004, "Wrong alignment on RCNzUiBattleHPGauge_AutoDamage2");
static_assert(sizeof(RCNzUiBattleHPGauge_AutoDamage2) == 0x000010, "Wrong size on RCNzUiBattleHPGauge_AutoDamage2");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage2, InDamage) == 0x000000, "Member 'RCNzUiBattleHPGauge_AutoDamage2::InDamage' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage2, InHP) == 0x000004, "Member 'RCNzUiBattleHPGauge_AutoDamage2::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage2, InMaxHP) == 0x000008, "Member 'RCNzUiBattleHPGauge_AutoDamage2::InMaxHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage2, bInSilence) == 0x00000C, "Member 'RCNzUiBattleHPGauge_AutoDamage2::bInSilence' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoDamage2, ReturnValue) == 0x00000D, "Member 'RCNzUiBattleHPGauge_AutoDamage2::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.AutoRecover
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiBattleHPGauge_AutoRecover final
{
public:
	int32                                         InNewHP;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHP;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleHPGauge_AutoRecover) == 0x000004, "Wrong alignment on RCNzUiBattleHPGauge_AutoRecover");
static_assert(sizeof(RCNzUiBattleHPGauge_AutoRecover) == 0x000010, "Wrong size on RCNzUiBattleHPGauge_AutoRecover");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover, InNewHP) == 0x000000, "Member 'RCNzUiBattleHPGauge_AutoRecover::InNewHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover, InHP) == 0x000004, "Member 'RCNzUiBattleHPGauge_AutoRecover::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover, InMaxHP) == 0x000008, "Member 'RCNzUiBattleHPGauge_AutoRecover::InMaxHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover, bInSilence) == 0x00000C, "Member 'RCNzUiBattleHPGauge_AutoRecover::bInSilence' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover, ReturnValue) == 0x00000D, "Member 'RCNzUiBattleHPGauge_AutoRecover::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.AutoRecover2
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiBattleHPGauge_AutoRecover2 final
{
public:
	int32                                         InRecover;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHP;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleHPGauge_AutoRecover2) == 0x000004, "Wrong alignment on RCNzUiBattleHPGauge_AutoRecover2");
static_assert(sizeof(RCNzUiBattleHPGauge_AutoRecover2) == 0x000010, "Wrong size on RCNzUiBattleHPGauge_AutoRecover2");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover2, InRecover) == 0x000000, "Member 'RCNzUiBattleHPGauge_AutoRecover2::InRecover' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover2, InHP) == 0x000004, "Member 'RCNzUiBattleHPGauge_AutoRecover2::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover2, InMaxHP) == 0x000008, "Member 'RCNzUiBattleHPGauge_AutoRecover2::InMaxHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover2, bInSilence) == 0x00000C, "Member 'RCNzUiBattleHPGauge_AutoRecover2::bInSilence' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_AutoRecover2, ReturnValue) == 0x00000D, "Member 'RCNzUiBattleHPGauge_AutoRecover2::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.Damage
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleHPGauge_Damage final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleHPGauge_Damage) == 0x000004, "Wrong alignment on RCNzUiBattleHPGauge_Damage");
static_assert(sizeof(RCNzUiBattleHPGauge_Damage) == 0x000008, "Wrong size on RCNzUiBattleHPGauge_Damage");
static_assert(offsetof(RCNzUiBattleHPGauge_Damage, InHP) == 0x000000, "Member 'RCNzUiBattleHPGauge_Damage::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_Damage, bInSilence) == 0x000004, "Member 'RCNzUiBattleHPGauge_Damage::bInSilence' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.Damage2
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleHPGauge_Damage2 final
{
public:
	int32                                         InDamage;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleHPGauge_Damage2) == 0x000004, "Wrong alignment on RCNzUiBattleHPGauge_Damage2");
static_assert(sizeof(RCNzUiBattleHPGauge_Damage2) == 0x000008, "Wrong size on RCNzUiBattleHPGauge_Damage2");
static_assert(offsetof(RCNzUiBattleHPGauge_Damage2, InDamage) == 0x000000, "Member 'RCNzUiBattleHPGauge_Damage2::InDamage' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_Damage2, bInSilence) == 0x000004, "Member 'RCNzUiBattleHPGauge_Damage2::bInSilence' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.GetBattleHPGaugeStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleHPGauge_GetBattleHPGaugeStatus final
{
public:
	ERCNzUiBattleHPGaugeStatus                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHPGauge_GetBattleHPGaugeStatus) == 0x000001, "Wrong alignment on RCNzUiBattleHPGauge_GetBattleHPGaugeStatus");
static_assert(sizeof(RCNzUiBattleHPGauge_GetBattleHPGaugeStatus) == 0x000001, "Wrong size on RCNzUiBattleHPGauge_GetBattleHPGaugeStatus");
static_assert(offsetof(RCNzUiBattleHPGauge_GetBattleHPGaugeStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleHPGauge_GetBattleHPGaugeStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.Recover
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleHPGauge_Recover final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleHPGauge_Recover) == 0x000004, "Wrong alignment on RCNzUiBattleHPGauge_Recover");
static_assert(sizeof(RCNzUiBattleHPGauge_Recover) == 0x000008, "Wrong size on RCNzUiBattleHPGauge_Recover");
static_assert(offsetof(RCNzUiBattleHPGauge_Recover, InHP) == 0x000000, "Member 'RCNzUiBattleHPGauge_Recover::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_Recover, bInSilence) == 0x000004, "Member 'RCNzUiBattleHPGauge_Recover::bInSilence' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.Recover2
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleHPGauge_Recover2 final
{
public:
	int32                                         InRecover;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilence;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleHPGauge_Recover2) == 0x000004, "Wrong alignment on RCNzUiBattleHPGauge_Recover2");
static_assert(sizeof(RCNzUiBattleHPGauge_Recover2) == 0x000008, "Wrong size on RCNzUiBattleHPGauge_Recover2");
static_assert(offsetof(RCNzUiBattleHPGauge_Recover2, InRecover) == 0x000000, "Member 'RCNzUiBattleHPGauge_Recover2::InRecover' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_Recover2, bInSilence) == 0x000004, "Member 'RCNzUiBattleHPGauge_Recover2::bInSilence' has a wrong offset!");

// Function RC.RCNzUiBattleHPGauge.SetHP
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleHPGauge_SetHP final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHPGauge_SetHP) == 0x000004, "Wrong alignment on RCNzUiBattleHPGauge_SetHP");
static_assert(sizeof(RCNzUiBattleHPGauge_SetHP) == 0x000008, "Wrong size on RCNzUiBattleHPGauge_SetHP");
static_assert(offsetof(RCNzUiBattleHPGauge_SetHP, InHP) == 0x000000, "Member 'RCNzUiBattleHPGauge_SetHP::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPGauge_SetHP, InMaxHP) == 0x000004, "Member 'RCNzUiBattleHPGauge_SetHP::InMaxHP' has a wrong offset!");

// Function RC.RCUiOptionPager.OnButtonGuideClickEvent
// 0x0001 (0x0001 - 0x0000)
struct RCUiOptionPager_OnButtonGuideClickEvent final
{
public:
	ERCInputKeyType                               Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionPager_OnButtonGuideClickEvent) == 0x000001, "Wrong alignment on RCUiOptionPager_OnButtonGuideClickEvent");
static_assert(sizeof(RCUiOptionPager_OnButtonGuideClickEvent) == 0x000001, "Wrong size on RCUiOptionPager_OnButtonGuideClickEvent");
static_assert(offsetof(RCUiOptionPager_OnButtonGuideClickEvent, Key) == 0x000000, "Member 'RCUiOptionPager_OnButtonGuideClickEvent::Key' has a wrong offset!");

// Function RC.RCNzUiBattleHPValue.GetBattleHPValueStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleHPValue_GetBattleHPValueStatus final
{
public:
	ERCNzUiBattleHPValueStatus                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHPValue_GetBattleHPValueStatus) == 0x000001, "Wrong alignment on RCNzUiBattleHPValue_GetBattleHPValueStatus");
static_assert(sizeof(RCNzUiBattleHPValue_GetBattleHPValueStatus) == 0x000001, "Wrong size on RCNzUiBattleHPValue_GetBattleHPValueStatus");
static_assert(offsetof(RCNzUiBattleHPValue_GetBattleHPValueStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleHPValue_GetBattleHPValueStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleHPValue.SetHP
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleHPValue_SetHP final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleHPValue_SetHP) == 0x000004, "Wrong alignment on RCNzUiBattleHPValue_SetHP");
static_assert(sizeof(RCNzUiBattleHPValue_SetHP) == 0x000008, "Wrong size on RCNzUiBattleHPValue_SetHP");
static_assert(offsetof(RCNzUiBattleHPValue_SetHP, InHP) == 0x000000, "Member 'RCNzUiBattleHPValue_SetHP::InHP' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleHPValue_SetHP, InMaxHP) == 0x000004, "Member 'RCNzUiBattleHPValue_SetHP::InMaxHP' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiList.GetBattleKaiKagiListStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiList_GetBattleKaiKagiListStatus final
{
public:
	ERCNzUiBattleKaiKagiListStatus                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiList_GetBattleKaiKagiListStatus) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiList_GetBattleKaiKagiListStatus");
static_assert(sizeof(RCNzUiBattleKaiKagiList_GetBattleKaiKagiListStatus) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiList_GetBattleKaiKagiListStatus");
static_assert(offsetof(RCNzUiBattleKaiKagiList_GetBattleKaiKagiListStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleKaiKagiList_GetBattleKaiKagiListStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiList.Open
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiBattleKaiKagiList_Open final
{
public:
	TArray<class FName>                           InKaiKagiNameIDArray;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiList_Open) == 0x000008, "Wrong alignment on RCNzUiBattleKaiKagiList_Open");
static_assert(sizeof(RCNzUiBattleKaiKagiList_Open) == 0x000010, "Wrong size on RCNzUiBattleKaiKagiList_Open");
static_assert(offsetof(RCNzUiBattleKaiKagiList_Open, InKaiKagiNameIDArray) == 0x000000, "Member 'RCNzUiBattleKaiKagiList_Open::InKaiKagiNameIDArray' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiName.SetKaiKagiName
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleKaiKagiName_SetKaiKagiName final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiName_SetKaiKagiName) == 0x000004, "Wrong alignment on RCNzUiBattleKaiKagiName_SetKaiKagiName");
static_assert(sizeof(RCNzUiBattleKaiKagiName_SetKaiKagiName) == 0x000008, "Wrong size on RCNzUiBattleKaiKagiName_SetKaiKagiName");
static_assert(offsetof(RCNzUiBattleKaiKagiName_SetKaiKagiName, InTextID) == 0x000000, "Member 'RCNzUiBattleKaiKagiName_SetKaiKagiName::InTextID' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelect.GetBattleKaiKagiSelectStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelect_GetBattleKaiKagiSelectStatus final
{
public:
	ERCNzUiBattleKaiKagiSelectStatus              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelect_GetBattleKaiKagiSelectStatus) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelect_GetBattleKaiKagiSelectStatus");
static_assert(sizeof(RCNzUiBattleKaiKagiSelect_GetBattleKaiKagiSelectStatus) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelect_GetBattleKaiKagiSelectStatus");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_GetBattleKaiKagiSelectStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelect_GetBattleKaiKagiSelectStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelect.GetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiBattleKaiKagiSelect_GetSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelect_GetSelectIndex) == 0x000004, "Wrong alignment on RCNzUiBattleKaiKagiSelect_GetSelectIndex");
static_assert(sizeof(RCNzUiBattleKaiKagiSelect_GetSelectIndex) == 0x000004, "Wrong size on RCNzUiBattleKaiKagiSelect_GetSelectIndex");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_GetSelectIndex, ReturnValue) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelect_GetSelectIndex::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelect.KaiKagiSelectStart
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart final
{
public:
	TArray<class FName>                           InKaiKagiIDArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InSelectIndex;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart) == 0x000008, "Wrong alignment on RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart");
static_assert(sizeof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart) == 0x000018, "Wrong size on RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart, InKaiKagiIDArray) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart::InKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart, InSelectIndex) == 0x000010, "Member 'RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart::InSelectIndex' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart, ReturnValue) == 0x000014, "Member 'RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelect.KaiKagiSelectStart2
// 0x0028 (0x0028 - 0x0000)
struct RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2 final
{
public:
	TArray<class FName>                           InKaiKagiIDArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           InDeleteKaiKagiIDArray;                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InSelectIndex;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2) == 0x000008, "Wrong alignment on RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2");
static_assert(sizeof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2) == 0x000028, "Wrong size on RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2, InKaiKagiIDArray) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2::InKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2, InDeleteKaiKagiIDArray) == 0x000010, "Member 'RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2::InDeleteKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2, InSelectIndex) == 0x000020, "Member 'RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2::InSelectIndex' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2, ReturnValue) == 0x000024, "Member 'RCNzUiBattleKaiKagiSelect_KaiKagiSelectStart2::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelect.SelectKaiKagi
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleKaiKagiSelect_SelectKaiKagi final
{
public:
	int32                                         InSelectIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStart;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiBattleKaiKagiSelect_SelectKaiKagi) == 0x000004, "Wrong alignment on RCNzUiBattleKaiKagiSelect_SelectKaiKagi");
static_assert(sizeof(RCNzUiBattleKaiKagiSelect_SelectKaiKagi) == 0x000008, "Wrong size on RCNzUiBattleKaiKagiSelect_SelectKaiKagi");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_SelectKaiKagi, InSelectIndex) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelect_SelectKaiKagi::InSelectIndex' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_SelectKaiKagi, bStart) == 0x000004, "Member 'RCNzUiBattleKaiKagiSelect_SelectKaiKagi::bStart' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_SelectKaiKagi, ReturnValue) == 0x000005, "Member 'RCNzUiBattleKaiKagiSelect_SelectKaiKagi::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelect.UpAndDown
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiBattleKaiKagiSelect_UpAndDown final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelect_UpAndDown) == 0x000008, "Wrong alignment on RCNzUiBattleKaiKagiSelect_UpAndDown");
static_assert(sizeof(RCNzUiBattleKaiKagiSelect_UpAndDown) == 0x000010, "Wrong size on RCNzUiBattleKaiKagiSelect_UpAndDown");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_UpAndDown, InNavigation) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelect_UpAndDown::InNavigation' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleKaiKagiSelect_UpAndDown, ReturnValue) == 0x000008, "Member 'RCNzUiBattleKaiKagiSelect_UpAndDown::ReturnValue' has a wrong offset!");

// Function RC.RCUiShortLoadingIcon.IsLoading
// 0x0001 (0x0001 - 0x0000)
struct RCUiShortLoadingIcon_IsLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiShortLoadingIcon_IsLoading) == 0x000001, "Wrong alignment on RCUiShortLoadingIcon_IsLoading");
static_assert(sizeof(RCUiShortLoadingIcon_IsLoading) == 0x000001, "Wrong size on RCUiShortLoadingIcon_IsLoading");
static_assert(offsetof(RCUiShortLoadingIcon_IsLoading, ReturnValue) == 0x000000, "Member 'RCUiShortLoadingIcon_IsLoading::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectBar2.IsSelect
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectBar2_IsSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectBar2_IsSelect) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectBar2_IsSelect");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectBar2_IsSelect) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectBar2_IsSelect");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectBar2_IsSelect, ReturnValue) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectBar2_IsSelect::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectBar2.Select
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectBar2_Select final
{
public:
	bool                                          bInStart;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectBar2_Select) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectBar2_Select");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectBar2_Select) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectBar2_Select");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectBar2_Select, bInStart) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectBar2_Select::bInStart' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectBar2.SetKaiKagiName
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleKaiKagiSelectBar2_SetKaiKagiName final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectBar2_SetKaiKagiName) == 0x000004, "Wrong alignment on RCNzUiBattleKaiKagiSelectBar2_SetKaiKagiName");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectBar2_SetKaiKagiName) == 0x000008, "Wrong size on RCNzUiBattleKaiKagiSelectBar2_SetKaiKagiName");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectBar2_SetKaiKagiName, InTextID) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectBar2_SetKaiKagiName::InTextID' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectBar2.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectBar2_SetVisible final
{
public:
	bool                                          bInVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectBar2_SetVisible) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectBar2_SetVisible");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectBar2_SetVisible) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectBar2_SetVisible");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectBar2_SetVisible, bInVisibility) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectBar2_SetVisible::bInVisibility' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectBar2.Unselect
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectBar2_Unselect final
{
public:
	bool                                          bInStart;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectBar2_Unselect) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectBar2_Unselect");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectBar2_Unselect) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectBar2_Unselect");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectBar2_Unselect, bInStart) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectBar2_Unselect::bInStart' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectDecide.SetInputFromButtonGuide
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectDecide_SetInputFromButtonGuide final
{
public:
	ERCInputKeyType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectDecide_SetInputFromButtonGuide) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectDecide_SetInputFromButtonGuide");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectDecide_SetInputFromButtonGuide) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectDecide_SetInputFromButtonGuide");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectDecide_SetInputFromButtonGuide, InType) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectDecide_SetInputFromButtonGuide::InType' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectDetail.PlayAnim
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectDetail_PlayAnim final
{
public:
	ERCNzUiBattleKaiKagiSelectPartsAnimType       AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectDetail_PlayAnim) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectDetail_PlayAnim");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectDetail_PlayAnim) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectDetail_PlayAnim");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectDetail_PlayAnim, AnimType) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectDetail_PlayAnim::AnimType' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectDetail.SetDetailTextID
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleKaiKagiSelectDetail_SetDetailTextID final
{
public:
	class FName                                   DetailTextID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectDetail_SetDetailTextID) == 0x000004, "Wrong alignment on RCNzUiBattleKaiKagiSelectDetail_SetDetailTextID");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectDetail_SetDetailTextID) == 0x000008, "Wrong size on RCNzUiBattleKaiKagiSelectDetail_SetDetailTextID");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectDetail_SetDetailTextID, DetailTextID) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectDetail_SetDetailTextID::DetailTextID' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectDetail.SetImageTexture
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleKaiKagiSelectDetail_SetImageTexture final
{
public:
	class UTexture2D*                             ImageTexture;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectDetail_SetImageTexture) == 0x000008, "Wrong alignment on RCNzUiBattleKaiKagiSelectDetail_SetImageTexture");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectDetail_SetImageTexture) == 0x000008, "Wrong size on RCNzUiBattleKaiKagiSelectDetail_SetImageTexture");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectDetail_SetImageTexture, ImageTexture) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectDetail_SetImageTexture::ImageTexture' has a wrong offset!");

// Function RC.RCNzUiBattleKaiKagiSelectDetail.SetInputFromButtonGuide
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleKaiKagiSelectDetail_SetInputFromButtonGuide final
{
public:
	ERCInputKeyType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleKaiKagiSelectDetail_SetInputFromButtonGuide) == 0x000001, "Wrong alignment on RCNzUiBattleKaiKagiSelectDetail_SetInputFromButtonGuide");
static_assert(sizeof(RCNzUiBattleKaiKagiSelectDetail_SetInputFromButtonGuide) == 0x000001, "Wrong size on RCNzUiBattleKaiKagiSelectDetail_SetInputFromButtonGuide");
static_assert(offsetof(RCNzUiBattleKaiKagiSelectDetail_SetInputFromButtonGuide, InType) == 0x000000, "Member 'RCNzUiBattleKaiKagiSelectDetail_SetInputFromButtonGuide::InType' has a wrong offset!");

// Function RC.RCNzUiBattleStart.GetBattleStartStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleStart_GetBattleStartStatus final
{
public:
	ERCNzUiBattleStartStatus                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleStart_GetBattleStartStatus) == 0x000001, "Wrong alignment on RCNzUiBattleStart_GetBattleStartStatus");
static_assert(sizeof(RCNzUiBattleStart_GetBattleStartStatus) == 0x000001, "Wrong size on RCNzUiBattleStart_GetBattleStartStatus");
static_assert(offsetof(RCNzUiBattleStart_GetBattleStartStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleStart_GetBattleStartStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleUi.BattleUiStart
// 0x0002 (0x0002 - 0x0000)
struct RCNzUiBattleUi_BattleUiStart final
{
public:
	bool                                          bOpenKaiKagi;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAssistEnable;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleUi_BattleUiStart) == 0x000001, "Wrong alignment on RCNzUiBattleUi_BattleUiStart");
static_assert(sizeof(RCNzUiBattleUi_BattleUiStart) == 0x000002, "Wrong size on RCNzUiBattleUi_BattleUiStart");
static_assert(offsetof(RCNzUiBattleUi_BattleUiStart, bOpenKaiKagi) == 0x000000, "Member 'RCNzUiBattleUi_BattleUiStart::bOpenKaiKagi' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleUi_BattleUiStart, bInAssistEnable) == 0x000001, "Member 'RCNzUiBattleUi_BattleUiStart::bInAssistEnable' has a wrong offset!");

// Function RC.RCNzUiBattleUi.ChangeKaiKagi
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleUi_ChangeKaiKagi final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleUi_ChangeKaiKagi) == 0x000004, "Wrong alignment on RCNzUiBattleUi_ChangeKaiKagi");
static_assert(sizeof(RCNzUiBattleUi_ChangeKaiKagi) == 0x000008, "Wrong size on RCNzUiBattleUi_ChangeKaiKagi");
static_assert(offsetof(RCNzUiBattleUi_ChangeKaiKagi, InTextID) == 0x000000, "Member 'RCNzUiBattleUi_ChangeKaiKagi::InTextID' has a wrong offset!");

// Function RC.RCNzUiBattleUi.GetBattleUiStatus
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiBattleUi_GetBattleUiStatus final
{
public:
	ERCNzUiBattleUiStatus                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleUi_GetBattleUiStatus) == 0x000001, "Wrong alignment on RCNzUiBattleUi_GetBattleUiStatus");
static_assert(sizeof(RCNzUiBattleUi_GetBattleUiStatus) == 0x000001, "Wrong size on RCNzUiBattleUi_GetBattleUiStatus");
static_assert(offsetof(RCNzUiBattleUi_GetBattleUiStatus, ReturnValue) == 0x000000, "Member 'RCNzUiBattleUi_GetBattleUiStatus::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiBattleUi.InitializeBattleUi
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiBattleUi_InitializeBattleUi final
{
public:
	struct FRCNzUiBattleUiAssetData               InAssetData;                                       // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleUi_InitializeBattleUi) == 0x000008, "Wrong alignment on RCNzUiBattleUi_InitializeBattleUi");
static_assert(sizeof(RCNzUiBattleUi_InitializeBattleUi) == 0x000020, "Wrong size on RCNzUiBattleUi_InitializeBattleUi");
static_assert(offsetof(RCNzUiBattleUi_InitializeBattleUi, InAssetData) == 0x000000, "Member 'RCNzUiBattleUi_InitializeBattleUi::InAssetData' has a wrong offset!");

// Function RC.RCNzUiBattleUi.SetAssistGauge
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleUi_SetAssistGauge final
{
public:
	float                                         InAssistGauge;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAssistGaugeMax;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleUi_SetAssistGauge) == 0x000004, "Wrong alignment on RCNzUiBattleUi_SetAssistGauge");
static_assert(sizeof(RCNzUiBattleUi_SetAssistGauge) == 0x000008, "Wrong size on RCNzUiBattleUi_SetAssistGauge");
static_assert(offsetof(RCNzUiBattleUi_SetAssistGauge, InAssistGauge) == 0x000000, "Member 'RCNzUiBattleUi_SetAssistGauge::InAssistGauge' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleUi_SetAssistGauge, InAssistGaugeMax) == 0x000004, "Member 'RCNzUiBattleUi_SetAssistGauge::InAssistGaugeMax' has a wrong offset!");

// Function RC.RCNzUiBattleUi.SetButtonGuide
// 0x0003 (0x0003 - 0x0000)
struct RCNzUiBattleUi_SetButtonGuide final
{
public:
	bool                                          bInFinalBattle;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRebuttalSlash;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisturbSlashEnable;                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleUi_SetButtonGuide) == 0x000001, "Wrong alignment on RCNzUiBattleUi_SetButtonGuide");
static_assert(sizeof(RCNzUiBattleUi_SetButtonGuide) == 0x000003, "Wrong size on RCNzUiBattleUi_SetButtonGuide");
static_assert(offsetof(RCNzUiBattleUi_SetButtonGuide, bInFinalBattle) == 0x000000, "Member 'RCNzUiBattleUi_SetButtonGuide::bInFinalBattle' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleUi_SetButtonGuide, bInRebuttalSlash) == 0x000001, "Member 'RCNzUiBattleUi_SetButtonGuide::bInRebuttalSlash' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleUi_SetButtonGuide, bInDisturbSlashEnable) == 0x000002, "Member 'RCNzUiBattleUi_SetButtonGuide::bInDisturbSlashEnable' has a wrong offset!");

// Function RC.RCNzUiBattleUi.SetElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleUi_SetElapsedTime final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleUi_SetElapsedTime) == 0x000004, "Wrong alignment on RCNzUiBattleUi_SetElapsedTime");
static_assert(sizeof(RCNzUiBattleUi_SetElapsedTime) == 0x000008, "Wrong size on RCNzUiBattleUi_SetElapsedTime");
static_assert(offsetof(RCNzUiBattleUi_SetElapsedTime, ElapsedTime) == 0x000000, "Member 'RCNzUiBattleUi_SetElapsedTime::ElapsedTime' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleUi_SetElapsedTime, LimitTime) == 0x000004, "Member 'RCNzUiBattleUi_SetElapsedTime::LimitTime' has a wrong offset!");

// Function RC.RCNzUiBattleUi.SetKaiKagiName
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleUi_SetKaiKagiName final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleUi_SetKaiKagiName) == 0x000004, "Wrong alignment on RCNzUiBattleUi_SetKaiKagiName");
static_assert(sizeof(RCNzUiBattleUi_SetKaiKagiName) == 0x000008, "Wrong size on RCNzUiBattleUi_SetKaiKagiName");
static_assert(offsetof(RCNzUiBattleUi_SetKaiKagiName, InTextID) == 0x000000, "Member 'RCNzUiBattleUi_SetKaiKagiName::InTextID' has a wrong offset!");

// Function RC.RCNzUiBattleUi.SetTime
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiBattleUi_SetTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiBattleUi_SetTime) == 0x000004, "Wrong alignment on RCNzUiBattleUi_SetTime");
static_assert(sizeof(RCNzUiBattleUi_SetTime) == 0x000008, "Wrong size on RCNzUiBattleUi_SetTime");
static_assert(offsetof(RCNzUiBattleUi_SetTime, Time) == 0x000000, "Member 'RCNzUiBattleUi_SetTime::Time' has a wrong offset!");
static_assert(offsetof(RCNzUiBattleUi_SetTime, LimitTime) == 0x000004, "Member 'RCNzUiBattleUi_SetTime::LimitTime' has a wrong offset!");

// Function RC.RCNzUiChousaStart.GetNzChousaStartPriority
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiChousaStart_GetNzChousaStartPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiChousaStart_GetNzChousaStartPriority) == 0x000004, "Wrong alignment on RCNzUiChousaStart_GetNzChousaStartPriority");
static_assert(sizeof(RCNzUiChousaStart_GetNzChousaStartPriority) == 0x000004, "Wrong size on RCNzUiChousaStart_GetNzChousaStartPriority");
static_assert(offsetof(RCNzUiChousaStart_GetNzChousaStartPriority, ReturnValue) == 0x000000, "Member 'RCNzUiChousaStart_GetNzChousaStartPriority::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiChousaStart.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiChousaStart_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiChousaStart_IsFinished) == 0x000001, "Wrong alignment on RCNzUiChousaStart_IsFinished");
static_assert(sizeof(RCNzUiChousaStart_IsFinished) == 0x000001, "Wrong size on RCNzUiChousaStart_IsFinished");
static_assert(offsetof(RCNzUiChousaStart_IsFinished, ReturnValue) == 0x000000, "Member 'RCNzUiChousaStart_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleCursorBtnGuideWidget.UpdateBtnGuide
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide final
{
public:
	ERCInputKeyType                               Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuideStr;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          visible;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide) == 0x000008, "Wrong alignment on RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide");
static_assert(sizeof(RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide) == 0x000020, "Wrong size on RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide");
static_assert(offsetof(RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide, Key) == 0x000000, "Member 'RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide::Key' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide, GuideStr) == 0x000008, "Member 'RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide::GuideStr' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide, visible) == 0x000018, "Member 'RCNzUiFinaleCursorBtnGuideWidget_UpdateBtnGuide::visible' has a wrong offset!");

// Function RC.RCNzUiFinaleCursorWidget.UpdateCursorBtnGuide
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide final
{
public:
	ERCInputKeyType                               Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible_0;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuideStr;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide) == 0x000008, "Wrong alignment on RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide");
static_assert(sizeof(RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide) == 0x000018, "Wrong size on RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide");
static_assert(offsetof(RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide, Key) == 0x000000, "Member 'RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide::Key' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide, IsVisible_0) == 0x000001, "Member 'RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide::IsVisible_0' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide, GuideStr) == 0x000008, "Member 'RCNzUiFinaleCursorWidget_UpdateCursorBtnGuide::GuideStr' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveImageText.UpdateText
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleDetectiveImageText_UpdateText final
{
public:
	class FString                                 str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveImageText_UpdateText) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveImageText_UpdateText");
static_assert(sizeof(RCNzUiFinaleDetectiveImageText_UpdateText) == 0x000010, "Wrong size on RCNzUiFinaleDetectiveImageText_UpdateText");
static_assert(offsetof(RCNzUiFinaleDetectiveImageText_UpdateText, str) == 0x000000, "Member 'RCNzUiFinaleDetectiveImageText_UpdateText::str' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.AddImage
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_AddImage final
{
public:
	const class UTexture2D*                       Img;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_AddImage) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_AddImage");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_AddImage) == 0x000008, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_AddImage");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_AddImage, Img) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_AddImage::Img' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.GetBackgroundImgScale
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_GetBackgroundImgScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_GetBackgroundImgScale) == 0x000004, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_GetBackgroundImgScale");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_GetBackgroundImgScale) == 0x000008, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_GetBackgroundImgScale");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_GetBackgroundImgScale, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_GetBackgroundImgScale::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.GetCurrentDetectiveSceneInteractPointPos
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_GetCurrentDetectiveSceneInteractPointPos final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URCNzUiFinaleInteractIconWidget*        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_GetCurrentDetectiveSceneInteractPointPos) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_GetCurrentDetectiveSceneInteractPointPos");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_GetCurrentDetectiveSceneInteractPointPos) == 0x000010, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_GetCurrentDetectiveSceneInteractPointPos");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_GetCurrentDetectiveSceneInteractPointPos, Result) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_GetCurrentDetectiveSceneInteractPointPos::Result' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_GetCurrentDetectiveSceneInteractPointPos, ReturnValue) == 0x000008, "Member 'RCNzUiFinaleDetectiveSceneWidget_GetCurrentDetectiveSceneInteractPointPos::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.GetInteractIconList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_GetInteractIconList final
{
public:
	TArray<class URCNzUiFinaleInteractIconWidget*> ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_GetInteractIconList) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_GetInteractIconList");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_GetInteractIconList) == 0x000010, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_GetInteractIconList");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_GetInteractIconList, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_GetInteractIconList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.GetInteractIconNum
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_GetInteractIconNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_GetInteractIconNum) == 0x000004, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_GetInteractIconNum");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_GetInteractIconNum) == 0x000004, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_GetInteractIconNum");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_GetInteractIconNum, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_GetInteractIconNum::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.GetInteractIDList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_GetInteractIDList final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_GetInteractIDList) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_GetInteractIDList");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_GetInteractIDList) == 0x000010, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_GetInteractIDList");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_GetInteractIDList, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_GetInteractIDList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.GetInteractPieceDataList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_GetInteractPieceDataList final
{
public:
	TArray<struct FRCNzFinaleGamePieceData>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_GetInteractPieceDataList) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_GetInteractPieceDataList");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_GetInteractPieceDataList) == 0x000010, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_GetInteractPieceDataList");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_GetInteractPieceDataList, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_GetInteractPieceDataList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.GetPieceImgInfoList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_GetPieceImgInfoList final
{
public:
	TArray<struct FRCNzUiFinaleInteractImgInfo>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_GetPieceImgInfoList) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_GetPieceImgInfoList");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_GetPieceImgInfoList) == 0x000010, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_GetPieceImgInfoList");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_GetPieceImgInfoList, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_GetPieceImgInfoList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.GetPieceImgList
// 0x0050 (0x0050 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_GetPieceImgList final
{
public:
	TMap<class FName, class UTexture2D*>          ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_GetPieceImgList) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_GetPieceImgList");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_GetPieceImgList) == 0x000050, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_GetPieceImgList");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_GetPieceImgList, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_GetPieceImgList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.IsUseInOutAnim
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_IsUseInOutAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_IsUseInOutAnim) == 0x000001, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_IsUseInOutAnim");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_IsUseInOutAnim) == 0x000001, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_IsUseInOutAnim");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_IsUseInOutAnim, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_IsUseInOutAnim::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.PlayEndAnim
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_PlayEndAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_PlayEndAnim) == 0x000001, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_PlayEndAnim");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_PlayEndAnim) == 0x000001, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_PlayEndAnim");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_PlayEndAnim, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_PlayEndAnim::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.PlayStartAnim
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_PlayStartAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_PlayStartAnim) == 0x000001, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_PlayStartAnim");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_PlayStartAnim) == 0x000001, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_PlayStartAnim");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_PlayStartAnim, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_PlayStartAnim::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.SetBackgroundImgScale
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_SetBackgroundImgScale final
{
public:
	float                                         ScaleX;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_SetBackgroundImgScale) == 0x000004, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_SetBackgroundImgScale");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_SetBackgroundImgScale) == 0x000008, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_SetBackgroundImgScale");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_SetBackgroundImgScale, ScaleX) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_SetBackgroundImgScale::ScaleX' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_SetBackgroundImgScale, ScaleY) == 0x000004, "Member 'RCNzUiFinaleDetectiveSceneWidget_SetBackgroundImgScale::ScaleY' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.SetVisibleDetectiveScene
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_SetVisibleDetectiveScene final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_SetVisibleDetectiveScene) == 0x000001, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_SetVisibleDetectiveScene");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_SetVisibleDetectiveScene) == 0x000001, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_SetVisibleDetectiveScene");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_SetVisibleDetectiveScene, IsVisible_0) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_SetVisibleDetectiveScene::IsVisible_0' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.ShowDetectiveScene
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_ShowDetectiveScene final
{
public:
	const class UTexture2D*                       Img;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_ShowDetectiveScene) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_ShowDetectiveScene");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_ShowDetectiveScene) == 0x000008, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_ShowDetectiveScene");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_ShowDetectiveScene, Img) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_ShowDetectiveScene::Img' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.UpdateDetectiveScene
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_UpdateDetectiveScene final
{
public:
	const class UTexture2D*                       Img;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_UpdateDetectiveScene) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_UpdateDetectiveScene");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_UpdateDetectiveScene) == 0x000008, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_UpdateDetectiveScene");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_UpdateDetectiveScene, Img) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_UpdateDetectiveScene::Img' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.UpdatePieceData
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_UpdatePieceData final
{
public:
	TArray<struct FRCNzFinaleGamePieceData>       pieceList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_UpdatePieceData) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_UpdatePieceData");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_UpdatePieceData) == 0x000010, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_UpdatePieceData");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_UpdatePieceData, pieceList) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_UpdatePieceData::pieceList' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.UpdatePieceImg
// 0x0050 (0x0050 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImg final
{
public:
	TMap<class FName, class UTexture2D*>          PieceImgList;                                      // 0x0000(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImg) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImg");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImg) == 0x000050, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImg");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImg, PieceImgList) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImg::PieceImgList' has a wrong offset!");

// Function RC.RCNzUiFinaleDetectiveSceneWidget.UpdatePieceImgInfo
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImgInfo final
{
public:
	TArray<struct FRCNzUiFinaleInteractImgInfo>   PieceImgInfoList;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImgInfo) == 0x000008, "Wrong alignment on RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImgInfo");
static_assert(sizeof(RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImgInfo) == 0x000010, "Wrong size on RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImgInfo");
static_assert(offsetof(RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImgInfo, PieceImgInfoList) == 0x000000, "Member 'RCNzUiFinaleDetectiveSceneWidget_UpdatePieceImgInfo::PieceImgInfoList' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexBTNGuideWidget.InitializeButtonGuide
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 str;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide");
static_assert(sizeof(RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide) == 0x000020, "Wrong size on RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide");
static_assert(offsetof(RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide, InKeyType) == 0x000000, "Member 'RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide::InKeyType' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide, str) == 0x000008, "Member 'RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide::str' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide, ReturnValue) == 0x000018, "Member 'RCNzUiFinaleIndexBTNGuideWidget_InitializeButtonGuide::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListParentWidget.GetIndexListUI
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleIndexListParentWidget_GetIndexListUI final
{
public:
	class URCNzUiFinaleIndexListWidget*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListParentWidget_GetIndexListUI) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexListParentWidget_GetIndexListUI");
static_assert(sizeof(RCNzUiFinaleIndexListParentWidget_GetIndexListUI) == 0x000008, "Wrong size on RCNzUiFinaleIndexListParentWidget_GetIndexListUI");
static_assert(offsetof(RCNzUiFinaleIndexListParentWidget_GetIndexListUI, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleIndexListParentWidget_GetIndexListUI::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListParentWidget.InitializeIndexList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleIndexListParentWidget_InitializeIndexList final
{
public:
	class FString                                 chNumStr;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListParentWidget_InitializeIndexList) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexListParentWidget_InitializeIndexList");
static_assert(sizeof(RCNzUiFinaleIndexListParentWidget_InitializeIndexList) == 0x000010, "Wrong size on RCNzUiFinaleIndexListParentWidget_InitializeIndexList");
static_assert(offsetof(RCNzUiFinaleIndexListParentWidget_InitializeIndexList, chNumStr) == 0x000000, "Member 'RCNzUiFinaleIndexListParentWidget_InitializeIndexList::chNumStr' has a wrong offset!");

// Function RC.RCNzUiFinaleIndexListParentWidget.UpdateIndexList
// 0x0050 (0x0050 - 0x0000)
struct RCNzUiFinaleIndexListParentWidget_UpdateIndexList final
{
public:
	struct FRCParamNzFinaleSectionTableRow        Section;                                           // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	int32                                         idx;                                               // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCNzFinaleManagerBase*                 FinaleManager;                                     // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleIndexListParentWidget_UpdateIndexList) == 0x000008, "Wrong alignment on RCNzUiFinaleIndexListParentWidget_UpdateIndexList");
static_assert(sizeof(RCNzUiFinaleIndexListParentWidget_UpdateIndexList) == 0x000050, "Wrong size on RCNzUiFinaleIndexListParentWidget_UpdateIndexList");
static_assert(offsetof(RCNzUiFinaleIndexListParentWidget_UpdateIndexList, Section) == 0x000000, "Member 'RCNzUiFinaleIndexListParentWidget_UpdateIndexList::Section' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListParentWidget_UpdateIndexList, idx) == 0x000040, "Member 'RCNzUiFinaleIndexListParentWidget_UpdateIndexList::idx' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleIndexListParentWidget_UpdateIndexList, FinaleManager) == 0x000048, "Member 'RCNzUiFinaleIndexListParentWidget_UpdateIndexList::FinaleManager' has a wrong offset!");

// Function RC.RCNzUiFinaleLowSpeedBTNGuide.InitializeButtonGuide
// 0x0020 (0x0020 - 0x0000)
struct RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 str;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide) == 0x000008, "Wrong alignment on RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide");
static_assert(sizeof(RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide) == 0x000020, "Wrong size on RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide");
static_assert(offsetof(RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide, InKeyType) == 0x000000, "Member 'RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide::InKeyType' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide, str) == 0x000008, "Member 'RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide::str' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide, ReturnValue) == 0x000018, "Member 'RCNzUiFinaleLowSpeedBTNGuide_InitializeButtonGuide::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePageMoveLayoutWidget.ChangeVisiblePageMoveIcons
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePageMoveLayoutWidget_ChangeVisiblePageMoveIcons final
{
public:
	EPageMoveVisibleDirection                     dir;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePageMoveLayoutWidget_ChangeVisiblePageMoveIcons) == 0x000001, "Wrong alignment on RCNzUiFinalePageMoveLayoutWidget_ChangeVisiblePageMoveIcons");
static_assert(sizeof(RCNzUiFinalePageMoveLayoutWidget_ChangeVisiblePageMoveIcons) == 0x000001, "Wrong size on RCNzUiFinalePageMoveLayoutWidget_ChangeVisiblePageMoveIcons");
static_assert(offsetof(RCNzUiFinalePageMoveLayoutWidget_ChangeVisiblePageMoveIcons, dir) == 0x000000, "Member 'RCNzUiFinalePageMoveLayoutWidget_ChangeVisiblePageMoveIcons::dir' has a wrong offset!");

// Function RC.RCNzUiFinalePageMoveLayoutWidget.GetPageMoveIconLocationAndSize
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinalePageMoveLayoutWidget_GetPageMoveIconLocationAndSize final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePageMoveLayoutWidget_GetPageMoveIconLocationAndSize) == 0x000004, "Wrong alignment on RCNzUiFinalePageMoveLayoutWidget_GetPageMoveIconLocationAndSize");
static_assert(sizeof(RCNzUiFinalePageMoveLayoutWidget_GetPageMoveIconLocationAndSize) == 0x000010, "Wrong size on RCNzUiFinalePageMoveLayoutWidget_GetPageMoveIconLocationAndSize");
static_assert(offsetof(RCNzUiFinalePageMoveLayoutWidget_GetPageMoveIconLocationAndSize, Location) == 0x000000, "Member 'RCNzUiFinalePageMoveLayoutWidget_GetPageMoveIconLocationAndSize::Location' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePageMoveLayoutWidget_GetPageMoveIconLocationAndSize, Size) == 0x000008, "Member 'RCNzUiFinalePageMoveLayoutWidget_GetPageMoveIconLocationAndSize::Size' has a wrong offset!");

// Function RC.RCNzUiFinalePieceDetailWidget.UpdateDetailInfo
// 0x0028 (0x0028 - 0x0000)
struct RCNzUiFinalePieceDetailWidget_UpdateDetailInfo final
{
public:
	class FString                                 titile;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTexture2D*                       PieceImg;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTexture2D*                       lockNum;                                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLock;                                            // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUsed;                                            // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUnlockAnim;                                      // 0x0022(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinalePieceDetailWidget_UpdateDetailInfo) == 0x000008, "Wrong alignment on RCNzUiFinalePieceDetailWidget_UpdateDetailInfo");
static_assert(sizeof(RCNzUiFinalePieceDetailWidget_UpdateDetailInfo) == 0x000028, "Wrong size on RCNzUiFinalePieceDetailWidget_UpdateDetailInfo");
static_assert(offsetof(RCNzUiFinalePieceDetailWidget_UpdateDetailInfo, titile) == 0x000000, "Member 'RCNzUiFinalePieceDetailWidget_UpdateDetailInfo::titile' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceDetailWidget_UpdateDetailInfo, PieceImg) == 0x000010, "Member 'RCNzUiFinalePieceDetailWidget_UpdateDetailInfo::PieceImg' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceDetailWidget_UpdateDetailInfo, lockNum) == 0x000018, "Member 'RCNzUiFinalePieceDetailWidget_UpdateDetailInfo::lockNum' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceDetailWidget_UpdateDetailInfo, isLock) == 0x000020, "Member 'RCNzUiFinalePieceDetailWidget_UpdateDetailInfo::isLock' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceDetailWidget_UpdateDetailInfo, isUsed) == 0x000021, "Member 'RCNzUiFinalePieceDetailWidget_UpdateDetailInfo::isUsed' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceDetailWidget_UpdateDetailInfo, isUnlockAnim) == 0x000022, "Member 'RCNzUiFinalePieceDetailWidget_UpdateDetailInfo::isUnlockAnim' has a wrong offset!");

// Function RC.RCSingletonObject.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct RCSingletonObject_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSingletonObject_ReceiveTick) == 0x000004, "Wrong alignment on RCSingletonObject_ReceiveTick");
static_assert(sizeof(RCSingletonObject_ReceiveTick) == 0x000004, "Wrong size on RCSingletonObject_ReceiveTick");
static_assert(offsetof(RCSingletonObject_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'RCSingletonObject_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.CheckCurrentPieceState
// 0x0002 (0x0002 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_CheckCurrentPieceState final
{
public:
	EFinalePieceState                             targetState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_CheckCurrentPieceState) == 0x000001, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_CheckCurrentPieceState");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_CheckCurrentPieceState) == 0x000002, "Wrong size on RCNzUiFinalePieceList_PieceBase_CheckCurrentPieceState");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_CheckCurrentPieceState, targetState) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_CheckCurrentPieceState::targetState' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_CheckCurrentPieceState, ReturnValue) == 0x000001, "Member 'RCNzUiFinalePieceList_PieceBase_CheckCurrentPieceState::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.GetCurrentPieceState
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_GetCurrentPieceState final
{
public:
	EFinalePieceState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_GetCurrentPieceState) == 0x000001, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_GetCurrentPieceState");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_GetCurrentPieceState) == 0x000001, "Wrong size on RCNzUiFinalePieceList_PieceBase_GetCurrentPieceState");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_GetCurrentPieceState, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_GetCurrentPieceState::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.GetPieceDegree
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_GetPieceDegree final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_GetPieceDegree) == 0x000004, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_GetPieceDegree");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_GetPieceDegree) == 0x000004, "Wrong size on RCNzUiFinalePieceList_PieceBase_GetPieceDegree");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_GetPieceDegree, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_GetPieceDegree::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.GetPieceImgAngle
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_GetPieceImgAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_GetPieceImgAngle) == 0x000004, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_GetPieceImgAngle");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_GetPieceImgAngle) == 0x000004, "Wrong size on RCNzUiFinalePieceList_PieceBase_GetPieceImgAngle");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_GetPieceImgAngle, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_GetPieceImgAngle::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.GetPieceImgSize
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_GetPieceImgSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_GetPieceImgSize) == 0x000004, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_GetPieceImgSize");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_GetPieceImgSize) == 0x000008, "Wrong size on RCNzUiFinalePieceList_PieceBase_GetPieceImgSize");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_GetPieceImgSize, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_GetPieceImgSize::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.GetPieceWBPScale
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_GetPieceWBPScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_GetPieceWBPScale) == 0x000004, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_GetPieceWBPScale");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_GetPieceWBPScale) == 0x000008, "Wrong size on RCNzUiFinalePieceList_PieceBase_GetPieceWBPScale");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_GetPieceWBPScale, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_GetPieceWBPScale::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.GetPieceWBPSize
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_GetPieceWBPSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_GetPieceWBPSize) == 0x000004, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_GetPieceWBPSize");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_GetPieceWBPSize) == 0x000008, "Wrong size on RCNzUiFinalePieceList_PieceBase_GetPieceWBPSize");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_GetPieceWBPSize, ReturnValue) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_GetPieceWBPSize::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.InitializePiece
// 0x0060 (0x0060 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_InitializePiece final
{
public:
	struct FRCNzFinalePieceObjectInfo             Info;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	class URCNzUiFinalePieceLayoutWidget*         Owner;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_InitializePiece) == 0x000008, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_InitializePiece");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_InitializePiece) == 0x000060, "Wrong size on RCNzUiFinalePieceList_PieceBase_InitializePiece");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_InitializePiece, Info) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_InitializePiece::Info' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_InitializePiece, Owner) == 0x000058, "Member 'RCNzUiFinalePieceList_PieceBase_InitializePiece::Owner' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.SetPieceImage
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_SetPieceImage final
{
public:
	class UTexture2D*                             tex;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_SetPieceImage) == 0x000008, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_SetPieceImage");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_SetPieceImage) == 0x000008, "Wrong size on RCNzUiFinalePieceList_PieceBase_SetPieceImage");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_SetPieceImage, tex) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_SetPieceImage::tex' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.SetPieceState
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_SetPieceState final
{
public:
	bool                                          IsSelect;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_SetPieceState) == 0x000001, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_SetPieceState");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_SetPieceState) == 0x000001, "Wrong size on RCNzUiFinalePieceList_PieceBase_SetPieceState");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_SetPieceState, IsSelect) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_SetPieceState::IsSelect' has a wrong offset!");

// Function RC.RCNzUiFinalePieceList_PieceBase.UpdatePiece
// 0x0058 (0x0058 - 0x0000)
struct RCNzUiFinalePieceList_PieceBase_UpdatePiece final
{
public:
	struct FRCNzFinalePieceObjectInfo             Info;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceList_PieceBase_UpdatePiece) == 0x000008, "Wrong alignment on RCNzUiFinalePieceList_PieceBase_UpdatePiece");
static_assert(sizeof(RCNzUiFinalePieceList_PieceBase_UpdatePiece) == 0x000058, "Wrong size on RCNzUiFinalePieceList_PieceBase_UpdatePiece");
static_assert(offsetof(RCNzUiFinalePieceList_PieceBase_UpdatePiece, Info) == 0x000000, "Member 'RCNzUiFinalePieceList_PieceBase_UpdatePiece::Info' has a wrong offset!");

// Function RC.RCNzUiFinalePieceQuestionBase.SetQuestionTextPosition
// 0x000C (0x000C - 0x0000)
struct RCNzUiFinalePieceQuestionBase_SetQuestionTextPosition final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLeft;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinalePieceQuestionBase_SetQuestionTextPosition) == 0x000004, "Wrong alignment on RCNzUiFinalePieceQuestionBase_SetQuestionTextPosition");
static_assert(sizeof(RCNzUiFinalePieceQuestionBase_SetQuestionTextPosition) == 0x00000C, "Wrong size on RCNzUiFinalePieceQuestionBase_SetQuestionTextPosition");
static_assert(offsetof(RCNzUiFinalePieceQuestionBase_SetQuestionTextPosition, Position) == 0x000000, "Member 'RCNzUiFinalePieceQuestionBase_SetQuestionTextPosition::Position' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceQuestionBase_SetQuestionTextPosition, isLeft) == 0x000008, "Member 'RCNzUiFinalePieceQuestionBase_SetQuestionTextPosition::isLeft' has a wrong offset!");

// Function RC.RCNzUiFinalePieceQuestionBase.UpdateQuestion
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinalePieceQuestionBase_UpdateQuestion final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QuestionText;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinalePieceQuestionBase_UpdateQuestion) == 0x000008, "Wrong alignment on RCNzUiFinalePieceQuestionBase_UpdateQuestion");
static_assert(sizeof(RCNzUiFinalePieceQuestionBase_UpdateQuestion) == 0x000018, "Wrong size on RCNzUiFinalePieceQuestionBase_UpdateQuestion");
static_assert(offsetof(RCNzUiFinalePieceQuestionBase_UpdateQuestion, IsVisible_0) == 0x000000, "Member 'RCNzUiFinalePieceQuestionBase_UpdateQuestion::IsVisible_0' has a wrong offset!");
static_assert(offsetof(RCNzUiFinalePieceQuestionBase_UpdateQuestion, QuestionText) == 0x000008, "Member 'RCNzUiFinalePieceQuestionBase_UpdateQuestion::QuestionText' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionLayoutWidget.UpdateAllQuestionIcon
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleQuestionLayoutWidget_UpdateAllQuestionIcon final
{
public:
	TArray<bool>                                  isCheckList;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleQuestionLayoutWidget_UpdateAllQuestionIcon) == 0x000008, "Wrong alignment on RCNzUiFinaleQuestionLayoutWidget_UpdateAllQuestionIcon");
static_assert(sizeof(RCNzUiFinaleQuestionLayoutWidget_UpdateAllQuestionIcon) == 0x000010, "Wrong size on RCNzUiFinaleQuestionLayoutWidget_UpdateAllQuestionIcon");
static_assert(offsetof(RCNzUiFinaleQuestionLayoutWidget_UpdateAllQuestionIcon, isCheckList) == 0x000000, "Member 'RCNzUiFinaleQuestionLayoutWidget_UpdateAllQuestionIcon::isCheckList' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionLayoutWidget.UpdateAtQuestionIcon
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleQuestionLayoutWidget_UpdateAtQuestionIcon final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCheck;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleQuestionLayoutWidget_UpdateAtQuestionIcon) == 0x000004, "Wrong alignment on RCNzUiFinaleQuestionLayoutWidget_UpdateAtQuestionIcon");
static_assert(sizeof(RCNzUiFinaleQuestionLayoutWidget_UpdateAtQuestionIcon) == 0x000008, "Wrong size on RCNzUiFinaleQuestionLayoutWidget_UpdateAtQuestionIcon");
static_assert(offsetof(RCNzUiFinaleQuestionLayoutWidget_UpdateAtQuestionIcon, Index_0) == 0x000000, "Member 'RCNzUiFinaleQuestionLayoutWidget_UpdateAtQuestionIcon::Index_0' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleQuestionLayoutWidget_UpdateAtQuestionIcon, isCheck) == 0x000004, "Member 'RCNzUiFinaleQuestionLayoutWidget_UpdateAtQuestionIcon::isCheck' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionRestWidget.SetQuestionNum
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleQuestionRestWidget_SetQuestionNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleQuestionRestWidget_SetQuestionNum) == 0x000004, "Wrong alignment on RCNzUiFinaleQuestionRestWidget_SetQuestionNum");
static_assert(sizeof(RCNzUiFinaleQuestionRestWidget_SetQuestionNum) == 0x000004, "Wrong size on RCNzUiFinaleQuestionRestWidget_SetQuestionNum");
static_assert(offsetof(RCNzUiFinaleQuestionRestWidget_SetQuestionNum, Num) == 0x000000, "Member 'RCNzUiFinaleQuestionRestWidget_SetQuestionNum::Num' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.AddBackgroundImg
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleQuestionWidget_AddBackgroundImg final
{
public:
	class UTexture2D*                             tex;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_AddBackgroundImg) == 0x000008, "Wrong alignment on RCNzUiFinaleQuestionWidget_AddBackgroundImg");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_AddBackgroundImg) == 0x000008, "Wrong size on RCNzUiFinaleQuestionWidget_AddBackgroundImg");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_AddBackgroundImg, tex) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_AddBackgroundImg::tex' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.AddInteractIconWidget
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiFinaleQuestionWidget_AddInteractIconWidget final
{
public:
	class URCNzUiFinaleInteractIconWidget*        Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSuccess;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_AddInteractIconWidget) == 0x000008, "Wrong alignment on RCNzUiFinaleQuestionWidget_AddInteractIconWidget");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_AddInteractIconWidget) == 0x000018, "Wrong size on RCNzUiFinaleQuestionWidget_AddInteractIconWidget");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_AddInteractIconWidget, Widget) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_AddInteractIconWidget::Widget' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_AddInteractIconWidget, Position) == 0x000008, "Member 'RCNzUiFinaleQuestionWidget_AddInteractIconWidget::Position' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_AddInteractIconWidget, isSuccess) == 0x000010, "Member 'RCNzUiFinaleQuestionWidget_AddInteractIconWidget::isSuccess' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.GetCurrentDetectiveScene
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleQuestionWidget_GetCurrentDetectiveScene final
{
public:
	class URCNzUiFinaleDetectiveSceneWidget*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_GetCurrentDetectiveScene) == 0x000008, "Wrong alignment on RCNzUiFinaleQuestionWidget_GetCurrentDetectiveScene");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_GetCurrentDetectiveScene) == 0x000008, "Wrong size on RCNzUiFinaleQuestionWidget_GetCurrentDetectiveScene");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_GetCurrentDetectiveScene, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_GetCurrentDetectiveScene::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.GetCurrentShowDetectiveSceneIdx
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleQuestionWidget_GetCurrentShowDetectiveSceneIdx final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_GetCurrentShowDetectiveSceneIdx) == 0x000004, "Wrong alignment on RCNzUiFinaleQuestionWidget_GetCurrentShowDetectiveSceneIdx");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_GetCurrentShowDetectiveSceneIdx) == 0x000004, "Wrong size on RCNzUiFinaleQuestionWidget_GetCurrentShowDetectiveSceneIdx");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_GetCurrentShowDetectiveSceneIdx, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_GetCurrentShowDetectiveSceneIdx::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.GetPieceList
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleQuestionWidget_GetPieceList final
{
public:
	TArray<class URCNzUiFinaleInteractIconWidget*> ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_GetPieceList) == 0x000008, "Wrong alignment on RCNzUiFinaleQuestionWidget_GetPieceList");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_GetPieceList) == 0x000010, "Wrong size on RCNzUiFinaleQuestionWidget_GetPieceList");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_GetPieceList, ReturnValue) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_GetPieceList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.SetIsPickPiece
// 0x000C (0x000C - 0x0000)
struct RCNzUiFinaleQuestionWidget_SetIsPickPiece final
{
public:
	class FName                                   targetPieceID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPick;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_SetIsPickPiece) == 0x000004, "Wrong alignment on RCNzUiFinaleQuestionWidget_SetIsPickPiece");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_SetIsPickPiece) == 0x00000C, "Wrong size on RCNzUiFinaleQuestionWidget_SetIsPickPiece");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_SetIsPickPiece, targetPieceID) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_SetIsPickPiece::targetPieceID' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_SetIsPickPiece, isPick) == 0x000008, "Member 'RCNzUiFinaleQuestionWidget_SetIsPickPiece::isPick' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.SetVisiblePiece
// 0x000C (0x000C - 0x0000)
struct RCNzUiFinaleQuestionWidget_SetVisiblePiece final
{
public:
	class FName                                   targetPieceID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          visible;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_SetVisiblePiece) == 0x000004, "Wrong alignment on RCNzUiFinaleQuestionWidget_SetVisiblePiece");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_SetVisiblePiece) == 0x00000C, "Wrong size on RCNzUiFinaleQuestionWidget_SetVisiblePiece");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_SetVisiblePiece, targetPieceID) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_SetVisiblePiece::targetPieceID' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_SetVisiblePiece, visible) == 0x000008, "Member 'RCNzUiFinaleQuestionWidget_SetVisiblePiece::visible' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.SetVisibleQuestionWidget
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiFinaleQuestionWidget_SetVisibleQuestionWidget final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_SetVisibleQuestionWidget) == 0x000001, "Wrong alignment on RCNzUiFinaleQuestionWidget_SetVisibleQuestionWidget");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_SetVisibleQuestionWidget) == 0x000001, "Wrong size on RCNzUiFinaleQuestionWidget_SetVisibleQuestionWidget");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_SetVisibleQuestionWidget, IsVisible_0) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_SetVisibleQuestionWidget::IsVisible_0' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.StartPlayPageMoveAnim
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim final
{
public:
	int32                                         targetSectionNum;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFinalePageMoveDirection                      dir;                                               // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim) == 0x000004, "Wrong alignment on RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim) == 0x000008, "Wrong size on RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim, targetSectionNum) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim::targetSectionNum' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim, dir) == 0x000004, "Member 'RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim::dir' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim, ReturnValue) == 0x000005, "Member 'RCNzUiFinaleQuestionWidget_StartPlayPageMoveAnim::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.UpdateBackgroundImg
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleQuestionWidget_UpdateBackgroundImg final
{
public:
	int32                                         targetSectionNum;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_UpdateBackgroundImg) == 0x000004, "Wrong alignment on RCNzUiFinaleQuestionWidget_UpdateBackgroundImg");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_UpdateBackgroundImg) == 0x000008, "Wrong size on RCNzUiFinaleQuestionWidget_UpdateBackgroundImg");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_UpdateBackgroundImg, targetSectionNum) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_UpdateBackgroundImg::targetSectionNum' has a wrong offset!");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_UpdateBackgroundImg, ReturnValue) == 0x000004, "Member 'RCNzUiFinaleQuestionWidget_UpdateBackgroundImg::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.UpdatePiece
// 0x0010 (0x0010 - 0x0000)
struct RCNzUiFinaleQuestionWidget_UpdatePiece final
{
public:
	TArray<struct FRCNzFinaleGamePieceData>       pieceList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_UpdatePiece) == 0x000008, "Wrong alignment on RCNzUiFinaleQuestionWidget_UpdatePiece");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_UpdatePiece) == 0x000010, "Wrong size on RCNzUiFinaleQuestionWidget_UpdatePiece");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_UpdatePiece, pieceList) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_UpdatePiece::pieceList' has a wrong offset!");

// Function RC.RCNzUiFinaleQuestionWidget.UpdateTexture
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiFinaleQuestionWidget_UpdateTexture final
{
public:
	const class UTexture2D*                       backImg;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleQuestionWidget_UpdateTexture) == 0x000008, "Wrong alignment on RCNzUiFinaleQuestionWidget_UpdateTexture");
static_assert(sizeof(RCNzUiFinaleQuestionWidget_UpdateTexture) == 0x000008, "Wrong size on RCNzUiFinaleQuestionWidget_UpdateTexture");
static_assert(offsetof(RCNzUiFinaleQuestionWidget_UpdateTexture, backImg) == 0x000000, "Member 'RCNzUiFinaleQuestionWidget_UpdateTexture::backImg' has a wrong offset!");

// Function RC.RCNzUiFinaleTimeLimitWidget.SetTime
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiFinaleTimeLimitWidget_SetTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiFinaleTimeLimitWidget_SetTime) == 0x000004, "Wrong alignment on RCNzUiFinaleTimeLimitWidget_SetTime");
static_assert(sizeof(RCNzUiFinaleTimeLimitWidget_SetTime) == 0x000004, "Wrong size on RCNzUiFinaleTimeLimitWidget_SetTime");
static_assert(offsetof(RCNzUiFinaleTimeLimitWidget_SetTime, Time) == 0x000000, "Member 'RCNzUiFinaleTimeLimitWidget_SetTime::Time' has a wrong offset!");

// Function RC.RCNzUiReproduceClosedRoomTelop.GetReproduceClosedRoomTelopPriority
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiReproduceClosedRoomTelop_GetReproduceClosedRoomTelopPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiReproduceClosedRoomTelop_GetReproduceClosedRoomTelopPriority) == 0x000004, "Wrong alignment on RCNzUiReproduceClosedRoomTelop_GetReproduceClosedRoomTelopPriority");
static_assert(sizeof(RCNzUiReproduceClosedRoomTelop_GetReproduceClosedRoomTelopPriority) == 0x000004, "Wrong size on RCNzUiReproduceClosedRoomTelop_GetReproduceClosedRoomTelopPriority");
static_assert(offsetof(RCNzUiReproduceClosedRoomTelop_GetReproduceClosedRoomTelopPriority, ReturnValue) == 0x000000, "Member 'RCNzUiReproduceClosedRoomTelop_GetReproduceClosedRoomTelopPriority::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiReproduceClosedRoomTelop.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiReproduceClosedRoomTelop_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiReproduceClosedRoomTelop_IsFinished) == 0x000001, "Wrong alignment on RCNzUiReproduceClosedRoomTelop_IsFinished");
static_assert(sizeof(RCNzUiReproduceClosedRoomTelop_IsFinished) == 0x000001, "Wrong size on RCNzUiReproduceClosedRoomTelop_IsFinished");
static_assert(offsetof(RCNzUiReproduceClosedRoomTelop_IsFinished, ReturnValue) == 0x000000, "Member 'RCNzUiReproduceClosedRoomTelop_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiReproduceClosedRoomTelop.StartTelop
// 0x0008 (0x0008 - 0x0000)
struct RCNzUiReproduceClosedRoomTelop_StartTelop final
{
public:
	class URCReproduceCloseRoomUIDataAsset*       DataAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiReproduceClosedRoomTelop_StartTelop) == 0x000008, "Wrong alignment on RCNzUiReproduceClosedRoomTelop_StartTelop");
static_assert(sizeof(RCNzUiReproduceClosedRoomTelop_StartTelop) == 0x000008, "Wrong size on RCNzUiReproduceClosedRoomTelop_StartTelop");
static_assert(offsetof(RCNzUiReproduceClosedRoomTelop_StartTelop, DataAsset) == 0x000000, "Member 'RCNzUiReproduceClosedRoomTelop_StartTelop::DataAsset' has a wrong offset!");

// Function RC.RCNzUiSkillInfo.SetWaitTime
// 0x0004 (0x0004 - 0x0000)
struct RCNzUiSkillInfo_SetWaitTime final
{
public:
	float                                         sec;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiSkillInfo_SetWaitTime) == 0x000004, "Wrong alignment on RCNzUiSkillInfo_SetWaitTime");
static_assert(sizeof(RCNzUiSkillInfo_SetWaitTime) == 0x000004, "Wrong size on RCNzUiSkillInfo_SetWaitTime");
static_assert(offsetof(RCNzUiSkillInfo_SetWaitTime, sec) == 0x000000, "Member 'RCNzUiSkillInfo_SetWaitTime::sec' has a wrong offset!");

// Function RC.RCNzUiSkillInfo.StartSkillInfo
// 0x0014 (0x0014 - 0x0000)
struct RCNzUiSkillInfo_StartSkillInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffsetTime;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFinishWaitTime;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInFinishSE;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiSkillInfo_StartSkillInfo) == 0x000004, "Wrong alignment on RCNzUiSkillInfo_StartSkillInfo");
static_assert(sizeof(RCNzUiSkillInfo_StartSkillInfo) == 0x000014, "Wrong size on RCNzUiSkillInfo_StartSkillInfo");
static_assert(offsetof(RCNzUiSkillInfo_StartSkillInfo, ID) == 0x000000, "Member 'RCNzUiSkillInfo_StartSkillInfo::ID' has a wrong offset!");
static_assert(offsetof(RCNzUiSkillInfo_StartSkillInfo, StartOffsetTime) == 0x000008, "Member 'RCNzUiSkillInfo_StartSkillInfo::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(RCNzUiSkillInfo_StartSkillInfo, InFinishWaitTime) == 0x00000C, "Member 'RCNzUiSkillInfo_StartSkillInfo::InFinishWaitTime' has a wrong offset!");
static_assert(offsetof(RCNzUiSkillInfo_StartSkillInfo, bInFinishSE) == 0x000010, "Member 'RCNzUiSkillInfo_StartSkillInfo::bInFinishSE' has a wrong offset!");

// Function RC.RCNzUiSkillInfo.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiSkillInfo_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiSkillInfo_IsFinished) == 0x000001, "Wrong alignment on RCNzUiSkillInfo_IsFinished");
static_assert(sizeof(RCNzUiSkillInfo_IsFinished) == 0x000001, "Wrong size on RCNzUiSkillInfo_IsFinished");
static_assert(offsetof(RCNzUiSkillInfo_IsFinished, ReturnValue) == 0x000000, "Member 'RCNzUiSkillInfo_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiSkillInfoList.StartShowSkillInfoList
// 0x0018 (0x0018 - 0x0000)
struct RCNzUiSkillInfoList_StartShowSkillInfoList final
{
public:
	TArray<class FName>                           IdList;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzUiSkillInfoList_StartShowSkillInfoList) == 0x000008, "Wrong alignment on RCNzUiSkillInfoList_StartShowSkillInfoList");
static_assert(sizeof(RCNzUiSkillInfoList_StartShowSkillInfoList) == 0x000018, "Wrong size on RCNzUiSkillInfoList_StartShowSkillInfoList");
static_assert(offsetof(RCNzUiSkillInfoList_StartShowSkillInfoList, IdList) == 0x000000, "Member 'RCNzUiSkillInfoList_StartShowSkillInfoList::IdList' has a wrong offset!");
static_assert(offsetof(RCNzUiSkillInfoList_StartShowSkillInfoList, ReturnValue) == 0x000010, "Member 'RCNzUiSkillInfoList_StartShowSkillInfoList::ReturnValue' has a wrong offset!");

// Function RC.RCNzUiSkillInfoList.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCNzUiSkillInfoList_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzUiSkillInfoList_IsFinished) == 0x000001, "Wrong alignment on RCNzUiSkillInfoList_IsFinished");
static_assert(sizeof(RCNzUiSkillInfoList_IsFinished) == 0x000001, "Wrong size on RCNzUiSkillInfoList_IsFinished");
static_assert(offsetof(RCNzUiSkillInfoList_IsFinished, ReturnValue) == 0x000000, "Member 'RCNzUiSkillInfoList_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCNzWaruagaki_LayoutBase.InitializeKaikagiQuestionAndInfoUI
// 0x0020 (0x0020 - 0x0000)
struct RCNzWaruagaki_LayoutBase_InitializeKaikagiQuestionAndInfoUI final
{
public:
	class FString                                 Heading;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 question;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzWaruagaki_LayoutBase_InitializeKaikagiQuestionAndInfoUI) == 0x000008, "Wrong alignment on RCNzWaruagaki_LayoutBase_InitializeKaikagiQuestionAndInfoUI");
static_assert(sizeof(RCNzWaruagaki_LayoutBase_InitializeKaikagiQuestionAndInfoUI) == 0x000020, "Wrong size on RCNzWaruagaki_LayoutBase_InitializeKaikagiQuestionAndInfoUI");
static_assert(offsetof(RCNzWaruagaki_LayoutBase_InitializeKaikagiQuestionAndInfoUI, Heading) == 0x000000, "Member 'RCNzWaruagaki_LayoutBase_InitializeKaikagiQuestionAndInfoUI::Heading' has a wrong offset!");
static_assert(offsetof(RCNzWaruagaki_LayoutBase_InitializeKaikagiQuestionAndInfoUI, question) == 0x000010, "Member 'RCNzWaruagaki_LayoutBase_InitializeKaikagiQuestionAndInfoUI::question' has a wrong offset!");

// Function RC.RCNzWaruagaki_LayoutBase.SetHP
// 0x000C (0x000C - 0x0000)
struct RCNzWaruagaki_LayoutBase_SetHP final
{
public:
	int32                                         OldHP;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewHP;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayDamageAnimation;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCNzWaruagaki_LayoutBase_SetHP) == 0x000004, "Wrong alignment on RCNzWaruagaki_LayoutBase_SetHP");
static_assert(sizeof(RCNzWaruagaki_LayoutBase_SetHP) == 0x00000C, "Wrong size on RCNzWaruagaki_LayoutBase_SetHP");
static_assert(offsetof(RCNzWaruagaki_LayoutBase_SetHP, OldHP) == 0x000000, "Member 'RCNzWaruagaki_LayoutBase_SetHP::OldHP' has a wrong offset!");
static_assert(offsetof(RCNzWaruagaki_LayoutBase_SetHP, NewHP) == 0x000004, "Member 'RCNzWaruagaki_LayoutBase_SetHP::NewHP' has a wrong offset!");
static_assert(offsetof(RCNzWaruagaki_LayoutBase_SetHP, PlayDamageAnimation) == 0x000008, "Member 'RCNzWaruagaki_LayoutBase_SetHP::PlayDamageAnimation' has a wrong offset!");

// Function RC.RCNzWaruagaki_LayoutBase.SetKaiKagiName
// 0x0008 (0x0008 - 0x0000)
struct RCNzWaruagaki_LayoutBase_SetKaiKagiName final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzWaruagaki_LayoutBase_SetKaiKagiName) == 0x000004, "Wrong alignment on RCNzWaruagaki_LayoutBase_SetKaiKagiName");
static_assert(sizeof(RCNzWaruagaki_LayoutBase_SetKaiKagiName) == 0x000008, "Wrong size on RCNzWaruagaki_LayoutBase_SetKaiKagiName");
static_assert(offsetof(RCNzWaruagaki_LayoutBase_SetKaiKagiName, InTextID) == 0x000000, "Member 'RCNzWaruagaki_LayoutBase_SetKaiKagiName::InTextID' has a wrong offset!");

// Function RC.RCNzWaruagaki_LayoutBase.ShowButtonGuide
// 0x0001 (0x0001 - 0x0000)
struct RCNzWaruagaki_LayoutBase_ShowButtonGuide final
{
public:
	bool                                          IsNormalMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzWaruagaki_LayoutBase_ShowButtonGuide) == 0x000001, "Wrong alignment on RCNzWaruagaki_LayoutBase_ShowButtonGuide");
static_assert(sizeof(RCNzWaruagaki_LayoutBase_ShowButtonGuide) == 0x000001, "Wrong size on RCNzWaruagaki_LayoutBase_ShowButtonGuide");
static_assert(offsetof(RCNzWaruagaki_LayoutBase_ShowButtonGuide, IsNormalMode) == 0x000000, "Member 'RCNzWaruagaki_LayoutBase_ShowButtonGuide::IsNormalMode' has a wrong offset!");

// Function RC.RCNzWaruagaki_Question.InitializeQuestionText
// 0x0020 (0x0020 - 0x0000)
struct RCNzWaruagaki_Question_InitializeQuestionText final
{
public:
	class FString                                 Heading;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 question;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCNzWaruagaki_Question_InitializeQuestionText) == 0x000008, "Wrong alignment on RCNzWaruagaki_Question_InitializeQuestionText");
static_assert(sizeof(RCNzWaruagaki_Question_InitializeQuestionText) == 0x000020, "Wrong size on RCNzWaruagaki_Question_InitializeQuestionText");
static_assert(offsetof(RCNzWaruagaki_Question_InitializeQuestionText, Heading) == 0x000000, "Member 'RCNzWaruagaki_Question_InitializeQuestionText::Heading' has a wrong offset!");
static_assert(offsetof(RCNzWaruagaki_Question_InitializeQuestionText, question) == 0x000010, "Member 'RCNzWaruagaki_Question_InitializeQuestionText::question' has a wrong offset!");

// Function RC.RCUiMenuKagi.InitializeMenuKagi
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuKagi_InitializeMenuKagi final
{
public:
	bool                                          bInKagiSelect;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuKagi_InitializeMenuKagi) == 0x000001, "Wrong alignment on RCUiMenuKagi_InitializeMenuKagi");
static_assert(sizeof(RCUiMenuKagi_InitializeMenuKagi) == 0x000001, "Wrong size on RCUiMenuKagi_InitializeMenuKagi");
static_assert(offsetof(RCUiMenuKagi_InitializeMenuKagi, bInKagiSelect) == 0x000000, "Member 'RCUiMenuKagi_InitializeMenuKagi::bInKagiSelect' has a wrong offset!");

// Function RC.RCTitleMenuList.TitleListSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCTitleMenuList_TitleListSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleMenuList_TitleListSelectNavigation) == 0x000008, "Wrong alignment on RCTitleMenuList_TitleListSelectNavigation");
static_assert(sizeof(RCTitleMenuList_TitleListSelectNavigation) == 0x000010, "Wrong size on RCTitleMenuList_TitleListSelectNavigation");
static_assert(offsetof(RCTitleMenuList_TitleListSelectNavigation, InNavigation) == 0x000000, "Member 'RCTitleMenuList_TitleListSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTitleMenuList_TitleListSelectNavigation, ReturnValue) == 0x000008, "Member 'RCTitleMenuList_TitleListSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCUiMenuQuestList.QuestMenuCustomNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuQuestList_QuestMenuCustomNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuQuestList_QuestMenuCustomNavigation) == 0x000008, "Wrong alignment on RCUiMenuQuestList_QuestMenuCustomNavigation");
static_assert(sizeof(RCUiMenuQuestList_QuestMenuCustomNavigation) == 0x000010, "Wrong size on RCUiMenuQuestList_QuestMenuCustomNavigation");
static_assert(offsetof(RCUiMenuQuestList_QuestMenuCustomNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuQuestList_QuestMenuCustomNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuQuestList_QuestMenuCustomNavigation, InPlayerController) == 0x000008, "Member 'RCUiMenuQuestList_QuestMenuCustomNavigation::InPlayerController' has a wrong offset!");

// Function RC.RCUiMenuQuestList.QuestNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuQuestList_QuestNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuQuestList_QuestNavigation) == 0x000008, "Wrong alignment on RCUiMenuQuestList_QuestNavigation");
static_assert(sizeof(RCUiMenuQuestList_QuestNavigation) == 0x000010, "Wrong size on RCUiMenuQuestList_QuestNavigation");
static_assert(offsetof(RCUiMenuQuestList_QuestNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuQuestList_QuestNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuQuestList_QuestNavigation, ReturnValue) == 0x000008, "Member 'RCUiMenuQuestList_QuestNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCUiMenuQuestList.SelectQuestListBarWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuQuestList_SelectQuestListBarWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuQuestList_SelectQuestListBarWrap) == 0x000001, "Wrong alignment on RCUiMenuQuestList_SelectQuestListBarWrap");
static_assert(sizeof(RCUiMenuQuestList_SelectQuestListBarWrap) == 0x000001, "Wrong size on RCUiMenuQuestList_SelectQuestListBarWrap");
static_assert(offsetof(RCUiMenuQuestList_SelectQuestListBarWrap, InKeyType) == 0x000000, "Member 'RCUiMenuQuestList_SelectQuestListBarWrap::InKeyType' has a wrong offset!");

// Function RC.RCUiMenuQuestList.SetQuestButtonGuide
// 0x0008 (0x0008 - 0x0000)
struct RCUiMenuQuestList_SetQuestButtonGuide final
{
public:
	class URCUiMenuQuestListGrp*                  InListGrp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuQuestList_SetQuestButtonGuide) == 0x000008, "Wrong alignment on RCUiMenuQuestList_SetQuestButtonGuide");
static_assert(sizeof(RCUiMenuQuestList_SetQuestButtonGuide) == 0x000008, "Wrong size on RCUiMenuQuestList_SetQuestButtonGuide");
static_assert(offsetof(RCUiMenuQuestList_SetQuestButtonGuide, InListGrp) == 0x000000, "Member 'RCUiMenuQuestList_SetQuestButtonGuide::InListGrp' has a wrong offset!");

// Function RC.RCUiMenuSkillSelect.NotifyCloseEventWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuSkillSelect_NotifyCloseEventWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillSelect_NotifyCloseEventWrap) == 0x000001, "Wrong alignment on RCUiMenuSkillSelect_NotifyCloseEventWrap");
static_assert(sizeof(RCUiMenuSkillSelect_NotifyCloseEventWrap) == 0x000001, "Wrong size on RCUiMenuSkillSelect_NotifyCloseEventWrap");
static_assert(offsetof(RCUiMenuSkillSelect_NotifyCloseEventWrap, InKeyType) == 0x000000, "Member 'RCUiMenuSkillSelect_NotifyCloseEventWrap::InKeyType' has a wrong offset!");

// Function RC.RCUiMenuSkillSelect.NotifyOpenEventWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuSkillSelect_NotifyOpenEventWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillSelect_NotifyOpenEventWrap) == 0x000001, "Wrong alignment on RCUiMenuSkillSelect_NotifyOpenEventWrap");
static_assert(sizeof(RCUiMenuSkillSelect_NotifyOpenEventWrap) == 0x000001, "Wrong size on RCUiMenuSkillSelect_NotifyOpenEventWrap");
static_assert(offsetof(RCUiMenuSkillSelect_NotifyOpenEventWrap, InKeyType) == 0x000000, "Member 'RCUiMenuSkillSelect_NotifyOpenEventWrap::InKeyType' has a wrong offset!");

// Function RC.RCUiMenuSkillSelect.SkillSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuSkillSelect_SkillSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillSelect_SkillSelectNavigation) == 0x000008, "Wrong alignment on RCUiMenuSkillSelect_SkillSelectNavigation");
static_assert(sizeof(RCUiMenuSkillSelect_SkillSelectNavigation) == 0x000010, "Wrong size on RCUiMenuSkillSelect_SkillSelectNavigation");
static_assert(offsetof(RCUiMenuSkillSelect_SkillSelectNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuSkillSelect_SkillSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuSkillSelect_SkillSelectNavigation, ReturnValue) == 0x000008, "Member 'RCUiMenuSkillSelect_SkillSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCUiInteractText.SetTargetName
// 0x0010 (0x0010 - 0x0000)
struct RCUiInteractText_SetTargetName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiInteractText_SetTargetName) == 0x000008, "Wrong alignment on RCUiInteractText_SetTargetName");
static_assert(sizeof(RCUiInteractText_SetTargetName) == 0x000010, "Wrong size on RCUiInteractText_SetTargetName");
static_assert(offsetof(RCUiInteractText_SetTargetName, InName) == 0x000000, "Member 'RCUiInteractText_SetTargetName::InName' has a wrong offset!");

// Function RC.RCUiIntTarget.SetTargetImg
// 0x0001 (0x0001 - 0x0000)
struct RCUiIntTarget_SetTargetImg final
{
public:
	bool                                          bInIsNzWorld;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiIntTarget_SetTargetImg) == 0x000001, "Wrong alignment on RCUiIntTarget_SetTargetImg");
static_assert(sizeof(RCUiIntTarget_SetTargetImg) == 0x000001, "Wrong size on RCUiIntTarget_SetTargetImg");
static_assert(offsetof(RCUiIntTarget_SetTargetImg, bInIsNzWorld) == 0x000000, "Member 'RCUiIntTarget_SetTargetImg::bInIsNzWorld' has a wrong offset!");

// Function RC.RCUiMenuAreaMapPointer.GetWidgetRadius
// 0x0004 (0x0004 - 0x0000)
struct RCUiMenuAreaMapPointer_GetWidgetRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuAreaMapPointer_GetWidgetRadius) == 0x000004, "Wrong alignment on RCUiMenuAreaMapPointer_GetWidgetRadius");
static_assert(sizeof(RCUiMenuAreaMapPointer_GetWidgetRadius) == 0x000004, "Wrong size on RCUiMenuAreaMapPointer_GetWidgetRadius");
static_assert(offsetof(RCUiMenuAreaMapPointer_GetWidgetRadius, ReturnValue) == 0x000000, "Member 'RCUiMenuAreaMapPointer_GetWidgetRadius::ReturnValue' has a wrong offset!");

// Function RC.RCUiMenuAreaMapPointer.SetIconText
// 0x0008 (0x0008 - 0x0000)
struct RCUiMenuAreaMapPointer_SetIconText final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuAreaMapPointer_SetIconText) == 0x000004, "Wrong alignment on RCUiMenuAreaMapPointer_SetIconText");
static_assert(sizeof(RCUiMenuAreaMapPointer_SetIconText) == 0x000008, "Wrong size on RCUiMenuAreaMapPointer_SetIconText");
static_assert(offsetof(RCUiMenuAreaMapPointer_SetIconText, InTextID) == 0x000000, "Member 'RCUiMenuAreaMapPointer_SetIconText::InTextID' has a wrong offset!");

// Function RC.RCUiMenuTutorialList.TutorialNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuTutorialList_TutorialNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuTutorialList_TutorialNavigation) == 0x000008, "Wrong alignment on RCUiMenuTutorialList_TutorialNavigation");
static_assert(sizeof(RCUiMenuTutorialList_TutorialNavigation) == 0x000010, "Wrong size on RCUiMenuTutorialList_TutorialNavigation");
static_assert(offsetof(RCUiMenuTutorialList_TutorialNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuTutorialList_TutorialNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuTutorialList_TutorialNavigation, ReturnValue) == 0x000008, "Member 'RCUiMenuTutorialList_TutorialNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCShinigamiAICommandTrigger.OnActorBeginOverlapScriptEntry
// 0x0010 (0x0010 - 0x0000)
struct RCShinigamiAICommandTrigger_OnActorBeginOverlapScriptEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCShinigamiAICommandTrigger_OnActorBeginOverlapScriptEntry) == 0x000008, "Wrong alignment on RCShinigamiAICommandTrigger_OnActorBeginOverlapScriptEntry");
static_assert(sizeof(RCShinigamiAICommandTrigger_OnActorBeginOverlapScriptEntry) == 0x000010, "Wrong size on RCShinigamiAICommandTrigger_OnActorBeginOverlapScriptEntry");
static_assert(offsetof(RCShinigamiAICommandTrigger_OnActorBeginOverlapScriptEntry, OverlappedActor) == 0x000000, "Member 'RCShinigamiAICommandTrigger_OnActorBeginOverlapScriptEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCShinigamiAICommandTrigger_OnActorBeginOverlapScriptEntry, OtherActor) == 0x000008, "Member 'RCShinigamiAICommandTrigger_OnActorBeginOverlapScriptEntry::OtherActor' has a wrong offset!");

// Function RC.RCShinigamiAICommandTrigger.OnActorEndOverlapScriptEntry
// 0x0010 (0x0010 - 0x0000)
struct RCShinigamiAICommandTrigger_OnActorEndOverlapScriptEntry final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCShinigamiAICommandTrigger_OnActorEndOverlapScriptEntry) == 0x000008, "Wrong alignment on RCShinigamiAICommandTrigger_OnActorEndOverlapScriptEntry");
static_assert(sizeof(RCShinigamiAICommandTrigger_OnActorEndOverlapScriptEntry) == 0x000010, "Wrong size on RCShinigamiAICommandTrigger_OnActorEndOverlapScriptEntry");
static_assert(offsetof(RCShinigamiAICommandTrigger_OnActorEndOverlapScriptEntry, OverlappedActor) == 0x000000, "Member 'RCShinigamiAICommandTrigger_OnActorEndOverlapScriptEntry::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RCShinigamiAICommandTrigger_OnActorEndOverlapScriptEntry, OtherActor) == 0x000008, "Member 'RCShinigamiAICommandTrigger_OnActorEndOverlapScriptEntry::OtherActor' has a wrong offset!");

// Function RC.RCTitleSaveCheckConnectWindow.WindowListSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCTitleSaveCheckConnectWindow_WindowListSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleSaveCheckConnectWindow_WindowListSelectNavigation) == 0x000008, "Wrong alignment on RCTitleSaveCheckConnectWindow_WindowListSelectNavigation");
static_assert(sizeof(RCTitleSaveCheckConnectWindow_WindowListSelectNavigation) == 0x000010, "Wrong size on RCTitleSaveCheckConnectWindow_WindowListSelectNavigation");
static_assert(offsetof(RCTitleSaveCheckConnectWindow_WindowListSelectNavigation, InNavigation) == 0x000000, "Member 'RCTitleSaveCheckConnectWindow_WindowListSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTitleSaveCheckConnectWindow_WindowListSelectNavigation, ReturnValue) == 0x000008, "Member 'RCTitleSaveCheckConnectWindow_WindowListSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCTitleSaveCheckConnectWindow.WindowListSelectNavigationSolo
// 0x0010 (0x0010 - 0x0000)
struct RCTitleSaveCheckConnectWindow_WindowListSelectNavigationSolo final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleSaveCheckConnectWindow_WindowListSelectNavigationSolo) == 0x000008, "Wrong alignment on RCTitleSaveCheckConnectWindow_WindowListSelectNavigationSolo");
static_assert(sizeof(RCTitleSaveCheckConnectWindow_WindowListSelectNavigationSolo) == 0x000010, "Wrong size on RCTitleSaveCheckConnectWindow_WindowListSelectNavigationSolo");
static_assert(offsetof(RCTitleSaveCheckConnectWindow_WindowListSelectNavigationSolo, InNavigation) == 0x000000, "Member 'RCTitleSaveCheckConnectWindow_WindowListSelectNavigationSolo::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTitleSaveCheckConnectWindow_WindowListSelectNavigationSolo, ReturnValue) == 0x000008, "Member 'RCTitleSaveCheckConnectWindow_WindowListSelectNavigationSolo::ReturnValue' has a wrong offset!");

// Function RC.RCPlatformUserInterface.GetLoginStatus
// 0x0001 (0x0001 - 0x0000)
struct RCPlatformUserInterface_GetLoginStatus final
{
public:
	ERCLoginStatus                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlatformUserInterface_GetLoginStatus) == 0x000001, "Wrong alignment on RCPlatformUserInterface_GetLoginStatus");
static_assert(sizeof(RCPlatformUserInterface_GetLoginStatus) == 0x000001, "Wrong size on RCPlatformUserInterface_GetLoginStatus");
static_assert(offsetof(RCPlatformUserInterface_GetLoginStatus, ReturnValue) == 0x000000, "Member 'RCPlatformUserInterface_GetLoginStatus::ReturnValue' has a wrong offset!");

// Function RC.RCPlatformUserInterface.GetPlatformUserName
// 0x0008 (0x0008 - 0x0000)
struct RCPlatformUserInterface_GetPlatformUserName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlatformUserInterface_GetPlatformUserName) == 0x000004, "Wrong alignment on RCPlatformUserInterface_GetPlatformUserName");
static_assert(sizeof(RCPlatformUserInterface_GetPlatformUserName) == 0x000008, "Wrong size on RCPlatformUserInterface_GetPlatformUserName");
static_assert(offsetof(RCPlatformUserInterface_GetPlatformUserName, ReturnValue) == 0x000000, "Member 'RCPlatformUserInterface_GetPlatformUserName::ReturnValue' has a wrong offset!");

// Function RC.RCPlatformUserInterface.RequestGetUserPrivilege
// 0x0010 (0x0010 - 0x0000)
struct RCPlatformUserInterface_RequestGetUserPrivilege final
{
public:
	TDelegate<void(ERCUserPrivileges UserPrivileges)> callbackFunc;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlatformUserInterface_RequestGetUserPrivilege) == 0x000004, "Wrong alignment on RCPlatformUserInterface_RequestGetUserPrivilege");
static_assert(sizeof(RCPlatformUserInterface_RequestGetUserPrivilege) == 0x000010, "Wrong size on RCPlatformUserInterface_RequestGetUserPrivilege");
static_assert(offsetof(RCPlatformUserInterface_RequestGetUserPrivilege, callbackFunc) == 0x000000, "Member 'RCPlatformUserInterface_RequestGetUserPrivilege::callbackFunc' has a wrong offset!");

// Function RC.RCPlatformUserReactProcess.OnFinishSignOutGenericWindow
// 0x0001 (0x0001 - 0x0000)
struct RCPlatformUserReactProcess_OnFinishSignOutGenericWindow final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPlatformUserReactProcess_OnFinishSignOutGenericWindow) == 0x000001, "Wrong alignment on RCPlatformUserReactProcess_OnFinishSignOutGenericWindow");
static_assert(sizeof(RCPlatformUserReactProcess_OnFinishSignOutGenericWindow) == 0x000001, "Wrong size on RCPlatformUserReactProcess_OnFinishSignOutGenericWindow");
static_assert(offsetof(RCPlatformUserReactProcess_OnFinishSignOutGenericWindow, bResult) == 0x000000, "Member 'RCPlatformUserReactProcess_OnFinishSignOutGenericWindow::bResult' has a wrong offset!");

// Function RC.RCUiMenuSkillWindow.IsFinishSkillWindow
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuSkillWindow_IsFinishSkillWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillWindow_IsFinishSkillWindow) == 0x000001, "Wrong alignment on RCUiMenuSkillWindow_IsFinishSkillWindow");
static_assert(sizeof(RCUiMenuSkillWindow_IsFinishSkillWindow) == 0x000001, "Wrong size on RCUiMenuSkillWindow_IsFinishSkillWindow");
static_assert(offsetof(RCUiMenuSkillWindow_IsFinishSkillWindow, ReturnValue) == 0x000000, "Member 'RCUiMenuSkillWindow_IsFinishSkillWindow::ReturnValue' has a wrong offset!");

// Function RC.RCUiMenuSkillWindow.IsGetButtonResult
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuSkillWindow_IsGetButtonResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillWindow_IsGetButtonResult) == 0x000001, "Wrong alignment on RCUiMenuSkillWindow_IsGetButtonResult");
static_assert(sizeof(RCUiMenuSkillWindow_IsGetButtonResult) == 0x000001, "Wrong size on RCUiMenuSkillWindow_IsGetButtonResult");
static_assert(offsetof(RCUiMenuSkillWindow_IsGetButtonResult, ReturnValue) == 0x000000, "Member 'RCUiMenuSkillWindow_IsGetButtonResult::ReturnValue' has a wrong offset!");

// Function RC.RCUiMenuSkillWindow.SetSkillWindowText
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuSkillWindow_SetSkillWindowText final
{
public:
	class FName                                   InSkillMode;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSkillID;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillWindow_SetSkillWindowText) == 0x000004, "Wrong alignment on RCUiMenuSkillWindow_SetSkillWindowText");
static_assert(sizeof(RCUiMenuSkillWindow_SetSkillWindowText) == 0x000010, "Wrong size on RCUiMenuSkillWindow_SetSkillWindowText");
static_assert(offsetof(RCUiMenuSkillWindow_SetSkillWindowText, InSkillMode) == 0x000000, "Member 'RCUiMenuSkillWindow_SetSkillWindowText::InSkillMode' has a wrong offset!");
static_assert(offsetof(RCUiMenuSkillWindow_SetSkillWindowText, InSkillID) == 0x000008, "Member 'RCUiMenuSkillWindow_SetSkillWindowText::InSkillID' has a wrong offset!");

// Function RC.RCPseudoAttachNiagaraComponent.OnEffectFinished
// 0x0008 (0x0008 - 0x0000)
struct RCPseudoAttachNiagaraComponent_OnEffectFinished final
{
public:
	class UNiagaraComponent*                      InParticleComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPseudoAttachNiagaraComponent_OnEffectFinished) == 0x000008, "Wrong alignment on RCPseudoAttachNiagaraComponent_OnEffectFinished");
static_assert(sizeof(RCPseudoAttachNiagaraComponent_OnEffectFinished) == 0x000008, "Wrong size on RCPseudoAttachNiagaraComponent_OnEffectFinished");
static_assert(offsetof(RCPseudoAttachNiagaraComponent_OnEffectFinished, InParticleComponent) == 0x000000, "Member 'RCPseudoAttachNiagaraComponent_OnEffectFinished::InParticleComponent' has a wrong offset!");

// Function RC.RCPseudoAttachParticleComponent.OnEffectFinished
// 0x0008 (0x0008 - 0x0000)
struct RCPseudoAttachParticleComponent_OnEffectFinished final
{
public:
	class UParticleSystemComponent*               InParticleComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCPseudoAttachParticleComponent_OnEffectFinished) == 0x000008, "Wrong alignment on RCPseudoAttachParticleComponent_OnEffectFinished");
static_assert(sizeof(RCPseudoAttachParticleComponent_OnEffectFinished) == 0x000008, "Wrong size on RCPseudoAttachParticleComponent_OnEffectFinished");
static_assert(offsetof(RCPseudoAttachParticleComponent_OnEffectFinished, InParticleComponent) == 0x000000, "Member 'RCPseudoAttachParticleComponent_OnEffectFinished::InParticleComponent' has a wrong offset!");

// Function RC.RCRainActor.GetPosition
// 0x000C (0x000C - 0x0000)
struct RCRainActor_GetPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRainActor_GetPosition) == 0x000004, "Wrong alignment on RCRainActor_GetPosition");
static_assert(sizeof(RCRainActor_GetPosition) == 0x00000C, "Wrong size on RCRainActor_GetPosition");
static_assert(offsetof(RCRainActor_GetPosition, ReturnValue) == 0x000000, "Member 'RCRainActor_GetPosition::ReturnValue' has a wrong offset!");

// Function RC.RCRainMaker.SetCascadeRainColor
// 0x0014 (0x0014 - 0x0000)
struct RCRainMaker_SetCascadeRainColor final
{
public:
	class FName                                   Map;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRainMaker_SetCascadeRainColor) == 0x000004, "Wrong alignment on RCRainMaker_SetCascadeRainColor");
static_assert(sizeof(RCRainMaker_SetCascadeRainColor) == 0x000014, "Wrong size on RCRainMaker_SetCascadeRainColor");
static_assert(offsetof(RCRainMaker_SetCascadeRainColor, Map) == 0x000000, "Member 'RCRainMaker_SetCascadeRainColor::Map' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetCascadeRainColor, Param) == 0x000008, "Member 'RCRainMaker_SetCascadeRainColor::Param' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetCascadeRainColor, ReturnValue) == 0x000010, "Member 'RCRainMaker_SetCascadeRainColor::ReturnValue' has a wrong offset!");

// Function RC.RCRainMaker.SetCascadeRainColorDirect
// 0x0034 (0x0034 - 0x0000)
struct RCRainMaker_SetCascadeRainColorDirect final
{
public:
	class FName                                   Map;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   aname;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                col;                                               // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRainMaker_SetCascadeRainColorDirect) == 0x000004, "Wrong alignment on RCRainMaker_SetCascadeRainColorDirect");
static_assert(sizeof(RCRainMaker_SetCascadeRainColorDirect) == 0x000034, "Wrong size on RCRainMaker_SetCascadeRainColorDirect");
static_assert(offsetof(RCRainMaker_SetCascadeRainColorDirect, Map) == 0x000000, "Member 'RCRainMaker_SetCascadeRainColorDirect::Map' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetCascadeRainColorDirect, Param) == 0x000008, "Member 'RCRainMaker_SetCascadeRainColorDirect::Param' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetCascadeRainColorDirect, aname) == 0x000010, "Member 'RCRainMaker_SetCascadeRainColorDirect::aname' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetCascadeRainColorDirect, col) == 0x000018, "Member 'RCRainMaker_SetCascadeRainColorDirect::col' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetCascadeRainColorDirect, A) == 0x000024, "Member 'RCRainMaker_SetCascadeRainColorDirect::A' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetCascadeRainColorDirect, Tag) == 0x000028, "Member 'RCRainMaker_SetCascadeRainColorDirect::Tag' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetCascadeRainColorDirect, ReturnValue) == 0x000030, "Member 'RCRainMaker_SetCascadeRainColorDirect::ReturnValue' has a wrong offset!");

// Function RC.RCRainMaker.SetHiddenOutRain
// 0x0001 (0x0001 - 0x0000)
struct RCRainMaker_SetHiddenOutRain final
{
public:
	bool                                          isHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRainMaker_SetHiddenOutRain) == 0x000001, "Wrong alignment on RCRainMaker_SetHiddenOutRain");
static_assert(sizeof(RCRainMaker_SetHiddenOutRain) == 0x000001, "Wrong size on RCRainMaker_SetHiddenOutRain");
static_assert(offsetof(RCRainMaker_SetHiddenOutRain, isHidden) == 0x000000, "Member 'RCRainMaker_SetHiddenOutRain::isHidden' has a wrong offset!");

// Function RC.RCRainMaker.SetHiddenRain
// 0x0001 (0x0001 - 0x0000)
struct RCRainMaker_SetHiddenRain final
{
public:
	bool                                          isHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRainMaker_SetHiddenRain) == 0x000001, "Wrong alignment on RCRainMaker_SetHiddenRain");
static_assert(sizeof(RCRainMaker_SetHiddenRain) == 0x000001, "Wrong size on RCRainMaker_SetHiddenRain");
static_assert(offsetof(RCRainMaker_SetHiddenRain, isHidden) == 0x000000, "Member 'RCRainMaker_SetHiddenRain::isHidden' has a wrong offset!");

// Function RC.RCRainMaker.SetRainColor
// 0x000C (0x000C - 0x0000)
struct RCRainMaker_SetRainColor final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRainMaker_SetRainColor) == 0x000004, "Wrong alignment on RCRainMaker_SetRainColor");
static_assert(sizeof(RCRainMaker_SetRainColor) == 0x00000C, "Wrong size on RCRainMaker_SetRainColor");
static_assert(offsetof(RCRainMaker_SetRainColor, Name_0) == 0x000000, "Member 'RCRainMaker_SetRainColor::Name_0' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetRainColor, ReturnValue) == 0x000008, "Member 'RCRainMaker_SetRainColor::ReturnValue' has a wrong offset!");

// Function RC.RCRainMaker.SetRainColorDirect
// 0x0030 (0x0030 - 0x0000)
struct RCRainMaker_SetRainColorDirect final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   aname;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               col;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRainMaker_SetRainColorDirect) == 0x000010, "Wrong alignment on RCRainMaker_SetRainColorDirect");
static_assert(sizeof(RCRainMaker_SetRainColorDirect) == 0x000030, "Wrong size on RCRainMaker_SetRainColorDirect");
static_assert(offsetof(RCRainMaker_SetRainColorDirect, Name_0) == 0x000000, "Member 'RCRainMaker_SetRainColorDirect::Name_0' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetRainColorDirect, aname) == 0x000008, "Member 'RCRainMaker_SetRainColorDirect::aname' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetRainColorDirect, col) == 0x000010, "Member 'RCRainMaker_SetRainColorDirect::col' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetRainColorDirect, ReturnValue) == 0x000020, "Member 'RCRainMaker_SetRainColorDirect::ReturnValue' has a wrong offset!");

// Function RC.RCRainMaker.SetRainForce
// 0x0004 (0x0004 - 0x0000)
struct RCRainMaker_SetRainForce final
{
public:
	int32                                         paw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRainMaker_SetRainForce) == 0x000004, "Wrong alignment on RCRainMaker_SetRainForce");
static_assert(sizeof(RCRainMaker_SetRainForce) == 0x000004, "Wrong size on RCRainMaker_SetRainForce");
static_assert(offsetof(RCRainMaker_SetRainForce, paw) == 0x000000, "Member 'RCRainMaker_SetRainForce::paw' has a wrong offset!");

// Function RC.RCRainMaker.SetRainLinearColorDirect
// 0x001C (0x001C - 0x0000)
struct RCRainMaker_SetRainLinearColorDirect final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           col;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRainMaker_SetRainLinearColorDirect) == 0x000004, "Wrong alignment on RCRainMaker_SetRainLinearColorDirect");
static_assert(sizeof(RCRainMaker_SetRainLinearColorDirect) == 0x00001C, "Wrong size on RCRainMaker_SetRainLinearColorDirect");
static_assert(offsetof(RCRainMaker_SetRainLinearColorDirect, Name_0) == 0x000000, "Member 'RCRainMaker_SetRainLinearColorDirect::Name_0' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetRainLinearColorDirect, col) == 0x000008, "Member 'RCRainMaker_SetRainLinearColorDirect::col' has a wrong offset!");
static_assert(offsetof(RCRainMaker_SetRainLinearColorDirect, ReturnValue) == 0x000018, "Member 'RCRainMaker_SetRainLinearColorDirect::ReturnValue' has a wrong offset!");

// Function RC.RCRainMaker.SetRainRotate
// 0x000C (0x000C - 0x0000)
struct RCRainMaker_SetRainRotate final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRainMaker_SetRainRotate) == 0x000004, "Wrong alignment on RCRainMaker_SetRainRotate");
static_assert(sizeof(RCRainMaker_SetRainRotate) == 0x00000C, "Wrong size on RCRainMaker_SetRainRotate");
static_assert(offsetof(RCRainMaker_SetRainRotate, Rot) == 0x000000, "Member 'RCRainMaker_SetRainRotate::Rot' has a wrong offset!");

// Function RC.RCRainSplashEffectComponent.EffectSpawn
// 0x0040 (0x0040 - 0x0000)
struct RCRainSplashEffectComponent_EffectSpawn final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InAttachPointName;                                 // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            InEmitterMesh;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffset;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpawnRate;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRainSplashEffectComponent_EffectSpawn) == 0x000008, "Wrong alignment on RCRainSplashEffectComponent_EffectSpawn");
static_assert(sizeof(RCRainSplashEffectComponent_EffectSpawn) == 0x000040, "Wrong size on RCRainSplashEffectComponent_EffectSpawn");
static_assert(offsetof(RCRainSplashEffectComponent_EffectSpawn, InEffectData) == 0x000000, "Member 'RCRainSplashEffectComponent_EffectSpawn::InEffectData' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectSpawn, InAttachPointName) == 0x00001C, "Member 'RCRainSplashEffectComponent_EffectSpawn::InAttachPointName' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectSpawn, InEmitterMesh) == 0x000028, "Member 'RCRainSplashEffectComponent_EffectSpawn::InEmitterMesh' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectSpawn, InOffset) == 0x000030, "Member 'RCRainSplashEffectComponent_EffectSpawn::InOffset' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectSpawn, InSpawnRate) == 0x000034, "Member 'RCRainSplashEffectComponent_EffectSpawn::InSpawnRate' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectSpawn, ReturnValue) == 0x000038, "Member 'RCRainSplashEffectComponent_EffectSpawn::ReturnValue' has a wrong offset!");

// Function RC.RCRainSplashEffectComponent.EffectStart
// 0x0040 (0x0040 - 0x0000)
struct RCRainSplashEffectComponent_EffectStart final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InAttachPointName;                                 // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            InEmitterMesh;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffset;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpawnRate;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRainSplashEffectComponent_EffectStart) == 0x000008, "Wrong alignment on RCRainSplashEffectComponent_EffectStart");
static_assert(sizeof(RCRainSplashEffectComponent_EffectStart) == 0x000040, "Wrong size on RCRainSplashEffectComponent_EffectStart");
static_assert(offsetof(RCRainSplashEffectComponent_EffectStart, InEffectData) == 0x000000, "Member 'RCRainSplashEffectComponent_EffectStart::InEffectData' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectStart, InAttachPointName) == 0x00001C, "Member 'RCRainSplashEffectComponent_EffectStart::InAttachPointName' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectStart, InEmitterMesh) == 0x000028, "Member 'RCRainSplashEffectComponent_EffectStart::InEmitterMesh' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectStart, InOffset) == 0x000030, "Member 'RCRainSplashEffectComponent_EffectStart::InOffset' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectStart, InSpawnRate) == 0x000034, "Member 'RCRainSplashEffectComponent_EffectStart::InSpawnRate' has a wrong offset!");
static_assert(offsetof(RCRainSplashEffectComponent_EffectStart, ReturnValue) == 0x000038, "Member 'RCRainSplashEffectComponent_EffectStart::ReturnValue' has a wrong offset!");

// Function RC.RCRealEventBFL.GetGameMode
// 0x0010 (0x0010 - 0x0000)
struct RCRealEventBFL_GetGameMode final
{
public:
	int32                                         InChapter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InScene;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMode                                   ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRealEventBFL_GetGameMode) == 0x000004, "Wrong alignment on RCRealEventBFL_GetGameMode");
static_assert(sizeof(RCRealEventBFL_GetGameMode) == 0x000010, "Wrong size on RCRealEventBFL_GetGameMode");
static_assert(offsetof(RCRealEventBFL_GetGameMode, InChapter) == 0x000000, "Member 'RCRealEventBFL_GetGameMode::InChapter' has a wrong offset!");
static_assert(offsetof(RCRealEventBFL_GetGameMode, InScene) == 0x000004, "Member 'RCRealEventBFL_GetGameMode::InScene' has a wrong offset!");
static_assert(offsetof(RCRealEventBFL_GetGameMode, ReturnValue) == 0x00000C, "Member 'RCRealEventBFL_GetGameMode::ReturnValue' has a wrong offset!");

// Function RC.RCRealEventBFL.IsBusStopEnable
// 0x000C (0x000C - 0x0000)
struct RCRealEventBFL_IsBusStopEnable final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRealEventBFL_IsBusStopEnable) == 0x000004, "Wrong alignment on RCRealEventBFL_IsBusStopEnable");
static_assert(sizeof(RCRealEventBFL_IsBusStopEnable) == 0x00000C, "Wrong size on RCRealEventBFL_IsBusStopEnable");
static_assert(offsetof(RCRealEventBFL_IsBusStopEnable, InMapID) == 0x000000, "Member 'RCRealEventBFL_IsBusStopEnable::InMapID' has a wrong offset!");
static_assert(offsetof(RCRealEventBFL_IsBusStopEnable, ReturnValue) == 0x000008, "Member 'RCRealEventBFL_IsBusStopEnable::ReturnValue' has a wrong offset!");

// Function RC.RCRealEventSubLevelScriptActor.GetSelectCursolIndex
// 0x0004 (0x0004 - 0x0000)
struct RCRealEventSubLevelScriptActor_GetSelectCursolIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealEventSubLevelScriptActor_GetSelectCursolIndex) == 0x000004, "Wrong alignment on RCRealEventSubLevelScriptActor_GetSelectCursolIndex");
static_assert(sizeof(RCRealEventSubLevelScriptActor_GetSelectCursolIndex) == 0x000004, "Wrong size on RCRealEventSubLevelScriptActor_GetSelectCursolIndex");
static_assert(offsetof(RCRealEventSubLevelScriptActor_GetSelectCursolIndex, ReturnValue) == 0x000000, "Member 'RCRealEventSubLevelScriptActor_GetSelectCursolIndex::ReturnValue' has a wrong offset!");

// Function RC.RCRealEventCheckSubLevelScriptActor.GetCheckActorName
// 0x0008 (0x0008 - 0x0000)
struct RCRealEventCheckSubLevelScriptActor_GetCheckActorName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealEventCheckSubLevelScriptActor_GetCheckActorName) == 0x000004, "Wrong alignment on RCRealEventCheckSubLevelScriptActor_GetCheckActorName");
static_assert(sizeof(RCRealEventCheckSubLevelScriptActor_GetCheckActorName) == 0x000008, "Wrong size on RCRealEventCheckSubLevelScriptActor_GetCheckActorName");
static_assert(offsetof(RCRealEventCheckSubLevelScriptActor_GetCheckActorName, ReturnValue) == 0x000000, "Member 'RCRealEventCheckSubLevelScriptActor_GetCheckActorName::ReturnValue' has a wrong offset!");

// Function RC.RCRealEventCheckSubLevelScriptActor.IsEventThrough
// 0x0001 (0x0001 - 0x0000)
struct RCRealEventCheckSubLevelScriptActor_IsEventThrough final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealEventCheckSubLevelScriptActor_IsEventThrough) == 0x000001, "Wrong alignment on RCRealEventCheckSubLevelScriptActor_IsEventThrough");
static_assert(sizeof(RCRealEventCheckSubLevelScriptActor_IsEventThrough) == 0x000001, "Wrong size on RCRealEventCheckSubLevelScriptActor_IsEventThrough");
static_assert(offsetof(RCRealEventCheckSubLevelScriptActor_IsEventThrough, ReturnValue) == 0x000000, "Member 'RCRealEventCheckSubLevelScriptActor_IsEventThrough::ReturnValue' has a wrong offset!");

// Function RC.RCRealEventMapMoveSubLevelScriptActor.GetMapMoveTriggerName
// 0x0008 (0x0008 - 0x0000)
struct RCRealEventMapMoveSubLevelScriptActor_GetMapMoveTriggerName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealEventMapMoveSubLevelScriptActor_GetMapMoveTriggerName) == 0x000004, "Wrong alignment on RCRealEventMapMoveSubLevelScriptActor_GetMapMoveTriggerName");
static_assert(sizeof(RCRealEventMapMoveSubLevelScriptActor_GetMapMoveTriggerName) == 0x000008, "Wrong size on RCRealEventMapMoveSubLevelScriptActor_GetMapMoveTriggerName");
static_assert(offsetof(RCRealEventMapMoveSubLevelScriptActor_GetMapMoveTriggerName, ReturnValue) == 0x000000, "Member 'RCRealEventMapMoveSubLevelScriptActor_GetMapMoveTriggerName::ReturnValue' has a wrong offset!");

// Function RC.RCRealEventMapMoveSubLevelScriptActor.IsEventThrough
// 0x0001 (0x0001 - 0x0000)
struct RCRealEventMapMoveSubLevelScriptActor_IsEventThrough final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealEventMapMoveSubLevelScriptActor_IsEventThrough) == 0x000001, "Wrong alignment on RCRealEventMapMoveSubLevelScriptActor_IsEventThrough");
static_assert(sizeof(RCRealEventMapMoveSubLevelScriptActor_IsEventThrough) == 0x000001, "Wrong size on RCRealEventMapMoveSubLevelScriptActor_IsEventThrough");
static_assert(offsetof(RCRealEventMapMoveSubLevelScriptActor_IsEventThrough, ReturnValue) == 0x000000, "Member 'RCRealEventMapMoveSubLevelScriptActor_IsEventThrough::ReturnValue' has a wrong offset!");

// Function RC.RCSequenceBFL.CancelShinigamiSequencer
// 0x0010 (0x0010 - 0x0000)
struct RCSequenceBFL_CancelShinigamiSequencer final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSequenceBFL_CancelShinigamiSequencer) == 0x000008, "Wrong alignment on RCSequenceBFL_CancelShinigamiSequencer");
static_assert(sizeof(RCSequenceBFL_CancelShinigamiSequencer) == 0x000010, "Wrong size on RCSequenceBFL_CancelShinigamiSequencer");
static_assert(offsetof(RCSequenceBFL_CancelShinigamiSequencer, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_CancelShinigamiSequencer::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_CancelShinigamiSequencer, WorldContextObject) == 0x000008, "Member 'RCSequenceBFL_CancelShinigamiSequencer::WorldContextObject' has a wrong offset!");

// Function RC.RCSequenceBFL.CheckPlayingShinigamiSequencer
// 0x0001 (0x0001 - 0x0000)
struct RCSequenceBFL_CheckPlayingShinigamiSequencer final
{
public:
	bool                                          bPlaying;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSequenceBFL_CheckPlayingShinigamiSequencer) == 0x000001, "Wrong alignment on RCSequenceBFL_CheckPlayingShinigamiSequencer");
static_assert(sizeof(RCSequenceBFL_CheckPlayingShinigamiSequencer) == 0x000001, "Wrong size on RCSequenceBFL_CheckPlayingShinigamiSequencer");
static_assert(offsetof(RCSequenceBFL_CheckPlayingShinigamiSequencer, bPlaying) == 0x000000, "Member 'RCSequenceBFL_CheckPlayingShinigamiSequencer::bPlaying' has a wrong offset!");

// Function RC.RCSequenceBFL.GetSequenceManager
// 0x0008 (0x0008 - 0x0000)
struct RCSequenceBFL_GetSequenceManager final
{
public:
	class URCSequenceManager*                     SequenceManager;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSequenceBFL_GetSequenceManager) == 0x000008, "Wrong alignment on RCSequenceBFL_GetSequenceManager");
static_assert(sizeof(RCSequenceBFL_GetSequenceManager) == 0x000008, "Wrong size on RCSequenceBFL_GetSequenceManager");
static_assert(offsetof(RCSequenceBFL_GetSequenceManager, SequenceManager) == 0x000000, "Member 'RCSequenceBFL_GetSequenceManager::SequenceManager' has a wrong offset!");

// Function RC.RCSequenceBFL.GetShinigamiSequenceActor
// 0x0008 (0x0008 - 0x0000)
struct RCSequenceBFL_GetShinigamiSequenceActor final
{
public:
	class ALevelSequenceActor*                    OutLSA;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSequenceBFL_GetShinigamiSequenceActor) == 0x000008, "Wrong alignment on RCSequenceBFL_GetShinigamiSequenceActor");
static_assert(sizeof(RCSequenceBFL_GetShinigamiSequenceActor) == 0x000008, "Wrong size on RCSequenceBFL_GetShinigamiSequenceActor");
static_assert(offsetof(RCSequenceBFL_GetShinigamiSequenceActor, OutLSA) == 0x000000, "Member 'RCSequenceBFL_GetShinigamiSequenceActor::OutLSA' has a wrong offset!");

// Function RC.RCSequenceBFL.InitShinigamiSequencerLS
// 0x0080 (0x0080 - 0x0000)
struct RCSequenceBFL_InitShinigamiSequencerLS final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    OutLSA;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LS;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawn;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiTransformTypeLS           TransformType;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiFollowType                FollowType;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiFollowTarget              FollowTarget;                                      // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FollowTargetActor;                                 // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCSequenceFollowTarget*                FollowDummyActor;                                  // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSequenceBFL_InitShinigamiSequencerLS) == 0x000010, "Wrong alignment on RCSequenceBFL_InitShinigamiSequencerLS");
static_assert(sizeof(RCSequenceBFL_InitShinigamiSequencerLS) == 0x000080, "Wrong size on RCSequenceBFL_InitShinigamiSequencerLS");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, OutLSA) == 0x000008, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::OutLSA' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, WorldContextObject) == 0x000010, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, LS) == 0x000018, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::LS' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, bSpawn) == 0x000020, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::bSpawn' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, TransformType) == 0x000021, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::TransformType' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, Actor) == 0x000028, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::Actor' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, Transform) == 0x000030, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::Transform' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, FollowType) == 0x000060, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::FollowType' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, FollowTarget) == 0x000061, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::FollowTarget' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, FollowTargetActor) == 0x000068, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::FollowTargetActor' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLS, FollowDummyActor) == 0x000070, "Member 'RCSequenceBFL_InitShinigamiSequencerLS::FollowDummyActor' has a wrong offset!");

// Function RC.RCSequenceBFL.InitShinigamiSequencerLSA
// 0x0080 (0x0080 - 0x0000)
struct RCSequenceBFL_InitShinigamiSequencerLSA final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    LSA;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawn;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiTransformTypeLSA          TransformType;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiFollowType                FollowType;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiFollowTarget              FollowTarget;                                      // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FollowTargetActor;                                 // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCSequenceFollowTarget*                FollowDummyActor;                                  // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSequenceBFL_InitShinigamiSequencerLSA) == 0x000010, "Wrong alignment on RCSequenceBFL_InitShinigamiSequencerLSA");
static_assert(sizeof(RCSequenceBFL_InitShinigamiSequencerLSA) == 0x000080, "Wrong size on RCSequenceBFL_InitShinigamiSequencerLSA");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, WorldContextObject) == 0x000008, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, LSA) == 0x000010, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::LSA' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, bSpawn) == 0x000018, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::bSpawn' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, TransformType) == 0x000019, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::TransformType' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, Actor) == 0x000020, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::Actor' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, Transform) == 0x000030, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::Transform' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, FollowType) == 0x000060, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::FollowType' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, FollowTarget) == 0x000061, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::FollowTarget' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, FollowTargetActor) == 0x000068, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::FollowTargetActor' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_InitShinigamiSequencerLSA, FollowDummyActor) == 0x000070, "Member 'RCSequenceBFL_InitShinigamiSequencerLSA::FollowDummyActor' has a wrong offset!");

// Function RC.RCSequenceBFL.PlayShinigamiSequencer
// 0x0018 (0x0018 - 0x0000)
struct RCSequenceBFL_PlayShinigamiSequencer final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    LSA;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawn;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSequenceBFL_PlayShinigamiSequencer) == 0x000008, "Wrong alignment on RCSequenceBFL_PlayShinigamiSequencer");
static_assert(sizeof(RCSequenceBFL_PlayShinigamiSequencer) == 0x000018, "Wrong size on RCSequenceBFL_PlayShinigamiSequencer");
static_assert(offsetof(RCSequenceBFL_PlayShinigamiSequencer, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_PlayShinigamiSequencer::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_PlayShinigamiSequencer, LSA) == 0x000008, "Member 'RCSequenceBFL_PlayShinigamiSequencer::LSA' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_PlayShinigamiSequencer, bSpawn) == 0x000010, "Member 'RCSequenceBFL_PlayShinigamiSequencer::bSpawn' has a wrong offset!");

// Function RC.RCSequenceBFL.SetLSATransform
// 0x0040 (0x0040 - 0x0000)
struct RCSequenceBFL_SetLSATransform final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    LSA;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSequenceBFL_SetLSATransform) == 0x000010, "Wrong alignment on RCSequenceBFL_SetLSATransform");
static_assert(sizeof(RCSequenceBFL_SetLSATransform) == 0x000040, "Wrong size on RCSequenceBFL_SetLSATransform");
static_assert(offsetof(RCSequenceBFL_SetLSATransform, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_SetLSATransform::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_SetLSATransform, LSA) == 0x000008, "Member 'RCSequenceBFL_SetLSATransform::LSA' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_SetLSATransform, Transform) == 0x000010, "Member 'RCSequenceBFL_SetLSATransform::Transform' has a wrong offset!");

// Function RC.RCSequenceBFL.SetLSATransformActor
// 0x0018 (0x0018 - 0x0000)
struct RCSequenceBFL_SetLSATransformActor final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    LSA;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TransformActor;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSequenceBFL_SetLSATransformActor) == 0x000008, "Wrong alignment on RCSequenceBFL_SetLSATransformActor");
static_assert(sizeof(RCSequenceBFL_SetLSATransformActor) == 0x000018, "Wrong size on RCSequenceBFL_SetLSATransformActor");
static_assert(offsetof(RCSequenceBFL_SetLSATransformActor, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_SetLSATransformActor::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_SetLSATransformActor, LSA) == 0x000008, "Member 'RCSequenceBFL_SetLSATransformActor::LSA' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_SetLSATransformActor, TransformActor) == 0x000010, "Member 'RCSequenceBFL_SetLSATransformActor::TransformActor' has a wrong offset!");

// Function RC.RCSequenceBFL.StartShinigamiSequencerLS
// 0x0070 (0x0070 - 0x0000)
struct RCSequenceBFL_StartShinigamiSequencerLS final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    OutLSA;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LS;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawn;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiTransformTypeLS           TransformType;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiFollowType                FollowType;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiFollowTarget              FollowTarget;                                      // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FollowTargetActor;                                 // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSequenceBFL_StartShinigamiSequencerLS) == 0x000010, "Wrong alignment on RCSequenceBFL_StartShinigamiSequencerLS");
static_assert(sizeof(RCSequenceBFL_StartShinigamiSequencerLS) == 0x000070, "Wrong size on RCSequenceBFL_StartShinigamiSequencerLS");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, OutLSA) == 0x000008, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::OutLSA' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, WorldContextObject) == 0x000010, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, LS) == 0x000018, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::LS' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, bSpawn) == 0x000020, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::bSpawn' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, TransformType) == 0x000021, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::TransformType' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, Actor) == 0x000028, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::Actor' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, Transform) == 0x000030, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::Transform' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, FollowType) == 0x000060, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::FollowType' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, FollowTarget) == 0x000061, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::FollowTarget' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLS, FollowTargetActor) == 0x000068, "Member 'RCSequenceBFL_StartShinigamiSequencerLS::FollowTargetActor' has a wrong offset!");

// Function RC.RCSequenceBFL.StartShinigamiSequencerLSA
// 0x0070 (0x0070 - 0x0000)
struct RCSequenceBFL_StartShinigamiSequencerLSA final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    LSA;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawn;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiTransformTypeLSA          TransformType;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiFollowType                FollowType;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSequenceShinigamiFollowTarget              FollowTarget;                                      // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FollowTargetActor;                                 // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSequenceBFL_StartShinigamiSequencerLSA) == 0x000010, "Wrong alignment on RCSequenceBFL_StartShinigamiSequencerLSA");
static_assert(sizeof(RCSequenceBFL_StartShinigamiSequencerLSA) == 0x000070, "Wrong size on RCSequenceBFL_StartShinigamiSequencerLSA");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, WorldContextObject) == 0x000008, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, LSA) == 0x000010, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::LSA' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, bSpawn) == 0x000018, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::bSpawn' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, TransformType) == 0x000019, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::TransformType' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, Actor) == 0x000020, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::Actor' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, Transform) == 0x000030, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::Transform' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, FollowType) == 0x000060, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::FollowType' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, FollowTarget) == 0x000061, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::FollowTarget' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA, FollowTargetActor) == 0x000068, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA::FollowTargetActor' has a wrong offset!");

// Function RC.RCSequenceBFL.StartShinigamiSequencerLSA2
// 0x0018 (0x0018 - 0x0000)
struct RCSequenceBFL_StartShinigamiSequencerLSA2 final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCShinigamiLevelSequenceActor*         ShinigamiLSA;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSequenceBFL_StartShinigamiSequencerLSA2) == 0x000008, "Wrong alignment on RCSequenceBFL_StartShinigamiSequencerLSA2");
static_assert(sizeof(RCSequenceBFL_StartShinigamiSequencerLSA2) == 0x000018, "Wrong size on RCSequenceBFL_StartShinigamiSequencerLSA2");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA2, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA2::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA2, WorldContextObject) == 0x000008, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA2::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StartShinigamiSequencerLSA2, ShinigamiLSA) == 0x000010, "Member 'RCSequenceBFL_StartShinigamiSequencerLSA2::ShinigamiLSA' has a wrong offset!");

// Function RC.RCSequenceBFL.StopShinigamiSequencer
// 0x0018 (0x0018 - 0x0000)
struct RCSequenceBFL_StopShinigamiSequencer final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    LSA;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawn;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSequenceBFL_StopShinigamiSequencer) == 0x000008, "Wrong alignment on RCSequenceBFL_StopShinigamiSequencer");
static_assert(sizeof(RCSequenceBFL_StopShinigamiSequencer) == 0x000018, "Wrong size on RCSequenceBFL_StopShinigamiSequencer");
static_assert(offsetof(RCSequenceBFL_StopShinigamiSequencer, bSucceeded) == 0x000000, "Member 'RCSequenceBFL_StopShinigamiSequencer::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StopShinigamiSequencer, LSA) == 0x000008, "Member 'RCSequenceBFL_StopShinigamiSequencer::LSA' has a wrong offset!");
static_assert(offsetof(RCSequenceBFL_StopShinigamiSequencer, bSpawn) == 0x000010, "Member 'RCSequenceBFL_StopShinigamiSequencer::bSpawn' has a wrong offset!");

// Function RC.RCRealEventTalkSubLevelScriptActor.GetTalkCharacterName
// 0x0008 (0x0008 - 0x0000)
struct RCRealEventTalkSubLevelScriptActor_GetTalkCharacterName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealEventTalkSubLevelScriptActor_GetTalkCharacterName) == 0x000004, "Wrong alignment on RCRealEventTalkSubLevelScriptActor_GetTalkCharacterName");
static_assert(sizeof(RCRealEventTalkSubLevelScriptActor_GetTalkCharacterName) == 0x000008, "Wrong size on RCRealEventTalkSubLevelScriptActor_GetTalkCharacterName");
static_assert(offsetof(RCRealEventTalkSubLevelScriptActor_GetTalkCharacterName, ReturnValue) == 0x000000, "Member 'RCRealEventTalkSubLevelScriptActor_GetTalkCharacterName::ReturnValue' has a wrong offset!");

// Function RC.RCRealEventTalkSubLevelScriptActor.IsEventThrough
// 0x0001 (0x0001 - 0x0000)
struct RCRealEventTalkSubLevelScriptActor_IsEventThrough final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealEventTalkSubLevelScriptActor_IsEventThrough) == 0x000001, "Wrong alignment on RCRealEventTalkSubLevelScriptActor_IsEventThrough");
static_assert(sizeof(RCRealEventTalkSubLevelScriptActor_IsEventThrough) == 0x000001, "Wrong size on RCRealEventTalkSubLevelScriptActor_IsEventThrough");
static_assert(offsetof(RCRealEventTalkSubLevelScriptActor_IsEventThrough, ReturnValue) == 0x000000, "Member 'RCRealEventTalkSubLevelScriptActor_IsEventThrough::ReturnValue' has a wrong offset!");

// Function RC.RCRealHUDBFL.CheckSoundNovelFinished
// 0x0001 (0x0001 - 0x0000)
struct RCRealHUDBFL_CheckSoundNovelFinished final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_CheckSoundNovelFinished) == 0x000001, "Wrong alignment on RCRealHUDBFL_CheckSoundNovelFinished");
static_assert(sizeof(RCRealHUDBFL_CheckSoundNovelFinished) == 0x000001, "Wrong size on RCRealHUDBFL_CheckSoundNovelFinished");
static_assert(offsetof(RCRealHUDBFL_CheckSoundNovelFinished, bFinished) == 0x000000, "Member 'RCRealHUDBFL_CheckSoundNovelFinished::bFinished' has a wrong offset!");

// Function RC.RCRealHUDBFL.GetReHUD
// 0x0008 (0x0008 - 0x0000)
struct RCRealHUDBFL_GetReHUD final
{
public:
	class ARCReHUD*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_GetReHUD) == 0x000008, "Wrong alignment on RCRealHUDBFL_GetReHUD");
static_assert(sizeof(RCRealHUDBFL_GetReHUD) == 0x000008, "Wrong size on RCRealHUDBFL_GetReHUD");
static_assert(offsetof(RCRealHUDBFL_GetReHUD, ReturnValue) == 0x000000, "Member 'RCRealHUDBFL_GetReHUD::ReturnValue' has a wrong offset!");

// Function RC.RCRealHUDBFL.GetSelectResult
// 0x0004 (0x0004 - 0x0000)
struct RCRealHUDBFL_GetSelectResult final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_GetSelectResult) == 0x000004, "Wrong alignment on RCRealHUDBFL_GetSelectResult");
static_assert(sizeof(RCRealHUDBFL_GetSelectResult) == 0x000004, "Wrong size on RCRealHUDBFL_GetSelectResult");
static_assert(offsetof(RCRealHUDBFL_GetSelectResult, ReturnValue) == 0x000000, "Member 'RCRealHUDBFL_GetSelectResult::ReturnValue' has a wrong offset!");

// Function RC.RCRealHUDBFL.IsCloseMessageWindowSync
// 0x0001 (0x0001 - 0x0000)
struct RCRealHUDBFL_IsCloseMessageWindowSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_IsCloseMessageWindowSync) == 0x000001, "Wrong alignment on RCRealHUDBFL_IsCloseMessageWindowSync");
static_assert(sizeof(RCRealHUDBFL_IsCloseMessageWindowSync) == 0x000001, "Wrong size on RCRealHUDBFL_IsCloseMessageWindowSync");
static_assert(offsetof(RCRealHUDBFL_IsCloseMessageWindowSync, ReturnValue) == 0x000000, "Member 'RCRealHUDBFL_IsCloseMessageWindowSync::ReturnValue' has a wrong offset!");

// Function RC.RCRealHUDBFL.IsEndMessageWindowSync
// 0x0001 (0x0001 - 0x0000)
struct RCRealHUDBFL_IsEndMessageWindowSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_IsEndMessageWindowSync) == 0x000001, "Wrong alignment on RCRealHUDBFL_IsEndMessageWindowSync");
static_assert(sizeof(RCRealHUDBFL_IsEndMessageWindowSync) == 0x000001, "Wrong size on RCRealHUDBFL_IsEndMessageWindowSync");
static_assert(offsetof(RCRealHUDBFL_IsEndMessageWindowSync, ReturnValue) == 0x000000, "Member 'RCRealHUDBFL_IsEndMessageWindowSync::ReturnValue' has a wrong offset!");

// Function RC.RCRealHUDBFL.IsOpenMessageWindowSync
// 0x0001 (0x0001 - 0x0000)
struct RCRealHUDBFL_IsOpenMessageWindowSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_IsOpenMessageWindowSync) == 0x000001, "Wrong alignment on RCRealHUDBFL_IsOpenMessageWindowSync");
static_assert(sizeof(RCRealHUDBFL_IsOpenMessageWindowSync) == 0x000001, "Wrong size on RCRealHUDBFL_IsOpenMessageWindowSync");
static_assert(offsetof(RCRealHUDBFL_IsOpenMessageWindowSync, ReturnValue) == 0x000000, "Member 'RCRealHUDBFL_IsOpenMessageWindowSync::ReturnValue' has a wrong offset!");

// Function RC.RCRealHUDBFL.IsTalkStart
// 0x0001 (0x0001 - 0x0000)
struct RCRealHUDBFL_IsTalkStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_IsTalkStart) == 0x000001, "Wrong alignment on RCRealHUDBFL_IsTalkStart");
static_assert(sizeof(RCRealHUDBFL_IsTalkStart) == 0x000001, "Wrong size on RCRealHUDBFL_IsTalkStart");
static_assert(offsetof(RCRealHUDBFL_IsTalkStart, ReturnValue) == 0x000000, "Member 'RCRealHUDBFL_IsTalkStart::ReturnValue' has a wrong offset!");

// Function RC.RCRealHUDBFL.OpenMessageWindow2
// 0x0001 (0x0001 - 0x0000)
struct RCRealHUDBFL_OpenMessageWindow2 final
{
public:
	ERCAdvHUDTalkWindowType                       WindowType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_OpenMessageWindow2) == 0x000001, "Wrong alignment on RCRealHUDBFL_OpenMessageWindow2");
static_assert(sizeof(RCRealHUDBFL_OpenMessageWindow2) == 0x000001, "Wrong size on RCRealHUDBFL_OpenMessageWindow2");
static_assert(offsetof(RCRealHUDBFL_OpenMessageWindow2, WindowType) == 0x000000, "Member 'RCRealHUDBFL_OpenMessageWindow2::WindowType' has a wrong offset!");

// Function RC.RCRealHUDBFL.SetSelectSetting
// 0x0010 (0x0010 - 0x0000)
struct RCRealHUDBFL_SetSelectSetting final
{
public:
	int32                                         SelectNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSelectTextID;                                    // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckMark;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRealHUDBFL_SetSelectSetting) == 0x000004, "Wrong alignment on RCRealHUDBFL_SetSelectSetting");
static_assert(sizeof(RCRealHUDBFL_SetSelectSetting) == 0x000010, "Wrong size on RCRealHUDBFL_SetSelectSetting");
static_assert(offsetof(RCRealHUDBFL_SetSelectSetting, SelectNum) == 0x000000, "Member 'RCRealHUDBFL_SetSelectSetting::SelectNum' has a wrong offset!");
static_assert(offsetof(RCRealHUDBFL_SetSelectSetting, InSelectTextID) == 0x000004, "Member 'RCRealHUDBFL_SetSelectSetting::InSelectTextID' has a wrong offset!");
static_assert(offsetof(RCRealHUDBFL_SetSelectSetting, bCheckMark) == 0x00000C, "Member 'RCRealHUDBFL_SetSelectSetting::bCheckMark' has a wrong offset!");

// Function RC.RCRealHUDBFL.SoundNovelShowBackgroundFade
// 0x0002 (0x0002 - 0x0000)
struct RCRealHUDBFL_SoundNovelShowBackgroundFade final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_SoundNovelShowBackgroundFade) == 0x000001, "Wrong alignment on RCRealHUDBFL_SoundNovelShowBackgroundFade");
static_assert(sizeof(RCRealHUDBFL_SoundNovelShowBackgroundFade) == 0x000002, "Wrong size on RCRealHUDBFL_SoundNovelShowBackgroundFade");
static_assert(offsetof(RCRealHUDBFL_SoundNovelShowBackgroundFade, bSucceeded) == 0x000000, "Member 'RCRealHUDBFL_SoundNovelShowBackgroundFade::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCRealHUDBFL_SoundNovelShowBackgroundFade, bShow) == 0x000001, "Member 'RCRealHUDBFL_SoundNovelShowBackgroundFade::bShow' has a wrong offset!");

// Function RC.RCRealHUDBFL.SoundNovelStart
// 0x0018 (0x0018 - 0x0000)
struct RCRealHUDBFL_SoundNovelStart final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             SoundNovelDataTable;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBackgroundFade;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCRealHUDBFL_SoundNovelStart) == 0x000008, "Wrong alignment on RCRealHUDBFL_SoundNovelStart");
static_assert(sizeof(RCRealHUDBFL_SoundNovelStart) == 0x000018, "Wrong size on RCRealHUDBFL_SoundNovelStart");
static_assert(offsetof(RCRealHUDBFL_SoundNovelStart, bSucceeded) == 0x000000, "Member 'RCRealHUDBFL_SoundNovelStart::bSucceeded' has a wrong offset!");
static_assert(offsetof(RCRealHUDBFL_SoundNovelStart, SoundNovelDataTable) == 0x000008, "Member 'RCRealHUDBFL_SoundNovelStart::SoundNovelDataTable' has a wrong offset!");
static_assert(offsetof(RCRealHUDBFL_SoundNovelStart, bShowBackgroundFade) == 0x000010, "Member 'RCRealHUDBFL_SoundNovelStart::bShowBackgroundFade' has a wrong offset!");

// Function RC.RCRealHUDBFL.StartMessage2
// 0x0018 (0x0018 - 0x0000)
struct RCRealHUDBFL_StartMessage2 final
{
public:
	int32                                         InCharacterFaceID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterFacialID;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMassageTextID;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPartVoiceID;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_StartMessage2) == 0x000004, "Wrong alignment on RCRealHUDBFL_StartMessage2");
static_assert(sizeof(RCRealHUDBFL_StartMessage2) == 0x000018, "Wrong size on RCRealHUDBFL_StartMessage2");
static_assert(offsetof(RCRealHUDBFL_StartMessage2, InCharacterFaceID) == 0x000000, "Member 'RCRealHUDBFL_StartMessage2::InCharacterFaceID' has a wrong offset!");
static_assert(offsetof(RCRealHUDBFL_StartMessage2, InCharacterFacialID) == 0x000004, "Member 'RCRealHUDBFL_StartMessage2::InCharacterFacialID' has a wrong offset!");
static_assert(offsetof(RCRealHUDBFL_StartMessage2, InMassageTextID) == 0x000008, "Member 'RCRealHUDBFL_StartMessage2::InMassageTextID' has a wrong offset!");
static_assert(offsetof(RCRealHUDBFL_StartMessage2, InPartVoiceID) == 0x000010, "Member 'RCRealHUDBFL_StartMessage2::InPartVoiceID' has a wrong offset!");

// Function RC.RCRealHUDBFL.StartSelect
// 0x000C (0x000C - 0x0000)
struct RCRealHUDBFL_StartSelect final
{
public:
	int32                                         SelectMax;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestionTextID;                                    // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealHUDBFL_StartSelect) == 0x000004, "Wrong alignment on RCRealHUDBFL_StartSelect");
static_assert(sizeof(RCRealHUDBFL_StartSelect) == 0x00000C, "Wrong size on RCRealHUDBFL_StartSelect");
static_assert(offsetof(RCRealHUDBFL_StartSelect, SelectMax) == 0x000000, "Member 'RCRealHUDBFL_StartSelect::SelectMax' has a wrong offset!");
static_assert(offsetof(RCRealHUDBFL_StartSelect, QuestionTextID) == 0x000004, "Member 'RCRealHUDBFL_StartSelect::QuestionTextID' has a wrong offset!");

// Function RC.RCRealLevelScriptActorBFL.IsEndBusstopEvent
// 0x0001 (0x0001 - 0x0000)
struct RCRealLevelScriptActorBFL_IsEndBusstopEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealLevelScriptActorBFL_IsEndBusstopEvent) == 0x000001, "Wrong alignment on RCRealLevelScriptActorBFL_IsEndBusstopEvent");
static_assert(sizeof(RCRealLevelScriptActorBFL_IsEndBusstopEvent) == 0x000001, "Wrong size on RCRealLevelScriptActorBFL_IsEndBusstopEvent");
static_assert(offsetof(RCRealLevelScriptActorBFL_IsEndBusstopEvent, ReturnValue) == 0x000000, "Member 'RCRealLevelScriptActorBFL_IsEndBusstopEvent::ReturnValue' has a wrong offset!");

// Function RC.RCRealLevelScriptActorBFL.IsSubLevelLoadingWait
// 0x0001 (0x0001 - 0x0000)
struct RCRealLevelScriptActorBFL_IsSubLevelLoadingWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealLevelScriptActorBFL_IsSubLevelLoadingWait) == 0x000001, "Wrong alignment on RCRealLevelScriptActorBFL_IsSubLevelLoadingWait");
static_assert(sizeof(RCRealLevelScriptActorBFL_IsSubLevelLoadingWait) == 0x000001, "Wrong size on RCRealLevelScriptActorBFL_IsSubLevelLoadingWait");
static_assert(offsetof(RCRealLevelScriptActorBFL_IsSubLevelLoadingWait, ReturnValue) == 0x000000, "Member 'RCRealLevelScriptActorBFL_IsSubLevelLoadingWait::ReturnValue' has a wrong offset!");

// Function RC.RCRealLevelScriptActorBFL.IsSubLevelLoadSync
// 0x0001 (0x0001 - 0x0000)
struct RCRealLevelScriptActorBFL_IsSubLevelLoadSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealLevelScriptActorBFL_IsSubLevelLoadSync) == 0x000001, "Wrong alignment on RCRealLevelScriptActorBFL_IsSubLevelLoadSync");
static_assert(sizeof(RCRealLevelScriptActorBFL_IsSubLevelLoadSync) == 0x000001, "Wrong size on RCRealLevelScriptActorBFL_IsSubLevelLoadSync");
static_assert(offsetof(RCRealLevelScriptActorBFL_IsSubLevelLoadSync, ReturnValue) == 0x000000, "Member 'RCRealLevelScriptActorBFL_IsSubLevelLoadSync::ReturnValue' has a wrong offset!");

// Function RC.RCRealLevelScriptActorBFL.OnNextLevel
// 0x0001 (0x0001 - 0x0000)
struct RCRealLevelScriptActorBFL_OnNextLevel final
{
public:
	ERCGameMode                                   InNextGameMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealLevelScriptActorBFL_OnNextLevel) == 0x000001, "Wrong alignment on RCRealLevelScriptActorBFL_OnNextLevel");
static_assert(sizeof(RCRealLevelScriptActorBFL_OnNextLevel) == 0x000001, "Wrong size on RCRealLevelScriptActorBFL_OnNextLevel");
static_assert(offsetof(RCRealLevelScriptActorBFL_OnNextLevel, InNextGameMode) == 0x000000, "Member 'RCRealLevelScriptActorBFL_OnNextLevel::InNextGameMode' has a wrong offset!");

// Function RC.RCRealLevelScriptActorBFL.SetSubLevelLoadingWait
// 0x0001 (0x0001 - 0x0000)
struct RCRealLevelScriptActorBFL_SetSubLevelLoadingWait final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealLevelScriptActorBFL_SetSubLevelLoadingWait) == 0x000001, "Wrong alignment on RCRealLevelScriptActorBFL_SetSubLevelLoadingWait");
static_assert(sizeof(RCRealLevelScriptActorBFL_SetSubLevelLoadingWait) == 0x000001, "Wrong size on RCRealLevelScriptActorBFL_SetSubLevelLoadingWait");
static_assert(offsetof(RCRealLevelScriptActorBFL_SetSubLevelLoadingWait, flag) == 0x000000, "Member 'RCRealLevelScriptActorBFL_SetSubLevelLoadingWait::flag' has a wrong offset!");

// Function RC.RCRealLevelScriptActorBFL.SetSubLevelLoadSync
// 0x0001 (0x0001 - 0x0000)
struct RCRealLevelScriptActorBFL_SetSubLevelLoadSync final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealLevelScriptActorBFL_SetSubLevelLoadSync) == 0x000001, "Wrong alignment on RCRealLevelScriptActorBFL_SetSubLevelLoadSync");
static_assert(sizeof(RCRealLevelScriptActorBFL_SetSubLevelLoadSync) == 0x000001, "Wrong size on RCRealLevelScriptActorBFL_SetSubLevelLoadSync");
static_assert(offsetof(RCRealLevelScriptActorBFL_SetSubLevelLoadSync, flag) == 0x000000, "Member 'RCRealLevelScriptActorBFL_SetSubLevelLoadSync::flag' has a wrong offset!");

// Function RC.RCTitleLanguageWindow.LanguageWindowListSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCTitleLanguageWindow_LanguageWindowListSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleLanguageWindow_LanguageWindowListSelectNavigation) == 0x000008, "Wrong alignment on RCTitleLanguageWindow_LanguageWindowListSelectNavigation");
static_assert(sizeof(RCTitleLanguageWindow_LanguageWindowListSelectNavigation) == 0x000010, "Wrong size on RCTitleLanguageWindow_LanguageWindowListSelectNavigation");
static_assert(offsetof(RCTitleLanguageWindow_LanguageWindowListSelectNavigation, InNavigation) == 0x000000, "Member 'RCTitleLanguageWindow_LanguageWindowListSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTitleLanguageWindow_LanguageWindowListSelectNavigation, ReturnValue) == 0x000008, "Member 'RCTitleLanguageWindow_LanguageWindowListSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerControllerBFL.IsMouseOverEnable
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerControllerBFL_IsMouseOverEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerControllerBFL_IsMouseOverEnable) == 0x000001, "Wrong alignment on RCRealPlayerControllerBFL_IsMouseOverEnable");
static_assert(sizeof(RCRealPlayerControllerBFL_IsMouseOverEnable) == 0x000001, "Wrong size on RCRealPlayerControllerBFL_IsMouseOverEnable");
static_assert(offsetof(RCRealPlayerControllerBFL_IsMouseOverEnable, ReturnValue) == 0x000000, "Member 'RCRealPlayerControllerBFL_IsMouseOverEnable::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerControllerBFL.IsSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerControllerBFL_IsSkipEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerControllerBFL_IsSkipEnable) == 0x000001, "Wrong alignment on RCRealPlayerControllerBFL_IsSkipEnable");
static_assert(sizeof(RCRealPlayerControllerBFL_IsSkipEnable) == 0x000001, "Wrong size on RCRealPlayerControllerBFL_IsSkipEnable");
static_assert(offsetof(RCRealPlayerControllerBFL_IsSkipEnable, ReturnValue) == 0x000000, "Member 'RCRealPlayerControllerBFL_IsSkipEnable::ReturnValue' has a wrong offset!");

// Function RC.RCRealPlayerControllerBFL.SetMouseOverEnable
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerControllerBFL_SetMouseOverEnable final
{
public:
	bool                                          bInMouseOverEnable;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerControllerBFL_SetMouseOverEnable) == 0x000001, "Wrong alignment on RCRealPlayerControllerBFL_SetMouseOverEnable");
static_assert(sizeof(RCRealPlayerControllerBFL_SetMouseOverEnable) == 0x000001, "Wrong size on RCRealPlayerControllerBFL_SetMouseOverEnable");
static_assert(offsetof(RCRealPlayerControllerBFL_SetMouseOverEnable, bInMouseOverEnable) == 0x000000, "Member 'RCRealPlayerControllerBFL_SetMouseOverEnable::bInMouseOverEnable' has a wrong offset!");

// Function RC.RCRealPlayerControllerBFL.SetSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCRealPlayerControllerBFL_SetSkipEnable final
{
public:
	bool                                          bInSkipEnable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCRealPlayerControllerBFL_SetSkipEnable) == 0x000001, "Wrong alignment on RCRealPlayerControllerBFL_SetSkipEnable");
static_assert(sizeof(RCRealPlayerControllerBFL_SetSkipEnable) == 0x000001, "Wrong size on RCRealPlayerControllerBFL_SetSkipEnable");
static_assert(offsetof(RCRealPlayerControllerBFL_SetSkipEnable, bInSkipEnable) == 0x000000, "Member 'RCRealPlayerControllerBFL_SetSkipEnable::bInSkipEnable' has a wrong offset!");

// Function RC.RCUiWidgetAccessable.ShowButton
// 0x0001 (0x0001 - 0x0000)
struct RCUiWidgetAccessable_ShowButton final
{
public:
	bool                                          bInIsShowable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiWidgetAccessable_ShowButton) == 0x000001, "Wrong alignment on RCUiWidgetAccessable_ShowButton");
static_assert(sizeof(RCUiWidgetAccessable_ShowButton) == 0x000001, "Wrong size on RCUiWidgetAccessable_ShowButton");
static_assert(offsetof(RCUiWidgetAccessable_ShowButton, bInIsShowable) == 0x000000, "Member 'RCUiWidgetAccessable_ShowButton::bInIsShowable' has a wrong offset!");

// Function RC.RCReUiBalloon.SetBalloonData
// 0x0018 (0x0018 - 0x0000)
struct RCReUiBalloon_SetBalloonData final
{
public:
	ESCBaloonFrame                                InFrame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCBaloonType                                 InIcon;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 inString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiBalloon_SetBalloonData) == 0x000008, "Wrong alignment on RCReUiBalloon_SetBalloonData");
static_assert(sizeof(RCReUiBalloon_SetBalloonData) == 0x000018, "Wrong size on RCReUiBalloon_SetBalloonData");
static_assert(offsetof(RCReUiBalloon_SetBalloonData, InFrame) == 0x000000, "Member 'RCReUiBalloon_SetBalloonData::InFrame' has a wrong offset!");
static_assert(offsetof(RCReUiBalloon_SetBalloonData, InIcon) == 0x000001, "Member 'RCReUiBalloon_SetBalloonData::InIcon' has a wrong offset!");
static_assert(offsetof(RCReUiBalloon_SetBalloonData, inString) == 0x000008, "Member 'RCReUiBalloon_SetBalloonData::inString' has a wrong offset!");

// Function RC.RCReUiBalloonFar.GetFarBalloonStatusInt
// 0x0004 (0x0004 - 0x0000)
struct RCReUiBalloonFar_GetFarBalloonStatusInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiBalloonFar_GetFarBalloonStatusInt) == 0x000004, "Wrong alignment on RCReUiBalloonFar_GetFarBalloonStatusInt");
static_assert(sizeof(RCReUiBalloonFar_GetFarBalloonStatusInt) == 0x000004, "Wrong size on RCReUiBalloonFar_GetFarBalloonStatusInt");
static_assert(offsetof(RCReUiBalloonFar_GetFarBalloonStatusInt, ReturnValue) == 0x000000, "Member 'RCReUiBalloonFar_GetFarBalloonStatusInt::ReturnValue' has a wrong offset!");

// Function RC.RCReUiBalloonFar.SetBalloonData
// 0x0002 (0x0002 - 0x0000)
struct RCReUiBalloonFar_SetBalloonData final
{
public:
	ESCBaloonFrame                                InFrame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCBaloonType                                 InIcon;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiBalloonFar_SetBalloonData) == 0x000001, "Wrong alignment on RCReUiBalloonFar_SetBalloonData");
static_assert(sizeof(RCReUiBalloonFar_SetBalloonData) == 0x000002, "Wrong size on RCReUiBalloonFar_SetBalloonData");
static_assert(offsetof(RCReUiBalloonFar_SetBalloonData, InFrame) == 0x000000, "Member 'RCReUiBalloonFar_SetBalloonData::InFrame' has a wrong offset!");
static_assert(offsetof(RCReUiBalloonFar_SetBalloonData, InIcon) == 0x000001, "Member 'RCReUiBalloonFar_SetBalloonData::InIcon' has a wrong offset!");

// Function RC.RCReUiBalloonNear.GetBalloonStatusNum
// 0x0004 (0x0004 - 0x0000)
struct RCReUiBalloonNear_GetBalloonStatusNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiBalloonNear_GetBalloonStatusNum) == 0x000004, "Wrong alignment on RCReUiBalloonNear_GetBalloonStatusNum");
static_assert(sizeof(RCReUiBalloonNear_GetBalloonStatusNum) == 0x000004, "Wrong size on RCReUiBalloonNear_GetBalloonStatusNum");
static_assert(offsetof(RCReUiBalloonNear_GetBalloonStatusNum, ReturnValue) == 0x000000, "Member 'RCReUiBalloonNear_GetBalloonStatusNum::ReturnValue' has a wrong offset!");

// Function RC.RCReUiBalloonNear.SetBalloonData
// 0x0018 (0x0018 - 0x0000)
struct RCReUiBalloonNear_SetBalloonData final
{
public:
	ESCBaloonFrame                                InFrame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 inString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiBalloonNear_SetBalloonData) == 0x000008, "Wrong alignment on RCReUiBalloonNear_SetBalloonData");
static_assert(sizeof(RCReUiBalloonNear_SetBalloonData) == 0x000018, "Wrong size on RCReUiBalloonNear_SetBalloonData");
static_assert(offsetof(RCReUiBalloonNear_SetBalloonData, InFrame) == 0x000000, "Member 'RCReUiBalloonNear_SetBalloonData::InFrame' has a wrong offset!");
static_assert(offsetof(RCReUiBalloonNear_SetBalloonData, inString) == 0x000008, "Member 'RCReUiBalloonNear_SetBalloonData::inString' has a wrong offset!");

// Function RC.RCReUiBalloonNear.SetShakeData
// 0x000C (0x000C - 0x0000)
struct RCReUiBalloonNear_SetShakeData final
{
public:
	float                                         InWidthX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWidthY;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InInterval;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiBalloonNear_SetShakeData) == 0x000004, "Wrong alignment on RCReUiBalloonNear_SetShakeData");
static_assert(sizeof(RCReUiBalloonNear_SetShakeData) == 0x00000C, "Wrong size on RCReUiBalloonNear_SetShakeData");
static_assert(offsetof(RCReUiBalloonNear_SetShakeData, InWidthX) == 0x000000, "Member 'RCReUiBalloonNear_SetShakeData::InWidthX' has a wrong offset!");
static_assert(offsetof(RCReUiBalloonNear_SetShakeData, InWidthY) == 0x000004, "Member 'RCReUiBalloonNear_SetShakeData::InWidthY' has a wrong offset!");
static_assert(offsetof(RCReUiBalloonNear_SetShakeData, InInterval) == 0x000008, "Member 'RCReUiBalloonNear_SetShakeData::InInterval' has a wrong offset!");

// Function RC.RCReUiChousaButtonGuide.InitializeChousaButtonGuide
// 0x0001 (0x0001 - 0x0000)
struct RCReUiChousaButtonGuide_InitializeChousaButtonGuide final
{
public:
	bool                                          bInIsResearch;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaButtonGuide_InitializeChousaButtonGuide) == 0x000001, "Wrong alignment on RCReUiChousaButtonGuide_InitializeChousaButtonGuide");
static_assert(sizeof(RCReUiChousaButtonGuide_InitializeChousaButtonGuide) == 0x000001, "Wrong size on RCReUiChousaButtonGuide_InitializeChousaButtonGuide");
static_assert(offsetof(RCReUiChousaButtonGuide_InitializeChousaButtonGuide, bInIsResearch) == 0x000000, "Member 'RCReUiChousaButtonGuide_InitializeChousaButtonGuide::bInIsResearch' has a wrong offset!");

// Function RC.RCReUiChousaButtonGuide.SetGuideParts
// 0x0001 (0x0001 - 0x0000)
struct RCReUiChousaButtonGuide_SetGuideParts final
{
public:
	bool                                          bInIsResearch;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaButtonGuide_SetGuideParts) == 0x000001, "Wrong alignment on RCReUiChousaButtonGuide_SetGuideParts");
static_assert(sizeof(RCReUiChousaButtonGuide_SetGuideParts) == 0x000001, "Wrong size on RCReUiChousaButtonGuide_SetGuideParts");
static_assert(offsetof(RCReUiChousaButtonGuide_SetGuideParts, bInIsResearch) == 0x000000, "Member 'RCReUiChousaButtonGuide_SetGuideParts::bInIsResearch' has a wrong offset!");

// Function RC.RCUiMenuCharacterSelect.CharacterSelectButtonCustomNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuCharacterSelect_CharacterSelectButtonCustomNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuCharacterSelect_CharacterSelectButtonCustomNavigation) == 0x000008, "Wrong alignment on RCUiMenuCharacterSelect_CharacterSelectButtonCustomNavigation");
static_assert(sizeof(RCUiMenuCharacterSelect_CharacterSelectButtonCustomNavigation) == 0x000010, "Wrong size on RCUiMenuCharacterSelect_CharacterSelectButtonCustomNavigation");
static_assert(offsetof(RCUiMenuCharacterSelect_CharacterSelectButtonCustomNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuCharacterSelect_CharacterSelectButtonCustomNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuCharacterSelect_CharacterSelectButtonCustomNavigation, InPlayerController) == 0x000008, "Member 'RCUiMenuCharacterSelect_CharacterSelectButtonCustomNavigation::InPlayerController' has a wrong offset!");

// Function RC.RCReUiChousaGetKagi.SetData
// 0x0028 (0x0028 - 0x0000)
struct RCReUiChousaGetKagi_SetData final
{
public:
	class FName                                   InKagiImage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InKagiName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InKagiCaption;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaGetKagi_SetData) == 0x000008, "Wrong alignment on RCReUiChousaGetKagi_SetData");
static_assert(sizeof(RCReUiChousaGetKagi_SetData) == 0x000028, "Wrong size on RCReUiChousaGetKagi_SetData");
static_assert(offsetof(RCReUiChousaGetKagi_SetData, InKagiImage) == 0x000000, "Member 'RCReUiChousaGetKagi_SetData::InKagiImage' has a wrong offset!");
static_assert(offsetof(RCReUiChousaGetKagi_SetData, InKagiName) == 0x000008, "Member 'RCReUiChousaGetKagi_SetData::InKagiName' has a wrong offset!");
static_assert(offsetof(RCReUiChousaGetKagi_SetData, InKagiCaption) == 0x000018, "Member 'RCReUiChousaGetKagi_SetData::InKagiCaption' has a wrong offset!");

// Function RC.RCReUiChousaGetKagi.SetKagiData
// 0x000C (0x000C - 0x0000)
struct RCReUiChousaGetKagi_SetKagiData final
{
public:
	class FName                                   InKagiID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPhase;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaGetKagi_SetKagiData) == 0x000004, "Wrong alignment on RCReUiChousaGetKagi_SetKagiData");
static_assert(sizeof(RCReUiChousaGetKagi_SetKagiData) == 0x00000C, "Wrong size on RCReUiChousaGetKagi_SetKagiData");
static_assert(offsetof(RCReUiChousaGetKagi_SetKagiData, InKagiID) == 0x000000, "Member 'RCReUiChousaGetKagi_SetKagiData::InKagiID' has a wrong offset!");
static_assert(offsetof(RCReUiChousaGetKagi_SetKagiData, InPhase) == 0x000008, "Member 'RCReUiChousaGetKagi_SetKagiData::InPhase' has a wrong offset!");

// Function RC.RCReUiChousaPlace.Open
// 0x0010 (0x0010 - 0x0000)
struct RCReUiChousaPlace_Open final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAreaNameID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaPlace_Open) == 0x000004, "Wrong alignment on RCReUiChousaPlace_Open");
static_assert(sizeof(RCReUiChousaPlace_Open) == 0x000010, "Wrong size on RCReUiChousaPlace_Open");
static_assert(offsetof(RCReUiChousaPlace_Open, InMapID) == 0x000000, "Member 'RCReUiChousaPlace_Open::InMapID' has a wrong offset!");
static_assert(offsetof(RCReUiChousaPlace_Open, InAreaNameID) == 0x000008, "Member 'RCReUiChousaPlace_Open::InAreaNameID' has a wrong offset!");

// Function RC.RCReUiChousaPlace.SetChousaPlace
// 0x0014 (0x0014 - 0x0000)
struct RCReUiChousaPlace_SetChousaPlace final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAreaNameID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReUiChousaPlace_SetChousaPlace) == 0x000004, "Wrong alignment on RCReUiChousaPlace_SetChousaPlace");
static_assert(sizeof(RCReUiChousaPlace_SetChousaPlace) == 0x000014, "Wrong size on RCReUiChousaPlace_SetChousaPlace");
static_assert(offsetof(RCReUiChousaPlace_SetChousaPlace, InMapID) == 0x000000, "Member 'RCReUiChousaPlace_SetChousaPlace::InMapID' has a wrong offset!");
static_assert(offsetof(RCReUiChousaPlace_SetChousaPlace, InAreaNameID) == 0x000008, "Member 'RCReUiChousaPlace_SetChousaPlace::InAreaNameID' has a wrong offset!");
static_assert(offsetof(RCReUiChousaPlace_SetChousaPlace, ReturnValue) == 0x000010, "Member 'RCReUiChousaPlace_SetChousaPlace::ReturnValue' has a wrong offset!");

// Function RC.RCReUiChousaPointer.GetCursorDirection
// 0x0008 (0x0008 - 0x0000)
struct RCReUiChousaPointer_GetCursorDirection final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaPointer_GetCursorDirection) == 0x000004, "Wrong alignment on RCReUiChousaPointer_GetCursorDirection");
static_assert(sizeof(RCReUiChousaPointer_GetCursorDirection) == 0x000008, "Wrong size on RCReUiChousaPointer_GetCursorDirection");
static_assert(offsetof(RCReUiChousaPointer_GetCursorDirection, ReturnValue) == 0x000000, "Member 'RCReUiChousaPointer_GetCursorDirection::ReturnValue' has a wrong offset!");

// Function RC.RCReUiChousaPointer.GetMousePos
// 0x0008 (0x0008 - 0x0000)
struct RCReUiChousaPointer_GetMousePos final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaPointer_GetMousePos) == 0x000004, "Wrong alignment on RCReUiChousaPointer_GetMousePos");
static_assert(sizeof(RCReUiChousaPointer_GetMousePos) == 0x000008, "Wrong size on RCReUiChousaPointer_GetMousePos");
static_assert(offsetof(RCReUiChousaPointer_GetMousePos, ReturnValue) == 0x000000, "Member 'RCReUiChousaPointer_GetMousePos::ReturnValue' has a wrong offset!");

// Function RC.RCReUiChousaPointer.GetWidgetRadius
// 0x0004 (0x0004 - 0x0000)
struct RCReUiChousaPointer_GetWidgetRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaPointer_GetWidgetRadius) == 0x000004, "Wrong alignment on RCReUiChousaPointer_GetWidgetRadius");
static_assert(sizeof(RCReUiChousaPointer_GetWidgetRadius) == 0x000004, "Wrong size on RCReUiChousaPointer_GetWidgetRadius");
static_assert(offsetof(RCReUiChousaPointer_GetWidgetRadius, ReturnValue) == 0x000000, "Member 'RCReUiChousaPointer_GetWidgetRadius::ReturnValue' has a wrong offset!");

// Function RC.RCReUiChousaPointer.SetQuestionFlag
// 0x0001 (0x0001 - 0x0000)
struct RCReUiChousaPointer_SetQuestionFlag final
{
public:
	bool                                          bInQuestion;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaPointer_SetQuestionFlag) == 0x000001, "Wrong alignment on RCReUiChousaPointer_SetQuestionFlag");
static_assert(sizeof(RCReUiChousaPointer_SetQuestionFlag) == 0x000001, "Wrong size on RCReUiChousaPointer_SetQuestionFlag");
static_assert(offsetof(RCReUiChousaPointer_SetQuestionFlag, bInQuestion) == 0x000000, "Member 'RCReUiChousaPointer_SetQuestionFlag::bInQuestion' has a wrong offset!");

// Function RC.RCReUiChousaPointer.SetTargetPosition
// 0x0008 (0x0008 - 0x0000)
struct RCReUiChousaPointer_SetTargetPosition final
{
public:
	struct FVector2D                              In2DPosition;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaPointer_SetTargetPosition) == 0x000004, "Wrong alignment on RCReUiChousaPointer_SetTargetPosition");
static_assert(sizeof(RCReUiChousaPointer_SetTargetPosition) == 0x000008, "Wrong size on RCReUiChousaPointer_SetTargetPosition");
static_assert(offsetof(RCReUiChousaPointer_SetTargetPosition, In2DPosition) == 0x000000, "Member 'RCReUiChousaPointer_SetTargetPosition::In2DPosition' has a wrong offset!");

// Function RC.RCReUiChousaPointer.SetTracingPosition
// 0x000C (0x000C - 0x0000)
struct RCReUiChousaPointer_SetTracingPosition final
{
public:
	struct FVector2D                              In2DPosition;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaPointer_SetTracingPosition) == 0x000004, "Wrong alignment on RCReUiChousaPointer_SetTracingPosition");
static_assert(sizeof(RCReUiChousaPointer_SetTracingPosition) == 0x00000C, "Wrong size on RCReUiChousaPointer_SetTracingPosition");
static_assert(offsetof(RCReUiChousaPointer_SetTracingPosition, In2DPosition) == 0x000000, "Member 'RCReUiChousaPointer_SetTracingPosition::In2DPosition' has a wrong offset!");
static_assert(offsetof(RCReUiChousaPointer_SetTracingPosition, InRadius) == 0x000008, "Member 'RCReUiChousaPointer_SetTracingPosition::InRadius' has a wrong offset!");

// Function RC.RCReUiChousaTarget.GetWidgetRadius
// 0x0004 (0x0004 - 0x0000)
struct RCReUiChousaTarget_GetWidgetRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaTarget_GetWidgetRadius) == 0x000004, "Wrong alignment on RCReUiChousaTarget_GetWidgetRadius");
static_assert(sizeof(RCReUiChousaTarget_GetWidgetRadius) == 0x000004, "Wrong size on RCReUiChousaTarget_GetWidgetRadius");
static_assert(offsetof(RCReUiChousaTarget_GetWidgetRadius, ReturnValue) == 0x000000, "Member 'RCReUiChousaTarget_GetWidgetRadius::ReturnValue' has a wrong offset!");

// Function RC.RCReUiChousaTarget.Open
// 0x0001 (0x0001 - 0x0000)
struct RCReUiChousaTarget_Open final
{
public:
	bool                                          bInIsInvestigated;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaTarget_Open) == 0x000001, "Wrong alignment on RCReUiChousaTarget_Open");
static_assert(sizeof(RCReUiChousaTarget_Open) == 0x000001, "Wrong size on RCReUiChousaTarget_Open");
static_assert(offsetof(RCReUiChousaTarget_Open, bInIsInvestigated) == 0x000000, "Member 'RCReUiChousaTarget_Open::bInIsInvestigated' has a wrong offset!");

// Function RC.RCReUiChousaTargetName.GetTargetNameSize
// 0x0008 (0x0008 - 0x0000)
struct RCReUiChousaTargetName_GetTargetNameSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaTargetName_GetTargetNameSize) == 0x000004, "Wrong alignment on RCReUiChousaTargetName_GetTargetNameSize");
static_assert(sizeof(RCReUiChousaTargetName_GetTargetNameSize) == 0x000008, "Wrong size on RCReUiChousaTargetName_GetTargetNameSize");
static_assert(offsetof(RCReUiChousaTargetName_GetTargetNameSize, ReturnValue) == 0x000000, "Member 'RCReUiChousaTargetName_GetTargetNameSize::ReturnValue' has a wrong offset!");

// Function RC.RCReUiChousaTargetName.InitializeChousaTargetName2
// 0x000C (0x000C - 0x0000)
struct RCReUiChousaTargetName_InitializeChousaTargetName2 final
{
public:
	struct FVector2D                              InTargetNameDefaultPosition;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTargetNameMoveSpeed;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaTargetName_InitializeChousaTargetName2) == 0x000004, "Wrong alignment on RCReUiChousaTargetName_InitializeChousaTargetName2");
static_assert(sizeof(RCReUiChousaTargetName_InitializeChousaTargetName2) == 0x00000C, "Wrong size on RCReUiChousaTargetName_InitializeChousaTargetName2");
static_assert(offsetof(RCReUiChousaTargetName_InitializeChousaTargetName2, InTargetNameDefaultPosition) == 0x000000, "Member 'RCReUiChousaTargetName_InitializeChousaTargetName2::InTargetNameDefaultPosition' has a wrong offset!");
static_assert(offsetof(RCReUiChousaTargetName_InitializeChousaTargetName2, InTargetNameMoveSpeed) == 0x000008, "Member 'RCReUiChousaTargetName_InitializeChousaTargetName2::InTargetNameMoveSpeed' has a wrong offset!");

// Function RC.RCReUiChousaTargetName.SetTargetName
// 0x0010 (0x0010 - 0x0000)
struct RCReUiChousaTargetName_SetTargetName final
{
public:
	class FString                                 InTargetName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaTargetName_SetTargetName) == 0x000008, "Wrong alignment on RCReUiChousaTargetName_SetTargetName");
static_assert(sizeof(RCReUiChousaTargetName_SetTargetName) == 0x000010, "Wrong size on RCReUiChousaTargetName_SetTargetName");
static_assert(offsetof(RCReUiChousaTargetName_SetTargetName, InTargetName) == 0x000000, "Member 'RCReUiChousaTargetName_SetTargetName::InTargetName' has a wrong offset!");

// Function RC.RCReUiChousaTargetName.SetTargetNameDefaultPosition
// 0x0008 (0x0008 - 0x0000)
struct RCReUiChousaTargetName_SetTargetNameDefaultPosition final
{
public:
	struct FVector2D                              InTargetNameDefaultPosition;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaTargetName_SetTargetNameDefaultPosition) == 0x000004, "Wrong alignment on RCReUiChousaTargetName_SetTargetNameDefaultPosition");
static_assert(sizeof(RCReUiChousaTargetName_SetTargetNameDefaultPosition) == 0x000008, "Wrong size on RCReUiChousaTargetName_SetTargetNameDefaultPosition");
static_assert(offsetof(RCReUiChousaTargetName_SetTargetNameDefaultPosition, InTargetNameDefaultPosition) == 0x000000, "Member 'RCReUiChousaTargetName_SetTargetNameDefaultPosition::InTargetNameDefaultPosition' has a wrong offset!");

// Function RC.RCReUiChousaTargetName.SetTargetNameMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCReUiChousaTargetName_SetTargetNameMoveSpeed final
{
public:
	float                                         InTargetNameMoveSpeed;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaTargetName_SetTargetNameMoveSpeed) == 0x000004, "Wrong alignment on RCReUiChousaTargetName_SetTargetNameMoveSpeed");
static_assert(sizeof(RCReUiChousaTargetName_SetTargetNameMoveSpeed) == 0x000004, "Wrong size on RCReUiChousaTargetName_SetTargetNameMoveSpeed");
static_assert(offsetof(RCReUiChousaTargetName_SetTargetNameMoveSpeed, InTargetNameMoveSpeed) == 0x000000, "Member 'RCReUiChousaTargetName_SetTargetNameMoveSpeed::InTargetNameMoveSpeed' has a wrong offset!");

// Function RC.RCReUiChousaTargetName.SetTargetNamePosition
// 0x0008 (0x0008 - 0x0000)
struct RCReUiChousaTargetName_SetTargetNamePosition final
{
public:
	struct FVector2D                              InTargetNamePosition;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiChousaTargetName_SetTargetNamePosition) == 0x000004, "Wrong alignment on RCReUiChousaTargetName_SetTargetNamePosition");
static_assert(sizeof(RCReUiChousaTargetName_SetTargetNamePosition) == 0x000008, "Wrong size on RCReUiChousaTargetName_SetTargetNamePosition");
static_assert(offsetof(RCReUiChousaTargetName_SetTargetNamePosition, InTargetNamePosition) == 0x000000, "Member 'RCReUiChousaTargetName_SetTargetNamePosition::InTargetNamePosition' has a wrong offset!");

// Function RC.RCReUiLocation.SetLocation
// 0x0014 (0x0014 - 0x0000)
struct RCReUiLocation_SetLocation final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAreaNameID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReUiLocation_SetLocation) == 0x000004, "Wrong alignment on RCReUiLocation_SetLocation");
static_assert(sizeof(RCReUiLocation_SetLocation) == 0x000014, "Wrong size on RCReUiLocation_SetLocation");
static_assert(offsetof(RCReUiLocation_SetLocation, InMapID) == 0x000000, "Member 'RCReUiLocation_SetLocation::InMapID' has a wrong offset!");
static_assert(offsetof(RCReUiLocation_SetLocation, InAreaNameID) == 0x000008, "Member 'RCReUiLocation_SetLocation::InAreaNameID' has a wrong offset!");
static_assert(offsetof(RCReUiLocation_SetLocation, ReturnValue) == 0x000010, "Member 'RCReUiLocation_SetLocation::ReturnValue' has a wrong offset!");

// Function RC.RCReUiMessageFace.LoadAheadRequest
// 0x0008 (0x0008 - 0x0000)
struct RCReUiMessageFace_LoadAheadRequest final
{
public:
	int32                                         InCharaFaceID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFacialID;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMessageFace_LoadAheadRequest) == 0x000004, "Wrong alignment on RCReUiMessageFace_LoadAheadRequest");
static_assert(sizeof(RCReUiMessageFace_LoadAheadRequest) == 0x000008, "Wrong size on RCReUiMessageFace_LoadAheadRequest");
static_assert(offsetof(RCReUiMessageFace_LoadAheadRequest, InCharaFaceID) == 0x000000, "Member 'RCReUiMessageFace_LoadAheadRequest::InCharaFaceID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageFace_LoadAheadRequest, InFacialID) == 0x000004, "Member 'RCReUiMessageFace_LoadAheadRequest::InFacialID' has a wrong offset!");

// Function RC.RCReUiMessageFace.SetFace
// 0x000C (0x000C - 0x0000)
struct RCReUiMessageFace_SetFace final
{
public:
	int32                                         InCharaFaceID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFacialID;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPlayEffect;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReUiMessageFace_SetFace) == 0x000004, "Wrong alignment on RCReUiMessageFace_SetFace");
static_assert(sizeof(RCReUiMessageFace_SetFace) == 0x00000C, "Wrong size on RCReUiMessageFace_SetFace");
static_assert(offsetof(RCReUiMessageFace_SetFace, InCharaFaceID) == 0x000000, "Member 'RCReUiMessageFace_SetFace::InCharaFaceID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageFace_SetFace, InFacialID) == 0x000004, "Member 'RCReUiMessageFace_SetFace::InFacialID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageFace_SetFace, bInPlayEffect) == 0x000008, "Member 'RCReUiMessageFace_SetFace::bInPlayEffect' has a wrong offset!");

// Function RC.RCUiButtonGuide.Open
// 0x000C (0x000C - 0x0000)
struct RCUiButtonGuide_Open final
{
public:
	class FName                                   InModeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowSingleLine;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUiButtonGuide_Open) == 0x000004, "Wrong alignment on RCUiButtonGuide_Open");
static_assert(sizeof(RCUiButtonGuide_Open) == 0x00000C, "Wrong size on RCUiButtonGuide_Open");
static_assert(offsetof(RCUiButtonGuide_Open, InModeID) == 0x000000, "Member 'RCUiButtonGuide_Open::InModeID' has a wrong offset!");
static_assert(offsetof(RCUiButtonGuide_Open, bInShowSingleLine) == 0x000008, "Member 'RCUiButtonGuide_Open::bInShowSingleLine' has a wrong offset!");

// Function RC.RCUiButtonGuide.SetGuideText
// 0x000C (0x000C - 0x0000)
struct RCUiButtonGuide_SetGuideText final
{
public:
	class FName                                   InModeID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowSingleLine;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUiButtonGuide_SetGuideText) == 0x000004, "Wrong alignment on RCUiButtonGuide_SetGuideText");
static_assert(sizeof(RCUiButtonGuide_SetGuideText) == 0x00000C, "Wrong size on RCUiButtonGuide_SetGuideText");
static_assert(offsetof(RCUiButtonGuide_SetGuideText, InModeID) == 0x000000, "Member 'RCUiButtonGuide_SetGuideText::InModeID' has a wrong offset!");
static_assert(offsetof(RCUiButtonGuide_SetGuideText, bInShowSingleLine) == 0x000008, "Member 'RCUiButtonGuide_SetGuideText::bInShowSingleLine' has a wrong offset!");

// Function RC.RCUiButtonGuide.SetInputFromButtonGuide
// 0x0001 (0x0001 - 0x0000)
struct RCUiButtonGuide_SetInputFromButtonGuide final
{
public:
	ERCInputKeyType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiButtonGuide_SetInputFromButtonGuide) == 0x000001, "Wrong alignment on RCUiButtonGuide_SetInputFromButtonGuide");
static_assert(sizeof(RCUiButtonGuide_SetInputFromButtonGuide) == 0x000001, "Wrong size on RCUiButtonGuide_SetInputFromButtonGuide");
static_assert(offsetof(RCUiButtonGuide_SetInputFromButtonGuide, InType) == 0x000000, "Member 'RCUiButtonGuide_SetInputFromButtonGuide::InType' has a wrong offset!");

// Function RC.RCReUiMessageNameplate.LoadAheadRequest
// 0x0008 (0x0008 - 0x0000)
struct RCReUiMessageNameplate_LoadAheadRequest final
{
public:
	int32                                         InCharaNameID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNameSubID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMessageNameplate_LoadAheadRequest) == 0x000004, "Wrong alignment on RCReUiMessageNameplate_LoadAheadRequest");
static_assert(sizeof(RCReUiMessageNameplate_LoadAheadRequest) == 0x000008, "Wrong size on RCReUiMessageNameplate_LoadAheadRequest");
static_assert(offsetof(RCReUiMessageNameplate_LoadAheadRequest, InCharaNameID) == 0x000000, "Member 'RCReUiMessageNameplate_LoadAheadRequest::InCharaNameID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageNameplate_LoadAheadRequest, InNameSubID) == 0x000004, "Member 'RCReUiMessageNameplate_LoadAheadRequest::InNameSubID' has a wrong offset!");

// Function RC.RCReUiMessageNameplate.SetNameplate
// 0x0008 (0x0008 - 0x0000)
struct RCReUiMessageNameplate_SetNameplate final
{
public:
	int32                                         InCharaNameID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNameSubID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMessageNameplate_SetNameplate) == 0x000004, "Wrong alignment on RCReUiMessageNameplate_SetNameplate");
static_assert(sizeof(RCReUiMessageNameplate_SetNameplate) == 0x000008, "Wrong size on RCReUiMessageNameplate_SetNameplate");
static_assert(offsetof(RCReUiMessageNameplate_SetNameplate, InCharaNameID) == 0x000000, "Member 'RCReUiMessageNameplate_SetNameplate::InCharaNameID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageNameplate_SetNameplate, InNameSubID) == 0x000004, "Member 'RCReUiMessageNameplate_SetNameplate::InNameSubID' has a wrong offset!");

// Function RC.RCReUiMessageWindow.GetMessStatusInt
// 0x0004 (0x0004 - 0x0000)
struct RCReUiMessageWindow_GetMessStatusInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMessageWindow_GetMessStatusInt) == 0x000004, "Wrong alignment on RCReUiMessageWindow_GetMessStatusInt");
static_assert(sizeof(RCReUiMessageWindow_GetMessStatusInt) == 0x000004, "Wrong size on RCReUiMessageWindow_GetMessStatusInt");
static_assert(offsetof(RCReUiMessageWindow_GetMessStatusInt, ReturnValue) == 0x000000, "Member 'RCReUiMessageWindow_GetMessStatusInt::ReturnValue' has a wrong offset!");

// Function RC.RCReUiMessageWindow.GetSkipTyping
// 0x0001 (0x0001 - 0x0000)
struct RCReUiMessageWindow_GetSkipTyping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMessageWindow_GetSkipTyping) == 0x000001, "Wrong alignment on RCReUiMessageWindow_GetSkipTyping");
static_assert(sizeof(RCReUiMessageWindow_GetSkipTyping) == 0x000001, "Wrong size on RCReUiMessageWindow_GetSkipTyping");
static_assert(offsetof(RCReUiMessageWindow_GetSkipTyping, ReturnValue) == 0x000000, "Member 'RCReUiMessageWindow_GetSkipTyping::ReturnValue' has a wrong offset!");

// Function RC.RCReUiMessageWindow.Open
// 0x0010 (0x0010 - 0x0000)
struct RCReUiMessageWindow_Open final
{
public:
	int32                                         InCharaNameID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNameSubID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharaFaceID;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFacialID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMessageWindow_Open) == 0x000004, "Wrong alignment on RCReUiMessageWindow_Open");
static_assert(sizeof(RCReUiMessageWindow_Open) == 0x000010, "Wrong size on RCReUiMessageWindow_Open");
static_assert(offsetof(RCReUiMessageWindow_Open, InCharaNameID) == 0x000000, "Member 'RCReUiMessageWindow_Open::InCharaNameID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_Open, InNameSubID) == 0x000004, "Member 'RCReUiMessageWindow_Open::InNameSubID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_Open, InCharaFaceID) == 0x000008, "Member 'RCReUiMessageWindow_Open::InCharaFaceID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_Open, InFacialID) == 0x00000C, "Member 'RCReUiMessageWindow_Open::InFacialID' has a wrong offset!");

// Function RC.RCReUiMessageWindow.SetForceAutoFlag
// 0x0002 (0x0002 - 0x0000)
struct RCReUiMessageWindow_SetForceAutoFlag final
{
public:
	bool                                          bForceAuto;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAutoIcon;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMessageWindow_SetForceAutoFlag) == 0x000001, "Wrong alignment on RCReUiMessageWindow_SetForceAutoFlag");
static_assert(sizeof(RCReUiMessageWindow_SetForceAutoFlag) == 0x000002, "Wrong size on RCReUiMessageWindow_SetForceAutoFlag");
static_assert(offsetof(RCReUiMessageWindow_SetForceAutoFlag, bForceAuto) == 0x000000, "Member 'RCReUiMessageWindow_SetForceAutoFlag::bForceAuto' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetForceAutoFlag, bShowAutoIcon) == 0x000001, "Member 'RCReUiMessageWindow_SetForceAutoFlag::bShowAutoIcon' has a wrong offset!");

// Function RC.RCReUiMessageWindow.SetForceTextSpeedSettings
// 0x0008 (0x0008 - 0x0000)
struct RCReUiMessageWindow_SetForceTextSpeedSettings final
{
public:
	bool                                          bInIsForceTextSpeed;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InForceTextSpeed;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMessageWindow_SetForceTextSpeedSettings) == 0x000004, "Wrong alignment on RCReUiMessageWindow_SetForceTextSpeedSettings");
static_assert(sizeof(RCReUiMessageWindow_SetForceTextSpeedSettings) == 0x000008, "Wrong size on RCReUiMessageWindow_SetForceTextSpeedSettings");
static_assert(offsetof(RCReUiMessageWindow_SetForceTextSpeedSettings, bInIsForceTextSpeed) == 0x000000, "Member 'RCReUiMessageWindow_SetForceTextSpeedSettings::bInIsForceTextSpeed' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetForceTextSpeedSettings, InForceTextSpeed) == 0x000004, "Member 'RCReUiMessageWindow_SetForceTextSpeedSettings::InForceTextSpeed' has a wrong offset!");

// Function RC.RCReUiMessageWindow.SetShakeData
// 0x000C (0x000C - 0x0000)
struct RCReUiMessageWindow_SetShakeData final
{
public:
	float                                         InWidthX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWidthY;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InInterval;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMessageWindow_SetShakeData) == 0x000004, "Wrong alignment on RCReUiMessageWindow_SetShakeData");
static_assert(sizeof(RCReUiMessageWindow_SetShakeData) == 0x00000C, "Wrong size on RCReUiMessageWindow_SetShakeData");
static_assert(offsetof(RCReUiMessageWindow_SetShakeData, InWidthX) == 0x000000, "Member 'RCReUiMessageWindow_SetShakeData::InWidthX' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetShakeData, InWidthY) == 0x000004, "Member 'RCReUiMessageWindow_SetShakeData::InWidthY' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetShakeData, InInterval) == 0x000008, "Member 'RCReUiMessageWindow_SetShakeData::InInterval' has a wrong offset!");

// Function RC.RCReUiMessageWindow.SetText
// 0x0028 (0x0028 - 0x0000)
struct RCReUiMessageWindow_SetText final
{
public:
	int32                                         InCharaNameID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNameSubID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharaFaceID;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFacialID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 inString;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReUiMessageWindow_SetText) == 0x000008, "Wrong alignment on RCReUiMessageWindow_SetText");
static_assert(sizeof(RCReUiMessageWindow_SetText) == 0x000028, "Wrong size on RCReUiMessageWindow_SetText");
static_assert(offsetof(RCReUiMessageWindow_SetText, InCharaNameID) == 0x000000, "Member 'RCReUiMessageWindow_SetText::InCharaNameID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetText, InNameSubID) == 0x000004, "Member 'RCReUiMessageWindow_SetText::InNameSubID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetText, InCharaFaceID) == 0x000008, "Member 'RCReUiMessageWindow_SetText::InCharaFaceID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetText, InFacialID) == 0x00000C, "Member 'RCReUiMessageWindow_SetText::InFacialID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetText, inString) == 0x000010, "Member 'RCReUiMessageWindow_SetText::inString' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetText, InDelay) == 0x000020, "Member 'RCReUiMessageWindow_SetText::InDelay' has a wrong offset!");

// Function RC.RCReUiMessageWindow.SetTextData
// 0x0030 (0x0030 - 0x0000)
struct RCReUiMessageWindow_SetTextData final
{
public:
	int32                                         InCharaNameID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNameSubID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharaFaceID;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFacialID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSpeakerID;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 inString;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReUiMessageWindow_SetTextData) == 0x000008, "Wrong alignment on RCReUiMessageWindow_SetTextData");
static_assert(sizeof(RCReUiMessageWindow_SetTextData) == 0x000030, "Wrong size on RCReUiMessageWindow_SetTextData");
static_assert(offsetof(RCReUiMessageWindow_SetTextData, InCharaNameID) == 0x000000, "Member 'RCReUiMessageWindow_SetTextData::InCharaNameID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetTextData, InNameSubID) == 0x000004, "Member 'RCReUiMessageWindow_SetTextData::InNameSubID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetTextData, InCharaFaceID) == 0x000008, "Member 'RCReUiMessageWindow_SetTextData::InCharaFaceID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetTextData, InFacialID) == 0x00000C, "Member 'RCReUiMessageWindow_SetTextData::InFacialID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetTextData, InSpeakerID) == 0x000010, "Member 'RCReUiMessageWindow_SetTextData::InSpeakerID' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetTextData, inString) == 0x000018, "Member 'RCReUiMessageWindow_SetTextData::inString' has a wrong offset!");
static_assert(offsetof(RCReUiMessageWindow_SetTextData, InDelay) == 0x000028, "Member 'RCReUiMessageWindow_SetTextData::InDelay' has a wrong offset!");

// Function RC.RCReUiMiniMap.SetLocation
// 0x0014 (0x0014 - 0x0000)
struct RCReUiMiniMap_SetLocation final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAreaNameID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCReUiMiniMap_SetLocation) == 0x000004, "Wrong alignment on RCReUiMiniMap_SetLocation");
static_assert(sizeof(RCReUiMiniMap_SetLocation) == 0x000014, "Wrong size on RCReUiMiniMap_SetLocation");
static_assert(offsetof(RCReUiMiniMap_SetLocation, InMapID) == 0x000000, "Member 'RCReUiMiniMap_SetLocation::InMapID' has a wrong offset!");
static_assert(offsetof(RCReUiMiniMap_SetLocation, InAreaNameID) == 0x000008, "Member 'RCReUiMiniMap_SetLocation::InAreaNameID' has a wrong offset!");
static_assert(offsetof(RCReUiMiniMap_SetLocation, ReturnValue) == 0x000010, "Member 'RCReUiMiniMap_SetLocation::ReturnValue' has a wrong offset!");

// Function RC.RCReUiMiniMap.SetMapMode
// 0x0001 (0x0001 - 0x0000)
struct RCReUiMiniMap_SetMapMode final
{
public:
	bool                                          bInIsFixNorth;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMiniMap_SetMapMode) == 0x000001, "Wrong alignment on RCReUiMiniMap_SetMapMode");
static_assert(sizeof(RCReUiMiniMap_SetMapMode) == 0x000001, "Wrong size on RCReUiMiniMap_SetMapMode");
static_assert(offsetof(RCReUiMiniMap_SetMapMode, bInIsFixNorth) == 0x000000, "Member 'RCReUiMiniMap_SetMapMode::bInIsFixNorth' has a wrong offset!");

// Function RC.RCReUiMiniMap.SetMapScale
// 0x0004 (0x0004 - 0x0000)
struct RCReUiMiniMap_SetMapScale final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiMiniMap_SetMapScale) == 0x000004, "Wrong alignment on RCReUiMiniMap_SetMapScale");
static_assert(sizeof(RCReUiMiniMap_SetMapScale) == 0x000004, "Wrong size on RCReUiMiniMap_SetMapScale");
static_assert(offsetof(RCReUiMiniMap_SetMapScale, InScale) == 0x000000, "Member 'RCReUiMiniMap_SetMapScale::InScale' has a wrong offset!");

// Function RC.RCUiCutInText.SetCutInText
// 0x0008 (0x0008 - 0x0000)
struct RCUiCutInText_SetCutInText final
{
public:
	class FName                                   InCutInID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiCutInText_SetCutInText) == 0x000004, "Wrong alignment on RCUiCutInText_SetCutInText");
static_assert(sizeof(RCUiCutInText_SetCutInText) == 0x000008, "Wrong size on RCUiCutInText_SetCutInText");
static_assert(offsetof(RCUiCutInText_SetCutInText, InCutInID) == 0x000000, "Member 'RCUiCutInText_SetCutInText::InCutInID' has a wrong offset!");

// Function RC.RCReUiSelectWindow.NativeTick
// 0x003C (0x003C - 0x0000)
struct RCReUiSelectWindow_NativeTick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiSelectWindow_NativeTick) == 0x000004, "Wrong alignment on RCReUiSelectWindow_NativeTick");
static_assert(sizeof(RCReUiSelectWindow_NativeTick) == 0x00003C, "Wrong size on RCReUiSelectWindow_NativeTick");
static_assert(offsetof(RCReUiSelectWindow_NativeTick, MyGeometry) == 0x000000, "Member 'RCReUiSelectWindow_NativeTick::MyGeometry' has a wrong offset!");
static_assert(offsetof(RCReUiSelectWindow_NativeTick, InDeltaTime) == 0x000038, "Member 'RCReUiSelectWindow_NativeTick::InDeltaTime' has a wrong offset!");

// Function RC.RCReUiSelectWindow.Open
// 0x000C (0x000C - 0x0000)
struct RCReUiSelectWindow_Open final
{
public:
	int32                                         SelectNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTextID;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiSelectWindow_Open) == 0x000004, "Wrong alignment on RCReUiSelectWindow_Open");
static_assert(sizeof(RCReUiSelectWindow_Open) == 0x00000C, "Wrong size on RCReUiSelectWindow_Open");
static_assert(offsetof(RCReUiSelectWindow_Open, SelectNum) == 0x000000, "Member 'RCReUiSelectWindow_Open::SelectNum' has a wrong offset!");
static_assert(offsetof(RCReUiSelectWindow_Open, InTextID) == 0x000004, "Member 'RCReUiSelectWindow_Open::InTextID' has a wrong offset!");

// Function RC.RCReUiSelectWindow.SelectWindowCustomNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCReUiSelectWindow_SelectWindowCustomNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiSelectWindow_SelectWindowCustomNavigation) == 0x000008, "Wrong alignment on RCReUiSelectWindow_SelectWindowCustomNavigation");
static_assert(sizeof(RCReUiSelectWindow_SelectWindowCustomNavigation) == 0x000010, "Wrong size on RCReUiSelectWindow_SelectWindowCustomNavigation");
static_assert(offsetof(RCReUiSelectWindow_SelectWindowCustomNavigation, InNavigation) == 0x000000, "Member 'RCReUiSelectWindow_SelectWindowCustomNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCReUiSelectWindow_SelectWindowCustomNavigation, InPlayerController) == 0x000008, "Member 'RCReUiSelectWindow_SelectWindowCustomNavigation::InPlayerController' has a wrong offset!");

// Function RC.RCReUiShinigamiBalloon.SetAuto
// 0x0001 (0x0001 - 0x0000)
struct RCReUiShinigamiBalloon_SetAuto final
{
public:
	bool                                          bInIsAutoPlay;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiShinigamiBalloon_SetAuto) == 0x000001, "Wrong alignment on RCReUiShinigamiBalloon_SetAuto");
static_assert(sizeof(RCReUiShinigamiBalloon_SetAuto) == 0x000001, "Wrong size on RCReUiShinigamiBalloon_SetAuto");
static_assert(offsetof(RCReUiShinigamiBalloon_SetAuto, bInIsAutoPlay) == 0x000000, "Member 'RCReUiShinigamiBalloon_SetAuto::bInIsAutoPlay' has a wrong offset!");

// Function RC.RCReUiShinigamiBalloon.SetBalloonData
// 0x0010 (0x0010 - 0x0000)
struct RCReUiShinigamiBalloon_SetBalloonData final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiShinigamiBalloon_SetBalloonData) == 0x000008, "Wrong alignment on RCReUiShinigamiBalloon_SetBalloonData");
static_assert(sizeof(RCReUiShinigamiBalloon_SetBalloonData) == 0x000010, "Wrong size on RCReUiShinigamiBalloon_SetBalloonData");
static_assert(offsetof(RCReUiShinigamiBalloon_SetBalloonData, inString) == 0x000000, "Member 'RCReUiShinigamiBalloon_SetBalloonData::inString' has a wrong offset!");

// Function RC.RCReUiShinigamiBalloon.SetShakeData
// 0x000C (0x000C - 0x0000)
struct RCReUiShinigamiBalloon_SetShakeData final
{
public:
	float                                         InWidthX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWidthY;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InInterval;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCReUiShinigamiBalloon_SetShakeData) == 0x000004, "Wrong alignment on RCReUiShinigamiBalloon_SetShakeData");
static_assert(sizeof(RCReUiShinigamiBalloon_SetShakeData) == 0x00000C, "Wrong size on RCReUiShinigamiBalloon_SetShakeData");
static_assert(offsetof(RCReUiShinigamiBalloon_SetShakeData, InWidthX) == 0x000000, "Member 'RCReUiShinigamiBalloon_SetShakeData::InWidthX' has a wrong offset!");
static_assert(offsetof(RCReUiShinigamiBalloon_SetShakeData, InWidthY) == 0x000004, "Member 'RCReUiShinigamiBalloon_SetShakeData::InWidthY' has a wrong offset!");
static_assert(offsetof(RCReUiShinigamiBalloon_SetShakeData, InInterval) == 0x000008, "Member 'RCReUiShinigamiBalloon_SetShakeData::InInterval' has a wrong offset!");

// Function RC.RCSaveGameBFL.Check_SaveGameData
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_Check_SaveGameData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_Check_SaveGameData) == 0x000001, "Wrong alignment on RCSaveGameBFL_Check_SaveGameData");
static_assert(sizeof(RCSaveGameBFL_Check_SaveGameData) == 0x000001, "Wrong size on RCSaveGameBFL_Check_SaveGameData");
static_assert(offsetof(RCSaveGameBFL_Check_SaveGameData, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_Check_SaveGameData::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.Check_SaveGameDataStoryMode
// 0x0002 (0x0002 - 0x0000)
struct RCSaveGameBFL_Check_SaveGameDataStoryMode final
{
public:
	ERCStoryMode                                  InStoryMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_Check_SaveGameDataStoryMode) == 0x000001, "Wrong alignment on RCSaveGameBFL_Check_SaveGameDataStoryMode");
static_assert(sizeof(RCSaveGameBFL_Check_SaveGameDataStoryMode) == 0x000002, "Wrong size on RCSaveGameBFL_Check_SaveGameDataStoryMode");
static_assert(offsetof(RCSaveGameBFL_Check_SaveGameDataStoryMode, InStoryMode) == 0x000000, "Member 'RCSaveGameBFL_Check_SaveGameDataStoryMode::InStoryMode' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_Check_SaveGameDataStoryMode, ReturnValue) == 0x000001, "Member 'RCSaveGameBFL_Check_SaveGameDataStoryMode::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.Get_SaveGameDataList
// 0x0018 (0x0018 - 0x0000)
struct RCSaveGameBFL_Get_SaveGameDataList final
{
public:
	TArray<struct FRCSaveSlotInfo>                OutSlotList;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSaveGameBFL_Get_SaveGameDataList) == 0x000008, "Wrong alignment on RCSaveGameBFL_Get_SaveGameDataList");
static_assert(sizeof(RCSaveGameBFL_Get_SaveGameDataList) == 0x000018, "Wrong size on RCSaveGameBFL_Get_SaveGameDataList");
static_assert(offsetof(RCSaveGameBFL_Get_SaveGameDataList, OutSlotList) == 0x000000, "Member 'RCSaveGameBFL_Get_SaveGameDataList::OutSlotList' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_Get_SaveGameDataList, ReturnValue) == 0x000010, "Member 'RCSaveGameBFL_Get_SaveGameDataList::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.GetErrorText
// 0x0010 (0x0010 - 0x0000)
struct RCSaveGameBFL_GetErrorText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_GetErrorText) == 0x000008, "Wrong alignment on RCSaveGameBFL_GetErrorText");
static_assert(sizeof(RCSaveGameBFL_GetErrorText) == 0x000010, "Wrong size on RCSaveGameBFL_GetErrorText");
static_assert(offsetof(RCSaveGameBFL_GetErrorText, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_GetErrorText::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.GetOptionCharacterDraw
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_GetOptionCharacterDraw final
{
public:
	ERCOptionCharacterDraw                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_GetOptionCharacterDraw) == 0x000001, "Wrong alignment on RCSaveGameBFL_GetOptionCharacterDraw");
static_assert(sizeof(RCSaveGameBFL_GetOptionCharacterDraw) == 0x000001, "Wrong size on RCSaveGameBFL_GetOptionCharacterDraw");
static_assert(offsetof(RCSaveGameBFL_GetOptionCharacterDraw, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_GetOptionCharacterDraw::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.GetOptionFinaleSkipEnable
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_GetOptionFinaleSkipEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_GetOptionFinaleSkipEnable) == 0x000001, "Wrong alignment on RCSaveGameBFL_GetOptionFinaleSkipEnable");
static_assert(sizeof(RCSaveGameBFL_GetOptionFinaleSkipEnable) == 0x000001, "Wrong size on RCSaveGameBFL_GetOptionFinaleSkipEnable");
static_assert(offsetof(RCSaveGameBFL_GetOptionFinaleSkipEnable, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_GetOptionFinaleSkipEnable::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.GetOptionMobQuality
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_GetOptionMobQuality final
{
public:
	ERCOptionMobQuality                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_GetOptionMobQuality) == 0x000001, "Wrong alignment on RCSaveGameBFL_GetOptionMobQuality");
static_assert(sizeof(RCSaveGameBFL_GetOptionMobQuality) == 0x000001, "Wrong size on RCSaveGameBFL_GetOptionMobQuality");
static_assert(offsetof(RCSaveGameBFL_GetOptionMobQuality, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_GetOptionMobQuality::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.GetOptionMovieQuality
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_GetOptionMovieQuality final
{
public:
	ERCMovieQuality                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_GetOptionMovieQuality) == 0x000001, "Wrong alignment on RCSaveGameBFL_GetOptionMovieQuality");
static_assert(sizeof(RCSaveGameBFL_GetOptionMovieQuality) == 0x000001, "Wrong size on RCSaveGameBFL_GetOptionMovieQuality");
static_assert(offsetof(RCSaveGameBFL_GetOptionMovieQuality, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_GetOptionMovieQuality::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.GetOptionSubLevelQuality
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_GetOptionSubLevelQuality final
{
public:
	ERCOptionSubLevel                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_GetOptionSubLevelQuality) == 0x000001, "Wrong alignment on RCSaveGameBFL_GetOptionSubLevelQuality");
static_assert(sizeof(RCSaveGameBFL_GetOptionSubLevelQuality) == 0x000001, "Wrong size on RCSaveGameBFL_GetOptionSubLevelQuality");
static_assert(offsetof(RCSaveGameBFL_GetOptionSubLevelQuality, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_GetOptionSubLevelQuality::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.GetOptionUiQuality
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_GetOptionUiQuality final
{
public:
	ERCOptionUiQuality                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_GetOptionUiQuality) == 0x000001, "Wrong alignment on RCSaveGameBFL_GetOptionUiQuality");
static_assert(sizeof(RCSaveGameBFL_GetOptionUiQuality) == 0x000001, "Wrong size on RCSaveGameBFL_GetOptionUiQuality");
static_assert(offsetof(RCSaveGameBFL_GetOptionUiQuality, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_GetOptionUiQuality::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.GetOptionVoiceLanguage
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_GetOptionVoiceLanguage final
{
public:
	ERCVoiceLanguage                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_GetOptionVoiceLanguage) == 0x000001, "Wrong alignment on RCSaveGameBFL_GetOptionVoiceLanguage");
static_assert(sizeof(RCSaveGameBFL_GetOptionVoiceLanguage) == 0x000001, "Wrong size on RCSaveGameBFL_GetOptionVoiceLanguage");
static_assert(offsetof(RCSaveGameBFL_GetOptionVoiceLanguage, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_GetOptionVoiceLanguage::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.IsError
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_IsError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_IsError) == 0x000001, "Wrong alignment on RCSaveGameBFL_IsError");
static_assert(sizeof(RCSaveGameBFL_IsError) == 0x000001, "Wrong size on RCSaveGameBFL_IsError");
static_assert(offsetof(RCSaveGameBFL_IsError, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_IsError::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_IsFinished) == 0x000001, "Wrong alignment on RCSaveGameBFL_IsFinished");
static_assert(sizeof(RCSaveGameBFL_IsFinished) == 0x000001, "Wrong size on RCSaveGameBFL_IsFinished");
static_assert(offsetof(RCSaveGameBFL_IsFinished, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.IsPlayerMove
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_IsPlayerMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_IsPlayerMove) == 0x000001, "Wrong alignment on RCSaveGameBFL_IsPlayerMove");
static_assert(sizeof(RCSaveGameBFL_IsPlayerMove) == 0x000001, "Wrong size on RCSaveGameBFL_IsPlayerMove");
static_assert(offsetof(RCSaveGameBFL_IsPlayerMove, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_IsPlayerMove::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.SetOptionCharacterDraw
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_SetOptionCharacterDraw final
{
public:
	ERCOptionCharacterDraw                        InOptionCharacterDraw;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_SetOptionCharacterDraw) == 0x000001, "Wrong alignment on RCSaveGameBFL_SetOptionCharacterDraw");
static_assert(sizeof(RCSaveGameBFL_SetOptionCharacterDraw) == 0x000001, "Wrong size on RCSaveGameBFL_SetOptionCharacterDraw");
static_assert(offsetof(RCSaveGameBFL_SetOptionCharacterDraw, InOptionCharacterDraw) == 0x000000, "Member 'RCSaveGameBFL_SetOptionCharacterDraw::InOptionCharacterDraw' has a wrong offset!");

// Function RC.RCSaveGameBFL.SetOptionMobQuality
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_SetOptionMobQuality final
{
public:
	ERCOptionMobQuality                           InMobQuality;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_SetOptionMobQuality) == 0x000001, "Wrong alignment on RCSaveGameBFL_SetOptionMobQuality");
static_assert(sizeof(RCSaveGameBFL_SetOptionMobQuality) == 0x000001, "Wrong size on RCSaveGameBFL_SetOptionMobQuality");
static_assert(offsetof(RCSaveGameBFL_SetOptionMobQuality, InMobQuality) == 0x000000, "Member 'RCSaveGameBFL_SetOptionMobQuality::InMobQuality' has a wrong offset!");

// Function RC.RCSaveGameBFL.SetOptionMovieQuality
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_SetOptionMovieQuality final
{
public:
	ERCMovieQuality                               InMovieQuality;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_SetOptionMovieQuality) == 0x000001, "Wrong alignment on RCSaveGameBFL_SetOptionMovieQuality");
static_assert(sizeof(RCSaveGameBFL_SetOptionMovieQuality) == 0x000001, "Wrong size on RCSaveGameBFL_SetOptionMovieQuality");
static_assert(offsetof(RCSaveGameBFL_SetOptionMovieQuality, InMovieQuality) == 0x000000, "Member 'RCSaveGameBFL_SetOptionMovieQuality::InMovieQuality' has a wrong offset!");

// Function RC.RCSaveGameBFL.SetOptionSubLevelQuality
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_SetOptionSubLevelQuality final
{
public:
	ERCOptionSubLevel                             InOptionSubLevel;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_SetOptionSubLevelQuality) == 0x000001, "Wrong alignment on RCSaveGameBFL_SetOptionSubLevelQuality");
static_assert(sizeof(RCSaveGameBFL_SetOptionSubLevelQuality) == 0x000001, "Wrong size on RCSaveGameBFL_SetOptionSubLevelQuality");
static_assert(offsetof(RCSaveGameBFL_SetOptionSubLevelQuality, InOptionSubLevel) == 0x000000, "Member 'RCSaveGameBFL_SetOptionSubLevelQuality::InOptionSubLevel' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartLoad_DevelopmentData
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_StartLoad_DevelopmentData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_StartLoad_DevelopmentData) == 0x000001, "Wrong alignment on RCSaveGameBFL_StartLoad_DevelopmentData");
static_assert(sizeof(RCSaveGameBFL_StartLoad_DevelopmentData) == 0x000001, "Wrong size on RCSaveGameBFL_StartLoad_DevelopmentData");
static_assert(offsetof(RCSaveGameBFL_StartLoad_DevelopmentData, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_StartLoad_DevelopmentData::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartLoad_LastSaveGameData
// 0x0002 (0x0002 - 0x0000)
struct RCSaveGameBFL_StartLoad_LastSaveGameData final
{
public:
	ERCStoryMode                                  InStoryMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_StartLoad_LastSaveGameData) == 0x000001, "Wrong alignment on RCSaveGameBFL_StartLoad_LastSaveGameData");
static_assert(sizeof(RCSaveGameBFL_StartLoad_LastSaveGameData) == 0x000002, "Wrong size on RCSaveGameBFL_StartLoad_LastSaveGameData");
static_assert(offsetof(RCSaveGameBFL_StartLoad_LastSaveGameData, InStoryMode) == 0x000000, "Member 'RCSaveGameBFL_StartLoad_LastSaveGameData::InStoryMode' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartLoad_LastSaveGameData, ReturnValue) == 0x000001, "Member 'RCSaveGameBFL_StartLoad_LastSaveGameData::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartLoad_SaveGameData
// 0x000C (0x000C - 0x0000)
struct RCSaveGameBFL_StartLoad_SaveGameData final
{
public:
	ERCSaveDataType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSaveGameBFL_StartLoad_SaveGameData) == 0x000004, "Wrong alignment on RCSaveGameBFL_StartLoad_SaveGameData");
static_assert(sizeof(RCSaveGameBFL_StartLoad_SaveGameData) == 0x00000C, "Wrong size on RCSaveGameBFL_StartLoad_SaveGameData");
static_assert(offsetof(RCSaveGameBFL_StartLoad_SaveGameData, InType) == 0x000000, "Member 'RCSaveGameBFL_StartLoad_SaveGameData::InType' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartLoad_SaveGameData, InSlot) == 0x000004, "Member 'RCSaveGameBFL_StartLoad_SaveGameData::InSlot' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartLoad_SaveGameData, ReturnValue) == 0x000008, "Member 'RCSaveGameBFL_StartLoad_SaveGameData::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartLoad_SaveGameDataMemory
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_StartLoad_SaveGameDataMemory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_StartLoad_SaveGameDataMemory) == 0x000001, "Wrong alignment on RCSaveGameBFL_StartLoad_SaveGameDataMemory");
static_assert(sizeof(RCSaveGameBFL_StartLoad_SaveGameDataMemory) == 0x000001, "Wrong size on RCSaveGameBFL_StartLoad_SaveGameDataMemory");
static_assert(offsetof(RCSaveGameBFL_StartLoad_SaveGameDataMemory, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_StartLoad_SaveGameDataMemory::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartLoad_SaveGameDataStoryMode
// 0x000C (0x000C - 0x0000)
struct RCSaveGameBFL_StartLoad_SaveGameDataStoryMode final
{
public:
	ERCStoryMode                                  InStoryMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSaveDataType                               InType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSaveGameBFL_StartLoad_SaveGameDataStoryMode) == 0x000004, "Wrong alignment on RCSaveGameBFL_StartLoad_SaveGameDataStoryMode");
static_assert(sizeof(RCSaveGameBFL_StartLoad_SaveGameDataStoryMode) == 0x00000C, "Wrong size on RCSaveGameBFL_StartLoad_SaveGameDataStoryMode");
static_assert(offsetof(RCSaveGameBFL_StartLoad_SaveGameDataStoryMode, InStoryMode) == 0x000000, "Member 'RCSaveGameBFL_StartLoad_SaveGameDataStoryMode::InStoryMode' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartLoad_SaveGameDataStoryMode, InType) == 0x000001, "Member 'RCSaveGameBFL_StartLoad_SaveGameDataStoryMode::InType' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartLoad_SaveGameDataStoryMode, InSlot) == 0x000004, "Member 'RCSaveGameBFL_StartLoad_SaveGameDataStoryMode::InSlot' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartLoad_SaveGameDataStoryMode, ReturnValue) == 0x000008, "Member 'RCSaveGameBFL_StartLoad_SaveGameDataStoryMode::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartLoad_SystemeData
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_StartLoad_SystemeData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_StartLoad_SystemeData) == 0x000001, "Wrong alignment on RCSaveGameBFL_StartLoad_SystemeData");
static_assert(sizeof(RCSaveGameBFL_StartLoad_SystemeData) == 0x000001, "Wrong size on RCSaveGameBFL_StartLoad_SystemeData");
static_assert(offsetof(RCSaveGameBFL_StartLoad_SystemeData, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_StartLoad_SystemeData::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartSave_AutoSaveGameData
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_StartSave_AutoSaveGameData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_StartSave_AutoSaveGameData) == 0x000001, "Wrong alignment on RCSaveGameBFL_StartSave_AutoSaveGameData");
static_assert(sizeof(RCSaveGameBFL_StartSave_AutoSaveGameData) == 0x000001, "Wrong size on RCSaveGameBFL_StartSave_AutoSaveGameData");
static_assert(offsetof(RCSaveGameBFL_StartSave_AutoSaveGameData, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_StartSave_AutoSaveGameData::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartSave_AutoSaveGameDataStoryMode
// 0x0002 (0x0002 - 0x0000)
struct RCSaveGameBFL_StartSave_AutoSaveGameDataStoryMode final
{
public:
	ERCStoryMode                                  InStoryMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_StartSave_AutoSaveGameDataStoryMode) == 0x000001, "Wrong alignment on RCSaveGameBFL_StartSave_AutoSaveGameDataStoryMode");
static_assert(sizeof(RCSaveGameBFL_StartSave_AutoSaveGameDataStoryMode) == 0x000002, "Wrong size on RCSaveGameBFL_StartSave_AutoSaveGameDataStoryMode");
static_assert(offsetof(RCSaveGameBFL_StartSave_AutoSaveGameDataStoryMode, InStoryMode) == 0x000000, "Member 'RCSaveGameBFL_StartSave_AutoSaveGameDataStoryMode::InStoryMode' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartSave_AutoSaveGameDataStoryMode, ReturnValue) == 0x000001, "Member 'RCSaveGameBFL_StartSave_AutoSaveGameDataStoryMode::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartSave_DevelopmentData
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_StartSave_DevelopmentData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_StartSave_DevelopmentData) == 0x000001, "Wrong alignment on RCSaveGameBFL_StartSave_DevelopmentData");
static_assert(sizeof(RCSaveGameBFL_StartSave_DevelopmentData) == 0x000001, "Wrong size on RCSaveGameBFL_StartSave_DevelopmentData");
static_assert(offsetof(RCSaveGameBFL_StartSave_DevelopmentData, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_StartSave_DevelopmentData::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartSave_SaveGameData
// 0x000C (0x000C - 0x0000)
struct RCSaveGameBFL_StartSave_SaveGameData final
{
public:
	ERCSaveDataType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSaveGameBFL_StartSave_SaveGameData) == 0x000004, "Wrong alignment on RCSaveGameBFL_StartSave_SaveGameData");
static_assert(sizeof(RCSaveGameBFL_StartSave_SaveGameData) == 0x00000C, "Wrong size on RCSaveGameBFL_StartSave_SaveGameData");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameData, InType) == 0x000000, "Member 'RCSaveGameBFL_StartSave_SaveGameData::InType' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameData, InSlot) == 0x000004, "Member 'RCSaveGameBFL_StartSave_SaveGameData::InSlot' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameData, ReturnValue) == 0x000008, "Member 'RCSaveGameBFL_StartSave_SaveGameData::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartSave_SaveGameDataMemory
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_StartSave_SaveGameDataMemory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_StartSave_SaveGameDataMemory) == 0x000001, "Wrong alignment on RCSaveGameBFL_StartSave_SaveGameDataMemory");
static_assert(sizeof(RCSaveGameBFL_StartSave_SaveGameDataMemory) == 0x000001, "Wrong size on RCSaveGameBFL_StartSave_SaveGameDataMemory");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameDataMemory, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_StartSave_SaveGameDataMemory::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartSave_SaveGameDataNazoManualSave
// 0x000C (0x000C - 0x0000)
struct RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave final
{
public:
	ERCSaveDataType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave) == 0x000004, "Wrong alignment on RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave");
static_assert(sizeof(RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave) == 0x00000C, "Wrong size on RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave, InType) == 0x000000, "Member 'RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave::InType' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave, InSlot) == 0x000004, "Member 'RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave::InSlot' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave, ReturnValue) == 0x000008, "Member 'RCSaveGameBFL_StartSave_SaveGameDataNazoManualSave::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartSave_SaveGameDataStoryMode
// 0x000C (0x000C - 0x0000)
struct RCSaveGameBFL_StartSave_SaveGameDataStoryMode final
{
public:
	ERCStoryMode                                  InStoryMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSaveDataType                               InType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSaveGameBFL_StartSave_SaveGameDataStoryMode) == 0x000004, "Wrong alignment on RCSaveGameBFL_StartSave_SaveGameDataStoryMode");
static_assert(sizeof(RCSaveGameBFL_StartSave_SaveGameDataStoryMode) == 0x00000C, "Wrong size on RCSaveGameBFL_StartSave_SaveGameDataStoryMode");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameDataStoryMode, InStoryMode) == 0x000000, "Member 'RCSaveGameBFL_StartSave_SaveGameDataStoryMode::InStoryMode' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameDataStoryMode, InType) == 0x000001, "Member 'RCSaveGameBFL_StartSave_SaveGameDataStoryMode::InType' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameDataStoryMode, InSlot) == 0x000004, "Member 'RCSaveGameBFL_StartSave_SaveGameDataStoryMode::InSlot' has a wrong offset!");
static_assert(offsetof(RCSaveGameBFL_StartSave_SaveGameDataStoryMode, ReturnValue) == 0x000008, "Member 'RCSaveGameBFL_StartSave_SaveGameDataStoryMode::ReturnValue' has a wrong offset!");

// Function RC.RCSaveGameBFL.StartSave_SystemData
// 0x0001 (0x0001 - 0x0000)
struct RCSaveGameBFL_StartSave_SystemData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveGameBFL_StartSave_SystemData) == 0x000001, "Wrong alignment on RCSaveGameBFL_StartSave_SystemData");
static_assert(sizeof(RCSaveGameBFL_StartSave_SystemData) == 0x000001, "Wrong size on RCSaveGameBFL_StartSave_SystemData");
static_assert(offsetof(RCSaveGameBFL_StartSave_SystemData, ReturnValue) == 0x000000, "Member 'RCSaveGameBFL_StartSave_SystemData::ReturnValue' has a wrong offset!");

// Function RC.RCSaveLoadBFL.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCSaveLoadBFL_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveLoadBFL_IsFinished) == 0x000001, "Wrong alignment on RCSaveLoadBFL_IsFinished");
static_assert(sizeof(RCSaveLoadBFL_IsFinished) == 0x000001, "Wrong size on RCSaveLoadBFL_IsFinished");
static_assert(offsetof(RCSaveLoadBFL_IsFinished, ReturnValue) == 0x000000, "Member 'RCSaveLoadBFL_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCTitleGalleryMovieList.MovieNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCTitleGalleryMovieList_MovieNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleGalleryMovieList_MovieNavigation) == 0x000008, "Wrong alignment on RCTitleGalleryMovieList_MovieNavigation");
static_assert(sizeof(RCTitleGalleryMovieList_MovieNavigation) == 0x000010, "Wrong size on RCTitleGalleryMovieList_MovieNavigation");
static_assert(offsetof(RCTitleGalleryMovieList_MovieNavigation, InNavigation) == 0x000000, "Member 'RCTitleGalleryMovieList_MovieNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTitleGalleryMovieList_MovieNavigation, ReturnValue) == 0x000008, "Member 'RCTitleGalleryMovieList_MovieNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCSaveLoadSelect.PushCancelWrap
// 0x0001 (0x0001 - 0x0000)
struct RCSaveLoadSelect_PushCancelWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveLoadSelect_PushCancelWrap) == 0x000001, "Wrong alignment on RCSaveLoadSelect_PushCancelWrap");
static_assert(sizeof(RCSaveLoadSelect_PushCancelWrap) == 0x000001, "Wrong size on RCSaveLoadSelect_PushCancelWrap");
static_assert(offsetof(RCSaveLoadSelect_PushCancelWrap, InKeyType) == 0x000000, "Member 'RCSaveLoadSelect_PushCancelWrap::InKeyType' has a wrong offset!");

// Function RC.RCSaveLoadSelect.PushDecideWrap
// 0x0001 (0x0001 - 0x0000)
struct RCSaveLoadSelect_PushDecideWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveLoadSelect_PushDecideWrap) == 0x000001, "Wrong alignment on RCSaveLoadSelect_PushDecideWrap");
static_assert(sizeof(RCSaveLoadSelect_PushDecideWrap) == 0x000001, "Wrong size on RCSaveLoadSelect_PushDecideWrap");
static_assert(offsetof(RCSaveLoadSelect_PushDecideWrap, InKeyType) == 0x000000, "Member 'RCSaveLoadSelect_PushDecideWrap::InKeyType' has a wrong offset!");

// Function RC.RCSaveLoadSelect.SaveLoadSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCSaveLoadSelect_SaveLoadSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveLoadSelect_SaveLoadSelectNavigation) == 0x000008, "Wrong alignment on RCSaveLoadSelect_SaveLoadSelectNavigation");
static_assert(sizeof(RCSaveLoadSelect_SaveLoadSelectNavigation) == 0x000010, "Wrong size on RCSaveLoadSelect_SaveLoadSelectNavigation");
static_assert(offsetof(RCSaveLoadSelect_SaveLoadSelectNavigation, InNavigation) == 0x000000, "Member 'RCSaveLoadSelect_SaveLoadSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCSaveLoadSelect_SaveLoadSelectNavigation, ReturnValue) == 0x000008, "Member 'RCSaveLoadSelect_SaveLoadSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCSaveLoadWidget.PushCancelWrap
// 0x0001 (0x0001 - 0x0000)
struct RCSaveLoadWidget_PushCancelWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveLoadWidget_PushCancelWrap) == 0x000001, "Wrong alignment on RCSaveLoadWidget_PushCancelWrap");
static_assert(sizeof(RCSaveLoadWidget_PushCancelWrap) == 0x000001, "Wrong size on RCSaveLoadWidget_PushCancelWrap");
static_assert(offsetof(RCSaveLoadWidget_PushCancelWrap, InKeyType) == 0x000000, "Member 'RCSaveLoadWidget_PushCancelWrap::InKeyType' has a wrong offset!");

// Function RC.RCSaveLoadWidget.PushDecideWrap
// 0x0001 (0x0001 - 0x0000)
struct RCSaveLoadWidget_PushDecideWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveLoadWidget_PushDecideWrap) == 0x000001, "Wrong alignment on RCSaveLoadWidget_PushDecideWrap");
static_assert(sizeof(RCSaveLoadWidget_PushDecideWrap) == 0x000001, "Wrong size on RCSaveLoadWidget_PushDecideWrap");
static_assert(offsetof(RCSaveLoadWidget_PushDecideWrap, InKeyType) == 0x000000, "Member 'RCSaveLoadWidget_PushDecideWrap::InKeyType' has a wrong offset!");

// Function RC.RCSaveLoadWidget.SaveLoadWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCSaveLoadWidget_SaveLoadWidgetNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSaveLoadWidget_SaveLoadWidgetNavigation) == 0x000008, "Wrong alignment on RCSaveLoadWidget_SaveLoadWidgetNavigation");
static_assert(sizeof(RCSaveLoadWidget_SaveLoadWidgetNavigation) == 0x000010, "Wrong size on RCSaveLoadWidget_SaveLoadWidgetNavigation");
static_assert(offsetof(RCSaveLoadWidget_SaveLoadWidgetNavigation, InNavigation) == 0x000000, "Member 'RCSaveLoadWidget_SaveLoadWidgetNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCSaveLoadWidget_SaveLoadWidgetNavigation, ReturnValue) == 0x000008, "Member 'RCSaveLoadWidget_SaveLoadWidgetNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCSelectText3DActor.GetSelectStatus
// 0x0001 (0x0001 - 0x0000)
struct RCSelectText3DActor_GetSelectStatus final
{
public:
	ERCSelectTextSelectStatus                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSelectText3DActor_GetSelectStatus) == 0x000001, "Wrong alignment on RCSelectText3DActor_GetSelectStatus");
static_assert(sizeof(RCSelectText3DActor_GetSelectStatus) == 0x000001, "Wrong size on RCSelectText3DActor_GetSelectStatus");
static_assert(offsetof(RCSelectText3DActor_GetSelectStatus, ReturnValue) == 0x000000, "Member 'RCSelectText3DActor_GetSelectStatus::ReturnValue' has a wrong offset!");

// Function RC.RCSelectText3DActor.SetSelectStatus
// 0x0001 (0x0001 - 0x0000)
struct RCSelectText3DActor_SetSelectStatus final
{
public:
	ERCSelectTextSelectStatus                     InStatus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSelectText3DActor_SetSelectStatus) == 0x000001, "Wrong alignment on RCSelectText3DActor_SetSelectStatus");
static_assert(sizeof(RCSelectText3DActor_SetSelectStatus) == 0x000001, "Wrong size on RCSelectText3DActor_SetSelectStatus");
static_assert(offsetof(RCSelectText3DActor_SetSelectStatus, InStatus) == 0x000000, "Member 'RCSelectText3DActor_SetSelectStatus::InStatus' has a wrong offset!");

// Function RC.RCSelectText3DActor.SetTextColor
// 0x0010 (0x0010 - 0x0000)
struct RCSelectText3DActor_SetTextColor final
{
public:
	struct FLinearColor                           InTextColor;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSelectText3DActor_SetTextColor) == 0x000004, "Wrong alignment on RCSelectText3DActor_SetTextColor");
static_assert(sizeof(RCSelectText3DActor_SetTextColor) == 0x000010, "Wrong size on RCSelectText3DActor_SetTextColor");
static_assert(offsetof(RCSelectText3DActor_SetTextColor, InTextColor) == 0x000000, "Member 'RCSelectText3DActor_SetTextColor::InTextColor' has a wrong offset!");

// Function RC.RCShinigamiEffectComponent.EffectSpawn
// 0x0020 (0x0020 - 0x0000)
struct RCShinigamiEffectComponent_EffectSpawn final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCShinigamiEffectComponent_EffectSpawn) == 0x000004, "Wrong alignment on RCShinigamiEffectComponent_EffectSpawn");
static_assert(sizeof(RCShinigamiEffectComponent_EffectSpawn) == 0x000020, "Wrong size on RCShinigamiEffectComponent_EffectSpawn");
static_assert(offsetof(RCShinigamiEffectComponent_EffectSpawn, InEffectData) == 0x000000, "Member 'RCShinigamiEffectComponent_EffectSpawn::InEffectData' has a wrong offset!");
static_assert(offsetof(RCShinigamiEffectComponent_EffectSpawn, ReturnValue) == 0x00001C, "Member 'RCShinigamiEffectComponent_EffectSpawn::ReturnValue' has a wrong offset!");

// Function RC.RCShinigamiEffectComponent.EffectStart
// 0x0020 (0x0020 - 0x0000)
struct RCShinigamiEffectComponent_EffectStart final
{
public:
	struct FRCEffectComponentData                 InEffectData;                                      // 0x0000(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCShinigamiEffectComponent_EffectStart) == 0x000004, "Wrong alignment on RCShinigamiEffectComponent_EffectStart");
static_assert(sizeof(RCShinigamiEffectComponent_EffectStart) == 0x000020, "Wrong size on RCShinigamiEffectComponent_EffectStart");
static_assert(offsetof(RCShinigamiEffectComponent_EffectStart, InEffectData) == 0x000000, "Member 'RCShinigamiEffectComponent_EffectStart::InEffectData' has a wrong offset!");
static_assert(offsetof(RCShinigamiEffectComponent_EffectStart, ReturnValue) == 0x00001C, "Member 'RCShinigamiEffectComponent_EffectStart::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.ActionSequencerSound
// 0x0058 (0x0058 - 0x0000)
struct RCSoundManagerBFL_ActionSequencerSound final
{
public:
	struct FRCParamSequencerSoundTemplateTableRow SoundData;                                         // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	bool                                          bMovie;                                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_ActionSequencerSound) == 0x000008, "Wrong alignment on RCSoundManagerBFL_ActionSequencerSound");
static_assert(sizeof(RCSoundManagerBFL_ActionSequencerSound) == 0x000058, "Wrong size on RCSoundManagerBFL_ActionSequencerSound");
static_assert(offsetof(RCSoundManagerBFL_ActionSequencerSound, SoundData) == 0x000000, "Member 'RCSoundManagerBFL_ActionSequencerSound::SoundData' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_ActionSequencerSound, bMovie) == 0x000050, "Member 'RCSoundManagerBFL_ActionSequencerSound::bMovie' has a wrong offset!");

// Function RC.RCSoundManagerBFL.ChangeMapEnvSoundVolume
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManagerBFL_ChangeMapEnvSoundVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_ChangeMapEnvSoundVolume) == 0x000004, "Wrong alignment on RCSoundManagerBFL_ChangeMapEnvSoundVolume");
static_assert(sizeof(RCSoundManagerBFL_ChangeMapEnvSoundVolume) == 0x000008, "Wrong size on RCSoundManagerBFL_ChangeMapEnvSoundVolume");
static_assert(offsetof(RCSoundManagerBFL_ChangeMapEnvSoundVolume, Volume) == 0x000000, "Member 'RCSoundManagerBFL_ChangeMapEnvSoundVolume::Volume' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_ChangeMapEnvSoundVolume, FadeTime) == 0x000004, "Member 'RCSoundManagerBFL_ChangeMapEnvSoundVolume::FadeTime' has a wrong offset!");

// Function RC.RCSoundManagerBFL.CrossFade
// 0x000C (0x000C - 0x0000)
struct RCSoundManagerBFL_CrossFade final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeOutTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_CrossFade) == 0x000004, "Wrong alignment on RCSoundManagerBFL_CrossFade");
static_assert(sizeof(RCSoundManagerBFL_CrossFade) == 0x00000C, "Wrong size on RCSoundManagerBFL_CrossFade");
static_assert(offsetof(RCSoundManagerBFL_CrossFade, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_CrossFade::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_CrossFade, Index_0) == 0x000004, "Member 'RCSoundManagerBFL_CrossFade::Index_0' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_CrossFade, fadeOutTime) == 0x000008, "Member 'RCSoundManagerBFL_CrossFade::fadeOutTime' has a wrong offset!");

// Function RC.RCSoundManagerBFL.CrossFadeForParamSoundID
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManagerBFL_CrossFadeForParamSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeOutTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_CrossFadeForParamSoundID) == 0x000008, "Wrong alignment on RCSoundManagerBFL_CrossFadeForParamSoundID");
static_assert(sizeof(RCSoundManagerBFL_CrossFadeForParamSoundID) == 0x000020, "Wrong size on RCSoundManagerBFL_CrossFadeForParamSoundID");
static_assert(offsetof(RCSoundManagerBFL_CrossFadeForParamSoundID, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_CrossFadeForParamSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_CrossFadeForParamSoundID, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_CrossFadeForParamSoundID::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_CrossFadeForParamSoundID, fadeOutTime) == 0x000018, "Member 'RCSoundManagerBFL_CrossFadeForParamSoundID::fadeOutTime' has a wrong offset!");

// Function RC.RCSoundManagerBFL.FadeIn
// 0x0014 (0x0014 - 0x0000)
struct RCSoundManagerBFL_FadeIn final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeInTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         finishVolume;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_FadeIn) == 0x000004, "Wrong alignment on RCSoundManagerBFL_FadeIn");
static_assert(sizeof(RCSoundManagerBFL_FadeIn) == 0x000014, "Wrong size on RCSoundManagerBFL_FadeIn");
static_assert(offsetof(RCSoundManagerBFL_FadeIn, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_FadeIn::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeIn, Index_0) == 0x000004, "Member 'RCSoundManagerBFL_FadeIn::Index_0' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeIn, fadeInTime) == 0x000008, "Member 'RCSoundManagerBFL_FadeIn::fadeInTime' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeIn, StartTime) == 0x00000C, "Member 'RCSoundManagerBFL_FadeIn::StartTime' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeIn, finishVolume) == 0x000010, "Member 'RCSoundManagerBFL_FadeIn::finishVolume' has a wrong offset!");

// Function RC.RCSoundManagerBFL.FadeInForParamSoundID
// 0x0028 (0x0028 - 0x0000)
struct RCSoundManagerBFL_FadeInForParamSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeInTime;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         finishVolume;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_FadeInForParamSoundID) == 0x000008, "Wrong alignment on RCSoundManagerBFL_FadeInForParamSoundID");
static_assert(sizeof(RCSoundManagerBFL_FadeInForParamSoundID) == 0x000028, "Wrong size on RCSoundManagerBFL_FadeInForParamSoundID");
static_assert(offsetof(RCSoundManagerBFL_FadeInForParamSoundID, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_FadeInForParamSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeInForParamSoundID, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_FadeInForParamSoundID::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeInForParamSoundID, fadeInTime) == 0x000018, "Member 'RCSoundManagerBFL_FadeInForParamSoundID::fadeInTime' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeInForParamSoundID, StartTime) == 0x00001C, "Member 'RCSoundManagerBFL_FadeInForParamSoundID::StartTime' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeInForParamSoundID, finishVolume) == 0x000020, "Member 'RCSoundManagerBFL_FadeInForParamSoundID::finishVolume' has a wrong offset!");

// Function RC.RCSoundManagerBFL.FadeOut
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManagerBFL_FadeOut final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeOutTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         finishVolume;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_FadeOut) == 0x000004, "Wrong alignment on RCSoundManagerBFL_FadeOut");
static_assert(sizeof(RCSoundManagerBFL_FadeOut) == 0x000010, "Wrong size on RCSoundManagerBFL_FadeOut");
static_assert(offsetof(RCSoundManagerBFL_FadeOut, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_FadeOut::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeOut, Index_0) == 0x000004, "Member 'RCSoundManagerBFL_FadeOut::Index_0' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeOut, fadeOutTime) == 0x000008, "Member 'RCSoundManagerBFL_FadeOut::fadeOutTime' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeOut, finishVolume) == 0x00000C, "Member 'RCSoundManagerBFL_FadeOut::finishVolume' has a wrong offset!");

// Function RC.RCSoundManagerBFL.FadeOutForParamSoundID
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManagerBFL_FadeOutForParamSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeOutTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         finishVolume;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_FadeOutForParamSoundID) == 0x000008, "Wrong alignment on RCSoundManagerBFL_FadeOutForParamSoundID");
static_assert(sizeof(RCSoundManagerBFL_FadeOutForParamSoundID) == 0x000020, "Wrong size on RCSoundManagerBFL_FadeOutForParamSoundID");
static_assert(offsetof(RCSoundManagerBFL_FadeOutForParamSoundID, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_FadeOutForParamSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeOutForParamSoundID, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_FadeOutForParamSoundID::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeOutForParamSoundID, fadeOutTime) == 0x000018, "Member 'RCSoundManagerBFL_FadeOutForParamSoundID::fadeOutTime' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_FadeOutForParamSoundID, finishVolume) == 0x00001C, "Member 'RCSoundManagerBFL_FadeOutForParamSoundID::finishVolume' has a wrong offset!");

// Function RC.RCSoundManagerBFL.GetPlayingBgmIDArray
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManagerBFL_GetPlayingBgmIDArray final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_GetPlayingBgmIDArray) == 0x000008, "Wrong alignment on RCSoundManagerBFL_GetPlayingBgmIDArray");
static_assert(sizeof(RCSoundManagerBFL_GetPlayingBgmIDArray) == 0x000010, "Wrong size on RCSoundManagerBFL_GetPlayingBgmIDArray");
static_assert(offsetof(RCSoundManagerBFL_GetPlayingBgmIDArray, ReturnValue) == 0x000000, "Member 'RCSoundManagerBFL_GetPlayingBgmIDArray::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.GetPlayingEnvIDArray
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManagerBFL_GetPlayingEnvIDArray final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_GetPlayingEnvIDArray) == 0x000008, "Wrong alignment on RCSoundManagerBFL_GetPlayingEnvIDArray");
static_assert(sizeof(RCSoundManagerBFL_GetPlayingEnvIDArray) == 0x000010, "Wrong size on RCSoundManagerBFL_GetPlayingEnvIDArray");
static_assert(offsetof(RCSoundManagerBFL_GetPlayingEnvIDArray, ReturnValue) == 0x000000, "Member 'RCSoundManagerBFL_GetPlayingEnvIDArray::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.GetPlayingSeIDArray
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManagerBFL_GetPlayingSeIDArray final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_GetPlayingSeIDArray) == 0x000008, "Wrong alignment on RCSoundManagerBFL_GetPlayingSeIDArray");
static_assert(sizeof(RCSoundManagerBFL_GetPlayingSeIDArray) == 0x000010, "Wrong size on RCSoundManagerBFL_GetPlayingSeIDArray");
static_assert(offsetof(RCSoundManagerBFL_GetPlayingSeIDArray, ReturnValue) == 0x000000, "Member 'RCSoundManagerBFL_GetPlayingSeIDArray::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.GetSoundManager
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManagerBFL_GetSoundManager final
{
public:
	class ARCSoundManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_GetSoundManager) == 0x000008, "Wrong alignment on RCSoundManagerBFL_GetSoundManager");
static_assert(sizeof(RCSoundManagerBFL_GetSoundManager) == 0x000008, "Wrong size on RCSoundManagerBFL_GetSoundManager");
static_assert(offsetof(RCSoundManagerBFL_GetSoundManager, ReturnValue) == 0x000000, "Member 'RCSoundManagerBFL_GetSoundManager::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.GetSoundParameter
// 0x0048 (0x0048 - 0x0000)
struct RCSoundManagerBFL_GetSoundParameter final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         soundIndex;                                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharaID;                                           // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionType;                                        // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_GetSoundParameter) == 0x000008, "Wrong alignment on RCSoundManagerBFL_GetSoundParameter");
static_assert(sizeof(RCSoundManagerBFL_GetSoundParameter) == 0x000048, "Wrong size on RCSoundManagerBFL_GetSoundParameter");
static_assert(offsetof(RCSoundManagerBFL_GetSoundParameter, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_GetSoundParameter::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_GetSoundParameter, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_GetSoundParameter::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_GetSoundParameter, soundIndex) == 0x000018, "Member 'RCSoundManagerBFL_GetSoundParameter::soundIndex' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_GetSoundParameter, SoundId) == 0x000020, "Member 'RCSoundManagerBFL_GetSoundParameter::SoundId' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_GetSoundParameter, CharaID) == 0x000030, "Member 'RCSoundManagerBFL_GetSoundParameter::CharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_GetSoundParameter, OptionType) == 0x000040, "Member 'RCSoundManagerBFL_GetSoundParameter::OptionType' has a wrong offset!");

// Function RC.RCSoundManagerBFL.GetSoundType
// 0x000C (0x000C - 0x0000)
struct RCSoundManagerBFL_GetSoundType final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OptionType;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSoundType                                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_GetSoundType) == 0x000004, "Wrong alignment on RCSoundManagerBFL_GetSoundType");
static_assert(sizeof(RCSoundManagerBFL_GetSoundType) == 0x00000C, "Wrong size on RCSoundManagerBFL_GetSoundType");
static_assert(offsetof(RCSoundManagerBFL_GetSoundType, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_GetSoundType::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_GetSoundType, OptionType) == 0x000004, "Member 'RCSoundManagerBFL_GetSoundType::OptionType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_GetSoundType, ReturnValue) == 0x000008, "Member 'RCSoundManagerBFL_GetSoundType::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.GetVoiceID
// 0x0014 (0x0014 - 0x0000)
struct RCSoundManagerBFL_GetVoiceID final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_GetVoiceID) == 0x000004, "Wrong alignment on RCSoundManagerBFL_GetVoiceID");
static_assert(sizeof(RCSoundManagerBFL_GetVoiceID) == 0x000014, "Wrong size on RCSoundManagerBFL_GetVoiceID");
static_assert(offsetof(RCSoundManagerBFL_GetVoiceID, TextID) == 0x000000, "Member 'RCSoundManagerBFL_GetVoiceID::TextID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_GetVoiceID, Chapter) == 0x000008, "Member 'RCSoundManagerBFL_GetVoiceID::Chapter' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_GetVoiceID, ReturnValue) == 0x00000C, "Member 'RCSoundManagerBFL_GetVoiceID::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.IsDeathMatchBattle
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManagerBFL_IsDeathMatchBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_IsDeathMatchBattle) == 0x000001, "Wrong alignment on RCSoundManagerBFL_IsDeathMatchBattle");
static_assert(sizeof(RCSoundManagerBFL_IsDeathMatchBattle) == 0x000001, "Wrong size on RCSoundManagerBFL_IsDeathMatchBattle");
static_assert(offsetof(RCSoundManagerBFL_IsDeathMatchBattle, ReturnValue) == 0x000000, "Member 'RCSoundManagerBFL_IsDeathMatchBattle::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.IsLoadCompleteNonResidentSheet
// 0x0002 (0x0002 - 0x0000)
struct RCSoundManagerBFL_IsLoadCompleteNonResidentSheet final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_IsLoadCompleteNonResidentSheet) == 0x000001, "Wrong alignment on RCSoundManagerBFL_IsLoadCompleteNonResidentSheet");
static_assert(sizeof(RCSoundManagerBFL_IsLoadCompleteNonResidentSheet) == 0x000002, "Wrong size on RCSoundManagerBFL_IsLoadCompleteNonResidentSheet");
static_assert(offsetof(RCSoundManagerBFL_IsLoadCompleteNonResidentSheet, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_IsLoadCompleteNonResidentSheet::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_IsLoadCompleteNonResidentSheet, ReturnValue) == 0x000001, "Member 'RCSoundManagerBFL_IsLoadCompleteNonResidentSheet::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.IsPlaying
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManagerBFL_IsPlaying final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_IsPlaying) == 0x000008, "Wrong alignment on RCSoundManagerBFL_IsPlaying");
static_assert(sizeof(RCSoundManagerBFL_IsPlaying) == 0x000020, "Wrong size on RCSoundManagerBFL_IsPlaying");
static_assert(offsetof(RCSoundManagerBFL_IsPlaying, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_IsPlaying::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_IsPlaying, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_IsPlaying::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_IsPlaying, ReturnValue) == 0x000018, "Member 'RCSoundManagerBFL_IsPlaying::ReturnValue' has a wrong offset!");

// Function RC.RCSoundManagerBFL.LoadNonResidentSheet
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManagerBFL_LoadNonResidentSheet final
{
public:
	class FString                                 SheetID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_LoadNonResidentSheet) == 0x000008, "Wrong alignment on RCSoundManagerBFL_LoadNonResidentSheet");
static_assert(sizeof(RCSoundManagerBFL_LoadNonResidentSheet) == 0x000010, "Wrong size on RCSoundManagerBFL_LoadNonResidentSheet");
static_assert(offsetof(RCSoundManagerBFL_LoadNonResidentSheet, SheetID) == 0x000000, "Member 'RCSoundManagerBFL_LoadNonResidentSheet::SheetID' has a wrong offset!");

// Function RC.RCSoundManagerBFL.PauseForSoundType
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManagerBFL_PauseForSoundType final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_PauseForSoundType) == 0x000001, "Wrong alignment on RCSoundManagerBFL_PauseForSoundType");
static_assert(sizeof(RCSoundManagerBFL_PauseForSoundType) == 0x000001, "Wrong size on RCSoundManagerBFL_PauseForSoundType");
static_assert(offsetof(RCSoundManagerBFL_PauseForSoundType, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_PauseForSoundType::SoundType' has a wrong offset!");

// Function RC.RCSoundManagerBFL.PauseSingle
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManagerBFL_PauseSingle final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_PauseSingle) == 0x000008, "Wrong alignment on RCSoundManagerBFL_PauseSingle");
static_assert(sizeof(RCSoundManagerBFL_PauseSingle) == 0x000010, "Wrong size on RCSoundManagerBFL_PauseSingle");
static_assert(offsetof(RCSoundManagerBFL_PauseSingle, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_PauseSingle::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_PauseSingle, soundIndex) == 0x000004, "Member 'RCSoundManagerBFL_PauseSingle::soundIndex' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_PauseSingle, Actor) == 0x000008, "Member 'RCSoundManagerBFL_PauseSingle::Actor' has a wrong offset!");

// Function RC.RCSoundManagerBFL.PauseSingleForParamSoundID
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManagerBFL_PauseSingleForParamSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_PauseSingleForParamSoundID) == 0x000008, "Wrong alignment on RCSoundManagerBFL_PauseSingleForParamSoundID");
static_assert(sizeof(RCSoundManagerBFL_PauseSingleForParamSoundID) == 0x000020, "Wrong size on RCSoundManagerBFL_PauseSingleForParamSoundID");
static_assert(offsetof(RCSoundManagerBFL_PauseSingleForParamSoundID, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_PauseSingleForParamSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_PauseSingleForParamSoundID, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_PauseSingleForParamSoundID::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_PauseSingleForParamSoundID, Actor) == 0x000018, "Member 'RCSoundManagerBFL_PauseSingleForParamSoundID::Actor' has a wrong offset!");

// Function RC.RCSoundManagerBFL.ResetVoiceCharaFacialOfActor
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManagerBFL_ResetVoiceCharaFacialOfActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_ResetVoiceCharaFacialOfActor) == 0x000008, "Wrong alignment on RCSoundManagerBFL_ResetVoiceCharaFacialOfActor");
static_assert(sizeof(RCSoundManagerBFL_ResetVoiceCharaFacialOfActor) == 0x000008, "Wrong size on RCSoundManagerBFL_ResetVoiceCharaFacialOfActor");
static_assert(offsetof(RCSoundManagerBFL_ResetVoiceCharaFacialOfActor, InActor) == 0x000000, "Member 'RCSoundManagerBFL_ResetVoiceCharaFacialOfActor::InActor' has a wrong offset!");

// Function RC.RCSoundManagerBFL.ResumeForSoundType
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManagerBFL_ResumeForSoundType final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_ResumeForSoundType) == 0x000001, "Wrong alignment on RCSoundManagerBFL_ResumeForSoundType");
static_assert(sizeof(RCSoundManagerBFL_ResumeForSoundType) == 0x000001, "Wrong size on RCSoundManagerBFL_ResumeForSoundType");
static_assert(offsetof(RCSoundManagerBFL_ResumeForSoundType, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_ResumeForSoundType::SoundType' has a wrong offset!");

// Function RC.RCSoundManagerBFL.ResumeSingle
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManagerBFL_ResumeSingle final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_ResumeSingle) == 0x000008, "Wrong alignment on RCSoundManagerBFL_ResumeSingle");
static_assert(sizeof(RCSoundManagerBFL_ResumeSingle) == 0x000010, "Wrong size on RCSoundManagerBFL_ResumeSingle");
static_assert(offsetof(RCSoundManagerBFL_ResumeSingle, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_ResumeSingle::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_ResumeSingle, soundIndex) == 0x000004, "Member 'RCSoundManagerBFL_ResumeSingle::soundIndex' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_ResumeSingle, Actor) == 0x000008, "Member 'RCSoundManagerBFL_ResumeSingle::Actor' has a wrong offset!");

// Function RC.RCSoundManagerBFL.ResumeSingleForParamSoundID
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManagerBFL_ResumeSingleForParamSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_ResumeSingleForParamSoundID) == 0x000008, "Wrong alignment on RCSoundManagerBFL_ResumeSingleForParamSoundID");
static_assert(sizeof(RCSoundManagerBFL_ResumeSingleForParamSoundID) == 0x000020, "Wrong size on RCSoundManagerBFL_ResumeSingleForParamSoundID");
static_assert(offsetof(RCSoundManagerBFL_ResumeSingleForParamSoundID, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_ResumeSingleForParamSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_ResumeSingleForParamSoundID, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_ResumeSingleForParamSoundID::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_ResumeSingleForParamSoundID, Actor) == 0x000018, "Member 'RCSoundManagerBFL_ResumeSingleForParamSoundID::Actor' has a wrong offset!");

// Function RC.RCSoundManagerBFL.Set3DSoundPlayFlag
// 0x0018 (0x0018 - 0x0000)
struct RCSoundManagerBFL_Set3DSoundPlayFlag final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPause_0;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_Set3DSoundPlayFlag) == 0x000008, "Wrong alignment on RCSoundManagerBFL_Set3DSoundPlayFlag");
static_assert(sizeof(RCSoundManagerBFL_Set3DSoundPlayFlag) == 0x000018, "Wrong size on RCSoundManagerBFL_Set3DSoundPlayFlag");
static_assert(offsetof(RCSoundManagerBFL_Set3DSoundPlayFlag, ActorName) == 0x000000, "Member 'RCSoundManagerBFL_Set3DSoundPlayFlag::ActorName' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_Set3DSoundPlayFlag, IsPause_0) == 0x000010, "Member 'RCSoundManagerBFL_Set3DSoundPlayFlag::IsPause_0' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetBackLogFlag
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManagerBFL_SetBackLogFlag final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetBackLogFlag) == 0x000001, "Wrong alignment on RCSoundManagerBFL_SetBackLogFlag");
static_assert(sizeof(RCSoundManagerBFL_SetBackLogFlag) == 0x000001, "Wrong size on RCSoundManagerBFL_SetBackLogFlag");
static_assert(offsetof(RCSoundManagerBFL_SetBackLogFlag, IsEnable) == 0x000000, "Member 'RCSoundManagerBFL_SetBackLogFlag::IsEnable' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetDisableLipSyncCharaID
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManagerBFL_SetDisableLipSyncCharaID final
{
public:
	class FName                                   CharaID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetDisableLipSyncCharaID) == 0x000004, "Wrong alignment on RCSoundManagerBFL_SetDisableLipSyncCharaID");
static_assert(sizeof(RCSoundManagerBFL_SetDisableLipSyncCharaID) == 0x000008, "Wrong size on RCSoundManagerBFL_SetDisableLipSyncCharaID");
static_assert(offsetof(RCSoundManagerBFL_SetDisableLipSyncCharaID, CharaID) == 0x000000, "Member 'RCSoundManagerBFL_SetDisableLipSyncCharaID::CharaID' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetEnableLipSync
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManagerBFL_SetEnableLipSync final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetEnableLipSync) == 0x000001, "Wrong alignment on RCSoundManagerBFL_SetEnableLipSync");
static_assert(sizeof(RCSoundManagerBFL_SetEnableLipSync) == 0x000001, "Wrong size on RCSoundManagerBFL_SetEnableLipSync");
static_assert(offsetof(RCSoundManagerBFL_SetEnableLipSync, IsEnable) == 0x000000, "Member 'RCSoundManagerBFL_SetEnableLipSync::IsEnable' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetFadeSoundForPosition
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManagerBFL_SetFadeSoundForPosition final
{
public:
	ERCSoundType                                  soundType1;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex1;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 actor1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSoundType                                  soundType2;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex2;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 actor2;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetFadeSoundForPosition) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SetFadeSoundForPosition");
static_assert(sizeof(RCSoundManagerBFL_SetFadeSoundForPosition) == 0x000020, "Wrong size on RCSoundManagerBFL_SetFadeSoundForPosition");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForPosition, soundType1) == 0x000000, "Member 'RCSoundManagerBFL_SetFadeSoundForPosition::soundType1' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForPosition, soundIndex1) == 0x000004, "Member 'RCSoundManagerBFL_SetFadeSoundForPosition::soundIndex1' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForPosition, actor1) == 0x000008, "Member 'RCSoundManagerBFL_SetFadeSoundForPosition::actor1' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForPosition, soundType2) == 0x000010, "Member 'RCSoundManagerBFL_SetFadeSoundForPosition::soundType2' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForPosition, soundIndex2) == 0x000014, "Member 'RCSoundManagerBFL_SetFadeSoundForPosition::soundIndex2' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForPosition, actor2) == 0x000018, "Member 'RCSoundManagerBFL_SetFadeSoundForPosition::actor2' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetFadeSoundForSoundIDPosition
// 0x0040 (0x0040 - 0x0000)
struct RCSoundManagerBFL_SetFadeSoundForSoundIDPosition final
{
public:
	ERCSoundType                                  soundType1;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 paramSoundID1;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 actor1;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSoundType                                  soundType2;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 paramSoundID2;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 actor2;                                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetFadeSoundForSoundIDPosition) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SetFadeSoundForSoundIDPosition");
static_assert(sizeof(RCSoundManagerBFL_SetFadeSoundForSoundIDPosition) == 0x000040, "Wrong size on RCSoundManagerBFL_SetFadeSoundForSoundIDPosition");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForSoundIDPosition, soundType1) == 0x000000, "Member 'RCSoundManagerBFL_SetFadeSoundForSoundIDPosition::soundType1' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForSoundIDPosition, paramSoundID1) == 0x000008, "Member 'RCSoundManagerBFL_SetFadeSoundForSoundIDPosition::paramSoundID1' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForSoundIDPosition, actor1) == 0x000018, "Member 'RCSoundManagerBFL_SetFadeSoundForSoundIDPosition::actor1' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForSoundIDPosition, soundType2) == 0x000020, "Member 'RCSoundManagerBFL_SetFadeSoundForSoundIDPosition::soundType2' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForSoundIDPosition, paramSoundID2) == 0x000028, "Member 'RCSoundManagerBFL_SetFadeSoundForSoundIDPosition::paramSoundID2' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetFadeSoundForSoundIDPosition, actor2) == 0x000038, "Member 'RCSoundManagerBFL_SetFadeSoundForSoundIDPosition::actor2' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetLipSyncCharaArray
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManagerBFL_SetLipSyncCharaArray final
{
public:
	TArray<class ACharacter*>                     charaArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetLipSyncCharaArray) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SetLipSyncCharaArray");
static_assert(sizeof(RCSoundManagerBFL_SetLipSyncCharaArray) == 0x000010, "Wrong size on RCSoundManagerBFL_SetLipSyncCharaArray");
static_assert(offsetof(RCSoundManagerBFL_SetLipSyncCharaArray, charaArray) == 0x000000, "Member 'RCSoundManagerBFL_SetLipSyncCharaArray::charaArray' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetPlayAmatanVoice
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManagerBFL_SetPlayAmatanVoice final
{
public:
	class FName                                   VoiceID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetPlayAmatanVoice) == 0x000004, "Wrong alignment on RCSoundManagerBFL_SetPlayAmatanVoice");
static_assert(sizeof(RCSoundManagerBFL_SetPlayAmatanVoice) == 0x000008, "Wrong size on RCSoundManagerBFL_SetPlayAmatanVoice");
static_assert(offsetof(RCSoundManagerBFL_SetPlayAmatanVoice, VoiceID) == 0x000000, "Member 'RCSoundManagerBFL_SetPlayAmatanVoice::VoiceID' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetPlaySound
// 0x0028 (0x0028 - 0x0000)
struct RCSoundManagerBFL_SetPlaySound final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharaID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFadeIn;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_SetPlaySound) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SetPlaySound");
static_assert(sizeof(RCSoundManagerBFL_SetPlaySound) == 0x000028, "Wrong size on RCSoundManagerBFL_SetPlaySound");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySound, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_SetPlaySound::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySound, soundIndex) == 0x000004, "Member 'RCSoundManagerBFL_SetPlaySound::soundIndex' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySound, IsLoop) == 0x000008, "Member 'RCSoundManagerBFL_SetPlaySound::IsLoop' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySound, CharaID) == 0x000010, "Member 'RCSoundManagerBFL_SetPlaySound::CharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySound, isFadeIn) == 0x000020, "Member 'RCSoundManagerBFL_SetPlaySound::isFadeIn' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetPlaySoundForParamSoundID
// 0x0038 (0x0038 - 0x0000)
struct RCSoundManagerBFL_SetPlaySoundForParamSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharaID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFadeIn;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_SetPlaySoundForParamSoundID) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SetPlaySoundForParamSoundID");
static_assert(sizeof(RCSoundManagerBFL_SetPlaySoundForParamSoundID) == 0x000038, "Wrong size on RCSoundManagerBFL_SetPlaySoundForParamSoundID");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundID, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundID, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundID::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundID, IsLoop) == 0x000018, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundID::IsLoop' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundID, CharaID) == 0x000020, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundID::CharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundID, isFadeIn) == 0x000030, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundID::isFadeIn' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetPlaySoundForParamSoundIDVolume
// 0x0038 (0x0038 - 0x0000)
struct RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharaID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFadeIn;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         volumeRate;                                        // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume");
static_assert(sizeof(RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume) == 0x000038, "Wrong size on RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume, IsLoop) == 0x000018, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume::IsLoop' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume, CharaID) == 0x000020, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume::CharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume, isFadeIn) == 0x000030, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume::isFadeIn' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume, volumeRate) == 0x000034, "Member 'RCSoundManagerBFL_SetPlaySoundForParamSoundIDVolume::volumeRate' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetPlaySoundForVoiceID
// 0x0028 (0x0028 - 0x0000)
struct RCSoundManagerBFL_SetPlaySoundForVoiceID final
{
public:
	class FName                                   VoiceID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   voiceCharaID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacialName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   useMorph;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowfacialFlowLiquid;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         volumeRate;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetPlaySoundForVoiceID) == 0x000004, "Wrong alignment on RCSoundManagerBFL_SetPlaySoundForVoiceID");
static_assert(sizeof(RCSoundManagerBFL_SetPlaySoundForVoiceID) == 0x000028, "Wrong size on RCSoundManagerBFL_SetPlaySoundForVoiceID");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForVoiceID, VoiceID) == 0x000000, "Member 'RCSoundManagerBFL_SetPlaySoundForVoiceID::VoiceID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForVoiceID, voiceCharaID) == 0x000008, "Member 'RCSoundManagerBFL_SetPlaySoundForVoiceID::voiceCharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForVoiceID, FacialName) == 0x000010, "Member 'RCSoundManagerBFL_SetPlaySoundForVoiceID::FacialName' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForVoiceID, useMorph) == 0x000018, "Member 'RCSoundManagerBFL_SetPlaySoundForVoiceID::useMorph' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForVoiceID, bAllowfacialFlowLiquid) == 0x000020, "Member 'RCSoundManagerBFL_SetPlaySoundForVoiceID::bAllowfacialFlowLiquid' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SetPlaySoundForVoiceID, volumeRate) == 0x000024, "Member 'RCSoundManagerBFL_SetPlaySoundForVoiceID::volumeRate' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetRunningSQC
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManagerBFL_SetRunningSQC final
{
public:
	bool                                          isFlag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetRunningSQC) == 0x000001, "Wrong alignment on RCSoundManagerBFL_SetRunningSQC");
static_assert(sizeof(RCSoundManagerBFL_SetRunningSQC) == 0x000001, "Wrong size on RCSoundManagerBFL_SetRunningSQC");
static_assert(offsetof(RCSoundManagerBFL_SetRunningSQC, isFlag) == 0x000000, "Member 'RCSoundManagerBFL_SetRunningSQC::isFlag' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SetSQCTime
// 0x0004 (0x0004 - 0x0000)
struct RCSoundManagerBFL_SetSQCTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SetSQCTime) == 0x000004, "Wrong alignment on RCSoundManagerBFL_SetSQCTime");
static_assert(sizeof(RCSoundManagerBFL_SetSQCTime) == 0x000004, "Wrong size on RCSoundManagerBFL_SetSQCTime");
static_assert(offsetof(RCSoundManagerBFL_SetSQCTime, Time) == 0x000000, "Member 'RCSoundManagerBFL_SetSQCTime::Time' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SpawnSound
// 0x0040 (0x0040 - 0x0000)
struct RCSoundManagerBFL_SpawnSound final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharaID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMin;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      SoundAttenuation;                                  // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SpawnSound) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SpawnSound");
static_assert(sizeof(RCSoundManagerBFL_SpawnSound) == 0x000040, "Wrong size on RCSoundManagerBFL_SpawnSound");
static_assert(offsetof(RCSoundManagerBFL_SpawnSound, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_SpawnSound::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSound, soundIndex) == 0x000004, "Member 'RCSoundManagerBFL_SpawnSound::soundIndex' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSound, CharaID) == 0x000008, "Member 'RCSoundManagerBFL_SpawnSound::CharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSound, Location) == 0x000018, "Member 'RCSoundManagerBFL_SpawnSound::Location' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSound, RangeMin) == 0x000024, "Member 'RCSoundManagerBFL_SpawnSound::RangeMin' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSound, RangeMax) == 0x000028, "Member 'RCSoundManagerBFL_SpawnSound::RangeMax' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSound, IsLoop) == 0x00002C, "Member 'RCSoundManagerBFL_SpawnSound::IsLoop' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSound, Actor) == 0x000030, "Member 'RCSoundManagerBFL_SpawnSound::Actor' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSound, SoundAttenuation) == 0x000038, "Member 'RCSoundManagerBFL_SpawnSound::SoundAttenuation' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SpawnSoundForMovingActor
// 0x0030 (0x0030 - 0x0000)
struct RCSoundManagerBFL_SpawnSoundForMovingActor final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMin;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharaID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SpawnSoundForMovingActor) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SpawnSoundForMovingActor");
static_assert(sizeof(RCSoundManagerBFL_SpawnSoundForMovingActor) == 0x000030, "Wrong size on RCSoundManagerBFL_SpawnSoundForMovingActor");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForMovingActor, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_SpawnSoundForMovingActor::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForMovingActor, soundIndex) == 0x000004, "Member 'RCSoundManagerBFL_SpawnSoundForMovingActor::soundIndex' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForMovingActor, Actor) == 0x000008, "Member 'RCSoundManagerBFL_SpawnSoundForMovingActor::Actor' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForMovingActor, RangeMin) == 0x000010, "Member 'RCSoundManagerBFL_SpawnSoundForMovingActor::RangeMin' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForMovingActor, RangeMax) == 0x000014, "Member 'RCSoundManagerBFL_SpawnSoundForMovingActor::RangeMax' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForMovingActor, IsLoop) == 0x000018, "Member 'RCSoundManagerBFL_SpawnSoundForMovingActor::IsLoop' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForMovingActor, CharaID) == 0x000020, "Member 'RCSoundManagerBFL_SpawnSoundForMovingActor::CharaID' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SpawnSoundForParamSoundID
// 0x0050 (0x0050 - 0x0000)
struct RCSoundManagerBFL_SpawnSoundForParamSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharaID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMin;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      SoundAttenuation;                                  // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SpawnSoundForParamSoundID) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SpawnSoundForParamSoundID");
static_assert(sizeof(RCSoundManagerBFL_SpawnSoundForParamSoundID) == 0x000050, "Wrong size on RCSoundManagerBFL_SpawnSoundForParamSoundID");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForParamSoundID, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_SpawnSoundForParamSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForParamSoundID, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_SpawnSoundForParamSoundID::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForParamSoundID, CharaID) == 0x000018, "Member 'RCSoundManagerBFL_SpawnSoundForParamSoundID::CharaID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForParamSoundID, Location) == 0x000028, "Member 'RCSoundManagerBFL_SpawnSoundForParamSoundID::Location' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForParamSoundID, RangeMin) == 0x000034, "Member 'RCSoundManagerBFL_SpawnSoundForParamSoundID::RangeMin' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForParamSoundID, RangeMax) == 0x000038, "Member 'RCSoundManagerBFL_SpawnSoundForParamSoundID::RangeMax' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForParamSoundID, IsLoop) == 0x00003C, "Member 'RCSoundManagerBFL_SpawnSoundForParamSoundID::IsLoop' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForParamSoundID, Actor) == 0x000040, "Member 'RCSoundManagerBFL_SpawnSoundForParamSoundID::Actor' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForParamSoundID, SoundAttenuation) == 0x000048, "Member 'RCSoundManagerBFL_SpawnSoundForParamSoundID::SoundAttenuation' has a wrong offset!");

// Function RC.RCSoundManagerBFL.SpawnSoundForSoundIDMovingActor
// 0x0040 (0x0040 - 0x0000)
struct RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMin;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharaID;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor) == 0x000008, "Wrong alignment on RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor");
static_assert(sizeof(RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor) == 0x000040, "Wrong size on RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor, Actor) == 0x000018, "Member 'RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor::Actor' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor, RangeMin) == 0x000020, "Member 'RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor::RangeMin' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor, RangeMax) == 0x000024, "Member 'RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor::RangeMax' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor, IsLoop) == 0x000028, "Member 'RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor::IsLoop' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor, CharaID) == 0x000030, "Member 'RCSoundManagerBFL_SpawnSoundForSoundIDMovingActor::CharaID' has a wrong offset!");

// Function RC.RCSoundManagerBFL.Stop
// 0x0001 (0x0001 - 0x0000)
struct RCSoundManagerBFL_Stop final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_Stop) == 0x000001, "Wrong alignment on RCSoundManagerBFL_Stop");
static_assert(sizeof(RCSoundManagerBFL_Stop) == 0x000001, "Wrong size on RCSoundManagerBFL_Stop");
static_assert(offsetof(RCSoundManagerBFL_Stop, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_Stop::SoundType' has a wrong offset!");

// Function RC.RCSoundManagerBFL.StopSingle
// 0x0010 (0x0010 - 0x0000)
struct RCSoundManagerBFL_StopSingle final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_StopSingle) == 0x000008, "Wrong alignment on RCSoundManagerBFL_StopSingle");
static_assert(sizeof(RCSoundManagerBFL_StopSingle) == 0x000010, "Wrong size on RCSoundManagerBFL_StopSingle");
static_assert(offsetof(RCSoundManagerBFL_StopSingle, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_StopSingle::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_StopSingle, soundIndex) == 0x000004, "Member 'RCSoundManagerBFL_StopSingle::soundIndex' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_StopSingle, Actor) == 0x000008, "Member 'RCSoundManagerBFL_StopSingle::Actor' has a wrong offset!");

// Function RC.RCSoundManagerBFL.StopSingleForParamSoundID
// 0x0028 (0x0028 - 0x0000)
struct RCSoundManagerBFL_StopSingleForParamSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          is3DSound;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_StopSingleForParamSoundID) == 0x000008, "Wrong alignment on RCSoundManagerBFL_StopSingleForParamSoundID");
static_assert(sizeof(RCSoundManagerBFL_StopSingleForParamSoundID) == 0x000028, "Wrong size on RCSoundManagerBFL_StopSingleForParamSoundID");
static_assert(offsetof(RCSoundManagerBFL_StopSingleForParamSoundID, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_StopSingleForParamSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_StopSingleForParamSoundID, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_StopSingleForParamSoundID::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_StopSingleForParamSoundID, Actor) == 0x000018, "Member 'RCSoundManagerBFL_StopSingleForParamSoundID::Actor' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_StopSingleForParamSoundID, is3DSound) == 0x000020, "Member 'RCSoundManagerBFL_StopSingleForParamSoundID::is3DSound' has a wrong offset!");

// Function RC.RCSoundManagerBFL.UpdataSingleVolume
// 0x000C (0x000C - 0x0000)
struct RCSoundManagerBFL_UpdataSingleVolume final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         soundIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         volumeRate;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_UpdataSingleVolume) == 0x000004, "Wrong alignment on RCSoundManagerBFL_UpdataSingleVolume");
static_assert(sizeof(RCSoundManagerBFL_UpdataSingleVolume) == 0x00000C, "Wrong size on RCSoundManagerBFL_UpdataSingleVolume");
static_assert(offsetof(RCSoundManagerBFL_UpdataSingleVolume, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_UpdataSingleVolume::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_UpdataSingleVolume, soundIndex) == 0x000004, "Member 'RCSoundManagerBFL_UpdataSingleVolume::soundIndex' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_UpdataSingleVolume, volumeRate) == 0x000008, "Member 'RCSoundManagerBFL_UpdataSingleVolume::volumeRate' has a wrong offset!");

// Function RC.RCSoundManagerBFL.UpdataSingleVolumeForParamSoundID
// 0x0020 (0x0020 - 0x0000)
struct RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         volumeRate;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID) == 0x000008, "Wrong alignment on RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID");
static_assert(sizeof(RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID) == 0x000020, "Wrong size on RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID");
static_assert(offsetof(RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID, ParamSoundID) == 0x000008, "Member 'RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID::ParamSoundID' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID, volumeRate) == 0x000018, "Member 'RCSoundManagerBFL_UpdataSingleVolumeForParamSoundID::volumeRate' has a wrong offset!");

// Function RC.RCSoundManagerBFL.UpdataVolume
// 0x0008 (0x0008 - 0x0000)
struct RCSoundManagerBFL_UpdataVolume final
{
public:
	ERCSoundType                                  SoundType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSoundManagerBFL_UpdataVolume) == 0x000004, "Wrong alignment on RCSoundManagerBFL_UpdataVolume");
static_assert(sizeof(RCSoundManagerBFL_UpdataVolume) == 0x000008, "Wrong size on RCSoundManagerBFL_UpdataVolume");
static_assert(offsetof(RCSoundManagerBFL_UpdataVolume, SoundType) == 0x000000, "Member 'RCSoundManagerBFL_UpdataVolume::SoundType' has a wrong offset!");
static_assert(offsetof(RCSoundManagerBFL_UpdataVolume, Volume) == 0x000004, "Member 'RCSoundManagerBFL_UpdataVolume::Volume' has a wrong offset!");

// Function RC.RCSplineActor.GetSplineDistanceMax
// 0x0004 (0x0004 - 0x0000)
struct RCSplineActor_GetSplineDistanceMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSplineActor_GetSplineDistanceMax) == 0x000004, "Wrong alignment on RCSplineActor_GetSplineDistanceMax");
static_assert(sizeof(RCSplineActor_GetSplineDistanceMax) == 0x000004, "Wrong size on RCSplineActor_GetSplineDistanceMax");
static_assert(offsetof(RCSplineActor_GetSplineDistanceMax, ReturnValue) == 0x000000, "Member 'RCSplineActor_GetSplineDistanceMax::ReturnValue' has a wrong offset!");

// Function RC.RCSplineActor.GetSplineLocation
// 0x0018 (0x0018 - 0x0000)
struct RCSplineActor_GetSplineLocation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOutDistance;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeed;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSplineActor_GetSplineLocation) == 0x000004, "Wrong alignment on RCSplineActor_GetSplineLocation");
static_assert(sizeof(RCSplineActor_GetSplineLocation) == 0x000018, "Wrong size on RCSplineActor_GetSplineLocation");
static_assert(offsetof(RCSplineActor_GetSplineLocation, OutLocation) == 0x000000, "Member 'RCSplineActor_GetSplineLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineLocation, InOutDistance) == 0x00000C, "Member 'RCSplineActor_GetSplineLocation::InOutDistance' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineLocation, InSpeed) == 0x000010, "Member 'RCSplineActor_GetSplineLocation::InSpeed' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineLocation, bInLoop) == 0x000014, "Member 'RCSplineActor_GetSplineLocation::bInLoop' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineLocation, ReturnValue) == 0x000015, "Member 'RCSplineActor_GetSplineLocation::ReturnValue' has a wrong offset!");

// Function RC.RCSplineActor.GetSplineLocationAndRotate
// 0x0024 (0x0024 - 0x0000)
struct RCSplineActor_GetSplineLocationAndRotate final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotate;                                         // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InOutDistance;                                     // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeed;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSplineActor_GetSplineLocationAndRotate) == 0x000004, "Wrong alignment on RCSplineActor_GetSplineLocationAndRotate");
static_assert(sizeof(RCSplineActor_GetSplineLocationAndRotate) == 0x000024, "Wrong size on RCSplineActor_GetSplineLocationAndRotate");
static_assert(offsetof(RCSplineActor_GetSplineLocationAndRotate, OutLocation) == 0x000000, "Member 'RCSplineActor_GetSplineLocationAndRotate::OutLocation' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineLocationAndRotate, OutRotate) == 0x00000C, "Member 'RCSplineActor_GetSplineLocationAndRotate::OutRotate' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineLocationAndRotate, InOutDistance) == 0x000018, "Member 'RCSplineActor_GetSplineLocationAndRotate::InOutDistance' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineLocationAndRotate, InSpeed) == 0x00001C, "Member 'RCSplineActor_GetSplineLocationAndRotate::InSpeed' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineLocationAndRotate, bInLoop) == 0x000020, "Member 'RCSplineActor_GetSplineLocationAndRotate::bInLoop' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineLocationAndRotate, ReturnValue) == 0x000021, "Member 'RCSplineActor_GetSplineLocationAndRotate::ReturnValue' has a wrong offset!");

// Function RC.RCSplineActor.GetSplineTransform
// 0x0040 (0x0040 - 0x0000)
struct RCSplineActor_GetSplineTransform final
{
public:
	struct FTransform                             OutTransform;                                      // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InOutDistance;                                     // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeed;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCSplineActor_GetSplineTransform) == 0x000010, "Wrong alignment on RCSplineActor_GetSplineTransform");
static_assert(sizeof(RCSplineActor_GetSplineTransform) == 0x000040, "Wrong size on RCSplineActor_GetSplineTransform");
static_assert(offsetof(RCSplineActor_GetSplineTransform, OutTransform) == 0x000000, "Member 'RCSplineActor_GetSplineTransform::OutTransform' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineTransform, InOutDistance) == 0x000030, "Member 'RCSplineActor_GetSplineTransform::InOutDistance' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineTransform, InSpeed) == 0x000034, "Member 'RCSplineActor_GetSplineTransform::InSpeed' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineTransform, bInLoop) == 0x000038, "Member 'RCSplineActor_GetSplineTransform::bInLoop' has a wrong offset!");
static_assert(offsetof(RCSplineActor_GetSplineTransform, ReturnValue) == 0x000039, "Member 'RCSplineActor_GetSplineTransform::ReturnValue' has a wrong offset!");

// Function RC.RCSubStoryStartupAutoSave.SetText
// 0x0008 (0x0008 - 0x0000)
struct RCSubStoryStartupAutoSave_SetText final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCSubStoryStartupAutoSave_SetText) == 0x000004, "Wrong alignment on RCSubStoryStartupAutoSave_SetText");
static_assert(sizeof(RCSubStoryStartupAutoSave_SetText) == 0x000008, "Wrong size on RCSubStoryStartupAutoSave_SetText");
static_assert(offsetof(RCSubStoryStartupAutoSave_SetText, InTextID) == 0x000000, "Member 'RCSubStoryStartupAutoSave_SetText::InTextID' has a wrong offset!");

// Function RC.RCTextBFL.GetText
// 0x0018 (0x0018 - 0x0000)
struct RCTextBFL_GetText final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTextBFL_GetText) == 0x000008, "Wrong alignment on RCTextBFL_GetText");
static_assert(sizeof(RCTextBFL_GetText) == 0x000018, "Wrong size on RCTextBFL_GetText");
static_assert(offsetof(RCTextBFL_GetText, InTextID) == 0x000000, "Member 'RCTextBFL_GetText::InTextID' has a wrong offset!");
static_assert(offsetof(RCTextBFL_GetText, ReturnValue) == 0x000008, "Member 'RCTextBFL_GetText::ReturnValue' has a wrong offset!");

// Function RC.RCTextBFL.GetTextLanguage
// 0x0001 (0x0001 - 0x0000)
struct RCTextBFL_GetTextLanguage final
{
public:
	ERCTextLanguage                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTextBFL_GetTextLanguage) == 0x000001, "Wrong alignment on RCTextBFL_GetTextLanguage");
static_assert(sizeof(RCTextBFL_GetTextLanguage) == 0x000001, "Wrong size on RCTextBFL_GetTextLanguage");
static_assert(offsetof(RCTextBFL_GetTextLanguage, ReturnValue) == 0x000000, "Member 'RCTextBFL_GetTextLanguage::ReturnValue' has a wrong offset!");

// Function RC.RCTextBFL.IsText
// 0x000C (0x000C - 0x0000)
struct RCTextBFL_IsText final
{
public:
	class FName                                   InTextID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCTextBFL_IsText) == 0x000004, "Wrong alignment on RCTextBFL_IsText");
static_assert(sizeof(RCTextBFL_IsText) == 0x00000C, "Wrong size on RCTextBFL_IsText");
static_assert(offsetof(RCTextBFL_IsText, InTextID) == 0x000000, "Member 'RCTextBFL_IsText::InTextID' has a wrong offset!");
static_assert(offsetof(RCTextBFL_IsText, ReturnValue) == 0x000008, "Member 'RCTextBFL_IsText::ReturnValue' has a wrong offset!");

// Function RC.RCTextBFL.SetTextLanguage
// 0x0001 (0x0001 - 0x0000)
struct RCTextBFL_SetTextLanguage final
{
public:
	ERCTextLanguage                               Language;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTextBFL_SetTextLanguage) == 0x000001, "Wrong alignment on RCTextBFL_SetTextLanguage");
static_assert(sizeof(RCTextBFL_SetTextLanguage) == 0x000001, "Wrong size on RCTextBFL_SetTextLanguage");
static_assert(offsetof(RCTextBFL_SetTextLanguage, Language) == 0x000000, "Member 'RCTextBFL_SetTextLanguage::Language' has a wrong offset!");

// Function RC.RCTimeBFL.GetGameSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCTimeBFL_GetGameSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTimeBFL_GetGameSpeed) == 0x000004, "Wrong alignment on RCTimeBFL_GetGameSpeed");
static_assert(sizeof(RCTimeBFL_GetGameSpeed) == 0x000004, "Wrong size on RCTimeBFL_GetGameSpeed");
static_assert(offsetof(RCTimeBFL_GetGameSpeed, ReturnValue) == 0x000000, "Member 'RCTimeBFL_GetGameSpeed::ReturnValue' has a wrong offset!");

// Function RC.RCTimeBFL.GetNowSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCTimeBFL_GetNowSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTimeBFL_GetNowSpeed) == 0x000004, "Wrong alignment on RCTimeBFL_GetNowSpeed");
static_assert(sizeof(RCTimeBFL_GetNowSpeed) == 0x000004, "Wrong size on RCTimeBFL_GetNowSpeed");
static_assert(offsetof(RCTimeBFL_GetNowSpeed, ReturnValue) == 0x000000, "Member 'RCTimeBFL_GetNowSpeed::ReturnValue' has a wrong offset!");

// Function RC.RCTimeBFL.GetSkipSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCTimeBFL_GetSkipSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTimeBFL_GetSkipSpeed) == 0x000004, "Wrong alignment on RCTimeBFL_GetSkipSpeed");
static_assert(sizeof(RCTimeBFL_GetSkipSpeed) == 0x000004, "Wrong size on RCTimeBFL_GetSkipSpeed");
static_assert(offsetof(RCTimeBFL_GetSkipSpeed, ReturnValue) == 0x000000, "Member 'RCTimeBFL_GetSkipSpeed::ReturnValue' has a wrong offset!");

// Function RC.RCTimeBFL.IsMenuPause
// 0x0001 (0x0001 - 0x0000)
struct RCTimeBFL_IsMenuPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTimeBFL_IsMenuPause) == 0x000001, "Wrong alignment on RCTimeBFL_IsMenuPause");
static_assert(sizeof(RCTimeBFL_IsMenuPause) == 0x000001, "Wrong size on RCTimeBFL_IsMenuPause");
static_assert(offsetof(RCTimeBFL_IsMenuPause, ReturnValue) == 0x000000, "Member 'RCTimeBFL_IsMenuPause::ReturnValue' has a wrong offset!");

// Function RC.RCTimeBFL.SetGameSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCTimeBFL_SetGameSpeed final
{
public:
	float                                         InSpeed;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTimeBFL_SetGameSpeed) == 0x000004, "Wrong alignment on RCTimeBFL_SetGameSpeed");
static_assert(sizeof(RCTimeBFL_SetGameSpeed) == 0x000004, "Wrong size on RCTimeBFL_SetGameSpeed");
static_assert(offsetof(RCTimeBFL_SetGameSpeed, InSpeed) == 0x000000, "Member 'RCTimeBFL_SetGameSpeed::InSpeed' has a wrong offset!");

// Function RC.RCTimeBFL.SetMenuPause
// 0x0001 (0x0001 - 0x0000)
struct RCTimeBFL_SetMenuPause final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTimeBFL_SetMenuPause) == 0x000001, "Wrong alignment on RCTimeBFL_SetMenuPause");
static_assert(sizeof(RCTimeBFL_SetMenuPause) == 0x000001, "Wrong size on RCTimeBFL_SetMenuPause");
static_assert(offsetof(RCTimeBFL_SetMenuPause, bFlag) == 0x000000, "Member 'RCTimeBFL_SetMenuPause::bFlag' has a wrong offset!");

// Function RC.RCTimeBFL.SetSkipSpeed
// 0x0004 (0x0004 - 0x0000)
struct RCTimeBFL_SetSkipSpeed final
{
public:
	float                                         InSpeed;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTimeBFL_SetSkipSpeed) == 0x000004, "Wrong alignment on RCTimeBFL_SetSkipSpeed");
static_assert(sizeof(RCTimeBFL_SetSkipSpeed) == 0x000004, "Wrong size on RCTimeBFL_SetSkipSpeed");
static_assert(offsetof(RCTimeBFL_SetSkipSpeed, InSpeed) == 0x000000, "Member 'RCTimeBFL_SetSkipSpeed::InSpeed' has a wrong offset!");

// Function RC.RCTitleChapterSelectWindow.ChapterSelectWindowSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCTitleChapterSelectWindow_ChapterSelectWindowSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleChapterSelectWindow_ChapterSelectWindowSelectNavigation) == 0x000008, "Wrong alignment on RCTitleChapterSelectWindow_ChapterSelectWindowSelectNavigation");
static_assert(sizeof(RCTitleChapterSelectWindow_ChapterSelectWindowSelectNavigation) == 0x000010, "Wrong size on RCTitleChapterSelectWindow_ChapterSelectWindowSelectNavigation");
static_assert(offsetof(RCTitleChapterSelectWindow_ChapterSelectWindowSelectNavigation, InNavigation) == 0x000000, "Member 'RCTitleChapterSelectWindow_ChapterSelectWindowSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTitleChapterSelectWindow_ChapterSelectWindowSelectNavigation, ReturnValue) == 0x000008, "Member 'RCTitleChapterSelectWindow_ChapterSelectWindowSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCTitleGalleryBase.Open
// 0x0001 (0x0001 - 0x0000)
struct RCTitleGalleryBase_Open final
{
public:
	bool                                          bBackFromGalleryMovie;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleGalleryBase_Open) == 0x000001, "Wrong alignment on RCTitleGalleryBase_Open");
static_assert(sizeof(RCTitleGalleryBase_Open) == 0x000001, "Wrong size on RCTitleGalleryBase_Open");
static_assert(offsetof(RCTitleGalleryBase_Open, bBackFromGalleryMovie) == 0x000000, "Member 'RCTitleGalleryBase_Open::bBackFromGalleryMovie' has a wrong offset!");

// Function RC.RCTitleHUDBFL.GetGalleryMovieSoundTable
// 0x0008 (0x0008 - 0x0000)
struct RCTitleHUDBFL_GetGalleryMovieSoundTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUDBFL_GetGalleryMovieSoundTable) == 0x000008, "Wrong alignment on RCTitleHUDBFL_GetGalleryMovieSoundTable");
static_assert(sizeof(RCTitleHUDBFL_GetGalleryMovieSoundTable) == 0x000008, "Wrong size on RCTitleHUDBFL_GetGalleryMovieSoundTable");
static_assert(offsetof(RCTitleHUDBFL_GetGalleryMovieSoundTable, ReturnValue) == 0x000000, "Member 'RCTitleHUDBFL_GetGalleryMovieSoundTable::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUDBFL.GetGalleryPlayMovieID
// 0x0008 (0x0008 - 0x0000)
struct RCTitleHUDBFL_GetGalleryPlayMovieID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUDBFL_GetGalleryPlayMovieID) == 0x000004, "Wrong alignment on RCTitleHUDBFL_GetGalleryPlayMovieID");
static_assert(sizeof(RCTitleHUDBFL_GetGalleryPlayMovieID) == 0x000008, "Wrong size on RCTitleHUDBFL_GetGalleryPlayMovieID");
static_assert(offsetof(RCTitleHUDBFL_GetGalleryPlayMovieID, ReturnValue) == 0x000000, "Member 'RCTitleHUDBFL_GetGalleryPlayMovieID::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUDBFL.GetTitleGalleryMovieEvent
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUDBFL_GetTitleGalleryMovieEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUDBFL_GetTitleGalleryMovieEvent) == 0x000001, "Wrong alignment on RCTitleHUDBFL_GetTitleGalleryMovieEvent");
static_assert(sizeof(RCTitleHUDBFL_GetTitleGalleryMovieEvent) == 0x000001, "Wrong size on RCTitleHUDBFL_GetTitleGalleryMovieEvent");
static_assert(offsetof(RCTitleHUDBFL_GetTitleGalleryMovieEvent, ReturnValue) == 0x000000, "Member 'RCTitleHUDBFL_GetTitleGalleryMovieEvent::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUDBFL.GetTitleHUD
// 0x0008 (0x0008 - 0x0000)
struct RCTitleHUDBFL_GetTitleHUD final
{
public:
	class ARCTitleHUD*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUDBFL_GetTitleHUD) == 0x000008, "Wrong alignment on RCTitleHUDBFL_GetTitleHUD");
static_assert(sizeof(RCTitleHUDBFL_GetTitleHUD) == 0x000008, "Wrong size on RCTitleHUDBFL_GetTitleHUD");
static_assert(offsetof(RCTitleHUDBFL_GetTitleHUD, ReturnValue) == 0x000000, "Member 'RCTitleHUDBFL_GetTitleHUD::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUDBFL.IsStartGalleryMovie
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUDBFL_IsStartGalleryMovie final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUDBFL_IsStartGalleryMovie) == 0x000001, "Wrong alignment on RCTitleHUDBFL_IsStartGalleryMovie");
static_assert(sizeof(RCTitleHUDBFL_IsStartGalleryMovie) == 0x000001, "Wrong size on RCTitleHUDBFL_IsStartGalleryMovie");
static_assert(offsetof(RCTitleHUDBFL_IsStartGalleryMovie, ReturnValue) == 0x000000, "Member 'RCTitleHUDBFL_IsStartGalleryMovie::ReturnValue' has a wrong offset!");

// Function RC.RCTitleHUDBFL.SetTitleGalleryMovieEvent
// 0x0001 (0x0001 - 0x0000)
struct RCTitleHUDBFL_SetTitleGalleryMovieEvent final
{
public:
	bool                                          bInMovieEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleHUDBFL_SetTitleGalleryMovieEvent) == 0x000001, "Wrong alignment on RCTitleHUDBFL_SetTitleGalleryMovieEvent");
static_assert(sizeof(RCTitleHUDBFL_SetTitleGalleryMovieEvent) == 0x000001, "Wrong size on RCTitleHUDBFL_SetTitleGalleryMovieEvent");
static_assert(offsetof(RCTitleHUDBFL_SetTitleGalleryMovieEvent, bInMovieEvent) == 0x000000, "Member 'RCTitleHUDBFL_SetTitleGalleryMovieEvent::bInMovieEvent' has a wrong offset!");

// Function RC.RCTitleMenu.CancelWrap
// 0x0001 (0x0001 - 0x0000)
struct RCTitleMenu_CancelWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleMenu_CancelWrap) == 0x000001, "Wrong alignment on RCTitleMenu_CancelWrap");
static_assert(sizeof(RCTitleMenu_CancelWrap) == 0x000001, "Wrong size on RCTitleMenu_CancelWrap");
static_assert(offsetof(RCTitleMenu_CancelWrap, InKeyType) == 0x000000, "Member 'RCTitleMenu_CancelWrap::InKeyType' has a wrong offset!");

// Function RC.RCTitleMenu.DecideWrap
// 0x0001 (0x0001 - 0x0000)
struct RCTitleMenu_DecideWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleMenu_DecideWrap) == 0x000001, "Wrong alignment on RCTitleMenu_DecideWrap");
static_assert(sizeof(RCTitleMenu_DecideWrap) == 0x000001, "Wrong size on RCTitleMenu_DecideWrap");
static_assert(offsetof(RCTitleMenu_DecideWrap, InKeyType) == 0x000000, "Member 'RCTitleMenu_DecideWrap::InKeyType' has a wrong offset!");

// Function RC.RCTitleSubStory.CancelWrap
// 0x0001 (0x0001 - 0x0000)
struct RCTitleSubStory_CancelWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleSubStory_CancelWrap) == 0x000001, "Wrong alignment on RCTitleSubStory_CancelWrap");
static_assert(sizeof(RCTitleSubStory_CancelWrap) == 0x000001, "Wrong size on RCTitleSubStory_CancelWrap");
static_assert(offsetof(RCTitleSubStory_CancelWrap, InKeyType) == 0x000000, "Member 'RCTitleSubStory_CancelWrap::InKeyType' has a wrong offset!");

// Function RC.RCTitleSubStory.DecideWrap
// 0x0001 (0x0001 - 0x0000)
struct RCTitleSubStory_DecideWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleSubStory_DecideWrap) == 0x000001, "Wrong alignment on RCTitleSubStory_DecideWrap");
static_assert(sizeof(RCTitleSubStory_DecideWrap) == 0x000001, "Wrong size on RCTitleSubStory_DecideWrap");
static_assert(offsetof(RCTitleSubStory_DecideWrap, InKeyType) == 0x000000, "Member 'RCTitleSubStory_DecideWrap::InKeyType' has a wrong offset!");

// Function RC.RCTitleSubStoryWindow.SubStoryWindowSelectNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCTitleSubStoryWindow_SubStoryWindowSelectNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTitleSubStoryWindow_SubStoryWindowSelectNavigation) == 0x000008, "Wrong alignment on RCTitleSubStoryWindow_SubStoryWindowSelectNavigation");
static_assert(sizeof(RCTitleSubStoryWindow_SubStoryWindowSelectNavigation) == 0x000010, "Wrong size on RCTitleSubStoryWindow_SubStoryWindowSelectNavigation");
static_assert(offsetof(RCTitleSubStoryWindow_SubStoryWindowSelectNavigation, InNavigation) == 0x000000, "Member 'RCTitleSubStoryWindow_SubStoryWindowSelectNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCTitleSubStoryWindow_SubStoryWindowSelectNavigation, ReturnValue) == 0x000008, "Member 'RCTitleSubStoryWindow_SubStoryWindowSelectNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCUiBackLog.OnButtonGuideCloseClick
// 0x0001 (0x0001 - 0x0000)
struct RCUiBackLog_OnButtonGuideCloseClick final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiBackLog_OnButtonGuideCloseClick) == 0x000001, "Wrong alignment on RCUiBackLog_OnButtonGuideCloseClick");
static_assert(sizeof(RCUiBackLog_OnButtonGuideCloseClick) == 0x000001, "Wrong size on RCUiBackLog_OnButtonGuideCloseClick");
static_assert(offsetof(RCUiBackLog_OnButtonGuideCloseClick, KeyType) == 0x000000, "Member 'RCUiBackLog_OnButtonGuideCloseClick::KeyType' has a wrong offset!");

// Function RC.RCUiBackLog.OnButtonGuidePlayVoiceClick
// 0x0001 (0x0001 - 0x0000)
struct RCUiBackLog_OnButtonGuidePlayVoiceClick final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiBackLog_OnButtonGuidePlayVoiceClick) == 0x000001, "Wrong alignment on RCUiBackLog_OnButtonGuidePlayVoiceClick");
static_assert(sizeof(RCUiBackLog_OnButtonGuidePlayVoiceClick) == 0x000001, "Wrong size on RCUiBackLog_OnButtonGuidePlayVoiceClick");
static_assert(offsetof(RCUiBackLog_OnButtonGuidePlayVoiceClick, KeyType) == 0x000000, "Member 'RCUiBackLog_OnButtonGuidePlayVoiceClick::KeyType' has a wrong offset!");

// Function RC.RCUiCutIn.SetData
// 0x0008 (0x0008 - 0x0000)
struct RCUiCutIn_SetData final
{
public:
	class FName                                   InCutInImage;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiCutIn_SetData) == 0x000004, "Wrong alignment on RCUiCutIn_SetData");
static_assert(sizeof(RCUiCutIn_SetData) == 0x000008, "Wrong size on RCUiCutIn_SetData");
static_assert(offsetof(RCUiCutIn_SetData, InCutInImage) == 0x000000, "Member 'RCUiCutIn_SetData::InCutInImage' has a wrong offset!");

// Function RC.RCUiFaderHUDBFL.IsAllWidgetsHidden
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUDBFL_IsAllWidgetsHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUDBFL_IsAllWidgetsHidden) == 0x000001, "Wrong alignment on RCUiFaderHUDBFL_IsAllWidgetsHidden");
static_assert(sizeof(RCUiFaderHUDBFL_IsAllWidgetsHidden) == 0x000001, "Wrong size on RCUiFaderHUDBFL_IsAllWidgetsHidden");
static_assert(offsetof(RCUiFaderHUDBFL_IsAllWidgetsHidden, ReturnValue) == 0x000000, "Member 'RCUiFaderHUDBFL_IsAllWidgetsHidden::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUDBFL.IsAllWidgetsHiddenEnable
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUDBFL_IsAllWidgetsHiddenEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUDBFL_IsAllWidgetsHiddenEnable) == 0x000001, "Wrong alignment on RCUiFaderHUDBFL_IsAllWidgetsHiddenEnable");
static_assert(sizeof(RCUiFaderHUDBFL_IsAllWidgetsHiddenEnable) == 0x000001, "Wrong size on RCUiFaderHUDBFL_IsAllWidgetsHiddenEnable");
static_assert(offsetof(RCUiFaderHUDBFL_IsAllWidgetsHiddenEnable, ReturnValue) == 0x000000, "Member 'RCUiFaderHUDBFL_IsAllWidgetsHiddenEnable::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUDBFL.SetAllWidgetsHidden
// 0x0002 (0x0002 - 0x0000)
struct RCUiFaderHUDBFL_SetAllWidgetsHidden final
{
public:
	bool                                          bAllWidgetsHidden;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUDBFL_SetAllWidgetsHidden) == 0x000001, "Wrong alignment on RCUiFaderHUDBFL_SetAllWidgetsHidden");
static_assert(sizeof(RCUiFaderHUDBFL_SetAllWidgetsHidden) == 0x000002, "Wrong size on RCUiFaderHUDBFL_SetAllWidgetsHidden");
static_assert(offsetof(RCUiFaderHUDBFL_SetAllWidgetsHidden, bAllWidgetsHidden) == 0x000000, "Member 'RCUiFaderHUDBFL_SetAllWidgetsHidden::bAllWidgetsHidden' has a wrong offset!");
static_assert(offsetof(RCUiFaderHUDBFL_SetAllWidgetsHidden, ReturnValue) == 0x000001, "Member 'RCUiFaderHUDBFL_SetAllWidgetsHidden::ReturnValue' has a wrong offset!");

// Function RC.RCUiFaderHUDBFL.SetAllWidgetsHiddenEnable
// 0x0001 (0x0001 - 0x0000)
struct RCUiFaderHUDBFL_SetAllWidgetsHiddenEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiFaderHUDBFL_SetAllWidgetsHiddenEnable) == 0x000001, "Wrong alignment on RCUiFaderHUDBFL_SetAllWidgetsHiddenEnable");
static_assert(sizeof(RCUiFaderHUDBFL_SetAllWidgetsHiddenEnable) == 0x000001, "Wrong size on RCUiFaderHUDBFL_SetAllWidgetsHiddenEnable");
static_assert(offsetof(RCUiFaderHUDBFL_SetAllWidgetsHiddenEnable, bEnable) == 0x000000, "Member 'RCUiFaderHUDBFL_SetAllWidgetsHiddenEnable::bEnable' has a wrong offset!");

// Function RC.RCUiWidgetInteractive.GetInteractStatusInt
// 0x0004 (0x0004 - 0x0000)
struct RCUiWidgetInteractive_GetInteractStatusInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiWidgetInteractive_GetInteractStatusInt) == 0x000004, "Wrong alignment on RCUiWidgetInteractive_GetInteractStatusInt");
static_assert(sizeof(RCUiWidgetInteractive_GetInteractStatusInt) == 0x000004, "Wrong size on RCUiWidgetInteractive_GetInteractStatusInt");
static_assert(offsetof(RCUiWidgetInteractive_GetInteractStatusInt, ReturnValue) == 0x000000, "Member 'RCUiWidgetInteractive_GetInteractStatusInt::ReturnValue' has a wrong offset!");

// Function RC.RCUiWidgetInteractive.Open
// 0x0001 (0x0001 - 0x0000)
struct RCUiWidgetInteractive_Open final
{
public:
	bool                                          bInMoveable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiWidgetInteractive_Open) == 0x000001, "Wrong alignment on RCUiWidgetInteractive_Open");
static_assert(sizeof(RCUiWidgetInteractive_Open) == 0x000001, "Wrong size on RCUiWidgetInteractive_Open");
static_assert(offsetof(RCUiWidgetInteractive_Open, bInMoveable) == 0x000000, "Member 'RCUiWidgetInteractive_Open::bInMoveable' has a wrong offset!");

// Function RC.RCUiWidgetInteractive.OpenSelectable
// 0x0001 (0x0001 - 0x0000)
struct RCUiWidgetInteractive_OpenSelectable final
{
public:
	bool                                          bInMoveable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiWidgetInteractive_OpenSelectable) == 0x000001, "Wrong alignment on RCUiWidgetInteractive_OpenSelectable");
static_assert(sizeof(RCUiWidgetInteractive_OpenSelectable) == 0x000001, "Wrong size on RCUiWidgetInteractive_OpenSelectable");
static_assert(offsetof(RCUiWidgetInteractive_OpenSelectable, bInMoveable) == 0x000000, "Member 'RCUiWidgetInteractive_OpenSelectable::bInMoveable' has a wrong offset!");

// Function RC.RCUiInteractTalk.SetTalkImg
// 0x0001 (0x0001 - 0x0000)
struct RCUiInteractTalk_SetTalkImg final
{
public:
	bool                                          bInIsNzWorld;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiInteractTalk_SetTalkImg) == 0x000001, "Wrong alignment on RCUiInteractTalk_SetTalkImg");
static_assert(sizeof(RCUiInteractTalk_SetTalkImg) == 0x000001, "Wrong size on RCUiInteractTalk_SetTalkImg");
static_assert(offsetof(RCUiInteractTalk_SetTalkImg, bInIsNzWorld) == 0x000000, "Member 'RCUiInteractTalk_SetTalkImg::bInIsNzWorld' has a wrong offset!");

// Function RC.RCUiInteractTarget.SetTargetImg
// 0x0001 (0x0001 - 0x0000)
struct RCUiInteractTarget_SetTargetImg final
{
public:
	bool                                          bInIsNzWorld;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiInteractTarget_SetTargetImg) == 0x000001, "Wrong alignment on RCUiInteractTarget_SetTargetImg");
static_assert(sizeof(RCUiInteractTarget_SetTargetImg) == 0x000001, "Wrong size on RCUiInteractTarget_SetTargetImg");
static_assert(offsetof(RCUiInteractTarget_SetTargetImg, bInIsNzWorld) == 0x000000, "Member 'RCUiInteractTarget_SetTargetImg::bInIsNzWorld' has a wrong offset!");

// Function RC.RCUiIntTalk.SetTalkImg
// 0x0001 (0x0001 - 0x0000)
struct RCUiIntTalk_SetTalkImg final
{
public:
	bool                                          bInIsNzWorld;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiIntTalk_SetTalkImg) == 0x000001, "Wrong alignment on RCUiIntTalk_SetTalkImg");
static_assert(sizeof(RCUiIntTalk_SetTalkImg) == 0x000001, "Wrong size on RCUiIntTalk_SetTalkImg");
static_assert(offsetof(RCUiIntTalk_SetTalkImg, bInIsNzWorld) == 0x000000, "Member 'RCUiIntTalk_SetTalkImg::bInIsNzWorld' has a wrong offset!");

// Function RC.RCUiMenuAreaMap.SetLocation
// 0x0008 (0x0008 - 0x0000)
struct RCUiMenuAreaMap_SetLocation final
{
public:
	class FName                                   InMapID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuAreaMap_SetLocation) == 0x000004, "Wrong alignment on RCUiMenuAreaMap_SetLocation");
static_assert(sizeof(RCUiMenuAreaMap_SetLocation) == 0x000008, "Wrong size on RCUiMenuAreaMap_SetLocation");
static_assert(offsetof(RCUiMenuAreaMap_SetLocation, InMapID) == 0x000000, "Member 'RCUiMenuAreaMap_SetLocation::InMapID' has a wrong offset!");

// Function RC.RCUiMenuAreaMap.StartCloseProcWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuAreaMap_StartCloseProcWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuAreaMap_StartCloseProcWrap) == 0x000001, "Wrong alignment on RCUiMenuAreaMap_StartCloseProcWrap");
static_assert(sizeof(RCUiMenuAreaMap_StartCloseProcWrap) == 0x000001, "Wrong size on RCUiMenuAreaMap_StartCloseProcWrap");
static_assert(offsetof(RCUiMenuAreaMap_StartCloseProcWrap, InKeyType) == 0x000000, "Member 'RCUiMenuAreaMap_StartCloseProcWrap::InKeyType' has a wrong offset!");

// Function RC.RCUiMenuAreaMap.StartFastTravelProcWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuAreaMap_StartFastTravelProcWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuAreaMap_StartFastTravelProcWrap) == 0x000001, "Wrong alignment on RCUiMenuAreaMap_StartFastTravelProcWrap");
static_assert(sizeof(RCUiMenuAreaMap_StartFastTravelProcWrap) == 0x000001, "Wrong size on RCUiMenuAreaMap_StartFastTravelProcWrap");
static_assert(offsetof(RCUiMenuAreaMap_StartFastTravelProcWrap, InKeyType) == 0x000000, "Member 'RCUiMenuAreaMap_StartFastTravelProcWrap::InKeyType' has a wrong offset!");

// Function RC.RCUiMenuAreaMapPager.SetInputFromButtonGuide
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuAreaMapPager_SetInputFromButtonGuide final
{
public:
	ERCInputKeyType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuAreaMapPager_SetInputFromButtonGuide) == 0x000001, "Wrong alignment on RCUiMenuAreaMapPager_SetInputFromButtonGuide");
static_assert(sizeof(RCUiMenuAreaMapPager_SetInputFromButtonGuide) == 0x000001, "Wrong size on RCUiMenuAreaMapPager_SetInputFromButtonGuide");
static_assert(offsetof(RCUiMenuAreaMapPager_SetInputFromButtonGuide, InType) == 0x000000, "Member 'RCUiMenuAreaMapPager_SetInputFromButtonGuide::InType' has a wrong offset!");

// Function RC.RCUiMenuAreaMapPager.SetPagerItemActive
// 0x0004 (0x0004 - 0x0000)
struct RCUiMenuAreaMapPager_SetPagerItemActive final
{
public:
	int32                                         InActiveIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuAreaMapPager_SetPagerItemActive) == 0x000004, "Wrong alignment on RCUiMenuAreaMapPager_SetPagerItemActive");
static_assert(sizeof(RCUiMenuAreaMapPager_SetPagerItemActive) == 0x000004, "Wrong size on RCUiMenuAreaMapPager_SetPagerItemActive");
static_assert(offsetof(RCUiMenuAreaMapPager_SetPagerItemActive, InActiveIndex) == 0x000000, "Member 'RCUiMenuAreaMapPager_SetPagerItemActive::InActiveIndex' has a wrong offset!");

// Function RC.RCUiMenuCharacter.MenuCharacterSelectStartPushWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuCharacter_MenuCharacterSelectStartPushWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuCharacter_MenuCharacterSelectStartPushWrap) == 0x000001, "Wrong alignment on RCUiMenuCharacter_MenuCharacterSelectStartPushWrap");
static_assert(sizeof(RCUiMenuCharacter_MenuCharacterSelectStartPushWrap) == 0x000001, "Wrong size on RCUiMenuCharacter_MenuCharacterSelectStartPushWrap");
static_assert(offsetof(RCUiMenuCharacter_MenuCharacterSelectStartPushWrap, InKeyType) == 0x000000, "Member 'RCUiMenuCharacter_MenuCharacterSelectStartPushWrap::InKeyType' has a wrong offset!");

// Function RC.RCUiMenuCharacterTop.NotifyCloseCharacterMenuWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuCharacterTop_NotifyCloseCharacterMenuWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuCharacterTop_NotifyCloseCharacterMenuWrap) == 0x000001, "Wrong alignment on RCUiMenuCharacterTop_NotifyCloseCharacterMenuWrap");
static_assert(sizeof(RCUiMenuCharacterTop_NotifyCloseCharacterMenuWrap) == 0x000001, "Wrong size on RCUiMenuCharacterTop_NotifyCloseCharacterMenuWrap");
static_assert(offsetof(RCUiMenuCharacterTop_NotifyCloseCharacterMenuWrap, InKeyType) == 0x000000, "Member 'RCUiMenuCharacterTop_NotifyCloseCharacterMenuWrap::InKeyType' has a wrong offset!");

// Function RC.RCUiMenuCharacterTop.NotifyCloseCharacterViewerWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuCharacterTop_NotifyCloseCharacterViewerWrap final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuCharacterTop_NotifyCloseCharacterViewerWrap) == 0x000001, "Wrong alignment on RCUiMenuCharacterTop_NotifyCloseCharacterViewerWrap");
static_assert(sizeof(RCUiMenuCharacterTop_NotifyCloseCharacterViewerWrap) == 0x000001, "Wrong size on RCUiMenuCharacterTop_NotifyCloseCharacterViewerWrap");
static_assert(offsetof(RCUiMenuCharacterTop_NotifyCloseCharacterViewerWrap, InKeyType) == 0x000000, "Member 'RCUiMenuCharacterTop_NotifyCloseCharacterViewerWrap::InKeyType' has a wrong offset!");

// Function RC.RCUiMenuContents.ContentsButtonCustomNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuContents_ContentsButtonCustomNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuContents_ContentsButtonCustomNavigation) == 0x000008, "Wrong alignment on RCUiMenuContents_ContentsButtonCustomNavigation");
static_assert(sizeof(RCUiMenuContents_ContentsButtonCustomNavigation) == 0x000010, "Wrong size on RCUiMenuContents_ContentsButtonCustomNavigation");
static_assert(offsetof(RCUiMenuContents_ContentsButtonCustomNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuContents_ContentsButtonCustomNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuContents_ContentsButtonCustomNavigation, InPlayerController) == 0x000008, "Member 'RCUiMenuContents_ContentsButtonCustomNavigation::InPlayerController' has a wrong offset!");

// Function RC.RCUiMenuContents.Open
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuContents_Open final
{
public:
	bool                                          bInSelectDefault;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuContents_Open) == 0x000001, "Wrong alignment on RCUiMenuContents_Open");
static_assert(sizeof(RCUiMenuContents_Open) == 0x000001, "Wrong size on RCUiMenuContents_Open");
static_assert(offsetof(RCUiMenuContents_Open, bInSelectDefault) == 0x000000, "Member 'RCUiMenuContents_Open::bInSelectDefault' has a wrong offset!");

// Function RC.RCUiMenuGlossaryList.GlossaryNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuGlossaryList_GlossaryNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuGlossaryList_GlossaryNavigation) == 0x000008, "Wrong alignment on RCUiMenuGlossaryList_GlossaryNavigation");
static_assert(sizeof(RCUiMenuGlossaryList_GlossaryNavigation) == 0x000010, "Wrong size on RCUiMenuGlossaryList_GlossaryNavigation");
static_assert(offsetof(RCUiMenuGlossaryList_GlossaryNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuGlossaryList_GlossaryNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuGlossaryList_GlossaryNavigation, ReturnValue) == 0x000008, "Member 'RCUiMenuGlossaryList_GlossaryNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCUiMenuKagiList.KagiMenuCustomNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuKagiList_KagiMenuCustomNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuKagiList_KagiMenuCustomNavigation) == 0x000008, "Wrong alignment on RCUiMenuKagiList_KagiMenuCustomNavigation");
static_assert(sizeof(RCUiMenuKagiList_KagiMenuCustomNavigation) == 0x000010, "Wrong size on RCUiMenuKagiList_KagiMenuCustomNavigation");
static_assert(offsetof(RCUiMenuKagiList_KagiMenuCustomNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuKagiList_KagiMenuCustomNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuKagiList_KagiMenuCustomNavigation, InPlayerController) == 0x000008, "Member 'RCUiMenuKagiList_KagiMenuCustomNavigation::InPlayerController' has a wrong offset!");

// Function RC.RCUiMenuKagiList.KagiNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuKagiList_KagiNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuKagiList_KagiNavigation) == 0x000008, "Wrong alignment on RCUiMenuKagiList_KagiNavigation");
static_assert(sizeof(RCUiMenuKagiList_KagiNavigation) == 0x000010, "Wrong size on RCUiMenuKagiList_KagiNavigation");
static_assert(offsetof(RCUiMenuKagiList_KagiNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuKagiList_KagiNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuKagiList_KagiNavigation, ReturnValue) == 0x000008, "Member 'RCUiMenuKagiList_KagiNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCUiMenuNextTarget.SetNextTargetID
// 0x0008 (0x0008 - 0x0000)
struct RCUiMenuNextTarget_SetNextTargetID final
{
public:
	class FName                                   InTargetID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuNextTarget_SetNextTargetID) == 0x000004, "Wrong alignment on RCUiMenuNextTarget_SetNextTargetID");
static_assert(sizeof(RCUiMenuNextTarget_SetNextTargetID) == 0x000008, "Wrong size on RCUiMenuNextTarget_SetNextTargetID");
static_assert(offsetof(RCUiMenuNextTarget_SetNextTargetID, InTargetID) == 0x000000, "Member 'RCUiMenuNextTarget_SetNextTargetID::InTargetID' has a wrong offset!");

// Function RC.RCUiMenuSkillTree.CloseSkillTreeWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuSkillTree_CloseSkillTreeWrap final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillTree_CloseSkillTreeWrap) == 0x000001, "Wrong alignment on RCUiMenuSkillTree_CloseSkillTreeWrap");
static_assert(sizeof(RCUiMenuSkillTree_CloseSkillTreeWrap) == 0x000001, "Wrong size on RCUiMenuSkillTree_CloseSkillTreeWrap");
static_assert(offsetof(RCUiMenuSkillTree_CloseSkillTreeWrap, KeyType) == 0x000000, "Member 'RCUiMenuSkillTree_CloseSkillTreeWrap::KeyType' has a wrong offset!");

// Function RC.RCUiMenuSkillTree.DecideSkillWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuSkillTree_DecideSkillWrap final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillTree_DecideSkillWrap) == 0x000001, "Wrong alignment on RCUiMenuSkillTree_DecideSkillWrap");
static_assert(sizeof(RCUiMenuSkillTree_DecideSkillWrap) == 0x000001, "Wrong size on RCUiMenuSkillTree_DecideSkillWrap");
static_assert(offsetof(RCUiMenuSkillTree_DecideSkillWrap, KeyType) == 0x000000, "Member 'RCUiMenuSkillTree_DecideSkillWrap::KeyType' has a wrong offset!");

// Function RC.RCUiMenuSkillTree.RemoveAllSkillsWrap
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuSkillTree_RemoveAllSkillsWrap final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillTree_RemoveAllSkillsWrap) == 0x000001, "Wrong alignment on RCUiMenuSkillTree_RemoveAllSkillsWrap");
static_assert(sizeof(RCUiMenuSkillTree_RemoveAllSkillsWrap) == 0x000001, "Wrong size on RCUiMenuSkillTree_RemoveAllSkillsWrap");
static_assert(offsetof(RCUiMenuSkillTree_RemoveAllSkillsWrap, KeyType) == 0x000000, "Member 'RCUiMenuSkillTree_RemoveAllSkillsWrap::KeyType' has a wrong offset!");

// Function RC.RCUiMenuSkillTree.SkillNavigation
// 0x0010 (0x0010 - 0x0000)
struct RCUiMenuSkillTree_SkillNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuSkillTree_SkillNavigation) == 0x000008, "Wrong alignment on RCUiMenuSkillTree_SkillNavigation");
static_assert(sizeof(RCUiMenuSkillTree_SkillNavigation) == 0x000010, "Wrong size on RCUiMenuSkillTree_SkillNavigation");
static_assert(offsetof(RCUiMenuSkillTree_SkillNavigation, InNavigation) == 0x000000, "Member 'RCUiMenuSkillTree_SkillNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(RCUiMenuSkillTree_SkillNavigation, ReturnValue) == 0x000008, "Member 'RCUiMenuSkillTree_SkillNavigation::ReturnValue' has a wrong offset!");

// Function RC.RCUiMenuTitleName.Open
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuTitleName_Open final
{
public:
	ERCGameMenuSelectType                         InMenuType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuTitleName_Open) == 0x000001, "Wrong alignment on RCUiMenuTitleName_Open");
static_assert(sizeof(RCUiMenuTitleName_Open) == 0x000001, "Wrong size on RCUiMenuTitleName_Open");
static_assert(offsetof(RCUiMenuTitleName_Open, InMenuType) == 0x000000, "Member 'RCUiMenuTitleName_Open::InMenuType' has a wrong offset!");

// Function RC.RCUiMenuWorldMap.OnButtonGuideBackButtonClick
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuWorldMap_OnButtonGuideBackButtonClick final
{
public:
	ERCInputKeyType                               InKeyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuWorldMap_OnButtonGuideBackButtonClick) == 0x000001, "Wrong alignment on RCUiMenuWorldMap_OnButtonGuideBackButtonClick");
static_assert(sizeof(RCUiMenuWorldMap_OnButtonGuideBackButtonClick) == 0x000001, "Wrong size on RCUiMenuWorldMap_OnButtonGuideBackButtonClick");
static_assert(offsetof(RCUiMenuWorldMap_OnButtonGuideBackButtonClick, InKeyType) == 0x000000, "Member 'RCUiMenuWorldMap_OnButtonGuideBackButtonClick::InKeyType' has a wrong offset!");

// Function RC.RCUiMenuWorldMap.OnChangeInputPlatform
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuWorldMap_OnChangeInputPlatform final
{
public:
	ERCInputPlatform                              InInputPlatform;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuWorldMap_OnChangeInputPlatform) == 0x000001, "Wrong alignment on RCUiMenuWorldMap_OnChangeInputPlatform");
static_assert(sizeof(RCUiMenuWorldMap_OnChangeInputPlatform) == 0x000001, "Wrong size on RCUiMenuWorldMap_OnChangeInputPlatform");
static_assert(offsetof(RCUiMenuWorldMap_OnChangeInputPlatform, InInputPlatform) == 0x000000, "Member 'RCUiMenuWorldMap_OnChangeInputPlatform::InInputPlatform' has a wrong offset!");

// Function RC.RCUiMenuWorldMap.OnFinishGenericWindow
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuWorldMap_OnFinishGenericWindow final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuWorldMap_OnFinishGenericWindow) == 0x000001, "Wrong alignment on RCUiMenuWorldMap_OnFinishGenericWindow");
static_assert(sizeof(RCUiMenuWorldMap_OnFinishGenericWindow) == 0x000001, "Wrong size on RCUiMenuWorldMap_OnFinishGenericWindow");
static_assert(offsetof(RCUiMenuWorldMap_OnFinishGenericWindow, bResult) == 0x000000, "Member 'RCUiMenuWorldMap_OnFinishGenericWindow::bResult' has a wrong offset!");

// Function RC.RCUiMenuWorldMap.OpenAreaSelect
// 0x0001 (0x0001 - 0x0000)
struct RCUiMenuWorldMap_OpenAreaSelect final
{
public:
	bool                                          bInIsBusMenu;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiMenuWorldMap_OpenAreaSelect) == 0x000001, "Wrong alignment on RCUiMenuWorldMap_OpenAreaSelect");
static_assert(sizeof(RCUiMenuWorldMap_OpenAreaSelect) == 0x000001, "Wrong size on RCUiMenuWorldMap_OpenAreaSelect");
static_assert(offsetof(RCUiMenuWorldMap_OpenAreaSelect, bInIsBusMenu) == 0x000000, "Member 'RCUiMenuWorldMap_OpenAreaSelect::bInIsBusMenu' has a wrong offset!");

// Function RC.RCUiOptionBar_Choice.OnComboBoxValueChangedEvent
// 0x0004 (0x0004 - 0x0000)
struct RCUiOptionBar_Choice_OnComboBoxValueChangedEvent final
{
public:
	int32                                         ind;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionBar_Choice_OnComboBoxValueChangedEvent) == 0x000004, "Wrong alignment on RCUiOptionBar_Choice_OnComboBoxValueChangedEvent");
static_assert(sizeof(RCUiOptionBar_Choice_OnComboBoxValueChangedEvent) == 0x000004, "Wrong size on RCUiOptionBar_Choice_OnComboBoxValueChangedEvent");
static_assert(offsetof(RCUiOptionBar_Choice_OnComboBoxValueChangedEvent, ind) == 0x000000, "Member 'RCUiOptionBar_Choice_OnComboBoxValueChangedEvent::ind' has a wrong offset!");

// Function RC.RCUiOptionBar_Choice.OnWindowModeChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct RCUiOptionBar_Choice_OnWindowModeChangeEvent final
{
public:
	ERCOptionWindowMode                           Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         dispNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionBar_Choice_OnWindowModeChangeEvent) == 0x000004, "Wrong alignment on RCUiOptionBar_Choice_OnWindowModeChangeEvent");
static_assert(sizeof(RCUiOptionBar_Choice_OnWindowModeChangeEvent) == 0x000008, "Wrong size on RCUiOptionBar_Choice_OnWindowModeChangeEvent");
static_assert(offsetof(RCUiOptionBar_Choice_OnWindowModeChangeEvent, Mode) == 0x000000, "Member 'RCUiOptionBar_Choice_OnWindowModeChangeEvent::Mode' has a wrong offset!");
static_assert(offsetof(RCUiOptionBar_Choice_OnWindowModeChangeEvent, dispNum) == 0x000004, "Member 'RCUiOptionBar_Choice_OnWindowModeChangeEvent::dispNum' has a wrong offset!");

// Function RC.RCUiOptionBar_Volume.SynchronizeToSlider
// 0x0008 (0x0008 - 0x0000)
struct RCUiOptionBar_Volume_SynchronizeToSlider final
{
public:
	int32                                         ind;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionBar_Volume_SynchronizeToSlider) == 0x000004, "Wrong alignment on RCUiOptionBar_Volume_SynchronizeToSlider");
static_assert(sizeof(RCUiOptionBar_Volume_SynchronizeToSlider) == 0x000008, "Wrong size on RCUiOptionBar_Volume_SynchronizeToSlider");
static_assert(offsetof(RCUiOptionBar_Volume_SynchronizeToSlider, ind) == 0x000000, "Member 'RCUiOptionBar_Volume_SynchronizeToSlider::ind' has a wrong offset!");
static_assert(offsetof(RCUiOptionBar_Volume_SynchronizeToSlider, ReturnValue) == 0x000004, "Member 'RCUiOptionBar_Volume_SynchronizeToSlider::ReturnValue' has a wrong offset!");

// Function RC.RCUiOptionBarComboBox.GetComboBoxListWidget
// 0x0008 (0x0008 - 0x0000)
struct RCUiOptionBarComboBox_GetComboBoxListWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionBarComboBox_GetComboBoxListWidget) == 0x000008, "Wrong alignment on RCUiOptionBarComboBox_GetComboBoxListWidget");
static_assert(sizeof(RCUiOptionBarComboBox_GetComboBoxListWidget) == 0x000008, "Wrong size on RCUiOptionBarComboBox_GetComboBoxListWidget");
static_assert(offsetof(RCUiOptionBarComboBox_GetComboBoxListWidget, ReturnValue) == 0x000000, "Member 'RCUiOptionBarComboBox_GetComboBoxListWidget::ReturnValue' has a wrong offset!");

// Function RC.RCUiOptionBarComboBox.OnClickItemEvent
// 0x0004 (0x0004 - 0x0000)
struct RCUiOptionBarComboBox_OnClickItemEvent final
{
public:
	int32                                         ind;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionBarComboBox_OnClickItemEvent) == 0x000004, "Wrong alignment on RCUiOptionBarComboBox_OnClickItemEvent");
static_assert(sizeof(RCUiOptionBarComboBox_OnClickItemEvent) == 0x000004, "Wrong size on RCUiOptionBarComboBox_OnClickItemEvent");
static_assert(offsetof(RCUiOptionBarComboBox_OnClickItemEvent, ind) == 0x000000, "Member 'RCUiOptionBarComboBox_OnClickItemEvent::ind' has a wrong offset!");

// Function RC.RCUiOptionBarComboBox.OnMenuOpenChangedEvent
// 0x0001 (0x0001 - 0x0000)
struct RCUiOptionBarComboBox_OnMenuOpenChangedEvent final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionBarComboBox_OnMenuOpenChangedEvent) == 0x000001, "Wrong alignment on RCUiOptionBarComboBox_OnMenuOpenChangedEvent");
static_assert(sizeof(RCUiOptionBarComboBox_OnMenuOpenChangedEvent) == 0x000001, "Wrong size on RCUiOptionBarComboBox_OnMenuOpenChangedEvent");
static_assert(offsetof(RCUiOptionBarComboBox_OnMenuOpenChangedEvent, bIsOpen) == 0x000000, "Member 'RCUiOptionBarComboBox_OnMenuOpenChangedEvent::bIsOpen' has a wrong offset!");

// Function RC.RCUiOptionBarComboBoxItemList.OnItemEnterEvent
// 0x0004 (0x0004 - 0x0000)
struct RCUiOptionBarComboBoxItemList_OnItemEnterEvent final
{
public:
	int32                                         ind;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionBarComboBoxItemList_OnItemEnterEvent) == 0x000004, "Wrong alignment on RCUiOptionBarComboBoxItemList_OnItemEnterEvent");
static_assert(sizeof(RCUiOptionBarComboBoxItemList_OnItemEnterEvent) == 0x000004, "Wrong size on RCUiOptionBarComboBoxItemList_OnItemEnterEvent");
static_assert(offsetof(RCUiOptionBarComboBoxItemList_OnItemEnterEvent, ind) == 0x000000, "Member 'RCUiOptionBarComboBoxItemList_OnItemEnterEvent::ind' has a wrong offset!");

// Function RC.RCUiOptionLayout.OnButtonGuideClose
// 0x0001 (0x0001 - 0x0000)
struct RCUiOptionLayout_OnButtonGuideClose final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionLayout_OnButtonGuideClose) == 0x000001, "Wrong alignment on RCUiOptionLayout_OnButtonGuideClose");
static_assert(sizeof(RCUiOptionLayout_OnButtonGuideClose) == 0x000001, "Wrong size on RCUiOptionLayout_OnButtonGuideClose");
static_assert(offsetof(RCUiOptionLayout_OnButtonGuideClose, KeyType) == 0x000000, "Member 'RCUiOptionLayout_OnButtonGuideClose::KeyType' has a wrong offset!");

// Function RC.RCUiOptionLayout.OnButtonGuideInitializeBar
// 0x0001 (0x0001 - 0x0000)
struct RCUiOptionLayout_OnButtonGuideInitializeBar final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionLayout_OnButtonGuideInitializeBar) == 0x000001, "Wrong alignment on RCUiOptionLayout_OnButtonGuideInitializeBar");
static_assert(sizeof(RCUiOptionLayout_OnButtonGuideInitializeBar) == 0x000001, "Wrong size on RCUiOptionLayout_OnButtonGuideInitializeBar");
static_assert(offsetof(RCUiOptionLayout_OnButtonGuideInitializeBar, KeyType) == 0x000000, "Member 'RCUiOptionLayout_OnButtonGuideInitializeBar::KeyType' has a wrong offset!");

// Function RC.RCUiOptionLayout.OnButtonGuideInitializeKey
// 0x0001 (0x0001 - 0x0000)
struct RCUiOptionLayout_OnButtonGuideInitializeKey final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionLayout_OnButtonGuideInitializeKey) == 0x000001, "Wrong alignment on RCUiOptionLayout_OnButtonGuideInitializeKey");
static_assert(sizeof(RCUiOptionLayout_OnButtonGuideInitializeKey) == 0x000001, "Wrong size on RCUiOptionLayout_OnButtonGuideInitializeKey");
static_assert(offsetof(RCUiOptionLayout_OnButtonGuideInitializeKey, KeyType) == 0x000000, "Member 'RCUiOptionLayout_OnButtonGuideInitializeKey::KeyType' has a wrong offset!");

// Function RC.RCUiOptionLayout.OnButtonGuideOptionEnter
// 0x0001 (0x0001 - 0x0000)
struct RCUiOptionLayout_OnButtonGuideOptionEnter final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionLayout_OnButtonGuideOptionEnter) == 0x000001, "Wrong alignment on RCUiOptionLayout_OnButtonGuideOptionEnter");
static_assert(sizeof(RCUiOptionLayout_OnButtonGuideOptionEnter) == 0x000001, "Wrong size on RCUiOptionLayout_OnButtonGuideOptionEnter");
static_assert(offsetof(RCUiOptionLayout_OnButtonGuideOptionEnter, KeyType) == 0x000000, "Member 'RCUiOptionLayout_OnButtonGuideOptionEnter::KeyType' has a wrong offset!");

// Function RC.RCUiOptionLayout.OnButtonGuideSelectKey
// 0x0001 (0x0001 - 0x0000)
struct RCUiOptionLayout_OnButtonGuideSelectKey final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiOptionLayout_OnButtonGuideSelectKey) == 0x000001, "Wrong alignment on RCUiOptionLayout_OnButtonGuideSelectKey");
static_assert(sizeof(RCUiOptionLayout_OnButtonGuideSelectKey) == 0x000001, "Wrong size on RCUiOptionLayout_OnButtonGuideSelectKey");
static_assert(offsetof(RCUiOptionLayout_OnButtonGuideSelectKey, KeyType) == 0x000000, "Member 'RCUiOptionLayout_OnButtonGuideSelectKey::KeyType' has a wrong offset!");

// Function RC.RCUiSavingIcon.SetAutoCloseFlag
// 0x0001 (0x0001 - 0x0000)
struct RCUiSavingIcon_SetAutoCloseFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSavingIcon_SetAutoCloseFlag) == 0x000001, "Wrong alignment on RCUiSavingIcon_SetAutoCloseFlag");
static_assert(sizeof(RCUiSavingIcon_SetAutoCloseFlag) == 0x000001, "Wrong size on RCUiSavingIcon_SetAutoCloseFlag");
static_assert(offsetof(RCUiSavingIcon_SetAutoCloseFlag, bFlag) == 0x000000, "Member 'RCUiSavingIcon_SetAutoCloseFlag::bFlag' has a wrong offset!");

// Function RC.RCUiSavingIcon.IsSaving
// 0x0001 (0x0001 - 0x0000)
struct RCUiSavingIcon_IsSaving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSavingIcon_IsSaving) == 0x000001, "Wrong alignment on RCUiSavingIcon_IsSaving");
static_assert(sizeof(RCUiSavingIcon_IsSaving) == 0x000001, "Wrong size on RCUiSavingIcon_IsSaving");
static_assert(offsetof(RCUiSavingIcon_IsSaving, ReturnValue) == 0x000000, "Member 'RCUiSavingIcon_IsSaving::ReturnValue' has a wrong offset!");

// Function RC.RCUiSoundNovel.AddSpace
// 0x0004 (0x0004 - 0x0000)
struct RCUiSoundNovel_AddSpace final
{
public:
	int32                                         InSpaceNum;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSoundNovel_AddSpace) == 0x000004, "Wrong alignment on RCUiSoundNovel_AddSpace");
static_assert(sizeof(RCUiSoundNovel_AddSpace) == 0x000004, "Wrong size on RCUiSoundNovel_AddSpace");
static_assert(offsetof(RCUiSoundNovel_AddSpace, InSpaceNum) == 0x000000, "Member 'RCUiSoundNovel_AddSpace::InSpaceNum' has a wrong offset!");

// Function RC.RCUiSoundNovel.AddText
// 0x0018 (0x0018 - 0x0000)
struct RCUiSoundNovel_AddText final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUiSoundNovel_AddText) == 0x000008, "Wrong alignment on RCUiSoundNovel_AddText");
static_assert(sizeof(RCUiSoundNovel_AddText) == 0x000018, "Wrong size on RCUiSoundNovel_AddText");
static_assert(offsetof(RCUiSoundNovel_AddText, inString) == 0x000000, "Member 'RCUiSoundNovel_AddText::inString' has a wrong offset!");
static_assert(offsetof(RCUiSoundNovel_AddText, InDelay) == 0x000010, "Member 'RCUiSoundNovel_AddText::InDelay' has a wrong offset!");

// Function RC.RCUiSoundNovel.GetMessStatusInt
// 0x0004 (0x0004 - 0x0000)
struct RCUiSoundNovel_GetMessStatusInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSoundNovel_GetMessStatusInt) == 0x000004, "Wrong alignment on RCUiSoundNovel_GetMessStatusInt");
static_assert(sizeof(RCUiSoundNovel_GetMessStatusInt) == 0x000004, "Wrong size on RCUiSoundNovel_GetMessStatusInt");
static_assert(offsetof(RCUiSoundNovel_GetMessStatusInt, ReturnValue) == 0x000000, "Member 'RCUiSoundNovel_GetMessStatusInt::ReturnValue' has a wrong offset!");

// Function RC.RCUiSoundNovel.GetSkipTyping
// 0x0001 (0x0001 - 0x0000)
struct RCUiSoundNovel_GetSkipTyping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSoundNovel_GetSkipTyping) == 0x000001, "Wrong alignment on RCUiSoundNovel_GetSkipTyping");
static_assert(sizeof(RCUiSoundNovel_GetSkipTyping) == 0x000001, "Wrong size on RCUiSoundNovel_GetSkipTyping");
static_assert(offsetof(RCUiSoundNovel_GetSkipTyping, ReturnValue) == 0x000000, "Member 'RCUiSoundNovel_GetSkipTyping::ReturnValue' has a wrong offset!");

// Function RC.RCUiSoundNovel.GetSoundNovelStatus
// 0x0001 (0x0001 - 0x0000)
struct RCUiSoundNovel_GetSoundNovelStatus final
{
public:
	ESoundNovelStatus                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSoundNovel_GetSoundNovelStatus) == 0x000001, "Wrong alignment on RCUiSoundNovel_GetSoundNovelStatus");
static_assert(sizeof(RCUiSoundNovel_GetSoundNovelStatus) == 0x000001, "Wrong size on RCUiSoundNovel_GetSoundNovelStatus");
static_assert(offsetof(RCUiSoundNovel_GetSoundNovelStatus, ReturnValue) == 0x000000, "Member 'RCUiSoundNovel_GetSoundNovelStatus::ReturnValue' has a wrong offset!");

// Function RC.RCUiSoundNovel.SetForceAutoFlag
// 0x0002 (0x0002 - 0x0000)
struct RCUiSoundNovel_SetForceAutoFlag final
{
public:
	bool                                          bForceAuto;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAutoIcon;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSoundNovel_SetForceAutoFlag) == 0x000001, "Wrong alignment on RCUiSoundNovel_SetForceAutoFlag");
static_assert(sizeof(RCUiSoundNovel_SetForceAutoFlag) == 0x000002, "Wrong size on RCUiSoundNovel_SetForceAutoFlag");
static_assert(offsetof(RCUiSoundNovel_SetForceAutoFlag, bForceAuto) == 0x000000, "Member 'RCUiSoundNovel_SetForceAutoFlag::bForceAuto' has a wrong offset!");
static_assert(offsetof(RCUiSoundNovel_SetForceAutoFlag, bShowAutoIcon) == 0x000001, "Member 'RCUiSoundNovel_SetForceAutoFlag::bShowAutoIcon' has a wrong offset!");

// Function RC.RCUiSoundNovel.SetForceTextSpeedSettings
// 0x0008 (0x0008 - 0x0000)
struct RCUiSoundNovel_SetForceTextSpeedSettings final
{
public:
	bool                                          bInIsForceTextSpeed;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InForceTextSpeed;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSoundNovel_SetForceTextSpeedSettings) == 0x000004, "Wrong alignment on RCUiSoundNovel_SetForceTextSpeedSettings");
static_assert(sizeof(RCUiSoundNovel_SetForceTextSpeedSettings) == 0x000008, "Wrong size on RCUiSoundNovel_SetForceTextSpeedSettings");
static_assert(offsetof(RCUiSoundNovel_SetForceTextSpeedSettings, bInIsForceTextSpeed) == 0x000000, "Member 'RCUiSoundNovel_SetForceTextSpeedSettings::bInIsForceTextSpeed' has a wrong offset!");
static_assert(offsetof(RCUiSoundNovel_SetForceTextSpeedSettings, InForceTextSpeed) == 0x000004, "Member 'RCUiSoundNovel_SetForceTextSpeedSettings::InForceTextSpeed' has a wrong offset!");

// Function RC.RCUiSoundNovel.SetShakeData
// 0x000C (0x000C - 0x0000)
struct RCUiSoundNovel_SetShakeData final
{
public:
	float                                         InWidthX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWidthY;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InInterval;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSoundNovel_SetShakeData) == 0x000004, "Wrong alignment on RCUiSoundNovel_SetShakeData");
static_assert(sizeof(RCUiSoundNovel_SetShakeData) == 0x00000C, "Wrong size on RCUiSoundNovel_SetShakeData");
static_assert(offsetof(RCUiSoundNovel_SetShakeData, InWidthX) == 0x000000, "Member 'RCUiSoundNovel_SetShakeData::InWidthX' has a wrong offset!");
static_assert(offsetof(RCUiSoundNovel_SetShakeData, InWidthY) == 0x000004, "Member 'RCUiSoundNovel_SetShakeData::InWidthY' has a wrong offset!");
static_assert(offsetof(RCUiSoundNovel_SetShakeData, InInterval) == 0x000008, "Member 'RCUiSoundNovel_SetShakeData::InInterval' has a wrong offset!");

// Function RC.RCUiStaffRoll.InitStaffRoll
// 0x000C (0x000C - 0x0000)
struct RCUiStaffRoll_InitStaffRoll final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpaceSize;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiStaffRoll_InitStaffRoll) == 0x000004, "Wrong alignment on RCUiStaffRoll_InitStaffRoll");
static_assert(sizeof(RCUiStaffRoll_InitStaffRoll) == 0x00000C, "Wrong size on RCUiStaffRoll_InitStaffRoll");
static_assert(offsetof(RCUiStaffRoll_InitStaffRoll, StartTime) == 0x000000, "Member 'RCUiStaffRoll_InitStaffRoll::StartTime' has a wrong offset!");
static_assert(offsetof(RCUiStaffRoll_InitStaffRoll, EndTime) == 0x000004, "Member 'RCUiStaffRoll_InitStaffRoll::EndTime' has a wrong offset!");
static_assert(offsetof(RCUiStaffRoll_InitStaffRoll, SpaceSize) == 0x000008, "Member 'RCUiStaffRoll_InitStaffRoll::SpaceSize' has a wrong offset!");

// Function RC.RCUiStaffRoll.SetStaffRollDataAsset
// 0x0008 (0x0008 - 0x0000)
struct RCUiStaffRoll_SetStaffRollDataAsset final
{
public:
	class URCStaffRollDataAsset*                  Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiStaffRoll_SetStaffRollDataAsset) == 0x000008, "Wrong alignment on RCUiStaffRoll_SetStaffRollDataAsset");
static_assert(sizeof(RCUiStaffRoll_SetStaffRollDataAsset) == 0x000008, "Wrong size on RCUiStaffRoll_SetStaffRollDataAsset");
static_assert(offsetof(RCUiStaffRoll_SetStaffRollDataAsset, Data) == 0x000000, "Member 'RCUiStaffRoll_SetStaffRollDataAsset::Data' has a wrong offset!");

// Function RC.RCUiStaffRoll.GetFinishTime
// 0x0004 (0x0004 - 0x0000)
struct RCUiStaffRoll_GetFinishTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiStaffRoll_GetFinishTime) == 0x000004, "Wrong alignment on RCUiStaffRoll_GetFinishTime");
static_assert(sizeof(RCUiStaffRoll_GetFinishTime) == 0x000004, "Wrong size on RCUiStaffRoll_GetFinishTime");
static_assert(offsetof(RCUiStaffRoll_GetFinishTime, ReturnValue) == 0x000000, "Member 'RCUiStaffRoll_GetFinishTime::ReturnValue' has a wrong offset!");

// Function RC.RCUiStaffRoll.GetMovieStartTime
// 0x0004 (0x0004 - 0x0000)
struct RCUiStaffRoll_GetMovieStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiStaffRoll_GetMovieStartTime) == 0x000004, "Wrong alignment on RCUiStaffRoll_GetMovieStartTime");
static_assert(sizeof(RCUiStaffRoll_GetMovieStartTime) == 0x000004, "Wrong size on RCUiStaffRoll_GetMovieStartTime");
static_assert(offsetof(RCUiStaffRoll_GetMovieStartTime, ReturnValue) == 0x000000, "Member 'RCUiStaffRoll_GetMovieStartTime::ReturnValue' has a wrong offset!");

// Function RC.RCUiStaffRoll.IsEndScroll
// 0x0001 (0x0001 - 0x0000)
struct RCUiStaffRoll_IsEndScroll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiStaffRoll_IsEndScroll) == 0x000001, "Wrong alignment on RCUiStaffRoll_IsEndScroll");
static_assert(sizeof(RCUiStaffRoll_IsEndScroll) == 0x000001, "Wrong size on RCUiStaffRoll_IsEndScroll");
static_assert(offsetof(RCUiStaffRoll_IsEndScroll, ReturnValue) == 0x000000, "Member 'RCUiStaffRoll_IsEndScroll::ReturnValue' has a wrong offset!");

// Function RC.RCUiStaffRoll.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RCUiStaffRoll_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiStaffRoll_IsFinished) == 0x000001, "Wrong alignment on RCUiStaffRoll_IsFinished");
static_assert(sizeof(RCUiStaffRoll_IsFinished) == 0x000001, "Wrong size on RCUiStaffRoll_IsFinished");
static_assert(offsetof(RCUiStaffRoll_IsFinished, ReturnValue) == 0x000000, "Member 'RCUiStaffRoll_IsFinished::ReturnValue' has a wrong offset!");

// Function RC.RCUiStaffRoll.IsInitializedStaffRoll
// 0x0001 (0x0001 - 0x0000)
struct RCUiStaffRoll_IsInitializedStaffRoll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiStaffRoll_IsInitializedStaffRoll) == 0x000001, "Wrong alignment on RCUiStaffRoll_IsInitializedStaffRoll");
static_assert(sizeof(RCUiStaffRoll_IsInitializedStaffRoll) == 0x000001, "Wrong size on RCUiStaffRoll_IsInitializedStaffRoll");
static_assert(offsetof(RCUiStaffRoll_IsInitializedStaffRoll, ReturnValue) == 0x000000, "Member 'RCUiStaffRoll_IsInitializedStaffRoll::ReturnValue' has a wrong offset!");

// Function RC.RCUiSubtitle.DisplaceSubtitle
// 0x0008 (0x0008 - 0x0000)
struct RCUiSubtitle_DisplaceSubtitle final
{
public:
	struct FVector2D                              InVector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSubtitle_DisplaceSubtitle) == 0x000004, "Wrong alignment on RCUiSubtitle_DisplaceSubtitle");
static_assert(sizeof(RCUiSubtitle_DisplaceSubtitle) == 0x000008, "Wrong size on RCUiSubtitle_DisplaceSubtitle");
static_assert(offsetof(RCUiSubtitle_DisplaceSubtitle, InVector) == 0x000000, "Member 'RCUiSubtitle_DisplaceSubtitle::InVector' has a wrong offset!");

// Function RC.RCUiSubtitle.GetSkipVoice
// 0x0001 (0x0001 - 0x0000)
struct RCUiSubtitle_GetSkipVoice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSubtitle_GetSkipVoice) == 0x000001, "Wrong alignment on RCUiSubtitle_GetSkipVoice");
static_assert(sizeof(RCUiSubtitle_GetSkipVoice) == 0x000001, "Wrong size on RCUiSubtitle_GetSkipVoice");
static_assert(offsetof(RCUiSubtitle_GetSkipVoice, ReturnValue) == 0x000000, "Member 'RCUiSubtitle_GetSkipVoice::ReturnValue' has a wrong offset!");

// Function RC.RCUiSubtitle.GetSubtitleStatusNum
// 0x0004 (0x0004 - 0x0000)
struct RCUiSubtitle_GetSubtitleStatusNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSubtitle_GetSubtitleStatusNum) == 0x000004, "Wrong alignment on RCUiSubtitle_GetSubtitleStatusNum");
static_assert(sizeof(RCUiSubtitle_GetSubtitleStatusNum) == 0x000004, "Wrong size on RCUiSubtitle_GetSubtitleStatusNum");
static_assert(offsetof(RCUiSubtitle_GetSubtitleStatusNum, ReturnValue) == 0x000000, "Member 'RCUiSubtitle_GetSubtitleStatusNum::ReturnValue' has a wrong offset!");

// Function RC.RCUiSubtitle.Open_WaitPush
// 0x0001 (0x0001 - 0x0000)
struct RCUiSubtitle_Open_WaitPush final
{
public:
	bool                                          bInEnableSkipVoice;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiSubtitle_Open_WaitPush) == 0x000001, "Wrong alignment on RCUiSubtitle_Open_WaitPush");
static_assert(sizeof(RCUiSubtitle_Open_WaitPush) == 0x000001, "Wrong size on RCUiSubtitle_Open_WaitPush");
static_assert(offsetof(RCUiSubtitle_Open_WaitPush, bInEnableSkipVoice) == 0x000000, "Member 'RCUiSubtitle_Open_WaitPush::bInEnableSkipVoice' has a wrong offset!");

// Function RC.RCUiSubtitle.SetText
// 0x0028 (0x0028 - 0x0000)
struct RCUiSubtitle_SetText final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 inString;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInOnlyCursor;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUiSubtitle_SetText) == 0x000008, "Wrong alignment on RCUiSubtitle_SetText");
static_assert(sizeof(RCUiSubtitle_SetText) == 0x000028, "Wrong size on RCUiSubtitle_SetText");
static_assert(offsetof(RCUiSubtitle_SetText, InName) == 0x000000, "Member 'RCUiSubtitle_SetText::InName' has a wrong offset!");
static_assert(offsetof(RCUiSubtitle_SetText, inString) == 0x000010, "Member 'RCUiSubtitle_SetText::inString' has a wrong offset!");
static_assert(offsetof(RCUiSubtitle_SetText, InDelay) == 0x000020, "Member 'RCUiSubtitle_SetText::InDelay' has a wrong offset!");
static_assert(offsetof(RCUiSubtitle_SetText, bInOnlyCursor) == 0x000024, "Member 'RCUiSubtitle_SetText::bInOnlyCursor' has a wrong offset!");

// Function RC.RCUiTutorialWindow.OnButtonGuideCloseClick
// 0x0001 (0x0001 - 0x0000)
struct RCUiTutorialWindow_OnButtonGuideCloseClick final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiTutorialWindow_OnButtonGuideCloseClick) == 0x000001, "Wrong alignment on RCUiTutorialWindow_OnButtonGuideCloseClick");
static_assert(sizeof(RCUiTutorialWindow_OnButtonGuideCloseClick) == 0x000001, "Wrong size on RCUiTutorialWindow_OnButtonGuideCloseClick");
static_assert(offsetof(RCUiTutorialWindow_OnButtonGuideCloseClick, KeyType) == 0x000000, "Member 'RCUiTutorialWindow_OnButtonGuideCloseClick::KeyType' has a wrong offset!");

// Function RC.RCUiTutorialWindow.OnPagerButtonGuideClick
// 0x0001 (0x0001 - 0x0000)
struct RCUiTutorialWindow_OnPagerButtonGuideClick final
{
public:
	ERCInputKeyType                               KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUiTutorialWindow_OnPagerButtonGuideClick) == 0x000001, "Wrong alignment on RCUiTutorialWindow_OnPagerButtonGuideClick");
static_assert(sizeof(RCUiTutorialWindow_OnPagerButtonGuideClick) == 0x000001, "Wrong size on RCUiTutorialWindow_OnPagerButtonGuideClick");
static_assert(offsetof(RCUiTutorialWindow_OnPagerButtonGuideClick, KeyType) == 0x000000, "Member 'RCUiTutorialWindow_OnPagerButtonGuideClick::KeyType' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.GeRCCameraManager
// 0x0008 (0x0008 - 0x0000)
struct RCUtilityFunctionLibrary_GeRCCameraManager final
{
public:
	class ARCCameraManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUtilityFunctionLibrary_GeRCCameraManager) == 0x000008, "Wrong alignment on RCUtilityFunctionLibrary_GeRCCameraManager");
static_assert(sizeof(RCUtilityFunctionLibrary_GeRCCameraManager) == 0x000008, "Wrong size on RCUtilityFunctionLibrary_GeRCCameraManager");
static_assert(offsetof(RCUtilityFunctionLibrary_GeRCCameraManager, ReturnValue) == 0x000000, "Member 'RCUtilityFunctionLibrary_GeRCCameraManager::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.GeRCPlayerCameraManager
// 0x0008 (0x0008 - 0x0000)
struct RCUtilityFunctionLibrary_GeRCPlayerCameraManager final
{
public:
	class ARCPlayerCameraManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUtilityFunctionLibrary_GeRCPlayerCameraManager) == 0x000008, "Wrong alignment on RCUtilityFunctionLibrary_GeRCPlayerCameraManager");
static_assert(sizeof(RCUtilityFunctionLibrary_GeRCPlayerCameraManager) == 0x000008, "Wrong size on RCUtilityFunctionLibrary_GeRCPlayerCameraManager");
static_assert(offsetof(RCUtilityFunctionLibrary_GeRCPlayerCameraManager, ReturnValue) == 0x000000, "Member 'RCUtilityFunctionLibrary_GeRCPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.GetCurrentArea
// 0x0004 (0x0004 - 0x0000)
struct RCUtilityFunctionLibrary_GetCurrentArea final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUtilityFunctionLibrary_GetCurrentArea) == 0x000004, "Wrong alignment on RCUtilityFunctionLibrary_GetCurrentArea");
static_assert(sizeof(RCUtilityFunctionLibrary_GetCurrentArea) == 0x000004, "Wrong size on RCUtilityFunctionLibrary_GetCurrentArea");
static_assert(offsetof(RCUtilityFunctionLibrary_GetCurrentArea, ReturnValue) == 0x000000, "Member 'RCUtilityFunctionLibrary_GetCurrentArea::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.GetGameVersion
// 0x0010 (0x0010 - 0x0000)
struct RCUtilityFunctionLibrary_GetGameVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUtilityFunctionLibrary_GetGameVersion) == 0x000008, "Wrong alignment on RCUtilityFunctionLibrary_GetGameVersion");
static_assert(sizeof(RCUtilityFunctionLibrary_GetGameVersion) == 0x000010, "Wrong size on RCUtilityFunctionLibrary_GetGameVersion");
static_assert(offsetof(RCUtilityFunctionLibrary_GetGameVersion, ReturnValue) == 0x000000, "Member 'RCUtilityFunctionLibrary_GetGameVersion::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.GetRCPlayerController
// 0x0008 (0x0008 - 0x0000)
struct RCUtilityFunctionLibrary_GetRCPlayerController final
{
public:
	class ARCPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUtilityFunctionLibrary_GetRCPlayerController) == 0x000008, "Wrong alignment on RCUtilityFunctionLibrary_GetRCPlayerController");
static_assert(sizeof(RCUtilityFunctionLibrary_GetRCPlayerController) == 0x000008, "Wrong size on RCUtilityFunctionLibrary_GetRCPlayerController");
static_assert(offsetof(RCUtilityFunctionLibrary_GetRCPlayerController, ReturnValue) == 0x000000, "Member 'RCUtilityFunctionLibrary_GetRCPlayerController::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.GetToonDirectionalLightRotatorOffset
// 0x000C (0x000C - 0x0000)
struct RCUtilityFunctionLibrary_GetToonDirectionalLightRotatorOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUtilityFunctionLibrary_GetToonDirectionalLightRotatorOffset) == 0x000004, "Wrong alignment on RCUtilityFunctionLibrary_GetToonDirectionalLightRotatorOffset");
static_assert(sizeof(RCUtilityFunctionLibrary_GetToonDirectionalLightRotatorOffset) == 0x00000C, "Wrong size on RCUtilityFunctionLibrary_GetToonDirectionalLightRotatorOffset");
static_assert(offsetof(RCUtilityFunctionLibrary_GetToonDirectionalLightRotatorOffset, ReturnValue) == 0x000000, "Member 'RCUtilityFunctionLibrary_GetToonDirectionalLightRotatorOffset::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.IsCameraACtor
// 0x0010 (0x0010 - 0x0000)
struct RCUtilityFunctionLibrary_IsCameraACtor final
{
public:
	class AActor*                                 act;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUtilityFunctionLibrary_IsCameraACtor) == 0x000008, "Wrong alignment on RCUtilityFunctionLibrary_IsCameraACtor");
static_assert(sizeof(RCUtilityFunctionLibrary_IsCameraACtor) == 0x000010, "Wrong size on RCUtilityFunctionLibrary_IsCameraACtor");
static_assert(offsetof(RCUtilityFunctionLibrary_IsCameraACtor, act) == 0x000000, "Member 'RCUtilityFunctionLibrary_IsCameraACtor::act' has a wrong offset!");
static_assert(offsetof(RCUtilityFunctionLibrary_IsCameraACtor, ReturnValue) == 0x000008, "Member 'RCUtilityFunctionLibrary_IsCameraACtor::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.SetCascadeRainColor
// 0x0014 (0x0014 - 0x0000)
struct RCUtilityFunctionLibrary_SetCascadeRainColor final
{
public:
	class FName                                   Map;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUtilityFunctionLibrary_SetCascadeRainColor) == 0x000004, "Wrong alignment on RCUtilityFunctionLibrary_SetCascadeRainColor");
static_assert(sizeof(RCUtilityFunctionLibrary_SetCascadeRainColor) == 0x000014, "Wrong size on RCUtilityFunctionLibrary_SetCascadeRainColor");
static_assert(offsetof(RCUtilityFunctionLibrary_SetCascadeRainColor, Map) == 0x000000, "Member 'RCUtilityFunctionLibrary_SetCascadeRainColor::Map' has a wrong offset!");
static_assert(offsetof(RCUtilityFunctionLibrary_SetCascadeRainColor, Name_0) == 0x000008, "Member 'RCUtilityFunctionLibrary_SetCascadeRainColor::Name_0' has a wrong offset!");
static_assert(offsetof(RCUtilityFunctionLibrary_SetCascadeRainColor, ReturnValue) == 0x000010, "Member 'RCUtilityFunctionLibrary_SetCascadeRainColor::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.SetCascadeRainColorIndex
// 0x0008 (0x0008 - 0x0000)
struct RCUtilityFunctionLibrary_SetCascadeRainColorIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUtilityFunctionLibrary_SetCascadeRainColorIndex) == 0x000004, "Wrong alignment on RCUtilityFunctionLibrary_SetCascadeRainColorIndex");
static_assert(sizeof(RCUtilityFunctionLibrary_SetCascadeRainColorIndex) == 0x000008, "Wrong size on RCUtilityFunctionLibrary_SetCascadeRainColorIndex");
static_assert(offsetof(RCUtilityFunctionLibrary_SetCascadeRainColorIndex, Index_0) == 0x000000, "Member 'RCUtilityFunctionLibrary_SetCascadeRainColorIndex::Index_0' has a wrong offset!");
static_assert(offsetof(RCUtilityFunctionLibrary_SetCascadeRainColorIndex, ReturnValue) == 0x000004, "Member 'RCUtilityFunctionLibrary_SetCascadeRainColorIndex::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.SetDrawRain
// 0x0001 (0x0001 - 0x0000)
struct RCUtilityFunctionLibrary_SetDrawRain final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUtilityFunctionLibrary_SetDrawRain) == 0x000001, "Wrong alignment on RCUtilityFunctionLibrary_SetDrawRain");
static_assert(sizeof(RCUtilityFunctionLibrary_SetDrawRain) == 0x000001, "Wrong size on RCUtilityFunctionLibrary_SetDrawRain");
static_assert(offsetof(RCUtilityFunctionLibrary_SetDrawRain, flag) == 0x000000, "Member 'RCUtilityFunctionLibrary_SetDrawRain::flag' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.SetRainColorTable
// 0x000C (0x000C - 0x0000)
struct RCUtilityFunctionLibrary_SetRainColorTable final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUtilityFunctionLibrary_SetRainColorTable) == 0x000004, "Wrong alignment on RCUtilityFunctionLibrary_SetRainColorTable");
static_assert(sizeof(RCUtilityFunctionLibrary_SetRainColorTable) == 0x00000C, "Wrong size on RCUtilityFunctionLibrary_SetRainColorTable");
static_assert(offsetof(RCUtilityFunctionLibrary_SetRainColorTable, Name_0) == 0x000000, "Member 'RCUtilityFunctionLibrary_SetRainColorTable::Name_0' has a wrong offset!");
static_assert(offsetof(RCUtilityFunctionLibrary_SetRainColorTable, ReturnValue) == 0x000008, "Member 'RCUtilityFunctionLibrary_SetRainColorTable::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.SetRainForce
// 0x0008 (0x0008 - 0x0000)
struct RCUtilityFunctionLibrary_SetRainForce final
{
public:
	int32                                         Force;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUtilityFunctionLibrary_SetRainForce) == 0x000004, "Wrong alignment on RCUtilityFunctionLibrary_SetRainForce");
static_assert(sizeof(RCUtilityFunctionLibrary_SetRainForce) == 0x000008, "Wrong size on RCUtilityFunctionLibrary_SetRainForce");
static_assert(offsetof(RCUtilityFunctionLibrary_SetRainForce, Force) == 0x000000, "Member 'RCUtilityFunctionLibrary_SetRainForce::Force' has a wrong offset!");
static_assert(offsetof(RCUtilityFunctionLibrary_SetRainForce, ReturnValue) == 0x000004, "Member 'RCUtilityFunctionLibrary_SetRainForce::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.SetRainRot
// 0x0010 (0x0010 - 0x0000)
struct RCUtilityFunctionLibrary_SetRainRot final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUtilityFunctionLibrary_SetRainRot) == 0x000004, "Wrong alignment on RCUtilityFunctionLibrary_SetRainRot");
static_assert(sizeof(RCUtilityFunctionLibrary_SetRainRot) == 0x000010, "Wrong size on RCUtilityFunctionLibrary_SetRainRot");
static_assert(offsetof(RCUtilityFunctionLibrary_SetRainRot, Rot) == 0x000000, "Member 'RCUtilityFunctionLibrary_SetRainRot::Rot' has a wrong offset!");
static_assert(offsetof(RCUtilityFunctionLibrary_SetRainRot, ReturnValue) == 0x00000C, "Member 'RCUtilityFunctionLibrary_SetRainRot::ReturnValue' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.SetToonDirectionalLightInfo
// 0x0018 (0x0018 - 0x0000)
struct RCUtilityFunctionLibrary_SetToonDirectionalLightInfo final
{
public:
	class AActor*                                 InCameraActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotatorOffset;                                   // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCUtilityFunctionLibrary_SetToonDirectionalLightInfo) == 0x000008, "Wrong alignment on RCUtilityFunctionLibrary_SetToonDirectionalLightInfo");
static_assert(sizeof(RCUtilityFunctionLibrary_SetToonDirectionalLightInfo) == 0x000018, "Wrong size on RCUtilityFunctionLibrary_SetToonDirectionalLightInfo");
static_assert(offsetof(RCUtilityFunctionLibrary_SetToonDirectionalLightInfo, InCameraActor) == 0x000000, "Member 'RCUtilityFunctionLibrary_SetToonDirectionalLightInfo::InCameraActor' has a wrong offset!");
static_assert(offsetof(RCUtilityFunctionLibrary_SetToonDirectionalLightInfo, InRotatorOffset) == 0x000008, "Member 'RCUtilityFunctionLibrary_SetToonDirectionalLightInfo::InRotatorOffset' has a wrong offset!");

// Function RC.RCUtilityFunctionLibrary.SetToonDirectionalLightRotatorOffset
// 0x000C (0x000C - 0x0000)
struct RCUtilityFunctionLibrary_SetToonDirectionalLightRotatorOffset final
{
public:
	struct FRotator                               InRotatorOffset;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCUtilityFunctionLibrary_SetToonDirectionalLightRotatorOffset) == 0x000004, "Wrong alignment on RCUtilityFunctionLibrary_SetToonDirectionalLightRotatorOffset");
static_assert(sizeof(RCUtilityFunctionLibrary_SetToonDirectionalLightRotatorOffset) == 0x00000C, "Wrong size on RCUtilityFunctionLibrary_SetToonDirectionalLightRotatorOffset");
static_assert(offsetof(RCUtilityFunctionLibrary_SetToonDirectionalLightRotatorOffset, InRotatorOffset) == 0x000000, "Member 'RCUtilityFunctionLibrary_SetToonDirectionalLightRotatorOffset::InRotatorOffset' has a wrong offset!");

// Function RC.RCVariableFigureBFL.GetFigureNum
// 0x000C (0x000C - 0x0000)
struct RCVariableFigureBFL_GetFigureNum final
{
public:
	class FName                                   InPersonID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableFigureBFL_GetFigureNum) == 0x000004, "Wrong alignment on RCVariableFigureBFL_GetFigureNum");
static_assert(sizeof(RCVariableFigureBFL_GetFigureNum) == 0x00000C, "Wrong size on RCVariableFigureBFL_GetFigureNum");
static_assert(offsetof(RCVariableFigureBFL_GetFigureNum, InPersonID) == 0x000000, "Member 'RCVariableFigureBFL_GetFigureNum::InPersonID' has a wrong offset!");
static_assert(offsetof(RCVariableFigureBFL_GetFigureNum, ReturnValue) == 0x000008, "Member 'RCVariableFigureBFL_GetFigureNum::ReturnValue' has a wrong offset!");

// Function RC.RCVariableFigureBFL.IsFigure
// 0x0010 (0x0010 - 0x0000)
struct RCVariableFigureBFL_IsFigure final
{
public:
	class FName                                   InPersonID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFigureNum;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVariableFigureBFL_IsFigure) == 0x000004, "Wrong alignment on RCVariableFigureBFL_IsFigure");
static_assert(sizeof(RCVariableFigureBFL_IsFigure) == 0x000010, "Wrong size on RCVariableFigureBFL_IsFigure");
static_assert(offsetof(RCVariableFigureBFL_IsFigure, InPersonID) == 0x000000, "Member 'RCVariableFigureBFL_IsFigure::InPersonID' has a wrong offset!");
static_assert(offsetof(RCVariableFigureBFL_IsFigure, InFigureNum) == 0x000008, "Member 'RCVariableFigureBFL_IsFigure::InFigureNum' has a wrong offset!");
static_assert(offsetof(RCVariableFigureBFL_IsFigure, ReturnValue) == 0x00000C, "Member 'RCVariableFigureBFL_IsFigure::ReturnValue' has a wrong offset!");

// Function RC.RCVariableFigureBFL.SetFigure
// 0x000C (0x000C - 0x0000)
struct RCVariableFigureBFL_SetFigure final
{
public:
	class FName                                   InPersonID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFigureNum;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVariableFigureBFL_SetFigure) == 0x000004, "Wrong alignment on RCVariableFigureBFL_SetFigure");
static_assert(sizeof(RCVariableFigureBFL_SetFigure) == 0x00000C, "Wrong size on RCVariableFigureBFL_SetFigure");
static_assert(offsetof(RCVariableFigureBFL_SetFigure, InPersonID) == 0x000000, "Member 'RCVariableFigureBFL_SetFigure::InPersonID' has a wrong offset!");
static_assert(offsetof(RCVariableFigureBFL_SetFigure, InFigureNum) == 0x000008, "Member 'RCVariableFigureBFL_SetFigure::InFigureNum' has a wrong offset!");

// Function RC.RCVehicleBPFunctionLibrary.GetCrossWalkSignal
// 0x0001 (0x0001 - 0x0000)
struct RCVehicleBPFunctionLibrary_GetCrossWalkSignal final
{
public:
	ECrossWalkSignalType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleBPFunctionLibrary_GetCrossWalkSignal) == 0x000001, "Wrong alignment on RCVehicleBPFunctionLibrary_GetCrossWalkSignal");
static_assert(sizeof(RCVehicleBPFunctionLibrary_GetCrossWalkSignal) == 0x000001, "Wrong size on RCVehicleBPFunctionLibrary_GetCrossWalkSignal");
static_assert(offsetof(RCVehicleBPFunctionLibrary_GetCrossWalkSignal, ReturnValue) == 0x000000, "Member 'RCVehicleBPFunctionLibrary_GetCrossWalkSignal::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleBPFunctionLibrary.GetCrossWalkTriggerBox
// 0x0008 (0x0008 - 0x0000)
struct RCVehicleBPFunctionLibrary_GetCrossWalkTriggerBox final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleBPFunctionLibrary_GetCrossWalkTriggerBox) == 0x000008, "Wrong alignment on RCVehicleBPFunctionLibrary_GetCrossWalkTriggerBox");
static_assert(sizeof(RCVehicleBPFunctionLibrary_GetCrossWalkTriggerBox) == 0x000008, "Wrong size on RCVehicleBPFunctionLibrary_GetCrossWalkTriggerBox");
static_assert(offsetof(RCVehicleBPFunctionLibrary_GetCrossWalkTriggerBox, ReturnValue) == 0x000000, "Member 'RCVehicleBPFunctionLibrary_GetCrossWalkTriggerBox::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleBPFunctionLibrary.GetPlayerActor
// 0x0008 (0x0008 - 0x0000)
struct RCVehicleBPFunctionLibrary_GetPlayerActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleBPFunctionLibrary_GetPlayerActor) == 0x000008, "Wrong alignment on RCVehicleBPFunctionLibrary_GetPlayerActor");
static_assert(sizeof(RCVehicleBPFunctionLibrary_GetPlayerActor) == 0x000008, "Wrong size on RCVehicleBPFunctionLibrary_GetPlayerActor");
static_assert(offsetof(RCVehicleBPFunctionLibrary_GetPlayerActor, ReturnValue) == 0x000000, "Member 'RCVehicleBPFunctionLibrary_GetPlayerActor::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleBPFunctionLibrary.SetCrossWalkSignal
// 0x0001 (0x0001 - 0x0000)
struct RCVehicleBPFunctionLibrary_SetCrossWalkSignal final
{
public:
	ECrossWalkSignalType                          signalType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleBPFunctionLibrary_SetCrossWalkSignal) == 0x000001, "Wrong alignment on RCVehicleBPFunctionLibrary_SetCrossWalkSignal");
static_assert(sizeof(RCVehicleBPFunctionLibrary_SetCrossWalkSignal) == 0x000001, "Wrong size on RCVehicleBPFunctionLibrary_SetCrossWalkSignal");
static_assert(offsetof(RCVehicleBPFunctionLibrary_SetCrossWalkSignal, signalType) == 0x000000, "Member 'RCVehicleBPFunctionLibrary_SetCrossWalkSignal::signalType' has a wrong offset!");

// Function RC.RCVehicleBPFunctionLibrary.SetCrossWalkTriggerBox
// 0x0008 (0x0008 - 0x0000)
struct RCVehicleBPFunctionLibrary_SetCrossWalkTriggerBox final
{
public:
	class AActor*                                 crossWalkTrigger;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleBPFunctionLibrary_SetCrossWalkTriggerBox) == 0x000008, "Wrong alignment on RCVehicleBPFunctionLibrary_SetCrossWalkTriggerBox");
static_assert(sizeof(RCVehicleBPFunctionLibrary_SetCrossWalkTriggerBox) == 0x000008, "Wrong size on RCVehicleBPFunctionLibrary_SetCrossWalkTriggerBox");
static_assert(offsetof(RCVehicleBPFunctionLibrary_SetCrossWalkTriggerBox, crossWalkTrigger) == 0x000000, "Member 'RCVehicleBPFunctionLibrary_SetCrossWalkTriggerBox::crossWalkTrigger' has a wrong offset!");

// Function RC.RCVehicleControlComponent.ChangeState
// 0x0004 (0x0004 - 0x0000)
struct RCVehicleControlComponent_ChangeState final
{
public:
	int32                                         mstate;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_ChangeState) == 0x000004, "Wrong alignment on RCVehicleControlComponent_ChangeState");
static_assert(sizeof(RCVehicleControlComponent_ChangeState) == 0x000004, "Wrong size on RCVehicleControlComponent_ChangeState");
static_assert(offsetof(RCVehicleControlComponent_ChangeState, mstate) == 0x000000, "Member 'RCVehicleControlComponent_ChangeState::mstate' has a wrong offset!");

// Function RC.RCVehicleControlComponent.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct RCVehicleControlComponent_GetCurrentState final
{
public:
	EVehicleState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_GetCurrentState) == 0x000001, "Wrong alignment on RCVehicleControlComponent_GetCurrentState");
static_assert(sizeof(RCVehicleControlComponent_GetCurrentState) == 0x000001, "Wrong size on RCVehicleControlComponent_GetCurrentState");
static_assert(offsetof(RCVehicleControlComponent_GetCurrentState, ReturnValue) == 0x000000, "Member 'RCVehicleControlComponent_GetCurrentState::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleControlComponent.GetCurrentTarget
// 0x0008 (0x0008 - 0x0000)
struct RCVehicleControlComponent_GetCurrentTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_GetCurrentTarget) == 0x000008, "Wrong alignment on RCVehicleControlComponent_GetCurrentTarget");
static_assert(sizeof(RCVehicleControlComponent_GetCurrentTarget) == 0x000008, "Wrong size on RCVehicleControlComponent_GetCurrentTarget");
static_assert(offsetof(RCVehicleControlComponent_GetCurrentTarget, ReturnValue) == 0x000000, "Member 'RCVehicleControlComponent_GetCurrentTarget::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleControlComponent.GetNextTarget
// 0x0008 (0x0008 - 0x0000)
struct RCVehicleControlComponent_GetNextTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_GetNextTarget) == 0x000008, "Wrong alignment on RCVehicleControlComponent_GetNextTarget");
static_assert(sizeof(RCVehicleControlComponent_GetNextTarget) == 0x000008, "Wrong size on RCVehicleControlComponent_GetNextTarget");
static_assert(offsetof(RCVehicleControlComponent_GetNextTarget, ReturnValue) == 0x000000, "Member 'RCVehicleControlComponent_GetNextTarget::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleControlComponent.Initialize
// 0x0028 (0x0028 - 0x0000)
struct RCVehicleControlComponent_Initialize final
{
public:
	class AActor*                                 controlActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCVehicleTarget*                       startTarget;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCVehicleTarget*                       endTarget;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARCVehicleTarget*>               rootTargetArray;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_Initialize) == 0x000008, "Wrong alignment on RCVehicleControlComponent_Initialize");
static_assert(sizeof(RCVehicleControlComponent_Initialize) == 0x000028, "Wrong size on RCVehicleControlComponent_Initialize");
static_assert(offsetof(RCVehicleControlComponent_Initialize, controlActor) == 0x000000, "Member 'RCVehicleControlComponent_Initialize::controlActor' has a wrong offset!");
static_assert(offsetof(RCVehicleControlComponent_Initialize, startTarget) == 0x000008, "Member 'RCVehicleControlComponent_Initialize::startTarget' has a wrong offset!");
static_assert(offsetof(RCVehicleControlComponent_Initialize, endTarget) == 0x000010, "Member 'RCVehicleControlComponent_Initialize::endTarget' has a wrong offset!");
static_assert(offsetof(RCVehicleControlComponent_Initialize, rootTargetArray) == 0x000018, "Member 'RCVehicleControlComponent_Initialize::rootTargetArray' has a wrong offset!");

// Function RC.RCVehicleControlComponent.Move
// 0x0004 (0x0004 - 0x0000)
struct RCVehicleControlComponent_Move final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_Move) == 0x000004, "Wrong alignment on RCVehicleControlComponent_Move");
static_assert(sizeof(RCVehicleControlComponent_Move) == 0x000004, "Wrong size on RCVehicleControlComponent_Move");
static_assert(offsetof(RCVehicleControlComponent_Move, DeltaTime) == 0x000000, "Member 'RCVehicleControlComponent_Move::DeltaTime' has a wrong offset!");

// Function RC.RCVehicleControlComponent.SetBodyMesh
// 0x0008 (0x0008 - 0x0000)
struct RCVehicleControlComponent_SetBodyMesh final
{
public:
	class UStaticMeshComponent*                   pBodyMesh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_SetBodyMesh) == 0x000008, "Wrong alignment on RCVehicleControlComponent_SetBodyMesh");
static_assert(sizeof(RCVehicleControlComponent_SetBodyMesh) == 0x000008, "Wrong size on RCVehicleControlComponent_SetBodyMesh");
static_assert(offsetof(RCVehicleControlComponent_SetBodyMesh, pBodyMesh) == 0x000000, "Member 'RCVehicleControlComponent_SetBodyMesh::pBodyMesh' has a wrong offset!");

// Function RC.RCVehicleControlComponent.SetControlActor
// 0x0008 (0x0008 - 0x0000)
struct RCVehicleControlComponent_SetControlActor final
{
public:
	class AActor*                                 pControlActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_SetControlActor) == 0x000008, "Wrong alignment on RCVehicleControlComponent_SetControlActor");
static_assert(sizeof(RCVehicleControlComponent_SetControlActor) == 0x000008, "Wrong size on RCVehicleControlComponent_SetControlActor");
static_assert(offsetof(RCVehicleControlComponent_SetControlActor, pControlActor) == 0x000000, "Member 'RCVehicleControlComponent_SetControlActor::pControlActor' has a wrong offset!");

// Function RC.RCVehicleControlComponent.SetTiresMeshArray
// 0x0010 (0x0010 - 0x0000)
struct RCVehicleControlComponent_SetTiresMeshArray final
{
public:
	TArray<class UStaticMeshComponent*>           bpTiresMeshArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_SetTiresMeshArray) == 0x000008, "Wrong alignment on RCVehicleControlComponent_SetTiresMeshArray");
static_assert(sizeof(RCVehicleControlComponent_SetTiresMeshArray) == 0x000010, "Wrong size on RCVehicleControlComponent_SetTiresMeshArray");
static_assert(offsetof(RCVehicleControlComponent_SetTiresMeshArray, bpTiresMeshArray) == 0x000000, "Member 'RCVehicleControlComponent_SetTiresMeshArray::bpTiresMeshArray' has a wrong offset!");

// Function RC.RCVehicleControlComponent.SpeedControl
// 0x0004 (0x0004 - 0x0000)
struct RCVehicleControlComponent_SpeedControl final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleControlComponent_SpeedControl) == 0x000004, "Wrong alignment on RCVehicleControlComponent_SpeedControl");
static_assert(sizeof(RCVehicleControlComponent_SpeedControl) == 0x000004, "Wrong size on RCVehicleControlComponent_SpeedControl");
static_assert(offsetof(RCVehicleControlComponent_SpeedControl, DeltaTime) == 0x000000, "Member 'RCVehicleControlComponent_SpeedControl::DeltaTime' has a wrong offset!");

// Function RC.RCVehicleController.GerNearCrossWalk
// 0x0010 (0x0010 - 0x0000)
struct RCVehicleController_GerNearCrossWalk final
{
public:
	class AActor*                                 pCheckActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleCrossWalkState                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVehicleController_GerNearCrossWalk) == 0x000008, "Wrong alignment on RCVehicleController_GerNearCrossWalk");
static_assert(sizeof(RCVehicleController_GerNearCrossWalk) == 0x000010, "Wrong size on RCVehicleController_GerNearCrossWalk");
static_assert(offsetof(RCVehicleController_GerNearCrossWalk, pCheckActor) == 0x000000, "Member 'RCVehicleController_GerNearCrossWalk::pCheckActor' has a wrong offset!");
static_assert(offsetof(RCVehicleController_GerNearCrossWalk, ReturnValue) == 0x000008, "Member 'RCVehicleController_GerNearCrossWalk::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleController.GetVehicleRateIndex
// 0x0018 (0x0018 - 0x0000)
struct RCVehicleController_GetVehicleRateIndex final
{
public:
	TArray<int32>                                 rateArray;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVehicleController_GetVehicleRateIndex) == 0x000008, "Wrong alignment on RCVehicleController_GetVehicleRateIndex");
static_assert(sizeof(RCVehicleController_GetVehicleRateIndex) == 0x000018, "Wrong size on RCVehicleController_GetVehicleRateIndex");
static_assert(offsetof(RCVehicleController_GetVehicleRateIndex, rateArray) == 0x000000, "Member 'RCVehicleController_GetVehicleRateIndex::rateArray' has a wrong offset!");
static_assert(offsetof(RCVehicleController_GetVehicleRateIndex, ReturnValue) == 0x000010, "Member 'RCVehicleController_GetVehicleRateIndex::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleController.isOpenCrossWalk
// 0x0001 (0x0001 - 0x0000)
struct RCVehicleController_isOpenCrossWalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleController_isOpenCrossWalk) == 0x000001, "Wrong alignment on RCVehicleController_isOpenCrossWalk");
static_assert(sizeof(RCVehicleController_isOpenCrossWalk) == 0x000001, "Wrong size on RCVehicleController_isOpenCrossWalk");
static_assert(offsetof(RCVehicleController_isOpenCrossWalk, ReturnValue) == 0x000000, "Member 'RCVehicleController_isOpenCrossWalk::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleController.PopUpVehicle
// 0x0010 (0x0010 - 0x0000)
struct RCVehicleController_PopUpVehicle final
{
public:
	class ARCVehicleTarget*                       pInitStartTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleLaneType                              laneType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVehicleController_PopUpVehicle) == 0x000008, "Wrong alignment on RCVehicleController_PopUpVehicle");
static_assert(sizeof(RCVehicleController_PopUpVehicle) == 0x000010, "Wrong size on RCVehicleController_PopUpVehicle");
static_assert(offsetof(RCVehicleController_PopUpVehicle, pInitStartTarget) == 0x000000, "Member 'RCVehicleController_PopUpVehicle::pInitStartTarget' has a wrong offset!");
static_assert(offsetof(RCVehicleController_PopUpVehicle, laneType) == 0x000008, "Member 'RCVehicleController_PopUpVehicle::laneType' has a wrong offset!");
static_assert(offsetof(RCVehicleController_PopUpVehicle, ReturnValue) == 0x000009, "Member 'RCVehicleController_PopUpVehicle::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleManager.AddRunningVehicle
// 0x0010 (0x0010 - 0x0000)
struct RCVehicleManager_AddRunningVehicle final
{
public:
	class AActor*                                 pVehicle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleLaneType                              laneType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCVehicleManager_AddRunningVehicle) == 0x000008, "Wrong alignment on RCVehicleManager_AddRunningVehicle");
static_assert(sizeof(RCVehicleManager_AddRunningVehicle) == 0x000010, "Wrong size on RCVehicleManager_AddRunningVehicle");
static_assert(offsetof(RCVehicleManager_AddRunningVehicle, pVehicle) == 0x000000, "Member 'RCVehicleManager_AddRunningVehicle::pVehicle' has a wrong offset!");
static_assert(offsetof(RCVehicleManager_AddRunningVehicle, laneType) == 0x000008, "Member 'RCVehicleManager_AddRunningVehicle::laneType' has a wrong offset!");

// Function RC.RCVehicleManager.GetEnabledVehicleArray
// 0x0010 (0x0010 - 0x0000)
struct RCVehicleManager_GetEnabledVehicleArray final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_GetEnabledVehicleArray) == 0x000008, "Wrong alignment on RCVehicleManager_GetEnabledVehicleArray");
static_assert(sizeof(RCVehicleManager_GetEnabledVehicleArray) == 0x000010, "Wrong size on RCVehicleManager_GetEnabledVehicleArray");
static_assert(offsetof(RCVehicleManager_GetEnabledVehicleArray, ReturnValue) == 0x000000, "Member 'RCVehicleManager_GetEnabledVehicleArray::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleManager.GetLaneEndTarget
// 0x0010 (0x0010 - 0x0000)
struct RCVehicleManager_GetLaneEndTarget final
{
public:
	EVehicleLaneType                              laneType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCVehicleTarget*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_GetLaneEndTarget) == 0x000008, "Wrong alignment on RCVehicleManager_GetLaneEndTarget");
static_assert(sizeof(RCVehicleManager_GetLaneEndTarget) == 0x000010, "Wrong size on RCVehicleManager_GetLaneEndTarget");
static_assert(offsetof(RCVehicleManager_GetLaneEndTarget, laneType) == 0x000000, "Member 'RCVehicleManager_GetLaneEndTarget::laneType' has a wrong offset!");
static_assert(offsetof(RCVehicleManager_GetLaneEndTarget, ReturnValue) == 0x000008, "Member 'RCVehicleManager_GetLaneEndTarget::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleManager.GetLaneRootTargetArray
// 0x0018 (0x0018 - 0x0000)
struct RCVehicleManager_GetLaneRootTargetArray final
{
public:
	EVehicleLaneType                              laneType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARCVehicleTarget*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_GetLaneRootTargetArray) == 0x000008, "Wrong alignment on RCVehicleManager_GetLaneRootTargetArray");
static_assert(sizeof(RCVehicleManager_GetLaneRootTargetArray) == 0x000018, "Wrong size on RCVehicleManager_GetLaneRootTargetArray");
static_assert(offsetof(RCVehicleManager_GetLaneRootTargetArray, laneType) == 0x000000, "Member 'RCVehicleManager_GetLaneRootTargetArray::laneType' has a wrong offset!");
static_assert(offsetof(RCVehicleManager_GetLaneRootTargetArray, ReturnValue) == 0x000008, "Member 'RCVehicleManager_GetLaneRootTargetArray::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleManager.GetLaneStartTarget
// 0x0010 (0x0010 - 0x0000)
struct RCVehicleManager_GetLaneStartTarget final
{
public:
	EVehicleLaneType                              laneType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCVehicleTarget*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_GetLaneStartTarget) == 0x000008, "Wrong alignment on RCVehicleManager_GetLaneStartTarget");
static_assert(sizeof(RCVehicleManager_GetLaneStartTarget) == 0x000010, "Wrong size on RCVehicleManager_GetLaneStartTarget");
static_assert(offsetof(RCVehicleManager_GetLaneStartTarget, laneType) == 0x000000, "Member 'RCVehicleManager_GetLaneStartTarget::laneType' has a wrong offset!");
static_assert(offsetof(RCVehicleManager_GetLaneStartTarget, ReturnValue) == 0x000008, "Member 'RCVehicleManager_GetLaneStartTarget::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleManager.GetRunningVehicleArray
// 0x0010 (0x0010 - 0x0000)
struct RCVehicleManager_GetRunningVehicleArray final
{
public:
	TArray<struct FRCRunningVehicleData>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_GetRunningVehicleArray) == 0x000008, "Wrong alignment on RCVehicleManager_GetRunningVehicleArray");
static_assert(sizeof(RCVehicleManager_GetRunningVehicleArray) == 0x000010, "Wrong size on RCVehicleManager_GetRunningVehicleArray");
static_assert(offsetof(RCVehicleManager_GetRunningVehicleArray, ReturnValue) == 0x000000, "Member 'RCVehicleManager_GetRunningVehicleArray::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleManager.GetRunningVehicleForLane
// 0x0018 (0x0018 - 0x0000)
struct RCVehicleManager_GetRunningVehicleForLane final
{
public:
	EVehicleLaneType                              laneType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_GetRunningVehicleForLane) == 0x000008, "Wrong alignment on RCVehicleManager_GetRunningVehicleForLane");
static_assert(sizeof(RCVehicleManager_GetRunningVehicleForLane) == 0x000018, "Wrong size on RCVehicleManager_GetRunningVehicleForLane");
static_assert(offsetof(RCVehicleManager_GetRunningVehicleForLane, laneType) == 0x000000, "Member 'RCVehicleManager_GetRunningVehicleForLane::laneType' has a wrong offset!");
static_assert(offsetof(RCVehicleManager_GetRunningVehicleForLane, ReturnValue) == 0x000008, "Member 'RCVehicleManager_GetRunningVehicleForLane::ReturnValue' has a wrong offset!");

// Function RC.RCVehicleManager.SetEnableEngineSound
// 0x0001 (0x0001 - 0x0000)
struct RCVehicleManager_SetEnableEngineSound final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_SetEnableEngineSound) == 0x000001, "Wrong alignment on RCVehicleManager_SetEnableEngineSound");
static_assert(sizeof(RCVehicleManager_SetEnableEngineSound) == 0x000001, "Wrong size on RCVehicleManager_SetEnableEngineSound");
static_assert(offsetof(RCVehicleManager_SetEnableEngineSound, IsEnable) == 0x000000, "Member 'RCVehicleManager_SetEnableEngineSound::IsEnable' has a wrong offset!");

// Function RC.RCVehicleManager.SetEnableVehicleArray
// 0x0010 (0x0010 - 0x0000)
struct RCVehicleManager_SetEnableVehicleArray final
{
public:
	TArray<class AActor*>                         enableVehicleArray;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_SetEnableVehicleArray) == 0x000008, "Wrong alignment on RCVehicleManager_SetEnableVehicleArray");
static_assert(sizeof(RCVehicleManager_SetEnableVehicleArray) == 0x000010, "Wrong size on RCVehicleManager_SetEnableVehicleArray");
static_assert(offsetof(RCVehicleManager_SetEnableVehicleArray, enableVehicleArray) == 0x000000, "Member 'RCVehicleManager_SetEnableVehicleArray::enableVehicleArray' has a wrong offset!");

// Function RC.RCVehicleManager.SetLaneTargetArray
// 0x0018 (0x0018 - 0x0000)
struct RCVehicleManager_SetLaneTargetArray final
{
public:
	EVehicleLaneType                              laneType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         laneTargetArray;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_SetLaneTargetArray) == 0x000008, "Wrong alignment on RCVehicleManager_SetLaneTargetArray");
static_assert(sizeof(RCVehicleManager_SetLaneTargetArray) == 0x000018, "Wrong size on RCVehicleManager_SetLaneTargetArray");
static_assert(offsetof(RCVehicleManager_SetLaneTargetArray, laneType) == 0x000000, "Member 'RCVehicleManager_SetLaneTargetArray::laneType' has a wrong offset!");
static_assert(offsetof(RCVehicleManager_SetLaneTargetArray, laneTargetArray) == 0x000008, "Member 'RCVehicleManager_SetLaneTargetArray::laneTargetArray' has a wrong offset!");

// Function RC.RCVehicleManager.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct RCVehicleManager_SetVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleManager_SetVisible) == 0x000001, "Wrong alignment on RCVehicleManager_SetVisible");
static_assert(sizeof(RCVehicleManager_SetVisible) == 0x000001, "Wrong size on RCVehicleManager_SetVisible");
static_assert(offsetof(RCVehicleManager_SetVisible, IsVisible) == 0x000000, "Member 'RCVehicleManager_SetVisible::IsVisible' has a wrong offset!");

// Function RC.RCVehicleTarget.GetRootIndex
// 0x0004 (0x0004 - 0x0000)
struct RCVehicleTarget_GetRootIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCVehicleTarget_GetRootIndex) == 0x000004, "Wrong alignment on RCVehicleTarget_GetRootIndex");
static_assert(sizeof(RCVehicleTarget_GetRootIndex) == 0x000004, "Wrong size on RCVehicleTarget_GetRootIndex");
static_assert(offsetof(RCVehicleTarget_GetRootIndex, ReturnValue) == 0x000000, "Member 'RCVehicleTarget_GetRootIndex::ReturnValue' has a wrong offset!");

// Function RC.RCWanderingSpiritAnimInstance.SetLoopFlag
// 0x0002 (0x0002 - 0x0000)
struct RCWanderingSpiritAnimInstance_SetLoopFlag final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWanderingSpiritAnimInstance_SetLoopFlag) == 0x000001, "Wrong alignment on RCWanderingSpiritAnimInstance_SetLoopFlag");
static_assert(sizeof(RCWanderingSpiritAnimInstance_SetLoopFlag) == 0x000002, "Wrong size on RCWanderingSpiritAnimInstance_SetLoopFlag");
static_assert(offsetof(RCWanderingSpiritAnimInstance_SetLoopFlag, flag) == 0x000000, "Member 'RCWanderingSpiritAnimInstance_SetLoopFlag::flag' has a wrong offset!");
static_assert(offsetof(RCWanderingSpiritAnimInstance_SetLoopFlag, ReturnValue) == 0x000001, "Member 'RCWanderingSpiritAnimInstance_SetLoopFlag::ReturnValue' has a wrong offset!");

// Function RC.RCWanderingSpiritAnimInstance.SetMotionPart
// 0x0001 (0x0001 - 0x0000)
struct RCWanderingSpiritAnimInstance_SetMotionPart final
{
public:
	ERCWanderingSpiritMotionPart                  part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWanderingSpiritAnimInstance_SetMotionPart) == 0x000001, "Wrong alignment on RCWanderingSpiritAnimInstance_SetMotionPart");
static_assert(sizeof(RCWanderingSpiritAnimInstance_SetMotionPart) == 0x000001, "Wrong size on RCWanderingSpiritAnimInstance_SetMotionPart");
static_assert(offsetof(RCWanderingSpiritAnimInstance_SetMotionPart, part) == 0x000000, "Member 'RCWanderingSpiritAnimInstance_SetMotionPart::part' has a wrong offset!");

// Function RC.RCWanderingSpiritAnimInstance.StartInPart
// 0x0002 (0x0002 - 0x0000)
struct RCWanderingSpiritAnimInstance_StartInPart final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWanderingSpiritAnimInstance_StartInPart) == 0x000001, "Wrong alignment on RCWanderingSpiritAnimInstance_StartInPart");
static_assert(sizeof(RCWanderingSpiritAnimInstance_StartInPart) == 0x000002, "Wrong size on RCWanderingSpiritAnimInstance_StartInPart");
static_assert(offsetof(RCWanderingSpiritAnimInstance_StartInPart, bStart) == 0x000000, "Member 'RCWanderingSpiritAnimInstance_StartInPart::bStart' has a wrong offset!");
static_assert(offsetof(RCWanderingSpiritAnimInstance_StartInPart, ReturnValue) == 0x000001, "Member 'RCWanderingSpiritAnimInstance_StartInPart::ReturnValue' has a wrong offset!");

// Function RC.RCWanderingSpiritAnimInstance.StartLoopPart
// 0x0002 (0x0002 - 0x0000)
struct RCWanderingSpiritAnimInstance_StartLoopPart final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWanderingSpiritAnimInstance_StartLoopPart) == 0x000001, "Wrong alignment on RCWanderingSpiritAnimInstance_StartLoopPart");
static_assert(sizeof(RCWanderingSpiritAnimInstance_StartLoopPart) == 0x000002, "Wrong size on RCWanderingSpiritAnimInstance_StartLoopPart");
static_assert(offsetof(RCWanderingSpiritAnimInstance_StartLoopPart, bStart) == 0x000000, "Member 'RCWanderingSpiritAnimInstance_StartLoopPart::bStart' has a wrong offset!");
static_assert(offsetof(RCWanderingSpiritAnimInstance_StartLoopPart, ReturnValue) == 0x000001, "Member 'RCWanderingSpiritAnimInstance_StartLoopPart::ReturnValue' has a wrong offset!");

// Function RC.RCWanderingSpiritAnimInstance.StartOutPart
// 0x0002 (0x0002 - 0x0000)
struct RCWanderingSpiritAnimInstance_StartOutPart final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWanderingSpiritAnimInstance_StartOutPart) == 0x000001, "Wrong alignment on RCWanderingSpiritAnimInstance_StartOutPart");
static_assert(sizeof(RCWanderingSpiritAnimInstance_StartOutPart) == 0x000002, "Wrong size on RCWanderingSpiritAnimInstance_StartOutPart");
static_assert(offsetof(RCWanderingSpiritAnimInstance_StartOutPart, bStart) == 0x000000, "Member 'RCWanderingSpiritAnimInstance_StartOutPart::bStart' has a wrong offset!");
static_assert(offsetof(RCWanderingSpiritAnimInstance_StartOutPart, ReturnValue) == 0x000001, "Member 'RCWanderingSpiritAnimInstance_StartOutPart::ReturnValue' has a wrong offset!");

// Function RC.RCWanderingSpiritAnimInstance.GetLoopFlag
// 0x0001 (0x0001 - 0x0000)
struct RCWanderingSpiritAnimInstance_GetLoopFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCWanderingSpiritAnimInstance_GetLoopFlag) == 0x000001, "Wrong alignment on RCWanderingSpiritAnimInstance_GetLoopFlag");
static_assert(sizeof(RCWanderingSpiritAnimInstance_GetLoopFlag) == 0x000001, "Wrong size on RCWanderingSpiritAnimInstance_GetLoopFlag");
static_assert(offsetof(RCWanderingSpiritAnimInstance_GetLoopFlag, ReturnValue) == 0x000000, "Member 'RCWanderingSpiritAnimInstance_GetLoopFlag::ReturnValue' has a wrong offset!");

}

