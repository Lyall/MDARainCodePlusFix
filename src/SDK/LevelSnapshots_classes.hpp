#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelSnapshots

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LevelSnapshots_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class LevelSnapshots.ActorWithReferencesInCDO
// 0x0118 (0x0338 - 0x0220)
class AActorWithReferencesInCDO final : public AActor
{
public:
	TArray<struct FExternalReferenceDummy>        Array;                                             // 0x0220(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<struct FExternalReferenceDummy>          Set;                                               // 0x0230(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FExternalReferenceDummy>   IntKeyMap;                                         // 0x0280(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<struct FExternalReferenceDummy, int32>   IntValueMap;                                       // 0x02D0(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FExternalReferenceDummy                Struct;                                            // 0x0320(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            CubeMesh;                                          // 0x0328(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            CylinderMesh;                                      // 0x0330(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorWithReferencesInCDO">();
	}
	static class AActorWithReferencesInCDO* GetDefaultObj()
	{
		return GetDefaultObjImpl<AActorWithReferencesInCDO>();
	}
};
static_assert(alignof(AActorWithReferencesInCDO) == 0x000008, "Wrong alignment on AActorWithReferencesInCDO");
static_assert(sizeof(AActorWithReferencesInCDO) == 0x000338, "Wrong size on AActorWithReferencesInCDO");
static_assert(offsetof(AActorWithReferencesInCDO, Array) == 0x000220, "Member 'AActorWithReferencesInCDO::Array' has a wrong offset!");
static_assert(offsetof(AActorWithReferencesInCDO, Set) == 0x000230, "Member 'AActorWithReferencesInCDO::Set' has a wrong offset!");
static_assert(offsetof(AActorWithReferencesInCDO, IntKeyMap) == 0x000280, "Member 'AActorWithReferencesInCDO::IntKeyMap' has a wrong offset!");
static_assert(offsetof(AActorWithReferencesInCDO, IntValueMap) == 0x0002D0, "Member 'AActorWithReferencesInCDO::IntValueMap' has a wrong offset!");
static_assert(offsetof(AActorWithReferencesInCDO, Struct) == 0x000320, "Member 'AActorWithReferencesInCDO::Struct' has a wrong offset!");
static_assert(offsetof(AActorWithReferencesInCDO, CubeMesh) == 0x000328, "Member 'AActorWithReferencesInCDO::CubeMesh' has a wrong offset!");
static_assert(offsetof(AActorWithReferencesInCDO, CylinderMesh) == 0x000330, "Member 'AActorWithReferencesInCDO::CylinderMesh' has a wrong offset!");

// Class LevelSnapshots.LevelSnapshot
// 0x01D8 (0x0200 - 0x0028)
class ULevelSnapshot final : public UObject
{
public:
	class UWorld*                                 SnapshotContainerWorld;                            // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldSnapshotData                     SerializedData;                                    // 0x0038(0x0190)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        MapPath;                                           // 0x01C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              CaptureTime;                                       // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SnapshotName;                                      // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 SnapshotDescription;                               // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetSnapshotDescription(const class FString& InSnapshotDescription);
	void SetSnapshotName(const class FName& InSnapshotName);

	struct FDateTime GetCaptureTime() const;
	struct FSoftObjectPath GetMapPath() const;
	class FString GetSnapshotDescription() const;
	class FName GetSnapshotName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSnapshot">();
	}
	static class ULevelSnapshot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSnapshot>();
	}
};
static_assert(alignof(ULevelSnapshot) == 0x000008, "Wrong alignment on ULevelSnapshot");
static_assert(sizeof(ULevelSnapshot) == 0x000200, "Wrong size on ULevelSnapshot");
static_assert(offsetof(ULevelSnapshot, SnapshotContainerWorld) == 0x000028, "Member 'ULevelSnapshot::SnapshotContainerWorld' has a wrong offset!");
static_assert(offsetof(ULevelSnapshot, SerializedData) == 0x000038, "Member 'ULevelSnapshot::SerializedData' has a wrong offset!");
static_assert(offsetof(ULevelSnapshot, MapPath) == 0x0001C8, "Member 'ULevelSnapshot::MapPath' has a wrong offset!");
static_assert(offsetof(ULevelSnapshot, CaptureTime) == 0x0001E0, "Member 'ULevelSnapshot::CaptureTime' has a wrong offset!");
static_assert(offsetof(ULevelSnapshot, SnapshotName) == 0x0001E8, "Member 'ULevelSnapshot::SnapshotName' has a wrong offset!");
static_assert(offsetof(ULevelSnapshot, SnapshotDescription) == 0x0001F0, "Member 'ULevelSnapshot::SnapshotDescription' has a wrong offset!");

// Class LevelSnapshots.LevelSnapshotsEditorDataManagementSettings
// 0x0040 (0x0068 - 0x0028)
class ULevelSnapshotsEditorDataManagementSettings final : public UObject
{
public:
	struct FDirectoryPath                         RootLevelSnapshotSaveDir;                          // 0x0028(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	class FString                                 LevelSnapshotSaveDir;                              // 0x0038(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultLevelSnapshotName;                          // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FText ParseLevelSnapshotsTokensInText(const class FText& InTextToParse, const class FString& InWorldName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSnapshotsEditorDataManagementSettings">();
	}
	static class ULevelSnapshotsEditorDataManagementSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSnapshotsEditorDataManagementSettings>();
	}
};
static_assert(alignof(ULevelSnapshotsEditorDataManagementSettings) == 0x000008, "Wrong alignment on ULevelSnapshotsEditorDataManagementSettings");
static_assert(sizeof(ULevelSnapshotsEditorDataManagementSettings) == 0x000068, "Wrong size on ULevelSnapshotsEditorDataManagementSettings");
static_assert(offsetof(ULevelSnapshotsEditorDataManagementSettings, RootLevelSnapshotSaveDir) == 0x000028, "Member 'ULevelSnapshotsEditorDataManagementSettings::RootLevelSnapshotSaveDir' has a wrong offset!");
static_assert(offsetof(ULevelSnapshotsEditorDataManagementSettings, LevelSnapshotSaveDir) == 0x000038, "Member 'ULevelSnapshotsEditorDataManagementSettings::LevelSnapshotSaveDir' has a wrong offset!");
static_assert(offsetof(ULevelSnapshotsEditorDataManagementSettings, DefaultLevelSnapshotName) == 0x000048, "Member 'ULevelSnapshotsEditorDataManagementSettings::DefaultLevelSnapshotName' has a wrong offset!");

// Class LevelSnapshots.LevelSnapshotsEditorProjectSettings
// 0x00B0 (0x00D8 - 0x0028)
class ULevelSnapshotsEditorProjectSettings final : public UObject
{
public:
	struct FRestorationBlacklist                  Blacklist;                                         // 0x0028(0x00A0)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bEnableLevelSnapshotsToolbarButton;                // 0x00C8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCreationForm;                                  // 0x00C9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClickActorGroupToSelectActorInScene;              // 0x00CA(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB[0x1];                                       // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreferredCreationFormWindowWidth;                  // 0x00CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreferredCreationFormWindowHeight;                 // 0x00D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSnapshotsEditorProjectSettings">();
	}
	static class ULevelSnapshotsEditorProjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSnapshotsEditorProjectSettings>();
	}
};
static_assert(alignof(ULevelSnapshotsEditorProjectSettings) == 0x000008, "Wrong alignment on ULevelSnapshotsEditorProjectSettings");
static_assert(sizeof(ULevelSnapshotsEditorProjectSettings) == 0x0000D8, "Wrong size on ULevelSnapshotsEditorProjectSettings");
static_assert(offsetof(ULevelSnapshotsEditorProjectSettings, Blacklist) == 0x000028, "Member 'ULevelSnapshotsEditorProjectSettings::Blacklist' has a wrong offset!");
static_assert(offsetof(ULevelSnapshotsEditorProjectSettings, bEnableLevelSnapshotsToolbarButton) == 0x0000C8, "Member 'ULevelSnapshotsEditorProjectSettings::bEnableLevelSnapshotsToolbarButton' has a wrong offset!");
static_assert(offsetof(ULevelSnapshotsEditorProjectSettings, bUseCreationForm) == 0x0000C9, "Member 'ULevelSnapshotsEditorProjectSettings::bUseCreationForm' has a wrong offset!");
static_assert(offsetof(ULevelSnapshotsEditorProjectSettings, bClickActorGroupToSelectActorInScene) == 0x0000CA, "Member 'ULevelSnapshotsEditorProjectSettings::bClickActorGroupToSelectActorInScene' has a wrong offset!");
static_assert(offsetof(ULevelSnapshotsEditorProjectSettings, PreferredCreationFormWindowWidth) == 0x0000CC, "Member 'ULevelSnapshotsEditorProjectSettings::PreferredCreationFormWindowWidth' has a wrong offset!");
static_assert(offsetof(ULevelSnapshotsEditorProjectSettings, PreferredCreationFormWindowHeight) == 0x0000D0, "Member 'ULevelSnapshotsEditorProjectSettings::PreferredCreationFormWindowHeight' has a wrong offset!");

// Class LevelSnapshots.LevelSnapshotsFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class ULevelSnapshotsFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ApplySnapshotToWorld(const class UObject* WorldContextObject, class ULevelSnapshot* Snapshot, class ULevelSnapshotFilter* OptionalFilter);
	static class ULevelSnapshot* TakeLevelSnapshot(const class UObject* WorldContextObject, const class FName NewSnapshotName, const class FString& Description);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSnapshotsFunctionLibrary">();
	}
	static class ULevelSnapshotsFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSnapshotsFunctionLibrary>();
	}
};
static_assert(alignof(ULevelSnapshotsFunctionLibrary) == 0x000008, "Wrong alignment on ULevelSnapshotsFunctionLibrary");
static_assert(sizeof(ULevelSnapshotsFunctionLibrary) == 0x000028, "Wrong size on ULevelSnapshotsFunctionLibrary");

// Class LevelSnapshots.SubSubobject
// 0x0008 (0x0030 - 0x0028)
class USubSubobject final : public UObject
{
public:
	int32                                         IntProperty;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatProperty;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubSubobject">();
	}
	static class USubSubobject* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubSubobject>();
	}
};
static_assert(alignof(USubSubobject) == 0x000008, "Wrong alignment on USubSubobject");
static_assert(sizeof(USubSubobject) == 0x000030, "Wrong size on USubSubobject");
static_assert(offsetof(USubSubobject, IntProperty) == 0x000028, "Member 'USubSubobject::IntProperty' has a wrong offset!");
static_assert(offsetof(USubSubobject, FloatProperty) == 0x00002C, "Member 'USubSubobject::FloatProperty' has a wrong offset!");

// Class LevelSnapshots.Subobject
// 0x0010 (0x0038 - 0x0028)
class USubobject final : public UObject
{
public:
	int32                                         IntProperty;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatProperty;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubSubobject*                          NestedChild;                                       // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Subobject">();
	}
	static class USubobject* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubobject>();
	}
};
static_assert(alignof(USubobject) == 0x000008, "Wrong alignment on USubobject");
static_assert(sizeof(USubobject) == 0x000038, "Wrong size on USubobject");
static_assert(offsetof(USubobject, IntProperty) == 0x000028, "Member 'USubobject::IntProperty' has a wrong offset!");
static_assert(offsetof(USubobject, FloatProperty) == 0x00002C, "Member 'USubobject::FloatProperty' has a wrong offset!");
static_assert(offsetof(USubobject, NestedChild) == 0x000030, "Member 'USubobject::NestedChild' has a wrong offset!");

// Class LevelSnapshots.SnapshotTestComponent
// 0x0010 (0x00C0 - 0x00B0)
class USnapshotTestComponent final : public UActorComponent
{
public:
	int32                                         IntProperty;                                       // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatProperty;                                     // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubobject*                             Subobject;                                         // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapshotTestComponent">();
	}
	static class USnapshotTestComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapshotTestComponent>();
	}
};
static_assert(alignof(USnapshotTestComponent) == 0x000008, "Wrong alignment on USnapshotTestComponent");
static_assert(sizeof(USnapshotTestComponent) == 0x0000C0, "Wrong size on USnapshotTestComponent");
static_assert(offsetof(USnapshotTestComponent, IntProperty) == 0x0000B0, "Member 'USnapshotTestComponent::IntProperty' has a wrong offset!");
static_assert(offsetof(USnapshotTestComponent, FloatProperty) == 0x0000B4, "Member 'USnapshotTestComponent::FloatProperty' has a wrong offset!");
static_assert(offsetof(USnapshotTestComponent, Subobject) == 0x0000B8, "Member 'USnapshotTestComponent::Subobject' has a wrong offset!");

// Class LevelSnapshots.SnapshotTestActor
// 0x0380 (0x0840 - 0x04C0)
class ASnapshotTestActor final : public ACharacter
{
public:
	int32                                         DeprecatedProperty;                                // 0x04B8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransientProperty;                                 // 0x04BC(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntProperty;                                       // 0x04C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ObjectReference;                                   // 0x04C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ObjectArray;                                       // 0x04D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class UObject*>                          ObjectSet;                                         // 0x04E0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class UObject*>             ObjectMap;                                         // 0x0530(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SoftPath;                                          // 0x0580(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                SoftPathArray;                                     // 0x0598(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<struct FSoftObjectPath>                  SoftPathSet;                                       // 0x05A8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSoftObjectPath>     SoftPathMap;                                       // 0x05F8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 SoftObjectPtr;                                     // 0x0648(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         SoftObjectPtrArray;                                // 0x0670(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<TSoftObjectPtr<class UObject>>           SoftObjectPtrSet;                                  // 0x0680(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UObject>> SoftObjectPtrMap;                                  // 0x06D0(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 WeakObjectPtr;                                     // 0x0720(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UObject>>         WeakObjectPtrArray;                                // 0x0728(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<TWeakObjectPtr<class UObject>>           WeakObjectPtrSet;                                  // 0x0738(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TWeakObjectPtr<class UObject>> WeakObjectPtrMap;                                  // 0x0788(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	class UActorComponent*                        ExternalComponentReference;                        // 0x07D8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ExternalComponentReferenceAsUObject;               // 0x07E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     GradientLinearMaterial;                            // 0x07E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     GradientRadialMaterial;                            // 0x07F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            CubeMesh;                                          // 0x07F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            CylinderMesh;                                      // 0x0800(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInstancedStaticMeshComponent*          InstancedMeshComponent;                            // 0x0808(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPointLightComponent*                   PointLightComponent;                               // 0x0810(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapshotTestComponent*                 TestComponent;                                     // 0x0818(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubobject*                             EditableInstancedSubobject;                        // 0x0820(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubobject*                             InstancedSubobject;                                // 0x0828(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubobject*                             NakedSubobject;                                    // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_838[0x8];                                      // 0x0838(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapshotTestActor">();
	}
	static class ASnapshotTestActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnapshotTestActor>();
	}
};
static_assert(alignof(ASnapshotTestActor) == 0x000010, "Wrong alignment on ASnapshotTestActor");
static_assert(sizeof(ASnapshotTestActor) == 0x000840, "Wrong size on ASnapshotTestActor");
static_assert(offsetof(ASnapshotTestActor, DeprecatedProperty) == 0x0004B8, "Member 'ASnapshotTestActor::DeprecatedProperty' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, TransientProperty) == 0x0004BC, "Member 'ASnapshotTestActor::TransientProperty' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, IntProperty) == 0x0004C0, "Member 'ASnapshotTestActor::IntProperty' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, ObjectReference) == 0x0004C8, "Member 'ASnapshotTestActor::ObjectReference' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, ObjectArray) == 0x0004D0, "Member 'ASnapshotTestActor::ObjectArray' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, ObjectSet) == 0x0004E0, "Member 'ASnapshotTestActor::ObjectSet' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, ObjectMap) == 0x000530, "Member 'ASnapshotTestActor::ObjectMap' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, SoftPath) == 0x000580, "Member 'ASnapshotTestActor::SoftPath' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, SoftPathArray) == 0x000598, "Member 'ASnapshotTestActor::SoftPathArray' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, SoftPathSet) == 0x0005A8, "Member 'ASnapshotTestActor::SoftPathSet' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, SoftPathMap) == 0x0005F8, "Member 'ASnapshotTestActor::SoftPathMap' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, SoftObjectPtr) == 0x000648, "Member 'ASnapshotTestActor::SoftObjectPtr' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, SoftObjectPtrArray) == 0x000670, "Member 'ASnapshotTestActor::SoftObjectPtrArray' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, SoftObjectPtrSet) == 0x000680, "Member 'ASnapshotTestActor::SoftObjectPtrSet' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, SoftObjectPtrMap) == 0x0006D0, "Member 'ASnapshotTestActor::SoftObjectPtrMap' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, WeakObjectPtr) == 0x000720, "Member 'ASnapshotTestActor::WeakObjectPtr' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, WeakObjectPtrArray) == 0x000728, "Member 'ASnapshotTestActor::WeakObjectPtrArray' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, WeakObjectPtrSet) == 0x000738, "Member 'ASnapshotTestActor::WeakObjectPtrSet' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, WeakObjectPtrMap) == 0x000788, "Member 'ASnapshotTestActor::WeakObjectPtrMap' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, ExternalComponentReference) == 0x0007D8, "Member 'ASnapshotTestActor::ExternalComponentReference' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, ExternalComponentReferenceAsUObject) == 0x0007E0, "Member 'ASnapshotTestActor::ExternalComponentReferenceAsUObject' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, GradientLinearMaterial) == 0x0007E8, "Member 'ASnapshotTestActor::GradientLinearMaterial' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, GradientRadialMaterial) == 0x0007F0, "Member 'ASnapshotTestActor::GradientRadialMaterial' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, CubeMesh) == 0x0007F8, "Member 'ASnapshotTestActor::CubeMesh' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, CylinderMesh) == 0x000800, "Member 'ASnapshotTestActor::CylinderMesh' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, InstancedMeshComponent) == 0x000808, "Member 'ASnapshotTestActor::InstancedMeshComponent' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, PointLightComponent) == 0x000810, "Member 'ASnapshotTestActor::PointLightComponent' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, TestComponent) == 0x000818, "Member 'ASnapshotTestActor::TestComponent' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, EditableInstancedSubobject) == 0x000820, "Member 'ASnapshotTestActor::EditableInstancedSubobject' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, InstancedSubobject) == 0x000828, "Member 'ASnapshotTestActor::InstancedSubobject' has a wrong offset!");
static_assert(offsetof(ASnapshotTestActor, NakedSubobject) == 0x000830, "Member 'ASnapshotTestActor::NakedSubobject' has a wrong offset!");

}

