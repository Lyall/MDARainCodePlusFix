#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FreeTimeline

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum FreeTimeline.EKoratFreeTimelinePlayType
// NumValues: 0x0006
enum class EKoratFreeTimelinePlayType : uint8
{
	None                                     = 0,
	Play                                     = 1,
	PlayLP                                   = 2,
	PlayOT                                   = 3,
	Stop                                     = 4,
	EKoratFreeTimelinePlayType_MAX           = 5,
};

// Enum FreeTimeline.EKoratFreeTimelineAtbBrkType
// NumValues: 0x0002
enum class EKoratFreeTimelineAtbBrkType : uint8
{
	None                                     = 0,
	EKoratFreeTimelineAtbBrkType_MAX         = 1,
};

// Enum FreeTimeline.EKoratFreeTimelineAtbType
// NumValues: 0x0002
enum class EKoratFreeTimelineAtbType : uint8
{
	None                                     = 0,
	EKoratFreeTimelineAtbType_MAX            = 1,
};

// Enum FreeTimeline.EKoratFreeTimelineType
// NumValues: 0x0002
enum class EKoratFreeTimelineType : uint8
{
	None                                     = 0,
	EKoratFreeTimelineType_MAX               = 1,
};

// Enum FreeTimeline.EKoratAttachRotRule
// NumValues: 0x0007
enum class EKoratAttachRotRule : uint8
{
	None                                     = 0,
	ChrFront                                 = 1,
	ChrFrontZLock                            = 2,
	ChrMoveDir                               = 3,
	TwoBoneDir                               = 4,
	World                                    = 5,
	EKoratAttachRotRule_MAX                  = 6,
};

// ScriptStruct FreeTimeline.KoratSequencePlayInfo
// 0x0020 (0x0020 - 0x0000)
struct FKoratSequencePlayInfo final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextLabel;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSequencePlayInfo) == 0x000004, "Wrong alignment on FKoratSequencePlayInfo");
static_assert(sizeof(FKoratSequencePlayInfo) == 0x000020, "Wrong size on FKoratSequencePlayInfo");
static_assert(offsetof(FKoratSequencePlayInfo, Label) == 0x000000, "Member 'FKoratSequencePlayInfo::Label' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, NextLabel) == 0x000008, "Member 'FKoratSequencePlayInfo::NextLabel' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, Rate) == 0x000010, "Member 'FKoratSequencePlayInfo::Rate' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, LoopCount) == 0x000014, "Member 'FKoratSequencePlayInfo::LoopCount' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, Duration) == 0x000018, "Member 'FKoratSequencePlayInfo::Duration' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, bPauseAtEnd) == 0x00001C, "Member 'FKoratSequencePlayInfo::bPauseAtEnd' has a wrong offset!");

// ScriptStruct FreeTimeline.SequenceActorSpawnParameters
// 0x0090 (0x0090 - 0x0000)
struct FSequenceActorSpawnParameters final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratSequencePlayInfo>         PlaySeq;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLooped;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ManagedID;                                         // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindPlayer;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideTransformFlag;                            // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0xE];                                       // 0x0032(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OverrideTransform;                                 // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 OverrideTransformActor;                            // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayExec;                                         // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CancelSequence;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDataKey;                                     // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSequenceActorSpawnParameters) == 0x000010, "Wrong alignment on FSequenceActorSpawnParameters");
static_assert(sizeof(FSequenceActorSpawnParameters) == 0x000090, "Wrong size on FSequenceActorSpawnParameters");
static_assert(offsetof(FSequenceActorSpawnParameters, OwnerActor) == 0x000000, "Member 'FSequenceActorSpawnParameters::OwnerActor' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, LevelSequence) == 0x000008, "Member 'FSequenceActorSpawnParameters::LevelSequence' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, PlaySeq) == 0x000010, "Member 'FSequenceActorSpawnParameters::PlaySeq' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bLooped) == 0x000020, "Member 'FSequenceActorSpawnParameters::bLooped' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bPauseAtEnd) == 0x000021, "Member 'FSequenceActorSpawnParameters::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, ManagedID) == 0x000024, "Member 'FSequenceActorSpawnParameters::ManagedID' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, StartFrame) == 0x00002C, "Member 'FSequenceActorSpawnParameters::StartFrame' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bRebindPlayer) == 0x000030, "Member 'FSequenceActorSpawnParameters::bRebindPlayer' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bOverrideTransformFlag) == 0x000031, "Member 'FSequenceActorSpawnParameters::bOverrideTransformFlag' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, OverrideTransform) == 0x000040, "Member 'FSequenceActorSpawnParameters::OverrideTransform' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, OverrideTransformActor) == 0x000070, "Member 'FSequenceActorSpawnParameters::OverrideTransformActor' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bPlayExec) == 0x000078, "Member 'FSequenceActorSpawnParameters::bPlayExec' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CancelSequence) == 0x000080, "Member 'FSequenceActorSpawnParameters::CancelSequence' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, ActionDataKey) == 0x000088, "Member 'FSequenceActorSpawnParameters::ActionDataKey' has a wrong offset!");

// ScriptStruct FreeTimeline.KoratAttachParamInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FKoratAttachParamInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratAttachParamInfo) == 0x000004, "Wrong alignment on FKoratAttachParamInfo");
static_assert(sizeof(FKoratAttachParamInfo) == 0x000020, "Wrong size on FKoratAttachParamInfo");

// ScriptStruct FreeTimeline.KoratManagedId
// 0x0038 (0x0038 - 0x0000)
struct FKoratManagedId final
{
public:
	class FName                                   ManagedID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupId;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FormId;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentActorName;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SequenceActorName;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratManagedId) == 0x000008, "Wrong alignment on FKoratManagedId");
static_assert(sizeof(FKoratManagedId) == 0x000038, "Wrong size on FKoratManagedId");
static_assert(offsetof(FKoratManagedId, ManagedID) == 0x000000, "Member 'FKoratManagedId::ManagedID' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, GroupId) == 0x000008, "Member 'FKoratManagedId::GroupId' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, FormId) == 0x000010, "Member 'FKoratManagedId::FormId' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, ParentActorName) == 0x000018, "Member 'FKoratManagedId::ParentActorName' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, SequenceActorName) == 0x000020, "Member 'FKoratManagedId::SequenceActorName' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, ActorName) == 0x000028, "Member 'FKoratManagedId::ActorName' has a wrong offset!");

// ScriptStruct FreeTimeline.KoratSequencerRebindInfo
// 0x0040 (0x0040 - 0x0000)
struct FKoratSequencerRebindInfo final
{
public:
	struct FMovieSceneObjectBindingID             BindingID;                                         // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectName;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ActorGUID;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x14];                                      // 0x002C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSequencerRebindInfo) == 0x000008, "Wrong alignment on FKoratSequencerRebindInfo");
static_assert(sizeof(FKoratSequencerRebindInfo) == 0x000040, "Wrong size on FKoratSequencerRebindInfo");
static_assert(offsetof(FKoratSequencerRebindInfo, BindingID) == 0x000000, "Member 'FKoratSequencerRebindInfo::BindingID' has a wrong offset!");
static_assert(offsetof(FKoratSequencerRebindInfo, ObjectName) == 0x000018, "Member 'FKoratSequencerRebindInfo::ObjectName' has a wrong offset!");
static_assert(offsetof(FKoratSequencerRebindInfo, ActorGUID) == 0x000028, "Member 'FKoratSequencerRebindInfo::ActorGUID' has a wrong offset!");

// ScriptStruct FreeTimeline.KoratSequencerMarkerInfo
// 0x0018 (0x0018 - 0x0000)
struct FKoratSequencerMarkerInfo final
{
public:
	class FString                                 Label;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSequencerMarkerInfo) == 0x000008, "Wrong alignment on FKoratSequencerMarkerInfo");
static_assert(sizeof(FKoratSequencerMarkerInfo) == 0x000018, "Wrong size on FKoratSequencerMarkerInfo");
static_assert(offsetof(FKoratSequencerMarkerInfo, Label) == 0x000000, "Member 'FKoratSequencerMarkerInfo::Label' has a wrong offset!");
static_assert(offsetof(FKoratSequencerMarkerInfo, StartFrame) == 0x000010, "Member 'FKoratSequencerMarkerInfo::StartFrame' has a wrong offset!");
static_assert(offsetof(FKoratSequencerMarkerInfo, Duration) == 0x000014, "Member 'FKoratSequencerMarkerInfo::Duration' has a wrong offset!");

}

