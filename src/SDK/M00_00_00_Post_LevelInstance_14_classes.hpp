#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M00_00_00_Post_LevelInstance_14

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass M00_00_00_Post_LevelInstance_14.M00_00_00_Post_C
// 0x0078 (0x02A0 - 0x0228)
class AM00_00_00_Post_C final : public ALevelScriptActor
{
public:
	struct FVector                                Location_Base;                                     // 0x0228(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location_A;                                        // 0x0234(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location_B;                                        // 0x0240(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density_Base;                                      // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density_A;                                         // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density_B;                                         // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InscatteringColor_Base;                            // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InscatteringColor_A;                               // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InscatteringColor_B;                               // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightFallOff_Base;                                // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightFallOff_A;                                   // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightFallOff_B;                                   // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartDistance_Base;                                // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartDistance_A;                                   // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartDistance_B;                                   // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"M00_00_00_Post_C">();
	}
	static class AM00_00_00_Post_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AM00_00_00_Post_C>();
	}
};
static_assert(alignof(AM00_00_00_Post_C) == 0x000008, "Wrong alignment on AM00_00_00_Post_C");
static_assert(sizeof(AM00_00_00_Post_C) == 0x0002A0, "Wrong size on AM00_00_00_Post_C");
static_assert(offsetof(AM00_00_00_Post_C, Location_Base) == 0x000228, "Member 'AM00_00_00_Post_C::Location_Base' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, Location_A) == 0x000234, "Member 'AM00_00_00_Post_C::Location_A' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, Location_B) == 0x000240, "Member 'AM00_00_00_Post_C::Location_B' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, Density_Base) == 0x00024C, "Member 'AM00_00_00_Post_C::Density_Base' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, Density_A) == 0x000250, "Member 'AM00_00_00_Post_C::Density_A' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, Density_B) == 0x000254, "Member 'AM00_00_00_Post_C::Density_B' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, InscatteringColor_Base) == 0x000258, "Member 'AM00_00_00_Post_C::InscatteringColor_Base' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, InscatteringColor_A) == 0x000268, "Member 'AM00_00_00_Post_C::InscatteringColor_A' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, InscatteringColor_B) == 0x000278, "Member 'AM00_00_00_Post_C::InscatteringColor_B' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, HeightFallOff_Base) == 0x000288, "Member 'AM00_00_00_Post_C::HeightFallOff_Base' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, HeightFallOff_A) == 0x00028C, "Member 'AM00_00_00_Post_C::HeightFallOff_A' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, HeightFallOff_B) == 0x000290, "Member 'AM00_00_00_Post_C::HeightFallOff_B' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, StartDistance_Base) == 0x000294, "Member 'AM00_00_00_Post_C::StartDistance_Base' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, StartDistance_A) == 0x000298, "Member 'AM00_00_00_Post_C::StartDistance_A' has a wrong offset!");
static_assert(offsetof(AM00_00_00_Post_C, StartDistance_B) == 0x00029C, "Member 'AM00_00_00_Post_C::StartDistance_B' has a wrong offset!");

}

