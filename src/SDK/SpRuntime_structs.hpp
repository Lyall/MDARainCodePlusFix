#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieSceneTracks_structs.hpp"
#include "MovieScene_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum SpRuntime.ESpLocationStaticVertSurfaceSource
// NumValues: 0x0003
enum class ESpLocationStaticVertSurfaceSource : uint8
{
	SP_STATICVERTSURFACESOURCE_Vert          = 0,
	SP_STATICVERTSURFACESOURCE_Surface       = 1,
	SP_STATICVERTSURFACESOURCE_MAX           = 2,
};

// Enum SpRuntime.ESpUIScrollDirection
// NumValues: 0x0005
enum class ESpUIScrollDirection : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Up                                       = 2,
	Down                                     = 3,
	ESpUIScrollDirection_MAX                 = 4,
};

// Enum SpRuntime.EPratformTypes
// NumValues: 0x000B
enum class EPratformTypes : uint32
{
	None                                     = 0,
	Windows                                  = 1,
	PS4                                      = 2,
	PS5                                      = 4,
	XboxOne                                  = 8,
	XboxSX                                   = 16,
	Switch                                   = 32,
	PlayStation                              = 6,
	Xbox                                     = 24,
	All                                      = 63,
	EPratformTypes_MAX                       = 64,
};

// Enum SpRuntime.ESpUIParticleRotateType
// NumValues: 0x0004
enum class ESpUIParticleRotateType : uint8
{
	Both                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	ESpUIParticleRotateType_MAX              = 3,
};

// Enum SpRuntime.ESpUIParticleType
// NumValues: 0x0005
enum class ESpUIParticleType : uint8
{
	Once                                     = 0,
	Loop                                     = 1,
	Loop_Anytime                             = 2,
	Loop_Finished                            = 3,
	ESpUIParticleType_MAX                    = 4,
};

// ScriptStruct SpRuntime.SpComboBoxStringSettingItem
// 0x0040 (0x0040 - 0x0000)
struct FSpComboBoxStringSettingItem final
{
public:
	class FString                                 StructTypeName;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubjectVariableName;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DataTableAsset;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExposeToCinematics;                               // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpComboBoxStringSettingItem) == 0x000008, "Wrong alignment on FSpComboBoxStringSettingItem");
static_assert(sizeof(FSpComboBoxStringSettingItem) == 0x000040, "Wrong size on FSpComboBoxStringSettingItem");
static_assert(offsetof(FSpComboBoxStringSettingItem, StructTypeName) == 0x000000, "Member 'FSpComboBoxStringSettingItem::StructTypeName' has a wrong offset!");
static_assert(offsetof(FSpComboBoxStringSettingItem, SubjectVariableName) == 0x000010, "Member 'FSpComboBoxStringSettingItem::SubjectVariableName' has a wrong offset!");
static_assert(offsetof(FSpComboBoxStringSettingItem, DataTableAsset) == 0x000020, "Member 'FSpComboBoxStringSettingItem::DataTableAsset' has a wrong offset!");
static_assert(offsetof(FSpComboBoxStringSettingItem, bExposeToCinematics) == 0x000038, "Member 'FSpComboBoxStringSettingItem::bExposeToCinematics' has a wrong offset!");

// ScriptStruct SpRuntime.SpMovieSceneComboBoxStringChannel
// 0x0000 (0x00A0 - 0x00A0)
struct FSpMovieSceneComboBoxStringChannel final : public FMovieSceneStringChannel
{
};
static_assert(alignof(FSpMovieSceneComboBoxStringChannel) == 0x000008, "Wrong alignment on FSpMovieSceneComboBoxStringChannel");
static_assert(sizeof(FSpMovieSceneComboBoxStringChannel) == 0x0000A0, "Wrong size on FSpMovieSceneComboBoxStringChannel");

// ScriptStruct SpRuntime.SpMovieSceneComboBoxStringSectionTemplate
// 0x00A0 (0x00D8 - 0x0038)
struct FSpMovieSceneComboBoxStringSectionTemplate final : public FMovieScenePropertySectionTemplate
{
public:
	struct FSpMovieSceneComboBoxStringChannel     StringCurve;                                       // 0x0038(0x00A0)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSpMovieSceneComboBoxStringSectionTemplate) == 0x000008, "Wrong alignment on FSpMovieSceneComboBoxStringSectionTemplate");
static_assert(sizeof(FSpMovieSceneComboBoxStringSectionTemplate) == 0x0000D8, "Wrong size on FSpMovieSceneComboBoxStringSectionTemplate");
static_assert(offsetof(FSpMovieSceneComboBoxStringSectionTemplate, StringCurve) == 0x000038, "Member 'FSpMovieSceneComboBoxStringSectionTemplate::StringCurve' has a wrong offset!");

// ScriptStruct SpRuntime.SpDebugModelViewerModelHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSpDebugModelViewerModelHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpDebugModelViewerModelHandle) == 0x000004, "Wrong alignment on FSpDebugModelViewerModelHandle");
static_assert(sizeof(FSpDebugModelViewerModelHandle) == 0x000008, "Wrong size on FSpDebugModelViewerModelHandle");

// ScriptStruct SpRuntime.SpUICollisionNavigationData
// 0x0010 (0x0010 - 0x0000)
struct FSpUICollisionNavigationData final
{
public:
	int32                                         Left;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Up;                                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Down;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpUICollisionNavigationData) == 0x000004, "Wrong alignment on FSpUICollisionNavigationData");
static_assert(sizeof(FSpUICollisionNavigationData) == 0x000010, "Wrong size on FSpUICollisionNavigationData");
static_assert(offsetof(FSpUICollisionNavigationData, Left) == 0x000000, "Member 'FSpUICollisionNavigationData::Left' has a wrong offset!");
static_assert(offsetof(FSpUICollisionNavigationData, Right) == 0x000004, "Member 'FSpUICollisionNavigationData::Right' has a wrong offset!");
static_assert(offsetof(FSpUICollisionNavigationData, Up) == 0x000008, "Member 'FSpUICollisionNavigationData::Up' has a wrong offset!");
static_assert(offsetof(FSpUICollisionNavigationData, Down) == 0x00000C, "Member 'FSpUICollisionNavigationData::Down' has a wrong offset!");

// ScriptStruct SpRuntime.SpMovieSceneComboBoxStructVariableInfo
// 0x0020 (0x0020 - 0x0000)
struct FSpMovieSceneComboBoxStructVariableInfo final
{
public:
	class FString                                 StructTypeName;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpMovieSceneComboBoxStructVariableInfo) == 0x000008, "Wrong alignment on FSpMovieSceneComboBoxStructVariableInfo");
static_assert(sizeof(FSpMovieSceneComboBoxStructVariableInfo) == 0x000020, "Wrong size on FSpMovieSceneComboBoxStructVariableInfo");
static_assert(offsetof(FSpMovieSceneComboBoxStructVariableInfo, StructTypeName) == 0x000000, "Member 'FSpMovieSceneComboBoxStructVariableInfo::StructTypeName' has a wrong offset!");
static_assert(offsetof(FSpMovieSceneComboBoxStructVariableInfo, VariableName) == 0x000010, "Member 'FSpMovieSceneComboBoxStructVariableInfo::VariableName' has a wrong offset!");

// ScriptStruct SpRuntime.SpUICollisionAreaData
// 0x0020 (0x0020 - 0x0000)
struct FSpUICollisionAreaData final
{
public:
	struct FVector2D                              LeftTop;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightTop;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftBottom;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightBottom;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpUICollisionAreaData) == 0x000004, "Wrong alignment on FSpUICollisionAreaData");
static_assert(sizeof(FSpUICollisionAreaData) == 0x000020, "Wrong size on FSpUICollisionAreaData");
static_assert(offsetof(FSpUICollisionAreaData, LeftTop) == 0x000000, "Member 'FSpUICollisionAreaData::LeftTop' has a wrong offset!");
static_assert(offsetof(FSpUICollisionAreaData, RightTop) == 0x000008, "Member 'FSpUICollisionAreaData::RightTop' has a wrong offset!");
static_assert(offsetof(FSpUICollisionAreaData, LeftBottom) == 0x000010, "Member 'FSpUICollisionAreaData::LeftBottom' has a wrong offset!");
static_assert(offsetof(FSpUICollisionAreaData, RightBottom) == 0x000018, "Member 'FSpUICollisionAreaData::RightBottom' has a wrong offset!");

// ScriptStruct SpRuntime.SpUICollisionBoxData
// 0x0040 (0x0040 - 0x0000)
struct FSpUICollisionBoxData final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                BindWidget;                                        // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpUICollisionAreaData                 Area;                                              // 0x0010(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSpUICollisionNavigationData           Navigation;                                        // 0x0030(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpUICollisionBoxData) == 0x000008, "Wrong alignment on FSpUICollisionBoxData");
static_assert(sizeof(FSpUICollisionBoxData) == 0x000040, "Wrong size on FSpUICollisionBoxData");
static_assert(offsetof(FSpUICollisionBoxData, Priority) == 0x000000, "Member 'FSpUICollisionBoxData::Priority' has a wrong offset!");
static_assert(offsetof(FSpUICollisionBoxData, BindWidget) == 0x000008, "Member 'FSpUICollisionBoxData::BindWidget' has a wrong offset!");
static_assert(offsetof(FSpUICollisionBoxData, Area) == 0x000010, "Member 'FSpUICollisionBoxData::Area' has a wrong offset!");
static_assert(offsetof(FSpUICollisionBoxData, Navigation) == 0x000030, "Member 'FSpUICollisionBoxData::Navigation' has a wrong offset!");

// ScriptStruct SpRuntime.SpUIRichTextIconMaskRow
// 0x01A0 (0x01A8 - 0x0008)
struct FSpUIRichTextIconMaskRow final : public FTableRowBase
{
public:
	float                                         RangeOfShort;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOfLong;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ShortMask;                                         // 0x0010(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MiddleMask;                                        // 0x0098(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LongMask;                                          // 0x0120(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpUIRichTextIconMaskRow) == 0x000008, "Wrong alignment on FSpUIRichTextIconMaskRow");
static_assert(sizeof(FSpUIRichTextIconMaskRow) == 0x0001A8, "Wrong size on FSpUIRichTextIconMaskRow");
static_assert(offsetof(FSpUIRichTextIconMaskRow, RangeOfShort) == 0x000008, "Member 'FSpUIRichTextIconMaskRow::RangeOfShort' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconMaskRow, RangeOfLong) == 0x00000C, "Member 'FSpUIRichTextIconMaskRow::RangeOfLong' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconMaskRow, ShortMask) == 0x000010, "Member 'FSpUIRichTextIconMaskRow::ShortMask' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconMaskRow, MiddleMask) == 0x000098, "Member 'FSpUIRichTextIconMaskRow::MiddleMask' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconMaskRow, LongMask) == 0x000120, "Member 'FSpUIRichTextIconMaskRow::LongMask' has a wrong offset!");

// ScriptStruct SpRuntime.SpUIRichTextIconRow
// 0x0100 (0x0108 - 0x0008)
struct FSpUIRichTextIconRow final : public FTableRowBase
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	EVerticalAlignment                            IconVerticalAlign;                                 // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0098(0x0058)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextMinWidth;                                      // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextMaxWidth;                                      // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextBaselineExtend;                                // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextPadding;                                       // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextPaddingVertical;                               // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconPadding;                                       // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpUIRichTextIconRow) == 0x000008, "Wrong alignment on FSpUIRichTextIconRow");
static_assert(sizeof(FSpUIRichTextIconRow) == 0x000108, "Wrong size on FSpUIRichTextIconRow");
static_assert(offsetof(FSpUIRichTextIconRow, Brush) == 0x000008, "Member 'FSpUIRichTextIconRow::Brush' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconRow, IconVerticalAlign) == 0x000090, "Member 'FSpUIRichTextIconRow::IconVerticalAlign' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconRow, Font) == 0x000098, "Member 'FSpUIRichTextIconRow::Font' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconRow, TextMinWidth) == 0x0000F0, "Member 'FSpUIRichTextIconRow::TextMinWidth' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconRow, TextMaxWidth) == 0x0000F4, "Member 'FSpUIRichTextIconRow::TextMaxWidth' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconRow, TextBaselineExtend) == 0x0000F8, "Member 'FSpUIRichTextIconRow::TextBaselineExtend' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconRow, TextPadding) == 0x0000FC, "Member 'FSpUIRichTextIconRow::TextPadding' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconRow, TextPaddingVertical) == 0x000100, "Member 'FSpUIRichTextIconRow::TextPaddingVertical' has a wrong offset!");
static_assert(offsetof(FSpUIRichTextIconRow, IconPadding) == 0x000104, "Member 'FSpUIRichTextIconRow::IconPadding' has a wrong offset!");

// ScriptStruct SpRuntime.IconSetData
// 0x0030 (0x0030 - 0x0000)
struct FIconSetData final
{
public:
	EPratformTypes                                UsingPlatformType;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              IconSet;                                           // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIconSetData) == 0x000008, "Wrong alignment on FIconSetData");
static_assert(sizeof(FIconSetData) == 0x000030, "Wrong size on FIconSetData");
static_assert(offsetof(FIconSetData, UsingPlatformType) == 0x000000, "Member 'FIconSetData::UsingPlatformType' has a wrong offset!");
static_assert(offsetof(FIconSetData, IconSet) == 0x000008, "Member 'FIconSetData::IconSet' has a wrong offset!");

// ScriptStruct SpRuntime.SpUIRichTextReferenceRow
// 0x0000 (0x0008 - 0x0008)
struct FSpUIRichTextReferenceRow : public FTableRowBase
{
};
static_assert(alignof(FSpUIRichTextReferenceRow) == 0x000008, "Wrong alignment on FSpUIRichTextReferenceRow");
static_assert(sizeof(FSpUIRichTextReferenceRow) == 0x000008, "Wrong size on FSpUIRichTextReferenceRow");

// ScriptStruct SpRuntime.SpUIRichTextReferencePlaceRow
// 0x0008 (0x0010 - 0x0008)
struct FSpUIRichTextReferencePlaceRow final : public FSpUIRichTextReferenceRow
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSpUIRichTextReferencePlaceRow) == 0x000008, "Wrong alignment on FSpUIRichTextReferencePlaceRow");
static_assert(sizeof(FSpUIRichTextReferencePlaceRow) == 0x000010, "Wrong size on FSpUIRichTextReferencePlaceRow");
static_assert(offsetof(FSpUIRichTextReferencePlaceRow, Name) == 0x000008, "Member 'FSpUIRichTextReferencePlaceRow::Name' has a wrong offset!");

// ScriptStruct SpRuntime.SpUIRichTextReferenceNameRow
// 0x0008 (0x0010 - 0x0008)
struct FSpUIRichTextReferenceNameRow final : public FSpUIRichTextReferenceRow
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSpUIRichTextReferenceNameRow) == 0x000008, "Wrong alignment on FSpUIRichTextReferenceNameRow");
static_assert(sizeof(FSpUIRichTextReferenceNameRow) == 0x000010, "Wrong size on FSpUIRichTextReferenceNameRow");
static_assert(offsetof(FSpUIRichTextReferenceNameRow, Name) == 0x000008, "Member 'FSpUIRichTextReferenceNameRow::Name' has a wrong offset!");

}

