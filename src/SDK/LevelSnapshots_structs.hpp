#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelSnapshots

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct LevelSnapshots.ComponentSnapshotData
// 0x0001 (0x0001 - 0x0000)
struct FComponentSnapshotData final
{
public:
	EComponentCreationMethod                      CreationMethod;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComponentSnapshotData) == 0x000001, "Wrong alignment on FComponentSnapshotData");
static_assert(sizeof(FComponentSnapshotData) == 0x000001, "Wrong size on FComponentSnapshotData");
static_assert(offsetof(FComponentSnapshotData, CreationMethod) == 0x000000, "Member 'FComponentSnapshotData::CreationMethod' has a wrong offset!");

// ScriptStruct LevelSnapshots.ObjectSnapshotData
// 0x0010 (0x0010 - 0x0000)
struct FObjectSnapshotData
{
public:
	TArray<uint8>                                 SerializedData;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectSnapshotData) == 0x000008, "Wrong alignment on FObjectSnapshotData");
static_assert(sizeof(FObjectSnapshotData) == 0x000010, "Wrong size on FObjectSnapshotData");
static_assert(offsetof(FObjectSnapshotData, SerializedData) == 0x000000, "Member 'FObjectSnapshotData::SerializedData' has a wrong offset!");

// ScriptStruct LevelSnapshots.CustomSubbjectSerializationData
// 0x0018 (0x0028 - 0x0010)
struct FCustomSubbjectSerializationData final : public FObjectSnapshotData
{
public:
	int32                                         ObjectPathIndex;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 SubobjectAnnotationData;                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomSubbjectSerializationData) == 0x000008, "Wrong alignment on FCustomSubbjectSerializationData");
static_assert(sizeof(FCustomSubbjectSerializationData) == 0x000028, "Wrong size on FCustomSubbjectSerializationData");
static_assert(offsetof(FCustomSubbjectSerializationData, ObjectPathIndex) == 0x000010, "Member 'FCustomSubbjectSerializationData::ObjectPathIndex' has a wrong offset!");
static_assert(offsetof(FCustomSubbjectSerializationData, SubobjectAnnotationData) == 0x000018, "Member 'FCustomSubbjectSerializationData::SubobjectAnnotationData' has a wrong offset!");

// ScriptStruct LevelSnapshots.CustomSerializationData
// 0x0020 (0x0020 - 0x0000)
struct FCustomSerializationData final
{
public:
	TArray<uint8>                                 RootAnnotationData;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomSubbjectSerializationData> Subobjects;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomSerializationData) == 0x000008, "Wrong alignment on FCustomSerializationData");
static_assert(sizeof(FCustomSerializationData) == 0x000020, "Wrong size on FCustomSerializationData");
static_assert(offsetof(FCustomSerializationData, RootAnnotationData) == 0x000000, "Member 'FCustomSerializationData::RootAnnotationData' has a wrong offset!");
static_assert(offsetof(FCustomSerializationData, Subobjects) == 0x000010, "Member 'FCustomSerializationData::Subobjects' has a wrong offset!");

// ScriptStruct LevelSnapshots.ActorSnapshotData
// 0x00A8 (0x00A8 - 0x0000)
struct FActorSnapshotData final
{
public:
	TWeakObjectPtr<class AActor>                  CachedSnapshotActor;                               // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bReceivedSerialisation;                            // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         ActorClass;                                        // 0x0010(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FObjectSnapshotData                    SerializedActorData;                               // 0x0028(0x0010)(NativeAccessSpecifierPrivate)
	struct FCustomSerializationData               CustomActorSerializationData;                      // 0x0038(0x0020)(NativeAccessSpecifierPrivate)
	TMap<int32, struct FComponentSnapshotData>    ComponentData;                                     // 0x0058(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FActorSnapshotData) == 0x000008, "Wrong alignment on FActorSnapshotData");
static_assert(sizeof(FActorSnapshotData) == 0x0000A8, "Wrong size on FActorSnapshotData");
static_assert(offsetof(FActorSnapshotData, CachedSnapshotActor) == 0x000000, "Member 'FActorSnapshotData::CachedSnapshotActor' has a wrong offset!");
static_assert(offsetof(FActorSnapshotData, bReceivedSerialisation) == 0x000008, "Member 'FActorSnapshotData::bReceivedSerialisation' has a wrong offset!");
static_assert(offsetof(FActorSnapshotData, ActorClass) == 0x000010, "Member 'FActorSnapshotData::ActorClass' has a wrong offset!");
static_assert(offsetof(FActorSnapshotData, SerializedActorData) == 0x000028, "Member 'FActorSnapshotData::SerializedActorData' has a wrong offset!");
static_assert(offsetof(FActorSnapshotData, CustomActorSerializationData) == 0x000038, "Member 'FActorSnapshotData::CustomActorSerializationData' has a wrong offset!");
static_assert(offsetof(FActorSnapshotData, ComponentData) == 0x000058, "Member 'FActorSnapshotData::ComponentData' has a wrong offset!");

// ScriptStruct LevelSnapshots.ExternalReferenceDummy
// 0x0008 (0x0008 - 0x0000)
struct FExternalReferenceDummy final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExternalReferenceDummy) == 0x000008, "Wrong alignment on FExternalReferenceDummy");
static_assert(sizeof(FExternalReferenceDummy) == 0x000008, "Wrong size on FExternalReferenceDummy");
static_assert(offsetof(FExternalReferenceDummy, Object) == 0x000000, "Member 'FExternalReferenceDummy::Object' has a wrong offset!");

// ScriptStruct LevelSnapshots.ClassDefaultObjectSnapshotData
// 0x0008 (0x0018 - 0x0010)
struct FClassDefaultObjectSnapshotData final : public FObjectSnapshotData
{
public:
	class UObject*                                CachedLoadedClassDefault;                          // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClassDefaultObjectSnapshotData) == 0x000008, "Wrong alignment on FClassDefaultObjectSnapshotData");
static_assert(sizeof(FClassDefaultObjectSnapshotData) == 0x000018, "Wrong size on FClassDefaultObjectSnapshotData");
static_assert(offsetof(FClassDefaultObjectSnapshotData, CachedLoadedClassDefault) == 0x000010, "Member 'FClassDefaultObjectSnapshotData::CachedLoadedClassDefault' has a wrong offset!");

// ScriptStruct LevelSnapshots.PropertySelectionMap
// 0x00F0 (0x00F0 - 0x0000)
struct FPropertySelectionMap final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FSoftObjectPath>                  DeletedActorsToRespawn;                            // 0x0050(0x0050)(NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class AActor>>            NewActorsToDespawn;                                // 0x00A0(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPropertySelectionMap) == 0x000008, "Wrong alignment on FPropertySelectionMap");
static_assert(sizeof(FPropertySelectionMap) == 0x0000F0, "Wrong size on FPropertySelectionMap");
static_assert(offsetof(FPropertySelectionMap, DeletedActorsToRespawn) == 0x000050, "Member 'FPropertySelectionMap::DeletedActorsToRespawn' has a wrong offset!");
static_assert(offsetof(FPropertySelectionMap, NewActorsToDespawn) == 0x0000A0, "Member 'FPropertySelectionMap::NewActorsToDespawn' has a wrong offset!");

// ScriptStruct LevelSnapshots.LevelSnapshot_Property
// 0x00D8 (0x00D8 - 0x0000)
struct FLevelSnapshot_Property final
{
public:
	TFieldPath<struct FProperty>                  PropertyPath;                                      // 0x0000(0x0020)(Edit, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        PropertyFlags;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PropertyDepth;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DataOffset;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DataSize;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint32, uint32>                          ReferencedNamesOffsetToIndex;                      // 0x0038(0x0050)(NativeAccessSpecifierPublic)
	TMap<uint32, uint32>                          ReferencedObjectOffsetToIndex;                     // 0x0088(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelSnapshot_Property) == 0x000008, "Wrong alignment on FLevelSnapshot_Property");
static_assert(sizeof(FLevelSnapshot_Property) == 0x0000D8, "Wrong size on FLevelSnapshot_Property");
static_assert(offsetof(FLevelSnapshot_Property, PropertyPath) == 0x000000, "Member 'FLevelSnapshot_Property::PropertyPath' has a wrong offset!");
static_assert(offsetof(FLevelSnapshot_Property, PropertyFlags) == 0x000020, "Member 'FLevelSnapshot_Property::PropertyFlags' has a wrong offset!");
static_assert(offsetof(FLevelSnapshot_Property, PropertyDepth) == 0x000028, "Member 'FLevelSnapshot_Property::PropertyDepth' has a wrong offset!");
static_assert(offsetof(FLevelSnapshot_Property, DataOffset) == 0x00002C, "Member 'FLevelSnapshot_Property::DataOffset' has a wrong offset!");
static_assert(offsetof(FLevelSnapshot_Property, DataSize) == 0x000030, "Member 'FLevelSnapshot_Property::DataSize' has a wrong offset!");
static_assert(offsetof(FLevelSnapshot_Property, ReferencedNamesOffsetToIndex) == 0x000038, "Member 'FLevelSnapshot_Property::ReferencedNamesOffsetToIndex' has a wrong offset!");
static_assert(offsetof(FLevelSnapshot_Property, ReferencedObjectOffsetToIndex) == 0x000088, "Member 'FLevelSnapshot_Property::ReferencedObjectOffsetToIndex' has a wrong offset!");

// ScriptStruct LevelSnapshots.RestorationBlacklist
// 0x00A0 (0x00A0 - 0x0000)
struct FRestorationBlacklist final
{
public:
	TSet<TSubclassOf<class AActor>>               ActorClasses;                                      // 0x0000(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<TSubclassOf<class UActorComponent>>      ComponentClasses;                                  // 0x0050(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRestorationBlacklist) == 0x000008, "Wrong alignment on FRestorationBlacklist");
static_assert(sizeof(FRestorationBlacklist) == 0x0000A0, "Wrong size on FRestorationBlacklist");
static_assert(offsetof(FRestorationBlacklist, ActorClasses) == 0x000000, "Member 'FRestorationBlacklist::ActorClasses' has a wrong offset!");
static_assert(offsetof(FRestorationBlacklist, ComponentClasses) == 0x000050, "Member 'FRestorationBlacklist::ComponentClasses' has a wrong offset!");

// ScriptStruct LevelSnapshots.SnapshotFileVersionInfo
// 0x0008 (0x0008 - 0x0000)
struct FSnapshotFileVersionInfo final
{
public:
	int32                                         FileVersionUE4;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileVersionLicenseeUE4;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapshotFileVersionInfo) == 0x000004, "Wrong alignment on FSnapshotFileVersionInfo");
static_assert(sizeof(FSnapshotFileVersionInfo) == 0x000008, "Wrong size on FSnapshotFileVersionInfo");
static_assert(offsetof(FSnapshotFileVersionInfo, FileVersionUE4) == 0x000000, "Member 'FSnapshotFileVersionInfo::FileVersionUE4' has a wrong offset!");
static_assert(offsetof(FSnapshotFileVersionInfo, FileVersionLicenseeUE4) == 0x000004, "Member 'FSnapshotFileVersionInfo::FileVersionLicenseeUE4' has a wrong offset!");

// ScriptStruct LevelSnapshots.SnapshotEngineVersionInfo
// 0x000C (0x000C - 0x0000)
struct FSnapshotEngineVersionInfo final
{
public:
	uint16                                        Major;                                             // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Minor;                                             // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Patch;                                             // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Changelist;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapshotEngineVersionInfo) == 0x000004, "Wrong alignment on FSnapshotEngineVersionInfo");
static_assert(sizeof(FSnapshotEngineVersionInfo) == 0x00000C, "Wrong size on FSnapshotEngineVersionInfo");
static_assert(offsetof(FSnapshotEngineVersionInfo, Major) == 0x000000, "Member 'FSnapshotEngineVersionInfo::Major' has a wrong offset!");
static_assert(offsetof(FSnapshotEngineVersionInfo, Minor) == 0x000002, "Member 'FSnapshotEngineVersionInfo::Minor' has a wrong offset!");
static_assert(offsetof(FSnapshotEngineVersionInfo, Patch) == 0x000004, "Member 'FSnapshotEngineVersionInfo::Patch' has a wrong offset!");
static_assert(offsetof(FSnapshotEngineVersionInfo, Changelist) == 0x000008, "Member 'FSnapshotEngineVersionInfo::Changelist' has a wrong offset!");

// ScriptStruct LevelSnapshots.SnapshotCustomVersionInfo
// 0x001C (0x001C - 0x0000)
struct FSnapshotCustomVersionInfo final
{
public:
	class FName                                   FriendlyName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Key;                                               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapshotCustomVersionInfo) == 0x000004, "Wrong alignment on FSnapshotCustomVersionInfo");
static_assert(sizeof(FSnapshotCustomVersionInfo) == 0x00001C, "Wrong size on FSnapshotCustomVersionInfo");
static_assert(offsetof(FSnapshotCustomVersionInfo, FriendlyName) == 0x000000, "Member 'FSnapshotCustomVersionInfo::FriendlyName' has a wrong offset!");
static_assert(offsetof(FSnapshotCustomVersionInfo, Key) == 0x000008, "Member 'FSnapshotCustomVersionInfo::Key' has a wrong offset!");
static_assert(offsetof(FSnapshotCustomVersionInfo, Version) == 0x000018, "Member 'FSnapshotCustomVersionInfo::Version' has a wrong offset!");

// ScriptStruct LevelSnapshots.SnapshotVersionInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnapshotVersionInfo final
{
public:
	struct FSnapshotFileVersionInfo               FileVersion;                                       // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSnapshotEngineVersionInfo             EngineVersion;                                     // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnapshotCustomVersionInfo>     CustomVersions;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapshotVersionInfo) == 0x000008, "Wrong alignment on FSnapshotVersionInfo");
static_assert(sizeof(FSnapshotVersionInfo) == 0x000028, "Wrong size on FSnapshotVersionInfo");
static_assert(offsetof(FSnapshotVersionInfo, FileVersion) == 0x000000, "Member 'FSnapshotVersionInfo::FileVersion' has a wrong offset!");
static_assert(offsetof(FSnapshotVersionInfo, EngineVersion) == 0x000008, "Member 'FSnapshotVersionInfo::EngineVersion' has a wrong offset!");
static_assert(offsetof(FSnapshotVersionInfo, CustomVersions) == 0x000018, "Member 'FSnapshotVersionInfo::CustomVersions' has a wrong offset!");

// ScriptStruct LevelSnapshots.SubobjectSnapshotData
// 0x0020 (0x0030 - 0x0010)
struct FSubobjectSnapshotData final : public FObjectSnapshotData
{
public:
	int32                                         OuterIndex;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         Class;                                             // 0x0018(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubobjectSnapshotData) == 0x000008, "Wrong alignment on FSubobjectSnapshotData");
static_assert(sizeof(FSubobjectSnapshotData) == 0x000030, "Wrong size on FSubobjectSnapshotData");
static_assert(offsetof(FSubobjectSnapshotData, OuterIndex) == 0x000010, "Member 'FSubobjectSnapshotData::OuterIndex' has a wrong offset!");
static_assert(offsetof(FSubobjectSnapshotData, Class) == 0x000018, "Member 'FSubobjectSnapshotData::Class' has a wrong offset!");

// ScriptStruct LevelSnapshots.WorldSnapshotData
// 0x0190 (0x0190 - 0x0000)
struct FWorldSnapshotData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnapshotVersionInfo                   SnapshotVersionInfo;                               // 0x0008(0x0028)(NativeAccessSpecifierPublic)
	TMap<struct FSoftClassPath, struct FClassDefaultObjectSnapshotData> ClassDefaults;                                     // 0x0030(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FSoftObjectPath, struct FActorSnapshotData> ActorData;                                         // 0x0080(0x0050)(NativeAccessSpecifierPublic)
	TArray<class FName>                           SerializedNames;                                   // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                SerializedObjectReferences;                        // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FSubobjectSnapshotData>    Subobjects;                                        // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, struct FCustomSerializationData>  CustomSubobjectSerializationData;                  // 0x0140(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldSnapshotData) == 0x000008, "Wrong alignment on FWorldSnapshotData");
static_assert(sizeof(FWorldSnapshotData) == 0x000190, "Wrong size on FWorldSnapshotData");
static_assert(offsetof(FWorldSnapshotData, SnapshotVersionInfo) == 0x000008, "Member 'FWorldSnapshotData::SnapshotVersionInfo' has a wrong offset!");
static_assert(offsetof(FWorldSnapshotData, ClassDefaults) == 0x000030, "Member 'FWorldSnapshotData::ClassDefaults' has a wrong offset!");
static_assert(offsetof(FWorldSnapshotData, ActorData) == 0x000080, "Member 'FWorldSnapshotData::ActorData' has a wrong offset!");
static_assert(offsetof(FWorldSnapshotData, SerializedNames) == 0x0000D0, "Member 'FWorldSnapshotData::SerializedNames' has a wrong offset!");
static_assert(offsetof(FWorldSnapshotData, SerializedObjectReferences) == 0x0000E0, "Member 'FWorldSnapshotData::SerializedObjectReferences' has a wrong offset!");
static_assert(offsetof(FWorldSnapshotData, Subobjects) == 0x0000F0, "Member 'FWorldSnapshotData::Subobjects' has a wrong offset!");
static_assert(offsetof(FWorldSnapshotData, CustomSubobjectSerializationData) == 0x000140, "Member 'FWorldSnapshotData::CustomSubobjectSerializationData' has a wrong offset!");

}

