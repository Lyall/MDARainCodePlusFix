#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelSnapshotFilters

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LevelSnapshotFilters.ETransformReturnType
// NumValues: 0x0003
enum class ETransformReturnType : uint8
{
	IsValidWhenTransformChanged              = 0,
	IsValidWhenTransformStayedSame           = 1,
	ETransformReturnType_MAX                 = 2,
};

// Enum LevelSnapshotFilters.EDoNotCareHandling
// NumValues: 0x0004
enum class EDoNotCareHandling : uint32
{
	UseIncludeFilter                         = 0,
	UseExcludeFilter                         = 1,
	UseDoNotCareFilter                       = 2,
	EDoNotCareHandling_MAX                   = 3,
};

// Enum LevelSnapshotFilters.ETagCheckingBehavior
// NumValues: 0x0003
enum class ETagCheckingBehavior : uint8
{
	HasAllTags                               = 0,
	HasAnyTag                                = 1,
	ETagCheckingBehavior_MAX                 = 2,
};

// Enum LevelSnapshotFilters.EActorToCheck
// NumValues: 0x0004
enum class EActorToCheck : uint8
{
	WorldActor                               = 0,
	SnapshotActor                            = 1,
	Both                                     = 2,
	EActorToCheck_MAX                        = 3,
};

// Enum LevelSnapshotFilters.EFilterResult
// NumValues: 0x0004
enum class EFilterResult : uint8
{
	Include                                  = 0,
	Exclude                                  = 1,
	DoNotCare                                = 2,
	EFilterResult_MAX                        = 3,
};

// Enum LevelSnapshotFilters.ENameMatchingRule
// NumValues: 0x0005
enum class ENameMatchingRule : uint8
{
	MatchesExactly                           = 0,
	MatchesIgnoreCase                        = 1,
	ContainsExactly                          = 2,
	ContainsIgnoreCase                       = 3,
	ENameMatchingRule_MAX                    = 4,
};

// Enum LevelSnapshotFilters.EBlueprintPropertyType
// NumValues: 0x0012
enum class EBlueprintPropertyType : uint8
{
	Byte                                     = 0,
	Int                                      = 1,
	Int64                                    = 2,
	Bool                                     = 3,
	Float                                    = 4,
	ObjectReference                          = 5,
	Name                                     = 6,
	Interface                                = 7,
	Struct                                   = 8,
	String                                   = 9,
	Text                                     = 10,
	WeakObjectReference                      = 11,
	SoftObjectReference                      = 12,
	Double                                   = 13,
	Array                                    = 14,
	Map                                      = 15,
	Set                                      = 16,
	EBlueprintPropertyType_MAX               = 17,
};

// ScriptStruct LevelSnapshotFilters.IsAddedActorValidParams
// 0x0008 (0x0008 - 0x0000)
struct FIsAddedActorValidParams final
{
public:
	class AActor*                                 NewActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIsAddedActorValidParams) == 0x000008, "Wrong alignment on FIsAddedActorValidParams");
static_assert(sizeof(FIsAddedActorValidParams) == 0x000008, "Wrong size on FIsAddedActorValidParams");
static_assert(offsetof(FIsAddedActorValidParams, NewActor) == 0x000000, "Member 'FIsAddedActorValidParams::NewActor' has a wrong offset!");

// ScriptStruct LevelSnapshotFilters.IsDeletedActorValidParams
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FIsDeletedActorValidParams final
{
public:
	struct FSoftObjectPath                        SavedActorPath;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x48];                                      // 0x0018(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIsDeletedActorValidParams) == 0x000010, "Wrong alignment on FIsDeletedActorValidParams");
static_assert(sizeof(FIsDeletedActorValidParams) == 0x000060, "Wrong size on FIsDeletedActorValidParams");
static_assert(offsetof(FIsDeletedActorValidParams, SavedActorPath) == 0x000000, "Member 'FIsDeletedActorValidParams::SavedActorPath' has a wrong offset!");

// ScriptStruct LevelSnapshotFilters.PropertyContainerHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPropertyContainerHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropertyContainerHandle) == 0x000008, "Wrong alignment on FPropertyContainerHandle");
static_assert(sizeof(FPropertyContainerHandle) == 0x000008, "Wrong size on FPropertyContainerHandle");

// ScriptStruct LevelSnapshotFilters.IsPropertyValidParams
// 0x0050 (0x0050 - 0x0000)
struct FIsPropertyValidParams final
{
public:
	class AActor*                                 SnapshotActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LevelActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPropertyContainerHandle               SnapshotPropertyContainer;                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPropertyContainerHandle               LevelPropertyContainers;                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TFieldPath<struct FProperty>                  Property;                                          // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PropertyPath;                                      // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIsPropertyValidParams) == 0x000008, "Wrong alignment on FIsPropertyValidParams");
static_assert(sizeof(FIsPropertyValidParams) == 0x000050, "Wrong size on FIsPropertyValidParams");
static_assert(offsetof(FIsPropertyValidParams, SnapshotActor) == 0x000000, "Member 'FIsPropertyValidParams::SnapshotActor' has a wrong offset!");
static_assert(offsetof(FIsPropertyValidParams, LevelActor) == 0x000008, "Member 'FIsPropertyValidParams::LevelActor' has a wrong offset!");
static_assert(offsetof(FIsPropertyValidParams, SnapshotPropertyContainer) == 0x000010, "Member 'FIsPropertyValidParams::SnapshotPropertyContainer' has a wrong offset!");
static_assert(offsetof(FIsPropertyValidParams, LevelPropertyContainers) == 0x000018, "Member 'FIsPropertyValidParams::LevelPropertyContainers' has a wrong offset!");
static_assert(offsetof(FIsPropertyValidParams, Property) == 0x000020, "Member 'FIsPropertyValidParams::Property' has a wrong offset!");
static_assert(offsetof(FIsPropertyValidParams, PropertyPath) == 0x000040, "Member 'FIsPropertyValidParams::PropertyPath' has a wrong offset!");

// ScriptStruct LevelSnapshotFilters.IsActorValidParams
// 0x0010 (0x0010 - 0x0000)
struct FIsActorValidParams final
{
public:
	class AActor*                                 SnapshotActor;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LevelActor;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIsActorValidParams) == 0x000008, "Wrong alignment on FIsActorValidParams");
static_assert(sizeof(FIsActorValidParams) == 0x000010, "Wrong size on FIsActorValidParams");
static_assert(offsetof(FIsActorValidParams, SnapshotActor) == 0x000000, "Member 'FIsActorValidParams::SnapshotActor' has a wrong offset!");
static_assert(offsetof(FIsActorValidParams, LevelActor) == 0x000008, "Member 'FIsActorValidParams::LevelActor' has a wrong offset!");

}

