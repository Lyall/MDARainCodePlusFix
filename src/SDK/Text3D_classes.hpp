#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Text3D

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Text3D_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class Text3D.Text3DActor
// 0x0008 (0x0228 - 0x0220)
class AText3DActor final : public AActor
{
public:
	class UText3DComponent*                       Text3DComponent;                                   // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Text3DActor">();
	}
	static class AText3DActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AText3DActor>();
	}
};
static_assert(alignof(AText3DActor) == 0x000008, "Wrong alignment on AText3DActor");
static_assert(sizeof(AText3DActor) == 0x000228, "Wrong size on AText3DActor");
static_assert(offsetof(AText3DActor, Text3DComponent) == 0x000220, "Member 'AText3DActor::Text3DComponent' has a wrong offset!");

// Class Text3D.Text3DCharacterTransform
// 0x0070 (0x0270 - 0x0200)
class UText3DCharacterTransform final : public USceneComponent
{
public:
	bool                                          bLocationEnabled;                                  // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocationProgress;                                  // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DCharacterEffectOrder                   LocationOrder;                                     // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocationRange;                                     // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationDistance;                                  // 0x0208(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleEnabled;                                     // 0x0214(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleProgress;                                     // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DCharacterEffectOrder                   ScaleOrder;                                        // 0x021C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleRange;                                        // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleBegin;                                        // 0x0224(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleEnd;                                          // 0x0230(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateEnabled;                                    // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotateProgress;                                    // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DCharacterEffectOrder                   RotateOrder;                                       // 0x0244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotateRange;                                       // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotateBegin;                                       // 0x024C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotateEnd;                                         // 0x0258(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0xC];                                      // 0x0264(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLocationDistance(const struct FVector& Distance);
	void SetLocationEnabled(bool bEnabled);
	void SetLocationOrder(EText3DCharacterEffectOrder Order);
	void SetLocationProgress(float Progress);
	void SetLocationRange(float Range);
	void SetRotateBegin(const struct FRotator& Value);
	void SetRotateEnabled(bool bEnabled);
	void SetRotateEnd(const struct FRotator& Value);
	void SetRotateOrder(EText3DCharacterEffectOrder Order);
	void SetRotateProgress(float Progress);
	void SetRotateRange(float Range);
	void SetScaleBegin(const struct FVector& Value);
	void SetScaleEnabled(bool bEnabled);
	void SetScaleEnd(const struct FVector& Value);
	void SetScaleOrder(EText3DCharacterEffectOrder Order);
	void SetScaleProgress(float Progress);
	void SetScaleRange(float Range);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Text3DCharacterTransform">();
	}
	static class UText3DCharacterTransform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UText3DCharacterTransform>();
	}
};
static_assert(alignof(UText3DCharacterTransform) == 0x000010, "Wrong alignment on UText3DCharacterTransform");
static_assert(sizeof(UText3DCharacterTransform) == 0x000270, "Wrong size on UText3DCharacterTransform");
static_assert(offsetof(UText3DCharacterTransform, bLocationEnabled) == 0x0001F8, "Member 'UText3DCharacterTransform::bLocationEnabled' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, LocationProgress) == 0x0001FC, "Member 'UText3DCharacterTransform::LocationProgress' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, LocationOrder) == 0x000200, "Member 'UText3DCharacterTransform::LocationOrder' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, LocationRange) == 0x000204, "Member 'UText3DCharacterTransform::LocationRange' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, LocationDistance) == 0x000208, "Member 'UText3DCharacterTransform::LocationDistance' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, bScaleEnabled) == 0x000214, "Member 'UText3DCharacterTransform::bScaleEnabled' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleProgress) == 0x000218, "Member 'UText3DCharacterTransform::ScaleProgress' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleOrder) == 0x00021C, "Member 'UText3DCharacterTransform::ScaleOrder' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleRange) == 0x000220, "Member 'UText3DCharacterTransform::ScaleRange' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleBegin) == 0x000224, "Member 'UText3DCharacterTransform::ScaleBegin' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleEnd) == 0x000230, "Member 'UText3DCharacterTransform::ScaleEnd' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, bRotateEnabled) == 0x00023C, "Member 'UText3DCharacterTransform::bRotateEnabled' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateProgress) == 0x000240, "Member 'UText3DCharacterTransform::RotateProgress' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateOrder) == 0x000244, "Member 'UText3DCharacterTransform::RotateOrder' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateRange) == 0x000248, "Member 'UText3DCharacterTransform::RotateRange' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateBegin) == 0x00024C, "Member 'UText3DCharacterTransform::RotateBegin' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateEnd) == 0x000258, "Member 'UText3DCharacterTransform::RotateEnd' has a wrong offset!");

// Class Text3D.Text3DComponent
// 0x00E0 (0x02E0 - 0x0200)
class UText3DComponent : public USceneComponent
{
public:
	class FText                                   Text;                                              // 0x01F8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Extrude;                                           // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bevel;                                             // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DBevelType                              BevelType;                                         // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BevelSegments;                                     // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutline;                                          // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     FrontMaterial;                                     // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BevelMaterial;                                     // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ExtrudeMaterial;                                   // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BackMaterial;                                      // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  Font;                                              // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DHorizontalTextAlignment                HorizontalAlignment;                               // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DVerticalTextAlignment                  VerticalAlignment;                                 // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0x2];                                      // 0x0252(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Kerning;                                           // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineSpacing;                                       // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WordSpacing;                                       // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaxWidth;                                      // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWidth;                                          // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaxHeight;                                     // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHeight;                                         // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleProportionally;                              // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        TextRoot;                                          // 0x0278(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_280[0x40];                                     // 0x0280(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CharacterKernings;                                 // 0x02C0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           CharacterMeshes;                                   // 0x02D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void GetTextSize(struct FVector* OutTextSize);
	void SetBackMaterial(class UMaterialInterface* Value);
	void SetBevel(const float Value);
	void SetBevelMaterial(class UMaterialInterface* Value);
	void SetBevelSegments(const int32 Value);
	void SetBevelType(const EText3DBevelType Value);
	void SetExtrude(const float Value);
	void SetExtrudeMaterial(class UMaterialInterface* Value);
	void SetFont(const class UFont* InFont);
	void SetFreeze(const bool bFreeze);
	void SetFrontMaterial(class UMaterialInterface* Value);
	void SetHasMaxHeight(const bool Value);
	void SetHasMaxWidth(const bool Value);
	void SetHorizontalAlignment(const EText3DHorizontalTextAlignment Value);
	void SetKerning(const float Value);
	void SetLineSpacing(const float Value);
	void SetMaxHeight(const float Value);
	void SetMaxWidth(const float Value);
	void SetOutline(const bool bValue);
	void SetScaleProportionally(const bool Value);
	void SetText(const class FText& Value);
	void SetVerticalAlignment(const EText3DVerticalTextAlignment Value);
	void SetWordSpacing(const float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Text3DComponent">();
	}
	static class UText3DComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UText3DComponent>();
	}
};
static_assert(alignof(UText3DComponent) == 0x000010, "Wrong alignment on UText3DComponent");
static_assert(sizeof(UText3DComponent) == 0x0002E0, "Wrong size on UText3DComponent");
static_assert(offsetof(UText3DComponent, Text) == 0x0001F8, "Member 'UText3DComponent::Text' has a wrong offset!");
static_assert(offsetof(UText3DComponent, Extrude) == 0x000210, "Member 'UText3DComponent::Extrude' has a wrong offset!");
static_assert(offsetof(UText3DComponent, Bevel) == 0x000214, "Member 'UText3DComponent::Bevel' has a wrong offset!");
static_assert(offsetof(UText3DComponent, BevelType) == 0x000218, "Member 'UText3DComponent::BevelType' has a wrong offset!");
static_assert(offsetof(UText3DComponent, BevelSegments) == 0x00021C, "Member 'UText3DComponent::BevelSegments' has a wrong offset!");
static_assert(offsetof(UText3DComponent, bOutline) == 0x000220, "Member 'UText3DComponent::bOutline' has a wrong offset!");
static_assert(offsetof(UText3DComponent, FrontMaterial) == 0x000228, "Member 'UText3DComponent::FrontMaterial' has a wrong offset!");
static_assert(offsetof(UText3DComponent, BevelMaterial) == 0x000230, "Member 'UText3DComponent::BevelMaterial' has a wrong offset!");
static_assert(offsetof(UText3DComponent, ExtrudeMaterial) == 0x000238, "Member 'UText3DComponent::ExtrudeMaterial' has a wrong offset!");
static_assert(offsetof(UText3DComponent, BackMaterial) == 0x000240, "Member 'UText3DComponent::BackMaterial' has a wrong offset!");
static_assert(offsetof(UText3DComponent, Font) == 0x000248, "Member 'UText3DComponent::Font' has a wrong offset!");
static_assert(offsetof(UText3DComponent, HorizontalAlignment) == 0x000250, "Member 'UText3DComponent::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UText3DComponent, VerticalAlignment) == 0x000251, "Member 'UText3DComponent::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UText3DComponent, Kerning) == 0x000254, "Member 'UText3DComponent::Kerning' has a wrong offset!");
static_assert(offsetof(UText3DComponent, LineSpacing) == 0x000258, "Member 'UText3DComponent::LineSpacing' has a wrong offset!");
static_assert(offsetof(UText3DComponent, WordSpacing) == 0x00025C, "Member 'UText3DComponent::WordSpacing' has a wrong offset!");
static_assert(offsetof(UText3DComponent, bHasMaxWidth) == 0x000260, "Member 'UText3DComponent::bHasMaxWidth' has a wrong offset!");
static_assert(offsetof(UText3DComponent, MaxWidth) == 0x000264, "Member 'UText3DComponent::MaxWidth' has a wrong offset!");
static_assert(offsetof(UText3DComponent, bHasMaxHeight) == 0x000268, "Member 'UText3DComponent::bHasMaxHeight' has a wrong offset!");
static_assert(offsetof(UText3DComponent, MaxHeight) == 0x00026C, "Member 'UText3DComponent::MaxHeight' has a wrong offset!");
static_assert(offsetof(UText3DComponent, bScaleProportionally) == 0x000270, "Member 'UText3DComponent::bScaleProportionally' has a wrong offset!");
static_assert(offsetof(UText3DComponent, TextRoot) == 0x000278, "Member 'UText3DComponent::TextRoot' has a wrong offset!");
static_assert(offsetof(UText3DComponent, CharacterKernings) == 0x0002C0, "Member 'UText3DComponent::CharacterKernings' has a wrong offset!");
static_assert(offsetof(UText3DComponent, CharacterMeshes) == 0x0002D0, "Member 'UText3DComponent::CharacterMeshes' has a wrong offset!");

// Class Text3D.Text3DEngineSubsystem
// 0x0060 (0x0090 - 0x0030)
class UText3DEngineSubsystem final : public UEngineSubsystem
{
public:
	class UMaterial*                              DefaultMaterial;                                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint32, struct FCachedFontData>          CachedFonts;                                       // 0x0038(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Text3DEngineSubsystem">();
	}
	static class UText3DEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UText3DEngineSubsystem>();
	}
};
static_assert(alignof(UText3DEngineSubsystem) == 0x000008, "Wrong alignment on UText3DEngineSubsystem");
static_assert(sizeof(UText3DEngineSubsystem) == 0x000090, "Wrong size on UText3DEngineSubsystem");
static_assert(offsetof(UText3DEngineSubsystem, DefaultMaterial) == 0x000030, "Member 'UText3DEngineSubsystem::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(UText3DEngineSubsystem, CachedFonts) == 0x000038, "Member 'UText3DEngineSubsystem::CachedFonts' has a wrong offset!");

// Class Text3D.Text3DMeshedComponent
// 0x0110 (0x0310 - 0x0200)
class UText3DMeshedComponent : public USceneComponent
{
public:
	class FText                                   Text;                                              // 0x01F8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Extrude;                                           // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bevel;                                             // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DBevelType                              BevelType;                                         // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BevelSegments;                                     // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutline;                                          // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     FrontMaterial;                                     // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BevelMaterial;                                     // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ExtrudeMaterial;                                   // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BackMaterial;                                      // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  Font;                                              // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DHorizontalTextAlignment                HorizontalAlignment;                               // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DVerticalTextAlignment                  VerticalAlignment;                                 // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0x2];                                      // 0x0252(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Kerning;                                           // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineSpacing;                                       // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WordSpacing;                                       // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaxWidth;                                      // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWidth;                                          // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaxHeight;                                     // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHeight;                                         // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleProportionally;                              // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        TextRoot;                                          // 0x0278(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_280[0x40];                                     // 0x0280(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CharacterKernings;                                 // 0x02C0(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           CharacterMeshes;                                   // 0x02D0(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          bIsNonRebuild;                                     // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bMashSaveMode;                                     // 0x02E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MashSavePath;                                      // 0x02E8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                AllTextSize;                                       // 0x02F8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_304[0xC];                                      // 0x0304(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetTextSize(struct FVector* OutTextSize);
	void SetBackMaterial(class UMaterialInterface* Value);
	void SetBevel(const float Value);
	void SetBevelMaterial(class UMaterialInterface* Value);
	void SetBevelSegments(const int32 Value);
	void SetBevelType(const EText3DBevelType Value);
	void SetExtrude(const float Value);
	void SetExtrudeMaterial(class UMaterialInterface* Value);
	void SetFont(const class UFont* InFont);
	void SetFreeze(const bool bFreeze);
	void SetFrontMaterial(class UMaterialInterface* Value);
	void SetHasMaxHeight(const bool Value);
	void SetHasMaxWidth(const bool Value);
	void SetHorizontalAlignment(const EText3DHorizontalTextAlignment Value);
	void SetKerning(const float Value);
	void SetLineSpacing(const float Value);
	void SetMashSaveMode(const bool InFlag);
	void SetMashSavePath(const class FString& InSavePath);
	void SetMaxHeight(const float Value);
	void SetMaxWidth(const float Value);
	void SetOutline(const bool bValue);
	void SetScaleProportionally(const bool Value);
	void SetText(const class FText& Value);
	void SetVerticalAlignment(const EText3DVerticalTextAlignment Value);
	void SetWordSpacing(const float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Text3DMeshedComponent">();
	}
	static class UText3DMeshedComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UText3DMeshedComponent>();
	}
};
static_assert(alignof(UText3DMeshedComponent) == 0x000010, "Wrong alignment on UText3DMeshedComponent");
static_assert(sizeof(UText3DMeshedComponent) == 0x000310, "Wrong size on UText3DMeshedComponent");
static_assert(offsetof(UText3DMeshedComponent, Text) == 0x0001F8, "Member 'UText3DMeshedComponent::Text' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, Extrude) == 0x000210, "Member 'UText3DMeshedComponent::Extrude' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, Bevel) == 0x000214, "Member 'UText3DMeshedComponent::Bevel' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, BevelType) == 0x000218, "Member 'UText3DMeshedComponent::BevelType' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, BevelSegments) == 0x00021C, "Member 'UText3DMeshedComponent::BevelSegments' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, bOutline) == 0x000220, "Member 'UText3DMeshedComponent::bOutline' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, FrontMaterial) == 0x000228, "Member 'UText3DMeshedComponent::FrontMaterial' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, BevelMaterial) == 0x000230, "Member 'UText3DMeshedComponent::BevelMaterial' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, ExtrudeMaterial) == 0x000238, "Member 'UText3DMeshedComponent::ExtrudeMaterial' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, BackMaterial) == 0x000240, "Member 'UText3DMeshedComponent::BackMaterial' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, Font) == 0x000248, "Member 'UText3DMeshedComponent::Font' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, HorizontalAlignment) == 0x000250, "Member 'UText3DMeshedComponent::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, VerticalAlignment) == 0x000251, "Member 'UText3DMeshedComponent::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, Kerning) == 0x000254, "Member 'UText3DMeshedComponent::Kerning' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, LineSpacing) == 0x000258, "Member 'UText3DMeshedComponent::LineSpacing' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, WordSpacing) == 0x00025C, "Member 'UText3DMeshedComponent::WordSpacing' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, bHasMaxWidth) == 0x000260, "Member 'UText3DMeshedComponent::bHasMaxWidth' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, MaxWidth) == 0x000264, "Member 'UText3DMeshedComponent::MaxWidth' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, bHasMaxHeight) == 0x000268, "Member 'UText3DMeshedComponent::bHasMaxHeight' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, MaxHeight) == 0x00026C, "Member 'UText3DMeshedComponent::MaxHeight' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, bScaleProportionally) == 0x000270, "Member 'UText3DMeshedComponent::bScaleProportionally' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, TextRoot) == 0x000278, "Member 'UText3DMeshedComponent::TextRoot' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, CharacterKernings) == 0x0002C0, "Member 'UText3DMeshedComponent::CharacterKernings' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, CharacterMeshes) == 0x0002D0, "Member 'UText3DMeshedComponent::CharacterMeshes' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, bIsNonRebuild) == 0x0002E0, "Member 'UText3DMeshedComponent::bIsNonRebuild' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, bMashSaveMode) == 0x0002E1, "Member 'UText3DMeshedComponent::bMashSaveMode' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, MashSavePath) == 0x0002E8, "Member 'UText3DMeshedComponent::MashSavePath' has a wrong offset!");
static_assert(offsetof(UText3DMeshedComponent, AllTextSize) == 0x0002F8, "Member 'UText3DMeshedComponent::AllTextSize' has a wrong offset!");

}

