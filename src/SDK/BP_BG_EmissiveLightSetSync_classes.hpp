#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BG_EmissiveLightSetSync

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "RC_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BG_EmissiveLightSetSync.BP_BG_EmissiveLightSetSync_C
// 0x0120 (0x03A8 - 0x0288)
class ABP_BG_EmissiveLightSetSync_C final : public ARCActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LongLightPulse_flash_1D9510D04AEE3E9A984E85B4FF91D535; // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LongLightPulse__Direction_1D9510D04AEE3E9A984E85B4FF91D535; // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LongLightPulse;                                    // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShortLightPulse_flash_127C226A429950014AE291A099FECE62; // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ShortLightPulse__Direction_127C226A429950014AE291A099FECE62; // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ShortLightPulse;                                   // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               FlickerLampMaterial;                               // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Lamp;                                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LampMaterial;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ElementIndex;                                      // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_color;                                       // 0x02EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissiveIntensityDark;                             // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissiveIntensityBright;                           // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRateMin;                                       // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRateMax;                                       // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayOffset;                                       // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULightComponent*>                LightComponentSet;                                 // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         LightSetLength;                                    // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EqualCheck;                                        // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALight*>                         LightSet;                                          // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<float>                                 LightIntensitySet;                                 // 0x0338(0x0010)(Edit, BlueprintVisible)
	int32                                         Index_0;                                           // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Length;                                            // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LightTag;                                          // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BG_StopShaderTime_C*                BP_BG_StopShaderTime;                              // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EndCheck;                                          // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Light_color_0;                                     // 0x0364(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALight*>                         LightSet_Check;                                    // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_BG_StopShaderTime_C*                NewVar_0;                                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_BG_StopShaderTime_C*>        Out_Actors;                                        // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FName                                   StopShaderTimeTag;                                 // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ShortLightPulse__FinishedFunc();
	void ShortLightPulse__UpdateFunc();
	void LongLightPulse__FinishedFunc();
	void LongLightPulse__UpdateFunc();
	void ReceiveBeginPlay();
	void OnLevelLoadEnd______________0();
	void OnLevelUnLoadEnd______________0();
	void ExecuteUbergraph_BP_BG_EmissiveLightSetSync(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BG_EmissiveLightSetSync_C">();
	}
	static class ABP_BG_EmissiveLightSetSync_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BG_EmissiveLightSetSync_C>();
	}
};
static_assert(alignof(ABP_BG_EmissiveLightSetSync_C) == 0x000008, "Wrong alignment on ABP_BG_EmissiveLightSetSync_C");
static_assert(sizeof(ABP_BG_EmissiveLightSetSync_C) == 0x0003A8, "Wrong size on ABP_BG_EmissiveLightSetSync_C");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, UberGraphFrame) == 0x000288, "Member 'ABP_BG_EmissiveLightSetSync_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, Billboard) == 0x000290, "Member 'ABP_BG_EmissiveLightSetSync_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, StaticMesh) == 0x000298, "Member 'ABP_BG_EmissiveLightSetSync_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_BG_EmissiveLightSetSync_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LongLightPulse_flash_1D9510D04AEE3E9A984E85B4FF91D535) == 0x0002A8, "Member 'ABP_BG_EmissiveLightSetSync_C::LongLightPulse_flash_1D9510D04AEE3E9A984E85B4FF91D535' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LongLightPulse__Direction_1D9510D04AEE3E9A984E85B4FF91D535) == 0x0002AC, "Member 'ABP_BG_EmissiveLightSetSync_C::LongLightPulse__Direction_1D9510D04AEE3E9A984E85B4FF91D535' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LongLightPulse) == 0x0002B0, "Member 'ABP_BG_EmissiveLightSetSync_C::LongLightPulse' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, ShortLightPulse_flash_127C226A429950014AE291A099FECE62) == 0x0002B8, "Member 'ABP_BG_EmissiveLightSetSync_C::ShortLightPulse_flash_127C226A429950014AE291A099FECE62' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, ShortLightPulse__Direction_127C226A429950014AE291A099FECE62) == 0x0002BC, "Member 'ABP_BG_EmissiveLightSetSync_C::ShortLightPulse__Direction_127C226A429950014AE291A099FECE62' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, ShortLightPulse) == 0x0002C0, "Member 'ABP_BG_EmissiveLightSetSync_C::ShortLightPulse' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, Rate) == 0x0002C8, "Member 'ABP_BG_EmissiveLightSetSync_C::Rate' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, FlickerLampMaterial) == 0x0002D0, "Member 'ABP_BG_EmissiveLightSetSync_C::FlickerLampMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, Lamp) == 0x0002D8, "Member 'ABP_BG_EmissiveLightSetSync_C::Lamp' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LampMaterial) == 0x0002E0, "Member 'ABP_BG_EmissiveLightSetSync_C::LampMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, ElementIndex) == 0x0002E8, "Member 'ABP_BG_EmissiveLightSetSync_C::ElementIndex' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, Light_color) == 0x0002EC, "Member 'ABP_BG_EmissiveLightSetSync_C::Light_color' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, EmissiveIntensityDark) == 0x0002FC, "Member 'ABP_BG_EmissiveLightSetSync_C::EmissiveIntensityDark' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, EmissiveIntensityBright) == 0x000300, "Member 'ABP_BG_EmissiveLightSetSync_C::EmissiveIntensityBright' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, PlayRateMin) == 0x000304, "Member 'ABP_BG_EmissiveLightSetSync_C::PlayRateMin' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, PlayRateMax) == 0x000308, "Member 'ABP_BG_EmissiveLightSetSync_C::PlayRateMax' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, DelayOffset) == 0x00030C, "Member 'ABP_BG_EmissiveLightSetSync_C::DelayOffset' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LightComponentSet) == 0x000310, "Member 'ABP_BG_EmissiveLightSetSync_C::LightComponentSet' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LightSetLength) == 0x000320, "Member 'ABP_BG_EmissiveLightSetSync_C::LightSetLength' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, EqualCheck) == 0x000324, "Member 'ABP_BG_EmissiveLightSetSync_C::EqualCheck' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LightSet) == 0x000328, "Member 'ABP_BG_EmissiveLightSetSync_C::LightSet' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LightIntensitySet) == 0x000338, "Member 'ABP_BG_EmissiveLightSetSync_C::LightIntensitySet' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, Index_0) == 0x000348, "Member 'ABP_BG_EmissiveLightSetSync_C::Index_0' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, Length) == 0x00034C, "Member 'ABP_BG_EmissiveLightSetSync_C::Length' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LightTag) == 0x000350, "Member 'ABP_BG_EmissiveLightSetSync_C::LightTag' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, BP_BG_StopShaderTime) == 0x000358, "Member 'ABP_BG_EmissiveLightSetSync_C::BP_BG_StopShaderTime' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, EndCheck) == 0x000360, "Member 'ABP_BG_EmissiveLightSetSync_C::EndCheck' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, Light_color_0) == 0x000364, "Member 'ABP_BG_EmissiveLightSetSync_C::Light_color_0' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, LightSet_Check) == 0x000378, "Member 'ABP_BG_EmissiveLightSetSync_C::LightSet_Check' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, NewVar_0) == 0x000388, "Member 'ABP_BG_EmissiveLightSetSync_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, Out_Actors) == 0x000390, "Member 'ABP_BG_EmissiveLightSetSync_C::Out_Actors' has a wrong offset!");
static_assert(offsetof(ABP_BG_EmissiveLightSetSync_C, StopShaderTimeTag) == 0x0003A0, "Member 'ABP_BG_EmissiveLightSetSync_C::StopShaderTimeTag' has a wrong offset!");

}

