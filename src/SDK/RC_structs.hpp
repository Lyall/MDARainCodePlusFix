#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RC

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// Enum RC.ERCActionFailureReason
// NumValues: 0x0004
enum class ERCActionFailureReason : uint8
{
	AF_None                                  = 0,
	AF_Deadline                              = 1,
	AF_Mistype                               = 2,
	AF_Max                                   = 3,
};

// Enum RC.ERCBoatAccelEventCode
// NumValues: 0x0005
enum class ERCBoatAccelEventCode : uint8
{
	BTAccel_None                             = 0,
	BTAccel_Stopped                          = 1,
	BTAccel_Up                               = 2,
	BTAccel_Step                             = 3,
	BTAccel_Max                              = 4,
};

// Enum RC.ERCNazoBattleRebuttalLetterPosition
// NumValues: 0x0004
enum class ERCNazoBattleRebuttalLetterPosition : uint8
{
	Top                                      = 0,
	Middle                                   = 1,
	Bottom                                   = 2,
	Max                                      = 3,
};

// Enum RC.ERCAmatanPuzzleFailureCode
// NumValues: 0x0005
enum class ERCAmatanPuzzleFailureCode : uint8
{
	APFailure_None                           = 0,
	APFailure_Misstep                        = 1,
	APFailure_OutOfPuzzle                    = 2,
	APFailure_Return                         = 3,
	APFailure_Max                            = 4,
};

// Enum RC.ERCAmatanUIButton
// NumValues: 0x0009
enum class ERCAmatanUIButton : uint8
{
	ATab_None                                = 0,
	ATab_Extend_Arm                          = 1,
	ATab_Arm_Enabled                         = 2,
	ATab_Arm_Disabled                        = 3,
	ATab_Buzz_Siren                          = 4,
	ATab_Buzz_Horn                           = 5,
	ATab_Buzz_Bell                           = 6,
	ATab_Buzz_Piano                          = 7,
	ATab_Max                                 = 8,
};

// Enum RC.ERCAmatanFeedbackCode
// NumValues: 0x0004
enum class ERCAmatanFeedbackCode : uint8
{
	APFeedback_None                          = 0,
	APFeedback_Blocked                       = 1,
	APFeedback_ArmHit                        = 2,
	APFeedback_Max                           = 3,
};

// Enum RC.ERCUserPrivileges
// NumValues: 0x0003
enum class ERCUserPrivileges : uint8
{
	CanPlay                                  = 0,
	CanNotPlay                               = 1,
	ERCUserPrivileges_MAX                    = 2,
};

// Enum RC.ERCInputKeyType
// NumValues: 0x0082
enum class ERCInputKeyType : uint8
{
	None                                     = 0,
	UICursolUp                               = 1,
	UICursolDown                             = 2,
	UICursolLeft                             = 3,
	UICursolRight                            = 4,
	UIPointerX                               = 5,
	UIPointerY                               = 6,
	UIPointerUp                              = 7,
	UIPointerDown                            = 8,
	UIPointerLeft                            = 9,
	UIPointerRight                           = 10,
	UISurveyPointerUp                        = 11,
	UISurveyPointerDown                      = 12,
	UISurveyPointerLeft                      = 13,
	UISurveyPointerRight                     = 14,
	UIDecide                                 = 15,
	UICancel                                 = 16,
	UIPageUp                                 = 17,
	UIPageDown                               = 18,
	UIPageBack                               = 19,
	UIPageNext                               = 20,
	MenuFastTravel                           = 21,
	MenuMapSmall                             = 22,
	MenuMapLarge                             = 23,
	MenuDetailScrollUp                       = 24,
	MenuDetailScrollDown                     = 25,
	MenuKagiLarge                            = 26,
	MenuSkillUnsetAll                        = 27,
	MenuAreaMapOpen                          = 28,
	MenuBgmPlayInOrder                       = 29,
	OptionInitialize                         = 30,
	Pause                                    = 31,
	Backlog                                  = 32,
	HUDSwitch                                = 33,
	TitleAnyKey                              = 34,
	ADVTalk                                  = 35,
	ADVTalkNextPage                          = 36,
	ADVSkip                                  = 37,
	ADVMenuOpen                              = 38,
	ADVMenuMapOpen                           = 39,
	ADVAutoTalk                              = 40,
	ADVHolding                               = 41,
	ADVResearchExit                          = 42,
	ADV2StepResearchBack                     = 43,
	MovieSkip                                = 44,
	PlayerMoveFront                          = 45,
	PlayerMoveBack                           = 46,
	PlayerMoveLeft                           = 47,
	PlayerMoveRight                          = 48,
	PlayerWalk                               = 49,
	PlayerRun                                = 50,
	CameraReset                              = 51,
	CameraPitchUp                            = 52,
	CameraPitchDown                          = 53,
	CameraRollLeft                           = 54,
	CameraRollRight                          = 55,
	SurveyCameraUp                           = 56,
	SurveyCameraDown                         = 57,
	SurveyCameraLeft                         = 58,
	SurveyCameraRight                        = 59,
	CameraZoomIn                             = 60,
	CameraZoomOut                            = 61,
	QTEUp                                    = 62,
	QTEDown                                  = 63,
	QTELeft                                  = 64,
	QTERight                                 = 65,
	QTEBtUp                                  = 66,
	QTEBtDown                                = 67,
	QTEBtLeft                                = 68,
	QTEBtRight                               = 69,
	AmatanMoveFront                          = 70,
	AmatanMoveBack                           = 71,
	AmatanMoveLeft                           = 72,
	AmatanMoveRight                          = 73,
	AmatanArm                                = 74,
	AmatanBuzz1                              = 75,
	AmatanBuzz2                              = 76,
	AmatanBuzz3                              = 77,
	AmatanBuzz4                              = 78,
	AmatanLookUp                             = 79,
	AmatanLookDown                           = 80,
	NzMtbAttackHigh                          = 81,
	NzMtbAttackMiddle                        = 82,
	NzMtbJump                                = 83,
	NzMtbSelect                              = 84,
	PzlKaitouThrow                           = 85,
	PzlKaikagiGet                            = 86,
	NzPazzleZoomIn                           = 87,
	NzPazzleZoomOut                          = 88,
	NzCriminalLeft                           = 89,
	NzCriminalRight                          = 90,
	NzCriminalSelect                         = 91,
	NzDmUp                                   = 92,
	NzDmDown                                 = 93,
	NzDmLeft                                 = 94,
	NzDmRight                                = 95,
	NzDmRebuttalSlash                        = 96,
	NzDmDisturbSlash                         = 97,
	NzDmAssist                               = 98,
	NzDmSelect                               = 99,
	NzDmKeyChange                            = 100,
	NzDmKeyChangeBack                        = 101,
	NzDmSubtitleChange                       = 102,
	NzKaiKagiSelDetail                       = 103,
	FinalePiece                              = 104,
	FinalePaseLeft                           = 105,
	FinalePageRight                          = 106,
	FinalePiaceUp                            = 107,
	FinalePiaceDown                          = 108,
	FinalePiaceLeft                          = 109,
	FinalePiaceRight                         = 110,
	FinaleCursolUp                           = 111,
	FinaleCursolDown                         = 112,
	FinaleCursolLeft                         = 113,
	FinaleCursolRight                        = 114,
	FinaleZoom                               = 115,
	NzResultOpenDetail                       = 116,
	ADVRestart                               = 117,
	DebugMenuTriggerL                        = 118,
	DebugMenuTriggerR                        = 119,
	DebugMenuTriggerST                       = 120,
	DebugMenuTriggerATL                      = 121,
	DebugMenuTriggerD                        = 122,
	DebugGameTriggerL1                       = 123,
	DebugGameTriggerL2                       = 124,
	DebugGameClear                           = 125,
	DebugGameTimeUp                          = 126,
	DebugGameTalkRestart                     = 127,
	DebugGameTalkEnd                         = 128,
	Max                                      = 129,
};

// Enum RC.ERCAchievementID
// NumValues: 0x0027
enum class ERCAchievementID : uint8
{
	AID_ALL                                  = 0,
	AID_EVENT_CH0_CLEAR                      = 1,
	AID_EVENT_CH1_CLEAR                      = 2,
	AID_EVENT_CH2_CLEAR                      = 3,
	AID_EVENT_CH3_CLEAR                      = 4,
	AID_EVENT_CH4_CLEAR                      = 5,
	AID_EVENT_CH5_CLEAR                      = 6,
	AID_EVENT_GAME_CLEAR                     = 7,
	AID_EVENT_FIND_DESUHIKO                  = 8,
	AID_EVENT_BOMB_CLEAR                     = 9,
	AID_EVENT_RUN_CLEAR                      = 10,
	AID_EVENT_AMATAN_MOVE                    = 11,
	AID_EVENT_EAT_NIKUMAN                    = 12,
	AID_EVENT_HARARA                         = 13,
	AID_EVENT_DESUHIKO                       = 14,
	AID_EVENT_FUBUKI                         = 15,
	AID_EVENT_VIVIA                          = 16,
	AID_EVENT_MAKOTO                         = 17,
	AID_BATTLE_HANRON                        = 18,
	AID_BATTLE_GAYA                          = 19,
	AID_BATTLE_HAJIKI                        = 20,
	AID_BATTLE_ASSIST                        = 21,
	AID_BATTLE_3WAY                          = 22,
	AID_BATTLE_JUST_MOVE                     = 23,
	AID_PAZZLE_CLEAR                         = 24,
	AID_HANNIN_CLEAR                         = 25,
	AID_MTB_CLEAR                            = 26,
	AID_FINALE_CLEAR                         = 27,
	AID_ALL_SS_CLEAR                         = 28,
	AID_SKILL_ALL_OPEN                       = 29,
	AID_RANK_10                              = 30,
	AID_RANK_30                              = 31,
	AID_RANK_50                              = 32,
	AID_FIGURE_ALL                           = 33,
	AID_SHINMITSU_ONE_CLEAR                  = 34,
	AID_SUBQUEST_1_CLEAR                     = 35,
	AID_SUBQUEST_10_CLEAR                    = 36,
	AID_SUBQUEST_ALL_CLEAR                   = 37,
	Max                                      = 38,
};

// Enum RC.ERCAchievementOperationID
// NumValues: 0x000F
enum class ERCAchievementOperationID : uint8
{
	OID_ALL                                  = 0,
	OID_EVENT                                = 1,
	OID_BATTLE_HANRON                        = 2,
	OID_BATTLE_GAYA                          = 3,
	OID_BATTLE_HAJIKI                        = 4,
	OID_BATTLE_ASSIST                        = 5,
	OID_BATTLE_3WAY                          = 6,
	OID_BATTLE_JUST_MOVE                     = 7,
	OID_ALL_SS_CLEAR                         = 8,
	OID_SKILL_ALL_OPEN                       = 9,
	OID_RANK                                 = 10,
	OID_FIGURE                               = 11,
	OID_SHINMITSU_CLEAR                      = 12,
	OID_SUBQUEST_CLEAR                       = 13,
	Max                                      = 14,
};

// Enum RC.ERCCharacterInfoCategory
// NumValues: 0x000D
enum class ERCCharacterInfoCategory : uint8
{
	CCTantei_Main                            = 0,
	CCTantei_Sub_0                           = 1,
	CCAmaterasu                              = 2,
	CCEtc_1                                  = 3,
	CCEtc_2                                  = 4,
	CCEtc_3                                  = 5,
	CCEtc_4                                  = 6,
	SS_CH21                                  = 7,
	SS_CH22                                  = 8,
	SS_CH23                                  = 9,
	SS_CH24                                  = 10,
	SS_CH25                                  = 11,
	Max                                      = 12,
};

// Enum RC.ERCGlossaryCategory
// NumValues: 0x0004
enum class ERCGlossaryCategory : uint8
{
	GCStory                                  = 0,
	GCShinigamiInfo                          = 1,
	GCTutorial                               = 2,
	Max                                      = 3,
};

// Enum RC.ERCInputKeyConfigType
// NumValues: 0x0062
enum class ERCInputKeyConfigType : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	Left                                     = 3,
	Right                                    = 4,
	SurveyPointerUp                          = 5,
	SurveyPointerDown                        = 6,
	SurveyPointerLeft                        = 7,
	SurveyPointerRight                       = 8,
	Walk                                     = 9,
	CameraUp                                 = 10,
	CameraDown                               = 11,
	CameraLeft                               = 12,
	CameraRight                              = 13,
	SurveyCameraUp                           = 14,
	SurveyCameraDown                         = 15,
	SurveyCameraLeft                         = 16,
	SurveyCameraRight                        = 17,
	Decide                                   = 18,
	Cancel                                   = 19,
	Extra1                                   = 20,
	Menu                                     = 21,
	CameraReset                              = 22,
	BackLog                                  = 23,
	Pause                                    = 24,
	Skip                                     = 25,
	Auto                                     = 26,
	Extra2                                   = 27,
	Extra3                                   = 28,
	UIPageBack                               = 29,
	UIPageNext                               = 30,
	MenuAreaMapOpen                          = 31,
	MenuKagiLarge                            = 32,
	MenuSkillUnsetAll                        = 33,
	MenuBgmPlayInOrder                       = 34,
	OptionInitialize                         = 35,
	ADVMenuMapOpen                           = 36,
	ADVMinimapSizeChange                     = 37,
	ADVHolding                               = 38,
	NzDmUp                                   = 39,
	NzDmDown                                 = 40,
	NzDmLeft                                 = 41,
	NzDmRight                                = 42,
	NzDmRebuttalSlash                        = 43,
	NzDmDisturbSlash                         = 44,
	NzDmAssist                               = 45,
	NzDmSelect                               = 46,
	NzDmKeyChange                            = 47,
	NzDmKeyChangeBack                        = 48,
	NzMtbAttackHigh                          = 49,
	NzMtbAttackMiddle                        = 50,
	NzMtbJump                                = 51,
	NzMtbSelect                              = 52,
	NzPazzleKaitouThrow                      = 53,
	NzPazzleKaikagiGet                       = 54,
	NzPazzleZoomIn                           = 55,
	NzPazzleZoomOut                          = 56,
	FinalePiece                              = 57,
	FinalePaseLeft                           = 58,
	FinalePageRight                          = 59,
	FinalePiaceUp                            = 60,
	FinalePiaceDown                          = 61,
	FinalePiaceLeft                          = 62,
	FinalePiaceRight                         = 63,
	FinaleCursolUp                           = 64,
	FinaleCursolDown                         = 65,
	FinaleCursolLeft                         = 66,
	FinaleCursolRight                        = 67,
	FinaleZoom                               = 68,
	NzResultOpenDetail                       = 69,
	AmatanArm                                = 70,
	AmatanBuzz1                              = 71,
	AmatanBuzz2                              = 72,
	AmatanBuzz3                              = 73,
	AmatanBuzz4                              = 74,
	QTEUp                                    = 75,
	QTEDown                                  = 76,
	QTELeft                                  = 77,
	QTERight                                 = 78,
	QTEBtUp                                  = 79,
	QTEBtDown                                = 80,
	QTEBtLeft                                = 81,
	QTEBtRight                               = 82,
	Any                                      = 83,
	MouseX                                   = 84,
	MouseY                                   = 85,
	Run                                      = 86,
	ADVRestart                               = 87,
	MenuDetailScrollUp                       = 88,
	MenuDetailScrollDown                     = 89,
	DebugMenuTriggerL                        = 90,
	DebugMenuTriggerR                        = 91,
	DebugMenuTriggerST                       = 92,
	DebugMenuTriggerATL                      = 93,
	DebugMenuTriggerD                        = 94,
	DebugGameTalkRestart                     = 95,
	DebugGameTalkEnd                         = 96,
	Max                                      = 97,
};

// Enum RC.ERCKaikagiCategory
// NumValues: 0x0005
enum class ERCKaikagiCategory : uint8
{
	KCEvidence                               = 0,
	KCTestimony                              = 1,
	KCFieldEvidence                          = 2,
	KCInference                              = 3,
	Max                                      = 4,
};

// Enum RC.ERCQuestCategory
// NumValues: 0x0004
enum class ERCQuestCategory : uint8
{
	QTMainQuest                              = 0,
	QTSubQuest                               = 1,
	QTSubStory                               = 2,
	Max                                      = 3,
};

// Enum RC.ERCTitleListType
// NumValues: 0x000F
enum class ERCTitleListType : uint8
{
	ChapterSelect                            = 0,
	Collection                               = 1,
	Continue                                 = 2,
	eShop                                    = 3,
	Language                                 = 4,
	LoagGame                                 = 5,
	NewGame                                  = 6,
	Question                                 = 7,
	Option                                   = 8,
	Start                                    = 9,
	SubStory                                 = 10,
	Quit                                     = 11,
	Gallery                                  = 12,
	License                                  = 13,
	Max                                      = 14,
};

// Enum RC.ERCVehicleType
// NumValues: 0x0006
enum class ERCVehicleType : uint8
{
	Bus                                      = 0,
	Car1                                     = 1,
	Car2                                     = 2,
	Car3                                     = 3,
	Truck                                    = 4,
	Max                                      = 5,
};

// Enum RC.ESCBaloonFrame
// NumValues: 0x0004
enum class ESCBaloonFrame : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Shout                                    = 2,
	Max                                      = 3,
};

// Enum RC.ESCBaloonType
// NumValues: 0x0005
enum class ESCBaloonType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Cloudy                                   = 2,
	Heart                                    = 3,
	Max                                      = 4,
};

// Enum RC.ESCCamera
// NumValues: 0x0003
enum class ESCCamera : uint8
{
	Talk                                     = 0,
	Prologue00                               = 1,
	Max                                      = 2,
};

// Enum RC.ESCCharacterBastupFaceID
// NumValues: 0x0059
enum class ESCCharacterBastupFaceID : uint8
{
	Non                                      = 0,
	face_00000                               = 1,
	face_00001                               = 2,
	face_00001a                              = 3,
	face_00003                               = 4,
	face_00004                               = 5,
	face_00200                               = 6,
	face_00201                               = 7,
	face_00202                               = 8,
	face_01000                               = 9,
	face_01001                               = 10,
	face_01000a                              = 11,
	face_01100a                              = 12,
	face_01101                               = 13,
	face_01202                               = 14,
	face_01203                               = 15,
	face_01202a                              = 16,
	face_01203a                              = 17,
	face_01300                               = 18,
	face_01301                               = 19,
	face_01302                               = 20,
	face_01400                               = 21,
	face_01401                               = 22,
	face_01402                               = 23,
	face_02000                               = 24,
	face_02001                               = 25,
	face_02002                               = 26,
	face_02100                               = 27,
	face_02101                               = 28,
	face_03000                               = 29,
	face_03001                               = 30,
	face_03002                               = 31,
	face_03100                               = 32,
	face_03101                               = 33,
	face_03102                               = 34,
	face_03103                               = 35,
	face_03200                               = 36,
	face_03201                               = 37,
	face_03300                               = 38,
	face_03301                               = 39,
	face_03400                               = 40,
	face_03401                               = 41,
	face_03500                               = 42,
	face_03501                               = 43,
	face_05000                               = 44,
	face_05002                               = 45,
	face_05003                               = 46,
	face_05004                               = 47,
	face_05100                               = 48,
	face_05200                               = 49,
	face_05300                               = 50,
	face_05400                               = 51,
	face_05500                               = 52,
	face_01500                               = 53,
	face_10000                               = 54,
	face_10100                               = 55,
	face_10101                               = 56,
	face_10200                               = 57,
	face_10201                               = 58,
	face_10202                               = 59,
	face_10300                               = 60,
	face_10301                               = 61,
	face_10400                               = 62,
	face_10401                               = 63,
	face_10500                               = 64,
	face_10501                               = 65,
	face_10501a                              = 66,
	face_20000                               = 67,
	face_20001                               = 68,
	face_20003                               = 69,
	face_20100                               = 70,
	face_20101                               = 71,
	face_20102                               = 72,
	face_20103                               = 73,
	face_20200                               = 74,
	face_20201                               = 75,
	face_20202                               = 76,
	face_20300                               = 77,
	face_20301                               = 78,
	face_20302                               = 79,
	face_20400                               = 80,
	face_20500                               = 81,
	face_30000                               = 82,
	face_30100                               = 83,
	face_30101                               = 84,
	face_30200                               = 85,
	face_30300                               = 86,
	face_30400                               = 87,
	Max                                      = 88,
};

// Enum RC.ESCCharacterBastupFacialID
// NumValues: 0x0012
enum class ESCCharacterBastupFacialID : uint8
{
	Non                                      = 0,
	facial_00                                = 1,
	facial_01                                = 2,
	facial_02                                = 3,
	facial_03                                = 4,
	facial_04                                = 5,
	facial_05                                = 6,
	facial_06                                = 7,
	facial_07                                = 8,
	facial_08                                = 9,
	facial_09                                = 10,
	facial_10                                = 11,
	facial_11                                = 12,
	facial_12                                = 13,
	facial_13                                = 14,
	facial_14                                = 15,
	facial_15                                = 16,
	Max                                      = 17,
};

// Enum RC.ESCCharacterModel
// NumValues: 0x0012
enum class ESCCharacterModel : uint8
{
	Yuma                                     = 0,
	ShinigamiCyan                            = 1,
	MobSample                                = 2,
	BlueRain_Umb                             = 3,
	YellowRain                               = 4,
	GreenRain                                = 5,
	PurpleRain                               = 6,
	BlueRain                                 = 7,
	BlackSuit_Umb                            = 8,
	BlueSuit_Umb                             = 9,
	GraySuit_Umb                             = 10,
	BlackSuit                                = 11,
	BlueSuit                                 = 12,
	GraySuit                                 = 13,
	YellowT_Umb                              = 14,
	YellowT                                  = 15,
	BlueT                                    = 16,
	Max                                      = 17,
};

// Enum RC.ESCCharacterMotion
// NumValues: 0x0007
enum class ESCCharacterMotion : uint8
{
	Wait                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Jump                                     = 3,
	Smile                                    = 4,
	Whine                                    = 5,
	Max                                      = 6,
};

// Enum RC.ESCCharacterNamePlete
// NumValues: 0x0009
enum class ESCCharacterNamePlete : uint8
{
	Non                                      = 0,
	Question                                 = 1,
	Yuma                                     = 2,
	ShinigamiCyan                            = 3,
	Yakou                                    = 4,
	Uncle                                    = 5,
	Aunt                                     = 6,
	YangMan                                  = 7,
	Max                                      = 8,
};

// Enum RC.ESCEnable
// NumValues: 0x0003
enum class ESCEnable : uint8
{
	Enabble                                  = 0,
	Desable                                  = 1,
	Max                                      = 2,
};

// Enum RC.ESCFadeColor
// NumValues: 0x0005
enum class ESCFadeColor : uint8
{
	Non                                      = 0,
	Black                                    = 1,
	White                                    = 2,
	Red                                      = 3,
	Max                                      = 4,
};

// Enum RC.ESCMessageWindowType
// NumValues: 0x0003
enum class ESCMessageWindowType : uint8
{
	Normal                                   = 0,
	Reverse                                  = 1,
	Max                                      = 2,
};

// Enum RC.ESCVehicleModel
// NumValues: 0x0006
enum class ESCVehicleModel : uint8
{
	NormalVehicle1                           = 0,
	NormalVehicle2                           = 1,
	NormalVehicle3                           = 2,
	Bus                                      = 3,
	Truck                                    = 4,
	Max                                      = 5,
};

// Enum RC.ESCVisible
// NumValues: 0x0003
enum class ESCVisible : uint8
{
	Visible                                  = 0,
	Invisible                                = 1,
	Max                                      = 2,
};

// Enum RC.ERCAchievementCommand
// NumValues: 0x0008
enum class ERCAchievementCommand : uint8
{
	None                                     = 0,
	Create                                   = 1,
	Progress                                 = 2,
	Unlock                                   = 3,
	Lock                                     = 4,
	Show                                     = 5,
	Delete                                   = 6,
	ERCAchievementCommand_MAX                = 7,
};

// Enum RC.ERCActionKeyType
// NumValues: 0x000B
enum class ERCActionKeyType : uint8
{
	AK_None                                  = 0,
	AK_LTop                                  = 1,
	AK_LRight                                = 2,
	AK_LDown                                 = 3,
	AK_LLeft                                 = 4,
	AK_RTop                                  = 5,
	AK_RRight                                = 6,
	AK_RDown                                 = 7,
	AK_RLeft                                 = 8,
	AK_Amatan                                = 9,
	AK_Max                                   = 10,
};

// Enum RC.ERCAdvHUDCutInSEType
// NumValues: 0x0004
enum class ERCAdvHUDCutInSEType : uint8
{
	None                                     = 0,
	TypeA                                    = 1,
	TypeB                                    = 2,
	Max                                      = 3,
};

// Enum RC.ERCAdvHUDCutInType
// NumValues: 0x0005
enum class ERCAdvHUDCutInType : uint8
{
	Normal                                   = 0,
	Text                                     = 1,
	Anim                                     = 2,
	FullScreen                               = 3,
	Max                                      = 4,
};

// Enum RC.ERCAdvHUDWBPLoadState
// NumValues: 0x0004
enum class ERCAdvHUDWBPLoadState : uint8
{
	None                                     = 0,
	Loading                                  = 1,
	Loaded                                   = 2,
	Max                                      = 3,
};

// Enum RC.ERCAdvHUDSoundNovelCommand
// NumValues: 0x0007
enum class ERCAdvHUDSoundNovelCommand : uint8
{
	Text                                     = 0,
	BackgroundFadeIn                         = 1,
	BackgroundFadeOut                        = 2,
	CutinStart                               = 3,
	CutinFinish                              = 4,
	CutinAnimNext                            = 5,
	Max                                      = 6,
};

// Enum RC.ERCAdvHUDSubtitleType
// NumValues: 0x0006
enum class ERCAdvHUDSubtitleType : uint8
{
	Normal                                   = 0,
	SeqEvent                                 = 1,
	Movie                                    = 2,
	ForceDraw                                = 3,
	Battle                                   = 4,
	Max                                      = 5,
};

// Enum RC.ERCAdvHUDTalkWindowType
// NumValues: 0x0006
enum class ERCAdvHUDTalkWindowType : uint8
{
	Normal                                   = 0,
	Shinigami                                = 1,
	CutinStart                               = 2,
	CutinFinish                              = 3,
	CutinAnimNext                            = 4,
	Max                                      = 5,
};

// Enum RC.ERCAdvHUDPressedDecideResult
// NumValues: 0x000D
enum class ERCAdvHUDPressedDecideResult : uint8
{
	Failed                                   = 128,
	Failed_NoAccessableWidget                = 129,
	Failed_WaitingAccessedWidget             = 130,
	Failed_WidgetAnimation                   = 131,
	Failed_WidgetSomething                   = 132,
	Failed_NoComponent                       = 133,
	Failed_HUDState                          = 134,
	Failed_WaitLastAccessTimer               = 135,
	Successed_Character                      = 0,
	Successed_NPC                            = 1,
	Successed_CheckActor                     = 2,
	Successed_UnknownActor                   = 3,
	ERCAdvHUDPressedDecideResult_MAX         = 136,
};

// Enum RC.ERCAdvHUDAccessableWidgetType
// NumValues: 0x0009
enum class ERCAdvHUDAccessableWidgetType : uint8
{
	Invalid                                  = 0,
	Balloon                                  = 1,
	TalkIcon                                 = 2,
	Marker                                   = 3,
	ResearchMarker                           = 4,
	ChangeArea                               = 5,
	EnterBuilding                            = 6,
	BusStop                                  = 7,
	Max                                      = 8,
};

// Enum RC.ERCAdvHUDWidgetRequest
// NumValues: 0x0005
enum class ERCAdvHUDWidgetRequest : uint8
{
	None                                     = 0,
	Open                                     = 1,
	Close                                    = 2,
	Reopen                                   = 3,
	Max                                      = 4,
};

// Enum RC.ERCAdvHUDWidgetState
// NumValues: 0x0008
enum class ERCAdvHUDWidgetState : uint8
{
	None                                     = 0,
	Open                                     = 1,
	Run                                      = 2,
	Wait                                     = 3,
	WaitChanging                             = 4,
	Run2                                     = 5,
	Close                                    = 6,
	Max                                      = 7,
};

// Enum RC.ERCAdvHUDPauseComponentStatus
// NumValues: 0x0006
enum class ERCAdvHUDPauseComponentStatus : uint8
{
	None                                     = 0,
	Pause                                    = 1,
	Menu                                     = 2,
	Backlog                                  = 3,
	BacklogClose                             = 4,
	ERCAdvHUDPauseComponentStatus_MAX        = 5,
};

// Enum RC.ERCAdvHUDResearchPointerMouse_InputType
// NumValues: 0x0004
enum class ERCAdvHUDResearchPointerMouse_InputType : uint8
{
	Move                                     = 0,
	MouseNotMove                             = 1,
	DoNothing                                = 2,
	Max                                      = 3,
};

// Enum RC.ERCAdvHUDResearchPointerMouse_ModeOffType
// NumValues: 0x0004
enum class ERCAdvHUDResearchPointerMouse_ModeOffType : uint8
{
	DoNothing                                = 0,
	MoveToNearMarker                         = 1,
	MoveToLastSelectedMarker                 = 2,
	Max                                      = 3,
};

// Enum RC.ERCAdvHUDResearchPointerMouse_MoveType
// NumValues: 0x0003
enum class ERCAdvHUDResearchPointerMouse_MoveType : uint8
{
	Absolute                                 = 0,
	Relative                                 = 1,
	Max                                      = 2,
};

// Enum RC.ERCAdvHUDResearchPointerMouse_Mode
// NumValues: 0x0004
enum class ERCAdvHUDResearchPointerMouse_Mode : uint8
{
	Off                                      = 0,
	On                                       = 1,
	Camera                                   = 2,
	Max                                      = 3,
};

// Enum RC.ERCAdvHUDResearchDetailType
// NumValues: 0x0005
enum class ERCAdvHUDResearchDetailType : uint8
{
	Normal                                   = 0,
	PastVision_Present                       = 1,
	PastVision_Past                          = 2,
	SpotSelect                               = 3,
	Max                                      = 4,
};

// Enum RC.ERCAdvHUDResearchModeState
// NumValues: 0x000A
enum class ERCAdvHUDResearchModeState : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Run                                      = 2,
	Finish                                   = 3,
	DetailStart                              = 4,
	DetailRun                                = 5,
	DetailFinish                             = 6,
	ToDetail                                 = 7,
	ToNormal                                 = 8,
	Max                                      = 9,
};

// Enum RC.ERCAdvHUDSpSelectType
// NumValues: 0x0002
enum class ERCAdvHUDSpSelectType : uint8
{
	EyeTracking                              = 0,
	Max                                      = 1,
};

// Enum RC.ERCAttachAnimType
// NumValues: 0x0005
enum class ERCAttachAnimType : uint8
{
	Idle                                     = 0,
	Case01                                   = 1,
	Case02                                   = 2,
	Case03                                   = 3,
	ERCAttachAnimType_MAX                    = 4,
};

// Enum RC.ERCAutoPlayCompletionPred
// NumValues: 0x0005
enum class ERCAutoPlayCompletionPred : uint8
{
	All                                      = 0,
	Translation                              = 1,
	Rotation                                 = 2,
	Heading                                  = 3,
	Max                                      = 4,
};

// Enum RC.ESelectType
// NumValues: 0x0003
enum class ESelectType : uint8
{
	VERTICAL                                 = 0,
	Width                                    = 1,
	ESelectType_MAX                          = 2,
};

// Enum RC.EAnswerSelect
// NumValues: 0x0003
enum class EAnswerSelect : uint8
{
	CURSOL                                   = 0,
	Image                                    = 1,
	EAnswerSelect_MAX                        = 2,
};

// Enum RC.EBombLayoutType
// NumValues: 0x0003
enum class EBombLayoutType : uint8
{
	TITLE_LAYOUT                             = 0,
	GAME_LAYOUT                              = 1,
	EBombLayoutType_MAX                      = 2,
};

// Enum RC.EBombReleaseState
// NumValues: 0x000F
enum class EBombReleaseState : uint8
{
	PRE_TITLE                                = 0,
	Title                                    = 1,
	PRE_TUTORIAL                             = 2,
	TUTORIAL                                 = 3,
	PRE_START                                = 4,
	Start                                    = 5,
	PRE_PLAY                                 = 6,
	Play                                     = 7,
	PRE_SUCCESS                              = 8,
	Success                                  = 9,
	PRE_GAMEOVER                             = 10,
	GameOver                                 = 11,
	PRE_FINISH                               = 12,
	Finish                                   = 13,
	EBombReleaseState_MAX                    = 14,
};

// Enum RC.ECameraType
// NumValues: 0x0006
enum class ECameraType : uint8
{
	RCCameraTPS                              = 0,
	RCCameraFIX                              = 1,
	RCCameraCrescend                         = 2,
	RCCameraCine                             = 3,
	RCCameraFPS                              = 4,
	ECameraType_MAX                          = 5,
};

// Enum RC.EMotionSlotType
// NumValues: 0x0006
enum class EMotionSlotType : uint8
{
	Slot0                                    = 0,
	Slot1                                    = 1,
	SlotEx                                   = 2,
	TrustYou                                 = 3,
	None                                     = 4,
	EMotionSlotType_MAX                      = 5,
};

// Enum RC.EAnimationNotifyType
// NumValues: 0x0006
enum class EAnimationNotifyType : uint8
{
	Invalid                                  = 0,
	Start                                    = 1,
	End                                      = 2,
	IsRightFoot                              = 3,
	IsLeftFoot                               = 4,
	EAnimationNotifyType_MAX                 = 5,
};

// Enum RC.EAttachPlaceType
// NumValues: 0x000E
enum class EAttachPlaceType : uint8
{
	Overhead                                 = 0,
	Head                                     = 1,
	Eye                                      = 2,
	Mouth                                    = 3,
	Hand_R                                   = 4,
	Hand_L                                   = 5,
	Spine                                    = 6,
	Pelvis                                   = 7,
	Utility01                                = 8,
	Utility02                                = 9,
	Utility03                                = 10,
	Utility04                                = 11,
	Utility05                                = 12,
	EAttachPlaceType_MAX                     = 13,
};

// Enum RC.EAttachState
// NumValues: 0x0005
enum class EAttachState : uint8
{
	Non                                      = 0,
	AttachmentLoading                        = 1,
	AttachmentActive                         = 2,
	AttachmentError                          = 3,
	EAttachState_MAX                         = 4,
};

// Enum RC.EFacialMorphTargetClass
// NumValues: 0x0007
enum class EFacialMorphTargetClass : uint8
{
	None                                     = 0,
	Eye                                      = 1,
	Eyebrow                                  = 2,
	Mouth                                    = 3,
	Body                                     = 4,
	Hand                                     = 5,
	EFacialMorphTargetClass_MAX              = 6,
};

// Enum RC.EFormPartType
// NumValues: 0x0007
enum class EFormPartType : uint8
{
	Face                                     = 0,
	Body                                     = 1,
	Coat                                     = 2,
	Hair                                     = 3,
	HandR                                    = 4,
	HandL                                    = 5,
	EFormPartType_MAX                        = 6,
};

// Enum RC.EFormState
// NumValues: 0x0005
enum class EFormState : uint8
{
	Non                                      = 0,
	FormLoading                              = 1,
	FormActive                               = 2,
	FormError                                = 3,
	EFormState_MAX                           = 4,
};

// Enum RC.ELookTargetProcess
// NumValues: 0x0005
enum class ELookTargetProcess : uint32
{
	None                                     = 0,
	LookActor                                = 1,
	LookCharacterSocket                      = 2,
	LookPos                                  = 3,
	ELookTargetProcess_MAX                   = 4,
};

// Enum RC.ESelectableTargetBoneList
// NumValues: 0x0018
enum class ESelectableTargetBoneList : uint8
{
	root                                     = 0,
	pelvis                                   = 1,
	spine_01                                 = 2,
	spine_02                                 = 3,
	spine_03                                 = 4,
	neck_01                                  = 5,
	head                                     = 6,
	clavicle_l                               = 7,
	clavicle_r                               = 8,
	upperarm_l                               = 9,
	upperarm_r                               = 10,
	lowerarm_l                               = 11,
	lowerarm_r                               = 12,
	hand_l                                   = 13,
	hand_r                                   = 14,
	thigh_l                                  = 15,
	thigh_r                                  = 16,
	calf_l                                   = 17,
	calf_r                                   = 18,
	foot_l                                   = 19,
	foot_r                                   = 20,
	ball_l                                   = 21,
	ball_r                                   = 22,
	ESelectableTargetBoneList_MAX            = 23,
};

// Enum RC.ERCCheckActorKaiKagiSelectResult
// NumValues: 0x0007
enum class ERCCheckActorKaiKagiSelectResult : uint8
{
	Invalid                                  = 0,
	Correct                                  = 1,
	Incorrect                                = 2,
	TimeOver                                 = 3,
	Cancel                                   = 4,
	Failed                                   = 5,
	ERCCheckActorKaiKagiSelectResult_MAX     = 6,
};

// Enum RC.ERCCompanionAiMovePositionType
// NumValues: 0x0004
enum class ERCCompanionAiMovePositionType : uint8
{
	All                                      = 0,
	Back                                     = 1,
	Front                                    = 2,
	ERCCompanionAiMovePositionType_MAX       = 3,
};

// Enum RC.ERCCompanionAiMoveType
// NumValues: 0x0006
enum class ERCCompanionAiMoveType : uint8
{
	Stop                                     = 0,
	Move                                     = 1,
	Leave                                    = 2,
	Warp                                     = 3,
	Off                                      = 4,
	ERCCompanionAiMoveType_MAX               = 5,
};

// Enum RC.ERCCSVDataAssetIndex
// NumValues: 0x009B
enum class ERCCSVDataAssetIndex : uint8
{
	RCParamBgList                            = 0,
	RCParamFloorType                         = 1,
	RCParamFog                               = 2,
	RCParamAttachmentColorPalette            = 3,
	RCParamAttachmentFormList                = 4,
	RCParamCharacterColorPalette             = 5,
	RCParamCharacterDlcList                  = 6,
	RCParamCharacterLookSetting              = 7,
	RCParamCharacterMaterialList             = 8,
	RCParamCharacterModelList                = 9,
	RCParamCharacterTagList                  = 10,
	RCParamEventCharacterFacialColor         = 11,
	RCParamFormList                          = 12,
	RCParamMobList                           = 13,
	RCParamShinigamiExIdle                   = 14,
	RCParamSocketList                        = 15,
	CascadeRainData                          = 16,
	RainData                                 = 17,
	RCParamRainEffectList                    = 18,
	RCParamChapterList                       = 19,
	RCParamEventCheckReloadSubLevel          = 20,
	RCParamEventCheckSubQuestSubLevel        = 21,
	RCParamEventList                         = 22,
	RCParamEventMapBusStopInfo               = 23,
	RCParamEventMapConnectInfo               = 24,
	RCParamEventMapInfo                      = 25,
	RCParamEventSceneMapConnectInfo          = 26,
	RCParamLevelList                         = 27,
	RCParamBombRelease                       = 28,
	RCParamNzCriminal                        = 29,
	RCParamNzCriminalCameraSetting           = 30,
	RCParamNzCriminalScene                   = 31,
	RCParamNzPuzzle                          = 32,
	RCParamNzPuzzleBarrelWord                = 33,
	RCParamNzPuzzleLang                      = 34,
	RCParamNzPuzzleScene                     = 35,
	RCParamNzPuzzleSpeed                     = 36,
	RCParamWanderingSpiritSpeed              = 37,
	RCParamMovieData                         = 38,
	RCParamAchievement                       = 39,
	RCParamForceFeedBackEffect               = 40,
	RCParamInputID                           = 41,
	RCParamInputKey                          = 42,
	RCParamInputKeyConfig                    = 43,
	RCParamSaveLoadError                     = 44,
	RCParamDLCSoundSheetList                 = 45,
	RCParamEnviromentSound                   = 46,
	RCParamLipSyncCharaIDList                = 47,
	RCParamLipSyncDataAdjust                 = 48,
	RCParamSequencerSoundTemplate            = 49,
	RCParamSoundFormat                       = 50,
	RCParamSoundNonResidentList              = 51,
	RCParamSoundResidentList                 = 52,
	RCParamVoiceDataPathList                 = 53,
	RCParamVoiceSheetNameList                = 54,
	RCParamSystem                            = 55,
	RCParamSystemPlatform                    = 56,
	RCParamTextList                          = 57,
	RCParamButtonGuideList                   = 58,
	RCParamChapterName                       = 59,
	RCParamChapterSelectData                 = 60,
	RCParamChapterSelectDialog               = 61,
	RCParamCharacterCategoryList             = 62,
	RCParamCharacterInfoList                 = 63,
	RCParamCharacterSelectPageSetting        = 64,
	RCParamCollectionDialog                  = 65,
	RCParamCollectionMenu                    = 66,
	RCParamFaceEffectAnimList                = 67,
	RCParamFaceGradationList                 = 68,
	RCParamFigure                            = 69,
	RCParamFigureInformation                 = 70,
	RCParamGalleryBgmList                    = 71,
	RCParamGalleryMovieList                  = 72,
	RCParamGlossaryCategoryList              = 73,
	RCParamGlossaryList                      = 74,
	RCParamKaikagiList                       = 75,
	RCParamMenuAreaMapList                   = 76,
	RCParamMenuContentsList                  = 77,
	RCParamMenuStatus                        = 78,
	RCParamMenuWorldMapList                  = 79,
	RCParamMinimapList                       = 80,
	RCParamQuestCategoryList                 = 81,
	RCParamQuestList                         = 82,
	RCParamSaveLoadDialog                    = 83,
	RCParamSaveLoadIcon                      = 84,
	RCParamSaveLoadText                      = 85,
	RCParamSkillEquipmentList                = 86,
	RCParamSkillList                         = 87,
	RCParamStaffRollList                     = 88,
	RCParamStaffRollList_PS5                 = 89,
	RCParamStaffRollList_Switch              = 90,
	RCParamStaffRollList_Xbox                = 91,
	RCParamStartupText                       = 92,
	RCParamSubQuestText                      = 93,
	RCParamTalkTextTagList                   = 94,
	RCParamTanteiPointList                   = 95,
	RCParamTanteiRankList                    = 96,
	RCParamTipsBlackSceneList                = 97,
	RCParamTipsList                          = 98,
	RCParamTitleDialogText                   = 99,
	RCParamTitleHelpText                     = 100,
	RCParamTitleLanguageText                 = 101,
	RCParamTitleMenuList                     = 102,
	RCParamTitleSubStory                     = 103,
	RCParamTitleSubStoryDialogText           = 104,
	RCParamTitleSubStoryWindowText           = 105,
	RCParamTutorialButtonGuideList           = 106,
	RCParamTutorialList                      = 107,
	RCParamTutorialPageList                  = 108,
	RCParamVariableChapter                   = 109,
	RCParamVariableGame                      = 110,
	RCParamVariableScene                     = 111,
	RCParamVehicle                           = 112,
	RCParamNzFinaleDetectiveBackgroundImage  = 113,
	RCParamNzResultChapterSetting            = 114,
	RCParamNzResultHitPoint                  = 115,
	RCParamNzResultMinigameList              = 116,
	RCParamNzResultMinigamePoint             = 117,
	RCParamNzResultMinigameText              = 118,
	RCParamNzResultMinigameType              = 119,
	RCParamNzResultRank                      = 120,
	RCParamNzResultRankItemToTanteiPoint     = 121,
	RCParamNzResultRankPoint                 = 122,
	RCParamNzResultRankToTanteiPoint         = 123,
	RCParamNzResultReasoningPoint            = 124,
	RCParamOption                            = 125,
	RCParamOptionCommon                      = 126,
	RCParamOptionController                  = 127,
	RCParamOptionGraphics                    = 128,
	RCParamOptionKey                         = 129,
	RCParamOptionKeyDuplicate                = 130,
	RCParamOptionSound                       = 131,
	RCParamOption_ItemList                   = 132,
	RCParamBgFileListL00                     = 133,
	RCParamBgFileListL01                     = 134,
	RCParamBgListL00                         = 135,
	RCParamBgListL01                         = 136,
	RCParamEventSceneMapConnectInfoCH21      = 137,
	RCParamEventSceneMapConnectInfoCH22      = 138,
	RCParamEventSceneMapConnectInfoCH23      = 139,
	RCParamEventSceneMapConnectInfoCH24      = 140,
	RCParamEventSceneMapConnectInfoCH25      = 141,
	RCParam_Subtitle_MOVIE_0000              = 142,
	RCParamBgmIdList                         = 143,
	RCParamEnvIdList                         = 144,
	RCParamSeIdList                          = 145,
	RCParamVoiceIdList                       = 146,
	RCParamTextListRC_DLC_CH21               = 147,
	RCParamTextListRC_DLC_CH22               = 148,
	RCParamTextListRC_DLC_CH23               = 149,
	RCParamTextListRC_DLC_CH24               = 150,
	RCParamTextListRC_DLC_CH25               = 151,
	RCSubtitle_CH90_0001                     = 152,
	RCTalk_CH90_0001                         = 153,
	MAX                                      = 154,
};

// Enum RC.ERCAutoMoveDirect
// NumValues: 0x0006
enum class ERCAutoMoveDirect : uint8
{
	None                                     = 0,
	North                                    = 1,
	East                                     = 2,
	South                                    = 3,
	West                                     = 4,
	Max                                      = 5,
};

// Enum RC.ERCDebugAutoPlayType
// NumValues: 0x0003
enum class ERCDebugAutoPlayType : uint8
{
	Clear                                    = 0,
	Random                                   = 1,
	ERCDebugAutoPlayType_MAX                 = 2,
};

// Enum RC.ERCDollyCamPlane
// NumValues: 0x0005
enum class ERCDollyCamPlane : uint8
{
	Dolly_None                               = 0,
	Dolly_XZ                                 = 1,
	Dolly_XY                                 = 2,
	Dolly_YZ                                 = 3,
	Dolly_Max                                = 4,
};

// Enum RC.ERCDroneBehaviorType
// NumValues: 0x0004
enum class ERCDroneBehaviorType : uint8
{
	idle                                     = 0,
	IDLE_TURN                                = 1,
	walk                                     = 2,
	ERCDroneBehaviorType_MAX                 = 3,
};

// Enum RC.ERCEffectType
// NumValues: 0x0005
enum class ERCEffectType : uint8
{
	Invalid                                  = 0,
	Particle                                 = 1,
	Niagara                                  = 2,
	EffectSequence                           = 3,
	Max                                      = 4,
};

// Enum RC.ERCEffectDataState
// NumValues: 0x0005
enum class ERCEffectDataState : uint8
{
	Invalid                                  = 0,
	SetData                                  = 1,
	Loading                                  = 2,
	Loaded                                   = 3,
	Max                                      = 4,
};

// Enum RC.ERCEnvironmentType
// NumValues: 0x000D
enum class ERCEnvironmentType : uint8
{
	None                                     = 0,
	Camera                                   = 1,
	PlayerMoveSpeed                          = 2,
	Fog                                      = 3,
	Rain                                     = 4,
	CharacterMaterial                        = 5,
	ShinigamiMaterial                        = 6,
	Minimap                                  = 7,
	AreaName                                 = 8,
	Wind                                     = 9,
	CharacterDrawLayerList                   = 10,
	FaceFilterID                             = 11,
	ERCEnvironmentType_MAX                   = 12,
};

// Enum RC.ERCEnvironmentChangeSpeedType
// NumValues: 0x0006
enum class ERCEnvironmentChangeSpeedType : uint8
{
	None                                     = 0,
	Run                                      = 1,
	Walk                                     = 2,
	Train                                    = 3,
	Yoromeki                                 = 4,
	ERCEnvironmentChangeSpeedType_MAX        = 5,
};

// Enum RC.ERCEnvironmentChangeRainType
// NumValues: 0x0004
enum class ERCEnvironmentChangeRainType : uint8
{
	None                                     = 0,
	RainOn                                   = 1,
	RainOff                                  = 2,
	ERCEnvironmentChangeRainType_MAX         = 3,
};

// Enum RC.EEvaluationTitleState
// NumValues: 0x0009
enum class EEvaluationTitleState : uint32
{
	INITIALIZE                               = 0,
	SELECT                                   = 1,
	SELECTED                                 = 2,
	CHANGE_SCENE                             = 3,
	FINISH_CHECK                             = 4,
	CHECK_FINISH_SAVELOAD                    = 5,
	PRE_CHECK_FINISH_SAVELOAD                = 6,
	NONE                                     = 7,
	EEvaluationTitleState_MAX                = 8,
};

// Enum RC.ETITLE_SELECT
// NumValues: 0x0005
enum class ETITLE_SELECT : uint32
{
	NEWGAME                                  = 0,
	LOADGAME                                 = 1,
	WALK_THROUGH                             = 2,
	MAX                                      = 3,
	NONE                                     = 4,
};

// Enum RC.EEventCharacterFormStyle
// NumValues: 0x0005
enum class EEventCharacterFormStyle : uint8
{
	Default                                  = 0,
	Form_NoCape                              = 1,
	Form_NoCape_A                            = 2,
	Form_NoCape_B                            = 3,
	EEventCharacterFormStyle_MAX             = 4,
};

// Enum RC.ERCForceFeedBackLoadStatus
// NumValues: 0x0005
enum class ERCForceFeedBackLoadStatus : uint8
{
	None                                     = 0,
	LoadStart                                = 1,
	Loading                                  = 2,
	LoadEnd                                  = 3,
	ERCForceFeedBackLoadStatus_MAX           = 4,
};

// Enum RC.ERCQuestEndType
// NumValues: 0x0003
enum class ERCQuestEndType : uint8
{
	Order                                    = 0,
	All                                      = 1,
	ERCQuestEndType_MAX                      = 2,
};

// Enum RC.ERCOptionFramerateCap
// NumValues: 0x0008
enum class ERCOptionFramerateCap : uint8
{
	Non                                      = 0,
	Cap120                                   = 1,
	Cap60                                    = 2,
	Cap30                                    = 3,
	Cap20                                    = 4,
	Cap15                                    = 5,
	Cap10                                    = 6,
	ERCOptionFramerateCap_MAX                = 7,
};

// Enum RC.ERCOptionWindowMode
// NumValues: 0x0004
enum class ERCOptionWindowMode : uint8
{
	FullScreen                               = 0,
	BorderlessWindow                         = 1,
	Window                                   = 2,
	ERCOptionWindowMode_MAX                  = 3,
};

// Enum RC.ERCOptionCameraReverse
// NumValues: 0x0003
enum class ERCOptionCameraReverse : uint8
{
	Normal                                   = 0,
	Reverse                                  = 1,
	ERCOptionCameraReverse_MAX               = 2,
};

// Enum RC.ERCOptionMinimapRotate
// NumValues: 0x0003
enum class ERCOptionMinimapRotate : uint8
{
	Fixed                                    = 0,
	Rotate                                   = 1,
	ERCOptionMinimapRotate_MAX               = 2,
};

// Enum RC.ERCOptionType
// NumValues: 0x002A
enum class ERCOptionType : uint8
{
	MinimapRotate                            = 0,
	MinimapDraw                              = 1,
	CameraAutoMove                           = 2,
	MessageSpeed                             = 3,
	SoundVolumeAll                           = 4,
	SoundVolumeBGM                           = 5,
	SoundVolumeSystemSE                      = 6,
	SoundVolumeGameSE                        = 7,
	SoundVolumeVoice                         = 8,
	SubtitleDraw                             = 9,
	BattleSubtitleDraw                       = 10,
	VoiceLanguage                            = 11,
	VoiceQuality                             = 12,
	MovieQuality                             = 13,
	ControllerVibration                      = 14,
	ControllerReturnSwitch                   = 15,
	CameraHorizontalReverse                  = 16,
	CameraVerticalReverse                    = 17,
	CameraSpeed                              = 18,
	Brightness                               = 19,
	WindowMode                               = 20,
	ScreenResolution                         = 21,
	Display                                  = 22,
	FramerateCap                             = 23,
	VSync                                    = 24,
	AntiAliasingQuality                      = 25,
	ShadowQuality                            = 26,
	TextureQuality                           = 27,
	PostprocessQuality                       = 28,
	EffectQuality                            = 29,
	InputPlatform                            = 30,
	InputPlatformChange                      = 31,
	DisplayScale                             = 32,
	ConsumerQualityMode                      = 33,
	CharacterQuality                         = 34,
	UiQuality                                = 35,
	MovQuality                               = 36,
	SubLevelQuality                          = 37,
	CharacterDrawQuality                     = 38,
	MobNumQuality                            = 39,
	TextLanguage                             = 40,
	Max                                      = 41,
};

// Enum RC.ERCVariableType
// NumValues: 0x0004
enum class ERCVariableType : uint8
{
	Game                                     = 0,
	Chapter                                  = 1,
	Snece                                    = 2,
	ERCVariableType_MAX                      = 3,
};

// Enum RC.ERCOptionUiQuality
// NumValues: 0x0003
enum class ERCOptionUiQuality : uint8
{
	UiQualit4K                               = 0,
	UiQualityNormal                          = 1,
	Max                                      = 2,
};

// Enum RC.ERCOptionConsumerQualityMode
// NumValues: 0x0003
enum class ERCOptionConsumerQualityMode : uint8
{
	Quality                                  = 0,
	Performance                              = 1,
	Max                                      = 2,
};

// Enum RC.ERCOptionQuality
// NumValues: 0x0005
enum class ERCOptionQuality : uint8
{
	Epic                                     = 0,
	High                                     = 1,
	Middle                                   = 2,
	Low                                      = 3,
	Max                                      = 4,
};

// Enum RC.ERCOptionSubLevel
// NumValues: 0x0003
enum class ERCOptionSubLevel : uint8
{
	SubLevelLv0_Normal                       = 0,
	SubLevelLv1_Low                          = 1,
	Max                                      = 2,
};

// Enum RC.ERCOptionMobNum
// NumValues: 0x0006
enum class ERCOptionMobNum : uint8
{
	MobNumLv0_Normal                         = 0,
	MobNumLv1_75                             = 1,
	MobNumLv2_50                             = 2,
	MobNumLv3_25                             = 3,
	MobNumLv4_00                             = 4,
	Max                                      = 5,
};

// Enum RC.ERCOptionCharacterDraw
// NumValues: 0x0005
enum class ERCOptionCharacterDraw : uint8
{
	CharacterDrawLv0_Normal                  = 0,
	CharacterDrawLv1_Little                  = 1,
	CharacterDrawLv2_Large                   = 2,
	CharacterDrawLv3_Large2                  = 3,
	Max                                      = 4,
};

// Enum RC.ERCOptionMobDraw
// NumValues: 0x0003
enum class ERCOptionMobDraw : uint8
{
	MobDrawLv0_Normal                        = 0,
	MobDrawLv1_Little                        = 1,
	Max                                      = 2,
};

// Enum RC.ERCOptionMobQuality
// NumValues: 0x0003
enum class ERCOptionMobQuality : uint8
{
	MobLv0_Normal                            = 0,
	MobLv1_Integrated                        = 1,
	Max                                      = 2,
};

// Enum RC.ERCGrassStatus
// NumValues: 0x0008
enum class ERCGrassStatus : uint8
{
	ChangingTransform                        = 0,
	Trampled                                 = 1,
	Deformed                                 = 2,
	UnTrampling                              = 3,
	UnDeforming                              = 4,
	FreshlyDeformed                          = 5,
	NOTHING                                  = 6,
	ERCGrassStatus_MAX                       = 7,
};

// Enum RC.ERCSkillType
// NumValues: 0x0004
enum class ERCSkillType : uint8
{
	Hp                                       = 0,
	Attack                                   = 1,
	Defense                                  = 2,
	ERCSkillType_MAX                         = 3,
};

// Enum RC.ERCSkillFunctionType
// NumValues: 0x000E
enum class ERCSkillFunctionType : uint8
{
	Skill_HpUp                               = 0,
	Skill_BattleSpeedDown                    = 1,
	Skill_BattleKeySelectDown                = 2,
	Skill_BattleAssistTimeDown               = 3,
	Skill_BattleHajikuText                   = 4,
	Skill_PazzleKeySelectDown                = 5,
	Skill_PazzleSelectDown                   = 6,
	Skill_PazzleSpeedDown                    = 7,
	Skill_SelectTimeLimitUp                  = 8,
	Skill_SelectDown                         = 9,
	Skill_MtbPowerUp                         = 10,
	Skill_KeySelectDown                      = 11,
	Skill_MoveSpeedUp                        = 12,
	Skill_MAX                                = 13,
};

// Enum RC.ERCKaikagiType
// NumValues: 0x0003
enum class ERCKaikagiType : uint8
{
	TESTIMONY                                = 0,
	EVIDENCE                                 = 1,
	ERCKaikagiType_MAX                       = 2,
};

// Enum RC.ERCGameMenuTopMenuType
// NumValues: 0x0009
enum class ERCGameMenuTopMenuType : uint8
{
	REAL_CHAPTER0                            = 0,
	REAL_CHAPTER0_QUEST                      = 1,
	NAZO_CHAPTER0                            = 2,
	REAL_CHAPTER1_START                      = 3,
	REAL_CHAPTER1_SUB_QUEST                  = 4,
	REAL                                     = 5,
	NAZO                                     = 6,
	REAL_UNKNOWN_PLAYER                      = 7,
	Max                                      = 8,
};

// Enum RC.ERCGameMenuDirectAccessType
// NumValues: 0x0005
enum class ERCGameMenuDirectAccessType : uint8
{
	Top                                      = 0,
	WorldMenu                                = 1,
	Kaikagi                                  = 2,
	Collection                               = 3,
	ERCGameMenuDirectAccessType_MAX          = 4,
};

// Enum RC.ERCGameMenuQuestStatus
// NumValues: 0x0005
enum class ERCGameMenuQuestStatus : uint8
{
	None                                     = 0,
	Orders                                   = 1,
	Complete                                 = 2,
	Failure                                  = 3,
	ERCGameMenuQuestStatus_MAX               = 4,
};

// Enum RC.ERCGameMenuPlayerIconType
// NumValues: 0x0008
enum class ERCGameMenuPlayerIconType : uint8
{
	CHR000                                   = 0,
	CHR020                                   = 1,
	CHR010                                   = 2,
	CHR011                                   = 3,
	CHR012                                   = 4,
	CHR013                                   = 5,
	CHR015                                   = 6,
	ERCGameMenuPlayerIconType_MAX            = 7,
};

// Enum RC.ERCGameMenuMapM07IconType
// NumValues: 0x0003
enum class ERCGameMenuMapM07IconType : uint8
{
	Normal                                   = 0,
	Type2                                    = 1,
	ERCGameMenuMapM07IconType_MAX            = 2,
};

// Enum RC.ERCGameMenuMapM03IconType
// NumValues: 0x0003
enum class ERCGameMenuMapM03IconType : uint8
{
	Normal                                   = 0,
	Type2                                    = 1,
	ERCGameMenuMapM03IconType_MAX            = 2,
};

// Enum RC.ERCGameMenuMapPlayerStatus
// NumValues: 0x0003
enum class ERCGameMenuMapPlayerStatus : uint8
{
	Normal                                   = 0,
	Unknown                                  = 1,
	ERCGameMenuMapPlayerStatus_MAX           = 2,
};

// Enum RC.ERCGameMenuKaikagiStatus
// NumValues: 0x0004
enum class ERCGameMenuKaikagiStatus : uint8
{
	None                                     = 0,
	Kaikagi                                  = 1,
	Tegakari                                 = 2,
	ERCGameMenuKaikagiStatus_MAX             = 3,
};

// Enum RC.ERCGameMenuStatus
// NumValues: 0x0004
enum class ERCGameMenuStatus : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	Hidden                                   = 2,
	ERCGameMenuStatus_MAX                    = 3,
};

// Enum RC.ERCGameMenuSelectType
// NumValues: 0x0010
enum class ERCGameMenuSelectType : uint8
{
	Top                                      = 0,
	WarldMap                                 = 1,
	AreaMap                                  = 2,
	Kaikagi                                  = 3,
	MainQuest                                = 4,
	SubQuest                                 = 5,
	Persona                                  = 6,
	Skill                                    = 7,
	Character                                = 8,
	Glossary                                 = 9,
	Collection                               = 10,
	SaveLoad                                 = 11,
	Save                                     = 12,
	Load                                     = 13,
	Option                                   = 14,
	Max                                      = 15,
};

// Enum RC.ERCGameMenuType
// NumValues: 0x0005
enum class ERCGameMenuType : uint8
{
	Real                                     = 0,
	Nazo                                     = 1,
	RealCh0                                  = 2,
	Unknown                                  = 3,
	ERCGameMenuType_MAX                      = 4,
};

// Enum RC.ERCRealEventMapConnectBusStopStatus
// NumValues: 0x0003
enum class ERCRealEventMapConnectBusStopStatus : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	ERCRealEventMapConnectBusStopStatus_MAX  = 2,
};

// Enum RC.ERCRealEventMapConnectStatus
// NumValues: 0x0004
enum class ERCRealEventMapConnectStatus : uint8
{
	None                                     = 0,
	Enable                                   = 1,
	Disable                                  = 2,
	ERCRealEventMapConnectStatus_MAX         = 3,
};

// Enum RC.ERCActorQuestType
// NumValues: 0x0005
enum class ERCActorQuestType : uint8
{
	None                                     = 0,
	MainQuest                                = 1,
	SubQuestStart                            = 2,
	SubQuestEnd                              = 3,
	ERCActorQuestType_MAX                    = 4,
};

// Enum RC.ERCCameraNearType
// NumValues: 0x0004
enum class ERCCameraNearType : uint8
{
	DrawOn                                   = 0,
	Border                                   = 1,
	DrawOff                                  = 2,
	ERCCameraNearType_MAX                    = 3,
};

// Enum RC.ERCRealCheckActorResearchVisionTimeType
// NumValues: 0x0004
enum class ERCRealCheckActorResearchVisionTimeType : uint8
{
	All                                      = 0,
	Present                                  = 1,
	Past                                     = 2,
	ERCRealCheckActorResearchVisionTimeType_MAX = 3,
};

// Enum RC.ERCRealCheckActorType
// NumValues: 0x000C
enum class ERCRealCheckActorType : uint8
{
	None                                     = 0,
	Check                                    = 1,
	CheckBuilding                            = 2,
	AreaMove                                 = 3,
	EnterBuilding                            = 4,
	BusStop                                  = 5,
	Research                                 = 6,
	Research2nd                              = 7,
	ResearchVision                           = 8,
	SpotSelect                               = 9,
	Figure                                   = 10,
	ERCRealCheckActorType_MAX                = 11,
};

// Enum RC.ERCRealEventActorType
// NumValues: 0x0006
enum class ERCRealEventActorType : uint8
{
	None                                     = 0,
	CharacterActor                           = 1,
	PawnActor                                = 2,
	CheckActor                               = 3,
	EventTrigger                             = 4,
	ERCRealEventActorType_MAX                = 5,
};

// Enum RC.ERCShinigamiWarpType
// NumValues: 0x0004
enum class ERCShinigamiWarpType : uint8
{
	Normal                                   = 0,
	Warp                                     = 1,
	Move                                     = 2,
	ERCShinigamiWarpType_MAX                 = 3,
};

// Enum RC.ERCShinigamiAITargetPointType
// NumValues: 0x0003
enum class ERCShinigamiAITargetPointType : uint8
{
	Target                                   = 0,
	Transform                                = 1,
	ERCShinigamiAITargetPointType_MAX        = 2,
};

// Enum RC.ERCShinigamiEmotionType
// NumValues: 0x0005
enum class ERCShinigamiEmotionType : uint8
{
	Normal                                   = 0,
	Angry                                    = 1,
	Scared                                   = 2,
	Ethereal                                 = 3,
	ERCShinigamiEmotionType_MAX              = 4,
};

// Enum RC.ERCShinigamiAIType
// NumValues: 0x0008
enum class ERCShinigamiAIType : uint8
{
	None                                     = 0,
	Move                                     = 1,
	Action                                   = 2,
	Follow                                   = 3,
	FollowInRoom                             = 4,
	FollowBoat                               = 5,
	Route                                    = 6,
	ERCShinigamiAIType_MAX                   = 7,
};

// Enum RC.ERCPlayerMoveSpeedType
// NumValues: 0x0005
enum class ERCPlayerMoveSpeedType : uint8
{
	Run                                      = 0,
	Walk                                     = 1,
	Train                                    = 2,
	Yoromeki                                 = 3,
	ERCPlayerMoveSpeedType_MAX               = 4,
};

// Enum RC.ERCCharacterProxyCenterActorType
// NumValues: 0x0003
enum class ERCCharacterProxyCenterActorType : uint8
{
	Player                                   = 0,
	Camera                                   = 1,
	ERCCharacterProxyCenterActorType_MAX     = 2,
};

// Enum RC.ERCCharacterMoveFadeType
// NumValues: 0x0004
enum class ERCCharacterMoveFadeType : uint8
{
	None                                     = 0,
	FadeIn                                   = 1,
	FadeOut                                  = 2,
	ERCCharacterMoveFadeType_MAX             = 3,
};

// Enum RC.ERCCharacterBallonPositionType
// NumValues: 0x0016
enum class ERCCharacterBallonPositionType : uint8
{
	Custom                                   = 0,
	Wait_Right                               = 1,
	Wait_Left                                = 2,
	Wait_Middle                              = 3,
	Wait_Umb_Left                            = 4,
	Wait_Umb_Middle                          = 5,
	Sit_Right                                = 6,
	Sit_Left                                 = 7,
	Squat_Right                              = 8,
	Squat_Left                               = 9,
	Sleep_Left                               = 10,
	Wait_Child_Middle                        = 11,
	Option01                                 = 12,
	Option02                                 = 13,
	Option03                                 = 14,
	Option04                                 = 15,
	Option05                                 = 16,
	Option06                                 = 17,
	Option07                                 = 18,
	Option08                                 = 19,
	Option09                                 = 20,
	ERCCharacterBallonPositionType_MAX       = 21,
};

// Enum RC.ERCCharacterActorType
// NumValues: 0x0006
enum class ERCCharacterActorType : uint8
{
	Character                                = 0,
	Pawn                                     = 1,
	Kakiwari                                 = 2,
	Animal                                   = 3,
	Off                                      = 4,
	ERCCharacterActorType_MAX                = 5,
};

// Enum RC.ERCStencilType
// NumValues: 0x0005
enum class ERCStencilType : uint8
{
	Map                                      = 0,
	Character                                = 1,
	NoEffect                                 = 2,
	ShinigamiEffect                          = 3,
	ERCStencilType_MAX                       = 4,
};

// Enum RC.ERCMobRequestMotionType
// NumValues: 0x0005
enum class ERCMobRequestMotionType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Walk                                     = 2,
	Run                                      = 3,
	ERCMobRequestMotionType_MAX              = 4,
};

// Enum RC.ERCKakiwariMotionType
// NumValues: 0x0005
enum class ERCKakiwariMotionType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Sit                                      = 2,
	Walk                                     = 3,
	ERCKakiwariMotionType_MAX                = 4,
};

// Enum RC.ERCCharacterMorphTarget
// NumValues: 0x00ED
enum class ERCCharacterMorphTarget : uint8
{
	None                                     = 0,
	MT_EB_Default_01                         = 1,
	MT_EB_Default_02                         = 2,
	MT_EB_Default_03                         = 3,
	MT_EB_Default_04                         = 4,
	MT_EB_Default_05                         = 5,
	MT_EB_Default_06                         = 6,
	MT_EB_Default_07                         = 7,
	MT_EB_Default_08                         = 8,
	MT_EB_Default_09                         = 9,
	MT_EB_Default_10                         = 10,
	MT_EB_Sad_01                             = 11,
	MT_EB_Sad_02                             = 12,
	MT_EB_Sad_03                             = 13,
	MT_EB_Sad_04                             = 14,
	MT_EB_Sad_05                             = 15,
	MT_EB_Sad_06                             = 16,
	MT_EB_Sad_07                             = 17,
	MT_EB_Sad_08                             = 18,
	MT_EB_Sad_09                             = 19,
	MT_EB_Sad_10                             = 20,
	MT_EB_Anger_01                           = 21,
	MT_EB_Anger_02                           = 22,
	MT_EB_Anger_03                           = 23,
	MT_EB_Anger_04                           = 24,
	MT_EB_Anger_05                           = 25,
	MT_EB_Anger_06                           = 26,
	MT_EB_Anger_07                           = 27,
	MT_EB_Anger_08                           = 28,
	MT_EB_Anger_09                           = 29,
	MT_EB_Anger_10                           = 30,
	MT_EB_Surprise_01                        = 31,
	MT_EB_Surprise_02                        = 32,
	MT_EB_Surprise_03                        = 33,
	MT_EB_Surprise_04                        = 34,
	MT_EB_Surprise_05                        = 35,
	MT_EB_Surprise_06                        = 36,
	MT_EB_Surprise_07                        = 37,
	MT_EB_Surprise_08                        = 38,
	MT_EB_Surprise_09                        = 39,
	MT_EB_Surprise_10                        = 40,
	MT_EB_Pleasure_01                        = 41,
	MT_EB_Pleasure_02                        = 42,
	MT_EB_Pleasure_03                        = 43,
	MT_EB_Pleasure_04                        = 44,
	MT_EB_Pleasure_05                        = 45,
	MT_EB_Pleasure_06                        = 46,
	MT_EB_Pleasure_07                        = 47,
	MT_EB_Pleasure_08                        = 48,
	MT_EB_Pleasure_09                        = 49,
	MT_EB_Pleasure_10                        = 50,
	MT_EB_Special_01                         = 51,
	MT_EB_Special_02                         = 52,
	MT_EB_Special_03                         = 53,
	MT_EB_Special_04                         = 54,
	MT_EB_Special_05                         = 55,
	MT_EB_Special_06                         = 56,
	MT_EB_Special_07                         = 57,
	MT_EB_Special_08                         = 58,
	MT_EB_Special_09                         = 59,
	MT_EB_Special_10                         = 60,
	MT_EB_Off_01                             = 61,
	MT_EB_Off_02                             = 62,
	MT_EB_Off_03                             = 63,
	MT_EB_Off_04                             = 64,
	MT_EB_Off_05                             = 65,
	MT_EB_Off_06                             = 66,
	MT_EB_Off_07                             = 67,
	MT_EB_Off_08                             = 68,
	MT_EB_Off_09                             = 69,
	MT_EB_Off_10                             = 70,
	MT_EY_Default_01                         = 71,
	MT_EY_Default_02                         = 72,
	MT_EY_Default_03                         = 73,
	MT_EY_Default_04                         = 74,
	MT_EY_Default_05                         = 75,
	MT_EY_Sad_01                             = 76,
	MT_EY_Sad_02                             = 77,
	MT_EY_Sad_03                             = 78,
	MT_EY_Sad_04                             = 79,
	MT_EY_Sad_05                             = 80,
	MT_EY_Anger_01                           = 81,
	MT_EY_Anger_02                           = 82,
	MT_EY_Anger_03                           = 83,
	MT_EY_Anger_04                           = 84,
	MT_EY_Anger_05                           = 85,
	MT_EY_Surprise_01                        = 86,
	MT_EY_Surprise_02                        = 87,
	MT_EY_Surprise_03                        = 88,
	MT_EY_Surprise_04                        = 89,
	MT_EY_Surprise_05                        = 90,
	MT_EY_Pleasure_01                        = 91,
	MT_EY_Pleasure_02                        = 92,
	MT_EY_Pleasure_03                        = 93,
	MT_EY_Pleasure_04                        = 94,
	MT_EY_Pleasure_05                        = 95,
	MT_EY_Special_01                         = 96,
	MT_EY_Special_02                         = 97,
	MT_EY_Special_03                         = 98,
	MT_EY_Special_04                         = 99,
	MT_EY_Special_05                         = 100,
	MT_EY_Close_01                           = 101,
	MT_EY_Close_02                           = 102,
	MT_EY_Close_03                           = 103,
	MT_EY_Close_04                           = 104,
	MT_EY_Close_05                           = 105,
	MT_MO_Default_01                         = 106,
	MT_MO_Default_02                         = 107,
	MT_MO_Default_03                         = 108,
	MT_MO_Default_04                         = 109,
	MT_MO_Default_05                         = 110,
	MT_MO_Default_06                         = 111,
	MT_MO_Default_07                         = 112,
	MT_MO_Default_08                         = 113,
	MT_MO_Default_09                         = 114,
	MT_MO_Default_10                         = 115,
	MT_MO_Sad_01                             = 116,
	MT_MO_Sad_02                             = 117,
	MT_MO_Sad_03                             = 118,
	MT_MO_Sad_04                             = 119,
	MT_MO_Sad_05                             = 120,
	MT_MO_Sad_06                             = 121,
	MT_MO_Sad_07                             = 122,
	MT_MO_Sad_08                             = 123,
	MT_MO_Sad_09                             = 124,
	MT_MO_Sad_10                             = 125,
	MT_MO_Anger_01                           = 126,
	MT_MO_Anger_02                           = 127,
	MT_MO_Anger_03                           = 128,
	MT_MO_Anger_04                           = 129,
	MT_MO_Anger_05                           = 130,
	MT_MO_Anger_06                           = 131,
	MT_MO_Anger_07                           = 132,
	MT_MO_Anger_08                           = 133,
	MT_MO_Anger_09                           = 134,
	MT_MO_Anger_10                           = 135,
	MT_MO_Surprise_01                        = 136,
	MT_MO_Surprise_02                        = 137,
	MT_MO_Surprise_03                        = 138,
	MT_MO_Surprise_04                        = 139,
	MT_MO_Surprise_05                        = 140,
	MT_MO_Surprise_06                        = 141,
	MT_MO_Surprise_07                        = 142,
	MT_MO_Surprise_08                        = 143,
	MT_MO_Surprise_09                        = 144,
	MT_MO_Surprise_10                        = 145,
	MT_MO_Pleasure_01                        = 146,
	MT_MO_Pleasure_02                        = 147,
	MT_MO_Pleasure_03                        = 148,
	MT_MO_Pleasure_04                        = 149,
	MT_MO_Pleasure_05                        = 150,
	MT_MO_Pleasure_06                        = 151,
	MT_MO_Pleasure_07                        = 152,
	MT_MO_Pleasure_08                        = 153,
	MT_MO_Pleasure_09                        = 154,
	MT_MO_Pleasure_10                        = 155,
	MT_MO_Special_01                         = 156,
	MT_MO_Special_02                         = 157,
	MT_MO_Special_03                         = 158,
	MT_MO_Special_04                         = 159,
	MT_MO_Special_05                         = 160,
	MT_MO_Special_06                         = 161,
	MT_MO_Special_07                         = 162,
	MT_MO_Special_08                         = 163,
	MT_MO_Special_09                         = 164,
	MT_MO_Special_10                         = 165,
	MT_MO_Default_A                          = 166,
	MT_MO_Default_I                          = 167,
	MT_MO_Default_U                          = 168,
	MT_MO_Default_E                          = 169,
	MT_MO_Default_O                          = 170,
	MT_MO_Sad_A                              = 171,
	MT_MO_Sad_I                              = 172,
	MT_MO_Sad_U                              = 173,
	MT_MO_Sad_E                              = 174,
	MT_MO_Sad_O                              = 175,
	MT_MO_Anger_A                            = 176,
	MT_MO_Anger_I                            = 177,
	MT_MO_Anger_U                            = 178,
	MT_MO_Anger_E                            = 179,
	MT_MO_Anger_O                            = 180,
	MT_MO_Surprise_A                         = 181,
	MT_MO_Surprise_I                         = 182,
	MT_MO_Surprise_U                         = 183,
	MT_MO_Surprise_E                         = 184,
	MT_MO_Surprise_O                         = 185,
	MT_MO_Pleasure_A                         = 186,
	MT_MO_Pleasure_I                         = 187,
	MT_MO_Pleasure_U                         = 188,
	MT_MO_Pleasure_E                         = 189,
	MT_MO_Pleasure_O                         = 190,
	MT_MO_Special_A                          = 191,
	MT_MO_Special_I                          = 192,
	MT_MO_Special_U                          = 193,
	MT_MO_Special_E                          = 194,
	MT_MO_Special_O                          = 195,
	MT_BO_Default_01                         = 196,
	MT_BO_Default_02                         = 197,
	MT_BO_Default_03                         = 198,
	MT_BO_Default_04                         = 199,
	MT_BO_Default_05                         = 200,
	MT_BO_Default_06                         = 201,
	MT_BO_Default_07                         = 202,
	MT_BO_Default_08                         = 203,
	MT_BO_Default_09                         = 204,
	MT_BO_Default_10                         = 205,
	MT_BO_Long_01                            = 206,
	MT_BO_Long_02                            = 207,
	MT_BO_Long_03                            = 208,
	MT_BO_Long_04                            = 209,
	MT_BO_Long_05                            = 210,
	MT_BO_Long_06                            = 211,
	MT_BO_Long_07                            = 212,
	MT_BO_Long_08                            = 213,
	MT_BO_Long_09                            = 214,
	MT_BO_Long_10                            = 215,
	MT_HA_Default_01                         = 216,
	MT_HA_Default_02                         = 217,
	MT_HA_Default_03                         = 218,
	MT_HA_Default_04                         = 219,
	MT_HA_Default_05                         = 220,
	MT_HA_Default_06                         = 221,
	MT_HA_Default_07                         = 222,
	MT_HA_Default_08                         = 223,
	MT_HA_Default_09                         = 224,
	MT_HA_Default_10                         = 225,
	MT_HA_Finger_01                          = 226,
	MT_HA_Finger_02                          = 227,
	MT_HA_Finger_03                          = 228,
	MT_HA_Finger_04                          = 229,
	MT_HA_Finger_05                          = 230,
	MT_HA_Finger_06                          = 231,
	MT_HA_Finger_07                          = 232,
	MT_HA_Finger_08                          = 233,
	MT_HA_Finger_09                          = 234,
	MT_HA_Finger_10                          = 235,
	ERCCharacterMorphTarget_MAX              = 236,
};

// Enum RC.EMobCharacterClassification
// NumValues: 0x0003
enum class EMobCharacterClassification : uint8
{
	Normal                                   = 0,
	Soldier                                  = 1,
	EMobCharacterClassification_MAX          = 2,
};

// Enum RC.EMotionEventSlotSwitchType
// NumValues: 0x0007
enum class EMotionEventSlotSwitchType : uint8
{
	None                                     = 0,
	Start                                    = 1,
	StartFromLoop                            = 2,
	Pause                                    = 3,
	Reset                                    = 4,
	EndToLoop                                = 5,
	EMotionEventSlotSwitchType_MAX           = 6,
};

// Enum RC.EMotionSplitType
// NumValues: 0x0008
enum class EMotionSplitType : uint8
{
	None                                     = 0,
	In                                       = 1,
	Loop                                     = 2,
	Out                                      = 4,
	InLoop                                   = 3,
	LoopOut                                  = 6,
	InLoopOut                                = 7,
	EMotionSplitType_MAX                     = 8,
};

// Enum RC.EMotionClassification
// NumValues: 0x0005
enum class EMotionClassification : uint8
{
	Master                                   = 0,
	Scene                                    = 1,
	Form                                     = 2,
	UnExpected                               = 3,
	EMotionClassification_MAX                = 4,
};

// Enum RC.ERCCharacterBaseClassType
// NumValues: 0x0006
enum class ERCCharacterBaseClassType : uint8
{
	None                                     = 0,
	CharacterBase                            = 1,
	PawnBase                                 = 2,
	ActorBase                                = 3,
	AnimalBase                               = 4,
	ERCCharacterBaseClassType_MAX            = 5,
};

// Enum RC.ERCCharactreTag
// NumValues: 0x0005
enum class ERCCharactreTag : uint8
{
	Player                                   = 0,
	Shinigami                                = 1,
	OptionCharacter                          = 2,
	NPC                                      = 3,
	ERCCharactreTag_MAX                      = 4,
};

// Enum RC.ERCFadeType
// NumValues: 0x0004
enum class ERCFadeType : uint8
{
	Normal                                   = 0,
	Ui                                       = 1,
	UiLoading                                = 2,
	ERCFadeType_MAX                          = 3,
};

// Enum RC.ERCTipsSceneIndex
// NumValues: 0x001E
enum class ERCTipsSceneIndex : uint8
{
	Chapter0Real                             = 0,
	Chapter0Nazo                             = 1,
	Chapter0Real2                            = 2,
	Prologue                                 = 3,
	Chapter1Real                             = 4,
	Chapter1Nazo                             = 5,
	Chapter1Real2                            = 6,
	Chapter2Real                             = 7,
	Chapter2Nazo                             = 8,
	Chapter2Real2                            = 9,
	Chapter3Real                             = 10,
	Chapter3Nazo                             = 11,
	Chapter3Real2                            = 12,
	Chapter4Real                             = 13,
	Chapter4Nazo                             = 14,
	Chapter4Real2                            = 15,
	Chapter5Real                             = 16,
	Chapter5Nazo                             = 17,
	Epilogue                                 = 18,
	Figure010                                = 19,
	Figure011                                = 20,
	Figure012                                = 21,
	Figure013                                = 22,
	Figure015                                = 23,
	SubStory010                              = 24,
	SubStory011                              = 25,
	SubStory012                              = 26,
	SubStory013                              = 27,
	SubStory015                              = 28,
	Max                                      = 29,
};

// Enum RC.ERCChapterIndex
// NumValues: 0x0018
enum class ERCChapterIndex : uint8
{
	Chapter0                                 = 0,
	Prologue                                 = 1,
	Chapter1                                 = 2,
	Chapter2                                 = 3,
	Chapter3                                 = 4,
	Chapter4                                 = 5,
	Chapter5                                 = 6,
	Epilogue                                 = 7,
	Figure                                   = 8,
	Figure010                                = 9,
	Figure011                                = 10,
	Figure012                                = 11,
	Figure013                                = 12,
	Figure015                                = 13,
	SubStory010                              = 14,
	SubStory011                              = 15,
	SubStory012                              = 16,
	SubStory013                              = 17,
	SubStory015                              = 18,
	Gallery                                  = 19,
	Proto                                    = 20,
	PgTest                                   = 21,
	PlTest                                   = 22,
	Max                                      = 23,
};

// Enum RC.ERCChapter
// NumValues: 0x0018
enum class ERCChapter : uint8
{
	Chapter0                                 = 0,
	Chapter1                                 = 1,
	Chapter2                                 = 2,
	Chapter3                                 = 3,
	Chapter4                                 = 4,
	Chapter5                                 = 5,
	Prologue                                 = 11,
	Epilogue                                 = 12,
	Figure                                   = 30,
	Figure010                                = 31,
	Figure011                                = 32,
	Figure012                                = 33,
	Figure013                                = 34,
	Figure015                                = 35,
	SubStory010                              = 21,
	SubStory011                              = 22,
	SubStory012                              = 23,
	SubStory013                              = 24,
	SubStory015                              = 25,
	Proto                                    = 50,
	Gallery                                  = 70,
	PgTest                                   = 90,
	PlTest                                   = 99,
	ERCChapter_MAX                           = 100,
};

// Enum RC.ERCNzResultRankValue
// NumValues: 0x0007
enum class ERCNzResultRankValue : uint8
{
	Rank_C                                   = 0,
	Rank_B                                   = 1,
	Rank_A                                   = 2,
	Rank_S                                   = 3,
	Rank_SS                                  = 4,
	Rank_None                                = 5,
	Rank_MAX                                 = 6,
};

// Enum RC.ERCNazoGameMode
// NumValues: 0x000F
enum class ERCNazoGameMode : uint8
{
	None                                     = 0,
	FreeMove                                 = 1,
	KaikagiSelect                            = 2,
	QteSelect                                = 3,
	DoorSelect                               = 4,
	CriminalSelect                           = 5,
	SpotSelect                               = 6,
	RecreatingScene                          = 7,
	Battle                                   = 8,
	Pazzle                                   = 9,
	Mtb                                      = 10,
	Finale                                   = 11,
	Memorial                                 = 12,
	FinalBattle                              = 13,
	ERCNazoGameMode_MAX                      = 14,
};

// Enum RC.ERCResearchVisionTimeMode
// NumValues: 0x0003
enum class ERCResearchVisionTimeMode : uint8
{
	Past                                     = 0,
	Present                                  = 1,
	ERCResearchVisionTimeMode_MAX            = 2,
};

// Enum RC.ERCRealPlayerGameMode
// NumValues: 0x0007
enum class ERCRealPlayerGameMode : uint8
{
	FreeMove                                 = 0,
	Research                                 = 1,
	Research2nd                              = 2,
	ResearchVision                           = 3,
	SpotSelect                               = 4,
	Reproduction                             = 5,
	ERCRealPlayerGameMode_MAX                = 6,
};

// Enum RC.ERCStoryMode
// NumValues: 0x0007
enum class ERCStoryMode : uint8
{
	Original                                 = 0,
	SubStory1                                = 1,
	SubStory2                                = 2,
	SubStory3                                = 3,
	SubStory4                                = 4,
	SubStory5                                = 5,
	ERCStoryMode_MAX                         = 6,
};

// Enum RC.ERCGameMode
// NumValues: 0x0006
enum class ERCGameMode : uint8
{
	Non                                      = 0,
	Title                                    = 1,
	Real                                     = 2,
	Nazo                                     = 3,
	RealAmatan                               = 4,
	ERCGameMode_MAX                          = 5,
};

// Enum RC.ERCActionDifficulty
// NumValues: 0x0004
enum class ERCActionDifficulty : uint8
{
	Easy                                     = 0,
	Normal                                   = 1,
	Hard                                     = 2,
	Max                                      = 3,
};

// Enum RC.ERCMysteryDifficulty
// NumValues: 0x0004
enum class ERCMysteryDifficulty : uint8
{
	Easy                                     = 0,
	Normal                                   = 1,
	Hard                                     = 2,
	Max                                      = 3,
};

// Enum RC.ERCCommonSwitch
// NumValues: 0x0003
enum class ERCCommonSwitch : uint8
{
	On                                       = 0,
	Off                                      = 1,
	ERCCommonSwitch_MAX                      = 2,
};

// Enum RC.ERCXSXConsoleType
// NumValues: 0x0004
enum class ERCXSXConsoleType : uint8
{
	Invalid                                  = 0,
	Series_S                                 = 1,
	Series_X                                 = 2,
	ERCXSXConsoleType_MAX                    = 3,
};

// Enum RC.EDialigType
// NumValues: 0x0007
enum class EDialigType : uint32
{
	STORY_PLAY                               = 0,
	STORY_REAL                               = 1,
	STORY_NAZO                               = 2,
	OPEN_NG                                  = 3,
	UPDATE_HINT                              = 4,
	NONE                                     = 5,
	EDialigType_MAX                          = 6,
};

// Enum RC.ECollectionChara
// NumValues: 0x0006
enum class ECollectionChara : uint8
{
	CHARA01                                  = 0,
	CHARA02                                  = 1,
	CHARA03                                  = 2,
	CHARA04                                  = 3,
	CHARA05                                  = 4,
	ECollectionChara_MAX                     = 5,
};

// Enum RC.ECollectionState
// NumValues: 0x000B
enum class ECollectionState : uint32
{
	PRE_COLLECTION_TUTORIAL                  = 0,
	COLLECTION_TUTORIAL                      = 1,
	SELECT_READY                             = 2,
	PRE_COLLECTION_SELECT                    = 3,
	COLLECTION_SELECT                        = 4,
	PRE_COLLECTION_DIALOG                    = 5,
	COLLECTION_DIALOG                        = 6,
	PRE_FINISH                               = 7,
	FINISH                                   = 8,
	NOT_OPEN                                 = 9,
	ECollectionState_MAX                     = 10,
};

// Enum RC.ERCNazoBattleKaijinPartVoiceType
// NumValues: 0x0004
enum class ERCNazoBattleKaijinPartVoiceType : uint8
{
	PreEvent                                 = 0,
	AttackSuccess                            = 1,
	ClearEvent                               = 2,
	Max                                      = 3,
};

// Enum RC.ERCNazoBattleDisturbLetterMoveTarget
// NumValues: 0x0007
enum class ERCNazoBattleDisturbLetterMoveTarget : uint8
{
	Top                                      = 0,
	Left                                     = 1,
	Right                                    = 2,
	Bottom                                   = 3,
	Index                                    = 4,
	World                                    = 5,
	Max                                      = 6,
};

// Enum RC.ERCNazoBattleDisturbLetterMoveType
// NumValues: 0x0003
enum class ERCNazoBattleDisturbLetterMoveType : uint8
{
	TypeA                                    = 0,
	TypeB                                    = 1,
	Max                                      = 2,
};

// Enum RC.ERCNazoBattleDisturbLetterLane
// NumValues: 0x0004
enum class ERCNazoBattleDisturbLetterLane : uint8
{
	Fore                                     = 0,
	Middle                                   = 1,
	Back                                     = 2,
	Max                                      = 3,
};

// Enum RC.ERCNazoBattleDisturbLetterVerticalPosition
// NumValues: 0x0004
enum class ERCNazoBattleDisturbLetterVerticalPosition : uint8
{
	Top                                      = 0,
	Middle                                   = 1,
	Bottom                                   = 2,
	Max                                      = 3,
};

// Enum RC.ERCNazoBattleDisturbLetterAppearPosition
// NumValues: 0x0009
enum class ERCNazoBattleDisturbLetterAppearPosition : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	PlayerSide                               = 2,
	OtherSide                                = 3,
	RebuttalSide                             = 4,
	RebuttalReverseSide                      = 5,
	SameBefore                               = 6,
	ReverseBefore                            = 7,
	Max                                      = 8,
};

// Enum RC.ERCNazoBattleRebuttalLetterSize
// NumValues: 0x0006
enum class ERCNazoBattleRebuttalLetterSize : uint8
{
	VerySmall                                = 0,
	Small                                    = 1,
	Medium                                   = 2,
	Large                                    = 3,
	VeryLarge                                = 4,
	Max                                      = 5,
};

// Enum RC.ERCNazoBattleRebuttalLetterAspect
// NumValues: 0x0003
enum class ERCNazoBattleRebuttalLetterAspect : uint8
{
	W1H1                                     = 0,
	W2H1                                     = 1,
	Max                                      = 2,
};

// Enum RC.ERCNazoBattleRebuttalLetterType
// NumValues: 0x0006
enum class ERCNazoBattleRebuttalLetterType : uint8
{
	Normal                                   = 0,
	Incorrect                                = 1,
	Correct                                  = 2,
	Disturb                                  = 3,
	None                                     = 4,
	Max                                      = 5,
};

// Enum RC.ERCNazoBattleRebuttalLetterJustAvoidDirection
// NumValues: 0x0005
enum class ERCNazoBattleRebuttalLetterJustAvoidDirection : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Side                                     = 2,
	Down                                     = 3,
	Max                                      = 4,
};

// Enum RC.ERCNazoBattleRebuttalLetterMiddleLRType
// NumValues: 0x0007
enum class ERCNazoBattleRebuttalLetterMiddleLRType : uint8
{
	Default                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	ReversePlayer                            = 3,
	NoChangeBefore                           = 4,
	ReverseBefore                            = 5,
	Max                                      = 6,
};

// Enum RC.ERCNazoBattleLSARebuttalPhases
// NumValues: 0x0011
enum class ERCNazoBattleLSARebuttalPhases : uint8
{
	Invalid                                  = 0,
	StandBy                                  = 1,
	Delay                                    = 2,
	Move                                     = 3,
	Cutin                                    = 4,
	BeforeIn                                 = 5,
	Wormhole                                 = 6,
	Stay                                     = 7,
	Rebuttal                                 = 8,
	Out                                      = 9,
	Hit                                      = 10,
	Slashed                                  = 11,
	SlashStopped                             = 12,
	Repelled                                 = 13,
	Finished                                 = 14,
	None                                     = 15,
	Max                                      = 16,
};

// Enum RC.ERCNazoBattleLSARebuttalAttackFailureType
// NumValues: 0x0004
enum class ERCNazoBattleLSARebuttalAttackFailureType : uint8
{
	Failure00_WrongTargetAndWrongKaiKagi     = 0,
	Failure01_WrongTarget                    = 1,
	Failure02_WrongKaiKagi                   = 2,
	Max                                      = 3,
};

// Enum RC.ERCNazoBattleLSAKaijinJumpState
// NumValues: 0x0006
enum class ERCNazoBattleLSAKaijinJumpState : uint8
{
	None                                     = 0,
	Ready                                    = 1,
	Rising                                   = 2,
	Falling                                  = 3,
	Landing                                  = 4,
	Max                                      = 5,
};

// Enum RC.ERCNazoBattleLSAAssistState
// NumValues: 0x0008
enum class ERCNazoBattleLSAAssistState : uint8
{
	None                                     = 0,
	StandBy                                  = 1,
	In                                       = 2,
	Stay                                     = 3,
	Attack                                   = 4,
	Out                                      = 5,
	NoChara                                  = 6,
	Max                                      = 7,
};

// Enum RC.ERCNazoBattleLSAPhases
// NumValues: 0x000C
enum class ERCNazoBattleLSAPhases : uint8
{
	Invalid                                  = 0,
	PreEvent                                 = 1,
	Confrontation                            = 2,
	Rebuttal                                 = 3,
	AttackSuccess                            = 4,
	AttackFailure                            = 5,
	CloseContest                             = 6,
	NextRebuttalEvent                        = 7,
	Interval                                 = 8,
	GameOver                                 = 9,
	ClearEvent                               = 10,
	Max                                      = 11,
};

// Enum RC.ERCNazoBattleLSAState
// NumValues: 0x0008
enum class ERCNazoBattleLSAState : uint8
{
	None                                     = 0,
	Loading                                  = 1,
	DelayAfterLoading                        = 2,
	Initialize                               = 3,
	Battle                                   = 4,
	FadeOut                                  = 5,
	Finished                                 = 6,
	Max                                      = 7,
};

// Enum RC.ERCNazoBattleRebuttalLetterRepelledState
// NumValues: 0x0004
enum class ERCNazoBattleRebuttalLetterRepelledState : uint8
{
	Repelled                                 = 0,
	HitKaijin                                = 1,
	PreventedByKaijin                        = 2,
	Max                                      = 3,
};

// Enum RC.ERCNazoBattleRebuttalLetterOutEffectType
// NumValues: 0x0008
enum class ERCNazoBattleRebuttalLetterOutEffectType : uint8
{
	None                                     = 0,
	SlashedAndOut                            = 1,
	SlashedButEndure                         = 2,
	HitPlayer                                = 3,
	HitPlayerButUnrival                      = 4,
	AttackedByAssist                         = 5,
	HitKaijin                                = 6,
	Max                                      = 7,
};

// Enum RC.ERCNazoLSASceneState
// NumValues: 0x0007
enum class ERCNazoLSASceneState : uint8
{
	Invalid                                  = 0,
	Unloaded                                 = 1,
	Loading                                  = 2,
	Loaded                                   = 3,
	Playing                                  = 4,
	Unloading                                = 5,
	Max                                      = 6,
};

// Enum RC.ERCNazoLSAState
// NumValues: 0x0009
enum class ERCNazoLSAState : uint8
{
	Invalid                                  = 0,
	Load                                     = 1,
	Initialize                               = 2,
	LoadScene                                = 3,
	PlayScene                                = 4,
	ChangeScene                              = 5,
	End                                      = 6,
	SceneTest                                = 7,
	Max                                      = 8,
};

// Enum RC.ERCNazoMoveLoopTalkType
// NumValues: 0x0004
enum class ERCNazoMoveLoopTalkType : uint8
{
	None                                     = 0,
	Talk                                     = 1,
	Subtitle                                 = 2,
	Max                                      = 3,
};

// Enum RC.ERCNazoMoveLoopLSATalkState
// NumValues: 0x0005
enum class ERCNazoMoveLoopLSATalkState : uint8
{
	None                                     = 0,
	DelayBeforeTalk                          = 1,
	Talk                                     = 2,
	DelayAfterTalk                           = 3,
	Max                                      = 4,
};

// Enum RC.ERCNazoMoveLoopLSAState
// NumValues: 0x000B
enum class ERCNazoMoveLoopLSAState : uint8
{
	None                                     = 0,
	Loading                                  = 1,
	DelayAfterLoading                        = 2,
	Initialize                               = 3,
	FadeIn                                   = 4,
	DelayAfterFadeIn                         = 5,
	MoveLoop                                 = 6,
	DelayAfterMoveLoop                       = 7,
	FadeOut                                  = 8,
	Finished                                 = 9,
	Max                                      = 10,
};

// Enum RC.ERCNazoPlayableLoopLSASequencerState
// NumValues: 0x0005
enum class ERCNazoPlayableLoopLSASequencerState : uint8
{
	Stopping                                 = 0,
	BeforePlay                               = 1,
	Playing                                  = 2,
	Paused                                   = 3,
	Max                                      = 4,
};

// Enum RC.ERCNazoPlayableLoopLSAState
// NumValues: 0x0007
enum class ERCNazoPlayableLoopLSAState : uint8
{
	None                                     = 0,
	Loading                                  = 1,
	DelayAfterLoading                        = 2,
	Initialize                               = 3,
	PlayableLoop                             = 4,
	LoopFinished                             = 5,
	Max                                      = 6,
};

// Enum RC.ERCNzCriminalEventType
// NumValues: 0x0005
enum class ERCNzCriminalEventType : uint8
{
	CriminalEvent_None                       = 0,
	CriminalEvent_NextCamera                 = 1,
	CriminalEvent_PrevCamera                 = 2,
	CriminalEvent_SelectCriminal             = 3,
	CriminalEvent_MAX                        = 4,
};

// Enum RC.ERCNzCriminalStateType
// NumValues: 0x000A
enum class ERCNzCriminalStateType : uint8
{
	CriminalState_None                       = 0,
	CriminalState_Begin                      = 1,
	CriminalState_BeginProduction            = 2,
	CriminalState_Select                     = 3,
	CriminalState_CorrectProduction          = 4,
	CriminalState_Correct                    = 5,
	CriminalState_IncorrectProduction        = 6,
	CriminalState_Incorrect                  = 7,
	CriminalState_HintProduction             = 8,
	CriminalState_MAX                        = 9,
};

// Enum RC.ERCCriminalSelectElementVisibleType
// NumValues: 0x0004
enum class ERCCriminalSelectElementVisibleType : uint8
{
	None                                     = 0,
	On                                       = 1,
	Off                                      = 2,
	ERCCriminalSelectElementVisibleType_MAX  = 3,
};

// Enum RC.EFinaleSEType
// NumValues: 0x0024
enum class EFinaleSEType : uint8
{
	MT_Damage                                = 0,
	MT_IndexSelect                           = 1,
	MT_IndexDecision                         = 2,
	MT_QSelect                               = 3,
	MT_QSuccess                              = 4,
	MT_QFailed                               = 5,
	MT_NazoSuccess                           = 6,
	MT_PieceSelect                           = 7,
	MT_PieceDecision                         = 8,
	MT_PieceGet                              = 9,
	MT_Contents                              = 10,
	MT_MovePage                              = 11,
	MT_ElucidationUi                         = 12,
	MT_CompletionUi                          = 13,
	MT_TimeLimit                             = 14,
	MT_TimeSignal                            = 15,
	MT_NazoTimeOut                           = 16,
	MT_EncountQ                              = 17,
	MT_SlashQ                                = 18,
	MT_DisappearsQ                           = 19,
	MT_CounterAttackQ                        = 20,
	MT_BaloonDisplay                         = 21,
	MT_PeaceOpen                             = 22,
	MT_SelectUnreleased                      = 23,
	MT_PieceSet                              = 24,
	MT_PieceDisable                          = 25,
	MT_ExplainBalloon                        = 26,
	MT_SuifiStartCandle                      = 27,
	MT_SuifiEndCandle                        = 28,
	MT_SuifiUICandleOff                      = 29,
	MT_SuifiUICandleOn                       = 30,
	MT_SuifiPieceList                        = 31,
	MT_SuifinContentCursor                   = 32,
	MT_SuifinContentDecision                 = 33,
	MT_SuifinTitle_000                       = 34,
	MT_MAX                                   = 35,
};

// Enum RC.EFinaleAutoPlayInputType
// NumValues: 0x000B
enum class EFinaleAutoPlayInputType : uint8
{
	Decide                                   = 0,
	OpenPieceList                            = 1,
	PieceLeft                                = 2,
	PieceRight                               = 3,
	PageLeft                                 = 4,
	PageRight                                = 5,
	Move                                     = 6,
	Cancel                                   = 7,
	LowSpeedMode                             = 8,
	None                                     = 9,
	EFinaleAutoPlayInputType_MAX             = 10,
};

// Enum RC.EFinaleInteractPointType
// NumValues: 0x0007
enum class EFinaleInteractPointType : uint8
{
	Piece                                    = 0,
	Detective                                = 1,
	Detail                                   = 2,
	ViewPieceList                            = 3,
	ViewIndex                                = 4,
	None                                     = 5,
	EFinaleInteractPointType_MAX             = 6,
};

// Enum RC.EFinaleSceneType
// NumValues: 0x0004
enum class EFinaleSceneType : uint8
{
	Heading                                  = 0,
	Detective                                = 1,
	None                                     = 2,
	EFinaleSceneType_MAX                     = 3,
};

// Enum RC.EWallAlignmentType
// NumValues: 0x0004
enum class EWallAlignmentType : uint8
{
	Center                                   = 0,
	Left                                     = 1,
	Right                                    = 2,
	EWallAlignmentType_MAX                   = 3,
};

// Enum RC.EWallType
// NumValues: 0x000D
enum class EWallType : uint8
{
	NORMAL                                   = 0,
	KAIKAGI                                  = 1,
	THORN                                    = 2,
	ROCK                                     = 3,
	ROCK_R                                   = 4,
	ROCK_L                                   = 5,
	FENCE                                    = 6,
	START                                    = 7,
	LOOP                                     = 8,
	KAIZIN                                   = 9,
	TUTORIAL                                 = 10,
	FORT                                     = 11,
	EWallType_MAX                            = 12,
};

// Enum RC.EWallWeakPointType
// NumValues: 0x0009
enum class EWallWeakPointType : uint8
{
	UP                                       = 0,
	DOWN                                     = 1,
	LEFT                                     = 2,
	RIGHT                                    = 3,
	Center                                   = 4,
	KAIKAGI                                  = 5,
	JUMP                                     = 6,
	NONE                                     = 7,
	EWallWeakPointType_MAX                   = 8,
};

// Enum RC.EAnswerWordType
// NumValues: 0x0004
enum class EAnswerWordType : uint8
{
	Type_4x4                                 = 0,
	Type_6x6                                 = 1,
	Type_8x8                                 = 2,
	Type_MAX                                 = 3,
};

// Enum RC.EPuzzleTimeZoneType
// NumValues: 0x0004
enum class EPuzzleTimeZoneType : uint8
{
	MORNING                                  = 0,
	EVENING                                  = 1,
	NIGHT                                    = 2,
	EPuzzleTimeZoneType_MAX                  = 3,
};

// Enum RC.EPuzzlePointerHoverType
// NumValues: 0x0007
enum class EPuzzlePointerHoverType : uint8
{
	UnSelect                                 = 0,
	Word                                     = 1,
	Kaikagi                                  = 2,
	DragKaikagi                              = 3,
	Hint                                     = 4,
	NotEat                                   = 5,
	EPuzzlePointerHoverType_MAX              = 6,
};

// Enum RC.ERCNzResultType
// NumValues: 0x0003
enum class ERCNzResultType : uint8
{
	ResultType_NzResult                      = 0,
	ResultType_TopMenu                       = 1,
	ResultType_MAX                           = 2,
};

// Enum RC.ERCNzResultStateType
// NumValues: 0x0014
enum class ERCNzResultStateType : uint8
{
	ResultState_None                         = 0,
	ResultState_Start                        = 1,
	ResultState_ReasoningPointIn             = 2,
	ResultState_ReasoningPointRank           = 3,
	ResultState_JudgementPointIn             = 4,
	ResultState_JudgementPointRank           = 5,
	ResultState_DeathmatchPointIn            = 6,
	ResultState_DeathmatchPointRank          = 7,
	ResultState_HitPointIn                   = 8,
	ResultState_HitPointRank                 = 9,
	ResultState_ResultRankIn                 = 10,
	ResultState_ResultRank                   = 11,
	ResultState_BonusPoint                   = 12,
	ResultState_TanteiPoint                  = 13,
	ResultState_TanteiPointGet               = 14,
	ResultState_WaitTanteiPointGet           = 15,
	ResultState_Wait                         = 16,
	ResultState_Detail                       = 17,
	ResultState_MenuIn                       = 18,
	ResultState_MAX                          = 19,
};

// Enum RC.ERCNzUiAssistCutinStatus
// NumValues: 0x0003
enum class ERCNzUiAssistCutinStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	ERCNzUiAssistCutinStatus_MAX             = 2,
};

// Enum RC.ERCNzUiBattleAssistStatus
// NumValues: 0x0005
enum class ERCNzUiBattleAssistStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	Run                                      = 2,
	Hide                                     = 3,
	ERCNzUiBattleAssistStatus_MAX            = 4,
};

// Enum RC.ERCNzUiBattleCutinType
// NumValues: 0x0004
enum class ERCNzUiBattleCutinType : uint8
{
	Ronpa                                    = 0,
	Hajiki                                   = 1,
	Assist                                   = 2,
	ERCNzUiBattleCutinType_MAX               = 3,
};

// Enum RC.ERCNzUiBattleCutinStatus
// NumValues: 0x0003
enum class ERCNzUiBattleCutinStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	ERCNzUiBattleCutinStatus_MAX             = 2,
};

// Enum RC.ERCNzUiBattleDodgeStatus
// NumValues: 0x0005
enum class ERCNzUiBattleDodgeStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	Run                                      = 2,
	Hide                                     = 3,
	ERCNzUiBattleDodgeStatus_MAX             = 4,
};

// Enum RC.ERCNzUiBattleGameOverStatus
// NumValues: 0x0007
enum class ERCNzUiBattleGameOverStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	Run                                      = 2,
	Wait                                     = 3,
	Check                                    = 4,
	Hide                                     = 5,
	ERCNzUiBattleGameOverStatus_MAX          = 6,
};

// Enum RC.ERCNzUiBattleHintStatus
// NumValues: 0x0005
enum class ERCNzUiBattleHintStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	Run                                      = 2,
	Hide                                     = 3,
	ERCNzUiBattleHintStatus_MAX              = 4,
};

// Enum RC.ERCNzUiBattleHPBarStatus
// NumValues: 0x0004
enum class ERCNzUiBattleHPBarStatus : uint8
{
	Stay                                     = 0,
	DamageAnim                               = 1,
	RecoverAnim                              = 2,
	ERCNzUiBattleHPBarStatus_MAX             = 3,
};

// Enum RC.ERCNzUiBattleHPGaugeFaceImgStatus
// NumValues: 0x0004
enum class ERCNzUiBattleHPGaugeFaceImgStatus : uint8
{
	Vigor                                    = 0,
	Normal                                   = 1,
	Pinch                                    = 2,
	ERCNzUiBattleHPGaugeFaceImgStatus_MAX    = 3,
};

// Enum RC.ERCNzUiBattleHPGaugeMode
// NumValues: 0x0004
enum class ERCNzUiBattleHPGaugeMode : uint8
{
	Normal                                   = 0,
	AutoDamage                               = 1,
	AutoRecover                              = 2,
	ERCNzUiBattleHPGaugeMode_MAX             = 3,
};

// Enum RC.ERCNzUiBattleHPGaugeStatus
// NumValues: 0x0009
enum class ERCNzUiBattleHPGaugeStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	Run                                      = 2,
	Hide                                     = 3,
	DamageAnim                               = 4,
	DamageCountDown                          = 5,
	RecoverAnim                              = 6,
	RecoverCountUp                           = 7,
	ERCNzUiBattleHPGaugeStatus_MAX           = 8,
};

// Enum RC.ERCNzUiBattleHPValueStatus
// NumValues: 0x0004
enum class ERCNzUiBattleHPValueStatus : uint8
{
	Stay                                     = 0,
	DamageAnim                               = 1,
	RecoverAnim                              = 2,
	ERCNzUiBattleHPValueStatus_MAX           = 3,
};

// Enum RC.ERCNzUiBattleKaiKagiStatus
// NumValues: 0x0005
enum class ERCNzUiBattleKaiKagiStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	Run                                      = 2,
	Hide                                     = 3,
	ERCNzUiBattleKaiKagiStatus_MAX           = 4,
};

// Enum RC.ERCNzUiBattleKaiKagiListStatus
// NumValues: 0x0003
enum class ERCNzUiBattleKaiKagiListStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	ERCNzUiBattleKaiKagiListStatus_MAX       = 2,
};

// Enum RC.ERCNzUiBattleKaiKagiListBarStatus
// NumValues: 0x0005
enum class ERCNzUiBattleKaiKagiListBarStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	Run                                      = 2,
	Hide                                     = 3,
	ERCNzUiBattleKaiKagiListBarStatus_MAX    = 4,
};

// Enum RC.ERCNzUiBattleKaiKagiSelectStatus
// NumValues: 0x0007
enum class ERCNzUiBattleKaiKagiSelectStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	Run                                      = 2,
	KaiKagiList                              = 3,
	Hide                                     = 4,
	Decide                                   = 5,
	ERCNzUiBattleKaiKagiSelectStatus_MAX     = 6,
};

// Enum RC.ERCNzUiBattleKaiKagiSelectDecideAnimType
// NumValues: 0x0003
enum class ERCNzUiBattleKaiKagiSelectDecideAnimType : uint8
{
	ButtonOn                                 = 0,
	ButtonOff                                = 1,
	Max                                      = 2,
};

// Enum RC.ERCNzUiBattleKaiKagiSelectPartsAnimType
// NumValues: 0x0008
enum class ERCNzUiBattleKaiKagiSelectPartsAnimType : uint8
{
	Start                                    = 0,
	Wait                                     = 1,
	Finish                                   = 2,
	Next                                     = 3,
	Prev                                     = 4,
	ButtonOn                                 = 5,
	ButtonOff                                = 6,
	Max                                      = 7,
};

// Enum RC.ERCNzUiBattleStartStatus
// NumValues: 0x0003
enum class ERCNzUiBattleStartStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	ERCNzUiBattleStartStatus_MAX             = 2,
};

// Enum RC.ERCNzUiBattleTimerStatus
// NumValues: 0x0003
enum class ERCNzUiBattleTimerStatus : uint8
{
	Idle                                     = 0,
	Run                                      = 1,
	ERCNzUiBattleTimerStatus_MAX             = 2,
};

// Enum RC.ERCNzUiBattleUiStatus
// NumValues: 0x0005
enum class ERCNzUiBattleUiStatus : uint8
{
	Idle                                     = 0,
	Show                                     = 1,
	Run                                      = 2,
	Hide                                     = 3,
	ERCNzUiBattleUiStatus_MAX                = 4,
};

// Enum RC.EFinalePageMoveDirection
// NumValues: 0x0003
enum class EFinalePageMoveDirection : uint8
{
	Right                                    = 0,
	Left                                     = 1,
	EFinalePageMoveDirection_MAX             = 2,
};

// Enum RC.EPageGuideType
// NumValues: 0x0003
enum class EPageGuideType : uint8
{
	Default                                  = 0,
	Question                                 = 1,
	EPageGuideType_MAX                       = 2,
};

// Enum RC.EPageMoveVisibleDirection
// NumValues: 0x0005
enum class EPageMoveVisibleDirection : uint8
{
	None                                     = 0,
	LR                                       = 1,
	L                                        = 2,
	R                                        = 3,
	EPageMoveVisibleDirection_MAX            = 4,
};

// Enum RC.EFinalePieceState
// NumValues: 0x0005
enum class EFinalePieceState : uint8
{
	UnSelect                                 = 0,
	Select                                   = 1,
	Done                                     = 2,
	None                                     = 3,
	EFinalePieceState_MAX                    = 4,
};

// Enum RC.ERCOptionUIControlMode
// NumValues: 0x0012
enum class ERCOptionUIControlMode : uint8
{
	Root                                     = 0,
	ForceClose                               = 1,
	Tab                                      = 2,
	ConfirmScreen                            = 3,
	Confirm                                  = 4,
	KeyGenericWindow                         = 5,
	InitializeConfirm                        = 6,
	StartNotChangeable                       = 7,
	NotChangeableWindow                      = 8,
	ReturnTab                                = 9,
	ListBar                                  = 10,
	Bar                                      = 11,
	Bar_Choise                               = 12,
	KeyList                                  = 13,
	KeySetting                               = 14,
	Initialize                               = 15,
	Controller                               = 16,
	Max                                      = 17,
};

// Enum RC.ERCLoginStatus
// NumValues: 0x0003
enum class ERCLoginStatus : uint8
{
	NotLoggedIn                              = 0,
	LoggedIn                                 = 1,
	ERCLoginStatus_MAX                       = 2,
};

// Enum RC.ERCPALPlatform
// NumValues: 0x0006
enum class ERCPALPlatform : uint8
{
	None                                     = 0,
	Windows                                  = 1,
	Switch                                   = 2,
	PS5                                      = 3,
	XSX                                      = 4,
	ERCPALPlatform_MAX                       = 5,
};

// Enum RC.ERainForce
// NumValues: 0x0005
enum class ERainForce : uint8
{
	Force1                                   = 0,
	Force2                                   = 1,
	Force3                                   = 2,
	Force4                                   = 3,
	ERainForce_MAX                           = 4,
};

// Enum RC.ERCLSADefautCameraStatus
// NumValues: 0x0004
enum class ERCLSADefautCameraStatus : uint8
{
	None                                     = 0,
	Loading                                  = 1,
	LoadComplete                             = 2,
	ERCLSADefautCameraStatus_MAX             = 3,
};

// Enum RC.ERCRealPlayerControllerReturnType
// NumValues: 0x000C
enum class ERCRealPlayerControllerReturnType : uint8
{
	Non                                      = 0,
	Talk                                     = 1,
	Check                                    = 2,
	CheckBusStop                             = 3,
	ShinigamiTalk                            = 4,
	ResearchExit                             = 5,
	Research2ndCheck                         = 6,
	Research2ndExit                          = 7,
	ResearchVisionChange                     = 8,
	ResearchVisionExit                       = 9,
	KaiKagiSelect                            = 10,
	ERCRealPlayerControllerReturnType_MAX    = 11,
};

// Enum RC.ERCReHUDFreeMoveState
// NumValues: 0x0009
enum class ERCReHUDFreeMoveState : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Run                                      = 2,
	Finish                                   = 3,
	FinishByTalk                             = 4,
	NoneByTalk                               = 5,
	FinishBySelect                           = 6,
	NoneBySelect                             = 7,
	Max                                      = 8,
};

// Enum RC.ERCReHUDState
// NumValues: 0x000F
enum class ERCReHUDState : uint8
{
	None                                     = 0,
	FreeMove_Start                           = 1,
	FreeMove                                 = 2,
	FreeMove_Finish                          = 3,
	Talk_Start                               = 4,
	Talk                                     = 5,
	Talk_Finish                              = 6,
	SequentialTalk                           = 7,
	Select_Start                             = 8,
	Select                                   = 9,
	Select_Finish                            = 10,
	ResearchMode                             = 11,
	PastVision                               = 12,
	SoundNovel                               = 13,
	Max                                      = 14,
};

// Enum RC.ERCSaveLoadErrorType
// NumValues: 0x002E
enum class ERCSaveLoadErrorType : uint8
{
	CheckOK                                  = 0,
	CheckError_Corrupt                       = 1,
	CheckError_UnspecifiedError              = 2,
	CheckError_AlreadyMounted                = 3,
	CheckError_UIDError                      = 4,
	CheckError_NotMount                      = 5,
	CheckError_FailedFileExtend              = 6,
	CheckError_FailedOpenFile                = 7,
	CheckError_FailedReadFile                = 8,
	SaveOK                                   = 9,
	SaveError_DoesNotExist                   = 10,
	SaveError_Corrupt                        = 11,
	SaveError_UnspecifiedError               = 12,
	SaveError_AlreadyMounted                 = 13,
	SaveError_UIDError                       = 14,
	SaveError_NotFreeSpace                   = 15,
	SaveError_NotFreeSpaceReWrite            = 16,
	SaveError_NotMount                       = 17,
	SaveError_FailedFileExtend               = 18,
	SaveError_FailedCreateFile               = 19,
	SaveError_FailedOpenFile                 = 20,
	SaveError_FailedWriteFile                = 21,
	LoadOK                                   = 22,
	LoadError_DoesNotExist                   = 23,
	LoadError_Corrupt                        = 24,
	LoadError_UnspecifiedError               = 25,
	LoadError_AlreadyMounted                 = 26,
	LoadError_UIDError                       = 27,
	LoadError_NotFreeSpace                   = 28,
	LoadError_NotMount                       = 29,
	LoadError_FailedFileExtend               = 30,
	LoadError_FailedOpenFile                 = 31,
	LoadError_NotFile                        = 32,
	LoadError_FailedReadFile                 = 33,
	DeleteOK                                 = 34,
	DeleteError_DoesNotExist                 = 35,
	DeleteError_Corrupt                      = 36,
	DeleteError_UnspecifiedError             = 37,
	DeleteError_AlreadyMounted               = 38,
	DeleteError_UIDError                     = 39,
	DeleteError_NotFreeSpace                 = 40,
	DeleteError_NotMount                     = 41,
	DeleteError_FailedFileExtend             = 42,
	DeleteError_FailedOpenFile               = 43,
	DeleteError_FailedDeleteFile             = 44,
	ERCSaveLoadErrorType_MAX                 = 45,
};

// Enum RC.ERCSaveLoadStatus
// NumValues: 0x0005
enum class ERCSaveLoadStatus : uint8
{
	None                                     = 0,
	Checking                                 = 1,
	Loading                                  = 2,
	Saving                                   = 3,
	ERCSaveLoadStatus_MAX                    = 4,
};

// Enum RC.ERCSaveLoadExecType
// NumValues: 0x000E
enum class ERCSaveLoadExecType : uint8
{
	None                                     = 0,
	SaveDevelopmentData                      = 1,
	LoadDevelopmentData                      = 2,
	SaveSystemData                           = 3,
	LoadSystemData                           = 4,
	SaveGameData                             = 5,
	SaveGameDataFromMemory                   = 6,
	LoadGameData                             = 7,
	LastLoadGameData                         = 8,
	CheckGameData                            = 9,
	LoadDemoSystemData                       = 10,
	LoadDemoGameData                         = 11,
	CheckDemoGameData                        = 12,
	ERCSaveLoadExecType_MAX                  = 13,
};

// Enum RC.ESAVELOADMENU_STATE
// NumValues: 0x000A
enum class ESAVELOADMENU_STATE : uint32
{
	PRE_MODE_SELECT                          = 0,
	MODE_SELECT                              = 1,
	PRE_SAVE_SELECT                          = 2,
	SAVE_SELECT                              = 3,
	PRE_LOAD_SELECT                          = 4,
	LOAD_SELECT                              = 5,
	PRE_CHECK_CLOSE                          = 6,
	CHECK_CLOSE                              = 7,
	NONE                                     = 8,
	ESAVELOADMENU_MAX                        = 9,
};

// Enum RC.ESaveLoadSelectState
// NumValues: 0x000A
enum class ESaveLoadSelectState : uint32
{
	NONE                                     = 0,
	PRE_SELECT                               = 1,
	SELECT                                   = 2,
	PRE_CHECK_DIALOG                         = 3,
	CHECK_DIALOG                             = 4,
	PRE_PUSH_ANIMATION                       = 5,
	PUSH_ANIMATION                           = 6,
	PRE_CHECK_FINISH                         = 7,
	CHECK_FINISH                             = 8,
	ESaveLoadSelectState_MAX                 = 9,
};

// Enum RC.ESaveLoadMode
// NumValues: 0x0006
enum class ESaveLoadMode : uint32
{
	SAVE                                     = 0,
	LOAD                                     = 1,
	TITLE_RETURN                             = 2,
	MAX                                      = 3,
	NONE                                     = 4,
	CANCEL                                   = 5,
};

// Enum RC.ESaveLoadState
// NumValues: 0x000F
enum class ESaveLoadState : uint32
{
	NONE                                     = 0,
	READY                                    = 1,
	CHECK_SAVE_LOAD_FINISH                   = 2,
	MAKE_LIST                                = 3,
	PRE_SELECT                               = 4,
	SELECT                                   = 5,
	PRE_DIALOG                               = 6,
	DIALOG                                   = 7,
	PRE_LOAD                                 = 8,
	LOAD_CHECK                               = 9,
	PRE_SAVE                                 = 10,
	SAVE_CHECK                               = 11,
	INSTALL_CHECK                            = 12,
	FINISH_CHECK                             = 13,
	ESaveLoadState_MAX                       = 14,
};

// Enum RC.ERCSceneChangeType
// NumValues: 0x000B
enum class ERCSceneChangeType : uint8
{
	None                                     = 0,
	Auto                                     = 1,
	ReNormal                                 = 2,
	ReLoading                                = 3,
	NzNormal                                 = 4,
	NzLoading                                = 5,
	Ex1                                      = 6,
	Deathmatch_In                            = 7,
	Deathmatch_Out                           = 8,
	SimpleWhiteFade                          = 9,
	ERCSceneChangeType_MAX                   = 10,
};

// Enum RC.ERCSelectTextSelectStatus
// NumValues: 0x0005
enum class ERCSelectTextSelectStatus : uint8
{
	Non                                      = 0,
	Normal                                   = 1,
	Select                                   = 2,
	NonSelect                                = 3,
	ERCSelectTextSelectStatus_MAX            = 4,
};

// Enum RC.ERCSelectTextTargetType
// NumValues: 0x0004
enum class ERCSelectTextTargetType : uint8
{
	Non                                      = 0,
	CheckActor                               = 1,
	SelectEventTrigger                       = 2,
	ERCSelectTextTargetType_MAX              = 3,
};

// Enum RC.ERCSelectTextExpressionType
// NumValues: 0x0003
enum class ERCSelectTextExpressionType : uint8
{
	ChangeMaterials                          = 0,
	ChangeParameters                         = 1,
	ERCSelectTextExpressionType_MAX          = 2,
};

// Enum RC.ERCSequenceShinigamiFollowTarget
// NumValues: 0x0003
enum class ERCSequenceShinigamiFollowTarget : uint8
{
	Player                                   = 0,
	Actor                                    = 1,
	Max                                      = 2,
};

// Enum RC.ERCSequenceShinigamiFollowType
// NumValues: 0x0005
enum class ERCSequenceShinigamiFollowType : uint8
{
	None                                     = 0,
	LocationOnly                             = 1,
	LocationAndRotation                      = 2,
	Transform                                = 3,
	Max                                      = 4,
};

// Enum RC.ERCSequenceShinigamiTransformTypeLS
// NumValues: 0x0005
enum class ERCSequenceShinigamiTransformTypeLS : uint8
{
	Shinigami                                = 0,
	Actor                                    = 1,
	Transform                                = 2,
	Player                                   = 3,
	Max                                      = 4,
};

// Enum RC.ERCSequenceShinigamiTransformTypeLSA
// NumValues: 0x0006
enum class ERCSequenceShinigamiTransformTypeLSA : uint8
{
	LSA                                      = 0,
	Shinigami                                = 1,
	Actor                                    = 2,
	Transform                                = 3,
	Player                                   = 4,
	Max                                      = 5,
};

// Enum RC.ERCSequenceTalkJumpCondition
// NumValues: 0x0003
enum class ERCSequenceTalkJumpCondition : uint8
{
	NotJump                                  = 0,
	SkipVoice                                = 1,
	Max                                      = 2,
};

// Enum RC.ERCSequenceJumpType
// NumValues: 0x0004
enum class ERCSequenceJumpType : uint8
{
	Label                                    = 0,
	Frame                                    = 1,
	Seconds                                  = 2,
	Max                                      = 3,
};

// Enum RC.ERCShinigamiAiCommandTriggerType
// NumValues: 0x0005
enum class ERCShinigamiAiCommandTriggerType : uint8
{
	None                                     = 0,
	Box                                      = 1,
	Capsule                                  = 2,
	Sphere                                   = 3,
	ERCShinigamiAiCommandTriggerType_MAX     = 4,
};

// Enum RC.ERCShinigamiAiFollowType
// NumValues: 0x0008
enum class ERCShinigamiAiFollowType : uint8
{
	Wait                                     = 0,
	MoveNormal                               = 1,
	MoveFar                                  = 2,
	MoveFollow                               = 3,
	WaitAngry                                = 4,
	WaitAngryIndoor                          = 5,
	ExWait                                   = 6,
	ERCShinigamiAiFollowType_MAX             = 7,
};

// Enum RC.ERCShinigamiAiMoveType
// NumValues: 0x0003
enum class ERCShinigamiAiMoveType : uint8
{
	Area                                     = 0,
	NearPlayer                               = 1,
	ERCShinigamiAiMoveType_MAX               = 2,
};

// Enum RC.ERCShinigamiAiMoveAreaType
// NumValues: 0x0005
enum class ERCShinigamiAiMoveAreaType : uint8
{
	None                                     = 0,
	Box                                      = 1,
	Capsule                                  = 2,
	Sphere                                   = 3,
	ERCShinigamiAiMoveAreaType_MAX           = 4,
};

// Enum RC.ERCShinigamiAnimeType
// NumValues: 0x0013
enum class ERCShinigamiAnimeType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	IdleFukigen                              = 2,
	IdleObie                                 = 3,
	Turn45_R                                 = 4,
	Turn45_L                                 = 5,
	Turn90_R                                 = 6,
	Turn90_L                                 = 7,
	Turn180_R                                = 8,
	Turn180_L                                = 9,
	Up                                       = 10,
	Down                                     = 11,
	Walk                                     = 12,
	WalkTilt_R                               = 13,
	WalkTilt_L                               = 14,
	Run                                      = 15,
	RunTilt_R                                = 16,
	RunTilt_L                                = 17,
	ERCShinigamiAnimeType_MAX                = 18,
};

// Enum RC.ERCShinigamiSpeedType
// NumValues: 0x0006
enum class ERCShinigamiSpeedType : uint8
{
	Normal                                   = 0,
	Fast                                     = 1,
	Turbo                                    = 2,
	Warp                                     = 3,
	Player                                   = 4,
	ERCShinigamiSpeedType_MAX                = 5,
};

// Enum RC.ERCSoundVowel
// NumValues: 0x0006
enum class ERCSoundVowel : uint8
{
	A                                        = 0,
	I                                        = 1,
	U                                        = 2,
	E                                        = 3,
	O                                        = 4,
	ERCSoundVowel_MAX                        = 5,
};

// Enum RC.ERCSoundOptionType
// NumValues: 0x0007
enum class ERCSoundOptionType : uint8
{
	BGM                                      = 0,
	GameSE                                   = 1,
	SystemSE                                 = 2,
	VOICE                                    = 3,
	JINGLE                                   = 4,
	None                                     = 5,
	ERCSoundOptionType_MAX                   = 6,
};

// Enum RC.ERCSoundType
// NumValues: 0x000D
enum class ERCSoundType : uint8
{
	BGM                                      = 0,
	SE                                       = 1,
	ENV                                      = 2,
	VOICE                                    = 3,
	BACKLOG                                  = 4,
	SOUND_SHEET_MAX                          = 4,
	ENV_MAP                                  = 5,
	ENV_3D                                   = 6,
	SE_JINGLE                                = 7,
	AMATAN_VOICE                             = 8,
	OPTION_BGM                               = 9,
	GAME_SE                                  = 10,
	MAX                                      = 11,
};

// Enum RC.ERCWanderingSpiritMotionPart
// NumValues: 0x0004
enum class ERCWanderingSpiritMotionPart : uint8
{
	In                                       = 0,
	Loop                                     = 1,
	Out                                      = 2,
	ERCWanderingSpiritMotionPart_MAX         = 3,
};

// Enum RC.ERCWanderingSpiritMotionType
// NumValues: 0x0007
enum class ERCWanderingSpiritMotionType : uint8
{
	Idle                                     = 0,
	UpDown                                   = 1,
	FrontBack                                = 2,
	Kunekune                                 = 3,
	Kaiten                                   = 4,
	GuruguruBar                              = 5,
	ERCWanderingSpiritMotionType_MAX         = 6,
};

// Enum RC.ERCSpiritMiniGameCheckPointType
// NumValues: 0x0006
enum class ERCSpiritMiniGameCheckPointType : uint8
{
	CheckPoint_A                             = 0,
	CheckPoint_B                             = 1,
	CheckPoint_C                             = 2,
	CheckPoint_D                             = 3,
	CheckPoint_E                             = 4,
	Max                                      = 5,
};

// Enum RC.ERCWanderingSpiritMovingInterpType
// NumValues: 0x0003
enum class ERCWanderingSpiritMovingInterpType : uint8
{
	Default                                  = 0,
	Constant                                 = 1,
	ERCWanderingSpiritMovingInterpType_MAX   = 2,
};

// Enum RC.ERCWanderingSpiritMovingDirectionType
// NumValues: 0x0003
enum class ERCWanderingSpiritMovingDirectionType : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	ERCWanderingSpiritMovingDirectionType_MAX = 2,
};

// Enum RC.ERCWanderingSpiritSpeedType
// NumValues: 0x0004
enum class ERCWanderingSpiritSpeedType : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	ERCWanderingSpiritSpeedType_MAX          = 3,
};

// Enum RC.ERCStaffRollPlatform
// NumValues: 0x0005
enum class ERCStaffRollPlatform : uint8
{
	Switch                                   = 0,
	PS5                                      = 1,
	Xbox                                     = 2,
	Steam                                    = 3,
	ERCStaffRollPlatform_MAX                 = 4,
};

// Enum RC.ERCStaffRollRegion
// NumValues: 0x0006
enum class ERCStaffRollRegion : uint8
{
	Asia                                     = 0,
	EU                                       = 1,
	US                                       = 2,
	KR                                       = 3,
	All                                      = 4,
	ERCStaffRollRegion_MAX                   = 5,
};

// Enum RC.ERCInputMode
// NumValues: 0x0003
enum class ERCInputMode : uint8
{
	Game                                     = 0,
	UI                                       = 1,
	ERCInputMode_MAX                         = 2,
};

// Enum RC.ERCKeyboardType
// NumValues: 0x0004
enum class ERCKeyboardType : uint8
{
	Qwerty                                   = 0,
	Qwertz                                   = 1,
	Azerty                                   = 2,
	ERCKeyboardType_MAX                      = 3,
};

// Enum RC.ERCAssetPriority
// NumValues: 0x0005
enum class ERCAssetPriority : uint8
{
	Sync                                     = 0,
	Hi                                       = 1,
	Middle                                   = 2,
	Low                                      = 3,
	ERCAssetPriority_MAX                     = 4,
};

// Enum RC.ERCSystemSaveDataType
// NumValues: 0x0004
enum class ERCSystemSaveDataType : uint8
{
	SystemSaveData                           = 0,
	GameSaveData                             = 1,
	DevelopmentSaveData                      = 2,
	ERCSystemSaveDataType_MAX                = 3,
};

// Enum RC.ERCSaveDataType
// NumValues: 0x0003
enum class ERCSaveDataType : uint8
{
	AutoSaveData                             = 0,
	SaveData                                 = 1,
	ERCSaveDataType_MAX                      = 2,
};

// Enum RC.ERCInputCursolInfoType
// NumValues: 0x0004
enum class ERCInputCursolInfoType : uint8
{
	None                                     = 0,
	ScreenPosition                           = 1,
	Move                                     = 2,
	ERCInputCursolInfoType_MAX               = 3,
};

// Enum RC.ERCInputLeverType
// NumValues: 0x0007
enum class ERCInputLeverType : uint8
{
	PlayerMoveFront                          = 0,
	PlayerMoveSide                           = 1,
	CameraPitch                              = 2,
	CameraRoll                               = 3,
	CameraZoom                               = 4,
	MenuScroll                               = 5,
	Max                                      = 6,
};

// Enum RC.ERCInputHardwareDrawType
// NumValues: 0x0003
enum class ERCInputHardwareDrawType : uint8
{
	Pad                                      = 0,
	Keyboard                                 = 1,
	ERCInputHardwareDrawType_MAX             = 2,
};

// Enum RC.ERCInputExButton
// NumValues: 0x0004
enum class ERCInputExButton : uint8
{
	None                                     = 0,
	Accept                                   = 1,
	Back                                     = 2,
	ERCInputExButton_MAX                     = 3,
};

// Enum RC.ERCInputHardwareType
// NumValues: 0x0006
enum class ERCInputHardwareType : uint8
{
	Pad1                                     = 0,
	Pad2                                     = 1,
	Keyboard1                                = 2,
	Keyboard2                                = 3,
	Mouse                                    = 4,
	Max                                      = 5,
};

// Enum RC.ERCInputButtonType
// NumValues: 0x0005
enum class ERCInputButtonType : uint8
{
	Button                                   = 0,
	LeverPlus                                = 1,
	LeverMinus                               = 2,
	Pointer                                  = 3,
	ERCInputButtonType_MAX                   = 4,
};

// Enum RC.ERCInputEnterType
// NumValues: 0x0003
enum class ERCInputEnterType : uint8
{
	Down                                     = 0,
	Right                                    = 1,
	ERCInputEnterType_MAX                    = 2,
};

// Enum RC.ERCInputPlatform
// NumValues: 0x0007
enum class ERCInputPlatform : uint8
{
	DualShock4                               = 0,
	DualSense                                = 1,
	XBoxController                           = 2,
	JoyController                            = 3,
	ProController                            = 4,
	Keyboard                                 = 5,
	ERCInputPlatform_MAX                     = 6,
};

// Enum RC.ERCDlcInstall
// NumValues: 0x0009
enum class ERCDlcInstall : uint8
{
	Base                                     = 0,
	DLC1                                     = 1,
	DLC2                                     = 2,
	DLC3                                     = 3,
	DLC4                                     = 4,
	DLC5                                     = 5,
	DLC6                                     = 6,
	DLC7                                     = 7,
	Max                                      = 8,
};

// Enum RC.ERCProduction
// NumValues: 0x0004
enum class ERCProduction : uint8
{
	PRODUCTION                               = 0,
	DEMO                                     = 1,
	BETA                                     = 2,
	ERCProduction_MAX                        = 3,
};

// Enum RC.ERCDlc
// NumValues: 0x000A
enum class ERCDlc : uint8
{
	RC                                       = 0,
	RC_DLC_CH21                              = 1,
	RC_DLC_CH22                              = 2,
	RC_DLC_CH23                              = 3,
	RC_DLC_CH24                              = 4,
	RC_DLC_CH25                              = 5,
	RC_DLC_GALLERY                           = 6,
	RC_Dev                                   = 7,
	EndCode                                  = 8,
	ERCDlc_MAX                               = 9,
};

// Enum RC.ERCPlatform
// NumValues: 0x0006
enum class ERCPlatform : uint8
{
	PlayStation4                             = 0,
	PlayStation5                             = 1,
	XboxSeriesX                              = 2,
	NintendoSwitch                           = 3,
	Steam                                    = 4,
	ERCPlatform_MAX                          = 5,
};

// Enum RC.ERCMovieQuality
// NumValues: 0x0003
enum class ERCMovieQuality : uint8
{
	Hi                                       = 0,
	Low                                      = 1,
	ERCMovieQuality_MAX                      = 2,
};

// Enum RC.ERCVoiceQuality
// NumValues: 0x0003
enum class ERCVoiceQuality : uint8
{
	Hi                                       = 0,
	Low                                      = 1,
	ERCVoiceQuality_MAX                      = 2,
};

// Enum RC.ERCVoiceLanguage
// NumValues: 0x0003
enum class ERCVoiceLanguage : uint8
{
	JA                                       = 0,
	EN                                       = 1,
	ERCVoiceLanguage_MAX                     = 2,
};

// Enum RC.ERCTextLanguage
// NumValues: 0x000B
enum class ERCTextLanguage : uint8
{
	None                                     = 0,
	JA                                       = 1,
	EN                                       = 2,
	ZH_HANS                                  = 3,
	ZH_HANT                                  = 4,
	FR                                       = 5,
	IT                                       = 6,
	DE                                       = 7,
	ES                                       = 8,
	KO                                       = 9,
	ERCTextLanguage_MAX                      = 10,
};

// Enum RC.ERCTitleChapterSelectState
// NumValues: 0x0009
enum class ERCTitleChapterSelectState : uint8
{
	PRE_SELECT                               = 0,
	SELECT                                   = 1,
	PRE_SELECT_DIALOG                        = 2,
	SELECT_DIALOG                            = 3,
	FINISH_CHECK                             = 4,
	FINISHED                                 = 5,
	PRE_INSTALL_DIALOG                       = 6,
	INSTALL_DIALOG                           = 7,
	MAX                                      = 8,
};

// Enum RC.ERCTitleChapterSelectWindowIndex
// NumValues: 0x0005
enum class ERCTitleChapterSelectWindowIndex : uint8
{
	REAL_START                               = 0,
	NAZO_START                               = 1,
	NAZO_RESULT                              = 2,
	RETURN                                   = 3,
	ERCTitleChapterSelectWindowIndex_MAX     = 4,
};

// Enum RC.ETitleLanguageState
// NumValues: 0x0007
enum class ETitleLanguageState : uint8
{
	PRE_SELECT                               = 0,
	SELECT                                   = 1,
	PRE_DIALOG                               = 2,
	DIALOG                                   = 3,
	PRE_FINISH                               = 4,
	FINISH                                   = 5,
	MAX                                      = 6,
};

// Enum RC.ERCTitleState
// NumValues: 0x002C
enum class ERCTitleState : uint8
{
	CHECK_ASSET_LOAD                         = 0,
	PRE_SAVE_CHECK                           = 1,
	SAVE_CHECK                               = 2,
	PRE_DLC_CHECK                            = 3,
	DLC_CHECK                                = 4,
	PRE_MAKE_SYSTEM_SAVEDATA                 = 5,
	MAKE_SYSTEM_SAVEDATA                     = 6,
	PRE_LOGO                                 = 7,
	LOGO                                     = 8,
	TITLE_START                              = 9,
	PRE_TITLE                                = 10,
	TITLE                                    = 11,
	PRE_CONTINUE                             = 12,
	CONTINUE                                 = 13,
	PRE_CHAPTER_SELECT                       = 14,
	CHAPTER_SELECT                           = 15,
	AFTER_CHAPTER_SELECT                     = 16,
	PRE_SAVELOAD                             = 17,
	SAVELOAD                                 = 18,
	PRE_COLLECTION                           = 19,
	COLLECTION                               = 20,
	COLLECTION_WAITING                       = 21,
	PRE_STORE                                = 22,
	STORE                                    = 23,
	PRE_CHECK_DIALOG                         = 24,
	CHECK_DIALOG                             = 25,
	PRE_LANGUAGE                             = 26,
	LANGUAGE                                 = 27,
	PRE_OPTION                               = 28,
	OPTION                                   = 29,
	PRE_SUBSTORY                             = 30,
	SUBSTORY                                 = 31,
	PRE_SUBSTORY_LOAD                        = 32,
	SUBSTORY_LOAD                            = 33,
	NAZO_RESULT                              = 34,
	NAZO_RESULT_WAITING                      = 35,
	PRE_QUIT                                 = 36,
	QUIT                                     = 37,
	PRE_GALLERY                              = 38,
	GALLERY                                  = 39,
	GALLERY_MOVIE_WAITING                    = 40,
	PRE_LICENSE                              = 41,
	LICENSE                                  = 42,
	MAX                                      = 43,
};

// Enum RC.ERCTitleMenuState
// NumValues: 0x000E
enum class ERCTitleMenuState : uint8
{
	PRE_CHECK_FRONT_LIST                     = 0,
	CHECK_FRONT_LIST                         = 1,
	PRE_CHECK_BACK_LIST                      = 2,
	CHECK_BACK_LIST                          = 3,
	PRE_NEW_GAME                             = 4,
	NEW_GAME                                 = 5,
	PRE_CONTINUE                             = 6,
	CONTINUE                                 = 7,
	PRE_FINISH_CHECK                         = 8,
	FINISH_CHECK                             = 9,
	WAITING                                  = 10,
	PRE_SUBSTORY_DIALOG                      = 11,
	SUBSTORY_DIALOG                          = 12,
	MAX                                      = 13,
};

// Enum RC.ERCTitleCheckType
// NumValues: 0x0003
enum class ERCTitleCheckType : uint8
{
	SAVE_CHECK                               = 0,
	DLC                                      = 1,
	ERCTitleCheckType_MAX                    = 2,
};

// Enum RC.ERCTitleSaveCheckConnectLastInfoType
// NumValues: 0x0004
enum class ERCTitleSaveCheckConnectLastInfoType : uint8
{
	NORMAL                                   = 0,
	START_UP_CANCEL                          = 1,
	TITLE_CANCEL                             = 2,
	ERCTitleSaveCheckConnectLastInfoType_MAX = 3,
};

// Enum RC.ERCTitleSaveCheckConnectState
// NumValues: 0x0008
enum class ERCTitleSaveCheckConnectState : uint8
{
	PRE_CHECK_WINDOW                         = 0,
	CHECK_WINDOW                             = 1,
	PRE_ENABLE_SAVE_DATA_CHECK               = 2,
	ENABLE_SAVE_DATA_CHECK                   = 3,
	PRE_LAST_INFO                            = 4,
	LAST_INFO                                = 5,
	FINISH                                   = 6,
	MAX                                      = 7,
};

// Enum RC.URCTitleSubStoryState
// NumValues: 0x000C
enum class EURCTitleSubStoryState : uint8
{
	PRE_SELECT                               = 0,
	SELECT                                   = 1,
	PRE_SAVECHECK                            = 2,
	SAVECHECK                                = 3,
	SAVECHECK_ERROR                          = 4,
	PRE_DIALOG                               = 5,
	DIALOG                                   = 6,
	PRE_CONFIRM                              = 7,
	CONFIRM                                  = 8,
	CONTINUE                                 = 9,
	WAIT                                     = 10,
	MAX                                      = 11,
};

// Enum RC.ERCSubStoryStatus
// NumValues: 0x0005
enum class ERCSubStoryStatus : uint8
{
	Clear                                    = 0,
	Close                                    = 1,
	Going                                    = 2,
	None                                     = 3,
	ERCSubStoryStatus_MAX                    = 4,
};

// Enum RC.ERCTitleSubStoryWindowSelectState
// NumValues: 0x0005
enum class ERCTitleSubStoryWindowSelectState : uint8
{
	CONTINUE                                 = 0,
	LOAD                                     = 1,
	NEWGAME                                  = 2,
	RETURN                                   = 3,
	ERCTitleSubStoryWindowSelectState_MAX    = 4,
};

// Enum RC.ERCUiMenuCharacterTransType
// NumValues: 0x0009
enum class ERCUiMenuCharacterTransType : uint8
{
	Character_Off                            = 0,
	Character_Def                            = 1,
	Character_OnCursor                       = 2,
	Character_OnCursorWait                   = 3,
	Character_OutCursor                      = 4,
	Character_Push                           = 5,
	Character_DeadStart                      = 6,
	Character_Wait                           = 7,
	Character_MAX                            = 8,
};

// Enum RC.ERCUiMenuCharacterAliveType
// NumValues: 0x0003
enum class ERCUiMenuCharacterAliveType : uint8
{
	Character_Alive                          = 0,
	Character_Dead                           = 1,
	Character_MAX                            = 2,
};

// Enum RC.ERCUiMenuCharacterSelectRowType
// NumValues: 0x0003
enum class ERCUiMenuCharacterSelectRowType : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	ERCUiMenuCharacterSelectRowType_MAX      = 2,
};

// Enum RC.ERCUiMenuCharacterSelectSlideType
// NumValues: 0x0006
enum class ERCUiMenuCharacterSelectSlideType : uint8
{
	None                                     = 0,
	In_L                                     = 1,
	In_R                                     = 2,
	Out_L                                    = 3,
	Out_R                                    = 4,
	ERCUiMenuCharacterSelectSlideType_MAX    = 5,
};

// Enum RC.ERCUiMenuCharacterViewerModelSlideType
// NumValues: 0x0005
enum class ERCUiMenuCharacterViewerModelSlideType : uint8
{
	None                                     = 0,
	In                                       = 1,
	In_L                                     = 2,
	In_R                                     = 3,
	ERCUiMenuCharacterViewerModelSlideType_MAX = 4,
};

// Enum RC.ESoundNovelStatus
// NumValues: 0x0009
enum class ESoundNovelStatus : uint8
{
	Idle                                     = 0,
	SlideIn                                  = 1,
	Run                                      = 2,
	Typing                                   = 3,
	WaitPush                                 = 4,
	PushButton                               = 5,
	WaitReHUD                                = 6,
	SlideOut                                 = 7,
	ESoundNovelStatus_MAX                    = 8,
};

// Enum RC.EVehicleCrossWalkState
// NumValues: 0x0004
enum class EVehicleCrossWalkState : uint8
{
	NoCheck                                  = 0,
	Check                                    = 1,
	Through                                  = 2,
	EVehicleCrossWalkState_MAX               = 3,
};

// Enum RC.ECrossWalkSignalType
// NumValues: 0x0004
enum class ECrossWalkSignalType : uint8
{
	Red                                      = 0,
	Yellow                                   = 1,
	Blue                                     = 2,
	MAX                                      = 3,
};

// Enum RC.EVehicleInitPositionLaneType
// NumValues: 0x0007
enum class EVehicleInitPositionLaneType : uint8
{
	UpLane                                   = 0,
	DownLane                                 = 1,
	Spawn1                                   = 2,
	Spawn2                                   = 3,
	Spawn3                                   = 4,
	NONE                                     = 5,
	EVehicleInitPositionLaneType_MAX         = 6,
};

// Enum RC.EVehicleLaneType
// NumValues: 0x0008
enum class EVehicleLaneType : uint8
{
	Lane1                                    = 0,
	Lane2                                    = 1,
	Lane3                                    = 2,
	Lane4                                    = 3,
	Lane5                                    = 4,
	Lane6                                    = 5,
	MAX                                      = 6,
	NONE                                     = 7,
};

// Enum RC.EVehiclePopUpPosition
// NumValues: 0x0006
enum class EVehiclePopUpPosition : uint8
{
	UpLaneStart                              = 0,
	UpLaneMiddle                             = 1,
	DownLaneStart                            = 2,
	DownLaneMiddle                           = 3,
	DownLaneMiddle2                          = 4,
	Max                                      = 5,
};

// Enum RC.EVehicleTireType
// NumValues: 0x0005
enum class EVehicleTireType : uint8
{
	FRONT_L                                  = 0,
	FRONT_R                                  = 1,
	REAR_L                                   = 2,
	REAR_R                                   = 3,
	EVehicleTireType_MAX                     = 4,
};

// Enum RC.EVehicleState
// NumValues: 0x0006
enum class EVehicleState : uint8
{
	Inactive                                 = 0,
	Stop                                     = 1,
	Brake                                    = 2,
	Accelerator                              = 3,
	Slow                                     = 4,
	EVehicleState_MAX                        = 5,
};

// ScriptStruct RC.RCAdvHUDTalkStartData
// 0x0018 (0x0018 - 0x0000)
struct FRCAdvHUDTalkStartData final
{
public:
	ERCAdvHUDTalkWindowType                       WindowType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterNameID;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameSubID;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFaceID;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFacialID;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDTalkStartData) == 0x000004, "Wrong alignment on FRCAdvHUDTalkStartData");
static_assert(sizeof(FRCAdvHUDTalkStartData) == 0x000018, "Wrong size on FRCAdvHUDTalkStartData");
static_assert(offsetof(FRCAdvHUDTalkStartData, WindowType) == 0x000000, "Member 'FRCAdvHUDTalkStartData::WindowType' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkStartData, CharacterNameID) == 0x000004, "Member 'FRCAdvHUDTalkStartData::CharacterNameID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkStartData, CharacterNameSubID) == 0x000008, "Member 'FRCAdvHUDTalkStartData::CharacterNameSubID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkStartData, CharacterFaceID) == 0x00000C, "Member 'FRCAdvHUDTalkStartData::CharacterFaceID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkStartData, CharacterFacialID) == 0x000010, "Member 'FRCAdvHUDTalkStartData::CharacterFacialID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkStartData, bAutoPlay) == 0x000014, "Member 'FRCAdvHUDTalkStartData::bAutoPlay' has a wrong offset!");

// ScriptStruct RC.RCParamTipsBlackSceneListTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamTipsBlackSceneListTableRow final : public FTableRowBase
{
public:
	class FName                                   TipsNonSceneID;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTipsBlackSceneListTableRow) == 0x000008, "Wrong alignment on FRCParamTipsBlackSceneListTableRow");
static_assert(sizeof(FRCParamTipsBlackSceneListTableRow) == 0x000010, "Wrong size on FRCParamTipsBlackSceneListTableRow");
static_assert(offsetof(FRCParamTipsBlackSceneListTableRow, TipsNonSceneID) == 0x000008, "Member 'FRCParamTipsBlackSceneListTableRow::TipsNonSceneID' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterNotifyData
// 0x0018 (0x0018 - 0x0000)
struct FRCNazoBattleRebuttalLetterNotifyData final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupNo;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         No;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterPosition           Position;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeft;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalLetterNotifyData) == 0x000004, "Wrong alignment on FRCNazoBattleRebuttalLetterNotifyData");
static_assert(sizeof(FRCNazoBattleRebuttalLetterNotifyData) == 0x000018, "Wrong size on FRCNazoBattleRebuttalLetterNotifyData");
static_assert(offsetof(FRCNazoBattleRebuttalLetterNotifyData, GroupIndex) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterNotifyData::GroupIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterNotifyData, GroupNo) == 0x000004, "Member 'FRCNazoBattleRebuttalLetterNotifyData::GroupNo' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterNotifyData, Index) == 0x000008, "Member 'FRCNazoBattleRebuttalLetterNotifyData::Index' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterNotifyData, No) == 0x00000C, "Member 'FRCNazoBattleRebuttalLetterNotifyData::No' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterNotifyData, Position) == 0x000010, "Member 'FRCNazoBattleRebuttalLetterNotifyData::Position' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterNotifyData, bLeft) == 0x000011, "Member 'FRCNazoBattleRebuttalLetterNotifyData::bLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterNotifyData, Damage) == 0x000014, "Member 'FRCNazoBattleRebuttalLetterNotifyData::Damage' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleDisturbLetterNotifyData
// 0x0024 (0x0024 - 0x0000)
struct FRCNazoBattleDisturbLetterNotifyData final
{
public:
	int32                                         RebuttalGroupIndex;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalGroupNo;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalIndex;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         No;                                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterPosition           Position;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeft;                                             // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Life;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleDisturbLetterNotifyData) == 0x000004, "Wrong alignment on FRCNazoBattleDisturbLetterNotifyData");
static_assert(sizeof(FRCNazoBattleDisturbLetterNotifyData) == 0x000024, "Wrong size on FRCNazoBattleDisturbLetterNotifyData");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, RebuttalGroupIndex) == 0x000000, "Member 'FRCNazoBattleDisturbLetterNotifyData::RebuttalGroupIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, RebuttalGroupNo) == 0x000004, "Member 'FRCNazoBattleDisturbLetterNotifyData::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, RebuttalIndex) == 0x000008, "Member 'FRCNazoBattleDisturbLetterNotifyData::RebuttalIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, RebuttalNo) == 0x00000C, "Member 'FRCNazoBattleDisturbLetterNotifyData::RebuttalNo' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, Index) == 0x000010, "Member 'FRCNazoBattleDisturbLetterNotifyData::Index' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, No) == 0x000014, "Member 'FRCNazoBattleDisturbLetterNotifyData::No' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, Position) == 0x000018, "Member 'FRCNazoBattleDisturbLetterNotifyData::Position' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, bLeft) == 0x000019, "Member 'FRCNazoBattleDisturbLetterNotifyData::bLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, Life) == 0x00001C, "Member 'FRCNazoBattleDisturbLetterNotifyData::Life' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterNotifyData, Damage) == 0x000020, "Member 'FRCNazoBattleDisturbLetterNotifyData::Damage' has a wrong offset!");

// ScriptStruct RC.RCScriptActorAnimInstFootIKFootData
// 0x0018 (0x0018 - 0x0000)
struct FRCScriptActorAnimInstFootIKFootData final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorAnimInstFootIKFootData) == 0x000004, "Wrong alignment on FRCScriptActorAnimInstFootIKFootData");
static_assert(sizeof(FRCScriptActorAnimInstFootIKFootData) == 0x000018, "Wrong size on FRCScriptActorAnimInstFootIKFootData");
static_assert(offsetof(FRCScriptActorAnimInstFootIKFootData, Offset) == 0x000000, "Member 'FRCScriptActorAnimInstFootIKFootData::Offset' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstFootIKFootData, Rot) == 0x00000C, "Member 'FRCScriptActorAnimInstFootIKFootData::Rot' has a wrong offset!");

// ScriptStruct RC.RCScriptActorAnimInstFootIKData
// 0x0044 (0x0044 - 0x0000)
struct FRCScriptActorAnimInstFootIKData final
{
public:
	bool                                          bFootIK;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanFootIK;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WaistOffset;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCScriptActorAnimInstFootIKFootData   FootLData;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCScriptActorAnimInstFootIKFootData   FootRData;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFootIKInterp;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCScriptActorAnimInstFootIKData) == 0x000004, "Wrong alignment on FRCScriptActorAnimInstFootIKData");
static_assert(sizeof(FRCScriptActorAnimInstFootIKData) == 0x000044, "Wrong size on FRCScriptActorAnimInstFootIKData");
static_assert(offsetof(FRCScriptActorAnimInstFootIKData, bFootIK) == 0x000000, "Member 'FRCScriptActorAnimInstFootIKData::bFootIK' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstFootIKData, bCanFootIK) == 0x000001, "Member 'FRCScriptActorAnimInstFootIKData::bCanFootIK' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstFootIKData, WaistOffset) == 0x000004, "Member 'FRCScriptActorAnimInstFootIKData::WaistOffset' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstFootIKData, FootLData) == 0x000010, "Member 'FRCScriptActorAnimInstFootIKData::FootLData' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstFootIKData, FootRData) == 0x000028, "Member 'FRCScriptActorAnimInstFootIKData::FootRData' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstFootIKData, bFootIKInterp) == 0x000040, "Member 'FRCScriptActorAnimInstFootIKData::bFootIKInterp' has a wrong offset!");

// ScriptStruct RC.CascadeRainDataTableRow
// 0x0030 (0x0038 - 0x0008)
struct FCascadeRainDataTableRow final : public FTableRowBase
{
public:
	class FName                                   MapName;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   paramNamA;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCascadeRainDataTableRow) == 0x000008, "Wrong alignment on FCascadeRainDataTableRow");
static_assert(sizeof(FCascadeRainDataTableRow) == 0x000038, "Wrong size on FCascadeRainDataTableRow");
static_assert(offsetof(FCascadeRainDataTableRow, MapName) == 0x000008, "Member 'FCascadeRainDataTableRow::MapName' has a wrong offset!");
static_assert(offsetof(FCascadeRainDataTableRow, ParamName) == 0x000010, "Member 'FCascadeRainDataTableRow::ParamName' has a wrong offset!");
static_assert(offsetof(FCascadeRainDataTableRow, paramNamA) == 0x000018, "Member 'FCascadeRainDataTableRow::paramNamA' has a wrong offset!");
static_assert(offsetof(FCascadeRainDataTableRow, Tag) == 0x000020, "Member 'FCascadeRainDataTableRow::Tag' has a wrong offset!");
static_assert(offsetof(FCascadeRainDataTableRow, R) == 0x000028, "Member 'FCascadeRainDataTableRow::R' has a wrong offset!");
static_assert(offsetof(FCascadeRainDataTableRow, G) == 0x00002C, "Member 'FCascadeRainDataTableRow::G' has a wrong offset!");
static_assert(offsetof(FCascadeRainDataTableRow, B) == 0x000030, "Member 'FCascadeRainDataTableRow::B' has a wrong offset!");
static_assert(offsetof(FCascadeRainDataTableRow, A) == 0x000034, "Member 'FCascadeRainDataTableRow::A' has a wrong offset!");

// ScriptStruct RC.RCCompanionActorSave
// 0x0018 (0x0018 - 0x0000)
struct FRCCompanionActorSave final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCompanionActorSave) == 0x000004, "Wrong alignment on FRCCompanionActorSave");
static_assert(sizeof(FRCCompanionActorSave) == 0x000018, "Wrong size on FRCCompanionActorSave");
static_assert(offsetof(FRCCompanionActorSave, CharacterName) == 0x000000, "Member 'FRCCompanionActorSave::CharacterName' has a wrong offset!");
static_assert(offsetof(FRCCompanionActorSave, Position) == 0x000008, "Member 'FRCCompanionActorSave::Position' has a wrong offset!");
static_assert(offsetof(FRCCompanionActorSave, Yaw) == 0x000014, "Member 'FRCCompanionActorSave::Yaw' has a wrong offset!");

// ScriptStruct RC.RainDataTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRainDataTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DispName;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   paramA;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRainDataTableRow) == 0x000008, "Wrong alignment on FRainDataTableRow");
static_assert(sizeof(FRainDataTableRow) == 0x000038, "Wrong size on FRainDataTableRow");
static_assert(offsetof(FRainDataTableRow, MapID) == 0x000008, "Member 'FRainDataTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRainDataTableRow, DispName) == 0x000010, "Member 'FRainDataTableRow::DispName' has a wrong offset!");
static_assert(offsetof(FRainDataTableRow, Param) == 0x000018, "Member 'FRainDataTableRow::Param' has a wrong offset!");
static_assert(offsetof(FRainDataTableRow, paramA) == 0x000020, "Member 'FRainDataTableRow::paramA' has a wrong offset!");
static_assert(offsetof(FRainDataTableRow, R) == 0x000028, "Member 'FRainDataTableRow::R' has a wrong offset!");
static_assert(offsetof(FRainDataTableRow, G) == 0x00002C, "Member 'FRainDataTableRow::G' has a wrong offset!");
static_assert(offsetof(FRainDataTableRow, B) == 0x000030, "Member 'FRainDataTableRow::B' has a wrong offset!");
static_assert(offsetof(FRainDataTableRow, A) == 0x000034, "Member 'FRainDataTableRow::A' has a wrong offset!");

// ScriptStruct RC.RCAchievementSaveInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCAchievementSaveInfo final
{
public:
	class FName                                   AchievementID;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnlock;                                           // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSentToSever;                                      // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAchievementSaveInfo) == 0x000004, "Wrong alignment on FRCAchievementSaveInfo");
static_assert(sizeof(FRCAchievementSaveInfo) == 0x000010, "Wrong size on FRCAchievementSaveInfo");
static_assert(offsetof(FRCAchievementSaveInfo, AchievementID) == 0x000000, "Member 'FRCAchievementSaveInfo::AchievementID' has a wrong offset!");
static_assert(offsetof(FRCAchievementSaveInfo, Num) == 0x000008, "Member 'FRCAchievementSaveInfo::Num' has a wrong offset!");
static_assert(offsetof(FRCAchievementSaveInfo, bUnlock) == 0x00000C, "Member 'FRCAchievementSaveInfo::bUnlock' has a wrong offset!");
static_assert(offsetof(FRCAchievementSaveInfo, bSentToSever) == 0x00000D, "Member 'FRCAchievementSaveInfo::bSentToSever' has a wrong offset!");

// ScriptStruct RC.RCParamNzPuzzleBarrelWordTableRow
// 0x0048 (0x0050 - 0x0008)
struct FRCParamNzPuzzleBarrelWordTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WordImagePath;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WordTextID;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WordAnswerIndex;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WordAnswerIndex1;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WordAnswerIndex2;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WordAnswerIndex3;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WordAnswerIndex4;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WordBarrelIndex;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzPuzzleBarrelWordTableRow) == 0x000008, "Wrong alignment on FRCParamNzPuzzleBarrelWordTableRow");
static_assert(sizeof(FRCParamNzPuzzleBarrelWordTableRow) == 0x000050, "Wrong size on FRCParamNzPuzzleBarrelWordTableRow");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, ID) == 0x000008, "Member 'FRCParamNzPuzzleBarrelWordTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, SceneID) == 0x000018, "Member 'FRCParamNzPuzzleBarrelWordTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, WordImagePath) == 0x000020, "Member 'FRCParamNzPuzzleBarrelWordTableRow::WordImagePath' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, WordTextID) == 0x000030, "Member 'FRCParamNzPuzzleBarrelWordTableRow::WordTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, WordAnswerIndex) == 0x000038, "Member 'FRCParamNzPuzzleBarrelWordTableRow::WordAnswerIndex' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, WordAnswerIndex1) == 0x00003C, "Member 'FRCParamNzPuzzleBarrelWordTableRow::WordAnswerIndex1' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, WordAnswerIndex2) == 0x000040, "Member 'FRCParamNzPuzzleBarrelWordTableRow::WordAnswerIndex2' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, WordAnswerIndex3) == 0x000044, "Member 'FRCParamNzPuzzleBarrelWordTableRow::WordAnswerIndex3' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, WordAnswerIndex4) == 0x000048, "Member 'FRCParamNzPuzzleBarrelWordTableRow::WordAnswerIndex4' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleBarrelWordTableRow, WordBarrelIndex) == 0x00004C, "Member 'FRCParamNzPuzzleBarrelWordTableRow::WordBarrelIndex' has a wrong offset!");

// ScriptStruct RC.RCAchievementInfo
// 0x0014 (0x0014 - 0x0000)
struct FRCAchievementInfo final
{
public:
	class FName                                   AchievementID;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OperationID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAchievementInfo) == 0x000004, "Wrong alignment on FRCAchievementInfo");
static_assert(sizeof(FRCAchievementInfo) == 0x000014, "Wrong size on FRCAchievementInfo");
static_assert(offsetof(FRCAchievementInfo, AchievementID) == 0x000000, "Member 'FRCAchievementInfo::AchievementID' has a wrong offset!");
static_assert(offsetof(FRCAchievementInfo, OperationID) == 0x000008, "Member 'FRCAchievementInfo::OperationID' has a wrong offset!");
static_assert(offsetof(FRCAchievementInfo, Num) == 0x000010, "Member 'FRCAchievementInfo::Num' has a wrong offset!");

// ScriptStruct RC.RCAchievementCommandInfo
// 0x0014 (0x0014 - 0x0000)
struct FRCAchievementCommandInfo final
{
public:
	ERCAchievementCommand                         Command;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AchivementID;                                      // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExec;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAchievementCommandInfo) == 0x000004, "Wrong alignment on FRCAchievementCommandInfo");
static_assert(sizeof(FRCAchievementCommandInfo) == 0x000014, "Wrong size on FRCAchievementCommandInfo");
static_assert(offsetof(FRCAchievementCommandInfo, Command) == 0x000000, "Member 'FRCAchievementCommandInfo::Command' has a wrong offset!");
static_assert(offsetof(FRCAchievementCommandInfo, AchivementID) == 0x000004, "Member 'FRCAchievementCommandInfo::AchivementID' has a wrong offset!");
static_assert(offsetof(FRCAchievementCommandInfo, Progress) == 0x00000C, "Member 'FRCAchievementCommandInfo::Progress' has a wrong offset!");
static_assert(offsetof(FRCAchievementCommandInfo, bIsExec) == 0x000010, "Member 'FRCAchievementCommandInfo::bIsExec' has a wrong offset!");

// ScriptStruct RC.RCScriptActorTurnSequenceInfo
// 0x000C (0x000C - 0x0000)
struct FRCScriptActorTurnSequenceInfo final
{
public:
	float                                         AngleMin;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorTurnSequenceInfo) == 0x000004, "Wrong alignment on FRCScriptActorTurnSequenceInfo");
static_assert(sizeof(FRCScriptActorTurnSequenceInfo) == 0x00000C, "Wrong size on FRCScriptActorTurnSequenceInfo");
static_assert(offsetof(FRCScriptActorTurnSequenceInfo, AngleMin) == 0x000000, "Member 'FRCScriptActorTurnSequenceInfo::AngleMin' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnSequenceInfo, Length) == 0x000004, "Member 'FRCScriptActorTurnSequenceInfo::Length' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnSequenceInfo, PlayRate) == 0x000008, "Member 'FRCScriptActorTurnSequenceInfo::PlayRate' has a wrong offset!");

// ScriptStruct RC.RCScriptActorTurnInfo
// 0x002C (0x002C - 0x0000)
struct FRCScriptActorTurnInfo final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCScriptActorTurnSequenceInfo         Sequence0;                                         // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCScriptActorTurnSequenceInfo         Sequence1;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCScriptActorTurnSequenceInfo         Sequence2;                                         // 0x001C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayRateForAll;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorTurnInfo) == 0x000004, "Wrong alignment on FRCScriptActorTurnInfo");
static_assert(sizeof(FRCScriptActorTurnInfo) == 0x00002C, "Wrong size on FRCScriptActorTurnInfo");
static_assert(offsetof(FRCScriptActorTurnInfo, MaxSpeed) == 0x000000, "Member 'FRCScriptActorTurnInfo::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnInfo, Sequence0) == 0x000004, "Member 'FRCScriptActorTurnInfo::Sequence0' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnInfo, Sequence1) == 0x000010, "Member 'FRCScriptActorTurnInfo::Sequence1' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnInfo, Sequence2) == 0x00001C, "Member 'FRCScriptActorTurnInfo::Sequence2' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnInfo, PlayRateForAll) == 0x000028, "Member 'FRCScriptActorTurnInfo::PlayRateForAll' has a wrong offset!");

// ScriptStruct RC.RCActorCollisionPrisetInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCActorCollisionPrisetInfo final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrisetName;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCActorCollisionPrisetInfo) == 0x000008, "Wrong alignment on FRCActorCollisionPrisetInfo");
static_assert(sizeof(FRCActorCollisionPrisetInfo) == 0x000010, "Wrong size on FRCActorCollisionPrisetInfo");
static_assert(offsetof(FRCActorCollisionPrisetInfo, PrimitiveComponent) == 0x000000, "Member 'FRCActorCollisionPrisetInfo::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(FRCActorCollisionPrisetInfo, PrisetName) == 0x000008, "Member 'FRCActorCollisionPrisetInfo::PrisetName' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDCutInAnimData
// 0x0014 (0x0014 - 0x0000)
struct FRCAdvHUDCutInAnimData final
{
public:
	class FName                                   CutInID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDWBPLoadState                         WBPLoadState;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WBPFileName;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDCutInAnimData) == 0x000004, "Wrong alignment on FRCAdvHUDCutInAnimData");
static_assert(sizeof(FRCAdvHUDCutInAnimData) == 0x000014, "Wrong size on FRCAdvHUDCutInAnimData");
static_assert(offsetof(FRCAdvHUDCutInAnimData, CutInID) == 0x000000, "Member 'FRCAdvHUDCutInAnimData::CutInID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDCutInAnimData, WBPLoadState) == 0x000008, "Member 'FRCAdvHUDCutInAnimData::WBPLoadState' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDCutInAnimData, WBPFileName) == 0x00000C, "Member 'FRCAdvHUDCutInAnimData::WBPFileName' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultChapterSettingTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamNzResultChapterSettingTableRow final : public FTableRowBase
{
public:
	class FName                                   ChapterImagePath;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzResultChapterSettingTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultChapterSettingTableRow");
static_assert(sizeof(FRCParamNzResultChapterSettingTableRow) == 0x000010, "Wrong size on FRCParamNzResultChapterSettingTableRow");
static_assert(offsetof(FRCParamNzResultChapterSettingTableRow, ChapterImagePath) == 0x000008, "Member 'FRCParamNzResultChapterSettingTableRow::ChapterImagePath' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDAccessableWidgetCommonData
// 0x0040 (0x0040 - 0x0000)
struct FRCAdvHUDAccessableWidgetCommonData final
{
public:
	ERCAdvHUDAccessableWidgetType                 Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCUiWidgetBase*                        Widget;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCUiWidgetAccessable*                  WidgetAccessable;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCUiInteractIcon*                      WidgetInteractive;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccessable;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenByTrace;                                    // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetPosition;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInViewport;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInScreen;                                         // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenBySafeArea;                                 // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDWidgetState                          State;                                             // 0x003B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetData;                                          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDAccessableWidgetCommonData) == 0x000008, "Wrong alignment on FRCAdvHUDAccessableWidgetCommonData");
static_assert(sizeof(FRCAdvHUDAccessableWidgetCommonData) == 0x000040, "Wrong size on FRCAdvHUDAccessableWidgetCommonData");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, Type) == 0x000000, "Member 'FRCAdvHUDAccessableWidgetCommonData::Type' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, Actor) == 0x000008, "Member 'FRCAdvHUDAccessableWidgetCommonData::Actor' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, Widget) == 0x000010, "Member 'FRCAdvHUDAccessableWidgetCommonData::Widget' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, WidgetAccessable) == 0x000018, "Member 'FRCAdvHUDAccessableWidgetCommonData::WidgetAccessable' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, WidgetInteractive) == 0x000020, "Member 'FRCAdvHUDAccessableWidgetCommonData::WidgetInteractive' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, bAccessable) == 0x000028, "Member 'FRCAdvHUDAccessableWidgetCommonData::bAccessable' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, bHiddenByTrace) == 0x000029, "Member 'FRCAdvHUDAccessableWidgetCommonData::bHiddenByTrace' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, Distance) == 0x00002C, "Member 'FRCAdvHUDAccessableWidgetCommonData::Distance' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, bSetPosition) == 0x000030, "Member 'FRCAdvHUDAccessableWidgetCommonData::bSetPosition' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, Priority) == 0x000034, "Member 'FRCAdvHUDAccessableWidgetCommonData::Priority' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, bInViewport) == 0x000038, "Member 'FRCAdvHUDAccessableWidgetCommonData::bInViewport' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, bInScreen) == 0x000039, "Member 'FRCAdvHUDAccessableWidgetCommonData::bInScreen' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, bHiddenBySafeArea) == 0x00003A, "Member 'FRCAdvHUDAccessableWidgetCommonData::bHiddenBySafeArea' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, State) == 0x00003B, "Member 'FRCAdvHUDAccessableWidgetCommonData::State' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableWidgetCommonData, bSetData) == 0x00003C, "Member 'FRCAdvHUDAccessableWidgetCommonData::bSetData' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDAccessableWidgetBaseData
// 0x0048 (0x0048 - 0x0000)
struct FRCAdvHUDAccessableWidgetBaseData
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDAccessableWidgetCommonData    CommonData;                                        // 0x0008(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDAccessableWidgetBaseData) == 0x000008, "Wrong alignment on FRCAdvHUDAccessableWidgetBaseData");
static_assert(sizeof(FRCAdvHUDAccessableWidgetBaseData) == 0x000048, "Wrong size on FRCAdvHUDAccessableWidgetBaseData");
static_assert(offsetof(FRCAdvHUDAccessableWidgetBaseData, CommonData) == 0x000008, "Member 'FRCAdvHUDAccessableWidgetBaseData::CommonData' has a wrong offset!");

// ScriptStruct RC.RCSaveLoadExec
// 0x0008 (0x0008 - 0x0000)
struct FRCSaveLoadExec final
{
public:
	ERCSaveLoadExecType                           ExecType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCStoryMode                                  StoryMode;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSaveDataType                               Type;                                              // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotNum;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSaveLoadExec) == 0x000004, "Wrong alignment on FRCSaveLoadExec");
static_assert(sizeof(FRCSaveLoadExec) == 0x000008, "Wrong size on FRCSaveLoadExec");
static_assert(offsetof(FRCSaveLoadExec, ExecType) == 0x000000, "Member 'FRCSaveLoadExec::ExecType' has a wrong offset!");
static_assert(offsetof(FRCSaveLoadExec, StoryMode) == 0x000001, "Member 'FRCSaveLoadExec::StoryMode' has a wrong offset!");
static_assert(offsetof(FRCSaveLoadExec, Type) == 0x000002, "Member 'FRCSaveLoadExec::Type' has a wrong offset!");
static_assert(offsetof(FRCSaveLoadExec, SlotNum) == 0x000004, "Member 'FRCSaveLoadExec::SlotNum' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDInteractIconData
// 0x0008 (0x0050 - 0x0048)
struct FRCAdvHUDInteractIconData : public FRCAdvHUDAccessableWidgetBaseData
{
public:
	bool                                          bDraw;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDInteractIconData) == 0x000008, "Wrong alignment on FRCAdvHUDInteractIconData");
static_assert(sizeof(FRCAdvHUDInteractIconData) == 0x000050, "Wrong size on FRCAdvHUDInteractIconData");
static_assert(offsetof(FRCAdvHUDInteractIconData, bDraw) == 0x000048, "Member 'FRCAdvHUDInteractIconData::bDraw' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDInteractIconData, Scale) == 0x00004C, "Member 'FRCAdvHUDInteractIconData::Scale' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDAccessableCheckActorData
// 0x0008 (0x0008 - 0x0000)
struct FRCAdvHUDAccessableCheckActorData final
{
public:
	class ARCCheckActor*                          CheckActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDAccessableCheckActorData) == 0x000008, "Wrong alignment on FRCAdvHUDAccessableCheckActorData");
static_assert(sizeof(FRCAdvHUDAccessableCheckActorData) == 0x000008, "Wrong size on FRCAdvHUDAccessableCheckActorData");
static_assert(offsetof(FRCAdvHUDAccessableCheckActorData, CheckActor) == 0x000000, "Member 'FRCAdvHUDAccessableCheckActorData::CheckActor' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDMarkerWidgetSet
// 0x0008 (0x0008 - 0x0000)
struct FRCAdvHUDMarkerWidgetSet final
{
public:
	class URCUiIntTarget*                         Marker;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDMarkerWidgetSet) == 0x000008, "Wrong alignment on FRCAdvHUDMarkerWidgetSet");
static_assert(sizeof(FRCAdvHUDMarkerWidgetSet) == 0x000008, "Wrong size on FRCAdvHUDMarkerWidgetSet");
static_assert(offsetof(FRCAdvHUDMarkerWidgetSet, Marker) == 0x000000, "Member 'FRCAdvHUDMarkerWidgetSet::Marker' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDMarkerData
// 0x0020 (0x0070 - 0x0050)
struct FRCAdvHUDMarkerData final : public FRCAdvHUDInteractIconData
{
public:
	struct FRCAdvHUDAccessableCheckActorData      CheckActorData;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAdvHUDMarkerWidgetSet               WidgetSet;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoal;                                             // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubquest;                                         // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDMarkerData) == 0x000008, "Wrong alignment on FRCAdvHUDMarkerData");
static_assert(sizeof(FRCAdvHUDMarkerData) == 0x000070, "Wrong size on FRCAdvHUDMarkerData");
static_assert(offsetof(FRCAdvHUDMarkerData, CheckActorData) == 0x000050, "Member 'FRCAdvHUDMarkerData::CheckActorData' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDMarkerData, WidgetSet) == 0x000058, "Member 'FRCAdvHUDMarkerData::WidgetSet' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDMarkerData, TextID) == 0x000060, "Member 'FRCAdvHUDMarkerData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDMarkerData, bGoal) == 0x000068, "Member 'FRCAdvHUDMarkerData::bGoal' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDMarkerData, bSubquest) == 0x000069, "Member 'FRCAdvHUDMarkerData::bSubquest' has a wrong offset!");

// ScriptStruct RC.RCParamWarldMapListTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamWarldMapListTableRow final : public FTableRowBase
{
public:
	class FName                                   WarldMapID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBusStop;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LinkWorldMapID;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamWarldMapListTableRow) == 0x000008, "Wrong alignment on FRCParamWarldMapListTableRow");
static_assert(sizeof(FRCParamWarldMapListTableRow) == 0x000028, "Wrong size on FRCParamWarldMapListTableRow");
static_assert(offsetof(FRCParamWarldMapListTableRow, WarldMapID) == 0x000008, "Member 'FRCParamWarldMapListTableRow::WarldMapID' has a wrong offset!");
static_assert(offsetof(FRCParamWarldMapListTableRow, bBusStop) == 0x000010, "Member 'FRCParamWarldMapListTableRow::bBusStop' has a wrong offset!");
static_assert(offsetof(FRCParamWarldMapListTableRow, LinkWorldMapID) == 0x000018, "Member 'FRCParamWarldMapListTableRow::LinkWorldMapID' has a wrong offset!");

// ScriptStruct RC.RCScriptActorTurnSequenceSettings
// 0x0004 (0x0004 - 0x0000)
struct FRCScriptActorTurnSequenceSettings final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorTurnSequenceSettings) == 0x000004, "Wrong alignment on FRCScriptActorTurnSequenceSettings");
static_assert(sizeof(FRCScriptActorTurnSequenceSettings) == 0x000004, "Wrong size on FRCScriptActorTurnSequenceSettings");
static_assert(offsetof(FRCScriptActorTurnSequenceSettings, PlayRate) == 0x000000, "Member 'FRCScriptActorTurnSequenceSettings::PlayRate' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDDebugDrawWidgetData
// 0x0010 (0x0010 - 0x0000)
struct FRCAdvHUDDebugDrawWidgetData final
{
public:
	class URCUiWidgetBase*                        Widget;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotPlayerScreen;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDDebugDrawWidgetData) == 0x000008, "Wrong alignment on FRCAdvHUDDebugDrawWidgetData");
static_assert(sizeof(FRCAdvHUDDebugDrawWidgetData) == 0x000010, "Wrong size on FRCAdvHUDDebugDrawWidgetData");
static_assert(offsetof(FRCAdvHUDDebugDrawWidgetData, Widget) == 0x000000, "Member 'FRCAdvHUDDebugDrawWidgetData::Widget' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDDebugDrawWidgetData, Priority) == 0x000008, "Member 'FRCAdvHUDDebugDrawWidgetData::Priority' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDDebugDrawWidgetData, bNotPlayerScreen) == 0x00000C, "Member 'FRCAdvHUDDebugDrawWidgetData::bNotPlayerScreen' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDCutInData
// 0x0018 (0x0020 - 0x0008)
struct FRCAdvHUDCutInData final : public FTableRowBase
{
public:
	class FName                                   CutInID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDCutInType                            CutInType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDCutInSEType                          CutInSEType;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DlcType;                                           // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDCutInData) == 0x000008, "Wrong alignment on FRCAdvHUDCutInData");
static_assert(sizeof(FRCAdvHUDCutInData) == 0x000020, "Wrong size on FRCAdvHUDCutInData");
static_assert(offsetof(FRCAdvHUDCutInData, CutInID) == 0x000008, "Member 'FRCAdvHUDCutInData::CutInID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDCutInData, CutInType) == 0x000010, "Member 'FRCAdvHUDCutInData::CutInType' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDCutInData, CutInSEType) == 0x000011, "Member 'FRCAdvHUDCutInData::CutInSEType' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDCutInData, DlcType) == 0x000014, "Member 'FRCAdvHUDCutInData::DlcType' has a wrong offset!");

// ScriptStruct RC.RCRealEventQuestInfo
// 0x001C (0x001C - 0x0000)
struct FRCRealEventQuestInfo final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestTitle;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCRealEventQuestInfo) == 0x000004, "Wrong alignment on FRCRealEventQuestInfo");
static_assert(sizeof(FRCRealEventQuestInfo) == 0x00001C, "Wrong size on FRCRealEventQuestInfo");
static_assert(offsetof(FRCRealEventQuestInfo, ActorName) == 0x000000, "Member 'FRCRealEventQuestInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FRCRealEventQuestInfo, QuestTitle) == 0x000008, "Member 'FRCRealEventQuestInfo::QuestTitle' has a wrong offset!");
static_assert(offsetof(FRCRealEventQuestInfo, Position) == 0x000010, "Member 'FRCRealEventQuestInfo::Position' has a wrong offset!");

// ScriptStruct RC.RCRealEventAreaMoveInfo
// 0x0028 (0x0028 - 0x0000)
struct FRCRealEventAreaMoveInfo final
{
public:
	class FName                                   NextMapID;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextPlayerStart;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCRealEventAreaMoveInfo) == 0x000004, "Wrong alignment on FRCRealEventAreaMoveInfo");
static_assert(sizeof(FRCRealEventAreaMoveInfo) == 0x000028, "Wrong size on FRCRealEventAreaMoveInfo");
static_assert(offsetof(FRCRealEventAreaMoveInfo, NextMapID) == 0x000000, "Member 'FRCRealEventAreaMoveInfo::NextMapID' has a wrong offset!");
static_assert(offsetof(FRCRealEventAreaMoveInfo, NextPlayerStart) == 0x000008, "Member 'FRCRealEventAreaMoveInfo::NextPlayerStart' has a wrong offset!");
static_assert(offsetof(FRCRealEventAreaMoveInfo, bEnable) == 0x000010, "Member 'FRCRealEventAreaMoveInfo::bEnable' has a wrong offset!");
static_assert(offsetof(FRCRealEventAreaMoveInfo, Position) == 0x000014, "Member 'FRCRealEventAreaMoveInfo::Position' has a wrong offset!");
static_assert(offsetof(FRCRealEventAreaMoveInfo, TextID) == 0x000020, "Member 'FRCRealEventAreaMoveInfo::TextID' has a wrong offset!");

// ScriptStruct RC.RCRealEventBusStopInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCRealEventBusStopInfo final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCRealEventBusStopInfo) == 0x000004, "Wrong alignment on FRCRealEventBusStopInfo");
static_assert(sizeof(FRCRealEventBusStopInfo) == 0x000010, "Wrong size on FRCRealEventBusStopInfo");
static_assert(offsetof(FRCRealEventBusStopInfo, bEnable) == 0x000000, "Member 'FRCRealEventBusStopInfo::bEnable' has a wrong offset!");
static_assert(offsetof(FRCRealEventBusStopInfo, Position) == 0x000004, "Member 'FRCRealEventBusStopInfo::Position' has a wrong offset!");

// ScriptStruct RC.RCRealEventMapInfo
// 0x0090 (0x0090 - 0x0000)
struct FRCRealEventMapInfo final
{
public:
	class FName                                   MapID;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveEnable;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCRealEventMapConnectStatus                  BusStopStatus;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        TalkPositionList;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMainQuestAllArea;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubQuestAllArea;                                  // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCRealEventQuestInfo>          MainQuestPositionList;                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCRealEventQuestInfo>          SubQuestStartPositionList;                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCRealEventQuestInfo>          SubQuestEndPositionList;                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCRealEventAreaMoveInfo>       AreaMoveInfoList;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCRealEventAreaMoveInfo>       EnterBuildingInfoList;                             // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCRealEventBusStopInfo>        BusStopInfoList;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMainQuestRootSet;                                 // 0x0088(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCRealEventMapInfo) == 0x000008, "Wrong alignment on FRCRealEventMapInfo");
static_assert(sizeof(FRCRealEventMapInfo) == 0x000090, "Wrong size on FRCRealEventMapInfo");
static_assert(offsetof(FRCRealEventMapInfo, MapID) == 0x000000, "Member 'FRCRealEventMapInfo::MapID' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, bMoveEnable) == 0x000008, "Member 'FRCRealEventMapInfo::bMoveEnable' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, BusStopStatus) == 0x000009, "Member 'FRCRealEventMapInfo::BusStopStatus' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, TalkPositionList) == 0x000010, "Member 'FRCRealEventMapInfo::TalkPositionList' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, bMainQuestAllArea) == 0x000020, "Member 'FRCRealEventMapInfo::bMainQuestAllArea' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, bSubQuestAllArea) == 0x000021, "Member 'FRCRealEventMapInfo::bSubQuestAllArea' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, MainQuestPositionList) == 0x000028, "Member 'FRCRealEventMapInfo::MainQuestPositionList' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, SubQuestStartPositionList) == 0x000038, "Member 'FRCRealEventMapInfo::SubQuestStartPositionList' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, SubQuestEndPositionList) == 0x000048, "Member 'FRCRealEventMapInfo::SubQuestEndPositionList' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, AreaMoveInfoList) == 0x000058, "Member 'FRCRealEventMapInfo::AreaMoveInfoList' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, EnterBuildingInfoList) == 0x000068, "Member 'FRCRealEventMapInfo::EnterBuildingInfoList' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, BusStopInfoList) == 0x000078, "Member 'FRCRealEventMapInfo::BusStopInfoList' has a wrong offset!");
static_assert(offsetof(FRCRealEventMapInfo, bMainQuestRootSet) == 0x000088, "Member 'FRCRealEventMapInfo::bMainQuestRootSet' has a wrong offset!");

// ScriptStruct RC.RCCharaIntegrationIDToFaceID
// 0x0010 (0x0018 - 0x0008)
struct FRCCharaIntegrationIDToFaceID final : public FTableRowBase
{
public:
	class FName                                   SceneID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegrationID;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceID;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharaIntegrationIDToFaceID) == 0x000008, "Wrong alignment on FRCCharaIntegrationIDToFaceID");
static_assert(sizeof(FRCCharaIntegrationIDToFaceID) == 0x000018, "Wrong size on FRCCharaIntegrationIDToFaceID");
static_assert(offsetof(FRCCharaIntegrationIDToFaceID, SceneID) == 0x000008, "Member 'FRCCharaIntegrationIDToFaceID::SceneID' has a wrong offset!");
static_assert(offsetof(FRCCharaIntegrationIDToFaceID, IntegrationID) == 0x000010, "Member 'FRCCharaIntegrationIDToFaceID::IntegrationID' has a wrong offset!");
static_assert(offsetof(FRCCharaIntegrationIDToFaceID, FaceID) == 0x000014, "Member 'FRCCharaIntegrationIDToFaceID::FaceID' has a wrong offset!");

// ScriptStruct RC.RCSoundNovelRowData
// 0x0018 (0x0020 - 0x0008)
struct FRCSoundNovelRowData final : public FTableRowBase
{
public:
	ERCAdvHUDSoundNovelCommand                    Command;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEnd;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlankLine;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastLine;                                         // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayToNext;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSoundNovelRowData) == 0x000008, "Wrong alignment on FRCSoundNovelRowData");
static_assert(sizeof(FRCSoundNovelRowData) == 0x000020, "Wrong size on FRCSoundNovelRowData");
static_assert(offsetof(FRCSoundNovelRowData, Command) == 0x000008, "Member 'FRCSoundNovelRowData::Command' has a wrong offset!");
static_assert(offsetof(FRCSoundNovelRowData, TextID) == 0x00000C, "Member 'FRCSoundNovelRowData::TextID' has a wrong offset!");
static_assert(offsetof(FRCSoundNovelRowData, DelayAtEnd) == 0x000014, "Member 'FRCSoundNovelRowData::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(FRCSoundNovelRowData, bBlankLine) == 0x000018, "Member 'FRCSoundNovelRowData::bBlankLine' has a wrong offset!");
static_assert(offsetof(FRCSoundNovelRowData, bLastLine) == 0x000019, "Member 'FRCSoundNovelRowData::bLastLine' has a wrong offset!");
static_assert(offsetof(FRCSoundNovelRowData, DelayToNext) == 0x00001C, "Member 'FRCSoundNovelRowData::DelayToNext' has a wrong offset!");

// ScriptStruct RC.RCScriptActorFootIKFootSettings
// 0x0014 (0x0014 - 0x0000)
struct FRCScriptActorFootIKFootSettings final
{
public:
	class FName                                   FootBoneName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IdleLandingLocation;                               // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorFootIKFootSettings) == 0x000004, "Wrong alignment on FRCScriptActorFootIKFootSettings");
static_assert(sizeof(FRCScriptActorFootIKFootSettings) == 0x000014, "Wrong size on FRCScriptActorFootIKFootSettings");
static_assert(offsetof(FRCScriptActorFootIKFootSettings, FootBoneName) == 0x000000, "Member 'FRCScriptActorFootIKFootSettings::FootBoneName' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKFootSettings, IdleLandingLocation) == 0x000008, "Member 'FRCScriptActorFootIKFootSettings::IdleLandingLocation' has a wrong offset!");

// ScriptStruct RC.RCSubtitleRowData
// 0x0030 (0x0030 - 0x0000)
struct FRCSubtitleRowData final
{
public:
	int32                                         CharacterNameID;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameSubID;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceCharacterID;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayAtEnd;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToNext;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSubtitleRowData) == 0x000004, "Wrong alignment on FRCSubtitleRowData");
static_assert(sizeof(FRCSubtitleRowData) == 0x000030, "Wrong size on FRCSubtitleRowData");
static_assert(offsetof(FRCSubtitleRowData, CharacterNameID) == 0x000000, "Member 'FRCSubtitleRowData::CharacterNameID' has a wrong offset!");
static_assert(offsetof(FRCSubtitleRowData, CharacterNameSubID) == 0x000004, "Member 'FRCSubtitleRowData::CharacterNameSubID' has a wrong offset!");
static_assert(offsetof(FRCSubtitleRowData, TextID) == 0x000010, "Member 'FRCSubtitleRowData::TextID' has a wrong offset!");
static_assert(offsetof(FRCSubtitleRowData, VoiceCharacterID) == 0x000018, "Member 'FRCSubtitleRowData::VoiceCharacterID' has a wrong offset!");
static_assert(offsetof(FRCSubtitleRowData, VoiceID) == 0x00001C, "Member 'FRCSubtitleRowData::VoiceID' has a wrong offset!");
static_assert(offsetof(FRCSubtitleRowData, DelayAtEnd) == 0x000028, "Member 'FRCSubtitleRowData::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(FRCSubtitleRowData, DelayToNext) == 0x00002C, "Member 'FRCSubtitleRowData::DelayToNext' has a wrong offset!");

// ScriptStruct RC.RCSubtitleData
// 0x0020 (0x0028 - 0x0008)
struct FRCSubtitleData final : public FTableRowBase
{
public:
	TArray<struct FRCSubtitleRowData>             SubtitleDatas;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSubtitleData) == 0x000008, "Wrong alignment on FRCSubtitleData");
static_assert(sizeof(FRCSubtitleData) == 0x000028, "Wrong size on FRCSubtitleData");
static_assert(offsetof(FRCSubtitleData, SubtitleDatas) == 0x000008, "Member 'FRCSubtitleData::SubtitleDatas' has a wrong offset!");

// ScriptStruct RC.RCPlayerMoveInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCPlayerMoveInfo final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCPlayerMoveInfo) == 0x000004, "Wrong alignment on FRCPlayerMoveInfo");
static_assert(sizeof(FRCPlayerMoveInfo) == 0x000010, "Wrong size on FRCPlayerMoveInfo");
static_assert(offsetof(FRCPlayerMoveInfo, Num) == 0x000000, "Member 'FRCPlayerMoveInfo::Num' has a wrong offset!");
static_assert(offsetof(FRCPlayerMoveInfo, Position) == 0x000004, "Member 'FRCPlayerMoveInfo::Position' has a wrong offset!");

// ScriptStruct RC.RCTalkRowData
// 0x0034 (0x0034 - 0x0000)
struct FRCTalkRowData final
{
public:
	ERCAdvHUDTalkWindowType                       WindowType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterFaceID;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFacialID;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceCharacterID;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceCharacterFacialID;                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtEnd;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAtEnd;                                       // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayToNext;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCTalkRowData) == 0x000004, "Wrong alignment on FRCTalkRowData");
static_assert(sizeof(FRCTalkRowData) == 0x000034, "Wrong size on FRCTalkRowData");
static_assert(offsetof(FRCTalkRowData, WindowType) == 0x000000, "Member 'FRCTalkRowData::WindowType' has a wrong offset!");
static_assert(offsetof(FRCTalkRowData, CharacterFaceID) == 0x000004, "Member 'FRCTalkRowData::CharacterFaceID' has a wrong offset!");
static_assert(offsetof(FRCTalkRowData, CharacterFacialID) == 0x000008, "Member 'FRCTalkRowData::CharacterFacialID' has a wrong offset!");
static_assert(offsetof(FRCTalkRowData, TextID) == 0x00000C, "Member 'FRCTalkRowData::TextID' has a wrong offset!");
static_assert(offsetof(FRCTalkRowData, VoiceCharacterID) == 0x000014, "Member 'FRCTalkRowData::VoiceCharacterID' has a wrong offset!");
static_assert(offsetof(FRCTalkRowData, VoiceCharacterFacialID) == 0x000018, "Member 'FRCTalkRowData::VoiceCharacterFacialID' has a wrong offset!");
static_assert(offsetof(FRCTalkRowData, VoiceID) == 0x000020, "Member 'FRCTalkRowData::VoiceID' has a wrong offset!");
static_assert(offsetof(FRCTalkRowData, DelayAtEnd) == 0x000028, "Member 'FRCTalkRowData::DelayAtEnd' has a wrong offset!");
static_assert(offsetof(FRCTalkRowData, bCloseAtEnd) == 0x00002C, "Member 'FRCTalkRowData::bCloseAtEnd' has a wrong offset!");
static_assert(offsetof(FRCTalkRowData, DelayToNext) == 0x000030, "Member 'FRCTalkRowData::DelayToNext' has a wrong offset!");

// ScriptStruct RC.RCTalkData
// 0x0010 (0x0018 - 0x0008)
struct FRCTalkData final : public FTableRowBase
{
public:
	TArray<struct FRCTalkRowData>                 TalkDatas;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCTalkData) == 0x000008, "Wrong alignment on FRCTalkData");
static_assert(sizeof(FRCTalkData) == 0x000018, "Wrong size on FRCTalkData");
static_assert(offsetof(FRCTalkData, TalkDatas) == 0x000008, "Member 'FRCTalkData::TalkDatas' has a wrong offset!");

// ScriptStruct RC.RCParamSubQuestTextTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamSubQuestTextTableRow final : public FTableRowBase
{
public:
	class FName                                   OrderStart;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OrderComplete;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSubQuestTextTableRow) == 0x000008, "Wrong alignment on FRCParamSubQuestTextTableRow");
static_assert(sizeof(FRCParamSubQuestTextTableRow) == 0x000018, "Wrong size on FRCParamSubQuestTextTableRow");
static_assert(offsetof(FRCParamSubQuestTextTableRow, OrderStart) == 0x000008, "Member 'FRCParamSubQuestTextTableRow::OrderStart' has a wrong offset!");
static_assert(offsetof(FRCParamSubQuestTextTableRow, OrderComplete) == 0x000010, "Member 'FRCParamSubQuestTextTableRow::OrderComplete' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDTalkTextData
// 0x0030 (0x0030 - 0x0000)
struct FRCAdvHUDTalkTextData final
{
public:
	int32                                         CharacterNameID;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameSubID;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFaceID;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFacialID;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character3DID;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Character3DFacialID;                               // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDTalkTextData) == 0x000004, "Wrong alignment on FRCAdvHUDTalkTextData");
static_assert(sizeof(FRCAdvHUDTalkTextData) == 0x000030, "Wrong size on FRCAdvHUDTalkTextData");
static_assert(offsetof(FRCAdvHUDTalkTextData, CharacterNameID) == 0x000000, "Member 'FRCAdvHUDTalkTextData::CharacterNameID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkTextData, CharacterNameSubID) == 0x000004, "Member 'FRCAdvHUDTalkTextData::CharacterNameSubID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkTextData, CharacterFaceID) == 0x000008, "Member 'FRCAdvHUDTalkTextData::CharacterFaceID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkTextData, CharacterFacialID) == 0x00000C, "Member 'FRCAdvHUDTalkTextData::CharacterFacialID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkTextData, TextID) == 0x000010, "Member 'FRCAdvHUDTalkTextData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkTextData, Character3DID) == 0x000018, "Member 'FRCAdvHUDTalkTextData::Character3DID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkTextData, Character3DFacialID) == 0x00001C, "Member 'FRCAdvHUDTalkTextData::Character3DFacialID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkTextData, VoiceID) == 0x000024, "Member 'FRCAdvHUDTalkTextData::VoiceID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkTextData, Delay) == 0x00002C, "Member 'FRCAdvHUDTalkTextData::Delay' has a wrong offset!");

// ScriptStruct RC.SCScriptDataTableRow
// 0x0020 (0x0028 - 0x0008)
struct FSCScriptDataTableRow final : public FTableRowBase
{
public:
	int32                                         ScriptLineNum;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommandName;                                       // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ParameterList;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCScriptDataTableRow) == 0x000008, "Wrong alignment on FSCScriptDataTableRow");
static_assert(sizeof(FSCScriptDataTableRow) == 0x000028, "Wrong size on FSCScriptDataTableRow");
static_assert(offsetof(FSCScriptDataTableRow, ScriptLineNum) == 0x000008, "Member 'FSCScriptDataTableRow::ScriptLineNum' has a wrong offset!");
static_assert(offsetof(FSCScriptDataTableRow, CommandName) == 0x00000C, "Member 'FSCScriptDataTableRow::CommandName' has a wrong offset!");
static_assert(offsetof(FSCScriptDataTableRow, ParameterList) == 0x000018, "Member 'FSCScriptDataTableRow::ParameterList' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDAccessableCharacterData
// 0x0018 (0x0018 - 0x0000)
struct FRCAdvHUDAccessableCharacterData final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCPawnRender*                          NPC;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCCharacterRender*                     Character;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDAccessableCharacterData) == 0x000008, "Wrong alignment on FRCAdvHUDAccessableCharacterData");
static_assert(sizeof(FRCAdvHUDAccessableCharacterData) == 0x000018, "Wrong size on FRCAdvHUDAccessableCharacterData");
static_assert(offsetof(FRCAdvHUDAccessableCharacterData, Pawn) == 0x000000, "Member 'FRCAdvHUDAccessableCharacterData::Pawn' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableCharacterData, NPC) == 0x000008, "Member 'FRCAdvHUDAccessableCharacterData::NPC' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDAccessableCharacterData, Character) == 0x000010, "Member 'FRCAdvHUDAccessableCharacterData::Character' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDEnterBuildingWidgetSet
// 0x0008 (0x0008 - 0x0000)
struct FRCAdvHUDEnterBuildingWidgetSet final
{
public:
	class URCUiIntJoint*                          Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDEnterBuildingWidgetSet) == 0x000008, "Wrong alignment on FRCAdvHUDEnterBuildingWidgetSet");
static_assert(sizeof(FRCAdvHUDEnterBuildingWidgetSet) == 0x000008, "Wrong size on FRCAdvHUDEnterBuildingWidgetSet");
static_assert(offsetof(FRCAdvHUDEnterBuildingWidgetSet, Icon) == 0x000000, "Member 'FRCAdvHUDEnterBuildingWidgetSet::Icon' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDEnterBuildingData
// 0x0020 (0x0070 - 0x0050)
struct FRCAdvHUDEnterBuildingData final : public FRCAdvHUDInteractIconData
{
public:
	struct FRCAdvHUDAccessableCheckActorData      CheckActorData;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAdvHUDEnterBuildingWidgetSet        WidgetSet;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooksLikeUsable;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDEnterBuildingData) == 0x000008, "Wrong alignment on FRCAdvHUDEnterBuildingData");
static_assert(sizeof(FRCAdvHUDEnterBuildingData) == 0x000070, "Wrong size on FRCAdvHUDEnterBuildingData");
static_assert(offsetof(FRCAdvHUDEnterBuildingData, CheckActorData) == 0x000050, "Member 'FRCAdvHUDEnterBuildingData::CheckActorData' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDEnterBuildingData, WidgetSet) == 0x000058, "Member 'FRCAdvHUDEnterBuildingData::WidgetSet' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDEnterBuildingData, TextID) == 0x000060, "Member 'FRCAdvHUDEnterBuildingData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDEnterBuildingData, bLooksLikeUsable) == 0x000068, "Member 'FRCAdvHUDEnterBuildingData::bLooksLikeUsable' has a wrong offset!");

// ScriptStruct RC.RCAnimInstTurnStateSequenceData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRCAnimInstTurnStateSequenceData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAnimInstTurnStateSequenceData) == 0x000008, "Wrong alignment on FRCAnimInstTurnStateSequenceData");
static_assert(sizeof(FRCAnimInstTurnStateSequenceData) == 0x000010, "Wrong size on FRCAnimInstTurnStateSequenceData");

// ScriptStruct RC.RCNazoLevelSettings
// 0x0038 (0x0038 - 0x0000)
struct FRCNazoLevelSettings final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoad;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoLevelSettings) == 0x000008, "Wrong alignment on FRCNazoLevelSettings");
static_assert(sizeof(FRCNazoLevelSettings) == 0x000038, "Wrong size on FRCNazoLevelSettings");
static_assert(offsetof(FRCNazoLevelSettings, LevelName) == 0x000000, "Member 'FRCNazoLevelSettings::LevelName' has a wrong offset!");
static_assert(offsetof(FRCNazoLevelSettings, Level) == 0x000008, "Member 'FRCNazoLevelSettings::Level' has a wrong offset!");
static_assert(offsetof(FRCNazoLevelSettings, bLoad) == 0x000030, "Member 'FRCNazoLevelSettings::bLoad' has a wrong offset!");
static_assert(offsetof(FRCNazoLevelSettings, bVisibility) == 0x000031, "Member 'FRCNazoLevelSettings::bVisibility' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopRandomTileSettings
// 0x0010 (0x0010 - 0x0000)
struct FRCNazoMoveLoopRandomTileSettings final
{
public:
	TArray<struct FRCNazoLevelSettings>           LevelSettingsArray;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMoveLoopRandomTileSettings) == 0x000008, "Wrong alignment on FRCNazoMoveLoopRandomTileSettings");
static_assert(sizeof(FRCNazoMoveLoopRandomTileSettings) == 0x000010, "Wrong size on FRCNazoMoveLoopRandomTileSettings");
static_assert(offsetof(FRCNazoMoveLoopRandomTileSettings, LevelSettingsArray) == 0x000000, "Member 'FRCNazoMoveLoopRandomTileSettings::LevelSettingsArray' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLevelSettingsBase
// 0x0060 (0x0060 - 0x0000)
struct FRCNazoMoveLoopLevelSettingsBase
{
public:
	TArray<struct FRCNazoLevelSettings>           DefaultTileLevelSettingsArray;                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FRCNazoMoveLoopRandomTileSettings> RandomTileSettingsMap;                             // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMoveLoopLevelSettingsBase) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLevelSettingsBase");
static_assert(sizeof(FRCNazoMoveLoopLevelSettingsBase) == 0x000060, "Wrong size on FRCNazoMoveLoopLevelSettingsBase");
static_assert(offsetof(FRCNazoMoveLoopLevelSettingsBase, DefaultTileLevelSettingsArray) == 0x000000, "Member 'FRCNazoMoveLoopLevelSettingsBase::DefaultTileLevelSettingsArray' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLevelSettingsBase, RandomTileSettingsMap) == 0x000010, "Member 'FRCNazoMoveLoopLevelSettingsBase::RandomTileSettingsMap' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDChangeAreaWidgetSet
// 0x0008 (0x0008 - 0x0000)
struct FRCAdvHUDChangeAreaWidgetSet final
{
public:
	class URCUiIntArea*                           Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDChangeAreaWidgetSet) == 0x000008, "Wrong alignment on FRCAdvHUDChangeAreaWidgetSet");
static_assert(sizeof(FRCAdvHUDChangeAreaWidgetSet) == 0x000008, "Wrong size on FRCAdvHUDChangeAreaWidgetSet");
static_assert(offsetof(FRCAdvHUDChangeAreaWidgetSet, Icon) == 0x000000, "Member 'FRCAdvHUDChangeAreaWidgetSet::Icon' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDChangeAreaData
// 0x0020 (0x0070 - 0x0050)
struct FRCAdvHUDChangeAreaData final : public FRCAdvHUDInteractIconData
{
public:
	struct FRCAdvHUDAccessableCheckActorData      CheckActorData;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAdvHUDChangeAreaWidgetSet           WidgetSet;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooksLikeUsable;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDChangeAreaData) == 0x000008, "Wrong alignment on FRCAdvHUDChangeAreaData");
static_assert(sizeof(FRCAdvHUDChangeAreaData) == 0x000070, "Wrong size on FRCAdvHUDChangeAreaData");
static_assert(offsetof(FRCAdvHUDChangeAreaData, CheckActorData) == 0x000050, "Member 'FRCAdvHUDChangeAreaData::CheckActorData' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDChangeAreaData, WidgetSet) == 0x000058, "Member 'FRCAdvHUDChangeAreaData::WidgetSet' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDChangeAreaData, TextID) == 0x000060, "Member 'FRCAdvHUDChangeAreaData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDChangeAreaData, bLooksLikeUsable) == 0x000068, "Member 'FRCAdvHUDChangeAreaData::bLooksLikeUsable' has a wrong offset!");

// ScriptStruct RC.RCNazoTileSettingsBG
// 0x0020 (0x0028 - 0x0008)
struct FRCNazoTileSettingsBG final : public FTableRowBase
{
public:
	class FName                                   TileID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoTileSettingsBG) == 0x000008, "Wrong alignment on FRCNazoTileSettingsBG");
static_assert(sizeof(FRCNazoTileSettingsBG) == 0x000028, "Wrong size on FRCNazoTileSettingsBG");
static_assert(offsetof(FRCNazoTileSettingsBG, TileID) == 0x000008, "Member 'FRCNazoTileSettingsBG::TileID' has a wrong offset!");
static_assert(offsetof(FRCNazoTileSettingsBG, StartLocation) == 0x000010, "Member 'FRCNazoTileSettingsBG::StartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoTileSettingsBG, EndLocation) == 0x00001C, "Member 'FRCNazoTileSettingsBG::EndLocation' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchPointer_MouseControlData_Mouse
// 0x003C (0x003C - 0x0000)
struct FRCAdvHUDResearchPointer_MouseControlData_Mouse final
{
public:
	ERCAdvHUDResearchPointerMouse_MoveType        MoveType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Position;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PrevPosition;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MoveDistanceVector;                                // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDistance;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRate;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiplyByViewportScale;                          // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveDistanceMinAtOff;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDistanceMinAtOn;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToJudgeNotMove;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToTurnOff;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTimeSinceStopped;                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDResearchPointer_MouseControlData_Mouse) == 0x000004, "Wrong alignment on FRCAdvHUDResearchPointer_MouseControlData_Mouse");
static_assert(sizeof(FRCAdvHUDResearchPointer_MouseControlData_Mouse) == 0x00003C, "Wrong size on FRCAdvHUDResearchPointer_MouseControlData_Mouse");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, MoveType) == 0x000000, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::MoveType' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, Position) == 0x000004, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::Position' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, PrevPosition) == 0x00000C, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::PrevPosition' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, MoveDistanceVector) == 0x000014, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::MoveDistanceVector' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, MoveDistance) == 0x00001C, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::MoveDistance' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, MoveRate) == 0x000020, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::MoveRate' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, bMultiplyByViewportScale) == 0x000024, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::bMultiplyByViewportScale' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, MoveDistanceMinAtOff) == 0x000028, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::MoveDistanceMinAtOff' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, MoveDistanceMinAtOn) == 0x00002C, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::MoveDistanceMinAtOn' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, TimeToJudgeNotMove) == 0x000030, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::TimeToJudgeNotMove' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, TimeToTurnOff) == 0x000034, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::TimeToTurnOff' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Mouse, ElapsedTimeSinceStopped) == 0x000038, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Mouse::ElapsedTimeSinceStopped' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchPointer_MouseControlData_Pointer
// 0x004C (0x004C - 0x0000)
struct FRCAdvHUDResearchPointer_MouseControlData_Pointer final
{
public:
	bool                                          bFreeMove;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FreeMoveRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFreeMoveMultiplyByViewportScale;                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToTurnMouseOffForFreeMove;                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusScaleWhenTouching;                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusScaleWhenLeaving;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DrawPosition;                                      // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompletelyOnScreen;                               // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PositionLimitOffset;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PositionLimitMin;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PositionLimitMax;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdhereToMarker;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPointerCircle;                                // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPointerLimit;                                 // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDResearchPointer_MouseControlData_Pointer) == 0x000004, "Wrong alignment on FRCAdvHUDResearchPointer_MouseControlData_Pointer");
static_assert(sizeof(FRCAdvHUDResearchPointer_MouseControlData_Pointer) == 0x00004C, "Wrong size on FRCAdvHUDResearchPointer_MouseControlData_Pointer");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, bFreeMove) == 0x000000, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::bFreeMove' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, FreeMoveRate) == 0x000004, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::FreeMoveRate' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, bFreeMoveMultiplyByViewportScale) == 0x000008, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::bFreeMoveMultiplyByViewportScale' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, TimeToTurnMouseOffForFreeMove) == 0x00000C, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::TimeToTurnMouseOffForFreeMove' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, Radius) == 0x000010, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::Radius' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, RadiusScaleWhenTouching) == 0x000014, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::RadiusScaleWhenTouching' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, RadiusScaleWhenLeaving) == 0x000018, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::RadiusScaleWhenLeaving' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, Position) == 0x00001C, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::Position' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, DrawPosition) == 0x000024, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::DrawPosition' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, bCompletelyOnScreen) == 0x00002C, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::bCompletelyOnScreen' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, PositionLimitOffset) == 0x000030, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::PositionLimitOffset' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, PositionLimitMin) == 0x000038, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::PositionLimitMin' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, PositionLimitMax) == 0x000040, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::PositionLimitMax' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, bAdhereToMarker) == 0x000048, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::bAdhereToMarker' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, bDrawPointerCircle) == 0x000049, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::bDrawPointerCircle' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Pointer, bDrawPointerLimit) == 0x00004A, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Pointer::bDrawPointerLimit' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchPointer_MouseControlData_Marker
// 0x000C (0x000C - 0x0000)
struct FRCAdvHUDResearchPointer_MouseControlData_Marker final
{
public:
	bool                                          bCircle;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadiusScale;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawMarkerCircle;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDResearchPointer_MouseControlData_Marker) == 0x000004, "Wrong alignment on FRCAdvHUDResearchPointer_MouseControlData_Marker");
static_assert(sizeof(FRCAdvHUDResearchPointer_MouseControlData_Marker) == 0x00000C, "Wrong size on FRCAdvHUDResearchPointer_MouseControlData_Marker");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Marker, bCircle) == 0x000000, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Marker::bCircle' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Marker, RadiusScale) == 0x000004, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Marker::RadiusScale' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData_Marker, bDrawMarkerCircle) == 0x000008, "Member 'FRCAdvHUDResearchPointer_MouseControlData_Marker::bDrawMarkerCircle' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchPointer_MouseControlData
// 0x009C (0x009C - 0x0000)
struct FRCAdvHUDResearchPointer_MouseControlData final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDResearchPointerMouse_Mode            MouseMode;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAdvHUDResearchPointer_MouseControlData_Mouse Mouse;                                             // 0x0004(0x003C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAdvHUDResearchPointer_MouseControlData_Pointer Pointer;                                           // 0x0040(0x004C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAdvHUDResearchPointer_MouseControlData_Marker Marker;                                            // 0x008C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ERCAdvHUDResearchPointerMouse_InputType       KeyInputType;                                      // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDResearchPointerMouse_ModeOffType     ModeOffType;                                       // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDResearchPointer_MouseControlData) == 0x000004, "Wrong alignment on FRCAdvHUDResearchPointer_MouseControlData");
static_assert(sizeof(FRCAdvHUDResearchPointer_MouseControlData) == 0x00009C, "Wrong size on FRCAdvHUDResearchPointer_MouseControlData");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData, bEnable) == 0x000000, "Member 'FRCAdvHUDResearchPointer_MouseControlData::bEnable' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData, MouseMode) == 0x000001, "Member 'FRCAdvHUDResearchPointer_MouseControlData::MouseMode' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData, Mouse) == 0x000004, "Member 'FRCAdvHUDResearchPointer_MouseControlData::Mouse' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData, Pointer) == 0x000040, "Member 'FRCAdvHUDResearchPointer_MouseControlData::Pointer' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData, Marker) == 0x00008C, "Member 'FRCAdvHUDResearchPointer_MouseControlData::Marker' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData, KeyInputType) == 0x000098, "Member 'FRCAdvHUDResearchPointer_MouseControlData::KeyInputType' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchPointer_MouseControlData, ModeOffType) == 0x000099, "Member 'FRCAdvHUDResearchPointer_MouseControlData::ModeOffType' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLevelSettings
// 0x0000 (0x0060 - 0x0060)
struct FRCNazoMoveLoopLevelSettings final : public FRCNazoMoveLoopLevelSettingsBase
{
};
static_assert(alignof(FRCNazoMoveLoopLevelSettings) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLevelSettings");
static_assert(sizeof(FRCNazoMoveLoopLevelSettings) == 0x000060, "Wrong size on FRCNazoMoveLoopLevelSettings");

// ScriptStruct RC.RCParamNzFinaleDetectiveBackgroundImageTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamNzFinaleDetectiveBackgroundImageTableRow final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionID;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PieceImagePath;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzFinaleDetectiveBackgroundImageTableRow) == 0x000008, "Wrong alignment on FRCParamNzFinaleDetectiveBackgroundImageTableRow");
static_assert(sizeof(FRCParamNzFinaleDetectiveBackgroundImageTableRow) == 0x000030, "Wrong size on FRCParamNzFinaleDetectiveBackgroundImageTableRow");
static_assert(offsetof(FRCParamNzFinaleDetectiveBackgroundImageTableRow, ID) == 0x000008, "Member 'FRCParamNzFinaleDetectiveBackgroundImageTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleDetectiveBackgroundImageTableRow, SceneID) == 0x000010, "Member 'FRCParamNzFinaleDetectiveBackgroundImageTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleDetectiveBackgroundImageTableRow, SectionID) == 0x000018, "Member 'FRCParamNzFinaleDetectiveBackgroundImageTableRow::SectionID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleDetectiveBackgroundImageTableRow, PieceImagePath) == 0x000020, "Member 'FRCParamNzFinaleDetectiveBackgroundImageTableRow::PieceImagePath' has a wrong offset!");

// ScriptStruct RC.RCNzFinaleGameBackgroundData
// 0x0010 (0x0010 - 0x0000)
struct FRCNzFinaleGameBackgroundData final
{
public:
	TArray<struct FRCParamNzFinaleDetectiveBackgroundImageTableRow> dataList;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNzFinaleGameBackgroundData) == 0x000008, "Wrong alignment on FRCNzFinaleGameBackgroundData");
static_assert(sizeof(FRCNzFinaleGameBackgroundData) == 0x000010, "Wrong size on FRCNzFinaleGameBackgroundData");
static_assert(offsetof(FRCNzFinaleGameBackgroundData, dataList) == 0x000000, "Member 'FRCNzFinaleGameBackgroundData::dataList' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchMarkerWidgetSet
// 0x0020 (0x0020 - 0x0000)
struct FRCAdvHUDResearchMarkerWidgetSet final
{
public:
	class URCReUiChousaTargetName*                MarkerName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCReUiChousaTargetName*                MarkerName2;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCReUiChousaTarget*                    Marker;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCWidgetActor*                         MarkerActor;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDResearchMarkerWidgetSet) == 0x000008, "Wrong alignment on FRCAdvHUDResearchMarkerWidgetSet");
static_assert(sizeof(FRCAdvHUDResearchMarkerWidgetSet) == 0x000020, "Wrong size on FRCAdvHUDResearchMarkerWidgetSet");
static_assert(offsetof(FRCAdvHUDResearchMarkerWidgetSet, MarkerName) == 0x000000, "Member 'FRCAdvHUDResearchMarkerWidgetSet::MarkerName' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerWidgetSet, MarkerName2) == 0x000008, "Member 'FRCAdvHUDResearchMarkerWidgetSet::MarkerName2' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerWidgetSet, Marker) == 0x000010, "Member 'FRCAdvHUDResearchMarkerWidgetSet::Marker' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerWidgetSet, MarkerActor) == 0x000018, "Member 'FRCAdvHUDResearchMarkerWidgetSet::MarkerActor' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchMarkerData
// 0x0078 (0x00C0 - 0x0048)
struct FRCAdvHUDResearchMarkerData final : public FRCAdvHUDAccessableWidgetBaseData
{
public:
	struct FRCAdvHUDAccessableCheckActorData      CheckActorData;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAdvHUDResearchMarkerWidgetSet       WidgetSet;                                         // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDraw;                                             // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNameDraw;                                         // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x007C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position2D;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetNamePosition;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamePosition;                                      // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NameSize;                                          // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveName;                                         // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResearched;                                       // 0x00A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMarkerInViewport;                                 // 0x00A6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDWidgetState                          State3D;                                           // 0x00A7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale3D;                                           // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetail;                                           // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDResearchMarkerData) == 0x000008, "Wrong alignment on FRCAdvHUDResearchMarkerData");
static_assert(sizeof(FRCAdvHUDResearchMarkerData) == 0x0000C0, "Wrong size on FRCAdvHUDResearchMarkerData");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, CheckActorData) == 0x000048, "Member 'FRCAdvHUDResearchMarkerData::CheckActorData' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, WidgetSet) == 0x000050, "Member 'FRCAdvHUDResearchMarkerData::WidgetSet' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, TextID) == 0x000070, "Member 'FRCAdvHUDResearchMarkerData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, bDraw) == 0x000078, "Member 'FRCAdvHUDResearchMarkerData::bDraw' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, bNameDraw) == 0x000079, "Member 'FRCAdvHUDResearchMarkerData::bNameDraw' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, Position) == 0x00007C, "Member 'FRCAdvHUDResearchMarkerData::Position' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, Position2D) == 0x000088, "Member 'FRCAdvHUDResearchMarkerData::Position2D' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, bSetNamePosition) == 0x000090, "Member 'FRCAdvHUDResearchMarkerData::bSetNamePosition' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, NamePosition) == 0x000094, "Member 'FRCAdvHUDResearchMarkerData::NamePosition' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, NameSize) == 0x00009C, "Member 'FRCAdvHUDResearchMarkerData::NameSize' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, bMoveName) == 0x0000A4, "Member 'FRCAdvHUDResearchMarkerData::bMoveName' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, bResearched) == 0x0000A5, "Member 'FRCAdvHUDResearchMarkerData::bResearched' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, bMarkerInViewport) == 0x0000A6, "Member 'FRCAdvHUDResearchMarkerData::bMarkerInViewport' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, State3D) == 0x0000A7, "Member 'FRCAdvHUDResearchMarkerData::State3D' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, Scale3D) == 0x0000A8, "Member 'FRCAdvHUDResearchMarkerData::Scale3D' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, Radius) == 0x0000AC, "Member 'FRCAdvHUDResearchMarkerData::Radius' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerData, bDetail) == 0x0000B0, "Member 'FRCAdvHUDResearchMarkerData::bDetail' has a wrong offset!");

// ScriptStruct RC.RCNazoLoopLSATileData
// 0x0068 (0x0068 - 0x0000)
struct FRCNazoLoopLSATileData
{
public:
	class FName                                   TileID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class AActor*>              ActorMap;                                          // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoLoopLSATileData) == 0x000008, "Wrong alignment on FRCNazoLoopLSATileData");
static_assert(sizeof(FRCNazoLoopLSATileData) == 0x000068, "Wrong size on FRCNazoLoopLSATileData");
static_assert(offsetof(FRCNazoLoopLSATileData, TileID) == 0x000000, "Member 'FRCNazoLoopLSATileData::TileID' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSATileData, ActorMap) == 0x000008, "Member 'FRCNazoLoopLSATileData::ActorMap' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSATileData, Location) == 0x000058, "Member 'FRCNazoLoopLSATileData::Location' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchMarkerSetData
// 0x0020 (0x0020 - 0x0000)
struct FRCAdvHUDResearchMarkerSetData final
{
public:
	class ARCCheckActor*                          CheckActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDraw;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNameDraw;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResearched;                                       // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale3D;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccessable;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDResearchMarkerSetData) == 0x000008, "Wrong alignment on FRCAdvHUDResearchMarkerSetData");
static_assert(sizeof(FRCAdvHUDResearchMarkerSetData) == 0x000020, "Wrong size on FRCAdvHUDResearchMarkerSetData");
static_assert(offsetof(FRCAdvHUDResearchMarkerSetData, CheckActor) == 0x000000, "Member 'FRCAdvHUDResearchMarkerSetData::CheckActor' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerSetData, TextID) == 0x000008, "Member 'FRCAdvHUDResearchMarkerSetData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerSetData, bDraw) == 0x000010, "Member 'FRCAdvHUDResearchMarkerSetData::bDraw' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerSetData, bNameDraw) == 0x000011, "Member 'FRCAdvHUDResearchMarkerSetData::bNameDraw' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerSetData, bResearched) == 0x000012, "Member 'FRCAdvHUDResearchMarkerSetData::bResearched' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerSetData, Scale3D) == 0x000014, "Member 'FRCAdvHUDResearchMarkerSetData::Scale3D' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchMarkerSetData, bAccessable) == 0x000018, "Member 'FRCAdvHUDResearchMarkerSetData::bAccessable' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchDetailMarkerData
// 0x0038 (0x0038 - 0x0000)
struct FRCAdvHUDResearchDetailMarkerData final
{
public:
	class ARCCheckActor*                          CheckActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResearched;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusOnScreen;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale3D;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetPosition;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Position2D;                                        // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithinInputRange;                                 // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDResearchDetailMarkerData) == 0x000008, "Wrong alignment on FRCAdvHUDResearchDetailMarkerData");
static_assert(sizeof(FRCAdvHUDResearchDetailMarkerData) == 0x000038, "Wrong size on FRCAdvHUDResearchDetailMarkerData");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, CheckActor) == 0x000000, "Member 'FRCAdvHUDResearchDetailMarkerData::CheckActor' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, TextID) == 0x000008, "Member 'FRCAdvHUDResearchDetailMarkerData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, bResearched) == 0x000010, "Member 'FRCAdvHUDResearchDetailMarkerData::bResearched' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, Radius) == 0x000014, "Member 'FRCAdvHUDResearchDetailMarkerData::Radius' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, RadiusOnScreen) == 0x000018, "Member 'FRCAdvHUDResearchDetailMarkerData::RadiusOnScreen' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, Scale3D) == 0x00001C, "Member 'FRCAdvHUDResearchDetailMarkerData::Scale3D' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, bSetPosition) == 0x000020, "Member 'FRCAdvHUDResearchDetailMarkerData::bSetPosition' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, Position2D) == 0x000024, "Member 'FRCAdvHUDResearchDetailMarkerData::Position2D' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, Angle) == 0x00002C, "Member 'FRCAdvHUDResearchDetailMarkerData::Angle' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, Distance) == 0x000030, "Member 'FRCAdvHUDResearchDetailMarkerData::Distance' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailMarkerData, bWithinInputRange) == 0x000034, "Member 'FRCAdvHUDResearchDetailMarkerData::bWithinInputRange' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchDetailData
// 0x0078 (0x0078 - 0x0000)
struct FRCAdvHUDResearchDetailData final
{
public:
	TArray<struct FRCAdvHUDResearchDetailMarkerData> MarkerDatas;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              InputScreenPosition;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InputMove;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InputDirection;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartMarkerIndex;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstMove;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectMarkerIndex;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastSelectMarkerIndex;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MoveableMarkerIndex;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveWaitTime;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTimeSinceMove;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PointerPosition;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPointerStartPosition;                             // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSelectFlag;                                   // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutoSelectMarkerIndex;                             // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDResearchDetailData) == 0x000008, "Wrong alignment on FRCAdvHUDResearchDetailData");
static_assert(sizeof(FRCAdvHUDResearchDetailData) == 0x000078, "Wrong size on FRCAdvHUDResearchDetailData");
static_assert(offsetof(FRCAdvHUDResearchDetailData, MarkerDatas) == 0x000000, "Member 'FRCAdvHUDResearchDetailData::MarkerDatas' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, InputScreenPosition) == 0x000010, "Member 'FRCAdvHUDResearchDetailData::InputScreenPosition' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, InputMove) == 0x000018, "Member 'FRCAdvHUDResearchDetailData::InputMove' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, InputDirection) == 0x000020, "Member 'FRCAdvHUDResearchDetailData::InputDirection' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, StartMarkerIndex) == 0x000028, "Member 'FRCAdvHUDResearchDetailData::StartMarkerIndex' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, bFirstMove) == 0x00002C, "Member 'FRCAdvHUDResearchDetailData::bFirstMove' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, SelectMarkerIndex) == 0x000030, "Member 'FRCAdvHUDResearchDetailData::SelectMarkerIndex' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, LastSelectMarkerIndex) == 0x000040, "Member 'FRCAdvHUDResearchDetailData::LastSelectMarkerIndex' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, MoveableMarkerIndex) == 0x000050, "Member 'FRCAdvHUDResearchDetailData::MoveableMarkerIndex' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, MoveWaitTime) == 0x000060, "Member 'FRCAdvHUDResearchDetailData::MoveWaitTime' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, ElapsedTimeSinceMove) == 0x000064, "Member 'FRCAdvHUDResearchDetailData::ElapsedTimeSinceMove' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, PointerPosition) == 0x000068, "Member 'FRCAdvHUDResearchDetailData::PointerPosition' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, bPointerStartPosition) == 0x000070, "Member 'FRCAdvHUDResearchDetailData::bPointerStartPosition' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, bAutoSelectFlag) == 0x000071, "Member 'FRCAdvHUDResearchDetailData::bAutoSelectFlag' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailData, AutoSelectMarkerIndex) == 0x000074, "Member 'FRCAdvHUDResearchDetailData::AutoSelectMarkerIndex' has a wrong offset!");

// ScriptStruct RC.RCNazoSceneSettingsBase
// 0x0018 (0x0020 - 0x0008)
struct FRCNazoSceneSettingsBase : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCNazoLevelSettings>           LevelSettingsArray;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoSceneSettingsBase) == 0x000008, "Wrong alignment on FRCNazoSceneSettingsBase");
static_assert(sizeof(FRCNazoSceneSettingsBase) == 0x000020, "Wrong size on FRCNazoSceneSettingsBase");
static_assert(offsetof(FRCNazoSceneSettingsBase, MapID) == 0x000008, "Member 'FRCNazoSceneSettingsBase::MapID' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsBase, LevelSettingsArray) == 0x000010, "Member 'FRCNazoSceneSettingsBase::LevelSettingsArray' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchDetailStartMarkerData
// 0x0018 (0x0018 - 0x0000)
struct FRCAdvHUDResearchDetailStartMarkerData final
{
public:
	class ARCCheckActor*                          CheckActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResearched;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale3D;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDResearchDetailStartMarkerData) == 0x000008, "Wrong alignment on FRCAdvHUDResearchDetailStartMarkerData");
static_assert(sizeof(FRCAdvHUDResearchDetailStartMarkerData) == 0x000018, "Wrong size on FRCAdvHUDResearchDetailStartMarkerData");
static_assert(offsetof(FRCAdvHUDResearchDetailStartMarkerData, CheckActor) == 0x000000, "Member 'FRCAdvHUDResearchDetailStartMarkerData::CheckActor' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailStartMarkerData, TextID) == 0x000008, "Member 'FRCAdvHUDResearchDetailStartMarkerData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailStartMarkerData, bResearched) == 0x000010, "Member 'FRCAdvHUDResearchDetailStartMarkerData::bResearched' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailStartMarkerData, Scale3D) == 0x000014, "Member 'FRCAdvHUDResearchDetailStartMarkerData::Scale3D' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDResearchDetailStartData
// 0x0020 (0x0020 - 0x0000)
struct FRCAdvHUDResearchDetailStartData final
{
public:
	TArray<struct FRCAdvHUDResearchDetailStartMarkerData> MarkerDatas;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DefaultMarkerIndex;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Marker3DScale;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestionTextID;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDResearchDetailStartData) == 0x000008, "Wrong alignment on FRCAdvHUDResearchDetailStartData");
static_assert(sizeof(FRCAdvHUDResearchDetailStartData) == 0x000020, "Wrong size on FRCAdvHUDResearchDetailStartData");
static_assert(offsetof(FRCAdvHUDResearchDetailStartData, MarkerDatas) == 0x000000, "Member 'FRCAdvHUDResearchDetailStartData::MarkerDatas' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailStartData, DefaultMarkerIndex) == 0x000010, "Member 'FRCAdvHUDResearchDetailStartData::DefaultMarkerIndex' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailStartData, Marker3DScale) == 0x000014, "Member 'FRCAdvHUDResearchDetailStartData::Marker3DScale' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDResearchDetailStartData, QuestionTextID) == 0x000018, "Member 'FRCAdvHUDResearchDetailStartData::QuestionTextID' has a wrong offset!");

// ScriptStruct RC.RCNazoMotionViewerMotionPartData
// 0x0010 (0x0010 - 0x0000)
struct FRCNazoMotionViewerMotionPartData final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeNextTime;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMotionViewerMotionPartData) == 0x000004, "Wrong alignment on FRCNazoMotionViewerMotionPartData");
static_assert(sizeof(FRCNazoMotionViewerMotionPartData) == 0x000010, "Wrong size on FRCNazoMotionViewerMotionPartData");
static_assert(offsetof(FRCNazoMotionViewerMotionPartData, MotionName) == 0x000000, "Member 'FRCNazoMotionViewerMotionPartData::MotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoMotionViewerMotionPartData, PlayRate) == 0x000008, "Member 'FRCNazoMotionViewerMotionPartData::PlayRate' has a wrong offset!");
static_assert(offsetof(FRCNazoMotionViewerMotionPartData, ChangeNextTime) == 0x00000C, "Member 'FRCNazoMotionViewerMotionPartData::ChangeNextTime' has a wrong offset!");

// ScriptStruct RC.RCReHUDSelectData
// 0x000C (0x000C - 0x0000)
struct FRCReHUDSelectData final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCheck;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckMark;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCReHUDSelectData) == 0x000004, "Wrong alignment on FRCReHUDSelectData");
static_assert(sizeof(FRCReHUDSelectData) == 0x00000C, "Wrong size on FRCReHUDSelectData");
static_assert(offsetof(FRCReHUDSelectData, TextID) == 0x000000, "Member 'FRCReHUDSelectData::TextID' has a wrong offset!");
static_assert(offsetof(FRCReHUDSelectData, bAutoCheck) == 0x000008, "Member 'FRCReHUDSelectData::bAutoCheck' has a wrong offset!");
static_assert(offsetof(FRCReHUDSelectData, bCheckMark) == 0x000009, "Member 'FRCReHUDSelectData::bCheckMark' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterAppearData
// 0x0090 (0x0090 - 0x0000)
struct FRCNazoBattleRebuttalLetterAppearData final
{
public:
	ERCNazoBattleRebuttalLetterPosition           Position;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeft;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         AttackLineEffect;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackLineEffectLifeTime;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 RepelledTargetComp;                                // 0x0060(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RepelledTargetSocketName;                          // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RepelledKaijinTag;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreventSpeed;                                      // 0x0078(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleRebuttalLetterAppearData) == 0x000010, "Wrong alignment on FRCNazoBattleRebuttalLetterAppearData");
static_assert(sizeof(FRCNazoBattleRebuttalLetterAppearData) == 0x000090, "Wrong size on FRCNazoBattleRebuttalLetterAppearData");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, Position) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterAppearData::Position' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, bLeft) == 0x000001, "Member 'FRCNazoBattleRebuttalLetterAppearData::bLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, StartTransform) == 0x000010, "Member 'FRCNazoBattleRebuttalLetterAppearData::StartTransform' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, TargetLocation) == 0x000040, "Member 'FRCNazoBattleRebuttalLetterAppearData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, AttackLineEffect) == 0x000050, "Member 'FRCNazoBattleRebuttalLetterAppearData::AttackLineEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, AttackLineEffectLifeTime) == 0x000058, "Member 'FRCNazoBattleRebuttalLetterAppearData::AttackLineEffectLifeTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, Damage) == 0x00005C, "Member 'FRCNazoBattleRebuttalLetterAppearData::Damage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, RepelledTargetComp) == 0x000060, "Member 'FRCNazoBattleRebuttalLetterAppearData::RepelledTargetComp' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, RepelledTargetSocketName) == 0x000068, "Member 'FRCNazoBattleRebuttalLetterAppearData::RepelledTargetSocketName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, RepelledKaijinTag) == 0x000070, "Member 'FRCNazoBattleRebuttalLetterAppearData::RepelledKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearData, PreventSpeed) == 0x000078, "Member 'FRCNazoBattleRebuttalLetterAppearData::PreventSpeed' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDTalkIconData
// 0x0028 (0x0078 - 0x0050)
struct FRCAdvHUDTalkIconData final : public FRCAdvHUDInteractIconData
{
public:
	struct FRCAdvHUDAccessableCharacterData       CharacterData;                                     // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class URCUiIntTalk*                           TalkIcon;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoal;                                             // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubquest;                                         // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDTalkIconData) == 0x000008, "Wrong alignment on FRCAdvHUDTalkIconData");
static_assert(sizeof(FRCAdvHUDTalkIconData) == 0x000078, "Wrong size on FRCAdvHUDTalkIconData");
static_assert(offsetof(FRCAdvHUDTalkIconData, CharacterData) == 0x000050, "Member 'FRCAdvHUDTalkIconData::CharacterData' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkIconData, TalkIcon) == 0x000068, "Member 'FRCAdvHUDTalkIconData::TalkIcon' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkIconData, bGoal) == 0x000070, "Member 'FRCAdvHUDTalkIconData::bGoal' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDTalkIconData, bSubquest) == 0x000071, "Member 'FRCAdvHUDTalkIconData::bSubquest' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDBalloonWidgetSet
// 0x0018 (0x0018 - 0x0000)
struct FRCAdvHUDBalloonWidgetSet final
{
public:
	class URCReUiBalloonNear*                     BalloonNear;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCReUiBalloonFar*                      BalloonFar;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCWidgetActor*                         BalloonActor;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDBalloonWidgetSet) == 0x000008, "Wrong alignment on FRCAdvHUDBalloonWidgetSet");
static_assert(sizeof(FRCAdvHUDBalloonWidgetSet) == 0x000018, "Wrong size on FRCAdvHUDBalloonWidgetSet");
static_assert(offsetof(FRCAdvHUDBalloonWidgetSet, BalloonNear) == 0x000000, "Member 'FRCAdvHUDBalloonWidgetSet::BalloonNear' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonWidgetSet, BalloonFar) == 0x000008, "Member 'FRCAdvHUDBalloonWidgetSet::BalloonFar' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonWidgetSet, BalloonActor) == 0x000010, "Member 'FRCAdvHUDBalloonWidgetSet::BalloonActor' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDBalloonData
// 0x0048 (0x0090 - 0x0048)
struct FRCAdvHUDBalloonData final : public FRCAdvHUDAccessableWidgetBaseData
{
public:
	struct FRCAdvHUDAccessableCharacterData       CharacterData;                                     // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAdvHUDBalloonWidgetSet              WidgetSet;                                         // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ESCBaloonFrame                                BalloonFrameType;                                  // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCBaloonType                                 BalloonContentType;                                // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x007C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBalloonDraw;                                      // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTextDraw;                                         // 0x0085(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFarInViewport;                                    // 0x0086(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCAdvHUDWidgetState                          State3D;                                           // 0x0087(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateLarge;                                       // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale3D;                                           // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAdvHUDBalloonData) == 0x000008, "Wrong alignment on FRCAdvHUDBalloonData");
static_assert(sizeof(FRCAdvHUDBalloonData) == 0x000090, "Wrong size on FRCAdvHUDBalloonData");
static_assert(offsetof(FRCAdvHUDBalloonData, CharacterData) == 0x000048, "Member 'FRCAdvHUDBalloonData::CharacterData' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, WidgetSet) == 0x000060, "Member 'FRCAdvHUDBalloonData::WidgetSet' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, BalloonFrameType) == 0x000078, "Member 'FRCAdvHUDBalloonData::BalloonFrameType' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, BalloonContentType) == 0x000079, "Member 'FRCAdvHUDBalloonData::BalloonContentType' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, TextID) == 0x00007C, "Member 'FRCAdvHUDBalloonData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, bBalloonDraw) == 0x000084, "Member 'FRCAdvHUDBalloonData::bBalloonDraw' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, bTextDraw) == 0x000085, "Member 'FRCAdvHUDBalloonData::bTextDraw' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, bFarInViewport) == 0x000086, "Member 'FRCAdvHUDBalloonData::bFarInViewport' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, State3D) == 0x000087, "Member 'FRCAdvHUDBalloonData::State3D' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, bStateLarge) == 0x000088, "Member 'FRCAdvHUDBalloonData::bStateLarge' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonData, Scale3D) == 0x00008C, "Member 'FRCAdvHUDBalloonData::Scale3D' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterTagListTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamCharacterTagListTableRow final : public FTableRowBase
{
public:
	class FName                                   Tag;                                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterTagListTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterTagListTableRow");
static_assert(sizeof(FRCParamCharacterTagListTableRow) == 0x000010, "Wrong size on FRCParamCharacterTagListTableRow");
static_assert(offsetof(FRCParamCharacterTagListTableRow, Tag) == 0x000008, "Member 'FRCParamCharacterTagListTableRow::Tag' has a wrong offset!");

// ScriptStruct RC.RCAdvHUDBalloonSetData
// 0x0020 (0x0020 - 0x0000)
struct FRCAdvHUDBalloonSetData final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCBaloonFrame                                BalloonFrameType;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCBaloonType                                 BalloonContentType;                                // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBalloonDraw;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTextDraw;                                         // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale3D;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAdvHUDBalloonSetData) == 0x000008, "Wrong alignment on FRCAdvHUDBalloonSetData");
static_assert(sizeof(FRCAdvHUDBalloonSetData) == 0x000020, "Wrong size on FRCAdvHUDBalloonSetData");
static_assert(offsetof(FRCAdvHUDBalloonSetData, Pawn) == 0x000000, "Member 'FRCAdvHUDBalloonSetData::Pawn' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonSetData, BalloonFrameType) == 0x000008, "Member 'FRCAdvHUDBalloonSetData::BalloonFrameType' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonSetData, BalloonContentType) == 0x000009, "Member 'FRCAdvHUDBalloonSetData::BalloonContentType' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonSetData, TextID) == 0x00000C, "Member 'FRCAdvHUDBalloonSetData::TextID' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonSetData, bBalloonDraw) == 0x000014, "Member 'FRCAdvHUDBalloonSetData::bBalloonDraw' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonSetData, bTextDraw) == 0x000015, "Member 'FRCAdvHUDBalloonSetData::bTextDraw' has a wrong offset!");
static_assert(offsetof(FRCAdvHUDBalloonSetData, Scale3D) == 0x000018, "Member 'FRCAdvHUDBalloonSetData::Scale3D' has a wrong offset!");

// ScriptStruct RC.RCNazoLoopLSACameraData
// 0x0018 (0x0018 - 0x0000)
struct FRCNazoLoopLSACameraData
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoLoopLSACameraData) == 0x000004, "Wrong alignment on FRCNazoLoopLSACameraData");
static_assert(sizeof(FRCNazoLoopLSACameraData) == 0x000018, "Wrong size on FRCNazoLoopLSACameraData");
static_assert(offsetof(FRCNazoLoopLSACameraData, Location) == 0x000000, "Member 'FRCNazoLoopLSACameraData::Location' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSACameraData, Rotation) == 0x00000C, "Member 'FRCNazoLoopLSACameraData::Rotation' has a wrong offset!");

// ScriptStruct RC.RCAmatanResearchBehavior
// 0x0058 (0x0058 - 0x0000)
struct FRCAmatanResearchBehavior final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccessLength;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkCharacterName;                                 // 0x0014(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckActorName;                                    // 0x001C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BaloonCharacterNameList;                           // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           CheckNameActorNameList;                            // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class ARCCheckActor*                          CheckActor;                                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAmatanResearchBehavior) == 0x000008, "Wrong alignment on FRCAmatanResearchBehavior");
static_assert(sizeof(FRCAmatanResearchBehavior) == 0x000058, "Wrong size on FRCAmatanResearchBehavior");
static_assert(offsetof(FRCAmatanResearchBehavior, AccessLength) == 0x000010, "Member 'FRCAmatanResearchBehavior::AccessLength' has a wrong offset!");
static_assert(offsetof(FRCAmatanResearchBehavior, TalkCharacterName) == 0x000014, "Member 'FRCAmatanResearchBehavior::TalkCharacterName' has a wrong offset!");
static_assert(offsetof(FRCAmatanResearchBehavior, CheckActorName) == 0x00001C, "Member 'FRCAmatanResearchBehavior::CheckActorName' has a wrong offset!");
static_assert(offsetof(FRCAmatanResearchBehavior, BaloonCharacterNameList) == 0x000028, "Member 'FRCAmatanResearchBehavior::BaloonCharacterNameList' has a wrong offset!");
static_assert(offsetof(FRCAmatanResearchBehavior, CheckNameActorNameList) == 0x000038, "Member 'FRCAmatanResearchBehavior::CheckNameActorNameList' has a wrong offset!");
static_assert(offsetof(FRCAmatanResearchBehavior, CheckActor) == 0x000048, "Member 'FRCAmatanResearchBehavior::CheckActor' has a wrong offset!");

// ScriptStruct RC.RCAnimNode_FootIK
// 0x07B0 (0x07C0 - 0x0010)
struct alignas(0x10) FRCAnimNode_FootIK final : public FAnimNode_Base
{
public:
	class FName                                   WaistBone;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootLBone;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KneeLBone;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootRBone;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KneeRBone;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCScriptActorAnimInstFootIKData       FootIKData;                                        // 0x0038(0x0044)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              SourcePose;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x730];                                     // 0x0090(0x0730)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAnimNode_FootIK) == 0x000010, "Wrong alignment on FRCAnimNode_FootIK");
static_assert(sizeof(FRCAnimNode_FootIK) == 0x0007C0, "Wrong size on FRCAnimNode_FootIK");
static_assert(offsetof(FRCAnimNode_FootIK, WaistBone) == 0x000010, "Member 'FRCAnimNode_FootIK::WaistBone' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_FootIK, FootLBone) == 0x000018, "Member 'FRCAnimNode_FootIK::FootLBone' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_FootIK, KneeLBone) == 0x000020, "Member 'FRCAnimNode_FootIK::KneeLBone' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_FootIK, FootRBone) == 0x000028, "Member 'FRCAnimNode_FootIK::FootRBone' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_FootIK, KneeRBone) == 0x000030, "Member 'FRCAnimNode_FootIK::KneeRBone' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_FootIK, FootIKData) == 0x000038, "Member 'FRCAnimNode_FootIK::FootIKData' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_FootIK, SourcePose) == 0x000080, "Member 'FRCAnimNode_FootIK::SourcePose' has a wrong offset!");

// ScriptStruct RC.RCAnimNode_LookCtrl
// 0x0790 (0x07A0 - 0x0010)
struct FRCAnimNode_LookCtrl final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x780];                                     // 0x0020(0x0780)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAnimNode_LookCtrl) == 0x000008, "Wrong alignment on FRCAnimNode_LookCtrl");
static_assert(sizeof(FRCAnimNode_LookCtrl) == 0x0007A0, "Wrong size on FRCAnimNode_LookCtrl");
static_assert(offsetof(FRCAnimNode_LookCtrl, SourcePose) == 0x000010, "Member 'FRCAnimNode_LookCtrl::SourcePose' has a wrong offset!");

// ScriptStruct RC.RCParamEventListTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamEventListTableRow final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamEventListTableRow) == 0x000008, "Wrong alignment on FRCParamEventListTableRow");
static_assert(sizeof(FRCParamEventListTableRow) == 0x000030, "Wrong size on FRCParamEventListTableRow");
static_assert(offsetof(FRCParamEventListTableRow, Category) == 0x000008, "Member 'FRCParamEventListTableRow::Category' has a wrong offset!");
static_assert(offsetof(FRCParamEventListTableRow, Chapter) == 0x000010, "Member 'FRCParamEventListTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamEventListTableRow, Scene) == 0x000014, "Member 'FRCParamEventListTableRow::Scene' has a wrong offset!");
static_assert(offsetof(FRCParamEventListTableRow, Comment) == 0x000020, "Member 'FRCParamEventListTableRow::Comment' has a wrong offset!");

// ScriptStruct RC.RCAnimNode_NoEyeLookCtrl
// 0x0580 (0x0590 - 0x0010)
struct FRCAnimNode_NoEyeLookCtrl final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x570];                                     // 0x0020(0x0570)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAnimNode_NoEyeLookCtrl) == 0x000008, "Wrong alignment on FRCAnimNode_NoEyeLookCtrl");
static_assert(sizeof(FRCAnimNode_NoEyeLookCtrl) == 0x000590, "Wrong size on FRCAnimNode_NoEyeLookCtrl");
static_assert(offsetof(FRCAnimNode_NoEyeLookCtrl, SourcePose) == 0x000010, "Member 'FRCAnimNode_NoEyeLookCtrl::SourcePose' has a wrong offset!");

// ScriptStruct RC.RCScriptActorTurnData
// 0x0010 (0x0010 - 0x0000)
struct FRCScriptActorTurnData final
{
public:
	bool                                          bTurn;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeft;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceID;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorTurnData) == 0x000004, "Wrong alignment on FRCScriptActorTurnData");
static_assert(sizeof(FRCScriptActorTurnData) == 0x000010, "Wrong size on FRCScriptActorTurnData");
static_assert(offsetof(FRCScriptActorTurnData, bTurn) == 0x000000, "Member 'FRCScriptActorTurnData::bTurn' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnData, bLeft) == 0x000001, "Member 'FRCScriptActorTurnData::bLeft' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnData, SequenceID) == 0x000004, "Member 'FRCScriptActorTurnData::SequenceID' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnData, PlayRate) == 0x000008, "Member 'FRCScriptActorTurnData::PlayRate' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnData, Yaw) == 0x00000C, "Member 'FRCScriptActorTurnData::Yaw' has a wrong offset!");

// ScriptStruct RC.RCAnimNode_SelectTurn
// 0x0088 (0x0098 - 0x0010)
struct FRCAnimNode_SelectTurn final : public FAnimNode_Base
{
public:
	struct FRCScriptActorTurnData                 TurnData;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              TurnSeq0L;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              TurnSeq0R;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              TurnSeq1L;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              TurnSeq1R;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              TurnSeq2L;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              TurnSeq2R;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x18];                                      // 0x0080(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAnimNode_SelectTurn) == 0x000008, "Wrong alignment on FRCAnimNode_SelectTurn");
static_assert(sizeof(FRCAnimNode_SelectTurn) == 0x000098, "Wrong size on FRCAnimNode_SelectTurn");
static_assert(offsetof(FRCAnimNode_SelectTurn, TurnData) == 0x000010, "Member 'FRCAnimNode_SelectTurn::TurnData' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_SelectTurn, TurnSeq0L) == 0x000020, "Member 'FRCAnimNode_SelectTurn::TurnSeq0L' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_SelectTurn, TurnSeq0R) == 0x000030, "Member 'FRCAnimNode_SelectTurn::TurnSeq0R' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_SelectTurn, TurnSeq1L) == 0x000040, "Member 'FRCAnimNode_SelectTurn::TurnSeq1L' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_SelectTurn, TurnSeq1R) == 0x000050, "Member 'FRCAnimNode_SelectTurn::TurnSeq1R' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_SelectTurn, TurnSeq2L) == 0x000060, "Member 'FRCAnimNode_SelectTurn::TurnSeq2L' has a wrong offset!");
static_assert(offsetof(FRCAnimNode_SelectTurn, TurnSeq2R) == 0x000070, "Member 'FRCAnimNode_SelectTurn::TurnSeq2R' has a wrong offset!");

// ScriptStruct RC.RCNazoLoopLSAFollowerData
// 0x0040 (0x0040 - 0x0000)
struct FRCNazoLoopLSAFollowerData
{
public:
	class ARCCharacterRender*                     Shinigami;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShinigamiLocation;                                 // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCCharacterRender*                     Follower;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FollowerLocation;                                  // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         FollowActorArray;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoLoopLSAFollowerData) == 0x000008, "Wrong alignment on FRCNazoLoopLSAFollowerData");
static_assert(sizeof(FRCNazoLoopLSAFollowerData) == 0x000040, "Wrong size on FRCNazoLoopLSAFollowerData");
static_assert(offsetof(FRCNazoLoopLSAFollowerData, Shinigami) == 0x000000, "Member 'FRCNazoLoopLSAFollowerData::Shinigami' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAFollowerData, ShinigamiLocation) == 0x000008, "Member 'FRCNazoLoopLSAFollowerData::ShinigamiLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAFollowerData, Follower) == 0x000018, "Member 'FRCNazoLoopLSAFollowerData::Follower' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAFollowerData, FollowerLocation) == 0x000020, "Member 'FRCNazoLoopLSAFollowerData::FollowerLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAFollowerData, FollowActorArray) == 0x000030, "Member 'FRCNazoLoopLSAFollowerData::FollowActorArray' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSAFollowerData
// 0x0000 (0x0040 - 0x0040)
struct FRCNazoMoveLoopLSAFollowerData final : public FRCNazoLoopLSAFollowerData
{
};
static_assert(alignof(FRCNazoMoveLoopLSAFollowerData) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSAFollowerData");
static_assert(sizeof(FRCNazoMoveLoopLSAFollowerData) == 0x000040, "Wrong size on FRCNazoMoveLoopLSAFollowerData");

// ScriptStruct RC.AssetInfo
// 0x0014 (0x0014 - 0x0000)
struct FAssetInfo final
{
public:
	class FName                                   Filename;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadEnd;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheck;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAssetInfo) == 0x000004, "Wrong alignment on FAssetInfo");
static_assert(sizeof(FAssetInfo) == 0x000014, "Wrong size on FAssetInfo");
static_assert(offsetof(FAssetInfo, Filename) == 0x000000, "Member 'FAssetInfo::Filename' has a wrong offset!");
static_assert(offsetof(FAssetInfo, bLoadEnd) == 0x000008, "Member 'FAssetInfo::bLoadEnd' has a wrong offset!");
static_assert(offsetof(FAssetInfo, Count) == 0x00000C, "Member 'FAssetInfo::Count' has a wrong offset!");
static_assert(offsetof(FAssetInfo, bCheck) == 0x000010, "Member 'FAssetInfo::bCheck' has a wrong offset!");

// ScriptStruct RC.RCParamEventSceneMapConnectInfoTableRow
// 0x0070 (0x0078 - 0x0008)
struct FRCParamEventSceneMapConnectInfoTableRow final : public FTableRowBase
{
public:
	int32                                         Chapter;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerStartName;                                   // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BusStopStatus;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameMenuType;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameMode;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextChapter;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextScene;                                         // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ConnectBusStopStatus;                              // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   SubQuestName;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ConnectStatus;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamEventSceneMapConnectInfoTableRow) == 0x000008, "Wrong alignment on FRCParamEventSceneMapConnectInfoTableRow");
static_assert(sizeof(FRCParamEventSceneMapConnectInfoTableRow) == 0x000078, "Wrong size on FRCParamEventSceneMapConnectInfoTableRow");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, Chapter) == 0x000008, "Member 'FRCParamEventSceneMapConnectInfoTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, Scene) == 0x00000C, "Member 'FRCParamEventSceneMapConnectInfoTableRow::Scene' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, MapID) == 0x000014, "Member 'FRCParamEventSceneMapConnectInfoTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, PlayerStartName) == 0x00001C, "Member 'FRCParamEventSceneMapConnectInfoTableRow::PlayerStartName' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, Phase) == 0x000024, "Member 'FRCParamEventSceneMapConnectInfoTableRow::Phase' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, BusStopStatus) == 0x000028, "Member 'FRCParamEventSceneMapConnectInfoTableRow::BusStopStatus' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, GameMenuType) == 0x000030, "Member 'FRCParamEventSceneMapConnectInfoTableRow::GameMenuType' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, GameMode) == 0x000038, "Member 'FRCParamEventSceneMapConnectInfoTableRow::GameMode' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, NextChapter) == 0x000040, "Member 'FRCParamEventSceneMapConnectInfoTableRow::NextChapter' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, NextScene) == 0x000044, "Member 'FRCParamEventSceneMapConnectInfoTableRow::NextScene' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, ConnectBusStopStatus) == 0x000050, "Member 'FRCParamEventSceneMapConnectInfoTableRow::ConnectBusStopStatus' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, SubQuestName) == 0x000060, "Member 'FRCParamEventSceneMapConnectInfoTableRow::SubQuestName' has a wrong offset!");
static_assert(offsetof(FRCParamEventSceneMapConnectInfoTableRow, ConnectStatus) == 0x000068, "Member 'FRCParamEventSceneMapConnectInfoTableRow::ConnectStatus' has a wrong offset!");

// ScriptStruct RC.RCAttachmentMotionSlotData
// 0x0003 (0x0003 - 0x0000)
struct FRCAttachmentMotionSlotData final
{
public:
	bool                                          bCase01;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCase02;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCase03;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAttachmentMotionSlotData) == 0x000001, "Wrong alignment on FRCAttachmentMotionSlotData");
static_assert(sizeof(FRCAttachmentMotionSlotData) == 0x000003, "Wrong size on FRCAttachmentMotionSlotData");
static_assert(offsetof(FRCAttachmentMotionSlotData, bCase01) == 0x000000, "Member 'FRCAttachmentMotionSlotData::bCase01' has a wrong offset!");
static_assert(offsetof(FRCAttachmentMotionSlotData, bCase02) == 0x000001, "Member 'FRCAttachmentMotionSlotData::bCase02' has a wrong offset!");
static_assert(offsetof(FRCAttachmentMotionSlotData, bCase03) == 0x000002, "Member 'FRCAttachmentMotionSlotData::bCase03' has a wrong offset!");

// ScriptStruct RC.RCAutoPlayContext
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FRCAutoPlayContext final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAutoPlayContext) == 0x000008, "Wrong alignment on FRCAutoPlayContext");
static_assert(sizeof(FRCAutoPlayContext) == 0x000068, "Wrong size on FRCAutoPlayContext");

// ScriptStruct RC.RCNazoMoveLoopLevelSettingsBG
// 0x0008 (0x0068 - 0x0060)
struct FRCNazoMoveLoopLevelSettingsBG final : public FRCNazoMoveLoopLevelSettingsBase
{
public:
	int32                                         TilingNum;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoMoveLoopLevelSettingsBG) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLevelSettingsBG");
static_assert(sizeof(FRCNazoMoveLoopLevelSettingsBG) == 0x000068, "Wrong size on FRCNazoMoveLoopLevelSettingsBG");
static_assert(offsetof(FRCNazoMoveLoopLevelSettingsBG, TilingNum) == 0x000060, "Member 'FRCNazoMoveLoopLevelSettingsBG::TilingNum' has a wrong offset!");

// ScriptStruct RC.RCCharacterLipsyncMotionSlotData
// 0x0018 (0x0018 - 0x0000)
struct FRCCharacterLipsyncMotionSlotData final
{
public:
	class UAnimSequence*                          LipsyncMotion;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlotAlpha;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRateBasis;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlay;                                             // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCCharacterLipsyncMotionSlotData) == 0x000008, "Wrong alignment on FRCCharacterLipsyncMotionSlotData");
static_assert(sizeof(FRCCharacterLipsyncMotionSlotData) == 0x000018, "Wrong size on FRCCharacterLipsyncMotionSlotData");
static_assert(offsetof(FRCCharacterLipsyncMotionSlotData, LipsyncMotion) == 0x000000, "Member 'FRCCharacterLipsyncMotionSlotData::LipsyncMotion' has a wrong offset!");
static_assert(offsetof(FRCCharacterLipsyncMotionSlotData, SlotAlpha) == 0x000008, "Member 'FRCCharacterLipsyncMotionSlotData::SlotAlpha' has a wrong offset!");
static_assert(offsetof(FRCCharacterLipsyncMotionSlotData, PlayRateBasis) == 0x00000C, "Member 'FRCCharacterLipsyncMotionSlotData::PlayRateBasis' has a wrong offset!");
static_assert(offsetof(FRCCharacterLipsyncMotionSlotData, PlayRate) == 0x000010, "Member 'FRCCharacterLipsyncMotionSlotData::PlayRate' has a wrong offset!");
static_assert(offsetof(FRCCharacterLipsyncMotionSlotData, bLoop) == 0x000014, "Member 'FRCCharacterLipsyncMotionSlotData::bLoop' has a wrong offset!");
static_assert(offsetof(FRCCharacterLipsyncMotionSlotData, bPlay) == 0x000015, "Member 'FRCCharacterLipsyncMotionSlotData::bPlay' has a wrong offset!");

// ScriptStruct RC.RCCharacterSequencePlayerInfo
// 0x0020 (0x0020 - 0x0000)
struct FRCCharacterSequencePlayerInfo final
{
public:
	class FString                                 SeqName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePlayRateAdjusted;                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterSequencePlayerInfo) == 0x000008, "Wrong alignment on FRCCharacterSequencePlayerInfo");
static_assert(sizeof(FRCCharacterSequencePlayerInfo) == 0x000020, "Wrong size on FRCCharacterSequencePlayerInfo");
static_assert(offsetof(FRCCharacterSequencePlayerInfo, SeqName) == 0x000000, "Member 'FRCCharacterSequencePlayerInfo::SeqName' has a wrong offset!");
static_assert(offsetof(FRCCharacterSequencePlayerInfo, Length) == 0x000010, "Member 'FRCCharacterSequencePlayerInfo::Length' has a wrong offset!");
static_assert(offsetof(FRCCharacterSequencePlayerInfo, PlayRate) == 0x000014, "Member 'FRCCharacterSequencePlayerInfo::PlayRate' has a wrong offset!");
static_assert(offsetof(FRCCharacterSequencePlayerInfo, Time) == 0x000018, "Member 'FRCCharacterSequencePlayerInfo::Time' has a wrong offset!");
static_assert(offsetof(FRCCharacterSequencePlayerInfo, TimePlayRateAdjusted) == 0x00001C, "Member 'FRCCharacterSequencePlayerInfo::TimePlayRateAdjusted' has a wrong offset!");

// ScriptStruct RC.RCNazoPlayableLoopLSATileData
// 0x0030 (0x0098 - 0x0068)
struct FRCNazoPlayableLoopLSATileData : public FRCNazoLoopLSATileData
{
public:
	struct FVector                                StartLocation;                                     // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DistanceVector;                                    // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceSquare;                                    // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoPlayableLoopLSATileData) == 0x000008, "Wrong alignment on FRCNazoPlayableLoopLSATileData");
static_assert(sizeof(FRCNazoPlayableLoopLSATileData) == 0x000098, "Wrong size on FRCNazoPlayableLoopLSATileData");
static_assert(offsetof(FRCNazoPlayableLoopLSATileData, StartLocation) == 0x000068, "Member 'FRCNazoPlayableLoopLSATileData::StartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSATileData, EndLocation) == 0x000074, "Member 'FRCNazoPlayableLoopLSATileData::EndLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSATileData, DistanceVector) == 0x000080, "Member 'FRCNazoPlayableLoopLSATileData::DistanceVector' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSATileData, DistanceSquare) == 0x00008C, "Member 'FRCNazoPlayableLoopLSATileData::DistanceSquare' has a wrong offset!");

// ScriptStruct RC.RCNazoPlayableLoopLSASequencerData
// 0x0020 (0x0020 - 0x0000)
struct FRCNazoPlayableLoopLSASequencerData final
{
public:
	class ARCNazoPlayableLoopSequenceParentActor* SequenceParentActor;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoPlayableLoopLSASequencerState          State;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DelayTimerHandle;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoPlayableLoopLSASequencerData) == 0x000008, "Wrong alignment on FRCNazoPlayableLoopLSASequencerData");
static_assert(sizeof(FRCNazoPlayableLoopLSASequencerData) == 0x000020, "Wrong size on FRCNazoPlayableLoopLSASequencerData");
static_assert(offsetof(FRCNazoPlayableLoopLSASequencerData, SequenceParentActor) == 0x000000, "Member 'FRCNazoPlayableLoopLSASequencerData::SequenceParentActor' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSASequencerData, SequenceActor) == 0x000008, "Member 'FRCNazoPlayableLoopLSASequencerData::SequenceActor' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSASequencerData, State) == 0x000010, "Member 'FRCNazoPlayableLoopLSASequencerData::State' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSASequencerData, DelayTimerHandle) == 0x000018, "Member 'FRCNazoPlayableLoopLSASequencerData::DelayTimerHandle' has a wrong offset!");

// ScriptStruct RC.RCNazoPlayableLoopLSALoopTileData
// 0x0030 (0x00C8 - 0x0098)
struct FRCNazoPlayableLoopLSALoopTileData final : public FRCNazoPlayableLoopLSATileData
{
public:
	class FName                                   FrontWallActorTag;                                 // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCNazoPlayableLoopLSASequencerData    FrontWallSequencerData;                            // 0x00A0(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOpenFrontWall;                                    // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoPlayableLoopLSALoopTileData) == 0x000008, "Wrong alignment on FRCNazoPlayableLoopLSALoopTileData");
static_assert(sizeof(FRCNazoPlayableLoopLSALoopTileData) == 0x0000C8, "Wrong size on FRCNazoPlayableLoopLSALoopTileData");
static_assert(offsetof(FRCNazoPlayableLoopLSALoopTileData, FrontWallActorTag) == 0x000098, "Member 'FRCNazoPlayableLoopLSALoopTileData::FrontWallActorTag' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSALoopTileData, FrontWallSequencerData) == 0x0000A0, "Member 'FRCNazoPlayableLoopLSALoopTileData::FrontWallSequencerData' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSALoopTileData, bOpenFrontWall) == 0x0000C0, "Member 'FRCNazoPlayableLoopLSALoopTileData::bOpenFrontWall' has a wrong offset!");

// ScriptStruct RC.RCNazoPlayableLoopLSALevelData
// 0x0178 (0x0178 - 0x0000)
struct FRCNazoPlayableLoopLSALevelData final
{
public:
	struct FRCNazoPlayableLoopLSATileData         StartTileData;                                     // 0x0000(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRCNazoPlayableLoopLSALoopTileData> LoopTileDataArray;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRCNazoPlayableLoopLSATileData         EndTileData;                                       // 0x00A8(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                LoopTileStartLocation;                             // 0x0140(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LoopTileEndLocation;                               // 0x014C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AllLoopTileDistanceVector;                         // 0x0158(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopTileHeadIndex;                                 // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x10];                                     // 0x0168(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoPlayableLoopLSALevelData) == 0x000008, "Wrong alignment on FRCNazoPlayableLoopLSALevelData");
static_assert(sizeof(FRCNazoPlayableLoopLSALevelData) == 0x000178, "Wrong size on FRCNazoPlayableLoopLSALevelData");
static_assert(offsetof(FRCNazoPlayableLoopLSALevelData, StartTileData) == 0x000000, "Member 'FRCNazoPlayableLoopLSALevelData::StartTileData' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSALevelData, LoopTileDataArray) == 0x000098, "Member 'FRCNazoPlayableLoopLSALevelData::LoopTileDataArray' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSALevelData, EndTileData) == 0x0000A8, "Member 'FRCNazoPlayableLoopLSALevelData::EndTileData' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSALevelData, LoopTileStartLocation) == 0x000140, "Member 'FRCNazoPlayableLoopLSALevelData::LoopTileStartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSALevelData, LoopTileEndLocation) == 0x00014C, "Member 'FRCNazoPlayableLoopLSALevelData::LoopTileEndLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSALevelData, AllLoopTileDistanceVector) == 0x000158, "Member 'FRCNazoPlayableLoopLSALevelData::AllLoopTileDistanceVector' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSALevelData, LoopTileHeadIndex) == 0x000164, "Member 'FRCNazoPlayableLoopLSALevelData::LoopTileHeadIndex' has a wrong offset!");

// ScriptStruct RC.RCCharacterMotionSlotData
// 0x0038 (0x0038 - 0x0000)
struct FRCCharacterMotionSlotData final
{
public:
	class UAnimSequence*                          InMotion;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LoopMotion;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          OutMotion;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlotAlpha;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRateBasis;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartSwitch;                                      // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartFromLoopSwitch;                              // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseSwitch;                                      // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetSwitch;                                      // 0x0027(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndToLoopSwitch;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopInSwitch;                                     // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayInMotion;                                     // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopMotionPlayStartPos;                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ResetPoseMotion;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterMotionSlotData) == 0x000008, "Wrong alignment on FRCCharacterMotionSlotData");
static_assert(sizeof(FRCCharacterMotionSlotData) == 0x000038, "Wrong size on FRCCharacterMotionSlotData");
static_assert(offsetof(FRCCharacterMotionSlotData, InMotion) == 0x000000, "Member 'FRCCharacterMotionSlotData::InMotion' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, LoopMotion) == 0x000008, "Member 'FRCCharacterMotionSlotData::LoopMotion' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, OutMotion) == 0x000010, "Member 'FRCCharacterMotionSlotData::OutMotion' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, SlotAlpha) == 0x000018, "Member 'FRCCharacterMotionSlotData::SlotAlpha' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, PlayRateBasis) == 0x00001C, "Member 'FRCCharacterMotionSlotData::PlayRateBasis' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, PlayRate) == 0x000020, "Member 'FRCCharacterMotionSlotData::PlayRate' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, bStartSwitch) == 0x000024, "Member 'FRCCharacterMotionSlotData::bStartSwitch' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, bStartFromLoopSwitch) == 0x000025, "Member 'FRCCharacterMotionSlotData::bStartFromLoopSwitch' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, bPauseSwitch) == 0x000026, "Member 'FRCCharacterMotionSlotData::bPauseSwitch' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, bResetSwitch) == 0x000027, "Member 'FRCCharacterMotionSlotData::bResetSwitch' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, bEndToLoopSwitch) == 0x000028, "Member 'FRCCharacterMotionSlotData::bEndToLoopSwitch' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, bStopInSwitch) == 0x000029, "Member 'FRCCharacterMotionSlotData::bStopInSwitch' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, bPlayInMotion) == 0x00002A, "Member 'FRCCharacterMotionSlotData::bPlayInMotion' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, LoopMotionPlayStartPos) == 0x00002C, "Member 'FRCCharacterMotionSlotData::LoopMotionPlayStartPos' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionSlotData, ResetPoseMotion) == 0x000030, "Member 'FRCCharacterMotionSlotData::ResetPoseMotion' has a wrong offset!");

// ScriptStruct RC.RCParamTitleHelpTextTableRow
// 0x00A0 (0x00A8 - 0x0008)
struct FRCParamTitleHelpTextTableRow final : public FTableRowBase
{
public:
	class FName                                   Continue;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SaveLoad;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewGame;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Laungauge;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Option;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectLaungauge;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameStart;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterSelect;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Collection;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnTitle;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eShop;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SteamStore;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   question;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubStory;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubStory_NotSwitch;                                // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuitGame;                                          // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Gallery;                                           // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   License;                                           // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterSelectHelp;                                 // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubStorytHelp;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTitleHelpTextTableRow) == 0x000008, "Wrong alignment on FRCParamTitleHelpTextTableRow");
static_assert(sizeof(FRCParamTitleHelpTextTableRow) == 0x0000A8, "Wrong size on FRCParamTitleHelpTextTableRow");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, Continue) == 0x000008, "Member 'FRCParamTitleHelpTextTableRow::Continue' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, SaveLoad) == 0x000010, "Member 'FRCParamTitleHelpTextTableRow::SaveLoad' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, NewGame) == 0x000018, "Member 'FRCParamTitleHelpTextTableRow::NewGame' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, Laungauge) == 0x000020, "Member 'FRCParamTitleHelpTextTableRow::Laungauge' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, Option) == 0x000028, "Member 'FRCParamTitleHelpTextTableRow::Option' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, SelectLaungauge) == 0x000030, "Member 'FRCParamTitleHelpTextTableRow::SelectLaungauge' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, GameStart) == 0x000038, "Member 'FRCParamTitleHelpTextTableRow::GameStart' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, ChapterSelect) == 0x000040, "Member 'FRCParamTitleHelpTextTableRow::ChapterSelect' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, Collection) == 0x000048, "Member 'FRCParamTitleHelpTextTableRow::Collection' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, ReturnTitle) == 0x000050, "Member 'FRCParamTitleHelpTextTableRow::ReturnTitle' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, eShop) == 0x000058, "Member 'FRCParamTitleHelpTextTableRow::eShop' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, SteamStore) == 0x000060, "Member 'FRCParamTitleHelpTextTableRow::SteamStore' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, question) == 0x000068, "Member 'FRCParamTitleHelpTextTableRow::question' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, SubStory) == 0x000070, "Member 'FRCParamTitleHelpTextTableRow::SubStory' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, SubStory_NotSwitch) == 0x000078, "Member 'FRCParamTitleHelpTextTableRow::SubStory_NotSwitch' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, QuitGame) == 0x000080, "Member 'FRCParamTitleHelpTextTableRow::QuitGame' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, Gallery) == 0x000088, "Member 'FRCParamTitleHelpTextTableRow::Gallery' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, License) == 0x000090, "Member 'FRCParamTitleHelpTextTableRow::License' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, ChapterSelectHelp) == 0x000098, "Member 'FRCParamTitleHelpTextTableRow::ChapterSelectHelp' has a wrong offset!");
static_assert(offsetof(FRCParamTitleHelpTextTableRow, SubStorytHelp) == 0x0000A0, "Member 'FRCParamTitleHelpTextTableRow::SubStorytHelp' has a wrong offset!");

// ScriptStruct RC.RCFacial2DMotionDataRecord
// 0x0028 (0x0028 - 0x0000)
struct FRCFacial2DMotionDataRecord final
{
public:
	class FName                                   MotionName0;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName1;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName2;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName3;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName4;                                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCFacial2DMotionDataRecord) == 0x000004, "Wrong alignment on FRCFacial2DMotionDataRecord");
static_assert(sizeof(FRCFacial2DMotionDataRecord) == 0x000028, "Wrong size on FRCFacial2DMotionDataRecord");
static_assert(offsetof(FRCFacial2DMotionDataRecord, MotionName0) == 0x000000, "Member 'FRCFacial2DMotionDataRecord::MotionName0' has a wrong offset!");
static_assert(offsetof(FRCFacial2DMotionDataRecord, MotionName1) == 0x000008, "Member 'FRCFacial2DMotionDataRecord::MotionName1' has a wrong offset!");
static_assert(offsetof(FRCFacial2DMotionDataRecord, MotionName2) == 0x000010, "Member 'FRCFacial2DMotionDataRecord::MotionName2' has a wrong offset!");
static_assert(offsetof(FRCFacial2DMotionDataRecord, MotionName3) == 0x000018, "Member 'FRCFacial2DMotionDataRecord::MotionName3' has a wrong offset!");
static_assert(offsetof(FRCFacial2DMotionDataRecord, MotionName4) == 0x000020, "Member 'FRCFacial2DMotionDataRecord::MotionName4' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSATileSettings
// 0x0018 (0x0018 - 0x0000)
struct FRCNazoMoveLoopLSATileSettings final
{
public:
	TArray<class FName>                           ActorTagArray;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TileNum;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMoveLoopLSATileSettings) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSATileSettings");
static_assert(sizeof(FRCNazoMoveLoopLSATileSettings) == 0x000018, "Wrong size on FRCNazoMoveLoopLSATileSettings");
static_assert(offsetof(FRCNazoMoveLoopLSATileSettings, ActorTagArray) == 0x000000, "Member 'FRCNazoMoveLoopLSATileSettings::ActorTagArray' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATileSettings, TileNum) == 0x000010, "Member 'FRCNazoMoveLoopLSATileSettings::TileNum' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATileSettings, Weight) == 0x000014, "Member 'FRCNazoMoveLoopLSATileSettings::Weight' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSALaneSettings
// 0x0040 (0x0040 - 0x0000)
struct FRCNazoMoveLoopLSALaneSettings final
{
public:
	struct FVector                                TileStartLocation;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TileEndLocation;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileNum;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTileNum;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CenterTileIndex;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomTileRate;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCNazoMoveLoopLSATileSettings> TileSettingsArray;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMoveLoopLSALaneSettings) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSALaneSettings");
static_assert(sizeof(FRCNazoMoveLoopLSALaneSettings) == 0x000040, "Wrong size on FRCNazoMoveLoopLSALaneSettings");
static_assert(offsetof(FRCNazoMoveLoopLSALaneSettings, TileStartLocation) == 0x000000, "Member 'FRCNazoMoveLoopLSALaneSettings::TileStartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneSettings, TileEndLocation) == 0x00000C, "Member 'FRCNazoMoveLoopLSALaneSettings::TileEndLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneSettings, TileNum) == 0x000018, "Member 'FRCNazoMoveLoopLSALaneSettings::TileNum' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneSettings, TotalTileNum) == 0x00001C, "Member 'FRCNazoMoveLoopLSALaneSettings::TotalTileNum' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneSettings, CenterTileIndex) == 0x000020, "Member 'FRCNazoMoveLoopLSALaneSettings::CenterTileIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneSettings, RandomTileRate) == 0x000024, "Member 'FRCNazoMoveLoopLSALaneSettings::RandomTileRate' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneSettings, Speed) == 0x000028, "Member 'FRCNazoMoveLoopLSALaneSettings::Speed' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneSettings, TileSettingsArray) == 0x000030, "Member 'FRCNazoMoveLoopLSALaneSettings::TileSettingsArray' has a wrong offset!");

// ScriptStruct RC.RCParamShinigamiFacialTempleteTableRow
// 0x00A8 (0x00B0 - 0x0008)
struct FRCParamShinigamiFacialTempleteTableRow final : public FTableRowBase
{
public:
	class FName                                   FacialId;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyebrowMorphTarget;                                // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyebrowMorphBlendRate;                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyeMorphTarget;                                    // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeMorphBlendRate;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MouthMorphTarget;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouthMorphBlendRate;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableLipsync;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BodyMorphTarget;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyMorphBlendRate;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandMorphTarget;                                   // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandMorphBlendRate;                                // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnotherFacialBlendRate;                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplacementPattern;                               // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplacementMask;                                  // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplacementSpeedU;                                // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplacementSpeedV;                                // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplacementTilingU;                               // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplacementTilingV;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplacementPower;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectLinePattern;                                 // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorChangePattern;                                // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangePatternIntensity;                       // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangePatternIntensityDurationSec;            // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeParamR;                                 // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeParamG;                                 // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeParamB;                                 // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipsyncMotionName;                                 // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SSweatOn;                                          // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BSweatOn;                                          // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TearsOn;                                           // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamShinigamiFacialTempleteTableRow) == 0x000008, "Wrong alignment on FRCParamShinigamiFacialTempleteTableRow");
static_assert(sizeof(FRCParamShinigamiFacialTempleteTableRow) == 0x0000B0, "Wrong size on FRCParamShinigamiFacialTempleteTableRow");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, FacialId) == 0x000008, "Member 'FRCParamShinigamiFacialTempleteTableRow::FacialId' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, EyebrowMorphTarget) == 0x000010, "Member 'FRCParamShinigamiFacialTempleteTableRow::EyebrowMorphTarget' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, EyebrowMorphBlendRate) == 0x000018, "Member 'FRCParamShinigamiFacialTempleteTableRow::EyebrowMorphBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, EyeMorphTarget) == 0x00001C, "Member 'FRCParamShinigamiFacialTempleteTableRow::EyeMorphTarget' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, EyeMorphBlendRate) == 0x000024, "Member 'FRCParamShinigamiFacialTempleteTableRow::EyeMorphBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, MouthMorphTarget) == 0x000028, "Member 'FRCParamShinigamiFacialTempleteTableRow::MouthMorphTarget' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, MouthMorphBlendRate) == 0x000030, "Member 'FRCParamShinigamiFacialTempleteTableRow::MouthMorphBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, EnableLipsync) == 0x000034, "Member 'FRCParamShinigamiFacialTempleteTableRow::EnableLipsync' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, BodyMorphTarget) == 0x000038, "Member 'FRCParamShinigamiFacialTempleteTableRow::BodyMorphTarget' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, BodyMorphBlendRate) == 0x000040, "Member 'FRCParamShinigamiFacialTempleteTableRow::BodyMorphBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, HandMorphTarget) == 0x000044, "Member 'FRCParamShinigamiFacialTempleteTableRow::HandMorphTarget' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, HandMorphBlendRate) == 0x00004C, "Member 'FRCParamShinigamiFacialTempleteTableRow::HandMorphBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, AnotherFacialBlendRate) == 0x000050, "Member 'FRCParamShinigamiFacialTempleteTableRow::AnotherFacialBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, DisplacementPattern) == 0x000054, "Member 'FRCParamShinigamiFacialTempleteTableRow::DisplacementPattern' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, DisplacementMask) == 0x00005C, "Member 'FRCParamShinigamiFacialTempleteTableRow::DisplacementMask' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, DisplacementSpeedU) == 0x000064, "Member 'FRCParamShinigamiFacialTempleteTableRow::DisplacementSpeedU' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, DisplacementSpeedV) == 0x000068, "Member 'FRCParamShinigamiFacialTempleteTableRow::DisplacementSpeedV' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, DisplacementTilingU) == 0x00006C, "Member 'FRCParamShinigamiFacialTempleteTableRow::DisplacementTilingU' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, DisplacementTilingV) == 0x000070, "Member 'FRCParamShinigamiFacialTempleteTableRow::DisplacementTilingV' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, DisplacementPower) == 0x000074, "Member 'FRCParamShinigamiFacialTempleteTableRow::DisplacementPower' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, EffectLinePattern) == 0x000078, "Member 'FRCParamShinigamiFacialTempleteTableRow::EffectLinePattern' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, ColorChangePattern) == 0x000080, "Member 'FRCParamShinigamiFacialTempleteTableRow::ColorChangePattern' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, ColorChangePatternIntensity) == 0x000088, "Member 'FRCParamShinigamiFacialTempleteTableRow::ColorChangePatternIntensity' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, ColorChangePatternIntensityDurationSec) == 0x00008C, "Member 'FRCParamShinigamiFacialTempleteTableRow::ColorChangePatternIntensityDurationSec' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, ColorChangeParamR) == 0x000090, "Member 'FRCParamShinigamiFacialTempleteTableRow::ColorChangeParamR' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, ColorChangeParamG) == 0x000094, "Member 'FRCParamShinigamiFacialTempleteTableRow::ColorChangeParamG' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, ColorChangeParamB) == 0x000098, "Member 'FRCParamShinigamiFacialTempleteTableRow::ColorChangeParamB' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, LipsyncMotionName) == 0x00009C, "Member 'FRCParamShinigamiFacialTempleteTableRow::LipsyncMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, SSweatOn) == 0x0000A4, "Member 'FRCParamShinigamiFacialTempleteTableRow::SSweatOn' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, BSweatOn) == 0x0000A8, "Member 'FRCParamShinigamiFacialTempleteTableRow::BSweatOn' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiFacialTempleteTableRow, TearsOn) == 0x0000AC, "Member 'FRCParamShinigamiFacialTempleteTableRow::TearsOn' has a wrong offset!");

// ScriptStruct RC.RCShinigamiFacialDataRecord
// 0x0050 (0x0050 - 0x0000)
struct FRCShinigamiFacialDataRecord final
{
public:
	TMap<class FName, struct FRCParamShinigamiFacialTempleteTableRow> Records;                                           // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCShinigamiFacialDataRecord) == 0x000008, "Wrong alignment on FRCShinigamiFacialDataRecord");
static_assert(sizeof(FRCShinigamiFacialDataRecord) == 0x000050, "Wrong size on FRCShinigamiFacialDataRecord");
static_assert(offsetof(FRCShinigamiFacialDataRecord, Records) == 0x000000, "Member 'FRCShinigamiFacialDataRecord::Records' has a wrong offset!");

// ScriptStruct RC.RCNzCriminalSceneData
// 0x0010 (0x0010 - 0x0000)
struct FRCNzCriminalSceneData final
{
public:
	int32                                         StartQuestionFontSize;                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainQuestionFontSize;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoveryPoint;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamagePoint;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNzCriminalSceneData) == 0x000004, "Wrong alignment on FRCNzCriminalSceneData");
static_assert(sizeof(FRCNzCriminalSceneData) == 0x000010, "Wrong size on FRCNzCriminalSceneData");
static_assert(offsetof(FRCNzCriminalSceneData, StartQuestionFontSize) == 0x000000, "Member 'FRCNzCriminalSceneData::StartQuestionFontSize' has a wrong offset!");
static_assert(offsetof(FRCNzCriminalSceneData, MainQuestionFontSize) == 0x000004, "Member 'FRCNzCriminalSceneData::MainQuestionFontSize' has a wrong offset!");
static_assert(offsetof(FRCNzCriminalSceneData, RecoveryPoint) == 0x000008, "Member 'FRCNzCriminalSceneData::RecoveryPoint' has a wrong offset!");
static_assert(offsetof(FRCNzCriminalSceneData, DamagePoint) == 0x00000C, "Member 'FRCNzCriminalSceneData::DamagePoint' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterFacialTempleteTableRow
// 0x0088 (0x0090 - 0x0008)
struct FRCParamCharacterFacialTempleteTableRow final : public FTableRowBase
{
public:
	class FName                                   FacialId;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyebrowMorphTarget;                                // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyebrowMorphBlendRate;                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyeMorphTarget;                                    // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeMorphBlendRate;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MouthMorphTarget;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouthMorphBlendRate;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnotherFacialBlendRate;                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyeLPattern;                                       // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyeRPattern;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectLinePattern;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorChangePattern;                                // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangePatternIntensity;                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangePatternIntensityDurationSec;            // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeParamR;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeParamG;                                 // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeParamB;                                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipsyncPattern;                                    // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipsyncMotionName;                                 // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllowBlink;                                        // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SSweatOn;                                          // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BSweatOn;                                          // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TearsOn;                                           // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamCharacterFacialTempleteTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterFacialTempleteTableRow");
static_assert(sizeof(FRCParamCharacterFacialTempleteTableRow) == 0x000090, "Wrong size on FRCParamCharacterFacialTempleteTableRow");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, FacialId) == 0x000008, "Member 'FRCParamCharacterFacialTempleteTableRow::FacialId' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, EyebrowMorphTarget) == 0x000010, "Member 'FRCParamCharacterFacialTempleteTableRow::EyebrowMorphTarget' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, EyebrowMorphBlendRate) == 0x000018, "Member 'FRCParamCharacterFacialTempleteTableRow::EyebrowMorphBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, EyeMorphTarget) == 0x00001C, "Member 'FRCParamCharacterFacialTempleteTableRow::EyeMorphTarget' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, EyeMorphBlendRate) == 0x000024, "Member 'FRCParamCharacterFacialTempleteTableRow::EyeMorphBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, MouthMorphTarget) == 0x000028, "Member 'FRCParamCharacterFacialTempleteTableRow::MouthMorphTarget' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, MouthMorphBlendRate) == 0x000030, "Member 'FRCParamCharacterFacialTempleteTableRow::MouthMorphBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, AnotherFacialBlendRate) == 0x000034, "Member 'FRCParamCharacterFacialTempleteTableRow::AnotherFacialBlendRate' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, EyeLPattern) == 0x000038, "Member 'FRCParamCharacterFacialTempleteTableRow::EyeLPattern' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, EyeRPattern) == 0x000040, "Member 'FRCParamCharacterFacialTempleteTableRow::EyeRPattern' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, EffectLinePattern) == 0x000048, "Member 'FRCParamCharacterFacialTempleteTableRow::EffectLinePattern' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, ColorChangePattern) == 0x000050, "Member 'FRCParamCharacterFacialTempleteTableRow::ColorChangePattern' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, ColorChangePatternIntensity) == 0x000058, "Member 'FRCParamCharacterFacialTempleteTableRow::ColorChangePatternIntensity' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, ColorChangePatternIntensityDurationSec) == 0x00005C, "Member 'FRCParamCharacterFacialTempleteTableRow::ColorChangePatternIntensityDurationSec' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, ColorChangeParamR) == 0x000060, "Member 'FRCParamCharacterFacialTempleteTableRow::ColorChangeParamR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, ColorChangeParamG) == 0x000064, "Member 'FRCParamCharacterFacialTempleteTableRow::ColorChangeParamG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, ColorChangeParamB) == 0x000068, "Member 'FRCParamCharacterFacialTempleteTableRow::ColorChangeParamB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, LipsyncPattern) == 0x00006C, "Member 'FRCParamCharacterFacialTempleteTableRow::LipsyncPattern' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, LipsyncMotionName) == 0x000074, "Member 'FRCParamCharacterFacialTempleteTableRow::LipsyncMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, AllowBlink) == 0x00007C, "Member 'FRCParamCharacterFacialTempleteTableRow::AllowBlink' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, SSweatOn) == 0x000080, "Member 'FRCParamCharacterFacialTempleteTableRow::SSweatOn' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, BSweatOn) == 0x000084, "Member 'FRCParamCharacterFacialTempleteTableRow::BSweatOn' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacialTempleteTableRow, TearsOn) == 0x000088, "Member 'FRCParamCharacterFacialTempleteTableRow::TearsOn' has a wrong offset!");

// ScriptStruct RC.RCCharacterFacialDataRecord
// 0x0050 (0x0050 - 0x0000)
struct FRCCharacterFacialDataRecord final
{
public:
	TMap<class FName, struct FRCParamCharacterFacialTempleteTableRow> Records;                                           // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCCharacterFacialDataRecord) == 0x000008, "Wrong alignment on FRCCharacterFacialDataRecord");
static_assert(sizeof(FRCCharacterFacialDataRecord) == 0x000050, "Wrong size on FRCCharacterFacialDataRecord");
static_assert(offsetof(FRCCharacterFacialDataRecord, Records) == 0x000000, "Member 'FRCCharacterFacialDataRecord::Records' has a wrong offset!");

// ScriptStruct RC.RCParamTitleSubStoryDialogTextTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamTitleSubStoryDialogTextTableRow final : public FTableRowBase
{
public:
	class FName                                   StartCheck;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTitleSubStoryDialogTextTableRow) == 0x000008, "Wrong alignment on FRCParamTitleSubStoryDialogTextTableRow");
static_assert(sizeof(FRCParamTitleSubStoryDialogTextTableRow) == 0x000010, "Wrong size on FRCParamTitleSubStoryDialogTextTableRow");
static_assert(offsetof(FRCParamTitleSubStoryDialogTextTableRow, StartCheck) == 0x000008, "Member 'FRCParamTitleSubStoryDialogTextTableRow::StartCheck' has a wrong offset!");

// ScriptStruct RC.RCCharacterFormStyleData
// 0x0010 (0x0010 - 0x0000)
struct FRCCharacterFormStyleData final
{
public:
	TArray<class FName>                           DeleteMeshName;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterFormStyleData) == 0x000008, "Wrong alignment on FRCCharacterFormStyleData");
static_assert(sizeof(FRCCharacterFormStyleData) == 0x000010, "Wrong size on FRCCharacterFormStyleData");
static_assert(offsetof(FRCCharacterFormStyleData, DeleteMeshName) == 0x000000, "Member 'FRCCharacterFormStyleData::DeleteMeshName' has a wrong offset!");

// ScriptStruct RC.RCCharacterLookSetting
// 0x0014 (0x0014 - 0x0000)
struct FRCCharacterLookSetting final
{
public:
	float                                         NeckWeightSpine1;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckWeightSpine2;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckWeightSpine3;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckWeightNeck;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckWeightHead;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterLookSetting) == 0x000004, "Wrong alignment on FRCCharacterLookSetting");
static_assert(sizeof(FRCCharacterLookSetting) == 0x000014, "Wrong size on FRCCharacterLookSetting");
static_assert(offsetof(FRCCharacterLookSetting, NeckWeightSpine1) == 0x000000, "Member 'FRCCharacterLookSetting::NeckWeightSpine1' has a wrong offset!");
static_assert(offsetof(FRCCharacterLookSetting, NeckWeightSpine2) == 0x000004, "Member 'FRCCharacterLookSetting::NeckWeightSpine2' has a wrong offset!");
static_assert(offsetof(FRCCharacterLookSetting, NeckWeightSpine3) == 0x000008, "Member 'FRCCharacterLookSetting::NeckWeightSpine3' has a wrong offset!");
static_assert(offsetof(FRCCharacterLookSetting, NeckWeightNeck) == 0x00000C, "Member 'FRCCharacterLookSetting::NeckWeightNeck' has a wrong offset!");
static_assert(offsetof(FRCCharacterLookSetting, NeckWeightHead) == 0x000010, "Member 'FRCCharacterLookSetting::NeckWeightHead' has a wrong offset!");

// ScriptStruct RC.RCCharacterLookSettingDataRecord
// 0x0050 (0x0050 - 0x0000)
struct FRCCharacterLookSettingDataRecord final
{
public:
	TMap<class FName, struct FRCCharacterLookSetting> Records;                                           // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRCCharacterLookSettingDataRecord) == 0x000008, "Wrong alignment on FRCCharacterLookSettingDataRecord");
static_assert(sizeof(FRCCharacterLookSettingDataRecord) == 0x000050, "Wrong size on FRCCharacterLookSettingDataRecord");
static_assert(offsetof(FRCCharacterLookSettingDataRecord, Records) == 0x000000, "Member 'FRCCharacterLookSettingDataRecord::Records' has a wrong offset!");

// ScriptStruct RC.RCNzFinaleGamePieceData
// 0x0070 (0x0070 - 0x0000)
struct FRCNzFinaleGamePieceData final
{
public:
	class FName                                   PieceID;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PieceImagePath;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PieceText;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PieceDetailText;                                   // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PieceUsedText;                                     // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PiecePos;                                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PieceType;                                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PieceAnswerID;                                     // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PieceBackgroundID;                                 // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RockNum;                                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPick;                                            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNzFinaleGamePieceData) == 0x000008, "Wrong alignment on FRCNzFinaleGamePieceData");
static_assert(sizeof(FRCNzFinaleGamePieceData) == 0x000070, "Wrong size on FRCNzFinaleGamePieceData");
static_assert(offsetof(FRCNzFinaleGamePieceData, PieceID) == 0x000000, "Member 'FRCNzFinaleGamePieceData::PieceID' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, PieceImagePath) == 0x000008, "Member 'FRCNzFinaleGamePieceData::PieceImagePath' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, PieceText) == 0x000018, "Member 'FRCNzFinaleGamePieceData::PieceText' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, PieceDetailText) == 0x000028, "Member 'FRCNzFinaleGamePieceData::PieceDetailText' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, PieceUsedText) == 0x000038, "Member 'FRCNzFinaleGamePieceData::PieceUsedText' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, PiecePos) == 0x000048, "Member 'FRCNzFinaleGamePieceData::PiecePos' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, PieceType) == 0x000050, "Member 'FRCNzFinaleGamePieceData::PieceType' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, PieceAnswerID) == 0x000054, "Member 'FRCNzFinaleGamePieceData::PieceAnswerID' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, PieceBackgroundID) == 0x00005C, "Member 'FRCNzFinaleGamePieceData::PieceBackgroundID' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, RockNum) == 0x000064, "Member 'FRCNzFinaleGamePieceData::RockNum' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleGamePieceData, isPick) == 0x000068, "Member 'FRCNzFinaleGamePieceData::isPick' has a wrong offset!");

// ScriptStruct RC.RCNzFinaleGameSectionState
// 0x0010 (0x0010 - 0x0000)
struct FRCNzFinaleGameSectionState final
{
public:
	TArray<struct FRCNzFinaleGamePieceData>       pieceList;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNzFinaleGameSectionState) == 0x000008, "Wrong alignment on FRCNzFinaleGameSectionState");
static_assert(sizeof(FRCNzFinaleGameSectionState) == 0x000010, "Wrong size on FRCNzFinaleGameSectionState");
static_assert(offsetof(FRCNzFinaleGameSectionState, pieceList) == 0x000000, "Member 'FRCNzFinaleGameSectionState::pieceList' has a wrong offset!");

// ScriptStruct RC.RCParamTutorialPageListTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamTutorialPageListTableRow final : public FTableRowBase
{
public:
	class FName                                   TutorialPageID;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TitleTextID;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DescTextID;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextureFileName;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ShinigamiVoiceID;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTutorialPageListTableRow) == 0x000008, "Wrong alignment on FRCParamTutorialPageListTableRow");
static_assert(sizeof(FRCParamTutorialPageListTableRow) == 0x000038, "Wrong size on FRCParamTutorialPageListTableRow");
static_assert(offsetof(FRCParamTutorialPageListTableRow, TutorialPageID) == 0x000008, "Member 'FRCParamTutorialPageListTableRow::TutorialPageID' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialPageListTableRow, TitleTextID) == 0x000010, "Member 'FRCParamTutorialPageListTableRow::TitleTextID' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialPageListTableRow, DescTextID) == 0x000018, "Member 'FRCParamTutorialPageListTableRow::DescTextID' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialPageListTableRow, TextureFileName) == 0x000020, "Member 'FRCParamTutorialPageListTableRow::TextureFileName' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialPageListTableRow, ShinigamiVoiceID) == 0x000030, "Member 'FRCParamTutorialPageListTableRow::ShinigamiVoiceID' has a wrong offset!");

// ScriptStruct RC.RCCharacterMotionCategoryData
// 0x0010 (0x0010 - 0x0000)
struct FRCCharacterMotionCategoryData final
{
public:
	class FName                                   MotionCategoryName;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionCategoryNum;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionCategoryIndex;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterMotionCategoryData) == 0x000004, "Wrong alignment on FRCCharacterMotionCategoryData");
static_assert(sizeof(FRCCharacterMotionCategoryData) == 0x000010, "Wrong size on FRCCharacterMotionCategoryData");
static_assert(offsetof(FRCCharacterMotionCategoryData, MotionCategoryName) == 0x000000, "Member 'FRCCharacterMotionCategoryData::MotionCategoryName' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionCategoryData, MotionCategoryNum) == 0x000008, "Member 'FRCCharacterMotionCategoryData::MotionCategoryNum' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionCategoryData, MotionCategoryIndex) == 0x00000C, "Member 'FRCCharacterMotionCategoryData::MotionCategoryIndex' has a wrong offset!");

// ScriptStruct RC.RCMobCharacterMotionGroupData
// 0x0018 (0x0018 - 0x0000)
struct FRCMobCharacterMotionGroupData final
{
public:
	class FName                                   CategoryGroupName;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCCharacterMotionCategoryData> MotionCategoryData;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCMobCharacterMotionGroupData) == 0x000008, "Wrong alignment on FRCMobCharacterMotionGroupData");
static_assert(sizeof(FRCMobCharacterMotionGroupData) == 0x000018, "Wrong size on FRCMobCharacterMotionGroupData");
static_assert(offsetof(FRCMobCharacterMotionGroupData, CategoryGroupName) == 0x000000, "Member 'FRCMobCharacterMotionGroupData::CategoryGroupName' has a wrong offset!");
static_assert(offsetof(FRCMobCharacterMotionGroupData, MotionCategoryData) == 0x000008, "Member 'FRCMobCharacterMotionGroupData::MotionCategoryData' has a wrong offset!");

// ScriptStruct RC.RCMobCharacterMotionMapData
// 0x0018 (0x0018 - 0x0000)
struct FRCMobCharacterMotionMapData final
{
public:
	class FName                                   MapID;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCMobCharacterMotionGroupData> MotionGroupData;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCMobCharacterMotionMapData) == 0x000008, "Wrong alignment on FRCMobCharacterMotionMapData");
static_assert(sizeof(FRCMobCharacterMotionMapData) == 0x000018, "Wrong size on FRCMobCharacterMotionMapData");
static_assert(offsetof(FRCMobCharacterMotionMapData, MapID) == 0x000000, "Member 'FRCMobCharacterMotionMapData::MapID' has a wrong offset!");
static_assert(offsetof(FRCMobCharacterMotionMapData, MotionGroupData) == 0x000008, "Member 'FRCMobCharacterMotionMapData::MotionGroupData' has a wrong offset!");

// ScriptStruct RC.RCMobCharacterMotionData
// 0x0040 (0x0040 - 0x0000)
struct FRCMobCharacterMotionData final
{
public:
	TArray<struct FRCMobCharacterMotionMapData>   MotionMapData;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MotionPathData;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x20];                                      // 0x0020(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCMobCharacterMotionData) == 0x000008, "Wrong alignment on FRCMobCharacterMotionData");
static_assert(sizeof(FRCMobCharacterMotionData) == 0x000040, "Wrong size on FRCMobCharacterMotionData");
static_assert(offsetof(FRCMobCharacterMotionData, MotionMapData) == 0x000000, "Member 'FRCMobCharacterMotionData::MotionMapData' has a wrong offset!");
static_assert(offsetof(FRCMobCharacterMotionData, MotionPathData) == 0x000010, "Member 'FRCMobCharacterMotionData::MotionPathData' has a wrong offset!");

// ScriptStruct RC.RCNazoPlayableLoopLSACameraData
// 0x0008 (0x0020 - 0x0018)
struct FRCNazoPlayableLoopLSACameraData final : public FRCNazoLoopLSACameraData
{
public:
	class AActor*                                 Camera;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoPlayableLoopLSACameraData) == 0x000008, "Wrong alignment on FRCNazoPlayableLoopLSACameraData");
static_assert(sizeof(FRCNazoPlayableLoopLSACameraData) == 0x000020, "Wrong size on FRCNazoPlayableLoopLSACameraData");
static_assert(offsetof(FRCNazoPlayableLoopLSACameraData, Camera) == 0x000018, "Member 'FRCNazoPlayableLoopLSACameraData::Camera' has a wrong offset!");

// ScriptStruct RC.RCNzFinalePieceObjectInfo
// 0x0058 (0x0058 - 0x0000)
struct FRCNzFinalePieceObjectInfo final
{
public:
	class FName                                   PieceID;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PieceName;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PieceText;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UsedPieceText;                                     // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               PieceImage;                                        // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PieceImagePath;                                    // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPick;                                            // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RockNum;                                           // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNzFinalePieceObjectInfo) == 0x000008, "Wrong alignment on FRCNzFinalePieceObjectInfo");
static_assert(sizeof(FRCNzFinalePieceObjectInfo) == 0x000058, "Wrong size on FRCNzFinalePieceObjectInfo");
static_assert(offsetof(FRCNzFinalePieceObjectInfo, PieceID) == 0x000000, "Member 'FRCNzFinalePieceObjectInfo::PieceID' has a wrong offset!");
static_assert(offsetof(FRCNzFinalePieceObjectInfo, PieceName) == 0x000008, "Member 'FRCNzFinalePieceObjectInfo::PieceName' has a wrong offset!");
static_assert(offsetof(FRCNzFinalePieceObjectInfo, PieceText) == 0x000018, "Member 'FRCNzFinalePieceObjectInfo::PieceText' has a wrong offset!");
static_assert(offsetof(FRCNzFinalePieceObjectInfo, UsedPieceText) == 0x000028, "Member 'FRCNzFinalePieceObjectInfo::UsedPieceText' has a wrong offset!");
static_assert(offsetof(FRCNzFinalePieceObjectInfo, PieceImage) == 0x000038, "Member 'FRCNzFinalePieceObjectInfo::PieceImage' has a wrong offset!");
static_assert(offsetof(FRCNzFinalePieceObjectInfo, PieceImagePath) == 0x000040, "Member 'FRCNzFinalePieceObjectInfo::PieceImagePath' has a wrong offset!");
static_assert(offsetof(FRCNzFinalePieceObjectInfo, isPick) == 0x000050, "Member 'FRCNzFinalePieceObjectInfo::isPick' has a wrong offset!");
static_assert(offsetof(FRCNzFinalePieceObjectInfo, RockNum) == 0x000054, "Member 'FRCNzFinalePieceObjectInfo::RockNum' has a wrong offset!");

// ScriptStruct RC.RCParamVehicleTableRow
// 0x0068 (0x0070 - 0x0008)
struct FRCParamVehicleTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddSpeed;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAddSpeed;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 UpLaneRate;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DownLaneRate;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 InitPlate1Rate;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 InitPlate2Rate;                                    // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 InitPlate3Rate;                                    // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamVehicleTableRow) == 0x000008, "Wrong alignment on FRCParamVehicleTableRow");
static_assert(sizeof(FRCParamVehicleTableRow) == 0x000070, "Wrong size on FRCParamVehicleTableRow");
static_assert(offsetof(FRCParamVehicleTableRow, MapID) == 0x000008, "Member 'FRCParamVehicleTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamVehicleTableRow, Speed) == 0x000010, "Member 'FRCParamVehicleTableRow::Speed' has a wrong offset!");
static_assert(offsetof(FRCParamVehicleTableRow, MaxSpeed) == 0x000014, "Member 'FRCParamVehicleTableRow::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamVehicleTableRow, AddSpeed) == 0x000018, "Member 'FRCParamVehicleTableRow::AddSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamVehicleTableRow, MaxAddSpeed) == 0x00001C, "Member 'FRCParamVehicleTableRow::MaxAddSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamVehicleTableRow, UpLaneRate) == 0x000020, "Member 'FRCParamVehicleTableRow::UpLaneRate' has a wrong offset!");
static_assert(offsetof(FRCParamVehicleTableRow, DownLaneRate) == 0x000030, "Member 'FRCParamVehicleTableRow::DownLaneRate' has a wrong offset!");
static_assert(offsetof(FRCParamVehicleTableRow, InitPlate1Rate) == 0x000040, "Member 'FRCParamVehicleTableRow::InitPlate1Rate' has a wrong offset!");
static_assert(offsetof(FRCParamVehicleTableRow, InitPlate2Rate) == 0x000050, "Member 'FRCParamVehicleTableRow::InitPlate2Rate' has a wrong offset!");
static_assert(offsetof(FRCParamVehicleTableRow, InitPlate3Rate) == 0x000060, "Member 'FRCParamVehicleTableRow::InitPlate3Rate' has a wrong offset!");

// ScriptStruct RC.RCCharacterMotionData
// 0x0030 (0x0030 - 0x0000)
struct FRCCharacterMotionData final
{
public:
	TArray<struct FRCCharacterMotionCategoryData> MotionCategoryData;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MotionPathData;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCCharacterMotionData) == 0x000008, "Wrong alignment on FRCCharacterMotionData");
static_assert(sizeof(FRCCharacterMotionData) == 0x000030, "Wrong size on FRCCharacterMotionData");
static_assert(offsetof(FRCCharacterMotionData, MotionCategoryData) == 0x000000, "Member 'FRCCharacterMotionData::MotionCategoryData' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionData, MotionPathData) == 0x000010, "Member 'FRCCharacterMotionData::MotionPathData' has a wrong offset!");

// ScriptStruct RC.RCNazoLoopLSAPlayerData
// 0x0048 (0x0048 - 0x0000)
struct FRCNazoLoopLSAPlayerData
{
public:
	class ARCNazoPlayerController*                PC;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCNazoPlayerCharacter*                 Player;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LoopDistance;                                      // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarp;                                             // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspendClothingSimulation;                        // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowResumeClothingSimulation;                    // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         ClothMeshCompArray;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoLoopLSAPlayerData) == 0x000008, "Wrong alignment on FRCNazoLoopLSAPlayerData");
static_assert(sizeof(FRCNazoLoopLSAPlayerData) == 0x000048, "Wrong size on FRCNazoLoopLSAPlayerData");
static_assert(offsetof(FRCNazoLoopLSAPlayerData, PC) == 0x000000, "Member 'FRCNazoLoopLSAPlayerData::PC' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAPlayerData, Player) == 0x000008, "Member 'FRCNazoLoopLSAPlayerData::Player' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAPlayerData, Location) == 0x000010, "Member 'FRCNazoLoopLSAPlayerData::Location' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAPlayerData, LoopDistance) == 0x00001C, "Member 'FRCNazoLoopLSAPlayerData::LoopDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAPlayerData, StartLocation) == 0x000028, "Member 'FRCNazoLoopLSAPlayerData::StartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAPlayerData, bWarp) == 0x000034, "Member 'FRCNazoLoopLSAPlayerData::bWarp' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAPlayerData, bSuspendClothingSimulation) == 0x000035, "Member 'FRCNazoLoopLSAPlayerData::bSuspendClothingSimulation' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAPlayerData, bAllowResumeClothingSimulation) == 0x000036, "Member 'FRCNazoLoopLSAPlayerData::bAllowResumeClothingSimulation' has a wrong offset!");
static_assert(offsetof(FRCNazoLoopLSAPlayerData, ClothMeshCompArray) == 0x000038, "Member 'FRCNazoLoopLSAPlayerData::ClothMeshCompArray' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSAPlayerData
// 0x0048 (0x0090 - 0x0048)
struct FRCNazoMoveLoopLSAPlayerData final : public FRCNazoLoopLSAPlayerData
{
public:
	struct FVector                                BeginLocation;                                     // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveDirection;                                     // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveDirection2D;                                   // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveEndLocation;                                   // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeedTarget;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeedChangeSpeed;                              // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveDelta;                                         // 0x0084(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMoveLoopLSAPlayerData) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSAPlayerData");
static_assert(sizeof(FRCNazoMoveLoopLSAPlayerData) == 0x000090, "Wrong size on FRCNazoMoveLoopLSAPlayerData");
static_assert(offsetof(FRCNazoMoveLoopLSAPlayerData, BeginLocation) == 0x000048, "Member 'FRCNazoMoveLoopLSAPlayerData::BeginLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSAPlayerData, MoveDirection) == 0x000054, "Member 'FRCNazoMoveLoopLSAPlayerData::MoveDirection' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSAPlayerData, MoveDirection2D) == 0x000060, "Member 'FRCNazoMoveLoopLSAPlayerData::MoveDirection2D' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSAPlayerData, MoveEndLocation) == 0x00006C, "Member 'FRCNazoMoveLoopLSAPlayerData::MoveEndLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSAPlayerData, MoveSpeed) == 0x000078, "Member 'FRCNazoMoveLoopLSAPlayerData::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSAPlayerData, MoveSpeedTarget) == 0x00007C, "Member 'FRCNazoMoveLoopLSAPlayerData::MoveSpeedTarget' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSAPlayerData, MoveSpeedChangeSpeed) == 0x000080, "Member 'FRCNazoMoveLoopLSAPlayerData::MoveSpeedChangeSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSAPlayerData, MoveDelta) == 0x000084, "Member 'FRCNazoMoveLoopLSAPlayerData::MoveDelta' has a wrong offset!");

// ScriptStruct RC.RCCharacterMotionDataTableRecord
// 0x0020 (0x0020 - 0x0000)
struct FRCCharacterMotionDataTableRecord final
{
public:
	EMotionSplitType                              SplitType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterMotionDataTableRecord) == 0x000008, "Wrong alignment on FRCCharacterMotionDataTableRecord");
static_assert(sizeof(FRCCharacterMotionDataTableRecord) == 0x000020, "Wrong size on FRCCharacterMotionDataTableRecord");
static_assert(offsetof(FRCCharacterMotionDataTableRecord, SplitType) == 0x000000, "Member 'FRCCharacterMotionDataTableRecord::SplitType' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionDataTableRecord, Name) == 0x000008, "Member 'FRCCharacterMotionDataTableRecord::Name' has a wrong offset!");

// ScriptStruct RC.RCCharacterMotionDataTableStructRow
// 0x0010 (0x0018 - 0x0008)
struct FRCCharacterMotionDataTableStructRow final : public FTableRowBase
{
public:
	class FString                                 SplitType;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterMotionDataTableStructRow) == 0x000008, "Wrong alignment on FRCCharacterMotionDataTableStructRow");
static_assert(sizeof(FRCCharacterMotionDataTableStructRow) == 0x000018, "Wrong size on FRCCharacterMotionDataTableStructRow");
static_assert(offsetof(FRCCharacterMotionDataTableStructRow, SplitType) == 0x000008, "Member 'FRCCharacterMotionDataTableStructRow::SplitType' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSAPlayerData
// 0x0210 (0x0210 - 0x0000)
struct FRCNazoBattleLSAPlayerData final
{
public:
	class ARCNazoPlayerController*                PC;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCNazoPlayerCharacter*                 Player;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCCharacterAnimCtrl*                   AnimCtrl;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       Collision;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       HeadCollision;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       FootLCollision;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       FootRCollision;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCAttachmentActor*                     Sword;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          SwordCollision;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           SwordCollisionTimerHandle;                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwordCanHit;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SwordSlashLocation;                                // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SwordPrevSlashLocation;                            // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0xC];                                       // 0x006C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Skill_RebuttalLetterSpeedDown;                     // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Skill_RebuttalLetterSpeedRate;                     // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Skill_RebuttalLetterAccRate;                       // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Skill_RebuttalLetterIntervalTimeRate;              // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_KaiKagiNumDown;                              // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_AssistWaitTimeDown;                          // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_RepelLetterColor;                            // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurrentFramePlayedMotionName;                      // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentFramePlayedMotionBeforeUseSlot;             // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrevFramePlayedMotionName;                         // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevFramePlayedMotionBeforeUseSlot;                // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneShotMotion;                                    // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OneShotMotionName;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackMotionName;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionHalfHeight;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BaseLocation;                                      // 0x00C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveLRDistance;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftLocation;                                      // 0x00D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightLocation;                                     // 0x00E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeft;                                             // 0x00EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveLR;                                           // 0x00ED(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE[0x2];                                       // 0x00EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveLRTime;                                        // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveLRDuration;                                    // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveLRRate;                                        // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            MoveLCurve;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MoveRCurve;                                        // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpGravity;                                       // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumping;                                          // 0x0114(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpInitialVelocity;                               // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDuration;                                      // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            JumpCurve;                                         // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           JumpTimerHandle;                                   // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFalling;                                          // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDive;                                             // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallInitialVelocity;                               // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiveSpeedRate;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartFallingLocation;                              // 0x013C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallDuration;                                      // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrouching;                                        // 0x014C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrouchFinish;                                     // 0x014D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E[0x2];                                      // 0x014E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CrouchTimerHandle;                                 // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackCount;                                       // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackPlayRate;                                    // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           AttackTimerHandle;                                 // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisturbSlashEnable;                               // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisturbSlash;                                     // 0x0169(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinuousAttack;                                 // 0x016A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinuousAttackEnable;                           // 0x016B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContinuousAttackCount;                             // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           ContinuousAttackTimerDelayHandle;                  // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           ContinuousAttackTimerHandle;                       // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanJustAvoid;                                     // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidanceAttack;                                  // 0x0181(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidanceAttackEnable;                            // 0x0182(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183[0x5];                                      // 0x0183(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           AvoidanceAttackTimerDelayHandle;                   // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           AvoidanceAttackTimerHandle;                        // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         JustAvoidEffect;                                   // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      JustAvoidEffectComp;                               // 0x01A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackFailureCount;                                // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitCount;                                          // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDead;                                             // 0x01B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnrival;                                          // 0x01B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnrivalPaused;                                    // 0x01B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3[0x1];                                      // 0x01B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnrivalTime;                                       // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnrivalDuration;                                   // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         UnrivalEffectIn;                                   // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         UnrivalEffectLp;                                   // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         UnrivalEffectOt;                                   // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      UnrivalEffectInComp;                               // 0x01D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      UnrivalEffectLpComp;                               // 0x01E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      UnrivalEffectOtComp;                               // 0x01E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnrivalEffect;                                    // 0x01F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnrivalEffectTime;                                 // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnrivalEffectDuration;                             // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnrivalEffectColor;                                // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnrivalJingle;                                    // 0x0200(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnrivalJingleTime;                                 // 0x0204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnrivalJingleDuration;                             // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleLSAPlayerData) == 0x000008, "Wrong alignment on FRCNazoBattleLSAPlayerData");
static_assert(sizeof(FRCNazoBattleLSAPlayerData) == 0x000210, "Wrong size on FRCNazoBattleLSAPlayerData");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, PC) == 0x000000, "Member 'FRCNazoBattleLSAPlayerData::PC' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Player) == 0x000008, "Member 'FRCNazoBattleLSAPlayerData::Player' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, AnimCtrl) == 0x000010, "Member 'FRCNazoBattleLSAPlayerData::AnimCtrl' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Collision) == 0x000018, "Member 'FRCNazoBattleLSAPlayerData::Collision' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, HeadCollision) == 0x000020, "Member 'FRCNazoBattleLSAPlayerData::HeadCollision' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, FootLCollision) == 0x000028, "Member 'FRCNazoBattleLSAPlayerData::FootLCollision' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, FootRCollision) == 0x000030, "Member 'FRCNazoBattleLSAPlayerData::FootRCollision' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Sword) == 0x000038, "Member 'FRCNazoBattleLSAPlayerData::Sword' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, SwordCollision) == 0x000040, "Member 'FRCNazoBattleLSAPlayerData::SwordCollision' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, SwordCollisionTimerHandle) == 0x000048, "Member 'FRCNazoBattleLSAPlayerData::SwordCollisionTimerHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bSwordCanHit) == 0x000050, "Member 'FRCNazoBattleLSAPlayerData::bSwordCanHit' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, SwordSlashLocation) == 0x000054, "Member 'FRCNazoBattleLSAPlayerData::SwordSlashLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, SwordPrevSlashLocation) == 0x000060, "Member 'FRCNazoBattleLSAPlayerData::SwordPrevSlashLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Skill_RebuttalLetterSpeedDown) == 0x000078, "Member 'FRCNazoBattleLSAPlayerData::Skill_RebuttalLetterSpeedDown' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Skill_RebuttalLetterSpeedRate) == 0x00007C, "Member 'FRCNazoBattleLSAPlayerData::Skill_RebuttalLetterSpeedRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Skill_RebuttalLetterAccRate) == 0x000080, "Member 'FRCNazoBattleLSAPlayerData::Skill_RebuttalLetterAccRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Skill_RebuttalLetterIntervalTimeRate) == 0x000084, "Member 'FRCNazoBattleLSAPlayerData::Skill_RebuttalLetterIntervalTimeRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Skill_KaiKagiNumDown) == 0x000088, "Member 'FRCNazoBattleLSAPlayerData::Skill_KaiKagiNumDown' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Skill_AssistWaitTimeDown) == 0x00008C, "Member 'FRCNazoBattleLSAPlayerData::Skill_AssistWaitTimeDown' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, Skill_RepelLetterColor) == 0x000090, "Member 'FRCNazoBattleLSAPlayerData::Skill_RepelLetterColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, CurrentFramePlayedMotionName) == 0x000094, "Member 'FRCNazoBattleLSAPlayerData::CurrentFramePlayedMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, CurrentFramePlayedMotionBeforeUseSlot) == 0x00009C, "Member 'FRCNazoBattleLSAPlayerData::CurrentFramePlayedMotionBeforeUseSlot' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, PrevFramePlayedMotionName) == 0x0000A0, "Member 'FRCNazoBattleLSAPlayerData::PrevFramePlayedMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, PrevFramePlayedMotionBeforeUseSlot) == 0x0000A8, "Member 'FRCNazoBattleLSAPlayerData::PrevFramePlayedMotionBeforeUseSlot' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bOneShotMotion) == 0x0000AC, "Member 'FRCNazoBattleLSAPlayerData::bOneShotMotion' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, OneShotMotionName) == 0x0000B0, "Member 'FRCNazoBattleLSAPlayerData::OneShotMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, AttackMotionName) == 0x0000B8, "Member 'FRCNazoBattleLSAPlayerData::AttackMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, CollisionHalfHeight) == 0x0000C0, "Member 'FRCNazoBattleLSAPlayerData::CollisionHalfHeight' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, BaseLocation) == 0x0000C4, "Member 'FRCNazoBattleLSAPlayerData::BaseLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, MoveLRDistance) == 0x0000D0, "Member 'FRCNazoBattleLSAPlayerData::MoveLRDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, LeftLocation) == 0x0000D4, "Member 'FRCNazoBattleLSAPlayerData::LeftLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, RightLocation) == 0x0000E0, "Member 'FRCNazoBattleLSAPlayerData::RightLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bLeft) == 0x0000EC, "Member 'FRCNazoBattleLSAPlayerData::bLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bMoveLR) == 0x0000ED, "Member 'FRCNazoBattleLSAPlayerData::bMoveLR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, MoveLRTime) == 0x0000F0, "Member 'FRCNazoBattleLSAPlayerData::MoveLRTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, MoveLRDuration) == 0x0000F4, "Member 'FRCNazoBattleLSAPlayerData::MoveLRDuration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, MoveLRRate) == 0x0000F8, "Member 'FRCNazoBattleLSAPlayerData::MoveLRRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, MoveLCurve) == 0x000100, "Member 'FRCNazoBattleLSAPlayerData::MoveLCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, MoveRCurve) == 0x000108, "Member 'FRCNazoBattleLSAPlayerData::MoveRCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, JumpGravity) == 0x000110, "Member 'FRCNazoBattleLSAPlayerData::JumpGravity' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bJumping) == 0x000114, "Member 'FRCNazoBattleLSAPlayerData::bJumping' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, JumpInitialVelocity) == 0x000118, "Member 'FRCNazoBattleLSAPlayerData::JumpInitialVelocity' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, JumpDuration) == 0x00011C, "Member 'FRCNazoBattleLSAPlayerData::JumpDuration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, JumpCurve) == 0x000120, "Member 'FRCNazoBattleLSAPlayerData::JumpCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, JumpTimerHandle) == 0x000128, "Member 'FRCNazoBattleLSAPlayerData::JumpTimerHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bFalling) == 0x000130, "Member 'FRCNazoBattleLSAPlayerData::bFalling' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bDive) == 0x000131, "Member 'FRCNazoBattleLSAPlayerData::bDive' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, FallInitialVelocity) == 0x000134, "Member 'FRCNazoBattleLSAPlayerData::FallInitialVelocity' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, DiveSpeedRate) == 0x000138, "Member 'FRCNazoBattleLSAPlayerData::DiveSpeedRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, StartFallingLocation) == 0x00013C, "Member 'FRCNazoBattleLSAPlayerData::StartFallingLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, FallDuration) == 0x000148, "Member 'FRCNazoBattleLSAPlayerData::FallDuration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bCrouching) == 0x00014C, "Member 'FRCNazoBattleLSAPlayerData::bCrouching' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bCrouchFinish) == 0x00014D, "Member 'FRCNazoBattleLSAPlayerData::bCrouchFinish' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, CrouchTimerHandle) == 0x000150, "Member 'FRCNazoBattleLSAPlayerData::CrouchTimerHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, AttackCount) == 0x000158, "Member 'FRCNazoBattleLSAPlayerData::AttackCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, AttackPlayRate) == 0x00015C, "Member 'FRCNazoBattleLSAPlayerData::AttackPlayRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, AttackTimerHandle) == 0x000160, "Member 'FRCNazoBattleLSAPlayerData::AttackTimerHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bDisturbSlashEnable) == 0x000168, "Member 'FRCNazoBattleLSAPlayerData::bDisturbSlashEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bDisturbSlash) == 0x000169, "Member 'FRCNazoBattleLSAPlayerData::bDisturbSlash' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bContinuousAttack) == 0x00016A, "Member 'FRCNazoBattleLSAPlayerData::bContinuousAttack' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bContinuousAttackEnable) == 0x00016B, "Member 'FRCNazoBattleLSAPlayerData::bContinuousAttackEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, ContinuousAttackCount) == 0x00016C, "Member 'FRCNazoBattleLSAPlayerData::ContinuousAttackCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, ContinuousAttackTimerDelayHandle) == 0x000170, "Member 'FRCNazoBattleLSAPlayerData::ContinuousAttackTimerDelayHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, ContinuousAttackTimerHandle) == 0x000178, "Member 'FRCNazoBattleLSAPlayerData::ContinuousAttackTimerHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bCanJustAvoid) == 0x000180, "Member 'FRCNazoBattleLSAPlayerData::bCanJustAvoid' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bAvoidanceAttack) == 0x000181, "Member 'FRCNazoBattleLSAPlayerData::bAvoidanceAttack' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bAvoidanceAttackEnable) == 0x000182, "Member 'FRCNazoBattleLSAPlayerData::bAvoidanceAttackEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, AvoidanceAttackTimerDelayHandle) == 0x000188, "Member 'FRCNazoBattleLSAPlayerData::AvoidanceAttackTimerDelayHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, AvoidanceAttackTimerHandle) == 0x000190, "Member 'FRCNazoBattleLSAPlayerData::AvoidanceAttackTimerHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, JustAvoidEffect) == 0x000198, "Member 'FRCNazoBattleLSAPlayerData::JustAvoidEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, JustAvoidEffectComp) == 0x0001A0, "Member 'FRCNazoBattleLSAPlayerData::JustAvoidEffectComp' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, AttackFailureCount) == 0x0001A8, "Member 'FRCNazoBattleLSAPlayerData::AttackFailureCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, HitCount) == 0x0001AC, "Member 'FRCNazoBattleLSAPlayerData::HitCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bDead) == 0x0001B0, "Member 'FRCNazoBattleLSAPlayerData::bDead' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bUnrival) == 0x0001B1, "Member 'FRCNazoBattleLSAPlayerData::bUnrival' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bUnrivalPaused) == 0x0001B2, "Member 'FRCNazoBattleLSAPlayerData::bUnrivalPaused' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalTime) == 0x0001B4, "Member 'FRCNazoBattleLSAPlayerData::UnrivalTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalDuration) == 0x0001B8, "Member 'FRCNazoBattleLSAPlayerData::UnrivalDuration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalEffectIn) == 0x0001C0, "Member 'FRCNazoBattleLSAPlayerData::UnrivalEffectIn' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalEffectLp) == 0x0001C8, "Member 'FRCNazoBattleLSAPlayerData::UnrivalEffectLp' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalEffectOt) == 0x0001D0, "Member 'FRCNazoBattleLSAPlayerData::UnrivalEffectOt' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalEffectInComp) == 0x0001D8, "Member 'FRCNazoBattleLSAPlayerData::UnrivalEffectInComp' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalEffectLpComp) == 0x0001E0, "Member 'FRCNazoBattleLSAPlayerData::UnrivalEffectLpComp' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalEffectOtComp) == 0x0001E8, "Member 'FRCNazoBattleLSAPlayerData::UnrivalEffectOtComp' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bUnrivalEffect) == 0x0001F0, "Member 'FRCNazoBattleLSAPlayerData::bUnrivalEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalEffectTime) == 0x0001F4, "Member 'FRCNazoBattleLSAPlayerData::UnrivalEffectTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalEffectDuration) == 0x0001F8, "Member 'FRCNazoBattleLSAPlayerData::UnrivalEffectDuration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalEffectColor) == 0x0001FC, "Member 'FRCNazoBattleLSAPlayerData::UnrivalEffectColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, bUnrivalJingle) == 0x000200, "Member 'FRCNazoBattleLSAPlayerData::bUnrivalJingle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalJingleTime) == 0x000204, "Member 'FRCNazoBattleLSAPlayerData::UnrivalJingleTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerData, UnrivalJingleDuration) == 0x000208, "Member 'FRCNazoBattleLSAPlayerData::UnrivalJingleDuration' has a wrong offset!");

// ScriptStruct RC.RCCharacterMotionContent
// 0x00A0 (0x00A0 - 0x0000)
struct FRCCharacterMotionContent final
{
public:
	EMotionSplitType                              SplitType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimSequence>           InMotion;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           LoopMotion;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           OutMotion;                                         // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionAssetPath;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopMotionAssetPath;                               // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutMotionAssetPath;                                // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCKakiwariMotionType                         KakiwariMotionType;                                // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCCharacterMotionContent) == 0x000008, "Wrong alignment on FRCCharacterMotionContent");
static_assert(sizeof(FRCCharacterMotionContent) == 0x0000A0, "Wrong size on FRCCharacterMotionContent");
static_assert(offsetof(FRCCharacterMotionContent, SplitType) == 0x000000, "Member 'FRCCharacterMotionContent::SplitType' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionContent, InMotion) == 0x000008, "Member 'FRCCharacterMotionContent::InMotion' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionContent, LoopMotion) == 0x000030, "Member 'FRCCharacterMotionContent::LoopMotion' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionContent, OutMotion) == 0x000058, "Member 'FRCCharacterMotionContent::OutMotion' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionContent, InMotionAssetPath) == 0x000080, "Member 'FRCCharacterMotionContent::InMotionAssetPath' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionContent, LoopMotionAssetPath) == 0x000088, "Member 'FRCCharacterMotionContent::LoopMotionAssetPath' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionContent, OutMotionAssetPath) == 0x000090, "Member 'FRCCharacterMotionContent::OutMotionAssetPath' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionContent, KakiwariMotionType) == 0x000098, "Member 'FRCCharacterMotionContent::KakiwariMotionType' has a wrong offset!");

// ScriptStruct RC.RCCharacterMotionUniqueContent
// 0x00A8 (0x00A8 - 0x0000)
struct FRCCharacterMotionUniqueContent final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCCharacterMotionContent              UniqueContent;                                     // 0x0008(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterMotionUniqueContent) == 0x000008, "Wrong alignment on FRCCharacterMotionUniqueContent");
static_assert(sizeof(FRCCharacterMotionUniqueContent) == 0x0000A8, "Wrong size on FRCCharacterMotionUniqueContent");
static_assert(offsetof(FRCCharacterMotionUniqueContent, MotionName) == 0x000000, "Member 'FRCCharacterMotionUniqueContent::MotionName' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionUniqueContent, UniqueContent) == 0x000008, "Member 'FRCCharacterMotionUniqueContent::UniqueContent' has a wrong offset!");

// ScriptStruct RC.RCCharacterMotionUniqueContentScene
// 0x0010 (0x0010 - 0x0000)
struct FRCCharacterMotionUniqueContentScene final
{
public:
	TArray<struct FRCCharacterMotionUniqueContent> SceneUniqueContent;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterMotionUniqueContentScene) == 0x000008, "Wrong alignment on FRCCharacterMotionUniqueContentScene");
static_assert(sizeof(FRCCharacterMotionUniqueContentScene) == 0x000010, "Wrong size on FRCCharacterMotionUniqueContentScene");
static_assert(offsetof(FRCCharacterMotionUniqueContentScene, SceneUniqueContent) == 0x000000, "Member 'FRCCharacterMotionUniqueContentScene::SceneUniqueContent' has a wrong offset!");

// ScriptStruct RC.RCNzFinaleEditableSpawnPieceData
// 0x0048 (0x0048 - 0x0000)
struct FRCNzFinaleEditableSpawnPieceData final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ImagePath;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameTextID;                                        // 0x0024(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DetailTextID;                                      // 0x002C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PieceAnswerID;                                     // 0x0034(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PieceID;                                           // 0x003C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNzFinaleEditableSpawnPieceData) == 0x000008, "Wrong alignment on FRCNzFinaleEditableSpawnPieceData");
static_assert(sizeof(FRCNzFinaleEditableSpawnPieceData) == 0x000048, "Wrong size on FRCNzFinaleEditableSpawnPieceData");
static_assert(offsetof(FRCNzFinaleEditableSpawnPieceData, Loc) == 0x000000, "Member 'FRCNzFinaleEditableSpawnPieceData::Loc' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleEditableSpawnPieceData, ImagePath) == 0x000010, "Member 'FRCNzFinaleEditableSpawnPieceData::ImagePath' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleEditableSpawnPieceData, Type) == 0x000020, "Member 'FRCNzFinaleEditableSpawnPieceData::Type' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleEditableSpawnPieceData, NameTextID) == 0x000024, "Member 'FRCNzFinaleEditableSpawnPieceData::NameTextID' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleEditableSpawnPieceData, DetailTextID) == 0x00002C, "Member 'FRCNzFinaleEditableSpawnPieceData::DetailTextID' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleEditableSpawnPieceData, PieceAnswerID) == 0x000034, "Member 'FRCNzFinaleEditableSpawnPieceData::PieceAnswerID' has a wrong offset!");
static_assert(offsetof(FRCNzFinaleEditableSpawnPieceData, PieceID) == 0x00003C, "Member 'FRCNzFinaleEditableSpawnPieceData::PieceID' has a wrong offset!");

// ScriptStruct RC.RCCharacterMotionMasterBasicContent
// 0x00A8 (0x00A8 - 0x0000)
struct FRCCharacterMotionMasterBasicContent final
{
public:
	class FName                                   ChapterSceneName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCCharacterMotionContent              MasterBasicContent;                                // 0x0008(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterMotionMasterBasicContent) == 0x000008, "Wrong alignment on FRCCharacterMotionMasterBasicContent");
static_assert(sizeof(FRCCharacterMotionMasterBasicContent) == 0x0000A8, "Wrong size on FRCCharacterMotionMasterBasicContent");
static_assert(offsetof(FRCCharacterMotionMasterBasicContent, ChapterSceneName) == 0x000000, "Member 'FRCCharacterMotionMasterBasicContent::ChapterSceneName' has a wrong offset!");
static_assert(offsetof(FRCCharacterMotionMasterBasicContent, MasterBasicContent) == 0x000008, "Member 'FRCCharacterMotionMasterBasicContent::MasterBasicContent' has a wrong offset!");

// ScriptStruct RC.RCCharacterMasterBasicContentMotionName
// 0x0010 (0x0010 - 0x0000)
struct FRCCharacterMasterBasicContentMotionName final
{
public:
	TArray<struct FRCCharacterMotionMasterBasicContent> MasterBasicContent;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterMasterBasicContentMotionName) == 0x000008, "Wrong alignment on FRCCharacterMasterBasicContentMotionName");
static_assert(sizeof(FRCCharacterMasterBasicContentMotionName) == 0x000010, "Wrong size on FRCCharacterMasterBasicContentMotionName");
static_assert(offsetof(FRCCharacterMasterBasicContentMotionName, MasterBasicContent) == 0x000000, "Member 'FRCCharacterMasterBasicContentMotionName::MasterBasicContent' has a wrong offset!");

// ScriptStruct RC.RCNazoTileLevelSettingsBG
// 0x0040 (0x0048 - 0x0008)
struct FRCNazoTileLevelSettingsBG final : public FTableRowBase
{
public:
	class FName                                   TileID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelFolderPath;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         LevelNameArray;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TileActorTagArray;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   FrontWallActorTag;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoTileLevelSettingsBG) == 0x000008, "Wrong alignment on FRCNazoTileLevelSettingsBG");
static_assert(sizeof(FRCNazoTileLevelSettingsBG) == 0x000048, "Wrong size on FRCNazoTileLevelSettingsBG");
static_assert(offsetof(FRCNazoTileLevelSettingsBG, TileID) == 0x000008, "Member 'FRCNazoTileLevelSettingsBG::TileID' has a wrong offset!");
static_assert(offsetof(FRCNazoTileLevelSettingsBG, LevelFolderPath) == 0x000010, "Member 'FRCNazoTileLevelSettingsBG::LevelFolderPath' has a wrong offset!");
static_assert(offsetof(FRCNazoTileLevelSettingsBG, LevelNameArray) == 0x000020, "Member 'FRCNazoTileLevelSettingsBG::LevelNameArray' has a wrong offset!");
static_assert(offsetof(FRCNazoTileLevelSettingsBG, TileActorTagArray) == 0x000030, "Member 'FRCNazoTileLevelSettingsBG::TileActorTagArray' has a wrong offset!");
static_assert(offsetof(FRCNazoTileLevelSettingsBG, FrontWallActorTag) == 0x000040, "Member 'FRCNazoTileLevelSettingsBG::FrontWallActorTag' has a wrong offset!");

// ScriptStruct RC.RCNazoTileData
// 0x0070 (0x0070 - 0x0000)
struct FRCNazoTileData final
{
public:
	struct FRCNazoTileSettingsBG                  TileSettings;                                      // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRCNazoTileLevelSettingsBG             TileLevelSettings;                                 // 0x0028(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoTileData) == 0x000008, "Wrong alignment on FRCNazoTileData");
static_assert(sizeof(FRCNazoTileData) == 0x000070, "Wrong size on FRCNazoTileData");
static_assert(offsetof(FRCNazoTileData, TileSettings) == 0x000000, "Member 'FRCNazoTileData::TileSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoTileData, TileLevelSettings) == 0x000028, "Member 'FRCNazoTileData::TileLevelSettings' has a wrong offset!");

// ScriptStruct RC.RCCharacterProxySortInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCCharacterProxySortInfo final
{
public:
	class URCCharacterProxy*                      CharacterProxy;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCCharacterProxySortInfo) == 0x000008, "Wrong alignment on FRCCharacterProxySortInfo");
static_assert(sizeof(FRCCharacterProxySortInfo) == 0x000010, "Wrong size on FRCCharacterProxySortInfo");
static_assert(offsetof(FRCCharacterProxySortInfo, CharacterProxy) == 0x000000, "Member 'FRCCharacterProxySortInfo::CharacterProxy' has a wrong offset!");
static_assert(offsetof(FRCCharacterProxySortInfo, Length) == 0x000008, "Member 'FRCCharacterProxySortInfo::Length' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSARandomTileSettings
// 0x0018 (0x0018 - 0x0000)
struct FRCNazoMoveLoopLSARandomTileSettings final
{
public:
	class FName                                   TileID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TileTagArray;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMoveLoopLSARandomTileSettings) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSARandomTileSettings");
static_assert(sizeof(FRCNazoMoveLoopLSARandomTileSettings) == 0x000018, "Wrong size on FRCNazoMoveLoopLSARandomTileSettings");
static_assert(offsetof(FRCNazoMoveLoopLSARandomTileSettings, TileID) == 0x000000, "Member 'FRCNazoMoveLoopLSARandomTileSettings::TileID' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSARandomTileSettings, TileTagArray) == 0x000008, "Member 'FRCNazoMoveLoopLSARandomTileSettings::TileTagArray' has a wrong offset!");

// ScriptStruct RC.RCCharacterRimLightChangeInfo
// 0x0060 (0x0060 - 0x0000)
struct FRCCharacterRimLightChangeInfo final
{
public:
	struct FLinearColor                           OriginalOutlineColor;                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PreOutlineColor;                                   // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PostOutlineColor;                                  // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CurrentOutlineColor;                               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalOutlineCoverageValue;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreOutlineCoverageValue;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostOutlineCoverageValue;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentOutlineCoverageValue;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalOutlineSmoothValue;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreOutlineSmoothValue;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostOutlineSmoothValue;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentOutlineSmoothValue;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterRimLightChangeInfo) == 0x000004, "Wrong alignment on FRCCharacterRimLightChangeInfo");
static_assert(sizeof(FRCCharacterRimLightChangeInfo) == 0x000060, "Wrong size on FRCCharacterRimLightChangeInfo");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, OriginalOutlineColor) == 0x000000, "Member 'FRCCharacterRimLightChangeInfo::OriginalOutlineColor' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, PreOutlineColor) == 0x000010, "Member 'FRCCharacterRimLightChangeInfo::PreOutlineColor' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, PostOutlineColor) == 0x000020, "Member 'FRCCharacterRimLightChangeInfo::PostOutlineColor' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, CurrentOutlineColor) == 0x000030, "Member 'FRCCharacterRimLightChangeInfo::CurrentOutlineColor' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, OriginalOutlineCoverageValue) == 0x000040, "Member 'FRCCharacterRimLightChangeInfo::OriginalOutlineCoverageValue' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, PreOutlineCoverageValue) == 0x000044, "Member 'FRCCharacterRimLightChangeInfo::PreOutlineCoverageValue' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, PostOutlineCoverageValue) == 0x000048, "Member 'FRCCharacterRimLightChangeInfo::PostOutlineCoverageValue' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, CurrentOutlineCoverageValue) == 0x00004C, "Member 'FRCCharacterRimLightChangeInfo::CurrentOutlineCoverageValue' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, OriginalOutlineSmoothValue) == 0x000050, "Member 'FRCCharacterRimLightChangeInfo::OriginalOutlineSmoothValue' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, PreOutlineSmoothValue) == 0x000054, "Member 'FRCCharacterRimLightChangeInfo::PreOutlineSmoothValue' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, PostOutlineSmoothValue) == 0x000058, "Member 'FRCCharacterRimLightChangeInfo::PostOutlineSmoothValue' has a wrong offset!");
static_assert(offsetof(FRCCharacterRimLightChangeInfo, CurrentOutlineSmoothValue) == 0x00005C, "Member 'FRCCharacterRimLightChangeInfo::CurrentOutlineSmoothValue' has a wrong offset!");

// ScriptStruct RC.RCCharacterReserveInfo
// 0x004C (0x004C - 0x0000)
struct FRCCharacterReserveInfo final
{
public:
	class FName                                   BodyColorPaletteId;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FaceColorPaletteId;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoliderNumberId;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyeId;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkinId;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartLoopMotion;                                  // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnimalIdleMotionIndex;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimalActionMotionIndex;                           // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimalNearPlayerHide;                             // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LengthAnimalVisibleMin;                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthAnimalVisibleMax;                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthAnimalAction;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoliderFormStyle;                                  // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCharacterReserveInfo) == 0x000004, "Wrong alignment on FRCCharacterReserveInfo");
static_assert(sizeof(FRCCharacterReserveInfo) == 0x00004C, "Wrong size on FRCCharacterReserveInfo");
static_assert(offsetof(FRCCharacterReserveInfo, BodyColorPaletteId) == 0x000000, "Member 'FRCCharacterReserveInfo::BodyColorPaletteId' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, FaceColorPaletteId) == 0x000008, "Member 'FRCCharacterReserveInfo::FaceColorPaletteId' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, SoliderNumberId) == 0x000010, "Member 'FRCCharacterReserveInfo::SoliderNumberId' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, EyeId) == 0x000018, "Member 'FRCCharacterReserveInfo::EyeId' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, SkinId) == 0x000020, "Member 'FRCCharacterReserveInfo::SkinId' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, bStartLoopMotion) == 0x000028, "Member 'FRCCharacterReserveInfo::bStartLoopMotion' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, AnimalIdleMotionIndex) == 0x00002C, "Member 'FRCCharacterReserveInfo::AnimalIdleMotionIndex' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, AnimalActionMotionIndex) == 0x000030, "Member 'FRCCharacterReserveInfo::AnimalActionMotionIndex' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, bAnimalNearPlayerHide) == 0x000034, "Member 'FRCCharacterReserveInfo::bAnimalNearPlayerHide' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, LengthAnimalVisibleMin) == 0x000038, "Member 'FRCCharacterReserveInfo::LengthAnimalVisibleMin' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, LengthAnimalVisibleMax) == 0x00003C, "Member 'FRCCharacterReserveInfo::LengthAnimalVisibleMax' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, LengthAnimalAction) == 0x000040, "Member 'FRCCharacterReserveInfo::LengthAnimalAction' has a wrong offset!");
static_assert(offsetof(FRCCharacterReserveInfo, SoliderFormStyle) == 0x000044, "Member 'FRCCharacterReserveInfo::SoliderFormStyle' has a wrong offset!");

// ScriptStruct RC.RCNazoSceneSettingsPLN
// 0x0158 (0x0160 - 0x0008)
struct FRCNazoSceneSettingsPLN final : public FTableRowBase
{
public:
	class FName                                   SceneID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSave;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NextSceneIDArray;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CommonLevelFolderName;                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CommonLevelNameArray;                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LevelFolderName;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         LevelNameArray;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LetterLevelIdArray;                                // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LevelPathArray;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 QualityLevelFolderName;                            // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         QualityLevelNameArray;                             // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PlayerDamage;                                      // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerRecover;                                     // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveLoopReverse;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0xB];                                       // 0x00B9(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerMoveSpeed;                                   // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraBaseTag;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraTag;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraFollowPlayer;                               // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoMoveLoopTalkType                       TalkType;                                          // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             TalkDataTable;                                     // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x4];                                       // 0x00F8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTalkFinishWithMoveLoop;                           // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ShinigamiTag;                                      // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FollowerTag;                                       // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FollowActorTagArray;                               // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPlayableLoop;                                     // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlayableLoopStartTileID;                           // 0x0124(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayableLoopStartTileTag;                          // 0x012C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PlayableLoopLoopTileIDArray;                       // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PlayableLoopEndTileID;                             // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayableLoopEndTileTag;                            // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayableLoopBehindWallTag;                         // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoSceneSettingsPLN) == 0x000008, "Wrong alignment on FRCNazoSceneSettingsPLN");
static_assert(sizeof(FRCNazoSceneSettingsPLN) == 0x000160, "Wrong size on FRCNazoSceneSettingsPLN");
static_assert(offsetof(FRCNazoSceneSettingsPLN, SceneID) == 0x000008, "Member 'FRCNazoSceneSettingsPLN::SceneID' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, MapID) == 0x000010, "Member 'FRCNazoSceneSettingsPLN::MapID' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, bAutoSave) == 0x000018, "Member 'FRCNazoSceneSettingsPLN::bAutoSave' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, NextSceneIDArray) == 0x000020, "Member 'FRCNazoSceneSettingsPLN::NextSceneIDArray' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, CommonLevelFolderName) == 0x000030, "Member 'FRCNazoSceneSettingsPLN::CommonLevelFolderName' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, CommonLevelNameArray) == 0x000040, "Member 'FRCNazoSceneSettingsPLN::CommonLevelNameArray' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, LevelFolderName) == 0x000050, "Member 'FRCNazoSceneSettingsPLN::LevelFolderName' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, LevelNameArray) == 0x000060, "Member 'FRCNazoSceneSettingsPLN::LevelNameArray' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, LetterLevelIdArray) == 0x000070, "Member 'FRCNazoSceneSettingsPLN::LetterLevelIdArray' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, LevelPathArray) == 0x000080, "Member 'FRCNazoSceneSettingsPLN::LevelPathArray' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, QualityLevelFolderName) == 0x000090, "Member 'FRCNazoSceneSettingsPLN::QualityLevelFolderName' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, QualityLevelNameArray) == 0x0000A0, "Member 'FRCNazoSceneSettingsPLN::QualityLevelNameArray' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, PlayerDamage) == 0x0000B0, "Member 'FRCNazoSceneSettingsPLN::PlayerDamage' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, PlayerRecover) == 0x0000B4, "Member 'FRCNazoSceneSettingsPLN::PlayerRecover' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, bMoveLoopReverse) == 0x0000B8, "Member 'FRCNazoSceneSettingsPLN::bMoveLoopReverse' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, PlayerMoveSpeed) == 0x0000C4, "Member 'FRCNazoSceneSettingsPLN::PlayerMoveSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, CameraBaseTag) == 0x0000D0, "Member 'FRCNazoSceneSettingsPLN::CameraBaseTag' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, CameraTag) == 0x0000D8, "Member 'FRCNazoSceneSettingsPLN::CameraTag' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, bCameraFollowPlayer) == 0x0000E0, "Member 'FRCNazoSceneSettingsPLN::bCameraFollowPlayer' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, TalkType) == 0x0000E1, "Member 'FRCNazoSceneSettingsPLN::TalkType' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, TalkDataTable) == 0x0000E8, "Member 'FRCNazoSceneSettingsPLN::TalkDataTable' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, TalkID) == 0x0000F0, "Member 'FRCNazoSceneSettingsPLN::TalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, bTalkFinishWithMoveLoop) == 0x0000FC, "Member 'FRCNazoSceneSettingsPLN::bTalkFinishWithMoveLoop' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, ShinigamiTag) == 0x000100, "Member 'FRCNazoSceneSettingsPLN::ShinigamiTag' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, FollowerTag) == 0x000108, "Member 'FRCNazoSceneSettingsPLN::FollowerTag' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, FollowActorTagArray) == 0x000110, "Member 'FRCNazoSceneSettingsPLN::FollowActorTagArray' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, bPlayableLoop) == 0x000120, "Member 'FRCNazoSceneSettingsPLN::bPlayableLoop' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, PlayableLoopStartTileID) == 0x000124, "Member 'FRCNazoSceneSettingsPLN::PlayableLoopStartTileID' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, PlayableLoopStartTileTag) == 0x00012C, "Member 'FRCNazoSceneSettingsPLN::PlayableLoopStartTileTag' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, PlayableLoopLoopTileIDArray) == 0x000138, "Member 'FRCNazoSceneSettingsPLN::PlayableLoopLoopTileIDArray' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, PlayableLoopEndTileID) == 0x000148, "Member 'FRCNazoSceneSettingsPLN::PlayableLoopEndTileID' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, PlayableLoopEndTileTag) == 0x000150, "Member 'FRCNazoSceneSettingsPLN::PlayableLoopEndTileTag' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettingsPLN, PlayableLoopBehindWallTag) == 0x000158, "Member 'FRCNazoSceneSettingsPLN::PlayableLoopBehindWallTag' has a wrong offset!");

// ScriptStruct RC.RCNazoMapSettingsBG
// 0x0158 (0x0160 - 0x0008)
struct FRCNazoMapSettingsBG final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveLoopReverse;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Lane0Start;                                        // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Lane0End;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lane0TileNum;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lane0CenterTileIndex;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lane0RandomTileRate;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Lane0Tile0ActorTags;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Lane0Tile1ActorTags;                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Lane0Tile1Num;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Lane0Tile2ActorTags;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Lane0Tile2Num;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Lane1Start;                                        // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Lane1End;                                          // 0x008C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lane1TileNum;                                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lane1CenterTileIndex;                              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lane1RandomTileRate;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lane1Speed;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Lane1Tile0ActorTags;                               // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Lane1Tile1ActorTags;                               // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Lane1Tile1Num;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Lane1Tile2ActorTags;                               // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Lane1Tile2Num;                                     // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Lane2Start;                                        // 0x00E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Lane2End;                                          // 0x00F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lane2TileNum;                                      // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lane2CenterTileIndex;                              // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lane2RandomTileRate;                               // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lane2Speed;                                        // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Lane2Tile0ActorTags;                               // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Lane2Tile1ActorTags;                               // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Lane2Tile1Num;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Lane2Tile2ActorTags;                               // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Lane2Tile2Num;                                     // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FollowActorTags;                                   // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMapSettingsBG) == 0x000008, "Wrong alignment on FRCNazoMapSettingsBG");
static_assert(sizeof(FRCNazoMapSettingsBG) == 0x000160, "Wrong size on FRCNazoMapSettingsBG");
static_assert(offsetof(FRCNazoMapSettingsBG, MapID) == 0x000008, "Member 'FRCNazoMapSettingsBG::MapID' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, bMoveLoopReverse) == 0x000010, "Member 'FRCNazoMapSettingsBG::bMoveLoopReverse' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0Start) == 0x000014, "Member 'FRCNazoMapSettingsBG::Lane0Start' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0End) == 0x000020, "Member 'FRCNazoMapSettingsBG::Lane0End' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0TileNum) == 0x00002C, "Member 'FRCNazoMapSettingsBG::Lane0TileNum' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0CenterTileIndex) == 0x000030, "Member 'FRCNazoMapSettingsBG::Lane0CenterTileIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0RandomTileRate) == 0x000034, "Member 'FRCNazoMapSettingsBG::Lane0RandomTileRate' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0Tile0ActorTags) == 0x000040, "Member 'FRCNazoMapSettingsBG::Lane0Tile0ActorTags' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0Tile1ActorTags) == 0x000050, "Member 'FRCNazoMapSettingsBG::Lane0Tile1ActorTags' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0Tile1Num) == 0x000060, "Member 'FRCNazoMapSettingsBG::Lane0Tile1Num' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0Tile2ActorTags) == 0x000068, "Member 'FRCNazoMapSettingsBG::Lane0Tile2ActorTags' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane0Tile2Num) == 0x000078, "Member 'FRCNazoMapSettingsBG::Lane0Tile2Num' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1Start) == 0x000080, "Member 'FRCNazoMapSettingsBG::Lane1Start' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1End) == 0x00008C, "Member 'FRCNazoMapSettingsBG::Lane1End' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1TileNum) == 0x000098, "Member 'FRCNazoMapSettingsBG::Lane1TileNum' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1CenterTileIndex) == 0x00009C, "Member 'FRCNazoMapSettingsBG::Lane1CenterTileIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1RandomTileRate) == 0x0000A0, "Member 'FRCNazoMapSettingsBG::Lane1RandomTileRate' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1Speed) == 0x0000A4, "Member 'FRCNazoMapSettingsBG::Lane1Speed' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1Tile0ActorTags) == 0x0000A8, "Member 'FRCNazoMapSettingsBG::Lane1Tile0ActorTags' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1Tile1ActorTags) == 0x0000B8, "Member 'FRCNazoMapSettingsBG::Lane1Tile1ActorTags' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1Tile1Num) == 0x0000C8, "Member 'FRCNazoMapSettingsBG::Lane1Tile1Num' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1Tile2ActorTags) == 0x0000D0, "Member 'FRCNazoMapSettingsBG::Lane1Tile2ActorTags' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane1Tile2Num) == 0x0000E0, "Member 'FRCNazoMapSettingsBG::Lane1Tile2Num' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2Start) == 0x0000E8, "Member 'FRCNazoMapSettingsBG::Lane2Start' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2End) == 0x0000F4, "Member 'FRCNazoMapSettingsBG::Lane2End' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2TileNum) == 0x000100, "Member 'FRCNazoMapSettingsBG::Lane2TileNum' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2CenterTileIndex) == 0x000104, "Member 'FRCNazoMapSettingsBG::Lane2CenterTileIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2RandomTileRate) == 0x000108, "Member 'FRCNazoMapSettingsBG::Lane2RandomTileRate' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2Speed) == 0x00010C, "Member 'FRCNazoMapSettingsBG::Lane2Speed' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2Tile0ActorTags) == 0x000110, "Member 'FRCNazoMapSettingsBG::Lane2Tile0ActorTags' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2Tile1ActorTags) == 0x000120, "Member 'FRCNazoMapSettingsBG::Lane2Tile1ActorTags' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2Tile1Num) == 0x000130, "Member 'FRCNazoMapSettingsBG::Lane2Tile1Num' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2Tile2ActorTags) == 0x000138, "Member 'FRCNazoMapSettingsBG::Lane2Tile2ActorTags' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, Lane2Tile2Num) == 0x000148, "Member 'FRCNazoMapSettingsBG::Lane2Tile2Num' has a wrong offset!");
static_assert(offsetof(FRCNazoMapSettingsBG, FollowActorTags) == 0x000150, "Member 'FRCNazoMapSettingsBG::FollowActorTags' has a wrong offset!");

// ScriptStruct RC.RCNazoMapLevelSettingsBG
// 0x01A8 (0x01B0 - 0x0008)
struct FRCNazoMapLevelSettingsBG final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterMaterialID;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FogID;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommonFolder;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CommonLevels;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Folder;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Levels;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Lane0Folder;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lane0Tile0Folder;                                  // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lane0Tile0Levels;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Lane0Tile1Folder;                                  // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lane0Tile1Levels;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Lane0Tile2Folder;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lane0Tile2Levels;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Lane1Folder;                                       // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lane1Tile0Folder;                                  // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lane1Tile0Levels;                                  // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Lane1Tile1Folder;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lane1Tile1Levels;                                  // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Lane1Tile2Folder;                                  // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lane1Tile2Levels;                                  // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Lane2Folder;                                       // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lane2Tile0Folder;                                  // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lane2Tile0Levels;                                  // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Lane2Tile1Folder;                                  // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lane2Tile1Levels;                                  // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Lane2Tile2Folder;                                  // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lane2Tile2Levels;                                  // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMapLevelSettingsBG) == 0x000008, "Wrong alignment on FRCNazoMapLevelSettingsBG");
static_assert(sizeof(FRCNazoMapLevelSettingsBG) == 0x0001B0, "Wrong size on FRCNazoMapLevelSettingsBG");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, MapID) == 0x000008, "Member 'FRCNazoMapLevelSettingsBG::MapID' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, CharacterMaterialID) == 0x000010, "Member 'FRCNazoMapLevelSettingsBG::CharacterMaterialID' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, FogID) == 0x000018, "Member 'FRCNazoMapLevelSettingsBG::FogID' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, CommonFolder) == 0x000020, "Member 'FRCNazoMapLevelSettingsBG::CommonFolder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, CommonLevels) == 0x000030, "Member 'FRCNazoMapLevelSettingsBG::CommonLevels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Folder) == 0x000040, "Member 'FRCNazoMapLevelSettingsBG::Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Levels) == 0x000050, "Member 'FRCNazoMapLevelSettingsBG::Levels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane0Folder) == 0x000060, "Member 'FRCNazoMapLevelSettingsBG::Lane0Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane0Tile0Folder) == 0x000070, "Member 'FRCNazoMapLevelSettingsBG::Lane0Tile0Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane0Tile0Levels) == 0x000080, "Member 'FRCNazoMapLevelSettingsBG::Lane0Tile0Levels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane0Tile1Folder) == 0x000090, "Member 'FRCNazoMapLevelSettingsBG::Lane0Tile1Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane0Tile1Levels) == 0x0000A0, "Member 'FRCNazoMapLevelSettingsBG::Lane0Tile1Levels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane0Tile2Folder) == 0x0000B0, "Member 'FRCNazoMapLevelSettingsBG::Lane0Tile2Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane0Tile2Levels) == 0x0000C0, "Member 'FRCNazoMapLevelSettingsBG::Lane0Tile2Levels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane1Folder) == 0x0000D0, "Member 'FRCNazoMapLevelSettingsBG::Lane1Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane1Tile0Folder) == 0x0000E0, "Member 'FRCNazoMapLevelSettingsBG::Lane1Tile0Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane1Tile0Levels) == 0x0000F0, "Member 'FRCNazoMapLevelSettingsBG::Lane1Tile0Levels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane1Tile1Folder) == 0x000100, "Member 'FRCNazoMapLevelSettingsBG::Lane1Tile1Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane1Tile1Levels) == 0x000110, "Member 'FRCNazoMapLevelSettingsBG::Lane1Tile1Levels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane1Tile2Folder) == 0x000120, "Member 'FRCNazoMapLevelSettingsBG::Lane1Tile2Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane1Tile2Levels) == 0x000130, "Member 'FRCNazoMapLevelSettingsBG::Lane1Tile2Levels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane2Folder) == 0x000140, "Member 'FRCNazoMapLevelSettingsBG::Lane2Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane2Tile0Folder) == 0x000150, "Member 'FRCNazoMapLevelSettingsBG::Lane2Tile0Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane2Tile0Levels) == 0x000160, "Member 'FRCNazoMapLevelSettingsBG::Lane2Tile0Levels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane2Tile1Folder) == 0x000170, "Member 'FRCNazoMapLevelSettingsBG::Lane2Tile1Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane2Tile1Levels) == 0x000180, "Member 'FRCNazoMapLevelSettingsBG::Lane2Tile1Levels' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane2Tile2Folder) == 0x000190, "Member 'FRCNazoMapLevelSettingsBG::Lane2Tile2Folder' has a wrong offset!");
static_assert(offsetof(FRCNazoMapLevelSettingsBG, Lane2Tile2Levels) == 0x0001A0, "Member 'FRCNazoMapLevelSettingsBG::Lane2Tile2Levels' has a wrong offset!");

// ScriptStruct RC.RCNazoLevelData
// 0x0048 (0x0048 - 0x0000)
struct FRCNazoLevelData final
{
public:
	struct FRCNazoLevelSettings                   LevelSettings;                                     // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class ULevelStreamingDynamic*                 Level;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLevelInstance;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoLevelData) == 0x000008, "Wrong alignment on FRCNazoLevelData");
static_assert(sizeof(FRCNazoLevelData) == 0x000048, "Wrong size on FRCNazoLevelData");
static_assert(offsetof(FRCNazoLevelData, LevelSettings) == 0x000000, "Member 'FRCNazoLevelData::LevelSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoLevelData, Level) == 0x000038, "Member 'FRCNazoLevelData::Level' has a wrong offset!");
static_assert(offsetof(FRCNazoLevelData, bLevelInstance) == 0x000040, "Member 'FRCNazoLevelData::bLevelInstance' has a wrong offset!");

// ScriptStruct RC.RCNazoSceneData
// 0x04F0 (0x04F0 - 0x0000)
struct FRCNazoSceneData final
{
public:
	ERCNazoLSASceneState                          State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNazoSceneSettingsPLN                SceneSettingsPLN;                                  // 0x0008(0x0160)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRCNazoMapSettingsBG                   MapSettingsBG;                                     // 0x0168(0x0160)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRCNazoMapLevelSettingsBG              MapLevelSettingsBG;                                // 0x02C8(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class ALevelScriptActor*                      LevelScriptActor;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCNazoLevelData>               LevelDataArray;                                    // 0x0480(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         StartLoadLevelIndex;                               // 0x0490(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      LevelDataMap;                                      // 0x0498(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	int32                                         TilingNum;                                         // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNextSceneAutoLoadStart;                           // 0x04EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4ED[0x3];                                      // 0x04ED(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoSceneData) == 0x000008, "Wrong alignment on FRCNazoSceneData");
static_assert(sizeof(FRCNazoSceneData) == 0x0004F0, "Wrong size on FRCNazoSceneData");
static_assert(offsetof(FRCNazoSceneData, State) == 0x000000, "Member 'FRCNazoSceneData::State' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneData, SceneSettingsPLN) == 0x000008, "Member 'FRCNazoSceneData::SceneSettingsPLN' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneData, MapSettingsBG) == 0x000168, "Member 'FRCNazoSceneData::MapSettingsBG' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneData, MapLevelSettingsBG) == 0x0002C8, "Member 'FRCNazoSceneData::MapLevelSettingsBG' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneData, LevelScriptActor) == 0x000478, "Member 'FRCNazoSceneData::LevelScriptActor' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneData, LevelDataArray) == 0x000480, "Member 'FRCNazoSceneData::LevelDataArray' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneData, StartLoadLevelIndex) == 0x000490, "Member 'FRCNazoSceneData::StartLoadLevelIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneData, LevelDataMap) == 0x000498, "Member 'FRCNazoSceneData::LevelDataMap' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneData, TilingNum) == 0x0004E8, "Member 'FRCNazoSceneData::TilingNum' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneData, bNextSceneAutoLoadStart) == 0x0004EC, "Member 'FRCNazoSceneData::bNextSceneAutoLoadStart' has a wrong offset!");

// ScriptStruct RC.RCEventActorInfo
// 0x0018 (0x0018 - 0x0000)
struct FRCEventActorInfo final
{
public:
	ERCRealEventActorType                         ActorType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActorName;                                         // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCEventActorInfo) == 0x000008, "Wrong alignment on FRCEventActorInfo");
static_assert(sizeof(FRCEventActorInfo) == 0x000018, "Wrong size on FRCEventActorInfo");
static_assert(offsetof(FRCEventActorInfo, ActorType) == 0x000000, "Member 'FRCEventActorInfo::ActorType' has a wrong offset!");
static_assert(offsetof(FRCEventActorInfo, ActorName) == 0x000004, "Member 'FRCEventActorInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FRCEventActorInfo, Actor) == 0x000010, "Member 'FRCEventActorInfo::Actor' has a wrong offset!");

// ScriptStruct RC.RCAutoPlayCheckLogInfo
// 0x0038 (0x0038 - 0x0000)
struct FRCAutoPlayCheckLogInfo final
{
public:
	class FName                                   SceneID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCEventActorInfo                      ActorInfo;                                         // 0x0010(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SuccessNum;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailureNum;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotEvent;                                         // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAutoPlayCheckLogInfo) == 0x000008, "Wrong alignment on FRCAutoPlayCheckLogInfo");
static_assert(sizeof(FRCAutoPlayCheckLogInfo) == 0x000038, "Wrong size on FRCAutoPlayCheckLogInfo");
static_assert(offsetof(FRCAutoPlayCheckLogInfo, SceneID) == 0x000000, "Member 'FRCAutoPlayCheckLogInfo::SceneID' has a wrong offset!");
static_assert(offsetof(FRCAutoPlayCheckLogInfo, MapID) == 0x000008, "Member 'FRCAutoPlayCheckLogInfo::MapID' has a wrong offset!");
static_assert(offsetof(FRCAutoPlayCheckLogInfo, ActorInfo) == 0x000010, "Member 'FRCAutoPlayCheckLogInfo::ActorInfo' has a wrong offset!");
static_assert(offsetof(FRCAutoPlayCheckLogInfo, bEnable) == 0x000028, "Member 'FRCAutoPlayCheckLogInfo::bEnable' has a wrong offset!");
static_assert(offsetof(FRCAutoPlayCheckLogInfo, SuccessNum) == 0x00002C, "Member 'FRCAutoPlayCheckLogInfo::SuccessNum' has a wrong offset!");
static_assert(offsetof(FRCAutoPlayCheckLogInfo, FailureNum) == 0x000030, "Member 'FRCAutoPlayCheckLogInfo::FailureNum' has a wrong offset!");
static_assert(offsetof(FRCAutoPlayCheckLogInfo, bNotEvent) == 0x000034, "Member 'FRCAutoPlayCheckLogInfo::bNotEvent' has a wrong offset!");

// ScriptStruct RC.RCNzUiBattleUiAssetData
// 0x0020 (0x0020 - 0x0000)
struct FRCNzUiBattleUiAssetData final
{
public:
	bool                                          bAssistEnable;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        AssistFaceTexturePath;                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNzUiBattleUiAssetData) == 0x000008, "Wrong alignment on FRCNzUiBattleUiAssetData");
static_assert(sizeof(FRCNzUiBattleUiAssetData) == 0x000020, "Wrong size on FRCNzUiBattleUiAssetData");
static_assert(offsetof(FRCNzUiBattleUiAssetData, bAssistEnable) == 0x000000, "Member 'FRCNzUiBattleUiAssetData::bAssistEnable' has a wrong offset!");
static_assert(offsetof(FRCNzUiBattleUiAssetData, AssistFaceTexturePath) == 0x000008, "Member 'FRCNzUiBattleUiAssetData::AssistFaceTexturePath' has a wrong offset!");

// ScriptStruct RC.EventSettingInfo
// 0x0018 (0x0018 - 0x0000)
struct FEventSettingInfo final
{
public:
	class FName                                   MapID;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Filename;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventSettingInfo) == 0x000008, "Wrong alignment on FEventSettingInfo");
static_assert(sizeof(FEventSettingInfo) == 0x000018, "Wrong size on FEventSettingInfo");
static_assert(offsetof(FEventSettingInfo, MapID) == 0x000000, "Member 'FEventSettingInfo::MapID' has a wrong offset!");
static_assert(offsetof(FEventSettingInfo, Filename) == 0x000008, "Member 'FEventSettingInfo::Filename' has a wrong offset!");

// ScriptStruct RC.VariableInfo
// 0x0020 (0x0020 - 0x0000)
struct FVariableInfo final
{
public:
	class FString                                 Comment;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VariableName;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVariableInfo) == 0x000008, "Wrong alignment on FVariableInfo");
static_assert(sizeof(FVariableInfo) == 0x000020, "Wrong size on FVariableInfo");
static_assert(offsetof(FVariableInfo, Comment) == 0x000000, "Member 'FVariableInfo::Comment' has a wrong offset!");
static_assert(offsetof(FVariableInfo, VariableName) == 0x000010, "Member 'FVariableInfo::VariableName' has a wrong offset!");
static_assert(offsetof(FVariableInfo, Value) == 0x000018, "Member 'FVariableInfo::Value' has a wrong offset!");

// ScriptStruct RC.ChapterInfo
// 0x001C (0x001C - 0x0000)
struct FChapterInfo final
{
public:
	int32                                         Chapter;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x0004(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x000C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerStartName;                                   // 0x0014(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChapterInfo) == 0x000004, "Wrong alignment on FChapterInfo");
static_assert(sizeof(FChapterInfo) == 0x00001C, "Wrong size on FChapterInfo");
static_assert(offsetof(FChapterInfo, Chapter) == 0x000000, "Member 'FChapterInfo::Chapter' has a wrong offset!");
static_assert(offsetof(FChapterInfo, Scene) == 0x000004, "Member 'FChapterInfo::Scene' has a wrong offset!");
static_assert(offsetof(FChapterInfo, MapID) == 0x00000C, "Member 'FChapterInfo::MapID' has a wrong offset!");
static_assert(offsetof(FChapterInfo, PlayerStartName) == 0x000014, "Member 'FChapterInfo::PlayerStartName' has a wrong offset!");

// ScriptStruct RC.RCDevelopmentSave
// 0x0034 (0x0034 - 0x0000)
struct FRCDevelopmentSave final
{
public:
	class FName                                   SelectCategory;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectChapter;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectScene;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectMapIDIndex;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoveSkip;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDash;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkipSpeed;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMouseCameraRightClick;                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugLoadAssetDraw;                               // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTipsLoadDraw;                                     // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealPlChange;                                     // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapMoveNotRealPlChange;                           // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNazoPreLoad;                                      // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNazoReuseLevelInvisible;                          // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugPause;                                       // 0x0027(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHarfFade;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUiFade;                                        // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInputLeverDebugDraw;                              // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHpNoDead;                                         // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoMove;                                         // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsoleDetails;                                   // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMouseCursolDraw;                                  // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinaleSkipEnable;                                 // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleFastLoad;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealFastLoad;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCDevelopmentSave) == 0x000004, "Wrong alignment on FRCDevelopmentSave");
static_assert(sizeof(FRCDevelopmentSave) == 0x000034, "Wrong size on FRCDevelopmentSave");
static_assert(offsetof(FRCDevelopmentSave, SelectCategory) == 0x000000, "Member 'FRCDevelopmentSave::SelectCategory' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, SelectChapter) == 0x000008, "Member 'FRCDevelopmentSave::SelectChapter' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, SelectScene) == 0x00000C, "Member 'FRCDevelopmentSave::SelectScene' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, SelectMapIDIndex) == 0x000014, "Member 'FRCDevelopmentSave::SelectMapIDIndex' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bIsMoveSkip) == 0x000018, "Member 'FRCDevelopmentSave::bIsMoveSkip' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bIsDash) == 0x000019, "Member 'FRCDevelopmentSave::bIsDash' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, SkipSpeed) == 0x00001C, "Member 'FRCDevelopmentSave::SkipSpeed' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bMouseCameraRightClick) == 0x000020, "Member 'FRCDevelopmentSave::bMouseCameraRightClick' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bDebugLoadAssetDraw) == 0x000021, "Member 'FRCDevelopmentSave::bDebugLoadAssetDraw' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bTipsLoadDraw) == 0x000022, "Member 'FRCDevelopmentSave::bTipsLoadDraw' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bRealPlChange) == 0x000023, "Member 'FRCDevelopmentSave::bRealPlChange' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bMapMoveNotRealPlChange) == 0x000024, "Member 'FRCDevelopmentSave::bMapMoveNotRealPlChange' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bNazoPreLoad) == 0x000025, "Member 'FRCDevelopmentSave::bNazoPreLoad' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bNazoReuseLevelInvisible) == 0x000026, "Member 'FRCDevelopmentSave::bNazoReuseLevelInvisible' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bDebugPause) == 0x000027, "Member 'FRCDevelopmentSave::bDebugPause' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bHarfFade) == 0x000028, "Member 'FRCDevelopmentSave::bHarfFade' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bUseUiFade) == 0x000029, "Member 'FRCDevelopmentSave::bUseUiFade' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bInputLeverDebugDraw) == 0x00002A, "Member 'FRCDevelopmentSave::bInputLeverDebugDraw' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bHpNoDead) == 0x00002B, "Member 'FRCDevelopmentSave::bHpNoDead' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bAutoMove) == 0x00002C, "Member 'FRCDevelopmentSave::bAutoMove' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bConsoleDetails) == 0x00002D, "Member 'FRCDevelopmentSave::bConsoleDetails' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bMouseCursolDraw) == 0x00002E, "Member 'FRCDevelopmentSave::bMouseCursolDraw' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bFinaleSkipEnable) == 0x00002F, "Member 'FRCDevelopmentSave::bFinaleSkipEnable' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bBattleFastLoad) == 0x000030, "Member 'FRCDevelopmentSave::bBattleFastLoad' has a wrong offset!");
static_assert(offsetof(FRCDevelopmentSave, bRealFastLoad) == 0x000031, "Member 'FRCDevelopmentSave::bRealFastLoad' has a wrong offset!");

// ScriptStruct RC.RCEffectComponentData
// 0x001C (0x001C - 0x0000)
struct FRCEffectComponentData final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffectManagedID;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCEffectComponentData) == 0x000004, "Wrong alignment on FRCEffectComponentData");
static_assert(sizeof(FRCEffectComponentData) == 0x00001C, "Wrong size on FRCEffectComponentData");
static_assert(offsetof(FRCEffectComponentData, EffectName) == 0x000000, "Member 'FRCEffectComponentData::EffectName' has a wrong offset!");
static_assert(offsetof(FRCEffectComponentData, EffectID) == 0x000008, "Member 'FRCEffectComponentData::EffectID' has a wrong offset!");
static_assert(offsetof(FRCEffectComponentData, EffectManagedID) == 0x000014, "Member 'FRCEffectComponentData::EffectManagedID' has a wrong offset!");

// ScriptStruct RC.RCEffectManagedData
// 0x0028 (0x0028 - 0x0000)
struct FRCEffectManagedData final
{
public:
	class FName                                   ManagedID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCEffectType                                 EffectType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ParticleSystemComponent;                           // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCEffectSequence*                      EffectSequence;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCEffectManagedData) == 0x000008, "Wrong alignment on FRCEffectManagedData");
static_assert(sizeof(FRCEffectManagedData) == 0x000028, "Wrong size on FRCEffectManagedData");
static_assert(offsetof(FRCEffectManagedData, ManagedID) == 0x000000, "Member 'FRCEffectManagedData::ManagedID' has a wrong offset!");
static_assert(offsetof(FRCEffectManagedData, EffectType) == 0x000008, "Member 'FRCEffectManagedData::EffectType' has a wrong offset!");
static_assert(offsetof(FRCEffectManagedData, bAutoDestroy) == 0x000009, "Member 'FRCEffectManagedData::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(FRCEffectManagedData, ParticleSystemComponent) == 0x000010, "Member 'FRCEffectManagedData::ParticleSystemComponent' has a wrong offset!");
static_assert(offsetof(FRCEffectManagedData, NiagaraComponent) == 0x000018, "Member 'FRCEffectManagedData::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(FRCEffectManagedData, EffectSequence) == 0x000020, "Member 'FRCEffectManagedData::EffectSequence' has a wrong offset!");

// ScriptStruct RC.RCParamChapterSelectDataTableRow
// 0x0040 (0x0048 - 0x0008)
struct FRCParamChapterSelectDataTableRow final : public FTableRowBase
{
public:
	int32                                         ChapterID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RealStartSceneID;                                  // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NazoStartSceneID;                                  // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterNumText;                                    // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterNameText;                                   // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChapterImagePath;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterCaptionText;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamChapterSelectDataTableRow) == 0x000008, "Wrong alignment on FRCParamChapterSelectDataTableRow");
static_assert(sizeof(FRCParamChapterSelectDataTableRow) == 0x000048, "Wrong size on FRCParamChapterSelectDataTableRow");
static_assert(offsetof(FRCParamChapterSelectDataTableRow, ChapterID) == 0x000008, "Member 'FRCParamChapterSelectDataTableRow::ChapterID' has a wrong offset!");
static_assert(offsetof(FRCParamChapterSelectDataTableRow, RealStartSceneID) == 0x00000C, "Member 'FRCParamChapterSelectDataTableRow::RealStartSceneID' has a wrong offset!");
static_assert(offsetof(FRCParamChapterSelectDataTableRow, NazoStartSceneID) == 0x000014, "Member 'FRCParamChapterSelectDataTableRow::NazoStartSceneID' has a wrong offset!");
static_assert(offsetof(FRCParamChapterSelectDataTableRow, ChapterNumText) == 0x00001C, "Member 'FRCParamChapterSelectDataTableRow::ChapterNumText' has a wrong offset!");
static_assert(offsetof(FRCParamChapterSelectDataTableRow, ChapterNameText) == 0x000024, "Member 'FRCParamChapterSelectDataTableRow::ChapterNameText' has a wrong offset!");
static_assert(offsetof(FRCParamChapterSelectDataTableRow, ChapterImagePath) == 0x000030, "Member 'FRCParamChapterSelectDataTableRow::ChapterImagePath' has a wrong offset!");
static_assert(offsetof(FRCParamChapterSelectDataTableRow, ChapterCaptionText) == 0x000040, "Member 'FRCParamChapterSelectDataTableRow::ChapterCaptionText' has a wrong offset!");

// ScriptStruct RC.RCEffectDataTableRowData
// 0x0018 (0x0020 - 0x0008)
struct FRCEffectDataTableRowData final : public FTableRowBase
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCEffectDataTableRowData) == 0x000008, "Wrong alignment on FRCEffectDataTableRowData");
static_assert(sizeof(FRCEffectDataTableRowData) == 0x000020, "Wrong size on FRCEffectDataTableRowData");
static_assert(offsetof(FRCEffectDataTableRowData, Path) == 0x000008, "Member 'FRCEffectDataTableRowData::Path' has a wrong offset!");

// ScriptStruct RC.RCEffectData
// 0x0040 (0x0040 - 0x0000)
struct FRCEffectData final
{
public:
	ERCEffectDataState                            State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCEffectDataTableRowData              RowData;                                           // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERCEffectType                                 EffectType;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Asset;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCEffectData) == 0x000008, "Wrong alignment on FRCEffectData");
static_assert(sizeof(FRCEffectData) == 0x000040, "Wrong size on FRCEffectData");
static_assert(offsetof(FRCEffectData, State) == 0x000000, "Member 'FRCEffectData::State' has a wrong offset!");
static_assert(offsetof(FRCEffectData, RowData) == 0x000008, "Member 'FRCEffectData::RowData' has a wrong offset!");
static_assert(offsetof(FRCEffectData, EffectType) == 0x000028, "Member 'FRCEffectData::EffectType' has a wrong offset!");
static_assert(offsetof(FRCEffectData, Asset) == 0x000030, "Member 'FRCEffectData::Asset' has a wrong offset!");
static_assert(offsetof(FRCEffectData, Count) == 0x000038, "Member 'FRCEffectData::Count' has a wrong offset!");

// ScriptStruct RC.RCParamAttachmentColorPaletteTableRow
// 0x0078 (0x0080 - 0x0008)
struct FRCParamAttachmentColorPaletteTableRow final : public FTableRowBase
{
public:
	float                                         Material0_R;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material0_G;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material0_B;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material1_R;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material1_G;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material1_B;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material2_R;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material2_G;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material2_B;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material3_R;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material3_G;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material3_B;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material4_R;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material4_G;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material4_B;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material5_R;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material5_G;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material5_B;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material6_R;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material6_G;                                       // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material6_B;                                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material7_R;                                       // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material7_G;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material7_B;                                       // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material8_R;                                       // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material8_G;                                       // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material8_B;                                       // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material9_R;                                       // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material9_G;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material9_B;                                       // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamAttachmentColorPaletteTableRow) == 0x000008, "Wrong alignment on FRCParamAttachmentColorPaletteTableRow");
static_assert(sizeof(FRCParamAttachmentColorPaletteTableRow) == 0x000080, "Wrong size on FRCParamAttachmentColorPaletteTableRow");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material0_R) == 0x000008, "Member 'FRCParamAttachmentColorPaletteTableRow::Material0_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material0_G) == 0x00000C, "Member 'FRCParamAttachmentColorPaletteTableRow::Material0_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material0_B) == 0x000010, "Member 'FRCParamAttachmentColorPaletteTableRow::Material0_B' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material1_R) == 0x000014, "Member 'FRCParamAttachmentColorPaletteTableRow::Material1_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material1_G) == 0x000018, "Member 'FRCParamAttachmentColorPaletteTableRow::Material1_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material1_B) == 0x00001C, "Member 'FRCParamAttachmentColorPaletteTableRow::Material1_B' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material2_R) == 0x000020, "Member 'FRCParamAttachmentColorPaletteTableRow::Material2_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material2_G) == 0x000024, "Member 'FRCParamAttachmentColorPaletteTableRow::Material2_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material2_B) == 0x000028, "Member 'FRCParamAttachmentColorPaletteTableRow::Material2_B' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material3_R) == 0x00002C, "Member 'FRCParamAttachmentColorPaletteTableRow::Material3_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material3_G) == 0x000030, "Member 'FRCParamAttachmentColorPaletteTableRow::Material3_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material3_B) == 0x000034, "Member 'FRCParamAttachmentColorPaletteTableRow::Material3_B' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material4_R) == 0x000038, "Member 'FRCParamAttachmentColorPaletteTableRow::Material4_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material4_G) == 0x00003C, "Member 'FRCParamAttachmentColorPaletteTableRow::Material4_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material4_B) == 0x000040, "Member 'FRCParamAttachmentColorPaletteTableRow::Material4_B' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material5_R) == 0x000044, "Member 'FRCParamAttachmentColorPaletteTableRow::Material5_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material5_G) == 0x000048, "Member 'FRCParamAttachmentColorPaletteTableRow::Material5_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material5_B) == 0x00004C, "Member 'FRCParamAttachmentColorPaletteTableRow::Material5_B' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material6_R) == 0x000050, "Member 'FRCParamAttachmentColorPaletteTableRow::Material6_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material6_G) == 0x000054, "Member 'FRCParamAttachmentColorPaletteTableRow::Material6_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material6_B) == 0x000058, "Member 'FRCParamAttachmentColorPaletteTableRow::Material6_B' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material7_R) == 0x00005C, "Member 'FRCParamAttachmentColorPaletteTableRow::Material7_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material7_G) == 0x000060, "Member 'FRCParamAttachmentColorPaletteTableRow::Material7_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material7_B) == 0x000064, "Member 'FRCParamAttachmentColorPaletteTableRow::Material7_B' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material8_R) == 0x000068, "Member 'FRCParamAttachmentColorPaletteTableRow::Material8_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material8_G) == 0x00006C, "Member 'FRCParamAttachmentColorPaletteTableRow::Material8_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material8_B) == 0x000070, "Member 'FRCParamAttachmentColorPaletteTableRow::Material8_B' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material9_R) == 0x000074, "Member 'FRCParamAttachmentColorPaletteTableRow::Material9_R' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material9_G) == 0x000078, "Member 'FRCParamAttachmentColorPaletteTableRow::Material9_G' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentColorPaletteTableRow, Material9_B) == 0x00007C, "Member 'FRCParamAttachmentColorPaletteTableRow::Material9_B' has a wrong offset!");

// ScriptStruct RC.RCEnvironmentMaterialInfo
// 0x0014 (0x0014 - 0x0000)
struct FRCEnvironmentMaterialInfo final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCEnvironmentChangeRainType                  RainType;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCEnvironmentMaterialInfo) == 0x000004, "Wrong alignment on FRCEnvironmentMaterialInfo");
static_assert(sizeof(FRCEnvironmentMaterialInfo) == 0x000014, "Wrong size on FRCEnvironmentMaterialInfo");
static_assert(offsetof(FRCEnvironmentMaterialInfo, ActorName) == 0x000000, "Member 'FRCEnvironmentMaterialInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentMaterialInfo, MaterialID) == 0x000008, "Member 'FRCEnvironmentMaterialInfo::MaterialID' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentMaterialInfo, RainType) == 0x000010, "Member 'FRCEnvironmentMaterialInfo::RainType' has a wrong offset!");

// ScriptStruct RC.RCEnvironmentInfo
// 0x0068 (0x0068 - 0x0000)
struct FRCEnvironmentInfo final
{
public:
	class FName                                   CameraID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCEnvironmentChangeSpeedType                 SpeedType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FogID;                                             // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCEnvironmentChangeRainType                  RainType;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCEnvironmentMaterialInfo>     MaterialList;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ShinigamiMaterialID;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MinimapID;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaNameID;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WindActorNameID;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WindEventNameID;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CharacterDrawLayerList;                            // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   FaceFilterID;                                      // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCEnvironmentInfo) == 0x000008, "Wrong alignment on FRCEnvironmentInfo");
static_assert(sizeof(FRCEnvironmentInfo) == 0x000068, "Wrong size on FRCEnvironmentInfo");
static_assert(offsetof(FRCEnvironmentInfo, CameraID) == 0x000000, "Member 'FRCEnvironmentInfo::CameraID' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, SpeedType) == 0x000008, "Member 'FRCEnvironmentInfo::SpeedType' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, FogID) == 0x00000C, "Member 'FRCEnvironmentInfo::FogID' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, RainType) == 0x000014, "Member 'FRCEnvironmentInfo::RainType' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, MaterialList) == 0x000018, "Member 'FRCEnvironmentInfo::MaterialList' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, ShinigamiMaterialID) == 0x000028, "Member 'FRCEnvironmentInfo::ShinigamiMaterialID' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, MinimapID) == 0x000030, "Member 'FRCEnvironmentInfo::MinimapID' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, AreaNameID) == 0x000038, "Member 'FRCEnvironmentInfo::AreaNameID' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, WindActorNameID) == 0x000040, "Member 'FRCEnvironmentInfo::WindActorNameID' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, WindEventNameID) == 0x000048, "Member 'FRCEnvironmentInfo::WindEventNameID' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, CharacterDrawLayerList) == 0x000050, "Member 'FRCEnvironmentInfo::CharacterDrawLayerList' has a wrong offset!");
static_assert(offsetof(FRCEnvironmentInfo, FaceFilterID) == 0x000060, "Member 'FRCEnvironmentInfo::FaceFilterID' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterColorPaletteTableRow
// 0x0258 (0x0260 - 0x0008)
struct FRCParamCharacterColorPaletteTableRow final : public FTableRowBase
{
public:
	float                                         Material0_R;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material0_G;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material0_B;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material0_PocketTextureName;                       // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material0_DecalTextureName;                        // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material0_DecalR;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material0_DecalG;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material0_DecalB;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material1_R;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material1_G;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material1_B;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material1_PocketTextureName;                       // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material1_DecalTextureName;                        // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material1_DecalR;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material1_DecalG;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material1_DecalB;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material2_R;                                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material2_G;                                       // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material2_B;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material2_PocketTextureName;                       // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material2_DecalTextureName;                        // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material2_DecalR;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material2_DecalG;                                  // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material2_DecalB;                                  // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material3_R;                                       // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material3_G;                                       // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material3_B;                                       // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material3_PocketTextureName;                       // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material3_DecalTextureName;                        // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material3_DecalR;                                  // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material3_DecalG;                                  // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material3_DecalB;                                  // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material4_R;                                       // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material4_G;                                       // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material4_B;                                       // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material4_PocketTextureName;                       // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material4_DecalTextureName;                        // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material4_DecalR;                                  // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material4_DecalG;                                  // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material4_DecalB;                                  // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material5_R;                                       // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material5_G;                                       // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material5_B;                                       // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material5_PocketTextureName;                       // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material5_DecalTextureName;                        // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material5_DecalR;                                  // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material5_DecalG;                                  // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material5_DecalB;                                  // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material6_R;                                       // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material6_G;                                       // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material6_B;                                       // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material6_PocketTextureName;                       // 0x0104(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material6_DecalTextureName;                        // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material6_DecalR;                                  // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material6_DecalG;                                  // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material6_DecalB;                                  // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material7_R;                                       // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material7_G;                                       // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material7_B;                                       // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material7_PocketTextureName;                       // 0x012C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material7_DecalTextureName;                        // 0x0134(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material7_DecalR;                                  // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material7_DecalG;                                  // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material7_DecalB;                                  // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material8_R;                                       // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material8_G;                                       // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material8_B;                                       // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material8_PocketTextureName;                       // 0x0154(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material8_DecalTextureName;                        // 0x015C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material8_DecalR;                                  // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material8_DecalG;                                  // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material8_DecalB;                                  // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material9_R;                                       // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material9_G;                                       // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material9_B;                                       // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material9_PocketTextureName;                       // 0x017C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material9_DecalTextureName;                        // 0x0184(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material9_DecalR;                                  // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material9_DecalG;                                  // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material9_DecalB;                                  // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material10_R;                                      // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material10_G;                                      // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material10_B;                                      // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material10_PocketTextureName;                      // 0x01A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material10_DecalTextureName;                       // 0x01AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material10_DecalR;                                 // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material10_DecalG;                                 // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material10_DecalB;                                 // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material11_R;                                      // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material11_G;                                      // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material11_B;                                      // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material11_PocketTextureName;                      // 0x01CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material11_DecalTextureName;                       // 0x01D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material11_DecalR;                                 // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material11_DecalG;                                 // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material11_DecalB;                                 // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material12_R;                                      // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material12_G;                                      // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material12_B;                                      // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material12_PocketTextureName;                      // 0x01F4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material12_DecalTextureName;                       // 0x01FC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material12_DecalR;                                 // 0x0204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material12_DecalG;                                 // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material12_DecalB;                                 // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material13_R;                                      // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material13_G;                                      // 0x0214(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material13_B;                                      // 0x0218(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material13_PocketTextureName;                      // 0x021C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material13_DecalTextureName;                       // 0x0224(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material13_DecalR;                                 // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material13_DecalG;                                 // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material13_DecalB;                                 // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material14_R;                                      // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material14_G;                                      // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material14_B;                                      // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material14_PocketTextureName;                      // 0x0244(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material14_DecalTextureName;                       // 0x024C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material14_DecalR;                                 // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material14_DecalG;                                 // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Material14_DecalB;                                 // 0x025C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterColorPaletteTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterColorPaletteTableRow");
static_assert(sizeof(FRCParamCharacterColorPaletteTableRow) == 0x000260, "Wrong size on FRCParamCharacterColorPaletteTableRow");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material0_R) == 0x000008, "Member 'FRCParamCharacterColorPaletteTableRow::Material0_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material0_G) == 0x00000C, "Member 'FRCParamCharacterColorPaletteTableRow::Material0_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material0_B) == 0x000010, "Member 'FRCParamCharacterColorPaletteTableRow::Material0_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material0_PocketTextureName) == 0x000014, "Member 'FRCParamCharacterColorPaletteTableRow::Material0_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material0_DecalTextureName) == 0x00001C, "Member 'FRCParamCharacterColorPaletteTableRow::Material0_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material0_DecalR) == 0x000024, "Member 'FRCParamCharacterColorPaletteTableRow::Material0_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material0_DecalG) == 0x000028, "Member 'FRCParamCharacterColorPaletteTableRow::Material0_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material0_DecalB) == 0x00002C, "Member 'FRCParamCharacterColorPaletteTableRow::Material0_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material1_R) == 0x000030, "Member 'FRCParamCharacterColorPaletteTableRow::Material1_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material1_G) == 0x000034, "Member 'FRCParamCharacterColorPaletteTableRow::Material1_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material1_B) == 0x000038, "Member 'FRCParamCharacterColorPaletteTableRow::Material1_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material1_PocketTextureName) == 0x00003C, "Member 'FRCParamCharacterColorPaletteTableRow::Material1_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material1_DecalTextureName) == 0x000044, "Member 'FRCParamCharacterColorPaletteTableRow::Material1_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material1_DecalR) == 0x00004C, "Member 'FRCParamCharacterColorPaletteTableRow::Material1_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material1_DecalG) == 0x000050, "Member 'FRCParamCharacterColorPaletteTableRow::Material1_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material1_DecalB) == 0x000054, "Member 'FRCParamCharacterColorPaletteTableRow::Material1_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material2_R) == 0x000058, "Member 'FRCParamCharacterColorPaletteTableRow::Material2_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material2_G) == 0x00005C, "Member 'FRCParamCharacterColorPaletteTableRow::Material2_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material2_B) == 0x000060, "Member 'FRCParamCharacterColorPaletteTableRow::Material2_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material2_PocketTextureName) == 0x000064, "Member 'FRCParamCharacterColorPaletteTableRow::Material2_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material2_DecalTextureName) == 0x00006C, "Member 'FRCParamCharacterColorPaletteTableRow::Material2_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material2_DecalR) == 0x000074, "Member 'FRCParamCharacterColorPaletteTableRow::Material2_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material2_DecalG) == 0x000078, "Member 'FRCParamCharacterColorPaletteTableRow::Material2_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material2_DecalB) == 0x00007C, "Member 'FRCParamCharacterColorPaletteTableRow::Material2_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material3_R) == 0x000080, "Member 'FRCParamCharacterColorPaletteTableRow::Material3_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material3_G) == 0x000084, "Member 'FRCParamCharacterColorPaletteTableRow::Material3_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material3_B) == 0x000088, "Member 'FRCParamCharacterColorPaletteTableRow::Material3_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material3_PocketTextureName) == 0x00008C, "Member 'FRCParamCharacterColorPaletteTableRow::Material3_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material3_DecalTextureName) == 0x000094, "Member 'FRCParamCharacterColorPaletteTableRow::Material3_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material3_DecalR) == 0x00009C, "Member 'FRCParamCharacterColorPaletteTableRow::Material3_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material3_DecalG) == 0x0000A0, "Member 'FRCParamCharacterColorPaletteTableRow::Material3_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material3_DecalB) == 0x0000A4, "Member 'FRCParamCharacterColorPaletteTableRow::Material3_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material4_R) == 0x0000A8, "Member 'FRCParamCharacterColorPaletteTableRow::Material4_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material4_G) == 0x0000AC, "Member 'FRCParamCharacterColorPaletteTableRow::Material4_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material4_B) == 0x0000B0, "Member 'FRCParamCharacterColorPaletteTableRow::Material4_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material4_PocketTextureName) == 0x0000B4, "Member 'FRCParamCharacterColorPaletteTableRow::Material4_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material4_DecalTextureName) == 0x0000BC, "Member 'FRCParamCharacterColorPaletteTableRow::Material4_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material4_DecalR) == 0x0000C4, "Member 'FRCParamCharacterColorPaletteTableRow::Material4_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material4_DecalG) == 0x0000C8, "Member 'FRCParamCharacterColorPaletteTableRow::Material4_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material4_DecalB) == 0x0000CC, "Member 'FRCParamCharacterColorPaletteTableRow::Material4_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material5_R) == 0x0000D0, "Member 'FRCParamCharacterColorPaletteTableRow::Material5_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material5_G) == 0x0000D4, "Member 'FRCParamCharacterColorPaletteTableRow::Material5_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material5_B) == 0x0000D8, "Member 'FRCParamCharacterColorPaletteTableRow::Material5_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material5_PocketTextureName) == 0x0000DC, "Member 'FRCParamCharacterColorPaletteTableRow::Material5_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material5_DecalTextureName) == 0x0000E4, "Member 'FRCParamCharacterColorPaletteTableRow::Material5_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material5_DecalR) == 0x0000EC, "Member 'FRCParamCharacterColorPaletteTableRow::Material5_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material5_DecalG) == 0x0000F0, "Member 'FRCParamCharacterColorPaletteTableRow::Material5_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material5_DecalB) == 0x0000F4, "Member 'FRCParamCharacterColorPaletteTableRow::Material5_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material6_R) == 0x0000F8, "Member 'FRCParamCharacterColorPaletteTableRow::Material6_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material6_G) == 0x0000FC, "Member 'FRCParamCharacterColorPaletteTableRow::Material6_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material6_B) == 0x000100, "Member 'FRCParamCharacterColorPaletteTableRow::Material6_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material6_PocketTextureName) == 0x000104, "Member 'FRCParamCharacterColorPaletteTableRow::Material6_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material6_DecalTextureName) == 0x00010C, "Member 'FRCParamCharacterColorPaletteTableRow::Material6_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material6_DecalR) == 0x000114, "Member 'FRCParamCharacterColorPaletteTableRow::Material6_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material6_DecalG) == 0x000118, "Member 'FRCParamCharacterColorPaletteTableRow::Material6_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material6_DecalB) == 0x00011C, "Member 'FRCParamCharacterColorPaletteTableRow::Material6_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material7_R) == 0x000120, "Member 'FRCParamCharacterColorPaletteTableRow::Material7_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material7_G) == 0x000124, "Member 'FRCParamCharacterColorPaletteTableRow::Material7_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material7_B) == 0x000128, "Member 'FRCParamCharacterColorPaletteTableRow::Material7_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material7_PocketTextureName) == 0x00012C, "Member 'FRCParamCharacterColorPaletteTableRow::Material7_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material7_DecalTextureName) == 0x000134, "Member 'FRCParamCharacterColorPaletteTableRow::Material7_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material7_DecalR) == 0x00013C, "Member 'FRCParamCharacterColorPaletteTableRow::Material7_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material7_DecalG) == 0x000140, "Member 'FRCParamCharacterColorPaletteTableRow::Material7_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material7_DecalB) == 0x000144, "Member 'FRCParamCharacterColorPaletteTableRow::Material7_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material8_R) == 0x000148, "Member 'FRCParamCharacterColorPaletteTableRow::Material8_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material8_G) == 0x00014C, "Member 'FRCParamCharacterColorPaletteTableRow::Material8_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material8_B) == 0x000150, "Member 'FRCParamCharacterColorPaletteTableRow::Material8_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material8_PocketTextureName) == 0x000154, "Member 'FRCParamCharacterColorPaletteTableRow::Material8_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material8_DecalTextureName) == 0x00015C, "Member 'FRCParamCharacterColorPaletteTableRow::Material8_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material8_DecalR) == 0x000164, "Member 'FRCParamCharacterColorPaletteTableRow::Material8_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material8_DecalG) == 0x000168, "Member 'FRCParamCharacterColorPaletteTableRow::Material8_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material8_DecalB) == 0x00016C, "Member 'FRCParamCharacterColorPaletteTableRow::Material8_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material9_R) == 0x000170, "Member 'FRCParamCharacterColorPaletteTableRow::Material9_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material9_G) == 0x000174, "Member 'FRCParamCharacterColorPaletteTableRow::Material9_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material9_B) == 0x000178, "Member 'FRCParamCharacterColorPaletteTableRow::Material9_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material9_PocketTextureName) == 0x00017C, "Member 'FRCParamCharacterColorPaletteTableRow::Material9_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material9_DecalTextureName) == 0x000184, "Member 'FRCParamCharacterColorPaletteTableRow::Material9_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material9_DecalR) == 0x00018C, "Member 'FRCParamCharacterColorPaletteTableRow::Material9_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material9_DecalG) == 0x000190, "Member 'FRCParamCharacterColorPaletteTableRow::Material9_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material9_DecalB) == 0x000194, "Member 'FRCParamCharacterColorPaletteTableRow::Material9_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material10_R) == 0x000198, "Member 'FRCParamCharacterColorPaletteTableRow::Material10_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material10_G) == 0x00019C, "Member 'FRCParamCharacterColorPaletteTableRow::Material10_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material10_B) == 0x0001A0, "Member 'FRCParamCharacterColorPaletteTableRow::Material10_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material10_PocketTextureName) == 0x0001A4, "Member 'FRCParamCharacterColorPaletteTableRow::Material10_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material10_DecalTextureName) == 0x0001AC, "Member 'FRCParamCharacterColorPaletteTableRow::Material10_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material10_DecalR) == 0x0001B4, "Member 'FRCParamCharacterColorPaletteTableRow::Material10_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material10_DecalG) == 0x0001B8, "Member 'FRCParamCharacterColorPaletteTableRow::Material10_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material10_DecalB) == 0x0001BC, "Member 'FRCParamCharacterColorPaletteTableRow::Material10_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material11_R) == 0x0001C0, "Member 'FRCParamCharacterColorPaletteTableRow::Material11_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material11_G) == 0x0001C4, "Member 'FRCParamCharacterColorPaletteTableRow::Material11_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material11_B) == 0x0001C8, "Member 'FRCParamCharacterColorPaletteTableRow::Material11_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material11_PocketTextureName) == 0x0001CC, "Member 'FRCParamCharacterColorPaletteTableRow::Material11_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material11_DecalTextureName) == 0x0001D4, "Member 'FRCParamCharacterColorPaletteTableRow::Material11_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material11_DecalR) == 0x0001DC, "Member 'FRCParamCharacterColorPaletteTableRow::Material11_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material11_DecalG) == 0x0001E0, "Member 'FRCParamCharacterColorPaletteTableRow::Material11_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material11_DecalB) == 0x0001E4, "Member 'FRCParamCharacterColorPaletteTableRow::Material11_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material12_R) == 0x0001E8, "Member 'FRCParamCharacterColorPaletteTableRow::Material12_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material12_G) == 0x0001EC, "Member 'FRCParamCharacterColorPaletteTableRow::Material12_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material12_B) == 0x0001F0, "Member 'FRCParamCharacterColorPaletteTableRow::Material12_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material12_PocketTextureName) == 0x0001F4, "Member 'FRCParamCharacterColorPaletteTableRow::Material12_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material12_DecalTextureName) == 0x0001FC, "Member 'FRCParamCharacterColorPaletteTableRow::Material12_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material12_DecalR) == 0x000204, "Member 'FRCParamCharacterColorPaletteTableRow::Material12_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material12_DecalG) == 0x000208, "Member 'FRCParamCharacterColorPaletteTableRow::Material12_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material12_DecalB) == 0x00020C, "Member 'FRCParamCharacterColorPaletteTableRow::Material12_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material13_R) == 0x000210, "Member 'FRCParamCharacterColorPaletteTableRow::Material13_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material13_G) == 0x000214, "Member 'FRCParamCharacterColorPaletteTableRow::Material13_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material13_B) == 0x000218, "Member 'FRCParamCharacterColorPaletteTableRow::Material13_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material13_PocketTextureName) == 0x00021C, "Member 'FRCParamCharacterColorPaletteTableRow::Material13_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material13_DecalTextureName) == 0x000224, "Member 'FRCParamCharacterColorPaletteTableRow::Material13_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material13_DecalR) == 0x00022C, "Member 'FRCParamCharacterColorPaletteTableRow::Material13_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material13_DecalG) == 0x000230, "Member 'FRCParamCharacterColorPaletteTableRow::Material13_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material13_DecalB) == 0x000234, "Member 'FRCParamCharacterColorPaletteTableRow::Material13_DecalB' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material14_R) == 0x000238, "Member 'FRCParamCharacterColorPaletteTableRow::Material14_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material14_G) == 0x00023C, "Member 'FRCParamCharacterColorPaletteTableRow::Material14_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material14_B) == 0x000240, "Member 'FRCParamCharacterColorPaletteTableRow::Material14_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material14_PocketTextureName) == 0x000244, "Member 'FRCParamCharacterColorPaletteTableRow::Material14_PocketTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material14_DecalTextureName) == 0x00024C, "Member 'FRCParamCharacterColorPaletteTableRow::Material14_DecalTextureName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material14_DecalR) == 0x000254, "Member 'FRCParamCharacterColorPaletteTableRow::Material14_DecalR' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material14_DecalG) == 0x000258, "Member 'FRCParamCharacterColorPaletteTableRow::Material14_DecalG' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterColorPaletteTableRow, Material14_DecalB) == 0x00025C, "Member 'FRCParamCharacterColorPaletteTableRow::Material14_DecalB' has a wrong offset!");

// ScriptStruct RC.RCEventCharacterFormStyleData
// 0x0010 (0x0010 - 0x0000)
struct FRCEventCharacterFormStyleData final
{
public:
	TArray<class FName>                           DeleteMeshName;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCEventCharacterFormStyleData) == 0x000008, "Wrong alignment on FRCEventCharacterFormStyleData");
static_assert(sizeof(FRCEventCharacterFormStyleData) == 0x000010, "Wrong size on FRCEventCharacterFormStyleData");
static_assert(offsetof(FRCEventCharacterFormStyleData, DeleteMeshName) == 0x000000, "Member 'FRCEventCharacterFormStyleData::DeleteMeshName' has a wrong offset!");

// ScriptStruct RC.RCMinimapPlayerInfo
// 0x0014 (0x0014 - 0x0000)
struct FRCMinimapPlayerInfo final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCMinimapPlayerInfo) == 0x000004, "Wrong alignment on FRCMinimapPlayerInfo");
static_assert(sizeof(FRCMinimapPlayerInfo) == 0x000014, "Wrong size on FRCMinimapPlayerInfo");
static_assert(offsetof(FRCMinimapPlayerInfo, Enable) == 0x000000, "Member 'FRCMinimapPlayerInfo::Enable' has a wrong offset!");
static_assert(offsetof(FRCMinimapPlayerInfo, Position) == 0x000004, "Member 'FRCMinimapPlayerInfo::Position' has a wrong offset!");
static_assert(offsetof(FRCMinimapPlayerInfo, Angle) == 0x000010, "Member 'FRCMinimapPlayerInfo::Angle' has a wrong offset!");

// ScriptStruct RC.RCMinimapSubQuestInfo
// 0x0014 (0x0014 - 0x0000)
struct FRCMinimapSubQuestInfo final
{
public:
	class FName                                   RequesterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCMinimapSubQuestInfo) == 0x000004, "Wrong alignment on FRCMinimapSubQuestInfo");
static_assert(sizeof(FRCMinimapSubQuestInfo) == 0x000014, "Wrong size on FRCMinimapSubQuestInfo");
static_assert(offsetof(FRCMinimapSubQuestInfo, RequesterName) == 0x000000, "Member 'FRCMinimapSubQuestInfo::RequesterName' has a wrong offset!");
static_assert(offsetof(FRCMinimapSubQuestInfo, Position) == 0x000008, "Member 'FRCMinimapSubQuestInfo::Position' has a wrong offset!");

// ScriptStruct RC.RCMinimapAreaInfo
// 0x0018 (0x0018 - 0x0000)
struct FRCMinimapAreaInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCMinimapAreaInfo) == 0x000004, "Wrong alignment on FRCMinimapAreaInfo");
static_assert(sizeof(FRCMinimapAreaInfo) == 0x000018, "Wrong size on FRCMinimapAreaInfo");
static_assert(offsetof(FRCMinimapAreaInfo, ID) == 0x000000, "Member 'FRCMinimapAreaInfo::ID' has a wrong offset!");
static_assert(offsetof(FRCMinimapAreaInfo, Enable) == 0x000008, "Member 'FRCMinimapAreaInfo::Enable' has a wrong offset!");
static_assert(offsetof(FRCMinimapAreaInfo, Position) == 0x00000C, "Member 'FRCMinimapAreaInfo::Position' has a wrong offset!");

// ScriptStruct RC.RCFreeMoveMinimapInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FRCFreeMoveMinimapInfo final
{
public:
	float                                         CameraAngle;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCMinimapPlayerInfo                   PlayerInfo;                                        // 0x0004(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        TalkCharacterInfoList;                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        CheckActorList;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCMinimapAreaInfo>             BusStopInfoList;                                   // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMainQuestAllArea;                                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubQuestAllArea;                                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        MainQuestPositionList;                             // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SubQuestStartPositionList;                         // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCMinimapSubQuestInfo>         SubQuestEndPositionList;                           // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCMinimapAreaInfo>             AreaMoveInfoList;                                  // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCMinimapAreaInfo>             EnterBuildingInfoList;                             // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCFreeMoveMinimapInfo) == 0x000008, "Wrong alignment on FRCFreeMoveMinimapInfo");
static_assert(sizeof(FRCFreeMoveMinimapInfo) == 0x0000A0, "Wrong size on FRCFreeMoveMinimapInfo");
static_assert(offsetof(FRCFreeMoveMinimapInfo, CameraAngle) == 0x000000, "Member 'FRCFreeMoveMinimapInfo::CameraAngle' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, PlayerInfo) == 0x000004, "Member 'FRCFreeMoveMinimapInfo::PlayerInfo' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, TalkCharacterInfoList) == 0x000018, "Member 'FRCFreeMoveMinimapInfo::TalkCharacterInfoList' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, CheckActorList) == 0x000028, "Member 'FRCFreeMoveMinimapInfo::CheckActorList' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, BusStopInfoList) == 0x000038, "Member 'FRCFreeMoveMinimapInfo::BusStopInfoList' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, bMainQuestAllArea) == 0x000048, "Member 'FRCFreeMoveMinimapInfo::bMainQuestAllArea' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, bSubQuestAllArea) == 0x000049, "Member 'FRCFreeMoveMinimapInfo::bSubQuestAllArea' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, MainQuestPositionList) == 0x000050, "Member 'FRCFreeMoveMinimapInfo::MainQuestPositionList' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, SubQuestStartPositionList) == 0x000060, "Member 'FRCFreeMoveMinimapInfo::SubQuestStartPositionList' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, SubQuestEndPositionList) == 0x000070, "Member 'FRCFreeMoveMinimapInfo::SubQuestEndPositionList' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, AreaMoveInfoList) == 0x000080, "Member 'FRCFreeMoveMinimapInfo::AreaMoveInfoList' has a wrong offset!");
static_assert(offsetof(FRCFreeMoveMinimapInfo, EnterBuildingInfoList) == 0x000090, "Member 'FRCFreeMoveMinimapInfo::EnterBuildingInfoList' has a wrong offset!");

// ScriptStruct RC.RCParamGlossaryListTableRow
// 0x0050 (0x0058 - 0x0008)
struct FRCParamGlossaryListTableRow final : public FTableRowBase
{
public:
	class FName                                   GlossaryID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GlossaryCategoryID;                                // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumByCategoryJa;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumByCategoryEn;                               // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumByCategoryZhHans;                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumByCategoryZhHant;                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumByCategoryDe;                               // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumByCategoryEs;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumByCategoryFr;                               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumByCategoryIt;                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumByCategoryKr;                               // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Scene;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDName;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDDescription;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamGlossaryListTableRow) == 0x000008, "Wrong alignment on FRCParamGlossaryListTableRow");
static_assert(sizeof(FRCParamGlossaryListTableRow) == 0x000058, "Wrong size on FRCParamGlossaryListTableRow");
static_assert(offsetof(FRCParamGlossaryListTableRow, GlossaryID) == 0x000008, "Member 'FRCParamGlossaryListTableRow::GlossaryID' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, Phase) == 0x000010, "Member 'FRCParamGlossaryListTableRow::Phase' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, GlossaryCategoryID) == 0x000014, "Member 'FRCParamGlossaryListTableRow::GlossaryCategoryID' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, SortNumByCategoryJa) == 0x00001C, "Member 'FRCParamGlossaryListTableRow::SortNumByCategoryJa' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, SortNumByCategoryEn) == 0x000020, "Member 'FRCParamGlossaryListTableRow::SortNumByCategoryEn' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, SortNumByCategoryZhHans) == 0x000024, "Member 'FRCParamGlossaryListTableRow::SortNumByCategoryZhHans' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, SortNumByCategoryZhHant) == 0x000028, "Member 'FRCParamGlossaryListTableRow::SortNumByCategoryZhHant' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, SortNumByCategoryDe) == 0x00002C, "Member 'FRCParamGlossaryListTableRow::SortNumByCategoryDe' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, SortNumByCategoryEs) == 0x000030, "Member 'FRCParamGlossaryListTableRow::SortNumByCategoryEs' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, SortNumByCategoryFr) == 0x000034, "Member 'FRCParamGlossaryListTableRow::SortNumByCategoryFr' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, SortNumByCategoryIt) == 0x000038, "Member 'FRCParamGlossaryListTableRow::SortNumByCategoryIt' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, SortNumByCategoryKr) == 0x00003C, "Member 'FRCParamGlossaryListTableRow::SortNumByCategoryKr' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, Chapter) == 0x000040, "Member 'FRCParamGlossaryListTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, Scene) == 0x000044, "Member 'FRCParamGlossaryListTableRow::Scene' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, TextIDName) == 0x000048, "Member 'FRCParamGlossaryListTableRow::TextIDName' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryListTableRow, TextIDDescription) == 0x000050, "Member 'FRCParamGlossaryListTableRow::TextIDDescription' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterLookSettingTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamCharacterLookSettingTableRow final : public FTableRowBase
{
public:
	class FName                                   CharacterId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckWeightSpine1;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckWeightSpine2;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckWeightSpine3;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckWeightNeck;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckWeightHead;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamCharacterLookSettingTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterLookSettingTableRow");
static_assert(sizeof(FRCParamCharacterLookSettingTableRow) == 0x000030, "Wrong size on FRCParamCharacterLookSettingTableRow");
static_assert(offsetof(FRCParamCharacterLookSettingTableRow, CharacterId) == 0x000008, "Member 'FRCParamCharacterLookSettingTableRow::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterLookSettingTableRow, MotionName) == 0x000010, "Member 'FRCParamCharacterLookSettingTableRow::MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterLookSettingTableRow, NeckWeightSpine1) == 0x000018, "Member 'FRCParamCharacterLookSettingTableRow::NeckWeightSpine1' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterLookSettingTableRow, NeckWeightSpine2) == 0x00001C, "Member 'FRCParamCharacterLookSettingTableRow::NeckWeightSpine2' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterLookSettingTableRow, NeckWeightSpine3) == 0x000020, "Member 'FRCParamCharacterLookSettingTableRow::NeckWeightSpine3' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterLookSettingTableRow, NeckWeightNeck) == 0x000024, "Member 'FRCParamCharacterLookSettingTableRow::NeckWeightNeck' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterLookSettingTableRow, NeckWeightHead) == 0x000028, "Member 'FRCParamCharacterLookSettingTableRow::NeckWeightHead' has a wrong offset!");

// ScriptStruct RC.RCGrassTransformParameter
// 0x00B0 (0x00B0 - 0x0000)
struct FRCGrassTransformParameter final
{
public:
	float                                         InstanceDistance;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OriginalTransform;                                 // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             StartTransform;                                    // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             TargetTransform;                                   // 0x0070(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Status;                                            // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCGrassTransformParameter) == 0x000010, "Wrong alignment on FRCGrassTransformParameter");
static_assert(sizeof(FRCGrassTransformParameter) == 0x0000B0, "Wrong size on FRCGrassTransformParameter");
static_assert(offsetof(FRCGrassTransformParameter, InstanceDistance) == 0x000000, "Member 'FRCGrassTransformParameter::InstanceDistance' has a wrong offset!");
static_assert(offsetof(FRCGrassTransformParameter, OriginalTransform) == 0x000010, "Member 'FRCGrassTransformParameter::OriginalTransform' has a wrong offset!");
static_assert(offsetof(FRCGrassTransformParameter, StartTransform) == 0x000040, "Member 'FRCGrassTransformParameter::StartTransform' has a wrong offset!");
static_assert(offsetof(FRCGrassTransformParameter, TargetTransform) == 0x000070, "Member 'FRCGrassTransformParameter::TargetTransform' has a wrong offset!");
static_assert(offsetof(FRCGrassTransformParameter, Status) == 0x0000A0, "Member 'FRCGrassTransformParameter::Status' has a wrong offset!");
static_assert(offsetof(FRCGrassTransformParameter, Timer) == 0x0000A8, "Member 'FRCGrassTransformParameter::Timer' has a wrong offset!");

// ScriptStruct RC.RCParamChapterListTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamChapterListTableRow final : public FTableRowBase
{
public:
	int32                                         ChapterNum;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DlcType;                                           // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StoryMode;                                         // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DlcIndex;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamChapterListTableRow) == 0x000008, "Wrong alignment on FRCParamChapterListTableRow");
static_assert(sizeof(FRCParamChapterListTableRow) == 0x000020, "Wrong size on FRCParamChapterListTableRow");
static_assert(offsetof(FRCParamChapterListTableRow, ChapterNum) == 0x000008, "Member 'FRCParamChapterListTableRow::ChapterNum' has a wrong offset!");
static_assert(offsetof(FRCParamChapterListTableRow, DlcType) == 0x00000C, "Member 'FRCParamChapterListTableRow::DlcType' has a wrong offset!");
static_assert(offsetof(FRCParamChapterListTableRow, StoryMode) == 0x000014, "Member 'FRCParamChapterListTableRow::StoryMode' has a wrong offset!");
static_assert(offsetof(FRCParamChapterListTableRow, DlcIndex) == 0x00001C, "Member 'FRCParamChapterListTableRow::DlcIndex' has a wrong offset!");

// ScriptStruct RC.RCGrassGlobalParamsData
// 0x0048 (0x0048 - 0x0000)
struct FRCGrassGlobalParamsData final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindTextureRotation;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindStrength;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOpacity;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowSpeed;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudSize;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerMoveAlpha;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandscapeSize;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSpeed;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirWindMultiplier;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WindDirection;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LandscapeZeroWorldCoords;                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCGrassGlobalParamsData) == 0x000004, "Wrong alignment on FRCGrassGlobalParamsData");
static_assert(sizeof(FRCGrassGlobalParamsData) == 0x000048, "Wrong size on FRCGrassGlobalParamsData");
static_assert(offsetof(FRCGrassGlobalParamsData, bEnable) == 0x000000, "Member 'FRCGrassGlobalParamsData::bEnable' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, WindTextureRotation) == 0x000004, "Member 'FRCGrassGlobalParamsData::WindTextureRotation' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, WindStrength) == 0x000008, "Member 'FRCGrassGlobalParamsData::WindStrength' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, CloudShadowOpacity) == 0x00000C, "Member 'FRCGrassGlobalParamsData::CloudShadowOpacity' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, CloudShadowSpeed) == 0x000010, "Member 'FRCGrassGlobalParamsData::CloudShadowSpeed' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, CloudSize) == 0x000014, "Member 'FRCGrassGlobalParamsData::CloudSize' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, PlayerMoveAlpha) == 0x000018, "Member 'FRCGrassGlobalParamsData::PlayerMoveAlpha' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, LandscapeSize) == 0x00001C, "Member 'FRCGrassGlobalParamsData::LandscapeSize' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, WindSpeed) == 0x000020, "Member 'FRCGrassGlobalParamsData::WindSpeed' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, DirWindMultiplier) == 0x000024, "Member 'FRCGrassGlobalParamsData::DirWindMultiplier' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, WindDirection) == 0x000028, "Member 'FRCGrassGlobalParamsData::WindDirection' has a wrong offset!");
static_assert(offsetof(FRCGrassGlobalParamsData, LandscapeZeroWorldCoords) == 0x000038, "Member 'FRCGrassGlobalParamsData::LandscapeZeroWorldCoords' has a wrong offset!");

// ScriptStruct RC.RCMonitorInfo
// 0x0040 (0x0040 - 0x0000)
struct FRCMonitorInfo final
{
public:
	TArray<struct FIntPoint>                      Resolutions;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FIntPoint                              MaxResolution;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              WorkAreaMin;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              WorkAreaMax;                                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              DisplayRectMin;                                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              DisplayRectMax;                                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrimary;                                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCMonitorInfo) == 0x000008, "Wrong alignment on FRCMonitorInfo");
static_assert(sizeof(FRCMonitorInfo) == 0x000040, "Wrong size on FRCMonitorInfo");
static_assert(offsetof(FRCMonitorInfo, Resolutions) == 0x000000, "Member 'FRCMonitorInfo::Resolutions' has a wrong offset!");
static_assert(offsetof(FRCMonitorInfo, MaxResolution) == 0x000010, "Member 'FRCMonitorInfo::MaxResolution' has a wrong offset!");
static_assert(offsetof(FRCMonitorInfo, WorkAreaMin) == 0x000018, "Member 'FRCMonitorInfo::WorkAreaMin' has a wrong offset!");
static_assert(offsetof(FRCMonitorInfo, WorkAreaMax) == 0x000020, "Member 'FRCMonitorInfo::WorkAreaMax' has a wrong offset!");
static_assert(offsetof(FRCMonitorInfo, DisplayRectMin) == 0x000028, "Member 'FRCMonitorInfo::DisplayRectMin' has a wrong offset!");
static_assert(offsetof(FRCMonitorInfo, DisplayRectMax) == 0x000030, "Member 'FRCMonitorInfo::DisplayRectMax' has a wrong offset!");
static_assert(offsetof(FRCMonitorInfo, bIsPrimary) == 0x000038, "Member 'FRCMonitorInfo::bIsPrimary' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterSelectPageSettingTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamCharacterSelectPageSettingTableRow final : public FTableRowBase
{
public:
	int32                                         UpperCharacterNum;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowerCharacterNum;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterSelectPageSettingTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterSelectPageSettingTableRow");
static_assert(sizeof(FRCParamCharacterSelectPageSettingTableRow) == 0x000010, "Wrong size on FRCParamCharacterSelectPageSettingTableRow");
static_assert(offsetof(FRCParamCharacterSelectPageSettingTableRow, UpperCharacterNum) == 0x000008, "Member 'FRCParamCharacterSelectPageSettingTableRow::UpperCharacterNum' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSelectPageSettingTableRow, RowerCharacterNum) == 0x00000C, "Member 'FRCParamCharacterSelectPageSettingTableRow::RowerCharacterNum' has a wrong offset!");

// ScriptStruct RC.RCInputMode
// 0x000C (0x000C - 0x0000)
struct FRCInputMode final
{
public:
	ERCInputMode                                  InputMode;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ModeName;                                          // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCInputMode) == 0x000004, "Wrong alignment on FRCInputMode");
static_assert(sizeof(FRCInputMode) == 0x00000C, "Wrong size on FRCInputMode");
static_assert(offsetof(FRCInputMode, InputMode) == 0x000000, "Member 'FRCInputMode::InputMode' has a wrong offset!");
static_assert(offsetof(FRCInputMode, ModeName) == 0x000004, "Member 'FRCInputMode::ModeName' has a wrong offset!");

// ScriptStruct RC.RCKeyType
// 0x0020 (0x0020 - 0x0000)
struct FRCKeyType final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputButtonType                            ButtonType;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputHardwareType                          HardwareType;                                      // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputExButton                              ExButton;                                          // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCKeyType) == 0x000008, "Wrong alignment on FRCKeyType");
static_assert(sizeof(FRCKeyType) == 0x000020, "Wrong size on FRCKeyType");
static_assert(offsetof(FRCKeyType, Key) == 0x000000, "Member 'FRCKeyType::Key' has a wrong offset!");
static_assert(offsetof(FRCKeyType, ButtonType) == 0x000018, "Member 'FRCKeyType::ButtonType' has a wrong offset!");
static_assert(offsetof(FRCKeyType, HardwareType) == 0x000019, "Member 'FRCKeyType::HardwareType' has a wrong offset!");
static_assert(offsetof(FRCKeyType, ExButton) == 0x00001A, "Member 'FRCKeyType::ExButton' has a wrong offset!");

// ScriptStruct RC.RCInputKeyInfo
// 0x0020 (0x0020 - 0x0000)
struct FRCInputKeyInfo final
{
public:
	ERCInputKeyConfigType                         KeyConfigType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCKeyType>                     KeyList;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAnyKey;                                           // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCInputKeyInfo) == 0x000008, "Wrong alignment on FRCInputKeyInfo");
static_assert(sizeof(FRCInputKeyInfo) == 0x000020, "Wrong size on FRCInputKeyInfo");
static_assert(offsetof(FRCInputKeyInfo, KeyConfigType) == 0x000000, "Member 'FRCInputKeyInfo::KeyConfigType' has a wrong offset!");
static_assert(offsetof(FRCInputKeyInfo, KeyList) == 0x000008, "Member 'FRCInputKeyInfo::KeyList' has a wrong offset!");
static_assert(offsetof(FRCInputKeyInfo, bAnyKey) == 0x000018, "Member 'FRCInputKeyInfo::bAnyKey' has a wrong offset!");

// ScriptStruct RC.RCKeyConfigInfo
// 0x0020 (0x0020 - 0x0000)
struct FRCKeyConfigInfo final
{
public:
	bool                                          bInit;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCInputKeyInfo>                KeyInfoList;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ERCKeyboardType                               KeyboardType;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCKeyConfigInfo) == 0x000008, "Wrong alignment on FRCKeyConfigInfo");
static_assert(sizeof(FRCKeyConfigInfo) == 0x000020, "Wrong size on FRCKeyConfigInfo");
static_assert(offsetof(FRCKeyConfigInfo, bInit) == 0x000000, "Member 'FRCKeyConfigInfo::bInit' has a wrong offset!");
static_assert(offsetof(FRCKeyConfigInfo, KeyInfoList) == 0x000008, "Member 'FRCKeyConfigInfo::KeyInfoList' has a wrong offset!");
static_assert(offsetof(FRCKeyConfigInfo, KeyboardType) == 0x000018, "Member 'FRCKeyConfigInfo::KeyboardType' has a wrong offset!");

// ScriptStruct RC.OptionUiDisplay
// 0x0010 (0x0010 - 0x0000)
struct FOptionUiDisplay final
{
public:
	ERCTextLanguage                               TextLanguage;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MessageTextSpeed;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCCommonSwitch                               SubTitlesDraw;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCCommonSwitch                               BattleSubTitlesDraw;                               // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCCommonSwitch                               MinimapDraw;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionMinimapRotate                        MinimapNorthFixed;                                 // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionUiQuality                            UiQuality;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptionUiDisplay) == 0x000004, "Wrong alignment on FOptionUiDisplay");
static_assert(sizeof(FOptionUiDisplay) == 0x000010, "Wrong size on FOptionUiDisplay");
static_assert(offsetof(FOptionUiDisplay, TextLanguage) == 0x000000, "Member 'FOptionUiDisplay::TextLanguage' has a wrong offset!");
static_assert(offsetof(FOptionUiDisplay, MessageTextSpeed) == 0x000004, "Member 'FOptionUiDisplay::MessageTextSpeed' has a wrong offset!");
static_assert(offsetof(FOptionUiDisplay, SubTitlesDraw) == 0x000008, "Member 'FOptionUiDisplay::SubTitlesDraw' has a wrong offset!");
static_assert(offsetof(FOptionUiDisplay, BattleSubTitlesDraw) == 0x000009, "Member 'FOptionUiDisplay::BattleSubTitlesDraw' has a wrong offset!");
static_assert(offsetof(FOptionUiDisplay, MinimapDraw) == 0x00000A, "Member 'FOptionUiDisplay::MinimapDraw' has a wrong offset!");
static_assert(offsetof(FOptionUiDisplay, MinimapNorthFixed) == 0x00000B, "Member 'FOptionUiDisplay::MinimapNorthFixed' has a wrong offset!");
static_assert(offsetof(FOptionUiDisplay, UiQuality) == 0x00000C, "Member 'FOptionUiDisplay::UiQuality' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultMinigameTypeTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamNzResultMinigameTypeTableRow final : public FTableRowBase
{
public:
	class FName                                   MinigameEvalType;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzResultMinigameTypeTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultMinigameTypeTableRow");
static_assert(sizeof(FRCParamNzResultMinigameTypeTableRow) == 0x000010, "Wrong size on FRCParamNzResultMinigameTypeTableRow");
static_assert(offsetof(FRCParamNzResultMinigameTypeTableRow, MinigameEvalType) == 0x000008, "Member 'FRCParamNzResultMinigameTypeTableRow::MinigameEvalType' has a wrong offset!");

// ScriptStruct RC.RCLevelCharacterActorSave
// 0x0034 (0x0034 - 0x0000)
struct FRCLevelCharacterActorSave final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdleMotionName;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MoveMotionName;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTalk;                                             // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCLevelCharacterActorSave) == 0x000004, "Wrong alignment on FRCLevelCharacterActorSave");
static_assert(sizeof(FRCLevelCharacterActorSave) == 0x000034, "Wrong size on FRCLevelCharacterActorSave");
static_assert(offsetof(FRCLevelCharacterActorSave, CharacterName) == 0x000000, "Member 'FRCLevelCharacterActorSave::CharacterName' has a wrong offset!");
static_assert(offsetof(FRCLevelCharacterActorSave, Position) == 0x000008, "Member 'FRCLevelCharacterActorSave::Position' has a wrong offset!");
static_assert(offsetof(FRCLevelCharacterActorSave, Angle) == 0x000014, "Member 'FRCLevelCharacterActorSave::Angle' has a wrong offset!");
static_assert(offsetof(FRCLevelCharacterActorSave, MotionName) == 0x000018, "Member 'FRCLevelCharacterActorSave::MotionName' has a wrong offset!");
static_assert(offsetof(FRCLevelCharacterActorSave, IdleMotionName) == 0x000020, "Member 'FRCLevelCharacterActorSave::IdleMotionName' has a wrong offset!");
static_assert(offsetof(FRCLevelCharacterActorSave, MoveMotionName) == 0x000028, "Member 'FRCLevelCharacterActorSave::MoveMotionName' has a wrong offset!");
static_assert(offsetof(FRCLevelCharacterActorSave, bVisible) == 0x000030, "Member 'FRCLevelCharacterActorSave::bVisible' has a wrong offset!");
static_assert(offsetof(FRCLevelCharacterActorSave, bTalk) == 0x000031, "Member 'FRCLevelCharacterActorSave::bTalk' has a wrong offset!");

// ScriptStruct RC.RCLevelCheckActorSave
// 0x000C (0x000C - 0x0000)
struct FRCLevelCheckActorSave final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheck;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckFinish;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCLevelCheckActorSave) == 0x000004, "Wrong alignment on FRCLevelCheckActorSave");
static_assert(sizeof(FRCLevelCheckActorSave) == 0x00000C, "Wrong size on FRCLevelCheckActorSave");
static_assert(offsetof(FRCLevelCheckActorSave, ActorName) == 0x000000, "Member 'FRCLevelCheckActorSave::ActorName' has a wrong offset!");
static_assert(offsetof(FRCLevelCheckActorSave, bCheck) == 0x000008, "Member 'FRCLevelCheckActorSave::bCheck' has a wrong offset!");
static_assert(offsetof(FRCLevelCheckActorSave, bCheckFinish) == 0x000009, "Member 'FRCLevelCheckActorSave::bCheckFinish' has a wrong offset!");

// ScriptStruct RC.RCLevelBgActorSave
// 0x0020 (0x0020 - 0x0000)
struct FRCLevelBgActorSave final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCLevelBgActorSave) == 0x000004, "Wrong alignment on FRCLevelBgActorSave");
static_assert(sizeof(FRCLevelBgActorSave) == 0x000020, "Wrong size on FRCLevelBgActorSave");
static_assert(offsetof(FRCLevelBgActorSave, ActorName) == 0x000000, "Member 'FRCLevelBgActorSave::ActorName' has a wrong offset!");
static_assert(offsetof(FRCLevelBgActorSave, bVisible) == 0x000008, "Member 'FRCLevelBgActorSave::bVisible' has a wrong offset!");
static_assert(offsetof(FRCLevelBgActorSave, Position) == 0x00000C, "Member 'FRCLevelBgActorSave::Position' has a wrong offset!");
static_assert(offsetof(FRCLevelBgActorSave, EventName) == 0x000018, "Member 'FRCLevelBgActorSave::EventName' has a wrong offset!");

// ScriptStruct RC.RCLevelSave
// 0x0048 (0x0048 - 0x0000)
struct FRCLevelSave final
{
public:
	class FString                                 PlayBgmSoundID;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCLevelCharacterActorSave>     CharacterActorList;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCLevelCheckActorSave>         CheckActorList;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCLevelBgActorSave>            BgActorList;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MovieIndex;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCLevelSave) == 0x000008, "Wrong alignment on FRCLevelSave");
static_assert(sizeof(FRCLevelSave) == 0x000048, "Wrong size on FRCLevelSave");
static_assert(offsetof(FRCLevelSave, PlayBgmSoundID) == 0x000000, "Member 'FRCLevelSave::PlayBgmSoundID' has a wrong offset!");
static_assert(offsetof(FRCLevelSave, CharacterActorList) == 0x000010, "Member 'FRCLevelSave::CharacterActorList' has a wrong offset!");
static_assert(offsetof(FRCLevelSave, CheckActorList) == 0x000020, "Member 'FRCLevelSave::CheckActorList' has a wrong offset!");
static_assert(offsetof(FRCLevelSave, BgActorList) == 0x000030, "Member 'FRCLevelSave::BgActorList' has a wrong offset!");
static_assert(offsetof(FRCLevelSave, MovieIndex) == 0x000040, "Member 'FRCLevelSave::MovieIndex' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterFacial2D3DListTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamCharacterFacial2D3DListTableRow final : public FTableRowBase
{
public:
	class FName                                   CharacterFacialID2D;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterFacialID3D;                               // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterMotionName0;                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterMotionName1;                              // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterMotionName2;                              // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterMotionName3;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterMotionName4;                              // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterFacial2D3DListTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterFacial2D3DListTableRow");
static_assert(sizeof(FRCParamCharacterFacial2D3DListTableRow) == 0x000040, "Wrong size on FRCParamCharacterFacial2D3DListTableRow");
static_assert(offsetof(FRCParamCharacterFacial2D3DListTableRow, CharacterFacialID2D) == 0x000008, "Member 'FRCParamCharacterFacial2D3DListTableRow::CharacterFacialID2D' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacial2D3DListTableRow, CharacterFacialID3D) == 0x000010, "Member 'FRCParamCharacterFacial2D3DListTableRow::CharacterFacialID3D' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacial2D3DListTableRow, CharacterMotionName0) == 0x000018, "Member 'FRCParamCharacterFacial2D3DListTableRow::CharacterMotionName0' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacial2D3DListTableRow, CharacterMotionName1) == 0x000020, "Member 'FRCParamCharacterFacial2D3DListTableRow::CharacterMotionName1' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacial2D3DListTableRow, CharacterMotionName2) == 0x000028, "Member 'FRCParamCharacterFacial2D3DListTableRow::CharacterMotionName2' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacial2D3DListTableRow, CharacterMotionName3) == 0x000030, "Member 'FRCParamCharacterFacial2D3DListTableRow::CharacterMotionName3' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterFacial2D3DListTableRow, CharacterMotionName4) == 0x000038, "Member 'FRCParamCharacterFacial2D3DListTableRow::CharacterMotionName4' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuGlossaryInfo
// 0x0018 (0x0018 - 0x0000)
struct FRCVariableGameMenuGlossaryInfo final
{
public:
	class FName                                   GlossaryID;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGlossaryCategory                           GlossaryCategory;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortNumByCategory;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Phase;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuGlossaryInfo) == 0x000004, "Wrong alignment on FRCVariableGameMenuGlossaryInfo");
static_assert(sizeof(FRCVariableGameMenuGlossaryInfo) == 0x000018, "Wrong size on FRCVariableGameMenuGlossaryInfo");
static_assert(offsetof(FRCVariableGameMenuGlossaryInfo, GlossaryID) == 0x000000, "Member 'FRCVariableGameMenuGlossaryInfo::GlossaryID' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGlossaryInfo, GlossaryCategory) == 0x000008, "Member 'FRCVariableGameMenuGlossaryInfo::GlossaryCategory' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGlossaryInfo, SortNumByCategory) == 0x00000C, "Member 'FRCVariableGameMenuGlossaryInfo::SortNumByCategory' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGlossaryInfo, bNew) == 0x000010, "Member 'FRCVariableGameMenuGlossaryInfo::bNew' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGlossaryInfo, bUpdate) == 0x000011, "Member 'FRCVariableGameMenuGlossaryInfo::bUpdate' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGlossaryInfo, Phase) == 0x000014, "Member 'FRCVariableGameMenuGlossaryInfo::Phase' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultRankToTanteiPointTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamNzResultRankToTanteiPointTableRow final : public FTableRowBase
{
public:
	int32                                         TanteiPointBase;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rank_SS_Rate;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rank_S_Rate;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rank_A_Rate;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rank_B_Rate;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rank_C_Rate;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzResultRankToTanteiPointTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultRankToTanteiPointTableRow");
static_assert(sizeof(FRCParamNzResultRankToTanteiPointTableRow) == 0x000020, "Wrong size on FRCParamNzResultRankToTanteiPointTableRow");
static_assert(offsetof(FRCParamNzResultRankToTanteiPointTableRow, TanteiPointBase) == 0x000008, "Member 'FRCParamNzResultRankToTanteiPointTableRow::TanteiPointBase' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankToTanteiPointTableRow, Rank_SS_Rate) == 0x00000C, "Member 'FRCParamNzResultRankToTanteiPointTableRow::Rank_SS_Rate' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankToTanteiPointTableRow, Rank_S_Rate) == 0x000010, "Member 'FRCParamNzResultRankToTanteiPointTableRow::Rank_S_Rate' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankToTanteiPointTableRow, Rank_A_Rate) == 0x000014, "Member 'FRCParamNzResultRankToTanteiPointTableRow::Rank_A_Rate' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankToTanteiPointTableRow, Rank_B_Rate) == 0x000018, "Member 'FRCParamNzResultRankToTanteiPointTableRow::Rank_B_Rate' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankToTanteiPointTableRow, Rank_C_Rate) == 0x00001C, "Member 'FRCParamNzResultRankToTanteiPointTableRow::Rank_C_Rate' has a wrong offset!");

// ScriptStruct RC.RCCollectionHint
// 0x0020 (0x0020 - 0x0000)
struct FRCCollectionHint final
{
public:
	class UTextBlock*                             Name;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTextBlock*>                     epTextArray;                                       // 0x0008(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class URCMenuCollectionClear*                 clearImage;                                        // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCCollectionHint) == 0x000008, "Wrong alignment on FRCCollectionHint");
static_assert(sizeof(FRCCollectionHint) == 0x000020, "Wrong size on FRCCollectionHint");
static_assert(offsetof(FRCCollectionHint, Name) == 0x000000, "Member 'FRCCollectionHint::Name' has a wrong offset!");
static_assert(offsetof(FRCCollectionHint, epTextArray) == 0x000008, "Member 'FRCCollectionHint::epTextArray' has a wrong offset!");
static_assert(offsetof(FRCCollectionHint, clearImage) == 0x000018, "Member 'FRCCollectionHint::clearImage' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleAssistParameters
// 0x00D0 (0x00D8 - 0x0008)
struct FRCNazoBattleAssistParameters final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CoolTime;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        FaceTexturePath;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CutinTexturePath;                                  // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PartVoiceIDArray;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUnrivaled;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnrivaledTime;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLetterSpeedDown;                                  // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LetterSpeedDownValue;                              // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InLocationCurvePath;                               // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StayTime;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StayMotionName;                                    // 0x009C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttack;                                           // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttackMotionName;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackMotionLength;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackTime;                                        // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutMotionName;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        OutLocationCurvePath;                              // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleAssistParameters) == 0x000008, "Wrong alignment on FRCNazoBattleAssistParameters");
static_assert(sizeof(FRCNazoBattleAssistParameters) == 0x0000D8, "Wrong size on FRCNazoBattleAssistParameters");
static_assert(offsetof(FRCNazoBattleAssistParameters, Location) == 0x000008, "Member 'FRCNazoBattleAssistParameters::Location' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, Rotation) == 0x000014, "Member 'FRCNazoBattleAssistParameters::Rotation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, CoolTime) == 0x000020, "Member 'FRCNazoBattleAssistParameters::CoolTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, FaceTexturePath) == 0x000028, "Member 'FRCNazoBattleAssistParameters::FaceTexturePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, CutinTexturePath) == 0x000040, "Member 'FRCNazoBattleAssistParameters::CutinTexturePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, PartVoiceIDArray) == 0x000058, "Member 'FRCNazoBattleAssistParameters::PartVoiceIDArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, bUnrivaled) == 0x000068, "Member 'FRCNazoBattleAssistParameters::bUnrivaled' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, UnrivaledTime) == 0x00006C, "Member 'FRCNazoBattleAssistParameters::UnrivaledTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, bLetterSpeedDown) == 0x000070, "Member 'FRCNazoBattleAssistParameters::bLetterSpeedDown' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, LetterSpeedDownValue) == 0x000074, "Member 'FRCNazoBattleAssistParameters::LetterSpeedDownValue' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, InMotionName) == 0x000078, "Member 'FRCNazoBattleAssistParameters::InMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, InLocationCurvePath) == 0x000080, "Member 'FRCNazoBattleAssistParameters::InLocationCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, StayTime) == 0x000098, "Member 'FRCNazoBattleAssistParameters::StayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, StayMotionName) == 0x00009C, "Member 'FRCNazoBattleAssistParameters::StayMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, bAttack) == 0x0000A4, "Member 'FRCNazoBattleAssistParameters::bAttack' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, AttackMotionName) == 0x0000A8, "Member 'FRCNazoBattleAssistParameters::AttackMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, AttackMotionLength) == 0x0000B0, "Member 'FRCNazoBattleAssistParameters::AttackMotionLength' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, AttackTime) == 0x0000B4, "Member 'FRCNazoBattleAssistParameters::AttackTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, OutMotionName) == 0x0000B8, "Member 'FRCNazoBattleAssistParameters::OutMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistParameters, OutLocationCurvePath) == 0x0000C0, "Member 'FRCNazoBattleAssistParameters::OutLocationCurvePath' has a wrong offset!");

// ScriptStruct RC.RCParamBgListL00TableRow
// 0x0058 (0x0060 - 0x0008)
struct FRCParamBgListL00TableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BgName;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterMaterialID;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FaceFilterID;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FogID;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraID;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerMoveType;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaNameID;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MinimapID;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DrawLayerName;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamBgListL00TableRow) == 0x000008, "Wrong alignment on FRCParamBgListL00TableRow");
static_assert(sizeof(FRCParamBgListL00TableRow) == 0x000060, "Wrong size on FRCParamBgListL00TableRow");
static_assert(offsetof(FRCParamBgListL00TableRow, MapID) == 0x000008, "Member 'FRCParamBgListL00TableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL00TableRow, BgName) == 0x000010, "Member 'FRCParamBgListL00TableRow::BgName' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL00TableRow, CharacterMaterialID) == 0x000020, "Member 'FRCParamBgListL00TableRow::CharacterMaterialID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL00TableRow, FaceFilterID) == 0x000028, "Member 'FRCParamBgListL00TableRow::FaceFilterID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL00TableRow, FogID) == 0x000030, "Member 'FRCParamBgListL00TableRow::FogID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL00TableRow, CameraID) == 0x000038, "Member 'FRCParamBgListL00TableRow::CameraID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL00TableRow, PlayerMoveType) == 0x000040, "Member 'FRCParamBgListL00TableRow::PlayerMoveType' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL00TableRow, AreaNameID) == 0x000048, "Member 'FRCParamBgListL00TableRow::AreaNameID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL00TableRow, MinimapID) == 0x000050, "Member 'FRCParamBgListL00TableRow::MinimapID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL00TableRow, DrawLayerName) == 0x000058, "Member 'FRCParamBgListL00TableRow::DrawLayerName' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterData
// 0x0028 (0x0030 - 0x0008)
struct FRCNazoBattleRebuttalLetterData final : public FTableRowBase
{
public:
	ERCNazoBattleRebuttalLetterSize               Size;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        TexturePath;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 WispColor;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleRebuttalLetterData) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalLetterData");
static_assert(sizeof(FRCNazoBattleRebuttalLetterData) == 0x000030, "Wrong size on FRCNazoBattleRebuttalLetterData");
static_assert(offsetof(FRCNazoBattleRebuttalLetterData, Size) == 0x000008, "Member 'FRCNazoBattleRebuttalLetterData::Size' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterData, TexturePath) == 0x000010, "Member 'FRCNazoBattleRebuttalLetterData::TexturePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterData, WispColor) == 0x000028, "Member 'FRCNazoBattleRebuttalLetterData::WispColor' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterEffectData
// 0x0070 (0x0078 - 0x0008)
struct FRCNazoBattleRebuttalLetterEffectData final : public FTableRowBase
{
public:
	struct FSoftObjectPath                        NiagaraPath_In;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        NiagaraPath_Lp;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        NiagaraPath_Ot;                                    // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BasicSize;                                         // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WispSize;                                          // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShadowSize;                                        // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalLetterEffectData) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalLetterEffectData");
static_assert(sizeof(FRCNazoBattleRebuttalLetterEffectData) == 0x000078, "Wrong size on FRCNazoBattleRebuttalLetterEffectData");
static_assert(offsetof(FRCNazoBattleRebuttalLetterEffectData, NiagaraPath_In) == 0x000008, "Member 'FRCNazoBattleRebuttalLetterEffectData::NiagaraPath_In' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterEffectData, NiagaraPath_Lp) == 0x000020, "Member 'FRCNazoBattleRebuttalLetterEffectData::NiagaraPath_Lp' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterEffectData, NiagaraPath_Ot) == 0x000038, "Member 'FRCNazoBattleRebuttalLetterEffectData::NiagaraPath_Ot' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterEffectData, Scale) == 0x000050, "Member 'FRCNazoBattleRebuttalLetterEffectData::Scale' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterEffectData, BasicSize) == 0x000054, "Member 'FRCNazoBattleRebuttalLetterEffectData::BasicSize' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterEffectData, WispSize) == 0x000060, "Member 'FRCNazoBattleRebuttalLetterEffectData::WispSize' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterEffectData, ShadowSize) == 0x00006C, "Member 'FRCNazoBattleRebuttalLetterEffectData::ShadowSize' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuGalleryMovieInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCVariableGameMenuGalleryMovieInfo final
{
public:
	class FName                                   MovieID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNum;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCVariableGameMenuGalleryMovieInfo) == 0x000004, "Wrong alignment on FRCVariableGameMenuGalleryMovieInfo");
static_assert(sizeof(FRCVariableGameMenuGalleryMovieInfo) == 0x000010, "Wrong size on FRCVariableGameMenuGalleryMovieInfo");
static_assert(offsetof(FRCVariableGameMenuGalleryMovieInfo, MovieID) == 0x000000, "Member 'FRCVariableGameMenuGalleryMovieInfo::MovieID' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGalleryMovieInfo, SortNum) == 0x000008, "Member 'FRCVariableGameMenuGalleryMovieInfo::SortNum' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGalleryMovieInfo, bEnable) == 0x00000C, "Member 'FRCVariableGameMenuGalleryMovieInfo::bEnable' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGalleryMovieInfo, bNew) == 0x00000D, "Member 'FRCVariableGameMenuGalleryMovieInfo::bNew' has a wrong offset!");

// ScriptStruct RC.RCParamOptionCommonTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamOptionCommonTableRow final : public FTableRowBase
{
public:
	class FName                                   ItemId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamOptionCommonTableRow) == 0x000008, "Wrong alignment on FRCParamOptionCommonTableRow");
static_assert(sizeof(FRCParamOptionCommonTableRow) == 0x000010, "Wrong size on FRCParamOptionCommonTableRow");
static_assert(offsetof(FRCParamOptionCommonTableRow, ItemId) == 0x000008, "Member 'FRCParamOptionCommonTableRow::ItemId' has a wrong offset!");

// ScriptStruct RC.RCNazoBattlePlayerSettings
// 0x003C (0x003C - 0x0000)
struct FRCNazoBattlePlayerSettings final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveLRDistance;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartLeft;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistanceMax;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackDistanceMin;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisturbSlashEnable;                               // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         JustAvoidDetectivePoint;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RonpaCutinPartVoiceID;                             // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RonpaCutinPartVoiceDelayTime;                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RepelCutinPartVoiceID;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepelCutinPartVoiceDelayTime;                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattlePlayerSettings) == 0x000004, "Wrong alignment on FRCNazoBattlePlayerSettings");
static_assert(sizeof(FRCNazoBattlePlayerSettings) == 0x00003C, "Wrong size on FRCNazoBattlePlayerSettings");
static_assert(offsetof(FRCNazoBattlePlayerSettings, BaseLocation) == 0x000000, "Member 'FRCNazoBattlePlayerSettings::BaseLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, MoveLRDistance) == 0x00000C, "Member 'FRCNazoBattlePlayerSettings::MoveLRDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, bStartLeft) == 0x000010, "Member 'FRCNazoBattlePlayerSettings::bStartLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, AttackDistanceMax) == 0x000014, "Member 'FRCNazoBattlePlayerSettings::AttackDistanceMax' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, AttackDistanceMin) == 0x000018, "Member 'FRCNazoBattlePlayerSettings::AttackDistanceMin' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, bDisturbSlashEnable) == 0x00001C, "Member 'FRCNazoBattlePlayerSettings::bDisturbSlashEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, JustAvoidDetectivePoint) == 0x000020, "Member 'FRCNazoBattlePlayerSettings::JustAvoidDetectivePoint' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, RonpaCutinPartVoiceID) == 0x000024, "Member 'FRCNazoBattlePlayerSettings::RonpaCutinPartVoiceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, RonpaCutinPartVoiceDelayTime) == 0x00002C, "Member 'FRCNazoBattlePlayerSettings::RonpaCutinPartVoiceDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, RepelCutinPartVoiceID) == 0x000030, "Member 'FRCNazoBattlePlayerSettings::RepelCutinPartVoiceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattlePlayerSettings, RepelCutinPartVoiceDelayTime) == 0x000038, "Member 'FRCNazoBattlePlayerSettings::RepelCutinPartVoiceDelayTime' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleCameraSettings
// 0x0060 (0x0060 - 0x0000)
struct FRCNazoBattleCameraSettings final
{
public:
	class FName                                   StartCameraTag;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RebuttalCameraTag;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalMoveLRDistanceRate;                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalMoveUDDistance;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalLetterOutDistanceOffset;                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebuttalCameraTargetLocationFixed;                // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RebuttalCameraTargetLocation;                      // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalCameraTargetLocationDefaultOffset;         // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalCameraTargetLocationDefaultOffsetRate;     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalCameraTargetLocationDefaultOffsetL;        // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalCameraTargetLocationDefaultOffsetR;        // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RebuttalSlashCutinCameraTag;                       // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalSlashCutinCameraBlendTime;                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleCameraSettings) == 0x000004, "Wrong alignment on FRCNazoBattleCameraSettings");
static_assert(sizeof(FRCNazoBattleCameraSettings) == 0x000060, "Wrong size on FRCNazoBattleCameraSettings");
static_assert(offsetof(FRCNazoBattleCameraSettings, StartCameraTag) == 0x000000, "Member 'FRCNazoBattleCameraSettings::StartCameraTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalCameraTag) == 0x000008, "Member 'FRCNazoBattleCameraSettings::RebuttalCameraTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalMoveLRDistanceRate) == 0x000010, "Member 'FRCNazoBattleCameraSettings::RebuttalMoveLRDistanceRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalMoveUDDistance) == 0x000014, "Member 'FRCNazoBattleCameraSettings::RebuttalMoveUDDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalLetterOutDistanceOffset) == 0x000018, "Member 'FRCNazoBattleCameraSettings::RebuttalLetterOutDistanceOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, bRebuttalCameraTargetLocationFixed) == 0x00001C, "Member 'FRCNazoBattleCameraSettings::bRebuttalCameraTargetLocationFixed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalCameraTargetLocation) == 0x000020, "Member 'FRCNazoBattleCameraSettings::RebuttalCameraTargetLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalCameraTargetLocationDefaultOffset) == 0x00002C, "Member 'FRCNazoBattleCameraSettings::RebuttalCameraTargetLocationDefaultOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalCameraTargetLocationDefaultOffsetRate) == 0x000038, "Member 'FRCNazoBattleCameraSettings::RebuttalCameraTargetLocationDefaultOffsetRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalCameraTargetLocationDefaultOffsetL) == 0x00003C, "Member 'FRCNazoBattleCameraSettings::RebuttalCameraTargetLocationDefaultOffsetL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalCameraTargetLocationDefaultOffsetR) == 0x000048, "Member 'FRCNazoBattleCameraSettings::RebuttalCameraTargetLocationDefaultOffsetR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalSlashCutinCameraTag) == 0x000054, "Member 'FRCNazoBattleCameraSettings::RebuttalSlashCutinCameraTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleCameraSettings, RebuttalSlashCutinCameraBlendTime) == 0x00005C, "Member 'FRCNazoBattleCameraSettings::RebuttalSlashCutinCameraBlendTime' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleShinigamiSettings
// 0x0008 (0x0008 - 0x0000)
struct FRCNazoBattleShinigamiSettings final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleShinigamiSettings) == 0x000004, "Wrong alignment on FRCNazoBattleShinigamiSettings");
static_assert(sizeof(FRCNazoBattleShinigamiSettings) == 0x000008, "Wrong size on FRCNazoBattleShinigamiSettings");
static_assert(offsetof(FRCNazoBattleShinigamiSettings, Tag) == 0x000000, "Member 'FRCNazoBattleShinigamiSettings::Tag' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleAssistSettings
// 0x0060 (0x0060 - 0x0000)
struct FRCNazoBattleAssistSettings final
{
public:
	bool                                          bAssistEnable;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamID;                                           // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRewriteLocationAndRotation;                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InLocationCurvePath;                               // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        OutLocationCurvePath;                              // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleAssistSettings) == 0x000008, "Wrong alignment on FRCNazoBattleAssistSettings");
static_assert(sizeof(FRCNazoBattleAssistSettings) == 0x000060, "Wrong size on FRCNazoBattleAssistSettings");
static_assert(offsetof(FRCNazoBattleAssistSettings, bAssistEnable) == 0x000000, "Member 'FRCNazoBattleAssistSettings::bAssistEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistSettings, Tag) == 0x000004, "Member 'FRCNazoBattleAssistSettings::Tag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistSettings, ParamID) == 0x00000C, "Member 'FRCNazoBattleAssistSettings::ParamID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistSettings, bRewriteLocationAndRotation) == 0x000014, "Member 'FRCNazoBattleAssistSettings::bRewriteLocationAndRotation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistSettings, Location) == 0x000018, "Member 'FRCNazoBattleAssistSettings::Location' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistSettings, Rotation) == 0x000024, "Member 'FRCNazoBattleAssistSettings::Rotation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistSettings, InLocationCurvePath) == 0x000030, "Member 'FRCNazoBattleAssistSettings::InLocationCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleAssistSettings, OutLocationCurvePath) == 0x000048, "Member 'FRCNazoBattleAssistSettings::OutLocationCurvePath' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleKaijinPositionSettings
// 0x0038 (0x0038 - 0x0000)
struct FRCNazoBattleKaijinPositionSettings final
{
public:
	struct FVector                                LocationOffset;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocationOffset;                              // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraFocusRate;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraFocusLocationOffsetL;                        // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraFocusLocationOffsetR;                        // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraPitchOffset;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleKaijinPositionSettings) == 0x000004, "Wrong alignment on FRCNazoBattleKaijinPositionSettings");
static_assert(sizeof(FRCNazoBattleKaijinPositionSettings) == 0x000038, "Wrong size on FRCNazoBattleKaijinPositionSettings");
static_assert(offsetof(FRCNazoBattleKaijinPositionSettings, LocationOffset) == 0x000000, "Member 'FRCNazoBattleKaijinPositionSettings::LocationOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinPositionSettings, CameraLocationOffset) == 0x00000C, "Member 'FRCNazoBattleKaijinPositionSettings::CameraLocationOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinPositionSettings, CameraFocusRate) == 0x000018, "Member 'FRCNazoBattleKaijinPositionSettings::CameraFocusRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinPositionSettings, CameraFocusLocationOffsetL) == 0x00001C, "Member 'FRCNazoBattleKaijinPositionSettings::CameraFocusLocationOffsetL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinPositionSettings, CameraFocusLocationOffsetR) == 0x000028, "Member 'FRCNazoBattleKaijinPositionSettings::CameraFocusLocationOffsetR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinPositionSettings, CameraPitchOffset) == 0x000034, "Member 'FRCNazoBattleKaijinPositionSettings::CameraPitchOffset' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleKaijinRebuttalSettings
// 0x01E8 (0x01E8 - 0x0000)
struct FRCNazoBattleKaijinRebuttalSettings final
{
public:
	TMap<class FName, float>                      AttackMotionInLengthMap;                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                AppearLocation_Top;                                // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AppearLocation_Left;                               // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AppearLocation_Right;                              // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AppearLocation_Bottom;                             // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LRDistanceRate;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation_Top;                                // 0x0084(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation_Left;                               // 0x0090(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation_Right;                              // 0x009C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation_Bottom;                             // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        AppearEffectInLpPath;                              // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AppearEffectOtPath;                                // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearEffectSEID;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DecorationEffectPath;                              // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DecorationFrontMaterialPath;                       // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DecorationEdgeMaterialPath;                        // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AmbiguousDecorationEffectPath;                     // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AmbiguousDecorationFrontMaterialPath;              // 0x0150(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AmbiguousDecorationEdgeMaterialPath;               // 0x0168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DecorationSlashedEffectPath;                       // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DecorationHit1EffectPath;                          // 0x0198(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DecorationHit2EffectPath;                          // 0x01B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreEventPartVoiceID;                               // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreEventPartVoiceDelayTime;                        // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackSuccessPartVoiceID;                          // 0x01D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClearEventPartVoiceID;                             // 0x01DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleKaijinRebuttalSettings) == 0x000008, "Wrong alignment on FRCNazoBattleKaijinRebuttalSettings");
static_assert(sizeof(FRCNazoBattleKaijinRebuttalSettings) == 0x0001E8, "Wrong size on FRCNazoBattleKaijinRebuttalSettings");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AttackMotionInLengthMap) == 0x000000, "Member 'FRCNazoBattleKaijinRebuttalSettings::AttackMotionInLengthMap' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AppearLocation_Top) == 0x000050, "Member 'FRCNazoBattleKaijinRebuttalSettings::AppearLocation_Top' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AppearLocation_Left) == 0x00005C, "Member 'FRCNazoBattleKaijinRebuttalSettings::AppearLocation_Left' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AppearLocation_Right) == 0x000068, "Member 'FRCNazoBattleKaijinRebuttalSettings::AppearLocation_Right' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AppearLocation_Bottom) == 0x000074, "Member 'FRCNazoBattleKaijinRebuttalSettings::AppearLocation_Bottom' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, LRDistanceRate) == 0x000080, "Member 'FRCNazoBattleKaijinRebuttalSettings::LRDistanceRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, TargetLocation_Top) == 0x000084, "Member 'FRCNazoBattleKaijinRebuttalSettings::TargetLocation_Top' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, TargetLocation_Left) == 0x000090, "Member 'FRCNazoBattleKaijinRebuttalSettings::TargetLocation_Left' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, TargetLocation_Right) == 0x00009C, "Member 'FRCNazoBattleKaijinRebuttalSettings::TargetLocation_Right' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, TargetLocation_Bottom) == 0x0000A8, "Member 'FRCNazoBattleKaijinRebuttalSettings::TargetLocation_Bottom' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AppearEffectInLpPath) == 0x0000B8, "Member 'FRCNazoBattleKaijinRebuttalSettings::AppearEffectInLpPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AppearEffectOtPath) == 0x0000D0, "Member 'FRCNazoBattleKaijinRebuttalSettings::AppearEffectOtPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AppearEffectSEID) == 0x0000E8, "Member 'FRCNazoBattleKaijinRebuttalSettings::AppearEffectSEID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, DecorationEffectPath) == 0x0000F0, "Member 'FRCNazoBattleKaijinRebuttalSettings::DecorationEffectPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, DecorationFrontMaterialPath) == 0x000108, "Member 'FRCNazoBattleKaijinRebuttalSettings::DecorationFrontMaterialPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, DecorationEdgeMaterialPath) == 0x000120, "Member 'FRCNazoBattleKaijinRebuttalSettings::DecorationEdgeMaterialPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AmbiguousDecorationEffectPath) == 0x000138, "Member 'FRCNazoBattleKaijinRebuttalSettings::AmbiguousDecorationEffectPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AmbiguousDecorationFrontMaterialPath) == 0x000150, "Member 'FRCNazoBattleKaijinRebuttalSettings::AmbiguousDecorationFrontMaterialPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AmbiguousDecorationEdgeMaterialPath) == 0x000168, "Member 'FRCNazoBattleKaijinRebuttalSettings::AmbiguousDecorationEdgeMaterialPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, DecorationSlashedEffectPath) == 0x000180, "Member 'FRCNazoBattleKaijinRebuttalSettings::DecorationSlashedEffectPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, DecorationHit1EffectPath) == 0x000198, "Member 'FRCNazoBattleKaijinRebuttalSettings::DecorationHit1EffectPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, DecorationHit2EffectPath) == 0x0001B0, "Member 'FRCNazoBattleKaijinRebuttalSettings::DecorationHit2EffectPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, PreEventPartVoiceID) == 0x0001C8, "Member 'FRCNazoBattleKaijinRebuttalSettings::PreEventPartVoiceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, PreEventPartVoiceDelayTime) == 0x0001D0, "Member 'FRCNazoBattleKaijinRebuttalSettings::PreEventPartVoiceDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, AttackSuccessPartVoiceID) == 0x0001D4, "Member 'FRCNazoBattleKaijinRebuttalSettings::AttackSuccessPartVoiceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinRebuttalSettings, ClearEventPartVoiceID) == 0x0001DC, "Member 'FRCNazoBattleKaijinRebuttalSettings::ClearEventPartVoiceID' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleKaijinSettings
// 0x0278 (0x0278 - 0x0000)
struct FRCNazoBattleKaijinSettings final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BaseLocation;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultStayMotionName;                             // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultFacialName;                                 // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageMotionName;                                  // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageFacialName;                                  // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamagePartVoiceID;                                 // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTakeDamageNotOwnRebuttal;                         // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultDamage;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNazoBattleKaijinRebuttalSettings    RebuttalSettings;                                  // 0x0048(0x01E8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        JumpCurvePath;                                     // 0x0230(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveReadyMotionTime;                               // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveMotionTime;                                    // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveFinishMotionTime;                              // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCNazoBattleKaijinPositionSettings> PositionSettingsArray;                             // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PositionSettingsDefaultIndex;                      // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearFOV;                                           // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarFOV;                                            // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleKaijinSettings) == 0x000008, "Wrong alignment on FRCNazoBattleKaijinSettings");
static_assert(sizeof(FRCNazoBattleKaijinSettings) == 0x000278, "Wrong size on FRCNazoBattleKaijinSettings");
static_assert(offsetof(FRCNazoBattleKaijinSettings, Tag) == 0x000000, "Member 'FRCNazoBattleKaijinSettings::Tag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, BaseLocation) == 0x000008, "Member 'FRCNazoBattleKaijinSettings::BaseLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, DefaultStayMotionName) == 0x000014, "Member 'FRCNazoBattleKaijinSettings::DefaultStayMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, DefaultFacialName) == 0x00001C, "Member 'FRCNazoBattleKaijinSettings::DefaultFacialName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, DamageMotionName) == 0x000024, "Member 'FRCNazoBattleKaijinSettings::DamageMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, DamageFacialName) == 0x00002C, "Member 'FRCNazoBattleKaijinSettings::DamageFacialName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, DamagePartVoiceID) == 0x000034, "Member 'FRCNazoBattleKaijinSettings::DamagePartVoiceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, bTakeDamageNotOwnRebuttal) == 0x00003C, "Member 'FRCNazoBattleKaijinSettings::bTakeDamageNotOwnRebuttal' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, DefaultDamage) == 0x000040, "Member 'FRCNazoBattleKaijinSettings::DefaultDamage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, RebuttalSettings) == 0x000048, "Member 'FRCNazoBattleKaijinSettings::RebuttalSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, JumpCurvePath) == 0x000230, "Member 'FRCNazoBattleKaijinSettings::JumpCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, MoveReadyMotionTime) == 0x000248, "Member 'FRCNazoBattleKaijinSettings::MoveReadyMotionTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, MoveMotionTime) == 0x00024C, "Member 'FRCNazoBattleKaijinSettings::MoveMotionTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, MoveFinishMotionTime) == 0x000250, "Member 'FRCNazoBattleKaijinSettings::MoveFinishMotionTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, PositionSettingsArray) == 0x000258, "Member 'FRCNazoBattleKaijinSettings::PositionSettingsArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, PositionSettingsDefaultIndex) == 0x000268, "Member 'FRCNazoBattleKaijinSettings::PositionSettingsDefaultIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, NearFOV) == 0x00026C, "Member 'FRCNazoBattleKaijinSettings::NearFOV' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinSettings, FarFOV) == 0x000270, "Member 'FRCNazoBattleKaijinSettings::FarFOV' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleKaijinGroupRebuttalSettings
// 0x0090 (0x0090 - 0x0000)
struct FRCNazoBattleKaijinGroupRebuttalSettings final
{
public:
	struct FSoftObjectPath                        FrontMaterialPath;                                 // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        EdgeMaterialPath;                                  // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomRebuttalLetterColor;                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           RebuttalLetterColor;                               // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RebuttalLetterEdgeColor;                           // 0x0044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomAmbiguousLetterColor;                       // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           AmbiguousLetterColor;                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AmbiguousLetterEdgeColor;                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomShadowColor;                                // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ShadowColor;                                       // 0x007C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleKaijinGroupRebuttalSettings) == 0x000008, "Wrong alignment on FRCNazoBattleKaijinGroupRebuttalSettings");
static_assert(sizeof(FRCNazoBattleKaijinGroupRebuttalSettings) == 0x000090, "Wrong size on FRCNazoBattleKaijinGroupRebuttalSettings");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, FrontMaterialPath) == 0x000000, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::FrontMaterialPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, EdgeMaterialPath) == 0x000018, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::EdgeMaterialPath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, bCustomRebuttalLetterColor) == 0x000030, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::bCustomRebuttalLetterColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, RebuttalLetterColor) == 0x000034, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::RebuttalLetterColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, RebuttalLetterEdgeColor) == 0x000044, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::RebuttalLetterEdgeColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, bCustomAmbiguousLetterColor) == 0x000054, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::bCustomAmbiguousLetterColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, AmbiguousLetterColor) == 0x000058, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::AmbiguousLetterColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, AmbiguousLetterEdgeColor) == 0x000068, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::AmbiguousLetterEdgeColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, bCustomShadowColor) == 0x000078, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::bCustomShadowColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupRebuttalSettings, ShadowColor) == 0x00007C, "Member 'FRCNazoBattleKaijinGroupRebuttalSettings::ShadowColor' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleKaijinGroupDisturbLetterPositionSettings
// 0x0018 (0x0018 - 0x0000)
struct FRCNazoBattleKaijinGroupDisturbLetterPositionSettings final
{
public:
	struct FVector                                LeftPosition;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightPosition;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleKaijinGroupDisturbLetterPositionSettings) == 0x000004, "Wrong alignment on FRCNazoBattleKaijinGroupDisturbLetterPositionSettings");
static_assert(sizeof(FRCNazoBattleKaijinGroupDisturbLetterPositionSettings) == 0x000018, "Wrong size on FRCNazoBattleKaijinGroupDisturbLetterPositionSettings");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbLetterPositionSettings, LeftPosition) == 0x000000, "Member 'FRCNazoBattleKaijinGroupDisturbLetterPositionSettings::LeftPosition' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbLetterPositionSettings, RightPosition) == 0x00000C, "Member 'FRCNazoBattleKaijinGroupDisturbLetterPositionSettings::RightPosition' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleKaijinGroupDisturbLetterLaneSettings
// 0x0048 (0x0048 - 0x0000)
struct FRCNazoBattleKaijinGroupDisturbLetterLaneSettings final
{
public:
	struct FRCNazoBattleKaijinGroupDisturbLetterPositionSettings TopSettings;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCNazoBattleKaijinGroupDisturbLetterPositionSettings MiddleSettings;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCNazoBattleKaijinGroupDisturbLetterPositionSettings BottomSettings;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleKaijinGroupDisturbLetterLaneSettings) == 0x000004, "Wrong alignment on FRCNazoBattleKaijinGroupDisturbLetterLaneSettings");
static_assert(sizeof(FRCNazoBattleKaijinGroupDisturbLetterLaneSettings) == 0x000048, "Wrong size on FRCNazoBattleKaijinGroupDisturbLetterLaneSettings");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbLetterLaneSettings, TopSettings) == 0x000000, "Member 'FRCNazoBattleKaijinGroupDisturbLetterLaneSettings::TopSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbLetterLaneSettings, MiddleSettings) == 0x000018, "Member 'FRCNazoBattleKaijinGroupDisturbLetterLaneSettings::MiddleSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbLetterLaneSettings, BottomSettings) == 0x000030, "Member 'FRCNazoBattleKaijinGroupDisturbLetterLaneSettings::BottomSettings' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleKaijinGroupDisturbSettings
// 0x0100 (0x0100 - 0x0000)
struct FRCNazoBattleKaijinGroupDisturbSettings final
{
public:
	TArray<struct FVector>                        TargetPositionArray;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRCNazoBattleKaijinGroupDisturbLetterLaneSettings ForeLaneSettings;                                  // 0x0010(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCNazoBattleKaijinGroupDisturbLetterLaneSettings MiddleLaneSettings;                                // 0x0058(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCNazoBattleKaijinGroupDisturbLetterLaneSettings BackLaneSettings;                                  // 0x00A0(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         DefaultDamage;                                     // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x00EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleKaijinGroupDisturbSettings) == 0x000008, "Wrong alignment on FRCNazoBattleKaijinGroupDisturbSettings");
static_assert(sizeof(FRCNazoBattleKaijinGroupDisturbSettings) == 0x000100, "Wrong size on FRCNazoBattleKaijinGroupDisturbSettings");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbSettings, TargetPositionArray) == 0x000000, "Member 'FRCNazoBattleKaijinGroupDisturbSettings::TargetPositionArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbSettings, ForeLaneSettings) == 0x000010, "Member 'FRCNazoBattleKaijinGroupDisturbSettings::ForeLaneSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbSettings, MiddleLaneSettings) == 0x000058, "Member 'FRCNazoBattleKaijinGroupDisturbSettings::MiddleLaneSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbSettings, BackLaneSettings) == 0x0000A0, "Member 'FRCNazoBattleKaijinGroupDisturbSettings::BackLaneSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbSettings, DefaultDamage) == 0x0000E8, "Member 'FRCNazoBattleKaijinGroupDisturbSettings::DefaultDamage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupDisturbSettings, ShadowColor) == 0x0000EC, "Member 'FRCNazoBattleKaijinGroupDisturbSettings::ShadowColor' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleKaijinGroupSettings
// 0x01B8 (0x01B8 - 0x0000)
struct FRCNazoBattleKaijinGroupSettings final
{
public:
	TArray<struct FRCNazoBattleKaijinSettings>    KaijinArray;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DefaultDamage;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNazoBattleKaijinGroupRebuttalSettings RebuttalSettings;                                  // 0x0018(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCNazoBattleKaijinGroupDisturbSettings DisturbSettings;                                   // 0x00A8(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bFacePlayer;                                       // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PreEventPartVoiceKaijinTag;                        // 0x01AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleKaijinGroupSettings) == 0x000008, "Wrong alignment on FRCNazoBattleKaijinGroupSettings");
static_assert(sizeof(FRCNazoBattleKaijinGroupSettings) == 0x0001B8, "Wrong size on FRCNazoBattleKaijinGroupSettings");
static_assert(offsetof(FRCNazoBattleKaijinGroupSettings, KaijinArray) == 0x000000, "Member 'FRCNazoBattleKaijinGroupSettings::KaijinArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupSettings, DefaultDamage) == 0x000010, "Member 'FRCNazoBattleKaijinGroupSettings::DefaultDamage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupSettings, RebuttalSettings) == 0x000018, "Member 'FRCNazoBattleKaijinGroupSettings::RebuttalSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupSettings, DisturbSettings) == 0x0000A8, "Member 'FRCNazoBattleKaijinGroupSettings::DisturbSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupSettings, bFacePlayer) == 0x0001A8, "Member 'FRCNazoBattleKaijinGroupSettings::bFacePlayer' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleKaijinGroupSettings, PreEventPartVoiceKaijinTag) == 0x0001AC, "Member 'FRCNazoBattleKaijinGroupSettings::PreEventPartVoiceKaijinTag' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleSettings
// 0x0310 (0x0318 - 0x0008)
struct FRCNazoBattleSettings final : public FTableRowBase
{
public:
	struct FRCNazoBattlePlayerSettings            Player;                                            // 0x0008(0x003C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCNazoBattleCameraSettings            Camera;                                            // 0x0044(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCNazoBattleShinigamiSettings         Shinigami;                                         // 0x00A4(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNazoBattleAssistSettings            Assist;                                            // 0x00B0(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCNazoBattleKaijinGroupSettings       KaijinGroup;                                       // 0x0110(0x01B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bFinalBattle;                                      // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          b3Way;                                             // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CA[0x2];                                      // 0x02CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BgmID;                                             // 0x02CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopBGMAtFinished;                                // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BGActorNameArray;                                  // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAmbiguousEnable;                                  // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResultFailure;                                    // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EA[0x2];                                      // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResultAttackFailureSubCount;                       // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultHitPlayerSubCount;                           // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultHitPlayerDivCount;                           // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreEventTalkID;                                    // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClearEventTalkID;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ClearEventTalkIDArray;                             // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleSettings) == 0x000008, "Wrong alignment on FRCNazoBattleSettings");
static_assert(sizeof(FRCNazoBattleSettings) == 0x000318, "Wrong size on FRCNazoBattleSettings");
static_assert(offsetof(FRCNazoBattleSettings, Player) == 0x000008, "Member 'FRCNazoBattleSettings::Player' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, Camera) == 0x000044, "Member 'FRCNazoBattleSettings::Camera' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, Shinigami) == 0x0000A4, "Member 'FRCNazoBattleSettings::Shinigami' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, Assist) == 0x0000B0, "Member 'FRCNazoBattleSettings::Assist' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, KaijinGroup) == 0x000110, "Member 'FRCNazoBattleSettings::KaijinGroup' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, bFinalBattle) == 0x0002C8, "Member 'FRCNazoBattleSettings::bFinalBattle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, b3Way) == 0x0002C9, "Member 'FRCNazoBattleSettings::b3Way' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, BgmID) == 0x0002CC, "Member 'FRCNazoBattleSettings::BgmID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, bStopBGMAtFinished) == 0x0002D4, "Member 'FRCNazoBattleSettings::bStopBGMAtFinished' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, BGActorNameArray) == 0x0002D8, "Member 'FRCNazoBattleSettings::BGActorNameArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, bAmbiguousEnable) == 0x0002E8, "Member 'FRCNazoBattleSettings::bAmbiguousEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, bResultFailure) == 0x0002E9, "Member 'FRCNazoBattleSettings::bResultFailure' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, ResultAttackFailureSubCount) == 0x0002EC, "Member 'FRCNazoBattleSettings::ResultAttackFailureSubCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, ResultHitPlayerSubCount) == 0x0002F0, "Member 'FRCNazoBattleSettings::ResultHitPlayerSubCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, ResultHitPlayerDivCount) == 0x0002F4, "Member 'FRCNazoBattleSettings::ResultHitPlayerDivCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, PreEventTalkID) == 0x0002F8, "Member 'FRCNazoBattleSettings::PreEventTalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, ClearEventTalkID) == 0x000300, "Member 'FRCNazoBattleSettings::ClearEventTalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleSettings, ClearEventTalkIDArray) == 0x000308, "Member 'FRCNazoBattleSettings::ClearEventTalkIDArray' has a wrong offset!");

// ScriptStruct RC.RCScriptActorMoveInfo
// 0x0030 (0x0030 - 0x0000)
struct FRCScriptActorMoveInfo final
{
public:
	class FName                                   PointName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wait;                                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveScale;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeYawSpeedScale;                               // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeedScale;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StopAnimationId;                                   // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCCharacterMoveFadeType                      FadeType;                                          // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCScriptActorMoveInfo) == 0x000004, "Wrong alignment on FRCScriptActorMoveInfo");
static_assert(sizeof(FRCScriptActorMoveInfo) == 0x000030, "Wrong size on FRCScriptActorMoveInfo");
static_assert(offsetof(FRCScriptActorMoveInfo, PointName) == 0x000000, "Member 'FRCScriptActorMoveInfo::PointName' has a wrong offset!");
static_assert(offsetof(FRCScriptActorMoveInfo, Position) == 0x000008, "Member 'FRCScriptActorMoveInfo::Position' has a wrong offset!");
static_assert(offsetof(FRCScriptActorMoveInfo, Wait) == 0x000014, "Member 'FRCScriptActorMoveInfo::Wait' has a wrong offset!");
static_assert(offsetof(FRCScriptActorMoveInfo, MoveScale) == 0x000018, "Member 'FRCScriptActorMoveInfo::MoveScale' has a wrong offset!");
static_assert(offsetof(FRCScriptActorMoveInfo, ChangeYawSpeedScale) == 0x00001C, "Member 'FRCScriptActorMoveInfo::ChangeYawSpeedScale' has a wrong offset!");
static_assert(offsetof(FRCScriptActorMoveInfo, TurnSpeedScale) == 0x000020, "Member 'FRCScriptActorMoveInfo::TurnSpeedScale' has a wrong offset!");
static_assert(offsetof(FRCScriptActorMoveInfo, StopAnimationId) == 0x000024, "Member 'FRCScriptActorMoveInfo::StopAnimationId' has a wrong offset!");
static_assert(offsetof(FRCScriptActorMoveInfo, FadeType) == 0x00002C, "Member 'FRCScriptActorMoveInfo::FadeType' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuSkillInfo
// 0x000C (0x000C - 0x0000)
struct FRCVariableGameMenuSkillInfo final
{
public:
	class FName                                   SkillID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSkillType                                  SkillType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcquired;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquip;                                            // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCVariableGameMenuSkillInfo) == 0x000004, "Wrong alignment on FRCVariableGameMenuSkillInfo");
static_assert(sizeof(FRCVariableGameMenuSkillInfo) == 0x00000C, "Wrong size on FRCVariableGameMenuSkillInfo");
static_assert(offsetof(FRCVariableGameMenuSkillInfo, SkillID) == 0x000000, "Member 'FRCVariableGameMenuSkillInfo::SkillID' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuSkillInfo, SkillType) == 0x000008, "Member 'FRCVariableGameMenuSkillInfo::SkillType' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuSkillInfo, bAcquired) == 0x000009, "Member 'FRCVariableGameMenuSkillInfo::bAcquired' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuSkillInfo, bEquip) == 0x00000A, "Member 'FRCVariableGameMenuSkillInfo::bEquip' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuKaikagiInfo
// 0x0014 (0x0014 - 0x0000)
struct FRCVariableGameMenuKaikagiInfo final
{
public:
	class FName                                   KaikagiID;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCKaikagiType                                KaikagiType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Phase;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNum;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuKaikagiInfo) == 0x000004, "Wrong alignment on FRCVariableGameMenuKaikagiInfo");
static_assert(sizeof(FRCVariableGameMenuKaikagiInfo) == 0x000014, "Wrong size on FRCVariableGameMenuKaikagiInfo");
static_assert(offsetof(FRCVariableGameMenuKaikagiInfo, KaikagiID) == 0x000000, "Member 'FRCVariableGameMenuKaikagiInfo::KaikagiID' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuKaikagiInfo, KaikagiType) == 0x000008, "Member 'FRCVariableGameMenuKaikagiInfo::KaikagiType' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuKaikagiInfo, bNew) == 0x000009, "Member 'FRCVariableGameMenuKaikagiInfo::bNew' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuKaikagiInfo, bUpdate) == 0x00000A, "Member 'FRCVariableGameMenuKaikagiInfo::bUpdate' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuKaikagiInfo, Phase) == 0x00000C, "Member 'FRCVariableGameMenuKaikagiInfo::Phase' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuKaikagiInfo, SortNum) == 0x000010, "Member 'FRCVariableGameMenuKaikagiInfo::SortNum' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuKaikagiMenuInfo
// 0x0018 (0x0018 - 0x0000)
struct FRCVariableGameMenuKaikagiMenuInfo final
{
public:
	bool                                          bAccess;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableGameMenuKaikagiInfo> KaikagiList;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuKaikagiMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuKaikagiMenuInfo");
static_assert(sizeof(FRCVariableGameMenuKaikagiMenuInfo) == 0x000018, "Wrong size on FRCVariableGameMenuKaikagiMenuInfo");
static_assert(offsetof(FRCVariableGameMenuKaikagiMenuInfo, bAccess) == 0x000000, "Member 'FRCVariableGameMenuKaikagiMenuInfo::bAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuKaikagiMenuInfo, KaikagiList) == 0x000008, "Member 'FRCVariableGameMenuKaikagiMenuInfo::KaikagiList' has a wrong offset!");

// ScriptStruct RC.RCParamOptionKeyDuplicateTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamOptionKeyDuplicateTableRow final : public FTableRowBase
{
public:
	class FName                                   CategoryID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ERCInputKeyConfigType>                 DuplicateCheckList;                                // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamOptionKeyDuplicateTableRow) == 0x000008, "Wrong alignment on FRCParamOptionKeyDuplicateTableRow");
static_assert(sizeof(FRCParamOptionKeyDuplicateTableRow) == 0x000020, "Wrong size on FRCParamOptionKeyDuplicateTableRow");
static_assert(offsetof(FRCParamOptionKeyDuplicateTableRow, CategoryID) == 0x000008, "Member 'FRCParamOptionKeyDuplicateTableRow::CategoryID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionKeyDuplicateTableRow, DuplicateCheckList) == 0x000010, "Member 'FRCParamOptionKeyDuplicateTableRow::DuplicateCheckList' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterBallonPositionTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamCharacterBallonPositionTableRow final : public FTableRowBase
{
public:
	float                                         SelifLength;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BallonHeightOffset;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BallonAngleOffset;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BallonLengthOffset;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterBallonPositionTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterBallonPositionTableRow");
static_assert(sizeof(FRCParamCharacterBallonPositionTableRow) == 0x000018, "Wrong size on FRCParamCharacterBallonPositionTableRow");
static_assert(offsetof(FRCParamCharacterBallonPositionTableRow, SelifLength) == 0x000008, "Member 'FRCParamCharacterBallonPositionTableRow::SelifLength' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterBallonPositionTableRow, BallonHeightOffset) == 0x00000C, "Member 'FRCParamCharacterBallonPositionTableRow::BallonHeightOffset' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterBallonPositionTableRow, BallonAngleOffset) == 0x000010, "Member 'FRCParamCharacterBallonPositionTableRow::BallonAngleOffset' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterBallonPositionTableRow, BallonLengthOffset) == 0x000014, "Member 'FRCParamCharacterBallonPositionTableRow::BallonLengthOffset' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuGalleryMovieMenuInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCVariableGameMenuGalleryMovieMenuInfo final
{
public:
	TArray<struct FRCVariableGameMenuGalleryMovieInfo> MovieGalleryList;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuGalleryMovieMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuGalleryMovieMenuInfo");
static_assert(sizeof(FRCVariableGameMenuGalleryMovieMenuInfo) == 0x000010, "Wrong size on FRCVariableGameMenuGalleryMovieMenuInfo");
static_assert(offsetof(FRCVariableGameMenuGalleryMovieMenuInfo, MovieGalleryList) == 0x000000, "Member 'FRCVariableGameMenuGalleryMovieMenuInfo::MovieGalleryList' has a wrong offset!");

// ScriptStruct RC.RCParamFigureTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamFigureTableRow final : public FTableRowBase
{
public:
	class FName                                   PersonID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FigureNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FigureHintTextID;                                  // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EpName;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamFigureTableRow) == 0x000008, "Wrong alignment on FRCParamFigureTableRow");
static_assert(sizeof(FRCParamFigureTableRow) == 0x000030, "Wrong size on FRCParamFigureTableRow");
static_assert(offsetof(FRCParamFigureTableRow, PersonID) == 0x000008, "Member 'FRCParamFigureTableRow::PersonID' has a wrong offset!");
static_assert(offsetof(FRCParamFigureTableRow, FigureNum) == 0x000010, "Member 'FRCParamFigureTableRow::FigureNum' has a wrong offset!");
static_assert(offsetof(FRCParamFigureTableRow, FigureHintTextID) == 0x000014, "Member 'FRCParamFigureTableRow::FigureHintTextID' has a wrong offset!");
static_assert(offsetof(FRCParamFigureTableRow, EpName) == 0x000020, "Member 'FRCParamFigureTableRow::EpName' has a wrong offset!");

// ScriptStruct RC.RCParamEventCheckReloadSubLevelTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamEventCheckReloadSubLevelTableRow final : public FTableRowBase
{
public:
	class FString                                 LevelPath;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamEventCheckReloadSubLevelTableRow) == 0x000008, "Wrong alignment on FRCParamEventCheckReloadSubLevelTableRow");
static_assert(sizeof(FRCParamEventCheckReloadSubLevelTableRow) == 0x000028, "Wrong size on FRCParamEventCheckReloadSubLevelTableRow");
static_assert(offsetof(FRCParamEventCheckReloadSubLevelTableRow, LevelPath) == 0x000008, "Member 'FRCParamEventCheckReloadSubLevelTableRow::LevelPath' has a wrong offset!");
static_assert(offsetof(FRCParamEventCheckReloadSubLevelTableRow, LevelName) == 0x000018, "Member 'FRCParamEventCheckReloadSubLevelTableRow::LevelName' has a wrong offset!");

// ScriptStruct RC.RCParamFogTableRow
// 0x0058 (0x0060 - 0x0008)
struct FRCParamFogTableRow final : public FTableRowBase
{
public:
	class FName                                   FogID;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Location_X;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Location_Y;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Location_Z;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHightFalloff;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogInscatteringColor_R;                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogInscatteringColor_G;                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogInscatteringColor_B;                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogInscatteringColor_A;                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringColor_R;                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringColor_G;                    // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringColor_B;                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringColor_A;                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamFogTableRow) == 0x000008, "Wrong alignment on FRCParamFogTableRow");
static_assert(sizeof(FRCParamFogTableRow) == 0x000060, "Wrong size on FRCParamFogTableRow");
static_assert(offsetof(FRCParamFogTableRow, FogID) == 0x000008, "Member 'FRCParamFogTableRow::FogID' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, Location_X) == 0x000010, "Member 'FRCParamFogTableRow::Location_X' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, Location_Y) == 0x000014, "Member 'FRCParamFogTableRow::Location_Y' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, Location_Z) == 0x000018, "Member 'FRCParamFogTableRow::Location_Z' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, FogDensity) == 0x00001C, "Member 'FRCParamFogTableRow::FogDensity' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, FogHightFalloff) == 0x000020, "Member 'FRCParamFogTableRow::FogHightFalloff' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, FogInscatteringColor_R) == 0x000024, "Member 'FRCParamFogTableRow::FogInscatteringColor_R' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, FogInscatteringColor_G) == 0x000028, "Member 'FRCParamFogTableRow::FogInscatteringColor_G' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, FogInscatteringColor_B) == 0x00002C, "Member 'FRCParamFogTableRow::FogInscatteringColor_B' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, FogInscatteringColor_A) == 0x000030, "Member 'FRCParamFogTableRow::FogInscatteringColor_A' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, FogMaxOpacity) == 0x000034, "Member 'FRCParamFogTableRow::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, StartDistance) == 0x000038, "Member 'FRCParamFogTableRow::StartDistance' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, FogCutoffDistance) == 0x00003C, "Member 'FRCParamFogTableRow::FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, DirectionalInscatteringExponent) == 0x000040, "Member 'FRCParamFogTableRow::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, DirectionalInscatteringStartDistance) == 0x000044, "Member 'FRCParamFogTableRow::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, DirectionalInscatteringColor_R) == 0x000048, "Member 'FRCParamFogTableRow::DirectionalInscatteringColor_R' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, DirectionalInscatteringColor_G) == 0x00004C, "Member 'FRCParamFogTableRow::DirectionalInscatteringColor_G' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, DirectionalInscatteringColor_B) == 0x000050, "Member 'FRCParamFogTableRow::DirectionalInscatteringColor_B' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, DirectionalInscatteringColor_A) == 0x000054, "Member 'FRCParamFogTableRow::DirectionalInscatteringColor_A' has a wrong offset!");
static_assert(offsetof(FRCParamFogTableRow, DurationSec) == 0x000058, "Member 'FRCParamFogTableRow::DurationSec' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleDisturbParameters
// 0x00E8 (0x00F0 - 0x0008)
struct FRCNazoBattleDisturbParameters final : public FTableRowBase
{
public:
	class FName                                   ParamID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterAspect             Aspect;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayVoice;                                        // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLypsync;                                          // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearDelayTime;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinMotionDelayTime;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionKaijinTag;                                   // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaijinMotionName;                                  // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterMoveType            MoveType;                                          // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackSocket;                                     // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttackSocketName;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AppearLocation;                                    // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearDelayTime2;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchDelayTime;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchAcceleration;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterMoveTarget          MoveTarget;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MoveTargetIndex;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveTargetLocation;                                // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterAppearPosition      AppearPosition;                                    // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterVerticalPosition    VerticalPosition;                                  // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetZ;                                           // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterLane                Lane;                                              // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        MoveCurvePath;                                     // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveCurveAsWorldLocation;                         // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        MoveRotationCurvePath;                             // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MoveScaleCurvePath;                                // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowPositionGapFromRebuttalLetter;                 // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowSpeed;                                         // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowTime;                                          // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Life;                                              // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetectivePoint;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleDisturbParameters) == 0x000008, "Wrong alignment on FRCNazoBattleDisturbParameters");
static_assert(sizeof(FRCNazoBattleDisturbParameters) == 0x0000F0, "Wrong size on FRCNazoBattleDisturbParameters");
static_assert(offsetof(FRCNazoBattleDisturbParameters, ParamID) == 0x000008, "Member 'FRCNazoBattleDisturbParameters::ParamID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, TextID) == 0x000010, "Member 'FRCNazoBattleDisturbParameters::TextID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, Aspect) == 0x000018, "Member 'FRCNazoBattleDisturbParameters::Aspect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, bPlayVoice) == 0x000019, "Member 'FRCNazoBattleDisturbParameters::bPlayVoice' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, bLypsync) == 0x00001A, "Member 'FRCNazoBattleDisturbParameters::bLypsync' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, AppearDelayTime) == 0x00001C, "Member 'FRCNazoBattleDisturbParameters::AppearDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, KaijinMotionDelayTime) == 0x000020, "Member 'FRCNazoBattleDisturbParameters::KaijinMotionDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MotionKaijinTag) == 0x000024, "Member 'FRCNazoBattleDisturbParameters::MotionKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, KaijinMotionName) == 0x00002C, "Member 'FRCNazoBattleDisturbParameters::KaijinMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MoveType) == 0x000034, "Member 'FRCNazoBattleDisturbParameters::MoveType' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, bAttackSocket) == 0x000035, "Member 'FRCNazoBattleDisturbParameters::bAttackSocket' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, AttackSocketName) == 0x000038, "Member 'FRCNazoBattleDisturbParameters::AttackSocketName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, AppearLocation) == 0x000040, "Member 'FRCNazoBattleDisturbParameters::AppearLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, AppearDelayTime2) == 0x00004C, "Member 'FRCNazoBattleDisturbParameters::AppearDelayTime2' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, LaunchDelayTime) == 0x000050, "Member 'FRCNazoBattleDisturbParameters::LaunchDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, LaunchAcceleration) == 0x000054, "Member 'FRCNazoBattleDisturbParameters::LaunchAcceleration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MoveTarget) == 0x000058, "Member 'FRCNazoBattleDisturbParameters::MoveTarget' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MoveTargetIndex) == 0x00005C, "Member 'FRCNazoBattleDisturbParameters::MoveTargetIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MoveTargetLocation) == 0x000060, "Member 'FRCNazoBattleDisturbParameters::MoveTargetLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, AppearPosition) == 0x00006C, "Member 'FRCNazoBattleDisturbParameters::AppearPosition' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, VerticalPosition) == 0x00006D, "Member 'FRCNazoBattleDisturbParameters::VerticalPosition' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, OffsetZ) == 0x000070, "Member 'FRCNazoBattleDisturbParameters::OffsetZ' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, Lane) == 0x000074, "Member 'FRCNazoBattleDisturbParameters::Lane' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MoveCurvePath) == 0x000078, "Member 'FRCNazoBattleDisturbParameters::MoveCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, bMoveCurveAsWorldLocation) == 0x000090, "Member 'FRCNazoBattleDisturbParameters::bMoveCurveAsWorldLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MoveRotationCurvePath) == 0x000098, "Member 'FRCNazoBattleDisturbParameters::MoveRotationCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MoveScaleCurvePath) == 0x0000B0, "Member 'FRCNazoBattleDisturbParameters::MoveScaleCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MoveTime) == 0x0000C8, "Member 'FRCNazoBattleDisturbParameters::MoveTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, MaxSpeed) == 0x0000CC, "Member 'FRCNazoBattleDisturbParameters::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, Acceleration) == 0x0000D0, "Member 'FRCNazoBattleDisturbParameters::Acceleration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, SlowPositionGapFromRebuttalLetter) == 0x0000D4, "Member 'FRCNazoBattleDisturbParameters::SlowPositionGapFromRebuttalLetter' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, SlowSpeed) == 0x0000D8, "Member 'FRCNazoBattleDisturbParameters::SlowSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, SlowTime) == 0x0000DC, "Member 'FRCNazoBattleDisturbParameters::SlowTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, Scale) == 0x0000E0, "Member 'FRCNazoBattleDisturbParameters::Scale' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, Life) == 0x0000E4, "Member 'FRCNazoBattleDisturbParameters::Life' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, Damage) == 0x0000E8, "Member 'FRCNazoBattleDisturbParameters::Damage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbParameters, DetectivePoint) == 0x0000EC, "Member 'FRCNazoBattleDisturbParameters::DetectivePoint' has a wrong offset!");

// ScriptStruct RC.RCNazoMapViewerData
// 0x0018 (0x0020 - 0x0008)
struct FRCNazoMapViewerData final : public FTableRowBase
{
public:
	class UDataTable*                             MapList;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDataTable*>                     MapLevelListArray;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMapViewerData) == 0x000008, "Wrong alignment on FRCNazoMapViewerData");
static_assert(sizeof(FRCNazoMapViewerData) == 0x000020, "Wrong size on FRCNazoMapViewerData");
static_assert(offsetof(FRCNazoMapViewerData, MapList) == 0x000008, "Member 'FRCNazoMapViewerData::MapList' has a wrong offset!");
static_assert(offsetof(FRCNazoMapViewerData, MapLevelListArray) == 0x000010, "Member 'FRCNazoMapViewerData::MapLevelListArray' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalParameters
// 0x0188 (0x0190 - 0x0008)
struct FRCNazoBattleRebuttalParameters final : public FTableRowBase
{
public:
	class FName                                   ParamID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntervalTime;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaijinTag;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaijinPositionID;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinMoveTimeRate;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinLandingTime;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaijinAfterPositionID;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKaijinCutinEvent;                                 // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KaijinAttackFacialName;                            // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinAttackReadyMotionDelayTime;                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaijinAttackMotionName;                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinAttackMotionPlayRate;                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinAttackMotionBlendTime;                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LetterAppearKaijinTag;                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKaijinAttackSocket;                               // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KaijinAttackSocketName;                            // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OtherKaijinTag;                                    // 0x0064(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherKaijinMoveDelayTime;                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherKaijinMovePositionIndex;                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherKaijinMotionDelayTime;                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OtherKaijinMotionName;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherKaijinMotionPlayRate;                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherKaijinMotionBlendTime;                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LetterTextID;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LetterTextFaceID;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LetterPartVoiceID;                                 // 0x0094(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LetterBackLogTextID;                               // 0x009C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLetterAddBackLog;                                 // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterAspect             LetterAspect;                                      // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterSize               LetterSize;                                        // 0x00A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterType               LetterType;                                        // 0x00A7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLetterDecorationFlag;                             // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLetterSkillEffect;                                // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LetterContinueCountBecomeNormal;                   // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LetterDamage;                                      // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuriedLetterShadowAlphaRate;                       // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LetterAppearDelayTime;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterPosition           LetterPosition;                                    // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterMiddleLRType       LetterMiddleLRType;                                // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LetterPositionOffset;                              // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLetterAppearEffect;                               // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LetterStayTime;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LetterLaunchDelayTime;                             // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LetterMoveCurvePath;                               // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LetterMoveRotationCurvePath;                       // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LetterMoveScaleCurvePath;                          // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LetterMoveTime;                                    // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LetterMoveMaxSpeed;                                // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LetterMoveAcceleration;                            // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustAvoidDirectionCustomL;                        // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERCNazoBattleRebuttalLetterJustAvoidDirection> JustAvoidDirectionArrayL;                          // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bJustAvoidDirectionCustomR;                        // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERCNazoBattleRebuttalLetterJustAvoidDirection> JustAvoidDirectionArrayR;                          // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLetterRollingStart;                               // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LetterRollingStartTime;                            // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LetterRollingStartCount;                           // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLetterRollingStartLeft;                           // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DisturbParamIDArray;                               // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Failure00TalkID;                                   // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Failure01TalkID;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Failure02TalkID;                                   // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalParameters) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalParameters");
static_assert(sizeof(FRCNazoBattleRebuttalParameters) == 0x000190, "Wrong size on FRCNazoBattleRebuttalParameters");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, ParamID) == 0x000008, "Member 'FRCNazoBattleRebuttalParameters::ParamID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bEnable) == 0x000010, "Member 'FRCNazoBattleRebuttalParameters::bEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, IntervalTime) == 0x000014, "Member 'FRCNazoBattleRebuttalParameters::IntervalTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinTag) == 0x000018, "Member 'FRCNazoBattleRebuttalParameters::KaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinPositionID) == 0x000020, "Member 'FRCNazoBattleRebuttalParameters::KaijinPositionID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinMoveTimeRate) == 0x000024, "Member 'FRCNazoBattleRebuttalParameters::KaijinMoveTimeRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinLandingTime) == 0x000028, "Member 'FRCNazoBattleRebuttalParameters::KaijinLandingTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinAfterPositionID) == 0x00002C, "Member 'FRCNazoBattleRebuttalParameters::KaijinAfterPositionID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bKaijinCutinEvent) == 0x000030, "Member 'FRCNazoBattleRebuttalParameters::bKaijinCutinEvent' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinAttackFacialName) == 0x000034, "Member 'FRCNazoBattleRebuttalParameters::KaijinAttackFacialName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinAttackReadyMotionDelayTime) == 0x00003C, "Member 'FRCNazoBattleRebuttalParameters::KaijinAttackReadyMotionDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinAttackMotionName) == 0x000040, "Member 'FRCNazoBattleRebuttalParameters::KaijinAttackMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinAttackMotionPlayRate) == 0x000048, "Member 'FRCNazoBattleRebuttalParameters::KaijinAttackMotionPlayRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinAttackMotionBlendTime) == 0x00004C, "Member 'FRCNazoBattleRebuttalParameters::KaijinAttackMotionBlendTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterAppearKaijinTag) == 0x000050, "Member 'FRCNazoBattleRebuttalParameters::LetterAppearKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bKaijinAttackSocket) == 0x000058, "Member 'FRCNazoBattleRebuttalParameters::bKaijinAttackSocket' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, KaijinAttackSocketName) == 0x00005C, "Member 'FRCNazoBattleRebuttalParameters::KaijinAttackSocketName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, OtherKaijinTag) == 0x000064, "Member 'FRCNazoBattleRebuttalParameters::OtherKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, OtherKaijinMoveDelayTime) == 0x00006C, "Member 'FRCNazoBattleRebuttalParameters::OtherKaijinMoveDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, OtherKaijinMovePositionIndex) == 0x000070, "Member 'FRCNazoBattleRebuttalParameters::OtherKaijinMovePositionIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, OtherKaijinMotionDelayTime) == 0x000074, "Member 'FRCNazoBattleRebuttalParameters::OtherKaijinMotionDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, OtherKaijinMotionName) == 0x000078, "Member 'FRCNazoBattleRebuttalParameters::OtherKaijinMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, OtherKaijinMotionPlayRate) == 0x000080, "Member 'FRCNazoBattleRebuttalParameters::OtherKaijinMotionPlayRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, OtherKaijinMotionBlendTime) == 0x000084, "Member 'FRCNazoBattleRebuttalParameters::OtherKaijinMotionBlendTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterTextID) == 0x000088, "Member 'FRCNazoBattleRebuttalParameters::LetterTextID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterTextFaceID) == 0x000090, "Member 'FRCNazoBattleRebuttalParameters::LetterTextFaceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterPartVoiceID) == 0x000094, "Member 'FRCNazoBattleRebuttalParameters::LetterPartVoiceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterBackLogTextID) == 0x00009C, "Member 'FRCNazoBattleRebuttalParameters::LetterBackLogTextID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bLetterAddBackLog) == 0x0000A4, "Member 'FRCNazoBattleRebuttalParameters::bLetterAddBackLog' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterAspect) == 0x0000A5, "Member 'FRCNazoBattleRebuttalParameters::LetterAspect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterSize) == 0x0000A6, "Member 'FRCNazoBattleRebuttalParameters::LetterSize' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterType) == 0x0000A7, "Member 'FRCNazoBattleRebuttalParameters::LetterType' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bLetterDecorationFlag) == 0x0000A8, "Member 'FRCNazoBattleRebuttalParameters::bLetterDecorationFlag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bLetterSkillEffect) == 0x0000A9, "Member 'FRCNazoBattleRebuttalParameters::bLetterSkillEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterContinueCountBecomeNormal) == 0x0000AC, "Member 'FRCNazoBattleRebuttalParameters::LetterContinueCountBecomeNormal' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterDamage) == 0x0000B0, "Member 'FRCNazoBattleRebuttalParameters::LetterDamage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, BuriedLetterShadowAlphaRate) == 0x0000B4, "Member 'FRCNazoBattleRebuttalParameters::BuriedLetterShadowAlphaRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterAppearDelayTime) == 0x0000B8, "Member 'FRCNazoBattleRebuttalParameters::LetterAppearDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterPosition) == 0x0000BC, "Member 'FRCNazoBattleRebuttalParameters::LetterPosition' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterMiddleLRType) == 0x0000BD, "Member 'FRCNazoBattleRebuttalParameters::LetterMiddleLRType' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterPositionOffset) == 0x0000C0, "Member 'FRCNazoBattleRebuttalParameters::LetterPositionOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bLetterAppearEffect) == 0x0000CC, "Member 'FRCNazoBattleRebuttalParameters::bLetterAppearEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterStayTime) == 0x0000D0, "Member 'FRCNazoBattleRebuttalParameters::LetterStayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterLaunchDelayTime) == 0x0000D4, "Member 'FRCNazoBattleRebuttalParameters::LetterLaunchDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterMoveCurvePath) == 0x0000D8, "Member 'FRCNazoBattleRebuttalParameters::LetterMoveCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterMoveRotationCurvePath) == 0x0000F0, "Member 'FRCNazoBattleRebuttalParameters::LetterMoveRotationCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterMoveScaleCurvePath) == 0x000108, "Member 'FRCNazoBattleRebuttalParameters::LetterMoveScaleCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterMoveTime) == 0x000120, "Member 'FRCNazoBattleRebuttalParameters::LetterMoveTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterMoveMaxSpeed) == 0x000124, "Member 'FRCNazoBattleRebuttalParameters::LetterMoveMaxSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterMoveAcceleration) == 0x000128, "Member 'FRCNazoBattleRebuttalParameters::LetterMoveAcceleration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bJustAvoidDirectionCustomL) == 0x00012C, "Member 'FRCNazoBattleRebuttalParameters::bJustAvoidDirectionCustomL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, JustAvoidDirectionArrayL) == 0x000130, "Member 'FRCNazoBattleRebuttalParameters::JustAvoidDirectionArrayL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bJustAvoidDirectionCustomR) == 0x000140, "Member 'FRCNazoBattleRebuttalParameters::bJustAvoidDirectionCustomR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, JustAvoidDirectionArrayR) == 0x000148, "Member 'FRCNazoBattleRebuttalParameters::JustAvoidDirectionArrayR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bLetterRollingStart) == 0x000158, "Member 'FRCNazoBattleRebuttalParameters::bLetterRollingStart' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterRollingStartTime) == 0x00015C, "Member 'FRCNazoBattleRebuttalParameters::LetterRollingStartTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, LetterRollingStartCount) == 0x000160, "Member 'FRCNazoBattleRebuttalParameters::LetterRollingStartCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, bLetterRollingStartLeft) == 0x000164, "Member 'FRCNazoBattleRebuttalParameters::bLetterRollingStartLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, DisturbParamIDArray) == 0x000168, "Member 'FRCNazoBattleRebuttalParameters::DisturbParamIDArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, Failure00TalkID) == 0x000178, "Member 'FRCNazoBattleRebuttalParameters::Failure00TalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, Failure01TalkID) == 0x000180, "Member 'FRCNazoBattleRebuttalParameters::Failure01TalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalParameters, Failure02TalkID) == 0x000188, "Member 'FRCNazoBattleRebuttalParameters::Failure02TalkID' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleMotionSettings
// 0x0010 (0x0010 - 0x0000)
struct FRCNazoBattleMotionSettings
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionPlayRate;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionBlendTime;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleMotionSettings) == 0x000004, "Wrong alignment on FRCNazoBattleMotionSettings");
static_assert(sizeof(FRCNazoBattleMotionSettings) == 0x000010, "Wrong size on FRCNazoBattleMotionSettings");
static_assert(offsetof(FRCNazoBattleMotionSettings, MotionName) == 0x000000, "Member 'FRCNazoBattleMotionSettings::MotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleMotionSettings, MotionPlayRate) == 0x000008, "Member 'FRCNazoBattleMotionSettings::MotionPlayRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleMotionSettings, MotionBlendTime) == 0x00000C, "Member 'FRCNazoBattleMotionSettings::MotionBlendTime' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalKaijinAttackSettings
// 0x001C (0x001C - 0x0000)
struct FRCNazoBattleRebuttalKaijinAttackSettings final
{
public:
	struct FRCNazoBattleMotionSettings            Motion;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAttackSocket;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttackSocketName;                                  // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalKaijinAttackSettings) == 0x000004, "Wrong alignment on FRCNazoBattleRebuttalKaijinAttackSettings");
static_assert(sizeof(FRCNazoBattleRebuttalKaijinAttackSettings) == 0x00001C, "Wrong size on FRCNazoBattleRebuttalKaijinAttackSettings");
static_assert(offsetof(FRCNazoBattleRebuttalKaijinAttackSettings, Motion) == 0x000000, "Member 'FRCNazoBattleRebuttalKaijinAttackSettings::Motion' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalKaijinAttackSettings, bAttackSocket) == 0x000010, "Member 'FRCNazoBattleRebuttalKaijinAttackSettings::bAttackSocket' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalKaijinAttackSettings, AttackSocketName) == 0x000014, "Member 'FRCNazoBattleRebuttalKaijinAttackSettings::AttackSocketName' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterMoveSettings
// 0x0080 (0x0080 - 0x0000)
struct FRCNazoBattleRebuttalLetterMoveSettings final
{
public:
	struct FSoftObjectPath                        CurvePath;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        RotationCurvePath;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ScaleCurvePath;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustAvoidDirectionCustomL;                        // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERCNazoBattleRebuttalLetterJustAvoidDirection> JustAvoidDirectionArrayL;                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bJustAvoidDirectionCustomR;                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERCNazoBattleRebuttalLetterJustAvoidDirection> JustAvoidDirectionArrayR;                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalLetterMoveSettings) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalLetterMoveSettings");
static_assert(sizeof(FRCNazoBattleRebuttalLetterMoveSettings) == 0x000080, "Wrong size on FRCNazoBattleRebuttalLetterMoveSettings");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, CurvePath) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::CurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, RotationCurvePath) == 0x000018, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::RotationCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, ScaleCurvePath) == 0x000030, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::ScaleCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, Time) == 0x000048, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::Time' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, MaxSpeed) == 0x00004C, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, Acceleration) == 0x000050, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::Acceleration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, bJustAvoidDirectionCustomL) == 0x000054, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::bJustAvoidDirectionCustomL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, JustAvoidDirectionArrayL) == 0x000058, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::JustAvoidDirectionArrayL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, bJustAvoidDirectionCustomR) == 0x000068, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::bJustAvoidDirectionCustomR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterMoveSettings, JustAvoidDirectionArrayR) == 0x000070, "Member 'FRCNazoBattleRebuttalLetterMoveSettings::JustAvoidDirectionArrayR' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterReadySettings
// 0x0024 (0x0024 - 0x0000)
struct FRCNazoBattleRebuttalLetterReadySettings final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterPosition           Position;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterMiddleLRType       MiddleLRType;                                      // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositionOffset;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionOffsetZ;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalLetterReadySettings) == 0x000004, "Wrong alignment on FRCNazoBattleRebuttalLetterReadySettings");
static_assert(sizeof(FRCNazoBattleRebuttalLetterReadySettings) == 0x000024, "Wrong size on FRCNazoBattleRebuttalLetterReadySettings");
static_assert(offsetof(FRCNazoBattleRebuttalLetterReadySettings, DelayTime) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterReadySettings::DelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterReadySettings, Position) == 0x000004, "Member 'FRCNazoBattleRebuttalLetterReadySettings::Position' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterReadySettings, MiddleLRType) == 0x000005, "Member 'FRCNazoBattleRebuttalLetterReadySettings::MiddleLRType' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterReadySettings, PositionOffset) == 0x000008, "Member 'FRCNazoBattleRebuttalLetterReadySettings::PositionOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterReadySettings, PositionOffsetZ) == 0x000014, "Member 'FRCNazoBattleRebuttalLetterReadySettings::PositionOffsetZ' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterReadySettings, Rotation) == 0x000018, "Member 'FRCNazoBattleRebuttalLetterReadySettings::Rotation' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterAppearSettings
// 0x0001 (0x0001 - 0x0000)
struct FRCNazoBattleRebuttalLetterAppearSettings final
{
public:
	bool                                          bAppearEffect;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalLetterAppearSettings) == 0x000001, "Wrong alignment on FRCNazoBattleRebuttalLetterAppearSettings");
static_assert(sizeof(FRCNazoBattleRebuttalLetterAppearSettings) == 0x000001, "Wrong size on FRCNazoBattleRebuttalLetterAppearSettings");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAppearSettings, bAppearEffect) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterAppearSettings::bAppearEffect' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterRollingStartSettings
// 0x0010 (0x0010 - 0x0000)
struct FRCNazoBattleRebuttalLetterRollingStartSettings final
{
public:
	bool                                          bRollingStart;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RollingTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RollingCount;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRollingLeft;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleRebuttalLetterRollingStartSettings) == 0x000004, "Wrong alignment on FRCNazoBattleRebuttalLetterRollingStartSettings");
static_assert(sizeof(FRCNazoBattleRebuttalLetterRollingStartSettings) == 0x000010, "Wrong size on FRCNazoBattleRebuttalLetterRollingStartSettings");
static_assert(offsetof(FRCNazoBattleRebuttalLetterRollingStartSettings, bRollingStart) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterRollingStartSettings::bRollingStart' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterRollingStartSettings, RollingTime) == 0x000004, "Member 'FRCNazoBattleRebuttalLetterRollingStartSettings::RollingTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterRollingStartSettings, RollingCount) == 0x000008, "Member 'FRCNazoBattleRebuttalLetterRollingStartSettings::RollingCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterRollingStartSettings, bRollingLeft) == 0x00000C, "Member 'FRCNazoBattleRebuttalLetterRollingStartSettings::bRollingLeft' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterStaySettings
// 0x0008 (0x0008 - 0x0000)
struct FRCNazoBattleRebuttalLetterStaySettings final
{
public:
	float                                         StayTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchDelayTime;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalLetterStaySettings) == 0x000004, "Wrong alignment on FRCNazoBattleRebuttalLetterStaySettings");
static_assert(sizeof(FRCNazoBattleRebuttalLetterStaySettings) == 0x000008, "Wrong size on FRCNazoBattleRebuttalLetterStaySettings");
static_assert(offsetof(FRCNazoBattleRebuttalLetterStaySettings, StayTime) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterStaySettings::StayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterStaySettings, LaunchDelayTime) == 0x000004, "Member 'FRCNazoBattleRebuttalLetterStaySettings::LaunchDelayTime' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterSettings
// 0x00D8 (0x00D8 - 0x0000)
struct FRCNazoBattleRebuttalLetterSettings final
{
public:
	ERCNazoBattleRebuttalLetterType               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDecorationFlag;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkillEffect;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ContinueCountBecomeNormal;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuriedShadowAlphaRate;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCNazoBattleRebuttalLetterReadySettings ReadySettings;                                     // 0x0014(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCNazoBattleRebuttalLetterAppearSettings AppearSettings;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNazoBattleRebuttalLetterRollingStartSettings RollingStartSettings;                              // 0x003C(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCNazoBattleRebuttalLetterStaySettings StaySettings;                                      // 0x004C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNazoBattleRebuttalLetterMoveSettings MoveSettings;                                      // 0x0058(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalLetterSettings) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalLetterSettings");
static_assert(sizeof(FRCNazoBattleRebuttalLetterSettings) == 0x0000D8, "Wrong size on FRCNazoBattleRebuttalLetterSettings");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, Type) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterSettings::Type' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, bDecorationFlag) == 0x000001, "Member 'FRCNazoBattleRebuttalLetterSettings::bDecorationFlag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, bSkillEffect) == 0x000002, "Member 'FRCNazoBattleRebuttalLetterSettings::bSkillEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, ContinueCountBecomeNormal) == 0x000004, "Member 'FRCNazoBattleRebuttalLetterSettings::ContinueCountBecomeNormal' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, IntervalTime) == 0x000008, "Member 'FRCNazoBattleRebuttalLetterSettings::IntervalTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, Damage) == 0x00000C, "Member 'FRCNazoBattleRebuttalLetterSettings::Damage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, BuriedShadowAlphaRate) == 0x000010, "Member 'FRCNazoBattleRebuttalLetterSettings::BuriedShadowAlphaRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, ReadySettings) == 0x000014, "Member 'FRCNazoBattleRebuttalLetterSettings::ReadySettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, AppearSettings) == 0x000038, "Member 'FRCNazoBattleRebuttalLetterSettings::AppearSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, RollingStartSettings) == 0x00003C, "Member 'FRCNazoBattleRebuttalLetterSettings::RollingStartSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, StaySettings) == 0x00004C, "Member 'FRCNazoBattleRebuttalLetterSettings::StaySettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterSettings, MoveSettings) == 0x000058, "Member 'FRCNazoBattleRebuttalLetterSettings::MoveSettings' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleOtherKaijinMotionSettings
// 0x000C (0x001C - 0x0010)
struct FRCNazoBattleOtherKaijinMotionSettings final : public FRCNazoBattleMotionSettings
{
public:
	float                                         MoveDelayTime;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MovePositionIndex;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionDelayTime;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleOtherKaijinMotionSettings) == 0x000004, "Wrong alignment on FRCNazoBattleOtherKaijinMotionSettings");
static_assert(sizeof(FRCNazoBattleOtherKaijinMotionSettings) == 0x00001C, "Wrong size on FRCNazoBattleOtherKaijinMotionSettings");
static_assert(offsetof(FRCNazoBattleOtherKaijinMotionSettings, MoveDelayTime) == 0x000010, "Member 'FRCNazoBattleOtherKaijinMotionSettings::MoveDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleOtherKaijinMotionSettings, MovePositionIndex) == 0x000014, "Member 'FRCNazoBattleOtherKaijinMotionSettings::MovePositionIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleOtherKaijinMotionSettings, MotionDelayTime) == 0x000018, "Member 'FRCNazoBattleOtherKaijinMotionSettings::MotionDelayTime' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalDisturbSettings
// 0x00E8 (0x00E8 - 0x0000)
struct FRCNazoBattleRebuttalDisturbSettings final
{
public:
	class FName                                   ParamID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterAspect             Aspect;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayVoice;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLypsync;                                          // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearDelayTime;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinMotionDelayTime;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionKaijinTag;                                   // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaijinMotionName;                                  // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterMoveType            MoveType;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackSocket;                                     // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttackSocketName;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AppearLocation;                                    // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearDelayTime2;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchDelayTime;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchAcceleration;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterMoveTarget          MoveTarget;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MoveTargetIndex;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveTargetLocation;                                // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterAppearPosition      AppearPosition;                                    // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterVerticalPosition    VerticalPosition;                                  // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetZ;                                           // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleDisturbLetterLane                Lane;                                              // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        MoveCurvePath;                                     // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveCurveAsWorldLocation;                         // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        MoveRotationCurvePath;                             // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MoveScaleCurvePath;                                // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowPositionGapFromRebuttalLetter;                 // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowSpeed;                                         // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowTime;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Life;                                              // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetectivePoint;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalDisturbSettings) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalDisturbSettings");
static_assert(sizeof(FRCNazoBattleRebuttalDisturbSettings) == 0x0000E8, "Wrong size on FRCNazoBattleRebuttalDisturbSettings");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, ParamID) == 0x000000, "Member 'FRCNazoBattleRebuttalDisturbSettings::ParamID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, TextID) == 0x000008, "Member 'FRCNazoBattleRebuttalDisturbSettings::TextID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, Aspect) == 0x000010, "Member 'FRCNazoBattleRebuttalDisturbSettings::Aspect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, bPlayVoice) == 0x000011, "Member 'FRCNazoBattleRebuttalDisturbSettings::bPlayVoice' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, bLypsync) == 0x000012, "Member 'FRCNazoBattleRebuttalDisturbSettings::bLypsync' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, AppearDelayTime) == 0x000014, "Member 'FRCNazoBattleRebuttalDisturbSettings::AppearDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, KaijinMotionDelayTime) == 0x000018, "Member 'FRCNazoBattleRebuttalDisturbSettings::KaijinMotionDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MotionKaijinTag) == 0x00001C, "Member 'FRCNazoBattleRebuttalDisturbSettings::MotionKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, KaijinMotionName) == 0x000024, "Member 'FRCNazoBattleRebuttalDisturbSettings::KaijinMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MoveType) == 0x00002C, "Member 'FRCNazoBattleRebuttalDisturbSettings::MoveType' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, bAttackSocket) == 0x00002D, "Member 'FRCNazoBattleRebuttalDisturbSettings::bAttackSocket' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, AttackSocketName) == 0x000030, "Member 'FRCNazoBattleRebuttalDisturbSettings::AttackSocketName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, AppearLocation) == 0x000038, "Member 'FRCNazoBattleRebuttalDisturbSettings::AppearLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, AppearDelayTime2) == 0x000044, "Member 'FRCNazoBattleRebuttalDisturbSettings::AppearDelayTime2' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, LaunchDelayTime) == 0x000048, "Member 'FRCNazoBattleRebuttalDisturbSettings::LaunchDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, LaunchAcceleration) == 0x00004C, "Member 'FRCNazoBattleRebuttalDisturbSettings::LaunchAcceleration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MoveTarget) == 0x000050, "Member 'FRCNazoBattleRebuttalDisturbSettings::MoveTarget' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MoveTargetIndex) == 0x000054, "Member 'FRCNazoBattleRebuttalDisturbSettings::MoveTargetIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MoveTargetLocation) == 0x000058, "Member 'FRCNazoBattleRebuttalDisturbSettings::MoveTargetLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, AppearPosition) == 0x000064, "Member 'FRCNazoBattleRebuttalDisturbSettings::AppearPosition' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, VerticalPosition) == 0x000065, "Member 'FRCNazoBattleRebuttalDisturbSettings::VerticalPosition' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, OffsetZ) == 0x000068, "Member 'FRCNazoBattleRebuttalDisturbSettings::OffsetZ' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, Lane) == 0x00006C, "Member 'FRCNazoBattleRebuttalDisturbSettings::Lane' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MoveCurvePath) == 0x000070, "Member 'FRCNazoBattleRebuttalDisturbSettings::MoveCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, bMoveCurveAsWorldLocation) == 0x000088, "Member 'FRCNazoBattleRebuttalDisturbSettings::bMoveCurveAsWorldLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MoveRotationCurvePath) == 0x000090, "Member 'FRCNazoBattleRebuttalDisturbSettings::MoveRotationCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MoveScaleCurvePath) == 0x0000A8, "Member 'FRCNazoBattleRebuttalDisturbSettings::MoveScaleCurvePath' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MoveTime) == 0x0000C0, "Member 'FRCNazoBattleRebuttalDisturbSettings::MoveTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, MaxSpeed) == 0x0000C4, "Member 'FRCNazoBattleRebuttalDisturbSettings::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, Acceleration) == 0x0000C8, "Member 'FRCNazoBattleRebuttalDisturbSettings::Acceleration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, SlowPositionGapFromRebuttalLetter) == 0x0000CC, "Member 'FRCNazoBattleRebuttalDisturbSettings::SlowPositionGapFromRebuttalLetter' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, SlowSpeed) == 0x0000D0, "Member 'FRCNazoBattleRebuttalDisturbSettings::SlowSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, SlowTime) == 0x0000D4, "Member 'FRCNazoBattleRebuttalDisturbSettings::SlowTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, Scale) == 0x0000D8, "Member 'FRCNazoBattleRebuttalDisturbSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, Life) == 0x0000DC, "Member 'FRCNazoBattleRebuttalDisturbSettings::Life' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, Damage) == 0x0000E0, "Member 'FRCNazoBattleRebuttalDisturbSettings::Damage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalDisturbSettings, DetectivePoint) == 0x0000E4, "Member 'FRCNazoBattleRebuttalDisturbSettings::DetectivePoint' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalSettings
// 0x01E0 (0x01E0 - 0x0000)
struct FRCNazoBattleRebuttalSettings final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParamID;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PartVoiceID;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackLogTextID;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddBackLog;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KaijinTag;                                         // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaijinPositionID;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinMoveTimeRate;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinLandingTime;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaijinAfterPositionID;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCutinEvent;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KaijinAttackFacialName;                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinAttackReadyMotionDelayTime;                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCNazoBattleRebuttalKaijinAttackSettings> KaijinAttackArrayL;                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCNazoBattleRebuttalKaijinAttackSettings> KaijinAttackArrayR;                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   LetterAppearKaijinTag;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCNazoBattleMotionSettings            KaijinReactionMotion;                              // 0x0080(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FRCNazoBattleOtherKaijinMotionSettings> OtherKaijinMotion;                                 // 0x0090(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCNazoBattleRebuttalLetterSettings    RebuttalLetter;                                    // 0x00E0(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRCNazoBattleRebuttalDisturbSettings> DisturbSettingsArray;                              // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Failure00TalkID;                                   // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Failure01TalkID;                                   // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Failure02TalkID;                                   // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalSettings) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalSettings");
static_assert(sizeof(FRCNazoBattleRebuttalSettings) == 0x0001E0, "Wrong size on FRCNazoBattleRebuttalSettings");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, bEnable) == 0x000000, "Member 'FRCNazoBattleRebuttalSettings::bEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, ParamID) == 0x000004, "Member 'FRCNazoBattleRebuttalSettings::ParamID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, TextID) == 0x00000C, "Member 'FRCNazoBattleRebuttalSettings::TextID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, FaceID) == 0x000014, "Member 'FRCNazoBattleRebuttalSettings::FaceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, PartVoiceID) == 0x000018, "Member 'FRCNazoBattleRebuttalSettings::PartVoiceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, BackLogTextID) == 0x000020, "Member 'FRCNazoBattleRebuttalSettings::BackLogTextID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, bAddBackLog) == 0x000028, "Member 'FRCNazoBattleRebuttalSettings::bAddBackLog' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinTag) == 0x00002C, "Member 'FRCNazoBattleRebuttalSettings::KaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinPositionID) == 0x000034, "Member 'FRCNazoBattleRebuttalSettings::KaijinPositionID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinMoveTimeRate) == 0x000038, "Member 'FRCNazoBattleRebuttalSettings::KaijinMoveTimeRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinLandingTime) == 0x00003C, "Member 'FRCNazoBattleRebuttalSettings::KaijinLandingTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinAfterPositionID) == 0x000040, "Member 'FRCNazoBattleRebuttalSettings::KaijinAfterPositionID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, bCutinEvent) == 0x000044, "Member 'FRCNazoBattleRebuttalSettings::bCutinEvent' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinAttackFacialName) == 0x000048, "Member 'FRCNazoBattleRebuttalSettings::KaijinAttackFacialName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinAttackReadyMotionDelayTime) == 0x000050, "Member 'FRCNazoBattleRebuttalSettings::KaijinAttackReadyMotionDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinAttackArrayL) == 0x000058, "Member 'FRCNazoBattleRebuttalSettings::KaijinAttackArrayL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinAttackArrayR) == 0x000068, "Member 'FRCNazoBattleRebuttalSettings::KaijinAttackArrayR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, LetterAppearKaijinTag) == 0x000078, "Member 'FRCNazoBattleRebuttalSettings::LetterAppearKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, KaijinReactionMotion) == 0x000080, "Member 'FRCNazoBattleRebuttalSettings::KaijinReactionMotion' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, OtherKaijinMotion) == 0x000090, "Member 'FRCNazoBattleRebuttalSettings::OtherKaijinMotion' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, RebuttalLetter) == 0x0000E0, "Member 'FRCNazoBattleRebuttalSettings::RebuttalLetter' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, DisturbSettingsArray) == 0x0001B8, "Member 'FRCNazoBattleRebuttalSettings::DisturbSettingsArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, Failure00TalkID) == 0x0001C8, "Member 'FRCNazoBattleRebuttalSettings::Failure00TalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, Failure01TalkID) == 0x0001D0, "Member 'FRCNazoBattleRebuttalSettings::Failure01TalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalSettings, Failure02TalkID) == 0x0001D8, "Member 'FRCNazoBattleRebuttalSettings::Failure02TalkID' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalGroupSettings
// 0x0188 (0x0190 - 0x0008)
struct FRCNazoBattleRebuttalGroupSettings final : public FTableRowBase
{
public:
	bool                                          bEnable;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceClear;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RebuttalParametersStartIndex;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalParametersEndIndex;                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCNazoBattleRebuttalSettings>  RebuttalArray;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAmbiguous;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmbiguousKaijinPrevent;                           // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloseContestInputTime;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CloseContestInputCount;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CloseContestFailureDamage;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           KaiKagiIDArray;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CorrectKaiKagiID;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DeleteKaiKagiIDArray;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         WaitTime1;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime2;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangePlayerBaseLocation;                         // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerBaseLocation;                                // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerReverseMoveLR;                              // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangePlayerMoveLRDistance;                       // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerMoveLRDistance;                              // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerUnrival;                                    // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RebuttalCameraTag;                                 // 0x0084(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebuttalCameraTargetLocationFixed;                // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                KaijinStayMotionMap;                               // 0x0090(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                KaijinDamageMotionMap;                             // 0x00E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAssistEnable;                                     // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssistCoolTimeMaxAtStart;                         // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackSuccessCutinPartVoiceID;                     // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackSuccessCutinPartVoiceDelayTime;              // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebuttalSlashCutinClearBeforeCamera;              // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RebuttalSlashCutinCameraTag;                       // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalSlashCutinCameraBlendTime;                 // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConfrontationTalkID;                               // 0x0154(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackSuccessTalkID;                               // 0x015C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IntervalTalkID;                                    // 0x0164(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextRebuttalEventTalkID;                           // 0x016C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameOverTalkID;                                    // 0x0174(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GameOverHintTextIDArray;                           // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalGroupSettings) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalGroupSettings");
static_assert(sizeof(FRCNazoBattleRebuttalGroupSettings) == 0x000190, "Wrong size on FRCNazoBattleRebuttalGroupSettings");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bEnable) == 0x000008, "Member 'FRCNazoBattleRebuttalGroupSettings::bEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bForceClear) == 0x000009, "Member 'FRCNazoBattleRebuttalGroupSettings::bForceClear' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, RebuttalParametersStartIndex) == 0x00000C, "Member 'FRCNazoBattleRebuttalGroupSettings::RebuttalParametersStartIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, RebuttalParametersEndIndex) == 0x000010, "Member 'FRCNazoBattleRebuttalGroupSettings::RebuttalParametersEndIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, RebuttalArray) == 0x000018, "Member 'FRCNazoBattleRebuttalGroupSettings::RebuttalArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bAmbiguous) == 0x000028, "Member 'FRCNazoBattleRebuttalGroupSettings::bAmbiguous' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bAmbiguousKaijinPrevent) == 0x000029, "Member 'FRCNazoBattleRebuttalGroupSettings::bAmbiguousKaijinPrevent' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, CloseContestInputTime) == 0x00002C, "Member 'FRCNazoBattleRebuttalGroupSettings::CloseContestInputTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, CloseContestInputCount) == 0x000030, "Member 'FRCNazoBattleRebuttalGroupSettings::CloseContestInputCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, CloseContestFailureDamage) == 0x000034, "Member 'FRCNazoBattleRebuttalGroupSettings::CloseContestFailureDamage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, KaiKagiIDArray) == 0x000038, "Member 'FRCNazoBattleRebuttalGroupSettings::KaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, CorrectKaiKagiID) == 0x000048, "Member 'FRCNazoBattleRebuttalGroupSettings::CorrectKaiKagiID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, DeleteKaiKagiIDArray) == 0x000050, "Member 'FRCNazoBattleRebuttalGroupSettings::DeleteKaiKagiIDArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, WaitTime1) == 0x000060, "Member 'FRCNazoBattleRebuttalGroupSettings::WaitTime1' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, WaitTime2) == 0x000064, "Member 'FRCNazoBattleRebuttalGroupSettings::WaitTime2' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bChangePlayerBaseLocation) == 0x000068, "Member 'FRCNazoBattleRebuttalGroupSettings::bChangePlayerBaseLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, PlayerBaseLocation) == 0x00006C, "Member 'FRCNazoBattleRebuttalGroupSettings::PlayerBaseLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bPlayerReverseMoveLR) == 0x000078, "Member 'FRCNazoBattleRebuttalGroupSettings::bPlayerReverseMoveLR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bChangePlayerMoveLRDistance) == 0x000079, "Member 'FRCNazoBattleRebuttalGroupSettings::bChangePlayerMoveLRDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, PlayerMoveLRDistance) == 0x00007C, "Member 'FRCNazoBattleRebuttalGroupSettings::PlayerMoveLRDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bPlayerUnrival) == 0x000080, "Member 'FRCNazoBattleRebuttalGroupSettings::bPlayerUnrival' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, RebuttalCameraTag) == 0x000084, "Member 'FRCNazoBattleRebuttalGroupSettings::RebuttalCameraTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bRebuttalCameraTargetLocationFixed) == 0x00008C, "Member 'FRCNazoBattleRebuttalGroupSettings::bRebuttalCameraTargetLocationFixed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, KaijinStayMotionMap) == 0x000090, "Member 'FRCNazoBattleRebuttalGroupSettings::KaijinStayMotionMap' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, KaijinDamageMotionMap) == 0x0000E0, "Member 'FRCNazoBattleRebuttalGroupSettings::KaijinDamageMotionMap' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bAssistEnable) == 0x000130, "Member 'FRCNazoBattleRebuttalGroupSettings::bAssistEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bAssistCoolTimeMaxAtStart) == 0x000131, "Member 'FRCNazoBattleRebuttalGroupSettings::bAssistCoolTimeMaxAtStart' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, Damage) == 0x000134, "Member 'FRCNazoBattleRebuttalGroupSettings::Damage' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, AttackSuccessCutinPartVoiceID) == 0x000138, "Member 'FRCNazoBattleRebuttalGroupSettings::AttackSuccessCutinPartVoiceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, AttackSuccessCutinPartVoiceDelayTime) == 0x000140, "Member 'FRCNazoBattleRebuttalGroupSettings::AttackSuccessCutinPartVoiceDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, bRebuttalSlashCutinClearBeforeCamera) == 0x000144, "Member 'FRCNazoBattleRebuttalGroupSettings::bRebuttalSlashCutinClearBeforeCamera' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, RebuttalSlashCutinCameraTag) == 0x000148, "Member 'FRCNazoBattleRebuttalGroupSettings::RebuttalSlashCutinCameraTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, RebuttalSlashCutinCameraBlendTime) == 0x000150, "Member 'FRCNazoBattleRebuttalGroupSettings::RebuttalSlashCutinCameraBlendTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, ConfrontationTalkID) == 0x000154, "Member 'FRCNazoBattleRebuttalGroupSettings::ConfrontationTalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, AttackSuccessTalkID) == 0x00015C, "Member 'FRCNazoBattleRebuttalGroupSettings::AttackSuccessTalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, IntervalTalkID) == 0x000164, "Member 'FRCNazoBattleRebuttalGroupSettings::IntervalTalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, NextRebuttalEventTalkID) == 0x00016C, "Member 'FRCNazoBattleRebuttalGroupSettings::NextRebuttalEventTalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, GameOverTalkID) == 0x000174, "Member 'FRCNazoBattleRebuttalGroupSettings::GameOverTalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalGroupSettings, GameOverHintTextIDArray) == 0x000180, "Member 'FRCNazoBattleRebuttalGroupSettings::GameOverHintTextIDArray' has a wrong offset!");

// ScriptStruct RC.RCParamGalleryMovieListTableRow
// 0x0050 (0x0058 - 0x0008)
struct FRCParamGalleryMovieListTableRow final : public FTableRowBase
{
public:
	int32                                         MovieNo;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovieID;                                           // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenChapterNo;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenSceneNo;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterTextID;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovieTitleTextID;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThumbnailID;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundDataTablePath;                                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundDataTableFilename;                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamGalleryMovieListTableRow) == 0x000008, "Wrong alignment on FRCParamGalleryMovieListTableRow");
static_assert(sizeof(FRCParamGalleryMovieListTableRow) == 0x000058, "Wrong size on FRCParamGalleryMovieListTableRow");
static_assert(offsetof(FRCParamGalleryMovieListTableRow, MovieNo) == 0x000008, "Member 'FRCParamGalleryMovieListTableRow::MovieNo' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryMovieListTableRow, MovieID) == 0x00000C, "Member 'FRCParamGalleryMovieListTableRow::MovieID' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryMovieListTableRow, OpenChapterNo) == 0x000014, "Member 'FRCParamGalleryMovieListTableRow::OpenChapterNo' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryMovieListTableRow, OpenSceneNo) == 0x000018, "Member 'FRCParamGalleryMovieListTableRow::OpenSceneNo' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryMovieListTableRow, ChapterTextID) == 0x000020, "Member 'FRCParamGalleryMovieListTableRow::ChapterTextID' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryMovieListTableRow, MovieTitleTextID) == 0x000028, "Member 'FRCParamGalleryMovieListTableRow::MovieTitleTextID' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryMovieListTableRow, ThumbnailID) == 0x000030, "Member 'FRCParamGalleryMovieListTableRow::ThumbnailID' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryMovieListTableRow, SoundDataTablePath) == 0x000038, "Member 'FRCParamGalleryMovieListTableRow::SoundDataTablePath' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryMovieListTableRow, SoundDataTableFilename) == 0x000048, "Member 'FRCParamGalleryMovieListTableRow::SoundDataTableFilename' has a wrong offset!");

// ScriptStruct RC.RCParamFaceEffectAnimListTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamFaceEffectAnimListTableRow final : public FTableRowBase
{
public:
	int32                                         CharacterId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FacialId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WidgetName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DlcType;                                           // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamFaceEffectAnimListTableRow) == 0x000008, "Wrong alignment on FRCParamFaceEffectAnimListTableRow");
static_assert(sizeof(FRCParamFaceEffectAnimListTableRow) == 0x000030, "Wrong size on FRCParamFaceEffectAnimListTableRow");
static_assert(offsetof(FRCParamFaceEffectAnimListTableRow, CharacterId) == 0x000008, "Member 'FRCParamFaceEffectAnimListTableRow::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCParamFaceEffectAnimListTableRow, FacialId) == 0x00000C, "Member 'FRCParamFaceEffectAnimListTableRow::FacialId' has a wrong offset!");
static_assert(offsetof(FRCParamFaceEffectAnimListTableRow, WidgetName) == 0x000010, "Member 'FRCParamFaceEffectAnimListTableRow::WidgetName' has a wrong offset!");
static_assert(offsetof(FRCParamFaceEffectAnimListTableRow, bLoop) == 0x000020, "Member 'FRCParamFaceEffectAnimListTableRow::bLoop' has a wrong offset!");
static_assert(offsetof(FRCParamFaceEffectAnimListTableRow, DlcType) == 0x000024, "Member 'FRCParamFaceEffectAnimListTableRow::DlcType' has a wrong offset!");

// ScriptStruct RC.RCParamInputKeyTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamInputKeyTableRow final : public FTableRowBase
{
public:
	class FName                                   InputKeyTypeID;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputKeyConfigTypeID;                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamInputKeyTableRow) == 0x000008, "Wrong alignment on FRCParamInputKeyTableRow");
static_assert(sizeof(FRCParamInputKeyTableRow) == 0x000018, "Wrong size on FRCParamInputKeyTableRow");
static_assert(offsetof(FRCParamInputKeyTableRow, InputKeyTypeID) == 0x000008, "Member 'FRCParamInputKeyTableRow::InputKeyTypeID' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyTableRow, InputKeyConfigTypeID) == 0x000010, "Member 'FRCParamInputKeyTableRow::InputKeyConfigTypeID' has a wrong offset!");

// ScriptStruct RC.RCParamCollectionMenuTableRow
// 0x0098 (0x00A0 - 0x0008)
struct FRCParamCollectionMenuTableRow final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FaceImagePath;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FigureIconPath;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FigureNameText;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotOpenText;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EventName;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           VolName;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LimitClearEp;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChapterID;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SceneID;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReleaseFigureNum;                                  // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCollectionMenuTableRow) == 0x000008, "Wrong alignment on FRCParamCollectionMenuTableRow");
static_assert(sizeof(FRCParamCollectionMenuTableRow) == 0x0000A0, "Wrong size on FRCParamCollectionMenuTableRow");
static_assert(offsetof(FRCParamCollectionMenuTableRow, ID) == 0x000008, "Member 'FRCParamCollectionMenuTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, FaceImagePath) == 0x000010, "Member 'FRCParamCollectionMenuTableRow::FaceImagePath' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, FigureIconPath) == 0x000020, "Member 'FRCParamCollectionMenuTableRow::FigureIconPath' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, FigureNameText) == 0x000030, "Member 'FRCParamCollectionMenuTableRow::FigureNameText' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, NotOpenText) == 0x000038, "Member 'FRCParamCollectionMenuTableRow::NotOpenText' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, EventName) == 0x000040, "Member 'FRCParamCollectionMenuTableRow::EventName' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, VolName) == 0x000050, "Member 'FRCParamCollectionMenuTableRow::VolName' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, LimitClearEp) == 0x000060, "Member 'FRCParamCollectionMenuTableRow::LimitClearEp' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, ChapterID) == 0x000070, "Member 'FRCParamCollectionMenuTableRow::ChapterID' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, SceneID) == 0x000080, "Member 'FRCParamCollectionMenuTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionMenuTableRow, ReleaseFigureNum) == 0x000090, "Member 'FRCParamCollectionMenuTableRow::ReleaseFigureNum' has a wrong offset!");

// ScriptStruct RC.OptionSound
// 0x0018 (0x0018 - 0x0000)
struct FOptionSound final
{
public:
	ERCVoiceLanguage                              VoiceLanguage;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCVoiceQuality                               VoiceQuality;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCMovieQuality                               MovieQuality;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MasterVolume;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BgmVolume;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SystemSeVolume;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnvSeVolume;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceVolume;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionSound) == 0x000004, "Wrong alignment on FOptionSound");
static_assert(sizeof(FOptionSound) == 0x000018, "Wrong size on FOptionSound");
static_assert(offsetof(FOptionSound, VoiceLanguage) == 0x000000, "Member 'FOptionSound::VoiceLanguage' has a wrong offset!");
static_assert(offsetof(FOptionSound, VoiceQuality) == 0x000001, "Member 'FOptionSound::VoiceQuality' has a wrong offset!");
static_assert(offsetof(FOptionSound, MovieQuality) == 0x000002, "Member 'FOptionSound::MovieQuality' has a wrong offset!");
static_assert(offsetof(FOptionSound, MasterVolume) == 0x000004, "Member 'FOptionSound::MasterVolume' has a wrong offset!");
static_assert(offsetof(FOptionSound, BgmVolume) == 0x000008, "Member 'FOptionSound::BgmVolume' has a wrong offset!");
static_assert(offsetof(FOptionSound, SystemSeVolume) == 0x00000C, "Member 'FOptionSound::SystemSeVolume' has a wrong offset!");
static_assert(offsetof(FOptionSound, EnvSeVolume) == 0x000010, "Member 'FOptionSound::EnvSeVolume' has a wrong offset!");
static_assert(offsetof(FOptionSound, VoiceVolume) == 0x000014, "Member 'FOptionSound::VoiceVolume' has a wrong offset!");

// ScriptStruct RC.OptionController
// 0x0014 (0x0014 - 0x0000)
struct FOptionController final
{
public:
	ERCInputPlatform                              InputPlatform;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCCommonSwitch                               InputPlatformChange;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCInputEnterType                             InputEnterType;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCCommonSwitch                               Vibration;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCCommonSwitch                               CameraAutoMovePlayerBack;                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraAutoMoveSpeed;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionCameraReverse                        CameraYawReverse;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionCameraReverse                        CameraPinchReverse;                                // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CameraSpeed;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionController) == 0x000004, "Wrong alignment on FOptionController");
static_assert(sizeof(FOptionController) == 0x000014, "Wrong size on FOptionController");
static_assert(offsetof(FOptionController, InputPlatform) == 0x000000, "Member 'FOptionController::InputPlatform' has a wrong offset!");
static_assert(offsetof(FOptionController, InputPlatformChange) == 0x000001, "Member 'FOptionController::InputPlatformChange' has a wrong offset!");
static_assert(offsetof(FOptionController, InputEnterType) == 0x000002, "Member 'FOptionController::InputEnterType' has a wrong offset!");
static_assert(offsetof(FOptionController, Vibration) == 0x000003, "Member 'FOptionController::Vibration' has a wrong offset!");
static_assert(offsetof(FOptionController, CameraAutoMovePlayerBack) == 0x000004, "Member 'FOptionController::CameraAutoMovePlayerBack' has a wrong offset!");
static_assert(offsetof(FOptionController, CameraAutoMoveSpeed) == 0x000008, "Member 'FOptionController::CameraAutoMoveSpeed' has a wrong offset!");
static_assert(offsetof(FOptionController, CameraYawReverse) == 0x00000C, "Member 'FOptionController::CameraYawReverse' has a wrong offset!");
static_assert(offsetof(FOptionController, CameraPinchReverse) == 0x00000D, "Member 'FOptionController::CameraPinchReverse' has a wrong offset!");
static_assert(offsetof(FOptionController, CameraSpeed) == 0x000010, "Member 'FOptionController::CameraSpeed' has a wrong offset!");

// ScriptStruct RC.OptionGraphics
// 0x002C (0x002C - 0x0000)
struct FOptionGraphics final
{
public:
	ERCOptionMobQuality                           MobQuality;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionSubLevel                             SubLevelQuality;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionCharacterDraw                        CharacterDrawQuality;                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionMobNum                               MobNumQuality;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMobPartsPreLoad;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMobPartsPreLoadNotMove;                           // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionWindowMode                           WindowMode;                                        // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Resolution;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayNum;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionFramerateCap                         FramerateCap;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Brightness;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCCommonSwitch                               VSync;                                             // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionQuality                              AntiAliasingQuality;                               // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionQuality                              ShadowQuality;                                     // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionQuality                              TextureQuality;                                    // 0x001F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionQuality                              PostprocessQuality;                                // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionQuality                              EffectQuality;                                     // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayScale;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionConsumerQualityMode                  ConsumerQualityMode;                               // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCOptionQuality                              CharacterQuality;                                  // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptionGraphics) == 0x000004, "Wrong alignment on FOptionGraphics");
static_assert(sizeof(FOptionGraphics) == 0x00002C, "Wrong size on FOptionGraphics");
static_assert(offsetof(FOptionGraphics, MobQuality) == 0x000000, "Member 'FOptionGraphics::MobQuality' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, SubLevelQuality) == 0x000001, "Member 'FOptionGraphics::SubLevelQuality' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, CharacterDrawQuality) == 0x000002, "Member 'FOptionGraphics::CharacterDrawQuality' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, MobNumQuality) == 0x000003, "Member 'FOptionGraphics::MobNumQuality' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, bMobPartsPreLoad) == 0x000004, "Member 'FOptionGraphics::bMobPartsPreLoad' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, bMobPartsPreLoadNotMove) == 0x000005, "Member 'FOptionGraphics::bMobPartsPreLoadNotMove' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, WindowMode) == 0x000006, "Member 'FOptionGraphics::WindowMode' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, Resolution) == 0x000008, "Member 'FOptionGraphics::Resolution' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, DisplayNum) == 0x000010, "Member 'FOptionGraphics::DisplayNum' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, FramerateCap) == 0x000014, "Member 'FOptionGraphics::FramerateCap' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, Brightness) == 0x000018, "Member 'FOptionGraphics::Brightness' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, VSync) == 0x00001C, "Member 'FOptionGraphics::VSync' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, AntiAliasingQuality) == 0x00001D, "Member 'FOptionGraphics::AntiAliasingQuality' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, ShadowQuality) == 0x00001E, "Member 'FOptionGraphics::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, TextureQuality) == 0x00001F, "Member 'FOptionGraphics::TextureQuality' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, PostprocessQuality) == 0x000020, "Member 'FOptionGraphics::PostprocessQuality' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, EffectQuality) == 0x000021, "Member 'FOptionGraphics::EffectQuality' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, DisplayScale) == 0x000024, "Member 'FOptionGraphics::DisplayScale' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, ConsumerQualityMode) == 0x000028, "Member 'FOptionGraphics::ConsumerQualityMode' has a wrong offset!");
static_assert(offsetof(FOptionGraphics, CharacterQuality) == 0x000029, "Member 'FOptionGraphics::CharacterQuality' has a wrong offset!");

// ScriptStruct RC.Option
// 0x0068 (0x0068 - 0x0000)
struct FOption final
{
public:
	struct FOptionSound                           SOUND;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOptionController                      InputController;                                   // 0x0018(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOptionUiDisplay                       UiDisplay;                                         // 0x002C(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOptionGraphics                        Graphics;                                          // 0x003C(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOption) == 0x000004, "Wrong alignment on FOption");
static_assert(sizeof(FOption) == 0x000068, "Wrong size on FOption");
static_assert(offsetof(FOption, SOUND) == 0x000000, "Member 'FOption::SOUND' has a wrong offset!");
static_assert(offsetof(FOption, InputController) == 0x000018, "Member 'FOption::InputController' has a wrong offset!");
static_assert(offsetof(FOption, UiDisplay) == 0x00002C, "Member 'FOption::UiDisplay' has a wrong offset!");
static_assert(offsetof(FOption, Graphics) == 0x00003C, "Member 'FOption::Graphics' has a wrong offset!");

// ScriptStruct RC.RCParamFormListTableRow
// 0x0070 (0x0078 - 0x0008)
struct FRCParamFormListTableRow final : public FTableRowBase
{
public:
	class FName                                   FormId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FaceID;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BodyId;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HandRId;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandRState;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HandLId;                                           // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandLState;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaskTextureId;                                     // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UmbrellaShadow;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReflectionIntensity;                               // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamFormListTableRow) == 0x000008, "Wrong alignment on FRCParamFormListTableRow");
static_assert(sizeof(FRCParamFormListTableRow) == 0x000078, "Wrong size on FRCParamFormListTableRow");
static_assert(offsetof(FRCParamFormListTableRow, FormId) == 0x000008, "Member 'FRCParamFormListTableRow::FormId' has a wrong offset!");
static_assert(offsetof(FRCParamFormListTableRow, FaceID) == 0x000010, "Member 'FRCParamFormListTableRow::FaceID' has a wrong offset!");
static_assert(offsetof(FRCParamFormListTableRow, BodyId) == 0x000020, "Member 'FRCParamFormListTableRow::BodyId' has a wrong offset!");
static_assert(offsetof(FRCParamFormListTableRow, HandRId) == 0x000030, "Member 'FRCParamFormListTableRow::HandRId' has a wrong offset!");
static_assert(offsetof(FRCParamFormListTableRow, HandRState) == 0x000040, "Member 'FRCParamFormListTableRow::HandRState' has a wrong offset!");
static_assert(offsetof(FRCParamFormListTableRow, HandLId) == 0x000048, "Member 'FRCParamFormListTableRow::HandLId' has a wrong offset!");
static_assert(offsetof(FRCParamFormListTableRow, HandLState) == 0x000058, "Member 'FRCParamFormListTableRow::HandLState' has a wrong offset!");
static_assert(offsetof(FRCParamFormListTableRow, MaskTextureId) == 0x000060, "Member 'FRCParamFormListTableRow::MaskTextureId' has a wrong offset!");
static_assert(offsetof(FRCParamFormListTableRow, UmbrellaShadow) == 0x000070, "Member 'FRCParamFormListTableRow::UmbrellaShadow' has a wrong offset!");
static_assert(offsetof(FRCParamFormListTableRow, ReflectionIntensity) == 0x000074, "Member 'FRCParamFormListTableRow::ReflectionIntensity' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleDisturbLetterMoveData
// 0x0028 (0x0028 - 0x0000)
struct FRCNazoBattleDisturbLetterMoveData final
{
public:
	bool                                          bAttackEnable;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartDistance;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartElapsedTime;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccelerateAttackEnable;                           // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartAccelerateDistance;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAccelerateElapsedTime;                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelerateTime;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleDisturbLetterMoveData) == 0x000004, "Wrong alignment on FRCNazoBattleDisturbLetterMoveData");
static_assert(sizeof(FRCNazoBattleDisturbLetterMoveData) == 0x000028, "Wrong size on FRCNazoBattleDisturbLetterMoveData");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, bAttackEnable) == 0x000000, "Member 'FRCNazoBattleDisturbLetterMoveData::bAttackEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, StartDistance) == 0x000004, "Member 'FRCNazoBattleDisturbLetterMoveData::StartDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, StartElapsedTime) == 0x000008, "Member 'FRCNazoBattleDisturbLetterMoveData::StartElapsedTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, Speed) == 0x00000C, "Member 'FRCNazoBattleDisturbLetterMoveData::Speed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, Time) == 0x000010, "Member 'FRCNazoBattleDisturbLetterMoveData::Time' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, bAccelerateAttackEnable) == 0x000014, "Member 'FRCNazoBattleDisturbLetterMoveData::bAccelerateAttackEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, StartAccelerateDistance) == 0x000018, "Member 'FRCNazoBattleDisturbLetterMoveData::StartAccelerateDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, StartAccelerateElapsedTime) == 0x00001C, "Member 'FRCNazoBattleDisturbLetterMoveData::StartAccelerateElapsedTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, Acceleration) == 0x000020, "Member 'FRCNazoBattleDisturbLetterMoveData::Acceleration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterMoveData, AccelerateTime) == 0x000024, "Member 'FRCNazoBattleDisturbLetterMoveData::AccelerateTime' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleDisturbLetterAppearData
// 0x0070 (0x0070 - 0x0000)
struct FRCNazoBattleDisturbLetterAppearData final
{
public:
	ERCNazoBattleRebuttalLetterPosition           Position;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeft;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebuttalLetterLeft;                               // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RebuttalLetterAppearLocation;                      // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalLetterTargetLocation;                      // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleDisturbLetterAppearData) == 0x000010, "Wrong alignment on FRCNazoBattleDisturbLetterAppearData");
static_assert(sizeof(FRCNazoBattleDisturbLetterAppearData) == 0x000070, "Wrong size on FRCNazoBattleDisturbLetterAppearData");
static_assert(offsetof(FRCNazoBattleDisturbLetterAppearData, Position) == 0x000000, "Member 'FRCNazoBattleDisturbLetterAppearData::Position' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterAppearData, bLeft) == 0x000001, "Member 'FRCNazoBattleDisturbLetterAppearData::bLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterAppearData, StartTransform) == 0x000010, "Member 'FRCNazoBattleDisturbLetterAppearData::StartTransform' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterAppearData, TargetLocation) == 0x000040, "Member 'FRCNazoBattleDisturbLetterAppearData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterAppearData, bRebuttalLetterLeft) == 0x00004C, "Member 'FRCNazoBattleDisturbLetterAppearData::bRebuttalLetterLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterAppearData, RebuttalLetterAppearLocation) == 0x000050, "Member 'FRCNazoBattleDisturbLetterAppearData::RebuttalLetterAppearLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterAppearData, RebuttalLetterTargetLocation) == 0x00005C, "Member 'FRCNazoBattleDisturbLetterAppearData::RebuttalLetterTargetLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterAppearData, Damage) == 0x000068, "Member 'FRCNazoBattleDisturbLetterAppearData::Damage' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleDisturbLetterPrepareData
// 0x0290 (0x0290 - 0x0000)
struct FRCNazoBattleDisturbLetterPrepareData final
{
public:
	class ARCNazoBattleLevelScriptActor*          BattleLSA;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalGroupIndex;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalGroupNo;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalIndex;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         No;                                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisturbLetterID;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterAspect             Aspect;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoResizeW;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoResizeMax;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoResizeMin;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         AppearEffectInLp;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         AppearEffectOt;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearEffectSEID;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      FrontMaterial;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      EdgeMaterial;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         OutEffect;                                         // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Out1Effect;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Out2Effect;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveCurveAsWorldLocation;                         // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           MoveCurve;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           MoveRotationCurve;                                 // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           MoveScaleCurve;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedRate;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccRate;                                           // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandZ;                                             // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuriedShadowAlphaRate;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCNazoBattleRebuttalDisturbSettings   Settings;                                          // 0x00B8(0x00E8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCNazoBattleDisturbParameters         Parameters;                                        // 0x01A0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleDisturbLetterPrepareData) == 0x000008, "Wrong alignment on FRCNazoBattleDisturbLetterPrepareData");
static_assert(sizeof(FRCNazoBattleDisturbLetterPrepareData) == 0x000290, "Wrong size on FRCNazoBattleDisturbLetterPrepareData");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, BattleLSA) == 0x000000, "Member 'FRCNazoBattleDisturbLetterPrepareData::BattleLSA' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, RebuttalGroupIndex) == 0x000008, "Member 'FRCNazoBattleDisturbLetterPrepareData::RebuttalGroupIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, RebuttalGroupNo) == 0x00000C, "Member 'FRCNazoBattleDisturbLetterPrepareData::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, RebuttalIndex) == 0x000010, "Member 'FRCNazoBattleDisturbLetterPrepareData::RebuttalIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, RebuttalNo) == 0x000014, "Member 'FRCNazoBattleDisturbLetterPrepareData::RebuttalNo' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, Index) == 0x000018, "Member 'FRCNazoBattleDisturbLetterPrepareData::Index' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, No) == 0x00001C, "Member 'FRCNazoBattleDisturbLetterPrepareData::No' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, DisturbLetterID) == 0x000020, "Member 'FRCNazoBattleDisturbLetterPrepareData::DisturbLetterID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, Aspect) == 0x000028, "Member 'FRCNazoBattleDisturbLetterPrepareData::Aspect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, AutoResizeW) == 0x00002C, "Member 'FRCNazoBattleDisturbLetterPrepareData::AutoResizeW' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, AutoResizeMax) == 0x000030, "Member 'FRCNazoBattleDisturbLetterPrepareData::AutoResizeMax' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, AutoResizeMin) == 0x000034, "Member 'FRCNazoBattleDisturbLetterPrepareData::AutoResizeMin' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, AppearEffectInLp) == 0x000038, "Member 'FRCNazoBattleDisturbLetterPrepareData::AppearEffectInLp' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, AppearEffectOt) == 0x000040, "Member 'FRCNazoBattleDisturbLetterPrepareData::AppearEffectOt' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, AppearEffectSEID) == 0x000048, "Member 'FRCNazoBattleDisturbLetterPrepareData::AppearEffectSEID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, FrontMaterial) == 0x000050, "Member 'FRCNazoBattleDisturbLetterPrepareData::FrontMaterial' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, EdgeMaterial) == 0x000058, "Member 'FRCNazoBattleDisturbLetterPrepareData::EdgeMaterial' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, OutEffect) == 0x000060, "Member 'FRCNazoBattleDisturbLetterPrepareData::OutEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, Out1Effect) == 0x000068, "Member 'FRCNazoBattleDisturbLetterPrepareData::Out1Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, Out2Effect) == 0x000070, "Member 'FRCNazoBattleDisturbLetterPrepareData::Out2Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, bMoveCurveAsWorldLocation) == 0x000078, "Member 'FRCNazoBattleDisturbLetterPrepareData::bMoveCurveAsWorldLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, MoveCurve) == 0x000080, "Member 'FRCNazoBattleDisturbLetterPrepareData::MoveCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, MoveRotationCurve) == 0x000088, "Member 'FRCNazoBattleDisturbLetterPrepareData::MoveRotationCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, MoveScaleCurve) == 0x000090, "Member 'FRCNazoBattleDisturbLetterPrepareData::MoveScaleCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, SpeedRate) == 0x000098, "Member 'FRCNazoBattleDisturbLetterPrepareData::SpeedRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, AccRate) == 0x00009C, "Member 'FRCNazoBattleDisturbLetterPrepareData::AccRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, ShadowColor) == 0x0000A0, "Member 'FRCNazoBattleDisturbLetterPrepareData::ShadowColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, LandZ) == 0x0000B0, "Member 'FRCNazoBattleDisturbLetterPrepareData::LandZ' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, BuriedShadowAlphaRate) == 0x0000B4, "Member 'FRCNazoBattleDisturbLetterPrepareData::BuriedShadowAlphaRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, Settings) == 0x0000B8, "Member 'FRCNazoBattleDisturbLetterPrepareData::Settings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterPrepareData, Parameters) == 0x0001A0, "Member 'FRCNazoBattleDisturbLetterPrepareData::Parameters' has a wrong offset!");

// ScriptStruct RC.RCParamEventMapConnectInfoTableRow
// 0x0070 (0x0078 - 0x0008)
struct FRCParamEventMapConnectInfoTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapIDComment;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckActorName;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventTriggerName;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnvironmentChangeTriggerName;                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerStartName;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextMapID;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextMapIDComment;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextCheckActorName;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextEventTriggerName;                              // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextEnvironmentChangeTriggerName;                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextPlayerStartName;                               // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamEventMapConnectInfoTableRow) == 0x000008, "Wrong alignment on FRCParamEventMapConnectInfoTableRow");
static_assert(sizeof(FRCParamEventMapConnectInfoTableRow) == 0x000078, "Wrong size on FRCParamEventMapConnectInfoTableRow");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, MapID) == 0x000008, "Member 'FRCParamEventMapConnectInfoTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, MapIDComment) == 0x000010, "Member 'FRCParamEventMapConnectInfoTableRow::MapIDComment' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, CheckActorName) == 0x000020, "Member 'FRCParamEventMapConnectInfoTableRow::CheckActorName' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, EventTriggerName) == 0x000028, "Member 'FRCParamEventMapConnectInfoTableRow::EventTriggerName' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, EnvironmentChangeTriggerName) == 0x000030, "Member 'FRCParamEventMapConnectInfoTableRow::EnvironmentChangeTriggerName' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, PlayerStartName) == 0x000038, "Member 'FRCParamEventMapConnectInfoTableRow::PlayerStartName' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, NextMapID) == 0x000040, "Member 'FRCParamEventMapConnectInfoTableRow::NextMapID' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, NextMapIDComment) == 0x000048, "Member 'FRCParamEventMapConnectInfoTableRow::NextMapIDComment' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, NextCheckActorName) == 0x000058, "Member 'FRCParamEventMapConnectInfoTableRow::NextCheckActorName' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, NextEventTriggerName) == 0x000060, "Member 'FRCParamEventMapConnectInfoTableRow::NextEventTriggerName' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, NextEnvironmentChangeTriggerName) == 0x000068, "Member 'FRCParamEventMapConnectInfoTableRow::NextEnvironmentChangeTriggerName' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapConnectInfoTableRow, NextPlayerStartName) == 0x000070, "Member 'FRCParamEventMapConnectInfoTableRow::NextPlayerStartName' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterAssets
// 0x00A0 (0x00A0 - 0x0000)
struct FRCNazoBattleRebuttalLetterAssets
{
public:
	class UStaticMesh*                            Mesh1_1;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh2_1;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      InMaterial;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      LpMaterial;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  Font;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           OutCurve;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            HitBoxMesh;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      ShadowDecalMaterial;                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         HitEffect;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Hit1Effect;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Hit2Effect;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SlashedMesh;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SlashedAnim;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         SlashedEffect;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         RepeledEffect;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Barrier1Effect;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Barrier2Effect;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Barrier3Effect;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             EffectList;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             RebuttalLetterList;                                // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalLetterAssets) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalLetterAssets");
static_assert(sizeof(FRCNazoBattleRebuttalLetterAssets) == 0x0000A0, "Wrong size on FRCNazoBattleRebuttalLetterAssets");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, Mesh1_1) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterAssets::Mesh1_1' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, Mesh2_1) == 0x000008, "Member 'FRCNazoBattleRebuttalLetterAssets::Mesh2_1' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, InMaterial) == 0x000010, "Member 'FRCNazoBattleRebuttalLetterAssets::InMaterial' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, LpMaterial) == 0x000018, "Member 'FRCNazoBattleRebuttalLetterAssets::LpMaterial' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, Font) == 0x000020, "Member 'FRCNazoBattleRebuttalLetterAssets::Font' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, OutCurve) == 0x000028, "Member 'FRCNazoBattleRebuttalLetterAssets::OutCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, HitBoxMesh) == 0x000030, "Member 'FRCNazoBattleRebuttalLetterAssets::HitBoxMesh' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, ShadowDecalMaterial) == 0x000038, "Member 'FRCNazoBattleRebuttalLetterAssets::ShadowDecalMaterial' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, HitEffect) == 0x000040, "Member 'FRCNazoBattleRebuttalLetterAssets::HitEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, Hit1Effect) == 0x000048, "Member 'FRCNazoBattleRebuttalLetterAssets::Hit1Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, Hit2Effect) == 0x000050, "Member 'FRCNazoBattleRebuttalLetterAssets::Hit2Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, SlashedMesh) == 0x000058, "Member 'FRCNazoBattleRebuttalLetterAssets::SlashedMesh' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, SlashedAnim) == 0x000060, "Member 'FRCNazoBattleRebuttalLetterAssets::SlashedAnim' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, SlashedEffect) == 0x000068, "Member 'FRCNazoBattleRebuttalLetterAssets::SlashedEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, RepeledEffect) == 0x000070, "Member 'FRCNazoBattleRebuttalLetterAssets::RepeledEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, Barrier1Effect) == 0x000078, "Member 'FRCNazoBattleRebuttalLetterAssets::Barrier1Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, Barrier2Effect) == 0x000080, "Member 'FRCNazoBattleRebuttalLetterAssets::Barrier2Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, Barrier3Effect) == 0x000088, "Member 'FRCNazoBattleRebuttalLetterAssets::Barrier3Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, EffectList) == 0x000090, "Member 'FRCNazoBattleRebuttalLetterAssets::EffectList' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterAssets, RebuttalLetterList) == 0x000098, "Member 'FRCNazoBattleRebuttalLetterAssets::RebuttalLetterList' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleDisturbLetterAssets
// 0x0010 (0x00B0 - 0x00A0)
struct FRCNazoBattleDisturbLetterAssets final : public FRCNazoBattleRebuttalLetterAssets
{
public:
	class UCurveVector*                           HitShakeCurve;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         HitEndureEffect;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleDisturbLetterAssets) == 0x000008, "Wrong alignment on FRCNazoBattleDisturbLetterAssets");
static_assert(sizeof(FRCNazoBattleDisturbLetterAssets) == 0x0000B0, "Wrong size on FRCNazoBattleDisturbLetterAssets");
static_assert(offsetof(FRCNazoBattleDisturbLetterAssets, HitShakeCurve) == 0x0000A0, "Member 'FRCNazoBattleDisturbLetterAssets::HitShakeCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleDisturbLetterAssets, HitEndureEffect) == 0x0000A8, "Member 'FRCNazoBattleDisturbLetterAssets::HitEndureEffect' has a wrong offset!");

// ScriptStruct RC.RCParamBgFileListTableRow
// 0x0070 (0x0078 - 0x0008)
struct FRCParamBgFileListTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PL_FolderName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PL_FileName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FolderName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Filename;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   DlcType;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DlcFileName;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DevFileName;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamBgFileListTableRow) == 0x000008, "Wrong alignment on FRCParamBgFileListTableRow");
static_assert(sizeof(FRCParamBgFileListTableRow) == 0x000078, "Wrong size on FRCParamBgFileListTableRow");
static_assert(offsetof(FRCParamBgFileListTableRow, MapID) == 0x000008, "Member 'FRCParamBgFileListTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamBgFileListTableRow, PL_FolderName) == 0x000010, "Member 'FRCParamBgFileListTableRow::PL_FolderName' has a wrong offset!");
static_assert(offsetof(FRCParamBgFileListTableRow, PL_FileName) == 0x000020, "Member 'FRCParamBgFileListTableRow::PL_FileName' has a wrong offset!");
static_assert(offsetof(FRCParamBgFileListTableRow, FolderName) == 0x000030, "Member 'FRCParamBgFileListTableRow::FolderName' has a wrong offset!");
static_assert(offsetof(FRCParamBgFileListTableRow, Filename) == 0x000040, "Member 'FRCParamBgFileListTableRow::Filename' has a wrong offset!");
static_assert(offsetof(FRCParamBgFileListTableRow, DlcType) == 0x000050, "Member 'FRCParamBgFileListTableRow::DlcType' has a wrong offset!");
static_assert(offsetof(FRCParamBgFileListTableRow, DlcFileName) == 0x000058, "Member 'FRCParamBgFileListTableRow::DlcFileName' has a wrong offset!");
static_assert(offsetof(FRCParamBgFileListTableRow, DevFileName) == 0x000068, "Member 'FRCParamBgFileListTableRow::DevFileName' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSARebuttalOtherKaijinData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRCNazoBattleLSARebuttalOtherKaijinData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNazoBattleOtherKaijinMotionSettings MotionSettings;                                    // 0x0008(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMoveStart;                                        // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadyMotionStart;                                 // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMotionStart;                                      // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleLSARebuttalOtherKaijinData) == 0x000008, "Wrong alignment on FRCNazoBattleLSARebuttalOtherKaijinData");
static_assert(sizeof(FRCNazoBattleLSARebuttalOtherKaijinData) == 0x000028, "Wrong size on FRCNazoBattleLSARebuttalOtherKaijinData");
static_assert(offsetof(FRCNazoBattleLSARebuttalOtherKaijinData, MotionSettings) == 0x000008, "Member 'FRCNazoBattleLSARebuttalOtherKaijinData::MotionSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalOtherKaijinData, bMoveStart) == 0x000024, "Member 'FRCNazoBattleLSARebuttalOtherKaijinData::bMoveStart' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalOtherKaijinData, bReadyMotionStart) == 0x000025, "Member 'FRCNazoBattleLSARebuttalOtherKaijinData::bReadyMotionStart' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalOtherKaijinData, bMotionStart) == 0x000026, "Member 'FRCNazoBattleLSARebuttalOtherKaijinData::bMotionStart' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSADisturbData
// 0x0060 (0x0060 - 0x0000)
struct FRCNazoBattleLSADisturbData final
{
public:
	int32                                         RebuttalGroupIndex;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalGroupNo;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalIndex;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebuttalNo;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCNazoBattleDisturbLetter*             DisturbLetter;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         No;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	ERCNazoBattleLSARebuttalPhases                Phases;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearDelayTime;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearDelayTime2;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchDelayTime;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKaijinMotion;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKaijinMotionStarted;                              // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KaijinMotionDelayTime;                             // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppearLeft;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFiring;                                           // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackEnable;                                     // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetectivePoint;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleLSADisturbData) == 0x000008, "Wrong alignment on FRCNazoBattleLSADisturbData");
static_assert(sizeof(FRCNazoBattleLSADisturbData) == 0x000060, "Wrong size on FRCNazoBattleLSADisturbData");
static_assert(offsetof(FRCNazoBattleLSADisturbData, RebuttalGroupIndex) == 0x000000, "Member 'FRCNazoBattleLSADisturbData::RebuttalGroupIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, RebuttalGroupNo) == 0x000004, "Member 'FRCNazoBattleLSADisturbData::RebuttalGroupNo' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, RebuttalIndex) == 0x000008, "Member 'FRCNazoBattleLSADisturbData::RebuttalIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, RebuttalNo) == 0x00000C, "Member 'FRCNazoBattleLSADisturbData::RebuttalNo' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, Index) == 0x000010, "Member 'FRCNazoBattleLSADisturbData::Index' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, DisturbLetter) == 0x000018, "Member 'FRCNazoBattleLSADisturbData::DisturbLetter' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, No) == 0x000020, "Member 'FRCNazoBattleLSADisturbData::No' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, Phases) == 0x000038, "Member 'FRCNazoBattleLSADisturbData::Phases' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, AppearDelayTime) == 0x00003C, "Member 'FRCNazoBattleLSADisturbData::AppearDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, AppearDelayTime2) == 0x000040, "Member 'FRCNazoBattleLSADisturbData::AppearDelayTime2' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, LaunchDelayTime) == 0x000044, "Member 'FRCNazoBattleLSADisturbData::LaunchDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, bKaijinMotion) == 0x000048, "Member 'FRCNazoBattleLSADisturbData::bKaijinMotion' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, bKaijinMotionStarted) == 0x000049, "Member 'FRCNazoBattleLSADisturbData::bKaijinMotionStarted' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, KaijinMotionDelayTime) == 0x00004C, "Member 'FRCNazoBattleLSADisturbData::KaijinMotionDelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, bAppearLeft) == 0x000050, "Member 'FRCNazoBattleLSADisturbData::bAppearLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, bFiring) == 0x000051, "Member 'FRCNazoBattleLSADisturbData::bFiring' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, bAttackEnable) == 0x000052, "Member 'FRCNazoBattleLSADisturbData::bAttackEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, ElapsedTime) == 0x000054, "Member 'FRCNazoBattleLSADisturbData::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSADisturbData, DetectivePoint) == 0x000058, "Member 'FRCNazoBattleLSADisturbData::DetectivePoint' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSARebuttalData
// 0x0150 (0x0150 - 0x0000)
struct FRCNazoBattleLSARebuttalData final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupNo;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARCNazoBattleRebuttalLetter*            RebuttalLetter;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         No;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterType               Type;                                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x13];                                      // 0x001D(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	ERCNazoBattleLSARebuttalPhases                Phases;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KaijinTag;                                         // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0xC];                                       // 0x003C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bKaijinMove;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeWhenKaijinMoveStart;                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KaijinReadyMotionName;                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKaijinReadyMotion;                                // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeWhenKaijinReadyMotionStart;                    // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKaijinAttackMotion;                               // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeWhenKaijinAttackMotionStart;                   // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaijinAttackMotionInLength;                        // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FRCNazoBattleLSARebuttalOtherKaijinData> OtherKaijinDataMap;                                // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterPosition           Position;                                          // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeft;                                             // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AppearLocation;                                    // 0x00D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x00E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFiring;                                           // 0x00EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackEnable;                                     // 0x00ED(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanJustAvoid;                                     // 0x00EE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitAfterVoiceAndMotionEnd;                       // 0x00EF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeWhenVoiceAndMotionEnd;                         // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishedWaitAfterVoiceAndMotionEnd;               // 0x00F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntervalTime;                                      // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           IntervalTimerHandle;                               // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalElapsedTime;                                  // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCNazoBattleLSADisturbData>    DisturbDataArray;                                  // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         AppearDisturbCount;                                // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeforeDisturbLeft;                                // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustAvoidDirectionCustomL;                        // 0x0125(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_126[0x2];                                      // 0x0126(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERCNazoBattleRebuttalLetterJustAvoidDirection> JustAvoidDirectionArrayL;                          // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bJustAvoidDirectionCustomR;                        // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERCNazoBattleRebuttalLetterJustAvoidDirection> JustAvoidDirectionArrayR;                          // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleLSARebuttalData) == 0x000008, "Wrong alignment on FRCNazoBattleLSARebuttalData");
static_assert(sizeof(FRCNazoBattleLSARebuttalData) == 0x000150, "Wrong size on FRCNazoBattleLSARebuttalData");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, GroupIndex) == 0x000000, "Member 'FRCNazoBattleLSARebuttalData::GroupIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, GroupNo) == 0x000004, "Member 'FRCNazoBattleLSARebuttalData::GroupNo' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, Index) == 0x000008, "Member 'FRCNazoBattleLSARebuttalData::Index' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, RebuttalLetter) == 0x000010, "Member 'FRCNazoBattleLSARebuttalData::RebuttalLetter' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, No) == 0x000018, "Member 'FRCNazoBattleLSARebuttalData::No' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, Type) == 0x00001C, "Member 'FRCNazoBattleLSARebuttalData::Type' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, Phases) == 0x000030, "Member 'FRCNazoBattleLSARebuttalData::Phases' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, KaijinTag) == 0x000034, "Member 'FRCNazoBattleLSARebuttalData::KaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bKaijinMove) == 0x000048, "Member 'FRCNazoBattleLSARebuttalData::bKaijinMove' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, TimeWhenKaijinMoveStart) == 0x00004C, "Member 'FRCNazoBattleLSARebuttalData::TimeWhenKaijinMoveStart' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, KaijinReadyMotionName) == 0x000058, "Member 'FRCNazoBattleLSARebuttalData::KaijinReadyMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bKaijinReadyMotion) == 0x000060, "Member 'FRCNazoBattleLSARebuttalData::bKaijinReadyMotion' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, TimeWhenKaijinReadyMotionStart) == 0x000064, "Member 'FRCNazoBattleLSARebuttalData::TimeWhenKaijinReadyMotionStart' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bKaijinAttackMotion) == 0x000068, "Member 'FRCNazoBattleLSARebuttalData::bKaijinAttackMotion' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, TimeWhenKaijinAttackMotionStart) == 0x00006C, "Member 'FRCNazoBattleLSARebuttalData::TimeWhenKaijinAttackMotionStart' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, KaijinAttackMotionInLength) == 0x000070, "Member 'FRCNazoBattleLSARebuttalData::KaijinAttackMotionInLength' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, OtherKaijinDataMap) == 0x000078, "Member 'FRCNazoBattleLSARebuttalData::OtherKaijinDataMap' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, VoiceID) == 0x0000C8, "Member 'FRCNazoBattleLSARebuttalData::VoiceID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, Position) == 0x0000D0, "Member 'FRCNazoBattleLSARebuttalData::Position' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bLeft) == 0x0000D1, "Member 'FRCNazoBattleLSARebuttalData::bLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, AppearLocation) == 0x0000D4, "Member 'FRCNazoBattleLSARebuttalData::AppearLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, TargetLocation) == 0x0000E0, "Member 'FRCNazoBattleLSARebuttalData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bFiring) == 0x0000EC, "Member 'FRCNazoBattleLSARebuttalData::bFiring' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bAttackEnable) == 0x0000ED, "Member 'FRCNazoBattleLSARebuttalData::bAttackEnable' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bCanJustAvoid) == 0x0000EE, "Member 'FRCNazoBattleLSARebuttalData::bCanJustAvoid' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bWaitAfterVoiceAndMotionEnd) == 0x0000EF, "Member 'FRCNazoBattleLSARebuttalData::bWaitAfterVoiceAndMotionEnd' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, TimeWhenVoiceAndMotionEnd) == 0x0000F0, "Member 'FRCNazoBattleLSARebuttalData::TimeWhenVoiceAndMotionEnd' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bFinishedWaitAfterVoiceAndMotionEnd) == 0x0000F4, "Member 'FRCNazoBattleLSARebuttalData::bFinishedWaitAfterVoiceAndMotionEnd' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, IntervalTime) == 0x0000F8, "Member 'FRCNazoBattleLSARebuttalData::IntervalTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, IntervalTimerHandle) == 0x000100, "Member 'FRCNazoBattleLSARebuttalData::IntervalTimerHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, ElapsedTime) == 0x000108, "Member 'FRCNazoBattleLSARebuttalData::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, TotalElapsedTime) == 0x00010C, "Member 'FRCNazoBattleLSARebuttalData::TotalElapsedTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, DisturbDataArray) == 0x000110, "Member 'FRCNazoBattleLSARebuttalData::DisturbDataArray' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, AppearDisturbCount) == 0x000120, "Member 'FRCNazoBattleLSARebuttalData::AppearDisturbCount' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bBeforeDisturbLeft) == 0x000124, "Member 'FRCNazoBattleLSARebuttalData::bBeforeDisturbLeft' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bJustAvoidDirectionCustomL) == 0x000125, "Member 'FRCNazoBattleLSARebuttalData::bJustAvoidDirectionCustomL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, JustAvoidDirectionArrayL) == 0x000128, "Member 'FRCNazoBattleLSARebuttalData::JustAvoidDirectionArrayL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, bJustAvoidDirectionCustomR) == 0x000138, "Member 'FRCNazoBattleLSARebuttalData::bJustAvoidDirectionCustomR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalData, JustAvoidDirectionArrayR) == 0x000140, "Member 'FRCNazoBattleLSARebuttalData::JustAvoidDirectionArrayR' has a wrong offset!");

// ScriptStruct RC.RCParamKaikagiListTableRow
// 0x0050 (0x0058 - 0x0008)
struct FRCParamKaikagiListTableRow final : public FTableRowBase
{
public:
	class FName                                   KaikagiID;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNum;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiType;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Scene;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SceneNonDelete;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubStory;                                         // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextureName;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiNameID;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiCaptionID;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiMenuCaptionID;                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiNzSelectCaptionID;                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamKaikagiListTableRow) == 0x000008, "Wrong alignment on FRCParamKaikagiListTableRow");
static_assert(sizeof(FRCParamKaikagiListTableRow) == 0x000058, "Wrong size on FRCParamKaikagiListTableRow");
static_assert(offsetof(FRCParamKaikagiListTableRow, KaikagiID) == 0x000008, "Member 'FRCParamKaikagiListTableRow::KaikagiID' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, SortNum) == 0x000010, "Member 'FRCParamKaikagiListTableRow::SortNum' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, Phase) == 0x000014, "Member 'FRCParamKaikagiListTableRow::Phase' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, KaikagiType) == 0x000018, "Member 'FRCParamKaikagiListTableRow::KaikagiType' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, Chapter) == 0x000020, "Member 'FRCParamKaikagiListTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, Scene) == 0x000024, "Member 'FRCParamKaikagiListTableRow::Scene' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, SceneNonDelete) == 0x000028, "Member 'FRCParamKaikagiListTableRow::SceneNonDelete' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, bSubStory) == 0x00002C, "Member 'FRCParamKaikagiListTableRow::bSubStory' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, TextureName) == 0x000030, "Member 'FRCParamKaikagiListTableRow::TextureName' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, KaikagiNameID) == 0x000038, "Member 'FRCParamKaikagiListTableRow::KaikagiNameID' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, KaikagiCaptionID) == 0x000040, "Member 'FRCParamKaikagiListTableRow::KaikagiCaptionID' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, KaikagiMenuCaptionID) == 0x000048, "Member 'FRCParamKaikagiListTableRow::KaikagiMenuCaptionID' has a wrong offset!");
static_assert(offsetof(FRCParamKaikagiListTableRow, KaikagiNzSelectCaptionID) == 0x000050, "Member 'FRCParamKaikagiListTableRow::KaikagiNzSelectCaptionID' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSARebuttalCameraActorData
// 0x0028 (0x0028 - 0x0000)
struct FRCNazoBattleLSARebuttalCameraActorData final
{
public:
	class ACameraActor*                           RebuttalCamera;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalStartLocation;                             // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RebuttalStartRotation;                             // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RebuttalStartFOV;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleLSARebuttalCameraActorData) == 0x000008, "Wrong alignment on FRCNazoBattleLSARebuttalCameraActorData");
static_assert(sizeof(FRCNazoBattleLSARebuttalCameraActorData) == 0x000028, "Wrong size on FRCNazoBattleLSARebuttalCameraActorData");
static_assert(offsetof(FRCNazoBattleLSARebuttalCameraActorData, RebuttalCamera) == 0x000000, "Member 'FRCNazoBattleLSARebuttalCameraActorData::RebuttalCamera' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalCameraActorData, RebuttalStartLocation) == 0x000008, "Member 'FRCNazoBattleLSARebuttalCameraActorData::RebuttalStartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalCameraActorData, RebuttalStartRotation) == 0x000014, "Member 'FRCNazoBattleLSARebuttalCameraActorData::RebuttalStartRotation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSARebuttalCameraActorData, RebuttalStartFOV) == 0x000020, "Member 'FRCNazoBattleLSARebuttalCameraActorData::RebuttalStartFOV' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSACameraData
// 0x0100 (0x0100 - 0x0000)
struct FRCNazoBattleLSACameraData final
{
public:
	TMap<class FName, struct FRCNazoBattleLSARebuttalCameraActorData> RebuttalCameraActorDataMap;                        // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FName                                   RebuttalCameraTag;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACameraActor*                           RebuttalCamera;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalStartLocation;                             // 0x0060(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RebuttalStartRotation;                             // 0x006C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RebuttalStartFOV;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalLeftLocation;                              // 0x007C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalRightLocation;                             // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalLocationOffsetStart;                       // 0x0094(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalLocationOffsetEnd;                         // 0x00A0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalLocationOffset;                            // 0x00AC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebuttalTargetLocationFixed;                      // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RebuttalTargetKaijinTag;                           // 0x00BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RebuttalPrevTargetKaijinTag;                       // 0x00C4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalChangeTargetTime;                          // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalChangeTargetElapsedTime;                   // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalTargetLocationOffset;                      // 0x00D4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalTargetLocation;                            // 0x00E0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RebuttalCurrentLocation;                           // 0x00EC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalCurrentFOV;                                // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalCurrentPitchOffset;                        // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleLSACameraData) == 0x000008, "Wrong alignment on FRCNazoBattleLSACameraData");
static_assert(sizeof(FRCNazoBattleLSACameraData) == 0x000100, "Wrong size on FRCNazoBattleLSACameraData");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalCameraActorDataMap) == 0x000000, "Member 'FRCNazoBattleLSACameraData::RebuttalCameraActorDataMap' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalCameraTag) == 0x000050, "Member 'FRCNazoBattleLSACameraData::RebuttalCameraTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalCamera) == 0x000058, "Member 'FRCNazoBattleLSACameraData::RebuttalCamera' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalStartLocation) == 0x000060, "Member 'FRCNazoBattleLSACameraData::RebuttalStartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalStartRotation) == 0x00006C, "Member 'FRCNazoBattleLSACameraData::RebuttalStartRotation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalStartFOV) == 0x000078, "Member 'FRCNazoBattleLSACameraData::RebuttalStartFOV' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalLeftLocation) == 0x00007C, "Member 'FRCNazoBattleLSACameraData::RebuttalLeftLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalRightLocation) == 0x000088, "Member 'FRCNazoBattleLSACameraData::RebuttalRightLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalLocationOffsetStart) == 0x000094, "Member 'FRCNazoBattleLSACameraData::RebuttalLocationOffsetStart' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalLocationOffsetEnd) == 0x0000A0, "Member 'FRCNazoBattleLSACameraData::RebuttalLocationOffsetEnd' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalLocationOffset) == 0x0000AC, "Member 'FRCNazoBattleLSACameraData::RebuttalLocationOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, bRebuttalTargetLocationFixed) == 0x0000B8, "Member 'FRCNazoBattleLSACameraData::bRebuttalTargetLocationFixed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalTargetKaijinTag) == 0x0000BC, "Member 'FRCNazoBattleLSACameraData::RebuttalTargetKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalPrevTargetKaijinTag) == 0x0000C4, "Member 'FRCNazoBattleLSACameraData::RebuttalPrevTargetKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalChangeTargetTime) == 0x0000CC, "Member 'FRCNazoBattleLSACameraData::RebuttalChangeTargetTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalChangeTargetElapsedTime) == 0x0000D0, "Member 'FRCNazoBattleLSACameraData::RebuttalChangeTargetElapsedTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalTargetLocationOffset) == 0x0000D4, "Member 'FRCNazoBattleLSACameraData::RebuttalTargetLocationOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalTargetLocation) == 0x0000E0, "Member 'FRCNazoBattleLSACameraData::RebuttalTargetLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalCurrentLocation) == 0x0000EC, "Member 'FRCNazoBattleLSACameraData::RebuttalCurrentLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalCurrentFOV) == 0x0000F8, "Member 'FRCNazoBattleLSACameraData::RebuttalCurrentFOV' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSACameraData, RebuttalCurrentPitchOffset) == 0x0000FC, "Member 'FRCNazoBattleLSACameraData::RebuttalCurrentPitchOffset' has a wrong offset!");

// ScriptStruct RC.RCParamBombReleaseTableRow
// 0x0058 (0x0060 - 0x0008)
struct FRCParamBombReleaseTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 questionImagePath;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 questionTextPath;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         answerNum;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         answerImagePath;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamBombReleaseTableRow) == 0x000008, "Wrong alignment on FRCParamBombReleaseTableRow");
static_assert(sizeof(FRCParamBombReleaseTableRow) == 0x000060, "Wrong size on FRCParamBombReleaseTableRow");
static_assert(offsetof(FRCParamBombReleaseTableRow, ID) == 0x000008, "Member 'FRCParamBombReleaseTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamBombReleaseTableRow, SceneID) == 0x000018, "Member 'FRCParamBombReleaseTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamBombReleaseTableRow, questionImagePath) == 0x000020, "Member 'FRCParamBombReleaseTableRow::questionImagePath' has a wrong offset!");
static_assert(offsetof(FRCParamBombReleaseTableRow, questionTextPath) == 0x000030, "Member 'FRCParamBombReleaseTableRow::questionTextPath' has a wrong offset!");
static_assert(offsetof(FRCParamBombReleaseTableRow, answerNum) == 0x000040, "Member 'FRCParamBombReleaseTableRow::answerNum' has a wrong offset!");
static_assert(offsetof(FRCParamBombReleaseTableRow, answerImagePath) == 0x000048, "Member 'FRCParamBombReleaseTableRow::answerImagePath' has a wrong offset!");
static_assert(offsetof(FRCParamBombReleaseTableRow, Time) == 0x000058, "Member 'FRCParamBombReleaseTableRow::Time' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSAKaijinData
// 0x0100 (0x0100 - 0x0000)
struct FRCNazoBattleLSAKaijinData final
{
public:
	class ARCCharacterRender*                     Kaijin;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 KaijinMesh;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BaseLocation;                                      // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotation;                                     // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class URCCharacterAnimCtrl*                   AnimCtrl;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StayMotionName;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageMotionName;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneShotMotion;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MotionName;                                        // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuttalIndex;                                     // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandle;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionIndex;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            JumpCurve;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleLSAKaijinJumpState               JumpState;                                         // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpMaxX;                                          // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpMinX;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JumpStartLocation;                                 // 0x008C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JumpEndLocation;                                   // 0x0098(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpElapsedTime;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpRate;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpMotionPlayRate;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpReadyMotionTime;                               // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpMotionTime;                                    // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpLandingMotionTime;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpLandingTime;                                   // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocationOffset;                              // 0x00C0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraPrevLocationOffset;                          // 0x00CC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraFocusRate;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraTargetLocationOffsetL;                       // 0x00DC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraTargetLocationOffsetR;                       // 0x00E8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraPitchOffset;                                 // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayingVoiceID;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleLSAKaijinData) == 0x000008, "Wrong alignment on FRCNazoBattleLSAKaijinData");
static_assert(sizeof(FRCNazoBattleLSAKaijinData) == 0x000100, "Wrong size on FRCNazoBattleLSAKaijinData");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, Kaijin) == 0x000000, "Member 'FRCNazoBattleLSAKaijinData::Kaijin' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, KaijinMesh) == 0x000008, "Member 'FRCNazoBattleLSAKaijinData::KaijinMesh' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, BaseLocation) == 0x000010, "Member 'FRCNazoBattleLSAKaijinData::BaseLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, StartLocation) == 0x00001C, "Member 'FRCNazoBattleLSAKaijinData::StartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, StartRotation) == 0x000028, "Member 'FRCNazoBattleLSAKaijinData::StartRotation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, AnimCtrl) == 0x000040, "Member 'FRCNazoBattleLSAKaijinData::AnimCtrl' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, StayMotionName) == 0x000048, "Member 'FRCNazoBattleLSAKaijinData::StayMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, DamageMotionName) == 0x000050, "Member 'FRCNazoBattleLSAKaijinData::DamageMotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, bOneShotMotion) == 0x000058, "Member 'FRCNazoBattleLSAKaijinData::bOneShotMotion' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, MotionName) == 0x00005C, "Member 'FRCNazoBattleLSAKaijinData::MotionName' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, RebuttalIndex) == 0x000064, "Member 'FRCNazoBattleLSAKaijinData::RebuttalIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, TimerHandle) == 0x000068, "Member 'FRCNazoBattleLSAKaijinData::TimerHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, PositionIndex) == 0x000070, "Member 'FRCNazoBattleLSAKaijinData::PositionIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpCurve) == 0x000078, "Member 'FRCNazoBattleLSAKaijinData::JumpCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpState) == 0x000080, "Member 'FRCNazoBattleLSAKaijinData::JumpState' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpMaxX) == 0x000084, "Member 'FRCNazoBattleLSAKaijinData::JumpMaxX' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpMinX) == 0x000088, "Member 'FRCNazoBattleLSAKaijinData::JumpMinX' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpStartLocation) == 0x00008C, "Member 'FRCNazoBattleLSAKaijinData::JumpStartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpEndLocation) == 0x000098, "Member 'FRCNazoBattleLSAKaijinData::JumpEndLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpElapsedTime) == 0x0000A4, "Member 'FRCNazoBattleLSAKaijinData::JumpElapsedTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpRate) == 0x0000A8, "Member 'FRCNazoBattleLSAKaijinData::JumpRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpMotionPlayRate) == 0x0000AC, "Member 'FRCNazoBattleLSAKaijinData::JumpMotionPlayRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpReadyMotionTime) == 0x0000B0, "Member 'FRCNazoBattleLSAKaijinData::JumpReadyMotionTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpMotionTime) == 0x0000B4, "Member 'FRCNazoBattleLSAKaijinData::JumpMotionTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpLandingMotionTime) == 0x0000B8, "Member 'FRCNazoBattleLSAKaijinData::JumpLandingMotionTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, JumpLandingTime) == 0x0000BC, "Member 'FRCNazoBattleLSAKaijinData::JumpLandingTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, CameraLocationOffset) == 0x0000C0, "Member 'FRCNazoBattleLSAKaijinData::CameraLocationOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, CameraPrevLocationOffset) == 0x0000CC, "Member 'FRCNazoBattleLSAKaijinData::CameraPrevLocationOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, CameraFocusRate) == 0x0000D8, "Member 'FRCNazoBattleLSAKaijinData::CameraFocusRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, CameraTargetLocationOffsetL) == 0x0000DC, "Member 'FRCNazoBattleLSAKaijinData::CameraTargetLocationOffsetL' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, CameraTargetLocationOffsetR) == 0x0000E8, "Member 'FRCNazoBattleLSAKaijinData::CameraTargetLocationOffsetR' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, CameraPitchOffset) == 0x0000F4, "Member 'FRCNazoBattleLSAKaijinData::CameraPitchOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinData, PlayingVoiceID) == 0x0000F8, "Member 'FRCNazoBattleLSAKaijinData::PlayingVoiceID' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSAKaijinGroupData
// 0x0068 (0x0068 - 0x0000)
struct FRCNazoBattleLSAKaijinGroupData final
{
public:
	TMap<class FName, struct FRCNazoBattleLSAKaijinData> KaijinDataMap;                                     // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   DefaultKaijinTag;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RebuttalKaijinTag;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JumpingKaijinTag;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleLSAKaijinGroupData) == 0x000008, "Wrong alignment on FRCNazoBattleLSAKaijinGroupData");
static_assert(sizeof(FRCNazoBattleLSAKaijinGroupData) == 0x000068, "Wrong size on FRCNazoBattleLSAKaijinGroupData");
static_assert(offsetof(FRCNazoBattleLSAKaijinGroupData, KaijinDataMap) == 0x000000, "Member 'FRCNazoBattleLSAKaijinGroupData::KaijinDataMap' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinGroupData, DefaultKaijinTag) == 0x000050, "Member 'FRCNazoBattleLSAKaijinGroupData::DefaultKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinGroupData, RebuttalKaijinTag) == 0x000058, "Member 'FRCNazoBattleLSAKaijinGroupData::RebuttalKaijinTag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAKaijinGroupData, JumpingKaijinTag) == 0x000060, "Member 'FRCNazoBattleLSAKaijinGroupData::JumpingKaijinTag' has a wrong offset!");

// ScriptStruct RC.RCParamFinaleTestTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamFinaleTestTableRow final : public FTableRowBase
{
public:
	class FString                                 Heading;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamFinaleTestTableRow) == 0x000008, "Wrong alignment on FRCParamFinaleTestTableRow");
static_assert(sizeof(FRCParamFinaleTestTableRow) == 0x000018, "Wrong size on FRCParamFinaleTestTableRow");
static_assert(offsetof(FRCParamFinaleTestTableRow, Heading) == 0x000008, "Member 'FRCParamFinaleTestTableRow::Heading' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSAAssistData
// 0x0088 (0x0088 - 0x0000)
struct FRCNazoBattleLSAAssistData final
{
public:
	class ARCCharacterRender*                     AssistChara;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotation;                                     // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCanAssist;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bElapsedCoolTimeFlag;                              // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolTime;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedCoolTime;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCoolTimeMaxAtFinished;                            // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BaseLocation;                                      // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BaseRotation;                                      // 0x004C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveVector*                           InLocationCurve;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           OutLocationCurve;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleLSAAssistState                   State;                                             // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnrival;                                          // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnrivalTime;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnrivalDuration;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttacked;                                         // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoBattleLSAAssistData) == 0x000008, "Wrong alignment on FRCNazoBattleLSAAssistData");
static_assert(sizeof(FRCNazoBattleLSAAssistData) == 0x000088, "Wrong size on FRCNazoBattleLSAAssistData");
static_assert(offsetof(FRCNazoBattleLSAAssistData, AssistChara) == 0x000000, "Member 'FRCNazoBattleLSAAssistData::AssistChara' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, StartLocation) == 0x000008, "Member 'FRCNazoBattleLSAAssistData::StartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, StartRotation) == 0x000014, "Member 'FRCNazoBattleLSAAssistData::StartRotation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, bCanAssist) == 0x000028, "Member 'FRCNazoBattleLSAAssistData::bCanAssist' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, bElapsedCoolTimeFlag) == 0x000029, "Member 'FRCNazoBattleLSAAssistData::bElapsedCoolTimeFlag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, CoolTime) == 0x00002C, "Member 'FRCNazoBattleLSAAssistData::CoolTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, ElapsedCoolTime) == 0x000030, "Member 'FRCNazoBattleLSAAssistData::ElapsedCoolTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, bCoolTimeMaxAtFinished) == 0x000034, "Member 'FRCNazoBattleLSAAssistData::bCoolTimeMaxAtFinished' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, TimerHandle) == 0x000038, "Member 'FRCNazoBattleLSAAssistData::TimerHandle' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, BaseLocation) == 0x000040, "Member 'FRCNazoBattleLSAAssistData::BaseLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, BaseRotation) == 0x00004C, "Member 'FRCNazoBattleLSAAssistData::BaseRotation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, InLocationCurve) == 0x000058, "Member 'FRCNazoBattleLSAAssistData::InLocationCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, OutLocationCurve) == 0x000060, "Member 'FRCNazoBattleLSAAssistData::OutLocationCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, State) == 0x000068, "Member 'FRCNazoBattleLSAAssistData::State' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, Time) == 0x00006C, "Member 'FRCNazoBattleLSAAssistData::Time' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, ElapsedTime) == 0x000070, "Member 'FRCNazoBattleLSAAssistData::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, bUnrival) == 0x000074, "Member 'FRCNazoBattleLSAAssistData::bUnrival' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, UnrivalTime) == 0x000078, "Member 'FRCNazoBattleLSAAssistData::UnrivalTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, UnrivalDuration) == 0x00007C, "Member 'FRCNazoBattleLSAAssistData::UnrivalDuration' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAAssistData, bAttacked) == 0x000080, "Member 'FRCNazoBattleLSAAssistData::bAttacked' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSAShinigamiData
// 0x0020 (0x0020 - 0x0000)
struct FRCNazoBattleLSAShinigamiData final
{
public:
	class ARCCharacterRender*                     Shinigami;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotation;                                     // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleLSAShinigamiData) == 0x000008, "Wrong alignment on FRCNazoBattleLSAShinigamiData");
static_assert(sizeof(FRCNazoBattleLSAShinigamiData) == 0x000020, "Wrong size on FRCNazoBattleLSAShinigamiData");
static_assert(offsetof(FRCNazoBattleLSAShinigamiData, Shinigami) == 0x000000, "Member 'FRCNazoBattleLSAShinigamiData::Shinigami' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAShinigamiData, StartLocation) == 0x000008, "Member 'FRCNazoBattleLSAShinigamiData::StartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAShinigamiData, StartRotation) == 0x000014, "Member 'FRCNazoBattleLSAShinigamiData::StartRotation' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleLSAPlayerAttackCollisionSettings
// 0x0040 (0x0040 - 0x0000)
struct FRCNazoBattleLSAPlayerAttackCollisionSettings final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AttachTransform;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleLSAPlayerAttackCollisionSettings) == 0x000010, "Wrong alignment on FRCNazoBattleLSAPlayerAttackCollisionSettings");
static_assert(sizeof(FRCNazoBattleLSAPlayerAttackCollisionSettings) == 0x000040, "Wrong size on FRCNazoBattleLSAPlayerAttackCollisionSettings");
static_assert(offsetof(FRCNazoBattleLSAPlayerAttackCollisionSettings, DelayTime) == 0x000000, "Member 'FRCNazoBattleLSAPlayerAttackCollisionSettings::DelayTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerAttackCollisionSettings, EndTime) == 0x000004, "Member 'FRCNazoBattleLSAPlayerAttackCollisionSettings::EndTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleLSAPlayerAttackCollisionSettings, AttachTransform) == 0x000010, "Member 'FRCNazoBattleLSAPlayerAttackCollisionSettings::AttachTransform' has a wrong offset!");

// ScriptStruct RC.RCNazoBattleRebuttalLetterPrepareData
// 0x0398 (0x0398 - 0x0000)
struct FRCNazoBattleRebuttalLetterPrepareData final
{
public:
	class ARCNazoBattleLevelScriptActor*          BattleLSA;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RebuttalLetterID;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupNo;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         No;                                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         AppearEffectInLp;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         AppearEffectOt;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearEffectSEID;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         DecorationEffect;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      FrontMaterial;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFrontMaterialChangeColor;                         // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      EdgeMaterial;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEdgeMaterialChangeColor;                          // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomColor;                                      // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x005C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EdgeColor;                                         // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         OutEffect;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Out1Effect;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Out2Effect;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Out3Effect;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveCurveAsWorldLocation;                         // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           MoveCurve;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           MoveRotationCurve;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           MoveScaleCurve;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedRate;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccRate;                                           // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowDownSpeed;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowDownAcc;                                       // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowDownDistanceFromTarget;                        // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowDownTime;                                      // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustAvoidCollisionFixedSizeFlag;                  // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                JustAvoidCollisionFixedSize;                       // 0x00DC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JustAvoidCollisionSizeRate;                        // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackDistanceMax;                                 // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackDistanceMin;                                 // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToPlayer;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoBattleRebuttalLetterAspect             Aspect;                                            // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoResizeW;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoResizeMax;                                     // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoResizeMin;                                     // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmbiguous;                                        // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmbiguousKaijinPrevent;                           // 0x010D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIdentifyAmbiguousLetter;                          // 0x010E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReduceIdentifyAmbiguousLetter;                    // 0x010F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepelledSpeed;                                     // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0114(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandZ;                                             // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuriedShadowAlphaRate;                             // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNazoBattleRebuttalLetterSettings    Settings;                                          // 0x0130(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCNazoBattleRebuttalParameters        Parameters;                                        // 0x0208(0x0190)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoBattleRebuttalLetterPrepareData) == 0x000008, "Wrong alignment on FRCNazoBattleRebuttalLetterPrepareData");
static_assert(sizeof(FRCNazoBattleRebuttalLetterPrepareData) == 0x000398, "Wrong size on FRCNazoBattleRebuttalLetterPrepareData");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, BattleLSA) == 0x000000, "Member 'FRCNazoBattleRebuttalLetterPrepareData::BattleLSA' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, RebuttalLetterID) == 0x000008, "Member 'FRCNazoBattleRebuttalLetterPrepareData::RebuttalLetterID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, GroupIndex) == 0x000010, "Member 'FRCNazoBattleRebuttalLetterPrepareData::GroupIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, GroupNo) == 0x000014, "Member 'FRCNazoBattleRebuttalLetterPrepareData::GroupNo' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, Index) == 0x000018, "Member 'FRCNazoBattleRebuttalLetterPrepareData::Index' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, No) == 0x00001C, "Member 'FRCNazoBattleRebuttalLetterPrepareData::No' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, AppearEffectInLp) == 0x000020, "Member 'FRCNazoBattleRebuttalLetterPrepareData::AppearEffectInLp' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, AppearEffectOt) == 0x000028, "Member 'FRCNazoBattleRebuttalLetterPrepareData::AppearEffectOt' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, AppearEffectSEID) == 0x000030, "Member 'FRCNazoBattleRebuttalLetterPrepareData::AppearEffectSEID' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, DecorationEffect) == 0x000038, "Member 'FRCNazoBattleRebuttalLetterPrepareData::DecorationEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, FrontMaterial) == 0x000040, "Member 'FRCNazoBattleRebuttalLetterPrepareData::FrontMaterial' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, bFrontMaterialChangeColor) == 0x000048, "Member 'FRCNazoBattleRebuttalLetterPrepareData::bFrontMaterialChangeColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, EdgeMaterial) == 0x000050, "Member 'FRCNazoBattleRebuttalLetterPrepareData::EdgeMaterial' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, bEdgeMaterialChangeColor) == 0x000058, "Member 'FRCNazoBattleRebuttalLetterPrepareData::bEdgeMaterialChangeColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, bCustomColor) == 0x000059, "Member 'FRCNazoBattleRebuttalLetterPrepareData::bCustomColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, Color) == 0x00005C, "Member 'FRCNazoBattleRebuttalLetterPrepareData::Color' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, EdgeColor) == 0x00006C, "Member 'FRCNazoBattleRebuttalLetterPrepareData::EdgeColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, OutEffect) == 0x000080, "Member 'FRCNazoBattleRebuttalLetterPrepareData::OutEffect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, Out1Effect) == 0x000088, "Member 'FRCNazoBattleRebuttalLetterPrepareData::Out1Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, Out2Effect) == 0x000090, "Member 'FRCNazoBattleRebuttalLetterPrepareData::Out2Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, Out3Effect) == 0x000098, "Member 'FRCNazoBattleRebuttalLetterPrepareData::Out3Effect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, bMoveCurveAsWorldLocation) == 0x0000A0, "Member 'FRCNazoBattleRebuttalLetterPrepareData::bMoveCurveAsWorldLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, MoveCurve) == 0x0000A8, "Member 'FRCNazoBattleRebuttalLetterPrepareData::MoveCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, MoveRotationCurve) == 0x0000B0, "Member 'FRCNazoBattleRebuttalLetterPrepareData::MoveRotationCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, MoveScaleCurve) == 0x0000B8, "Member 'FRCNazoBattleRebuttalLetterPrepareData::MoveScaleCurve' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, SpeedRate) == 0x0000C0, "Member 'FRCNazoBattleRebuttalLetterPrepareData::SpeedRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, AccRate) == 0x0000C4, "Member 'FRCNazoBattleRebuttalLetterPrepareData::AccRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, SlowDownSpeed) == 0x0000C8, "Member 'FRCNazoBattleRebuttalLetterPrepareData::SlowDownSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, SlowDownAcc) == 0x0000CC, "Member 'FRCNazoBattleRebuttalLetterPrepareData::SlowDownAcc' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, SlowDownDistanceFromTarget) == 0x0000D0, "Member 'FRCNazoBattleRebuttalLetterPrepareData::SlowDownDistanceFromTarget' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, SlowDownTime) == 0x0000D4, "Member 'FRCNazoBattleRebuttalLetterPrepareData::SlowDownTime' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, bJustAvoidCollisionFixedSizeFlag) == 0x0000D8, "Member 'FRCNazoBattleRebuttalLetterPrepareData::bJustAvoidCollisionFixedSizeFlag' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, JustAvoidCollisionFixedSize) == 0x0000DC, "Member 'FRCNazoBattleRebuttalLetterPrepareData::JustAvoidCollisionFixedSize' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, JustAvoidCollisionSizeRate) == 0x0000E8, "Member 'FRCNazoBattleRebuttalLetterPrepareData::JustAvoidCollisionSizeRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, AttackDistanceMax) == 0x0000EC, "Member 'FRCNazoBattleRebuttalLetterPrepareData::AttackDistanceMax' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, AttackDistanceMin) == 0x0000F0, "Member 'FRCNazoBattleRebuttalLetterPrepareData::AttackDistanceMin' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, DistanceToPlayer) == 0x0000F4, "Member 'FRCNazoBattleRebuttalLetterPrepareData::DistanceToPlayer' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, OutDistance) == 0x0000F8, "Member 'FRCNazoBattleRebuttalLetterPrepareData::OutDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, Aspect) == 0x0000FC, "Member 'FRCNazoBattleRebuttalLetterPrepareData::Aspect' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, AutoResizeW) == 0x000100, "Member 'FRCNazoBattleRebuttalLetterPrepareData::AutoResizeW' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, AutoResizeMax) == 0x000104, "Member 'FRCNazoBattleRebuttalLetterPrepareData::AutoResizeMax' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, AutoResizeMin) == 0x000108, "Member 'FRCNazoBattleRebuttalLetterPrepareData::AutoResizeMin' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, bAmbiguous) == 0x00010C, "Member 'FRCNazoBattleRebuttalLetterPrepareData::bAmbiguous' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, bAmbiguousKaijinPrevent) == 0x00010D, "Member 'FRCNazoBattleRebuttalLetterPrepareData::bAmbiguousKaijinPrevent' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, bIdentifyAmbiguousLetter) == 0x00010E, "Member 'FRCNazoBattleRebuttalLetterPrepareData::bIdentifyAmbiguousLetter' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, bReduceIdentifyAmbiguousLetter) == 0x00010F, "Member 'FRCNazoBattleRebuttalLetterPrepareData::bReduceIdentifyAmbiguousLetter' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, RepelledSpeed) == 0x000110, "Member 'FRCNazoBattleRebuttalLetterPrepareData::RepelledSpeed' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, ShadowColor) == 0x000114, "Member 'FRCNazoBattleRebuttalLetterPrepareData::ShadowColor' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, LandZ) == 0x000124, "Member 'FRCNazoBattleRebuttalLetterPrepareData::LandZ' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, BuriedShadowAlphaRate) == 0x000128, "Member 'FRCNazoBattleRebuttalLetterPrepareData::BuriedShadowAlphaRate' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, Settings) == 0x000130, "Member 'FRCNazoBattleRebuttalLetterPrepareData::Settings' has a wrong offset!");
static_assert(offsetof(FRCNazoBattleRebuttalLetterPrepareData, Parameters) == 0x000208, "Member 'FRCNazoBattleRebuttalLetterPrepareData::Parameters' has a wrong offset!");

// ScriptStruct RC.RCNazoLevelManageData
// 0x0048 (0x0048 - 0x0000)
struct FRCNazoLevelManageData final
{
public:
	TSoftObjectPtr<class UWorld>                  LevelObject;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreamingDynamic*                 Level;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLevelInstance;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SceneIDs;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoLevelManageData) == 0x000008, "Wrong alignment on FRCNazoLevelManageData");
static_assert(sizeof(FRCNazoLevelManageData) == 0x000048, "Wrong size on FRCNazoLevelManageData");
static_assert(offsetof(FRCNazoLevelManageData, LevelObject) == 0x000000, "Member 'FRCNazoLevelManageData::LevelObject' has a wrong offset!");
static_assert(offsetof(FRCNazoLevelManageData, Level) == 0x000028, "Member 'FRCNazoLevelManageData::Level' has a wrong offset!");
static_assert(offsetof(FRCNazoLevelManageData, bLevelInstance) == 0x000030, "Member 'FRCNazoLevelManageData::bLevelInstance' has a wrong offset!");
static_assert(offsetof(FRCNazoLevelManageData, SceneIDs) == 0x000038, "Member 'FRCNazoLevelManageData::SceneIDs' has a wrong offset!");

// ScriptStruct RC.RCNazoSceneSettingsBG
// 0x0068 (0x0088 - 0x0020)
struct FRCNazoSceneSettingsBG final : public FRCNazoSceneSettingsBase
{
public:
	struct FRCNazoMoveLoopLevelSettingsBG         MoveLoopLevelSettings;                             // 0x0020(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoSceneSettingsBG) == 0x000008, "Wrong alignment on FRCNazoSceneSettingsBG");
static_assert(sizeof(FRCNazoSceneSettingsBG) == 0x000088, "Wrong size on FRCNazoSceneSettingsBG");
static_assert(offsetof(FRCNazoSceneSettingsBG, MoveLoopLevelSettings) == 0x000020, "Member 'FRCNazoSceneSettingsBG::MoveLoopLevelSettings' has a wrong offset!");

// ScriptStruct RC.RCNazoSceneSettings
// 0x0070 (0x0090 - 0x0020)
struct FRCNazoSceneSettings final : public FRCNazoSceneSettingsBase
{
public:
	class FName                                   SceneID;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCNazoMoveLoopLevelSettings           MoveLoopLevelSettings;                             // 0x0028(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bLoadWhenPrevSceneStart;                           // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoSceneSettings) == 0x000008, "Wrong alignment on FRCNazoSceneSettings");
static_assert(sizeof(FRCNazoSceneSettings) == 0x000090, "Wrong size on FRCNazoSceneSettings");
static_assert(offsetof(FRCNazoSceneSettings, SceneID) == 0x000020, "Member 'FRCNazoSceneSettings::SceneID' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettings, MoveLoopLevelSettings) == 0x000028, "Member 'FRCNazoSceneSettings::MoveLoopLevelSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoSceneSettings, bLoadWhenPrevSceneStart) == 0x000088, "Member 'FRCNazoSceneSettings::bLoadWhenPrevSceneStart' has a wrong offset!");

// ScriptStruct RC.RCNazoMapViewerMapListData
// 0x00F0 (0x00F0 - 0x0000)
struct FRCNazoMapViewerMapListData final
{
public:
	TMap<class FName, struct FRCNazoMapSettingsBG> MapList;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FRCNazoMapLevelSettingsBG> MapLevel00List;                                    // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FRCNazoMapLevelSettingsBG> MapLevel01List;                                    // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMapViewerMapListData) == 0x000008, "Wrong alignment on FRCNazoMapViewerMapListData");
static_assert(sizeof(FRCNazoMapViewerMapListData) == 0x0000F0, "Wrong size on FRCNazoMapViewerMapListData");
static_assert(offsetof(FRCNazoMapViewerMapListData, MapList) == 0x000000, "Member 'FRCNazoMapViewerMapListData::MapList' has a wrong offset!");
static_assert(offsetof(FRCNazoMapViewerMapListData, MapLevel00List) == 0x000050, "Member 'FRCNazoMapViewerMapListData::MapLevel00List' has a wrong offset!");
static_assert(offsetof(FRCNazoMapViewerMapListData, MapLevel01List) == 0x0000A0, "Member 'FRCNazoMapViewerMapListData::MapLevel01List' has a wrong offset!");

// ScriptStruct RC.RCNazoMotionViewerMotionData
// 0x0010 (0x0018 - 0x0008)
struct FRCNazoMotionViewerMotionData final : public FTableRowBase
{
public:
	TArray<struct FRCNazoMotionViewerMotionPartData> MotionList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMotionViewerMotionData) == 0x000008, "Wrong alignment on FRCNazoMotionViewerMotionData");
static_assert(sizeof(FRCNazoMotionViewerMotionData) == 0x000018, "Wrong size on FRCNazoMotionViewerMotionData");
static_assert(offsetof(FRCNazoMotionViewerMotionData, MotionList) == 0x000008, "Member 'FRCNazoMotionViewerMotionData::MotionList' has a wrong offset!");

// ScriptStruct RC.RCNazoMotionViewerCharaData
// 0x0038 (0x0040 - 0x0008)
struct FRCNazoMotionViewerCharaData final : public FTableRowBase
{
public:
	struct FSoftObjectPath                        CharaBP;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x18];                                      // 0x0020(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetZ;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMotionViewerCharaData) == 0x000008, "Wrong alignment on FRCNazoMotionViewerCharaData");
static_assert(sizeof(FRCNazoMotionViewerCharaData) == 0x000040, "Wrong size on FRCNazoMotionViewerCharaData");
static_assert(offsetof(FRCNazoMotionViewerCharaData, CharaBP) == 0x000008, "Member 'FRCNazoMotionViewerCharaData::CharaBP' has a wrong offset!");
static_assert(offsetof(FRCNazoMotionViewerCharaData, OffsetZ) == 0x000038, "Member 'FRCNazoMotionViewerCharaData::OffsetZ' has a wrong offset!");
static_assert(offsetof(FRCNazoMotionViewerCharaData, Scale) == 0x00003C, "Member 'FRCNazoMotionViewerCharaData::Scale' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSATalkSettings
// 0x0020 (0x0020 - 0x0000)
struct FRCNazoMoveLoopLSATalkSettings final
{
public:
	ERCNazoMoveLoopTalkType                       TalkType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayBeforeTalk;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAfterTalk;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishMoveLoop;                                   // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoMoveLoopLSATalkSettings) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSATalkSettings");
static_assert(sizeof(FRCNazoMoveLoopLSATalkSettings) == 0x000020, "Wrong size on FRCNazoMoveLoopLSATalkSettings");
static_assert(offsetof(FRCNazoMoveLoopLSATalkSettings, TalkType) == 0x000000, "Member 'FRCNazoMoveLoopLSATalkSettings::TalkType' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATalkSettings, DelayBeforeTalk) == 0x000004, "Member 'FRCNazoMoveLoopLSATalkSettings::DelayBeforeTalk' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATalkSettings, DataTable) == 0x000008, "Member 'FRCNazoMoveLoopLSATalkSettings::DataTable' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATalkSettings, TalkID) == 0x000010, "Member 'FRCNazoMoveLoopLSATalkSettings::TalkID' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATalkSettings, DelayAfterTalk) == 0x000018, "Member 'FRCNazoMoveLoopLSATalkSettings::DelayAfterTalk' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATalkSettings, bFinishMoveLoop) == 0x00001C, "Member 'FRCNazoMoveLoopLSATalkSettings::bFinishMoveLoop' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSATalkData
// 0x0050 (0x0050 - 0x0000)
struct FRCNazoMoveLoopLSATalkData final
{
public:
	ERCNazoMoveLoopLSATalkState                   State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCNazoMoveLoopLSATalkSettings         CurrentTalkSettings;                               // 0x0008(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCNazoMoveLoopLSATalkSettings         NextTalkSettings;                                  // 0x0028(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TextIndex;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoMoveLoopLSATalkData) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSATalkData");
static_assert(sizeof(FRCNazoMoveLoopLSATalkData) == 0x000050, "Wrong size on FRCNazoMoveLoopLSATalkData");
static_assert(offsetof(FRCNazoMoveLoopLSATalkData, State) == 0x000000, "Member 'FRCNazoMoveLoopLSATalkData::State' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATalkData, CurrentTalkSettings) == 0x000008, "Member 'FRCNazoMoveLoopLSATalkData::CurrentTalkSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATalkData, NextTalkSettings) == 0x000028, "Member 'FRCNazoMoveLoopLSATalkData::NextTalkSettings' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSATalkData, TextIndex) == 0x000048, "Member 'FRCNazoMoveLoopLSATalkData::TextIndex' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSACameraData
// 0x0040 (0x0058 - 0x0018)
struct FRCNazoMoveLoopLSACameraData final : public FRCNazoLoopLSACameraData
{
public:
	struct FVector                                LocationOffset;                                    // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CameraBase;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCCineCameraActor*                     Camera;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevLocationOffset;                                // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PrevCameraBase;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCCineCameraActor*                     PrevCamera;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMoveLoopLSACameraData) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSACameraData");
static_assert(sizeof(FRCNazoMoveLoopLSACameraData) == 0x000058, "Wrong size on FRCNazoMoveLoopLSACameraData");
static_assert(offsetof(FRCNazoMoveLoopLSACameraData, LocationOffset) == 0x000018, "Member 'FRCNazoMoveLoopLSACameraData::LocationOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSACameraData, CameraBase) == 0x000028, "Member 'FRCNazoMoveLoopLSACameraData::CameraBase' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSACameraData, Camera) == 0x000030, "Member 'FRCNazoMoveLoopLSACameraData::Camera' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSACameraData, PrevLocationOffset) == 0x000038, "Member 'FRCNazoMoveLoopLSACameraData::PrevLocationOffset' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSACameraData, PrevCameraBase) == 0x000048, "Member 'FRCNazoMoveLoopLSACameraData::PrevCameraBase' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSACameraData, PrevCamera) == 0x000050, "Member 'FRCNazoMoveLoopLSACameraData::PrevCamera' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSATileData
// 0x0008 (0x0070 - 0x0068)
struct FRCNazoMoveLoopLSATileData final : public FRCNazoLoopLSATileData
{
public:
	int32                                         Weight;                                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoMoveLoopLSATileData) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSATileData");
static_assert(sizeof(FRCNazoMoveLoopLSATileData) == 0x000070, "Wrong size on FRCNazoMoveLoopLSATileData");
static_assert(offsetof(FRCNazoMoveLoopLSATileData, Weight) == 0x000068, "Member 'FRCNazoMoveLoopLSATileData::Weight' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSALaneData
// 0x00C0 (0x00C0 - 0x0000)
struct FRCNazoMoveLoopLSALaneData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCNazoMoveLoopLSATileData>     TileDataArray;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CurrentTileDataIndexArray;                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      RandomTileDataIndexMap;                            // 0x0028(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           FreeRandomTileIDArray;                             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                LoopDistance;                                      // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveDirection;                                     // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveEndLocation;                                   // 0x00AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeadTileIndex;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarp;                                             // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoMoveLoopLSALaneData) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSALaneData");
static_assert(sizeof(FRCNazoMoveLoopLSALaneData) == 0x0000C0, "Wrong size on FRCNazoMoveLoopLSALaneData");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, TileDataArray) == 0x000008, "Member 'FRCNazoMoveLoopLSALaneData::TileDataArray' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, CurrentTileDataIndexArray) == 0x000018, "Member 'FRCNazoMoveLoopLSALaneData::CurrentTileDataIndexArray' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, RandomTileDataIndexMap) == 0x000028, "Member 'FRCNazoMoveLoopLSALaneData::RandomTileDataIndexMap' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, FreeRandomTileIDArray) == 0x000078, "Member 'FRCNazoMoveLoopLSALaneData::FreeRandomTileIDArray' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, LoopDistance) == 0x000088, "Member 'FRCNazoMoveLoopLSALaneData::LoopDistance' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, StartLocation) == 0x000094, "Member 'FRCNazoMoveLoopLSALaneData::StartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, MoveDirection) == 0x0000A0, "Member 'FRCNazoMoveLoopLSALaneData::MoveDirection' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, MoveEndLocation) == 0x0000AC, "Member 'FRCNazoMoveLoopLSALaneData::MoveEndLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, HeadTileIndex) == 0x0000B8, "Member 'FRCNazoMoveLoopLSALaneData::HeadTileIndex' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALaneData, bWarp) == 0x0000BC, "Member 'FRCNazoMoveLoopLSALaneData::bWarp' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSALevelData
// 0x0028 (0x0028 - 0x0000)
struct FRCNazoMoveLoopLSALevelData final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCNazoMoveLoopLSALaneSettings> LaneSettingsArray;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCNazoMoveLoopLSALaneData>     LaneDataArray;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMoveLoopLSALevelData) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSALevelData");
static_assert(sizeof(FRCNazoMoveLoopLSALevelData) == 0x000028, "Wrong size on FRCNazoMoveLoopLSALevelData");
static_assert(offsetof(FRCNazoMoveLoopLSALevelData, bReverse) == 0x000000, "Member 'FRCNazoMoveLoopLSALevelData::bReverse' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALevelData, LaneSettingsArray) == 0x000008, "Member 'FRCNazoMoveLoopLSALevelData::LaneSettingsArray' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALevelData, LaneDataArray) == 0x000018, "Member 'FRCNazoMoveLoopLSALevelData::LaneDataArray' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSALevelSettings
// 0x0048 (0x0048 - 0x0000)
struct FRCNazoMoveLoopLSALevelSettings final
{
public:
	TArray<class FName>                           DefaultTileTagArray;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCNazoMoveLoopLSARandomTileSettings> RandomTileSettingsArray;                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RandomTileRate;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LoopStartLocation;                                 // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LoopEndLocation;                                   // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CenterTileIndex;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoMoveLoopLSALevelSettings) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSALevelSettings");
static_assert(sizeof(FRCNazoMoveLoopLSALevelSettings) == 0x000048, "Wrong size on FRCNazoMoveLoopLSALevelSettings");
static_assert(offsetof(FRCNazoMoveLoopLSALevelSettings, DefaultTileTagArray) == 0x000000, "Member 'FRCNazoMoveLoopLSALevelSettings::DefaultTileTagArray' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALevelSettings, RandomTileSettingsArray) == 0x000010, "Member 'FRCNazoMoveLoopLSALevelSettings::RandomTileSettingsArray' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALevelSettings, RandomTileRate) == 0x000020, "Member 'FRCNazoMoveLoopLSALevelSettings::RandomTileRate' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALevelSettings, LoopStartLocation) == 0x000024, "Member 'FRCNazoMoveLoopLSALevelSettings::LoopStartLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALevelSettings, LoopEndLocation) == 0x000030, "Member 'FRCNazoMoveLoopLSALevelSettings::LoopEndLocation' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALevelSettings, bReverse) == 0x00003C, "Member 'FRCNazoMoveLoopLSALevelSettings::bReverse' has a wrong offset!");
static_assert(offsetof(FRCNazoMoveLoopLSALevelSettings, CenterTileIndex) == 0x000040, "Member 'FRCNazoMoveLoopLSALevelSettings::CenterTileIndex' has a wrong offset!");

// ScriptStruct RC.RCNazoMoveLoopLSASettings
// 0x0048 (0x0050 - 0x0008)
struct FRCNazoMoveLoopLSASettings final : public FTableRowBase
{
public:
	struct FRCNazoMoveLoopLSALevelSettings        LevelSettings;                                     // 0x0008(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNazoMoveLoopLSASettings) == 0x000008, "Wrong alignment on FRCNazoMoveLoopLSASettings");
static_assert(sizeof(FRCNazoMoveLoopLSASettings) == 0x000050, "Wrong size on FRCNazoMoveLoopLSASettings");
static_assert(offsetof(FRCNazoMoveLoopLSASettings, LevelSettings) == 0x000008, "Member 'FRCNazoMoveLoopLSASettings::LevelSettings' has a wrong offset!");

// ScriptStruct RC.RCNazoPlayableLoopLSABehindWallData
// 0x0028 (0x0028 - 0x0000)
struct FRCNazoPlayableLoopLSABehindWallData final
{
public:
	TArray<struct FRCNazoPlayableLoopLSASequencerData> SequencerDataArray;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentSequencerIndex;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x14];                                      // 0x0014(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoPlayableLoopLSABehindWallData) == 0x000008, "Wrong alignment on FRCNazoPlayableLoopLSABehindWallData");
static_assert(sizeof(FRCNazoPlayableLoopLSABehindWallData) == 0x000028, "Wrong size on FRCNazoPlayableLoopLSABehindWallData");
static_assert(offsetof(FRCNazoPlayableLoopLSABehindWallData, SequencerDataArray) == 0x000000, "Member 'FRCNazoPlayableLoopLSABehindWallData::SequencerDataArray' has a wrong offset!");
static_assert(offsetof(FRCNazoPlayableLoopLSABehindWallData, CurrentSequencerIndex) == 0x000010, "Member 'FRCNazoPlayableLoopLSABehindWallData::CurrentSequencerIndex' has a wrong offset!");

// ScriptStruct RC.RCNazoPlayableLoopLSAFollowerData
// 0x0010 (0x0050 - 0x0040)
struct FRCNazoPlayableLoopLSAFollowerData final : public FRCNazoLoopLSAFollowerData
{
public:
	struct FVector                                PlayerPrevLocation;                                // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNazoPlayableLoopLSAFollowerData) == 0x000008, "Wrong alignment on FRCNazoPlayableLoopLSAFollowerData");
static_assert(sizeof(FRCNazoPlayableLoopLSAFollowerData) == 0x000050, "Wrong size on FRCNazoPlayableLoopLSAFollowerData");
static_assert(offsetof(FRCNazoPlayableLoopLSAFollowerData, PlayerPrevLocation) == 0x000040, "Member 'FRCNazoPlayableLoopLSAFollowerData::PlayerPrevLocation' has a wrong offset!");

// ScriptStruct RC.RCNazoPlayableLoopLSAPlayerData
// 0x0000 (0x0048 - 0x0048)
struct FRCNazoPlayableLoopLSAPlayerData final : public FRCNazoLoopLSAPlayerData
{
};
static_assert(alignof(FRCNazoPlayableLoopLSAPlayerData) == 0x000008, "Wrong alignment on FRCNazoPlayableLoopLSAPlayerData");
static_assert(sizeof(FRCNazoPlayableLoopLSAPlayerData) == 0x000048, "Wrong size on FRCNazoPlayableLoopLSAPlayerData");

// ScriptStruct RC.RCNzCriminalcameraSettingData
// 0x0020 (0x0020 - 0x0000)
struct FRCNzCriminalcameraSettingData final
{
public:
	TArray<float>                                 CameraBlendTime;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CameraFocalLength;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNzCriminalcameraSettingData) == 0x000008, "Wrong alignment on FRCNzCriminalcameraSettingData");
static_assert(sizeof(FRCNzCriminalcameraSettingData) == 0x000020, "Wrong size on FRCNzCriminalcameraSettingData");
static_assert(offsetof(FRCNzCriminalcameraSettingData, CameraBlendTime) == 0x000000, "Member 'FRCNzCriminalcameraSettingData::CameraBlendTime' has a wrong offset!");
static_assert(offsetof(FRCNzCriminalcameraSettingData, CameraFocalLength) == 0x000010, "Member 'FRCNzCriminalcameraSettingData::CameraFocalLength' has a wrong offset!");

// ScriptStruct RC.RCSuspectCharacterData
// 0x0050 (0x0050 - 0x0000)
struct FRCSuspectCharacterData final
{
public:
	class FName                                   CharacterId;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterNameTextId;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LineTextId;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacialName;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LineVoiceId;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FailureLineTextId;                                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FailureFacialName;                                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FailureMotionName;                                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FailureLineVoiceId;                                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSuspectCharacterData) == 0x000004, "Wrong alignment on FRCSuspectCharacterData");
static_assert(sizeof(FRCSuspectCharacterData) == 0x000050, "Wrong size on FRCSuspectCharacterData");
static_assert(offsetof(FRCSuspectCharacterData, CharacterId) == 0x000000, "Member 'FRCSuspectCharacterData::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCSuspectCharacterData, CharacterNameTextId) == 0x000008, "Member 'FRCSuspectCharacterData::CharacterNameTextId' has a wrong offset!");
static_assert(offsetof(FRCSuspectCharacterData, LineTextId) == 0x000010, "Member 'FRCSuspectCharacterData::LineTextId' has a wrong offset!");
static_assert(offsetof(FRCSuspectCharacterData, FacialName) == 0x000018, "Member 'FRCSuspectCharacterData::FacialName' has a wrong offset!");
static_assert(offsetof(FRCSuspectCharacterData, MotionName) == 0x000020, "Member 'FRCSuspectCharacterData::MotionName' has a wrong offset!");
static_assert(offsetof(FRCSuspectCharacterData, LineVoiceId) == 0x000028, "Member 'FRCSuspectCharacterData::LineVoiceId' has a wrong offset!");
static_assert(offsetof(FRCSuspectCharacterData, FailureLineTextId) == 0x000030, "Member 'FRCSuspectCharacterData::FailureLineTextId' has a wrong offset!");
static_assert(offsetof(FRCSuspectCharacterData, FailureFacialName) == 0x000038, "Member 'FRCSuspectCharacterData::FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCSuspectCharacterData, FailureMotionName) == 0x000040, "Member 'FRCSuspectCharacterData::FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCSuspectCharacterData, FailureLineVoiceId) == 0x000048, "Member 'FRCSuspectCharacterData::FailureLineVoiceId' has a wrong offset!");

// ScriptStruct RC.RCNzFinaleGameIDListData
// 0x0010 (0x0010 - 0x0000)
struct FRCNzFinaleGameIDListData final
{
public:
	TArray<class FName>                           IdList;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNzFinaleGameIDListData) == 0x000008, "Wrong alignment on FRCNzFinaleGameIDListData");
static_assert(sizeof(FRCNzFinaleGameIDListData) == 0x000010, "Wrong size on FRCNzFinaleGameIDListData");
static_assert(offsetof(FRCNzFinaleGameIDListData, IdList) == 0x000000, "Member 'FRCNzFinaleGameIDListData::IdList' has a wrong offset!");

// ScriptStruct RC.RCNzUiBattleGameOverSelectData
// 0x0018 (0x0018 - 0x0000)
struct FRCNzUiBattleGameOverSelectData final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheck;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CheckTextID;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckSelect;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckFocusTrue;                                   // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptCancel;                                     // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNzUiBattleGameOverSelectData) == 0x000004, "Wrong alignment on FRCNzUiBattleGameOverSelectData");
static_assert(sizeof(FRCNzUiBattleGameOverSelectData) == 0x000018, "Wrong size on FRCNzUiBattleGameOverSelectData");
static_assert(offsetof(FRCNzUiBattleGameOverSelectData, TextID) == 0x000000, "Member 'FRCNzUiBattleGameOverSelectData::TextID' has a wrong offset!");
static_assert(offsetof(FRCNzUiBattleGameOverSelectData, bCheck) == 0x000008, "Member 'FRCNzUiBattleGameOverSelectData::bCheck' has a wrong offset!");
static_assert(offsetof(FRCNzUiBattleGameOverSelectData, CheckTextID) == 0x00000C, "Member 'FRCNzUiBattleGameOverSelectData::CheckTextID' has a wrong offset!");
static_assert(offsetof(FRCNzUiBattleGameOverSelectData, bCheckSelect) == 0x000014, "Member 'FRCNzUiBattleGameOverSelectData::bCheckSelect' has a wrong offset!");
static_assert(offsetof(FRCNzUiBattleGameOverSelectData, bCheckFocusTrue) == 0x000015, "Member 'FRCNzUiBattleGameOverSelectData::bCheckFocusTrue' has a wrong offset!");
static_assert(offsetof(FRCNzUiBattleGameOverSelectData, bAcceptCancel) == 0x000016, "Member 'FRCNzUiBattleGameOverSelectData::bAcceptCancel' has a wrong offset!");

// ScriptStruct RC.RCNzUiFinaleInteractImgInfo
// 0x0018 (0x0018 - 0x0000)
struct FRCNzUiFinaleInteractImgInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Img;                                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPick;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCNzUiFinaleInteractImgInfo) == 0x000008, "Wrong alignment on FRCNzUiFinaleInteractImgInfo");
static_assert(sizeof(FRCNzUiFinaleInteractImgInfo) == 0x000018, "Wrong size on FRCNzUiFinaleInteractImgInfo");
static_assert(offsetof(FRCNzUiFinaleInteractImgInfo, ID) == 0x000000, "Member 'FRCNzUiFinaleInteractImgInfo::ID' has a wrong offset!");
static_assert(offsetof(FRCNzUiFinaleInteractImgInfo, Img) == 0x000008, "Member 'FRCNzUiFinaleInteractImgInfo::Img' has a wrong offset!");
static_assert(offsetof(FRCNzUiFinaleInteractImgInfo, isPick) == 0x000010, "Member 'FRCNzUiFinaleInteractImgInfo::isPick' has a wrong offset!");

// ScriptStruct RC.RCParamAchievementTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamAchievementTableRow final : public FTableRowBase
{
public:
	class FName                                   AchievementID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OperationID;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamAchievementTableRow) == 0x000008, "Wrong alignment on FRCParamAchievementTableRow");
static_assert(sizeof(FRCParamAchievementTableRow) == 0x000020, "Wrong size on FRCParamAchievementTableRow");
static_assert(offsetof(FRCParamAchievementTableRow, AchievementID) == 0x000008, "Member 'FRCParamAchievementTableRow::AchievementID' has a wrong offset!");
static_assert(offsetof(FRCParamAchievementTableRow, OperationID) == 0x000010, "Member 'FRCParamAchievementTableRow::OperationID' has a wrong offset!");
static_assert(offsetof(FRCParamAchievementTableRow, Num) == 0x000018, "Member 'FRCParamAchievementTableRow::Num' has a wrong offset!");

// ScriptStruct RC.RCParamAttachmentFormListTableRow
// 0x0108 (0x0110 - 0x0008)
struct FRCParamAttachmentFormListTableRow final : public FTableRowBase
{
public:
	class FName                                   AttachmentFormId;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverheadAttachmentId;                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverheadOffsetX;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverheadOffsetY;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverheadOffsetZ;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HeadAttachmentId;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadOffsetX;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadOffsetY;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadOffsetZ;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EyeAttachmentId;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeOffsetX;                                        // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeOffsetY;                                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeOffsetZ;                                        // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MouthAttachmentId;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouthOffsetX;                                      // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouthOffsetY;                                      // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouthOffsetZ;                                      // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Hand_RAttachmentId;                                // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hand_ROffsetX;                                     // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hand_ROffsetY;                                     // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hand_ROffsetZ;                                     // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Hand_LAttachmentId;                                // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hand_LOffsetX;                                     // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hand_LOffsetY;                                     // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hand_LOffsetZ;                                     // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpineAttachmentId;                                 // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpineOffsetX;                                      // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpineOffsetY;                                      // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpineOffsetZ;                                      // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PelvisAttachmentId;                                // 0x00F0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisOffsetX;                                     // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisOffsetY;                                     // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisOffsetZ;                                     // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamAttachmentFormListTableRow) == 0x000008, "Wrong alignment on FRCParamAttachmentFormListTableRow");
static_assert(sizeof(FRCParamAttachmentFormListTableRow) == 0x000110, "Wrong size on FRCParamAttachmentFormListTableRow");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, AttachmentFormId) == 0x000008, "Member 'FRCParamAttachmentFormListTableRow::AttachmentFormId' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, OverheadAttachmentId) == 0x000010, "Member 'FRCParamAttachmentFormListTableRow::OverheadAttachmentId' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, OverheadOffsetX) == 0x000020, "Member 'FRCParamAttachmentFormListTableRow::OverheadOffsetX' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, OverheadOffsetY) == 0x000024, "Member 'FRCParamAttachmentFormListTableRow::OverheadOffsetY' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, OverheadOffsetZ) == 0x000028, "Member 'FRCParamAttachmentFormListTableRow::OverheadOffsetZ' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, HeadAttachmentId) == 0x000030, "Member 'FRCParamAttachmentFormListTableRow::HeadAttachmentId' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, HeadOffsetX) == 0x000040, "Member 'FRCParamAttachmentFormListTableRow::HeadOffsetX' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, HeadOffsetY) == 0x000044, "Member 'FRCParamAttachmentFormListTableRow::HeadOffsetY' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, HeadOffsetZ) == 0x000048, "Member 'FRCParamAttachmentFormListTableRow::HeadOffsetZ' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, EyeAttachmentId) == 0x000050, "Member 'FRCParamAttachmentFormListTableRow::EyeAttachmentId' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, EyeOffsetX) == 0x000060, "Member 'FRCParamAttachmentFormListTableRow::EyeOffsetX' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, EyeOffsetY) == 0x000064, "Member 'FRCParamAttachmentFormListTableRow::EyeOffsetY' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, EyeOffsetZ) == 0x000068, "Member 'FRCParamAttachmentFormListTableRow::EyeOffsetZ' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, MouthAttachmentId) == 0x000070, "Member 'FRCParamAttachmentFormListTableRow::MouthAttachmentId' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, MouthOffsetX) == 0x000080, "Member 'FRCParamAttachmentFormListTableRow::MouthOffsetX' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, MouthOffsetY) == 0x000084, "Member 'FRCParamAttachmentFormListTableRow::MouthOffsetY' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, MouthOffsetZ) == 0x000088, "Member 'FRCParamAttachmentFormListTableRow::MouthOffsetZ' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, Hand_RAttachmentId) == 0x000090, "Member 'FRCParamAttachmentFormListTableRow::Hand_RAttachmentId' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, Hand_ROffsetX) == 0x0000A0, "Member 'FRCParamAttachmentFormListTableRow::Hand_ROffsetX' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, Hand_ROffsetY) == 0x0000A4, "Member 'FRCParamAttachmentFormListTableRow::Hand_ROffsetY' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, Hand_ROffsetZ) == 0x0000A8, "Member 'FRCParamAttachmentFormListTableRow::Hand_ROffsetZ' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, Hand_LAttachmentId) == 0x0000B0, "Member 'FRCParamAttachmentFormListTableRow::Hand_LAttachmentId' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, Hand_LOffsetX) == 0x0000C0, "Member 'FRCParamAttachmentFormListTableRow::Hand_LOffsetX' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, Hand_LOffsetY) == 0x0000C4, "Member 'FRCParamAttachmentFormListTableRow::Hand_LOffsetY' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, Hand_LOffsetZ) == 0x0000C8, "Member 'FRCParamAttachmentFormListTableRow::Hand_LOffsetZ' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, SpineAttachmentId) == 0x0000D0, "Member 'FRCParamAttachmentFormListTableRow::SpineAttachmentId' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, SpineOffsetX) == 0x0000E0, "Member 'FRCParamAttachmentFormListTableRow::SpineOffsetX' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, SpineOffsetY) == 0x0000E4, "Member 'FRCParamAttachmentFormListTableRow::SpineOffsetY' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, SpineOffsetZ) == 0x0000E8, "Member 'FRCParamAttachmentFormListTableRow::SpineOffsetZ' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, PelvisAttachmentId) == 0x0000F0, "Member 'FRCParamAttachmentFormListTableRow::PelvisAttachmentId' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, PelvisOffsetX) == 0x000100, "Member 'FRCParamAttachmentFormListTableRow::PelvisOffsetX' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, PelvisOffsetY) == 0x000104, "Member 'FRCParamAttachmentFormListTableRow::PelvisOffsetY' has a wrong offset!");
static_assert(offsetof(FRCParamAttachmentFormListTableRow, PelvisOffsetZ) == 0x000108, "Member 'FRCParamAttachmentFormListTableRow::PelvisOffsetZ' has a wrong offset!");

// ScriptStruct RC.RCParamBgListTableRow
// 0x0058 (0x0060 - 0x0008)
struct FRCParamBgListTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BgName;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterMaterialID;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FaceFilterID;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FogID;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraID;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerMoveType;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaNameID;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MinimapID;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DrawLayerName;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamBgListTableRow) == 0x000008, "Wrong alignment on FRCParamBgListTableRow");
static_assert(sizeof(FRCParamBgListTableRow) == 0x000060, "Wrong size on FRCParamBgListTableRow");
static_assert(offsetof(FRCParamBgListTableRow, MapID) == 0x000008, "Member 'FRCParamBgListTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListTableRow, BgName) == 0x000010, "Member 'FRCParamBgListTableRow::BgName' has a wrong offset!");
static_assert(offsetof(FRCParamBgListTableRow, CharacterMaterialID) == 0x000020, "Member 'FRCParamBgListTableRow::CharacterMaterialID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListTableRow, FaceFilterID) == 0x000028, "Member 'FRCParamBgListTableRow::FaceFilterID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListTableRow, FogID) == 0x000030, "Member 'FRCParamBgListTableRow::FogID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListTableRow, CameraID) == 0x000038, "Member 'FRCParamBgListTableRow::CameraID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListTableRow, PlayerMoveType) == 0x000040, "Member 'FRCParamBgListTableRow::PlayerMoveType' has a wrong offset!");
static_assert(offsetof(FRCParamBgListTableRow, AreaNameID) == 0x000048, "Member 'FRCParamBgListTableRow::AreaNameID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListTableRow, MinimapID) == 0x000050, "Member 'FRCParamBgListTableRow::MinimapID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListTableRow, DrawLayerName) == 0x000058, "Member 'FRCParamBgListTableRow::DrawLayerName' has a wrong offset!");

// ScriptStruct RC.RCParamBgListL01TableRow
// 0x0058 (0x0060 - 0x0008)
struct FRCParamBgListL01TableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BgName;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterMaterialID;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FaceFilterID;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FogID;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraID;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerMoveType;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaNameID;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MinimapID;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DrawLayerName;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamBgListL01TableRow) == 0x000008, "Wrong alignment on FRCParamBgListL01TableRow");
static_assert(sizeof(FRCParamBgListL01TableRow) == 0x000060, "Wrong size on FRCParamBgListL01TableRow");
static_assert(offsetof(FRCParamBgListL01TableRow, MapID) == 0x000008, "Member 'FRCParamBgListL01TableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL01TableRow, BgName) == 0x000010, "Member 'FRCParamBgListL01TableRow::BgName' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL01TableRow, CharacterMaterialID) == 0x000020, "Member 'FRCParamBgListL01TableRow::CharacterMaterialID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL01TableRow, FaceFilterID) == 0x000028, "Member 'FRCParamBgListL01TableRow::FaceFilterID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL01TableRow, FogID) == 0x000030, "Member 'FRCParamBgListL01TableRow::FogID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL01TableRow, CameraID) == 0x000038, "Member 'FRCParamBgListL01TableRow::CameraID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL01TableRow, PlayerMoveType) == 0x000040, "Member 'FRCParamBgListL01TableRow::PlayerMoveType' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL01TableRow, AreaNameID) == 0x000048, "Member 'FRCParamBgListL01TableRow::AreaNameID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL01TableRow, MinimapID) == 0x000050, "Member 'FRCParamBgListL01TableRow::MinimapID' has a wrong offset!");
static_assert(offsetof(FRCParamBgListL01TableRow, DrawLayerName) == 0x000058, "Member 'FRCParamBgListL01TableRow::DrawLayerName' has a wrong offset!");

// ScriptStruct RC.RCParamButtonGuideListTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamButtonGuideListTableRow final : public FTableRowBase
{
public:
	class FName                                   Mode;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ERCInputKeyType>                       KeyType;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  IsNotWithVector;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ButtonGuideNameID;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamButtonGuideListTableRow) == 0x000008, "Wrong alignment on FRCParamButtonGuideListTableRow");
static_assert(sizeof(FRCParamButtonGuideListTableRow) == 0x000040, "Wrong size on FRCParamButtonGuideListTableRow");
static_assert(offsetof(FRCParamButtonGuideListTableRow, Mode) == 0x000008, "Member 'FRCParamButtonGuideListTableRow::Mode' has a wrong offset!");
static_assert(offsetof(FRCParamButtonGuideListTableRow, KeyType) == 0x000010, "Member 'FRCParamButtonGuideListTableRow::KeyType' has a wrong offset!");
static_assert(offsetof(FRCParamButtonGuideListTableRow, IsNotWithVector) == 0x000020, "Member 'FRCParamButtonGuideListTableRow::IsNotWithVector' has a wrong offset!");
static_assert(offsetof(FRCParamButtonGuideListTableRow, ButtonGuideNameID) == 0x000030, "Member 'FRCParamButtonGuideListTableRow::ButtonGuideNameID' has a wrong offset!");

// ScriptStruct RC.RCParamChapterNameTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamChapterNameTableRow final : public FTableRowBase
{
public:
	int32                                         ChapterNumber;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterNumberID;                                   // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterTextID;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamChapterNameTableRow) == 0x000008, "Wrong alignment on FRCParamChapterNameTableRow");
static_assert(sizeof(FRCParamChapterNameTableRow) == 0x000020, "Wrong size on FRCParamChapterNameTableRow");
static_assert(offsetof(FRCParamChapterNameTableRow, ChapterNumber) == 0x000008, "Member 'FRCParamChapterNameTableRow::ChapterNumber' has a wrong offset!");
static_assert(offsetof(FRCParamChapterNameTableRow, ChapterNumberID) == 0x00000C, "Member 'FRCParamChapterNameTableRow::ChapterNumberID' has a wrong offset!");
static_assert(offsetof(FRCParamChapterNameTableRow, ChapterTextID) == 0x000014, "Member 'FRCParamChapterNameTableRow::ChapterTextID' has a wrong offset!");

// ScriptStruct RC.RCParamChapterSelectDialogTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamChapterSelectDialogTableRow final : public FTableRowBase
{
public:
	TArray<class FName>                           DialogSelectText;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InstallingDialog;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamChapterSelectDialogTableRow) == 0x000008, "Wrong alignment on FRCParamChapterSelectDialogTableRow");
static_assert(sizeof(FRCParamChapterSelectDialogTableRow) == 0x000020, "Wrong size on FRCParamChapterSelectDialogTableRow");
static_assert(offsetof(FRCParamChapterSelectDialogTableRow, DialogSelectText) == 0x000008, "Member 'FRCParamChapterSelectDialogTableRow::DialogSelectText' has a wrong offset!");
static_assert(offsetof(FRCParamChapterSelectDialogTableRow, InstallingDialog) == 0x000018, "Member 'FRCParamChapterSelectDialogTableRow::InstallingDialog' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterCategoryListTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamCharacterCategoryListTableRow final : public FTableRowBase
{
public:
	class FName                                   CharacterCategoryID;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterCategoryListTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterCategoryListTableRow");
static_assert(sizeof(FRCParamCharacterCategoryListTableRow) == 0x000018, "Wrong size on FRCParamCharacterCategoryListTableRow");
static_assert(offsetof(FRCParamCharacterCategoryListTableRow, CharacterCategoryID) == 0x000008, "Member 'FRCParamCharacterCategoryListTableRow::CharacterCategoryID' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterCategoryListTableRow, TextID) == 0x000010, "Member 'FRCParamCharacterCategoryListTableRow::TextID' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterDlcListTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamCharacterDlcListTableRow final : public FTableRowBase
{
public:
	class FName                                   CharacterId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DlcType;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterDlcListTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterDlcListTableRow");
static_assert(sizeof(FRCParamCharacterDlcListTableRow) == 0x000018, "Wrong size on FRCParamCharacterDlcListTableRow");
static_assert(offsetof(FRCParamCharacterDlcListTableRow, CharacterId) == 0x000008, "Member 'FRCParamCharacterDlcListTableRow::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterDlcListTableRow, DlcType) == 0x000010, "Member 'FRCParamCharacterDlcListTableRow::DlcType' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterInfoListTableRow
// 0x00C0 (0x00C8 - 0x0008)
struct FRCParamCharacterInfoListTableRow final : public FTableRowBase
{
public:
	class FName                                   CharacterId;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterCategoryID;                               // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AliveType;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDeadEvent;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Scene;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureIDIcon;                                     // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterIDActor;                                  // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterViewerModel0Id;                           // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterViewerModel1Id;                           // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterViewerModel2Id;                           // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDName0;                                       // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDName1;                                       // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDHeight;                                      // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDWeight;                                      // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDBlood;                                       // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDBarthday;                                    // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDFavorite;                                    // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDHate;                                        // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDTitle;                                       // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDExistence;                                   // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDAbility;                                     // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDGrimAbility;                                 // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDSpecialSkill;                                // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDIntroduction;                                // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamCharacterInfoListTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterInfoListTableRow");
static_assert(sizeof(FRCParamCharacterInfoListTableRow) == 0x0000C8, "Wrong size on FRCParamCharacterInfoListTableRow");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, CharacterId) == 0x000008, "Member 'FRCParamCharacterInfoListTableRow::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, Phase) == 0x000010, "Member 'FRCParamCharacterInfoListTableRow::Phase' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, CharacterCategoryID) == 0x000014, "Member 'FRCParamCharacterInfoListTableRow::CharacterCategoryID' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, AliveType) == 0x00001C, "Member 'FRCParamCharacterInfoListTableRow::AliveType' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, PlayDeadEvent) == 0x000020, "Member 'FRCParamCharacterInfoListTableRow::PlayDeadEvent' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, Chapter) == 0x000024, "Member 'FRCParamCharacterInfoListTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, Scene) == 0x000028, "Member 'FRCParamCharacterInfoListTableRow::Scene' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextureIDIcon) == 0x00002C, "Member 'FRCParamCharacterInfoListTableRow::TextureIDIcon' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, CharacterIDActor) == 0x000034, "Member 'FRCParamCharacterInfoListTableRow::CharacterIDActor' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, CharacterViewerModel0Id) == 0x00003C, "Member 'FRCParamCharacterInfoListTableRow::CharacterViewerModel0Id' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, CharacterViewerModel1Id) == 0x000044, "Member 'FRCParamCharacterInfoListTableRow::CharacterViewerModel1Id' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, CharacterViewerModel2Id) == 0x00004C, "Member 'FRCParamCharacterInfoListTableRow::CharacterViewerModel2Id' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDName0) == 0x000054, "Member 'FRCParamCharacterInfoListTableRow::TextIDName0' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDName1) == 0x00005C, "Member 'FRCParamCharacterInfoListTableRow::TextIDName1' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDHeight) == 0x000064, "Member 'FRCParamCharacterInfoListTableRow::TextIDHeight' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDWeight) == 0x00006C, "Member 'FRCParamCharacterInfoListTableRow::TextIDWeight' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDBlood) == 0x000074, "Member 'FRCParamCharacterInfoListTableRow::TextIDBlood' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDBarthday) == 0x00007C, "Member 'FRCParamCharacterInfoListTableRow::TextIDBarthday' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDFavorite) == 0x000084, "Member 'FRCParamCharacterInfoListTableRow::TextIDFavorite' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDHate) == 0x00008C, "Member 'FRCParamCharacterInfoListTableRow::TextIDHate' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDTitle) == 0x000094, "Member 'FRCParamCharacterInfoListTableRow::TextIDTitle' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDExistence) == 0x00009C, "Member 'FRCParamCharacterInfoListTableRow::TextIDExistence' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDAbility) == 0x0000A4, "Member 'FRCParamCharacterInfoListTableRow::TextIDAbility' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDGrimAbility) == 0x0000AC, "Member 'FRCParamCharacterInfoListTableRow::TextIDGrimAbility' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDSpecialSkill) == 0x0000B4, "Member 'FRCParamCharacterInfoListTableRow::TextIDSpecialSkill' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterInfoListTableRow, TextIDIntroduction) == 0x0000BC, "Member 'FRCParamCharacterInfoListTableRow::TextIDIntroduction' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterMaterialListTableRow
// 0x0040 (0x0048 - 0x0008)
struct FRCParamCharacterMaterialListTableRow final : public FTableRowBase
{
public:
	class FName                                   CharacterMaterialID;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainIntensity;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetIntensity;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetDurationSec;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientColor_R;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientColor_G;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientColor_B;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalColor_R;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalColor_G;                                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalColor_B;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialDurationSec;                               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShinigamiEmissiveIntensity;                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShinigamiTranslucent;                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShinigamiEmissiveDurationSec;                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamCharacterMaterialListTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterMaterialListTableRow");
static_assert(sizeof(FRCParamCharacterMaterialListTableRow) == 0x000048, "Wrong size on FRCParamCharacterMaterialListTableRow");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, CharacterMaterialID) == 0x000008, "Member 'FRCParamCharacterMaterialListTableRow::CharacterMaterialID' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, RainIntensity) == 0x000010, "Member 'FRCParamCharacterMaterialListTableRow::RainIntensity' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, WetIntensity) == 0x000014, "Member 'FRCParamCharacterMaterialListTableRow::WetIntensity' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, WetDurationSec) == 0x000018, "Member 'FRCParamCharacterMaterialListTableRow::WetDurationSec' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, AmbientColor_R) == 0x00001C, "Member 'FRCParamCharacterMaterialListTableRow::AmbientColor_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, AmbientColor_G) == 0x000020, "Member 'FRCParamCharacterMaterialListTableRow::AmbientColor_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, AmbientColor_B) == 0x000024, "Member 'FRCParamCharacterMaterialListTableRow::AmbientColor_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, DirectionalColor_R) == 0x000028, "Member 'FRCParamCharacterMaterialListTableRow::DirectionalColor_R' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, DirectionalColor_G) == 0x00002C, "Member 'FRCParamCharacterMaterialListTableRow::DirectionalColor_G' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, DirectionalColor_B) == 0x000030, "Member 'FRCParamCharacterMaterialListTableRow::DirectionalColor_B' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, MaterialDurationSec) == 0x000034, "Member 'FRCParamCharacterMaterialListTableRow::MaterialDurationSec' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, ShinigamiEmissiveIntensity) == 0x000038, "Member 'FRCParamCharacterMaterialListTableRow::ShinigamiEmissiveIntensity' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, ShinigamiTranslucent) == 0x00003C, "Member 'FRCParamCharacterMaterialListTableRow::ShinigamiTranslucent' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMaterialListTableRow, ShinigamiEmissiveDurationSec) == 0x000040, "Member 'FRCParamCharacterMaterialListTableRow::ShinigamiEmissiveDurationSec' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterModelListTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamCharacterModelListTableRow final : public FTableRowBase
{
public:
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterModelName;                                // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterType;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FolderName;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MobID;                                             // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterModelListTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterModelListTableRow");
static_assert(sizeof(FRCParamCharacterModelListTableRow) == 0x000038, "Wrong size on FRCParamCharacterModelListTableRow");
static_assert(offsetof(FRCParamCharacterModelListTableRow, CharacterName) == 0x000008, "Member 'FRCParamCharacterModelListTableRow::CharacterName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterModelListTableRow, CharacterModelName) == 0x000010, "Member 'FRCParamCharacterModelListTableRow::CharacterModelName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterModelListTableRow, CharacterType) == 0x000018, "Member 'FRCParamCharacterModelListTableRow::CharacterType' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterModelListTableRow, FolderName) == 0x000020, "Member 'FRCParamCharacterModelListTableRow::FolderName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterModelListTableRow, Filename) == 0x000028, "Member 'FRCParamCharacterModelListTableRow::Filename' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterModelListTableRow, MobID) == 0x000030, "Member 'FRCParamCharacterModelListTableRow::MobID' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterMotionTemplateTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamCharacterMotionTemplateTableRow final : public FTableRowBase
{
public:
	class FName                                   Chapter;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionSplit;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterMotionTemplateTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterMotionTemplateTableRow");
static_assert(sizeof(FRCParamCharacterMotionTemplateTableRow) == 0x000028, "Wrong size on FRCParamCharacterMotionTemplateTableRow");
static_assert(offsetof(FRCParamCharacterMotionTemplateTableRow, Chapter) == 0x000008, "Member 'FRCParamCharacterMotionTemplateTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMotionTemplateTableRow, Scene) == 0x000010, "Member 'FRCParamCharacterMotionTemplateTableRow::Scene' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMotionTemplateTableRow, MotionSplit) == 0x000018, "Member 'FRCParamCharacterMotionTemplateTableRow::MotionSplit' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterMotionTemplateTableRow, MotionName) == 0x000020, "Member 'FRCParamCharacterMotionTemplateTableRow::MotionName' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterSettingDataAssetRecord
// 0x0100 (0x0100 - 0x0000)
struct FRCParamCharacterSettingDataAssetRecord final
{
public:
	class FName                                   ObjectName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterId;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCull;                                             // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MobID;                                             // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MoveMotionName;                                    // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopMotionPlayStartPos;                            // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTalk;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkLabelName;                                     // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BalloonFrameType;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BalloonType;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelifTextId;                                       // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TalkLength;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelifLength;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalloonLength;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalloonHeightOffset;                               // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalloonAngleOffset;                                // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalloonLengthOffset;                               // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkSpeed;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunSpeed;                                          // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMove;                                             // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveFirstWarp;                                    // 0x0085(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveLoop;                                         // 0x0086(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MovePositionNum;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCScriptActorMoveInfo>         MovePositionList;                                  // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMoveEndChangeYaw;                                 // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveEndOffetYaw;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeYawSpeed;                                    // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DrawLayerName;                                     // 0x00AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerLookAtFace;                                 // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchIntegrationMob;                             // 0x00B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharaMobSpecificMobID;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimal;                                           // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnimalIdleMotionIndex;                             // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimalActionMotionIndex;                           // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimalNearPlayerHide;                             // 0x00CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LengthAnimalVisibleMin;                            // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthAnimalVisibleMax;                            // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthAnimalAction;                                // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoldierFormStyle;                                  // 0x00DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x00E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCharacterSettingDataAssetRecord) == 0x000008, "Wrong alignment on FRCParamCharacterSettingDataAssetRecord");
static_assert(sizeof(FRCParamCharacterSettingDataAssetRecord) == 0x000100, "Wrong size on FRCParamCharacterSettingDataAssetRecord");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, ObjectName) == 0x000000, "Member 'FRCParamCharacterSettingDataAssetRecord::ObjectName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, CharacterName) == 0x000008, "Member 'FRCParamCharacterSettingDataAssetRecord::CharacterName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, CharacterId) == 0x000010, "Member 'FRCParamCharacterSettingDataAssetRecord::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, Position) == 0x000018, "Member 'FRCParamCharacterSettingDataAssetRecord::Position' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, Yaw) == 0x000024, "Member 'FRCParamCharacterSettingDataAssetRecord::Yaw' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bVisible) == 0x000028, "Member 'FRCParamCharacterSettingDataAssetRecord::bVisible' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bCull) == 0x000029, "Member 'FRCParamCharacterSettingDataAssetRecord::bCull' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, MobID) == 0x00002C, "Member 'FRCParamCharacterSettingDataAssetRecord::MobID' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, MotionName) == 0x000034, "Member 'FRCParamCharacterSettingDataAssetRecord::MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, MoveMotionName) == 0x00003C, "Member 'FRCParamCharacterSettingDataAssetRecord::MoveMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, LoopMotionPlayStartPos) == 0x000044, "Member 'FRCParamCharacterSettingDataAssetRecord::LoopMotionPlayStartPos' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bTalk) == 0x000048, "Member 'FRCParamCharacterSettingDataAssetRecord::bTalk' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, TalkLabelName) == 0x00004C, "Member 'FRCParamCharacterSettingDataAssetRecord::TalkLabelName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, BalloonFrameType) == 0x000054, "Member 'FRCParamCharacterSettingDataAssetRecord::BalloonFrameType' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, BalloonType) == 0x000058, "Member 'FRCParamCharacterSettingDataAssetRecord::BalloonType' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, SelifTextId) == 0x00005C, "Member 'FRCParamCharacterSettingDataAssetRecord::SelifTextId' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, TalkLength) == 0x000064, "Member 'FRCParamCharacterSettingDataAssetRecord::TalkLength' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, SelifLength) == 0x000068, "Member 'FRCParamCharacterSettingDataAssetRecord::SelifLength' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, BalloonLength) == 0x00006C, "Member 'FRCParamCharacterSettingDataAssetRecord::BalloonLength' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, BalloonHeightOffset) == 0x000070, "Member 'FRCParamCharacterSettingDataAssetRecord::BalloonHeightOffset' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, BalloonAngleOffset) == 0x000074, "Member 'FRCParamCharacterSettingDataAssetRecord::BalloonAngleOffset' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, BalloonLengthOffset) == 0x000078, "Member 'FRCParamCharacterSettingDataAssetRecord::BalloonLengthOffset' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, WalkSpeed) == 0x00007C, "Member 'FRCParamCharacterSettingDataAssetRecord::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, RunSpeed) == 0x000080, "Member 'FRCParamCharacterSettingDataAssetRecord::RunSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bMove) == 0x000084, "Member 'FRCParamCharacterSettingDataAssetRecord::bMove' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bMoveFirstWarp) == 0x000085, "Member 'FRCParamCharacterSettingDataAssetRecord::bMoveFirstWarp' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bMoveLoop) == 0x000086, "Member 'FRCParamCharacterSettingDataAssetRecord::bMoveLoop' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, MovePositionNum) == 0x000088, "Member 'FRCParamCharacterSettingDataAssetRecord::MovePositionNum' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, MovePositionList) == 0x000090, "Member 'FRCParamCharacterSettingDataAssetRecord::MovePositionList' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bMoveEndChangeYaw) == 0x0000A0, "Member 'FRCParamCharacterSettingDataAssetRecord::bMoveEndChangeYaw' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, MoveEndOffetYaw) == 0x0000A4, "Member 'FRCParamCharacterSettingDataAssetRecord::MoveEndOffetYaw' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, ChangeYawSpeed) == 0x0000A8, "Member 'FRCParamCharacterSettingDataAssetRecord::ChangeYawSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, DrawLayerName) == 0x0000AC, "Member 'FRCParamCharacterSettingDataAssetRecord::DrawLayerName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bPlayerLookAtFace) == 0x0000B4, "Member 'FRCParamCharacterSettingDataAssetRecord::bPlayerLookAtFace' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bSwitchIntegrationMob) == 0x0000B5, "Member 'FRCParamCharacterSettingDataAssetRecord::bSwitchIntegrationMob' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, CharaMobSpecificMobID) == 0x0000B8, "Member 'FRCParamCharacterSettingDataAssetRecord::CharaMobSpecificMobID' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bAnimal) == 0x0000C0, "Member 'FRCParamCharacterSettingDataAssetRecord::bAnimal' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, AnimalIdleMotionIndex) == 0x0000C4, "Member 'FRCParamCharacterSettingDataAssetRecord::AnimalIdleMotionIndex' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, AnimalActionMotionIndex) == 0x0000C8, "Member 'FRCParamCharacterSettingDataAssetRecord::AnimalActionMotionIndex' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, bAnimalNearPlayerHide) == 0x0000CC, "Member 'FRCParamCharacterSettingDataAssetRecord::bAnimalNearPlayerHide' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, LengthAnimalVisibleMin) == 0x0000D0, "Member 'FRCParamCharacterSettingDataAssetRecord::LengthAnimalVisibleMin' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, LengthAnimalVisibleMax) == 0x0000D4, "Member 'FRCParamCharacterSettingDataAssetRecord::LengthAnimalVisibleMax' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, LengthAnimalAction) == 0x0000D8, "Member 'FRCParamCharacterSettingDataAssetRecord::LengthAnimalAction' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, SoldierFormStyle) == 0x0000DC, "Member 'FRCParamCharacterSettingDataAssetRecord::SoldierFormStyle' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingDataAssetRecord, Name) == 0x0000E8, "Member 'FRCParamCharacterSettingDataAssetRecord::Name' has a wrong offset!");

// ScriptStruct RC.RCParamCharacterSettingTableRow
// 0x00E8 (0x00F0 - 0x0008)
struct FRCParamCharacterSettingTableRow final : public FTableRowBase
{
public:
	class FName                                   ObjectName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterId;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCull;                                             // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MobID;                                             // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MoveMotionName;                                    // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopMotionPlayStartPos;                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTalk;                                             // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkLabelName;                                     // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BalloonFrameType;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BalloonType;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelifTextId;                                       // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TalkLength;                                        // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelifLength;                                       // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalloonLength;                                     // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalloonHeightOffset;                               // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalloonAngleOffset;                                // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BalloonLengthOffset;                               // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkSpeed;                                         // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunSpeed;                                          // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMove;                                             // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveFirstWarp;                                    // 0x008D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveLoop;                                         // 0x008E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MovePositionNum;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCScriptActorMoveInfo>         MovePositionList;                                  // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMoveEndChangeYaw;                                 // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveEndOffetYaw;                                   // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeYawSpeed;                                    // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DrawLayerName;                                     // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerLookAtFace;                                 // 0x00BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchIntegrationMob;                             // 0x00BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharaMobSpecificMobID;                             // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimal;                                           // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnimalIdleMotionIndex;                             // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimalActionMotionIndex;                           // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimalNearPlayerHide;                             // 0x00D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LengthAnimalVisibleMin;                            // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthAnimalVisibleMax;                            // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthAnimalAction;                                // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoldierFormStyle;                                  // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamCharacterSettingTableRow) == 0x000008, "Wrong alignment on FRCParamCharacterSettingTableRow");
static_assert(sizeof(FRCParamCharacterSettingTableRow) == 0x0000F0, "Wrong size on FRCParamCharacterSettingTableRow");
static_assert(offsetof(FRCParamCharacterSettingTableRow, ObjectName) == 0x000008, "Member 'FRCParamCharacterSettingTableRow::ObjectName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, CharacterName) == 0x000010, "Member 'FRCParamCharacterSettingTableRow::CharacterName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, CharacterId) == 0x000018, "Member 'FRCParamCharacterSettingTableRow::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, Position) == 0x000020, "Member 'FRCParamCharacterSettingTableRow::Position' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, Yaw) == 0x00002C, "Member 'FRCParamCharacterSettingTableRow::Yaw' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bVisible) == 0x000030, "Member 'FRCParamCharacterSettingTableRow::bVisible' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bCull) == 0x000031, "Member 'FRCParamCharacterSettingTableRow::bCull' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, MobID) == 0x000034, "Member 'FRCParamCharacterSettingTableRow::MobID' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, MotionName) == 0x00003C, "Member 'FRCParamCharacterSettingTableRow::MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, MoveMotionName) == 0x000044, "Member 'FRCParamCharacterSettingTableRow::MoveMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, LoopMotionPlayStartPos) == 0x00004C, "Member 'FRCParamCharacterSettingTableRow::LoopMotionPlayStartPos' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bTalk) == 0x000050, "Member 'FRCParamCharacterSettingTableRow::bTalk' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, TalkLabelName) == 0x000054, "Member 'FRCParamCharacterSettingTableRow::TalkLabelName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, BalloonFrameType) == 0x00005C, "Member 'FRCParamCharacterSettingTableRow::BalloonFrameType' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, BalloonType) == 0x000060, "Member 'FRCParamCharacterSettingTableRow::BalloonType' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, SelifTextId) == 0x000064, "Member 'FRCParamCharacterSettingTableRow::SelifTextId' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, TalkLength) == 0x00006C, "Member 'FRCParamCharacterSettingTableRow::TalkLength' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, SelifLength) == 0x000070, "Member 'FRCParamCharacterSettingTableRow::SelifLength' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, BalloonLength) == 0x000074, "Member 'FRCParamCharacterSettingTableRow::BalloonLength' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, BalloonHeightOffset) == 0x000078, "Member 'FRCParamCharacterSettingTableRow::BalloonHeightOffset' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, BalloonAngleOffset) == 0x00007C, "Member 'FRCParamCharacterSettingTableRow::BalloonAngleOffset' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, BalloonLengthOffset) == 0x000080, "Member 'FRCParamCharacterSettingTableRow::BalloonLengthOffset' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, WalkSpeed) == 0x000084, "Member 'FRCParamCharacterSettingTableRow::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, RunSpeed) == 0x000088, "Member 'FRCParamCharacterSettingTableRow::RunSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bMove) == 0x00008C, "Member 'FRCParamCharacterSettingTableRow::bMove' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bMoveFirstWarp) == 0x00008D, "Member 'FRCParamCharacterSettingTableRow::bMoveFirstWarp' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bMoveLoop) == 0x00008E, "Member 'FRCParamCharacterSettingTableRow::bMoveLoop' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, MovePositionNum) == 0x000090, "Member 'FRCParamCharacterSettingTableRow::MovePositionNum' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, MovePositionList) == 0x000098, "Member 'FRCParamCharacterSettingTableRow::MovePositionList' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bMoveEndChangeYaw) == 0x0000A8, "Member 'FRCParamCharacterSettingTableRow::bMoveEndChangeYaw' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, MoveEndOffetYaw) == 0x0000AC, "Member 'FRCParamCharacterSettingTableRow::MoveEndOffetYaw' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, ChangeYawSpeed) == 0x0000B0, "Member 'FRCParamCharacterSettingTableRow::ChangeYawSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, DrawLayerName) == 0x0000B4, "Member 'FRCParamCharacterSettingTableRow::DrawLayerName' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bPlayerLookAtFace) == 0x0000BC, "Member 'FRCParamCharacterSettingTableRow::bPlayerLookAtFace' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bSwitchIntegrationMob) == 0x0000BD, "Member 'FRCParamCharacterSettingTableRow::bSwitchIntegrationMob' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, CharaMobSpecificMobID) == 0x0000C0, "Member 'FRCParamCharacterSettingTableRow::CharaMobSpecificMobID' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bAnimal) == 0x0000C8, "Member 'FRCParamCharacterSettingTableRow::bAnimal' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, AnimalIdleMotionIndex) == 0x0000CC, "Member 'FRCParamCharacterSettingTableRow::AnimalIdleMotionIndex' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, AnimalActionMotionIndex) == 0x0000D0, "Member 'FRCParamCharacterSettingTableRow::AnimalActionMotionIndex' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, bAnimalNearPlayerHide) == 0x0000D4, "Member 'FRCParamCharacterSettingTableRow::bAnimalNearPlayerHide' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, LengthAnimalVisibleMin) == 0x0000D8, "Member 'FRCParamCharacterSettingTableRow::LengthAnimalVisibleMin' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, LengthAnimalVisibleMax) == 0x0000DC, "Member 'FRCParamCharacterSettingTableRow::LengthAnimalVisibleMax' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, LengthAnimalAction) == 0x0000E0, "Member 'FRCParamCharacterSettingTableRow::LengthAnimalAction' has a wrong offset!");
static_assert(offsetof(FRCParamCharacterSettingTableRow, SoldierFormStyle) == 0x0000E4, "Member 'FRCParamCharacterSettingTableRow::SoldierFormStyle' has a wrong offset!");

// ScriptStruct RC.RCParamCollectionDialogTableRow
// 0x0060 (0x0068 - 0x0008)
struct FRCParamCollectionDialogTableRow final : public FTableRowBase
{
public:
	class FName                                   CheckRelease;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckStart;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReleaseCondition;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RealLookError;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NazoLookError;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DispEpHint;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NGDialogMain;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NGDialogStory;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NGDialogVol;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NGDialogFigureNum;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamCollectionDialogTableRow) == 0x000008, "Wrong alignment on FRCParamCollectionDialogTableRow");
static_assert(sizeof(FRCParamCollectionDialogTableRow) == 0x000068, "Wrong size on FRCParamCollectionDialogTableRow");
static_assert(offsetof(FRCParamCollectionDialogTableRow, CheckRelease) == 0x000008, "Member 'FRCParamCollectionDialogTableRow::CheckRelease' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionDialogTableRow, CheckStart) == 0x000010, "Member 'FRCParamCollectionDialogTableRow::CheckStart' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionDialogTableRow, ReleaseCondition) == 0x000018, "Member 'FRCParamCollectionDialogTableRow::ReleaseCondition' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionDialogTableRow, RealLookError) == 0x000020, "Member 'FRCParamCollectionDialogTableRow::RealLookError' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionDialogTableRow, NazoLookError) == 0x000028, "Member 'FRCParamCollectionDialogTableRow::NazoLookError' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionDialogTableRow, DispEpHint) == 0x000030, "Member 'FRCParamCollectionDialogTableRow::DispEpHint' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionDialogTableRow, NGDialogMain) == 0x000038, "Member 'FRCParamCollectionDialogTableRow::NGDialogMain' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionDialogTableRow, NGDialogStory) == 0x000040, "Member 'FRCParamCollectionDialogTableRow::NGDialogStory' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionDialogTableRow, NGDialogVol) == 0x000048, "Member 'FRCParamCollectionDialogTableRow::NGDialogVol' has a wrong offset!");
static_assert(offsetof(FRCParamCollectionDialogTableRow, NGDialogFigureNum) == 0x000058, "Member 'FRCParamCollectionDialogTableRow::NGDialogFigureNum' has a wrong offset!");

// ScriptStruct RC.RCParamDLCSoundSheetListTableRow
// 0x0040 (0x0048 - 0x0008)
struct FRCParamDLCSoundSheetListTableRow final : public FTableRowBase
{
public:
	class FName                                   DlcType;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundType;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceLanguage;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceQuality;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DataPath;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamDLCSoundSheetListTableRow) == 0x000008, "Wrong alignment on FRCParamDLCSoundSheetListTableRow");
static_assert(sizeof(FRCParamDLCSoundSheetListTableRow) == 0x000048, "Wrong size on FRCParamDLCSoundSheetListTableRow");
static_assert(offsetof(FRCParamDLCSoundSheetListTableRow, DlcType) == 0x000008, "Member 'FRCParamDLCSoundSheetListTableRow::DlcType' has a wrong offset!");
static_assert(offsetof(FRCParamDLCSoundSheetListTableRow, SoundType) == 0x000010, "Member 'FRCParamDLCSoundSheetListTableRow::SoundType' has a wrong offset!");
static_assert(offsetof(FRCParamDLCSoundSheetListTableRow, VoiceLanguage) == 0x000018, "Member 'FRCParamDLCSoundSheetListTableRow::VoiceLanguage' has a wrong offset!");
static_assert(offsetof(FRCParamDLCSoundSheetListTableRow, VoiceQuality) == 0x000020, "Member 'FRCParamDLCSoundSheetListTableRow::VoiceQuality' has a wrong offset!");
static_assert(offsetof(FRCParamDLCSoundSheetListTableRow, Filename) == 0x000028, "Member 'FRCParamDLCSoundSheetListTableRow::Filename' has a wrong offset!");
static_assert(offsetof(FRCParamDLCSoundSheetListTableRow, DataPath) == 0x000038, "Member 'FRCParamDLCSoundSheetListTableRow::DataPath' has a wrong offset!");

// ScriptStruct RC.RCParamEnviromentSoundTableRow
// 0x0040 (0x0048 - 0x0008)
struct FRCParamEnviromentSoundTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaNameID;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 envSound1;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime1;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 envSound2;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime2;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamEnviromentSoundTableRow) == 0x000008, "Wrong alignment on FRCParamEnviromentSoundTableRow");
static_assert(sizeof(FRCParamEnviromentSoundTableRow) == 0x000048, "Wrong size on FRCParamEnviromentSoundTableRow");
static_assert(offsetof(FRCParamEnviromentSoundTableRow, MapID) == 0x000008, "Member 'FRCParamEnviromentSoundTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamEnviromentSoundTableRow, AreaNameID) == 0x000010, "Member 'FRCParamEnviromentSoundTableRow::AreaNameID' has a wrong offset!");
static_assert(offsetof(FRCParamEnviromentSoundTableRow, envSound1) == 0x000018, "Member 'FRCParamEnviromentSoundTableRow::envSound1' has a wrong offset!");
static_assert(offsetof(FRCParamEnviromentSoundTableRow, FadeTime1) == 0x000028, "Member 'FRCParamEnviromentSoundTableRow::FadeTime1' has a wrong offset!");
static_assert(offsetof(FRCParamEnviromentSoundTableRow, envSound2) == 0x000030, "Member 'FRCParamEnviromentSoundTableRow::envSound2' has a wrong offset!");
static_assert(offsetof(FRCParamEnviromentSoundTableRow, FadeTime2) == 0x000040, "Member 'FRCParamEnviromentSoundTableRow::FadeTime2' has a wrong offset!");

// ScriptStruct RC.RCParamEventCharacterFacialColorTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamEventCharacterFacialColorTableRow final : public FTableRowBase
{
public:
	class FName                                   EventFacialColorId;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorChangePattern;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeIntensity;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeDurationSec;                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeParamR;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeParamG;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeParamB;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectLinePattern;                                 // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamEventCharacterFacialColorTableRow) == 0x000008, "Wrong alignment on FRCParamEventCharacterFacialColorTableRow");
static_assert(sizeof(FRCParamEventCharacterFacialColorTableRow) == 0x000038, "Wrong size on FRCParamEventCharacterFacialColorTableRow");
static_assert(offsetof(FRCParamEventCharacterFacialColorTableRow, EventFacialColorId) == 0x000008, "Member 'FRCParamEventCharacterFacialColorTableRow::EventFacialColorId' has a wrong offset!");
static_assert(offsetof(FRCParamEventCharacterFacialColorTableRow, ColorChangePattern) == 0x000010, "Member 'FRCParamEventCharacterFacialColorTableRow::ColorChangePattern' has a wrong offset!");
static_assert(offsetof(FRCParamEventCharacterFacialColorTableRow, ColorChangeIntensity) == 0x000018, "Member 'FRCParamEventCharacterFacialColorTableRow::ColorChangeIntensity' has a wrong offset!");
static_assert(offsetof(FRCParamEventCharacterFacialColorTableRow, ColorChangeDurationSec) == 0x00001C, "Member 'FRCParamEventCharacterFacialColorTableRow::ColorChangeDurationSec' has a wrong offset!");
static_assert(offsetof(FRCParamEventCharacterFacialColorTableRow, ColorChangeParamR) == 0x000020, "Member 'FRCParamEventCharacterFacialColorTableRow::ColorChangeParamR' has a wrong offset!");
static_assert(offsetof(FRCParamEventCharacterFacialColorTableRow, ColorChangeParamG) == 0x000024, "Member 'FRCParamEventCharacterFacialColorTableRow::ColorChangeParamG' has a wrong offset!");
static_assert(offsetof(FRCParamEventCharacterFacialColorTableRow, ColorChangeParamB) == 0x000028, "Member 'FRCParamEventCharacterFacialColorTableRow::ColorChangeParamB' has a wrong offset!");
static_assert(offsetof(FRCParamEventCharacterFacialColorTableRow, EffectLinePattern) == 0x00002C, "Member 'FRCParamEventCharacterFacialColorTableRow::EffectLinePattern' has a wrong offset!");

// ScriptStruct RC.RCParamEventCheckSubQuestSubLevelTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamEventCheckSubQuestSubLevelTableRow final : public FTableRowBase
{
public:
	class FName                                   QuestID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelType;                                         // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelPath;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelFilename;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamEventCheckSubQuestSubLevelTableRow) == 0x000008, "Wrong alignment on FRCParamEventCheckSubQuestSubLevelTableRow");
static_assert(sizeof(FRCParamEventCheckSubQuestSubLevelTableRow) == 0x000040, "Wrong size on FRCParamEventCheckSubQuestSubLevelTableRow");
static_assert(offsetof(FRCParamEventCheckSubQuestSubLevelTableRow, QuestID) == 0x000008, "Member 'FRCParamEventCheckSubQuestSubLevelTableRow::QuestID' has a wrong offset!");
static_assert(offsetof(FRCParamEventCheckSubQuestSubLevelTableRow, Chapter) == 0x000010, "Member 'FRCParamEventCheckSubQuestSubLevelTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamEventCheckSubQuestSubLevelTableRow, LevelType) == 0x000014, "Member 'FRCParamEventCheckSubQuestSubLevelTableRow::LevelType' has a wrong offset!");
static_assert(offsetof(FRCParamEventCheckSubQuestSubLevelTableRow, LevelPath) == 0x000020, "Member 'FRCParamEventCheckSubQuestSubLevelTableRow::LevelPath' has a wrong offset!");
static_assert(offsetof(FRCParamEventCheckSubQuestSubLevelTableRow, LevelFilename) == 0x000030, "Member 'FRCParamEventCheckSubQuestSubLevelTableRow::LevelFilename' has a wrong offset!");

// ScriptStruct RC.RCParamEventMapBusStopInfoTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamEventMapBusStopInfoTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapIDComment;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckActorName;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextPlayerStartName;                               // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectBusStopStatusIndex;                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamEventMapBusStopInfoTableRow) == 0x000008, "Wrong alignment on FRCParamEventMapBusStopInfoTableRow");
static_assert(sizeof(FRCParamEventMapBusStopInfoTableRow) == 0x000030, "Wrong size on FRCParamEventMapBusStopInfoTableRow");
static_assert(offsetof(FRCParamEventMapBusStopInfoTableRow, MapID) == 0x000008, "Member 'FRCParamEventMapBusStopInfoTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapBusStopInfoTableRow, MapIDComment) == 0x000010, "Member 'FRCParamEventMapBusStopInfoTableRow::MapIDComment' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapBusStopInfoTableRow, CheckActorName) == 0x000018, "Member 'FRCParamEventMapBusStopInfoTableRow::CheckActorName' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapBusStopInfoTableRow, NextPlayerStartName) == 0x000020, "Member 'FRCParamEventMapBusStopInfoTableRow::NextPlayerStartName' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapBusStopInfoTableRow, ConnectBusStopStatusIndex) == 0x000028, "Member 'FRCParamEventMapBusStopInfoTableRow::ConnectBusStopStatusIndex' has a wrong offset!");

// ScriptStruct RC.RCParamEventMapInfoTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamEventMapInfoTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapIDComment;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectStatusIndex;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamEventMapInfoTableRow) == 0x000008, "Wrong alignment on FRCParamEventMapInfoTableRow");
static_assert(sizeof(FRCParamEventMapInfoTableRow) == 0x000028, "Wrong size on FRCParamEventMapInfoTableRow");
static_assert(offsetof(FRCParamEventMapInfoTableRow, MapID) == 0x000008, "Member 'FRCParamEventMapInfoTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapInfoTableRow, MapIDComment) == 0x000010, "Member 'FRCParamEventMapInfoTableRow::MapIDComment' has a wrong offset!");
static_assert(offsetof(FRCParamEventMapInfoTableRow, ConnectStatusIndex) == 0x000020, "Member 'FRCParamEventMapInfoTableRow::ConnectStatusIndex' has a wrong offset!");

// ScriptStruct RC.RCParamEventSubLevelTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamEventSubLevelTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelType;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelPath;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelFilename;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamEventSubLevelTableRow) == 0x000008, "Wrong alignment on FRCParamEventSubLevelTableRow");
static_assert(sizeof(FRCParamEventSubLevelTableRow) == 0x000038, "Wrong size on FRCParamEventSubLevelTableRow");
static_assert(offsetof(FRCParamEventSubLevelTableRow, MapID) == 0x000008, "Member 'FRCParamEventSubLevelTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamEventSubLevelTableRow, LevelType) == 0x000010, "Member 'FRCParamEventSubLevelTableRow::LevelType' has a wrong offset!");
static_assert(offsetof(FRCParamEventSubLevelTableRow, LevelPath) == 0x000018, "Member 'FRCParamEventSubLevelTableRow::LevelPath' has a wrong offset!");
static_assert(offsetof(FRCParamEventSubLevelTableRow, LevelFilename) == 0x000028, "Member 'FRCParamEventSubLevelTableRow::LevelFilename' has a wrong offset!");

// ScriptStruct RC.RCParamFaceGradationListTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamFaceGradationListTableRow final : public FTableRowBase
{
public:
	class FName                                   FilterID;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayR;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayG;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayB;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayA;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayBlightR;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayBlightG;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayBlightB;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayBlightA;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamFaceGradationListTableRow) == 0x000008, "Wrong alignment on FRCParamFaceGradationListTableRow");
static_assert(sizeof(FRCParamFaceGradationListTableRow) == 0x000038, "Wrong size on FRCParamFaceGradationListTableRow");
static_assert(offsetof(FRCParamFaceGradationListTableRow, FilterID) == 0x000008, "Member 'FRCParamFaceGradationListTableRow::FilterID' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, Amount) == 0x000010, "Member 'FRCParamFaceGradationListTableRow::Amount' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, Angle) == 0x000014, "Member 'FRCParamFaceGradationListTableRow::Angle' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, OverlayR) == 0x000018, "Member 'FRCParamFaceGradationListTableRow::OverlayR' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, OverlayG) == 0x00001C, "Member 'FRCParamFaceGradationListTableRow::OverlayG' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, OverlayB) == 0x000020, "Member 'FRCParamFaceGradationListTableRow::OverlayB' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, OverlayA) == 0x000024, "Member 'FRCParamFaceGradationListTableRow::OverlayA' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, OverlayBlightR) == 0x000028, "Member 'FRCParamFaceGradationListTableRow::OverlayBlightR' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, OverlayBlightG) == 0x00002C, "Member 'FRCParamFaceGradationListTableRow::OverlayBlightG' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, OverlayBlightB) == 0x000030, "Member 'FRCParamFaceGradationListTableRow::OverlayBlightB' has a wrong offset!");
static_assert(offsetof(FRCParamFaceGradationListTableRow, OverlayBlightA) == 0x000034, "Member 'FRCParamFaceGradationListTableRow::OverlayBlightA' has a wrong offset!");

// ScriptStruct RC.RCParamFigureInformationTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamFigureInformationTableRow final : public FTableRowBase
{
public:
	class FName                                   PersonID;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FigureImagePath;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FigureNameText;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FigureHintText;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamFigureInformationTableRow) == 0x000008, "Wrong alignment on FRCParamFigureInformationTableRow");
static_assert(sizeof(FRCParamFigureInformationTableRow) == 0x000030, "Wrong size on FRCParamFigureInformationTableRow");
static_assert(offsetof(FRCParamFigureInformationTableRow, PersonID) == 0x000008, "Member 'FRCParamFigureInformationTableRow::PersonID' has a wrong offset!");
static_assert(offsetof(FRCParamFigureInformationTableRow, FigureImagePath) == 0x000010, "Member 'FRCParamFigureInformationTableRow::FigureImagePath' has a wrong offset!");
static_assert(offsetof(FRCParamFigureInformationTableRow, FigureNameText) == 0x000020, "Member 'FRCParamFigureInformationTableRow::FigureNameText' has a wrong offset!");
static_assert(offsetof(FRCParamFigureInformationTableRow, FigureHintText) == 0x000028, "Member 'FRCParamFigureInformationTableRow::FigureHintText' has a wrong offset!");

// ScriptStruct RC.RCParamFloorTypeTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamFloorTypeTableRow final : public FTableRowBase
{
public:
	class FName                                   FloorTypeId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundCueNumber;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundId;                                           // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompanionSoundId;                                  // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpiritSoundId;                                     // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamFloorTypeTableRow) == 0x000008, "Wrong alignment on FRCParamFloorTypeTableRow");
static_assert(sizeof(FRCParamFloorTypeTableRow) == 0x000030, "Wrong size on FRCParamFloorTypeTableRow");
static_assert(offsetof(FRCParamFloorTypeTableRow, FloorTypeId) == 0x000008, "Member 'FRCParamFloorTypeTableRow::FloorTypeId' has a wrong offset!");
static_assert(offsetof(FRCParamFloorTypeTableRow, SoundCueNumber) == 0x000010, "Member 'FRCParamFloorTypeTableRow::SoundCueNumber' has a wrong offset!");
static_assert(offsetof(FRCParamFloorTypeTableRow, SoundId) == 0x000014, "Member 'FRCParamFloorTypeTableRow::SoundId' has a wrong offset!");
static_assert(offsetof(FRCParamFloorTypeTableRow, CompanionSoundId) == 0x00001C, "Member 'FRCParamFloorTypeTableRow::CompanionSoundId' has a wrong offset!");
static_assert(offsetof(FRCParamFloorTypeTableRow, SpiritSoundId) == 0x000024, "Member 'FRCParamFloorTypeTableRow::SpiritSoundId' has a wrong offset!");

// ScriptStruct RC.RCParamForceFeedBackEffectTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamForceFeedBackEffectTableRow final : public FTableRowBase
{
public:
	class FName                                   ForceFeedBackID;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FileNameDualShock4;                                // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FileNameNameDualSense;                             // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FileNameXBoxController;                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FileNameJoyController;                             // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FileNameProController;                             // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamForceFeedBackEffectTableRow) == 0x000008, "Wrong alignment on FRCParamForceFeedBackEffectTableRow");
static_assert(sizeof(FRCParamForceFeedBackEffectTableRow) == 0x000038, "Wrong size on FRCParamForceFeedBackEffectTableRow");
static_assert(offsetof(FRCParamForceFeedBackEffectTableRow, ForceFeedBackID) == 0x000008, "Member 'FRCParamForceFeedBackEffectTableRow::ForceFeedBackID' has a wrong offset!");
static_assert(offsetof(FRCParamForceFeedBackEffectTableRow, FileNameDualShock4) == 0x000010, "Member 'FRCParamForceFeedBackEffectTableRow::FileNameDualShock4' has a wrong offset!");
static_assert(offsetof(FRCParamForceFeedBackEffectTableRow, FileNameNameDualSense) == 0x000018, "Member 'FRCParamForceFeedBackEffectTableRow::FileNameNameDualSense' has a wrong offset!");
static_assert(offsetof(FRCParamForceFeedBackEffectTableRow, FileNameXBoxController) == 0x000020, "Member 'FRCParamForceFeedBackEffectTableRow::FileNameXBoxController' has a wrong offset!");
static_assert(offsetof(FRCParamForceFeedBackEffectTableRow, FileNameJoyController) == 0x000028, "Member 'FRCParamForceFeedBackEffectTableRow::FileNameJoyController' has a wrong offset!");
static_assert(offsetof(FRCParamForceFeedBackEffectTableRow, FileNameProController) == 0x000030, "Member 'FRCParamForceFeedBackEffectTableRow::FileNameProController' has a wrong offset!");

// ScriptStruct RC.RCParamGalleryBgmListTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamGalleryBgmListTableRow final : public FTableRowBase
{
public:
	int32                                         BgmNo;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BgmID;                                             // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenChapterNo;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenSceneNo;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BgmTitleTextID;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamGalleryBgmListTableRow) == 0x000008, "Wrong alignment on FRCParamGalleryBgmListTableRow");
static_assert(sizeof(FRCParamGalleryBgmListTableRow) == 0x000028, "Wrong size on FRCParamGalleryBgmListTableRow");
static_assert(offsetof(FRCParamGalleryBgmListTableRow, BgmNo) == 0x000008, "Member 'FRCParamGalleryBgmListTableRow::BgmNo' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryBgmListTableRow, BgmID) == 0x00000C, "Member 'FRCParamGalleryBgmListTableRow::BgmID' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryBgmListTableRow, OpenChapterNo) == 0x000014, "Member 'FRCParamGalleryBgmListTableRow::OpenChapterNo' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryBgmListTableRow, OpenSceneNo) == 0x000018, "Member 'FRCParamGalleryBgmListTableRow::OpenSceneNo' has a wrong offset!");
static_assert(offsetof(FRCParamGalleryBgmListTableRow, BgmTitleTextID) == 0x000020, "Member 'FRCParamGalleryBgmListTableRow::BgmTitleTextID' has a wrong offset!");

// ScriptStruct RC.RCParamGlossaryCategoryListTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamGlossaryCategoryListTableRow final : public FTableRowBase
{
public:
	class FName                                   GlossaryCategoryID;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamGlossaryCategoryListTableRow) == 0x000008, "Wrong alignment on FRCParamGlossaryCategoryListTableRow");
static_assert(sizeof(FRCParamGlossaryCategoryListTableRow) == 0x000018, "Wrong size on FRCParamGlossaryCategoryListTableRow");
static_assert(offsetof(FRCParamGlossaryCategoryListTableRow, GlossaryCategoryID) == 0x000008, "Member 'FRCParamGlossaryCategoryListTableRow::GlossaryCategoryID' has a wrong offset!");
static_assert(offsetof(FRCParamGlossaryCategoryListTableRow, TextID) == 0x000010, "Member 'FRCParamGlossaryCategoryListTableRow::TextID' has a wrong offset!");

// ScriptStruct RC.RCParamInputIDTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamInputIDTableRow final : public FTableRowBase
{
public:
	class FName                                   InputKeyID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Keys;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputButtonType;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputHardwareType;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyNameText;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamInputIDTableRow) == 0x000008, "Wrong alignment on FRCParamInputIDTableRow");
static_assert(sizeof(FRCParamInputIDTableRow) == 0x000038, "Wrong size on FRCParamInputIDTableRow");
static_assert(offsetof(FRCParamInputIDTableRow, InputKeyID) == 0x000008, "Member 'FRCParamInputIDTableRow::InputKeyID' has a wrong offset!");
static_assert(offsetof(FRCParamInputIDTableRow, Keys) == 0x000010, "Member 'FRCParamInputIDTableRow::Keys' has a wrong offset!");
static_assert(offsetof(FRCParamInputIDTableRow, InputButtonType) == 0x000018, "Member 'FRCParamInputIDTableRow::InputButtonType' has a wrong offset!");
static_assert(offsetof(FRCParamInputIDTableRow, InputHardwareType) == 0x000020, "Member 'FRCParamInputIDTableRow::InputHardwareType' has a wrong offset!");
static_assert(offsetof(FRCParamInputIDTableRow, KeyNameText) == 0x000028, "Member 'FRCParamInputIDTableRow::KeyNameText' has a wrong offset!");

// ScriptStruct RC.RCParamInputKeyConfigTableRow
// 0x0050 (0x0058 - 0x0008)
struct FRCParamInputKeyConfigTableRow final : public FTableRowBase
{
public:
	class FName                                   InputKeyConfigTypeID;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyBoard1;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyBoard2;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mouse;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Pad1;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Pad2;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QwertzKeyBoard1;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QwertzKeyBoard2;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AzertyKeyBoard1;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AzertyKeyBoard2;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamInputKeyConfigTableRow) == 0x000008, "Wrong alignment on FRCParamInputKeyConfigTableRow");
static_assert(sizeof(FRCParamInputKeyConfigTableRow) == 0x000058, "Wrong size on FRCParamInputKeyConfigTableRow");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, InputKeyConfigTypeID) == 0x000008, "Member 'FRCParamInputKeyConfigTableRow::InputKeyConfigTypeID' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, KeyBoard1) == 0x000010, "Member 'FRCParamInputKeyConfigTableRow::KeyBoard1' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, KeyBoard2) == 0x000018, "Member 'FRCParamInputKeyConfigTableRow::KeyBoard2' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, Mouse) == 0x000020, "Member 'FRCParamInputKeyConfigTableRow::Mouse' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, Pad1) == 0x000028, "Member 'FRCParamInputKeyConfigTableRow::Pad1' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, Pad2) == 0x000030, "Member 'FRCParamInputKeyConfigTableRow::Pad2' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, QwertzKeyBoard1) == 0x000038, "Member 'FRCParamInputKeyConfigTableRow::QwertzKeyBoard1' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, QwertzKeyBoard2) == 0x000040, "Member 'FRCParamInputKeyConfigTableRow::QwertzKeyBoard2' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, AzertyKeyBoard1) == 0x000048, "Member 'FRCParamInputKeyConfigTableRow::AzertyKeyBoard1' has a wrong offset!");
static_assert(offsetof(FRCParamInputKeyConfigTableRow, AzertyKeyBoard2) == 0x000050, "Member 'FRCParamInputKeyConfigTableRow::AzertyKeyBoard2' has a wrong offset!");

// ScriptStruct RC.RCParamLevelListTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamLevelListTableRow final : public FTableRowBase
{
public:
	class FString                                 LevelPath;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamLevelListTableRow) == 0x000008, "Wrong alignment on FRCParamLevelListTableRow");
static_assert(sizeof(FRCParamLevelListTableRow) == 0x000038, "Wrong size on FRCParamLevelListTableRow");
static_assert(offsetof(FRCParamLevelListTableRow, LevelPath) == 0x000008, "Member 'FRCParamLevelListTableRow::LevelPath' has a wrong offset!");
static_assert(offsetof(FRCParamLevelListTableRow, LevelName) == 0x000018, "Member 'FRCParamLevelListTableRow::LevelName' has a wrong offset!");
static_assert(offsetof(FRCParamLevelListTableRow, Comment) == 0x000028, "Member 'FRCParamLevelListTableRow::Comment' has a wrong offset!");

// ScriptStruct RC.RCNzResultMinigameInfo
// 0x0014 (0x0014 - 0x0000)
struct FRCNzResultMinigameInfo final
{
public:
	int32                                         Chapter;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoGameMode                               MinigameMode;                                      // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ListNum;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCNzResultMinigameInfo) == 0x000004, "Wrong alignment on FRCNzResultMinigameInfo");
static_assert(sizeof(FRCNzResultMinigameInfo) == 0x000014, "Wrong size on FRCNzResultMinigameInfo");
static_assert(offsetof(FRCNzResultMinigameInfo, Chapter) == 0x000000, "Member 'FRCNzResultMinigameInfo::Chapter' has a wrong offset!");
static_assert(offsetof(FRCNzResultMinigameInfo, Scene) == 0x000004, "Member 'FRCNzResultMinigameInfo::Scene' has a wrong offset!");
static_assert(offsetof(FRCNzResultMinigameInfo, MinigameMode) == 0x00000C, "Member 'FRCNzResultMinigameInfo::MinigameMode' has a wrong offset!");
static_assert(offsetof(FRCNzResultMinigameInfo, ListNum) == 0x000010, "Member 'FRCNzResultMinigameInfo::ListNum' has a wrong offset!");

// ScriptStruct RC.RCParamLipSyncTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamLipSyncTableRow final : public FTableRowBase
{
public:
	int32                                         msec;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         tongue;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         I;                                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U;                                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         E;                                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         O;                                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vol;                                               // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamLipSyncTableRow) == 0x000008, "Wrong alignment on FRCParamLipSyncTableRow");
static_assert(sizeof(FRCParamLipSyncTableRow) == 0x000030, "Wrong size on FRCParamLipSyncTableRow");
static_assert(offsetof(FRCParamLipSyncTableRow, msec) == 0x000008, "Member 'FRCParamLipSyncTableRow::msec' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncTableRow, Width) == 0x00000C, "Member 'FRCParamLipSyncTableRow::Width' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncTableRow, Height) == 0x000010, "Member 'FRCParamLipSyncTableRow::Height' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncTableRow, tongue) == 0x000014, "Member 'FRCParamLipSyncTableRow::tongue' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncTableRow, A) == 0x000018, "Member 'FRCParamLipSyncTableRow::A' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncTableRow, I) == 0x00001C, "Member 'FRCParamLipSyncTableRow::I' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncTableRow, U) == 0x000020, "Member 'FRCParamLipSyncTableRow::U' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncTableRow, E) == 0x000024, "Member 'FRCParamLipSyncTableRow::E' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncTableRow, O) == 0x000028, "Member 'FRCParamLipSyncTableRow::O' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncTableRow, Vol) == 0x00002C, "Member 'FRCParamLipSyncTableRow::Vol' has a wrong offset!");

// ScriptStruct RC.RCParamLipSyncCharaIDListTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamLipSyncCharaIDListTableRow final : public FTableRowBase
{
public:
	bool                                          IsLipSync;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CharaIDList;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamLipSyncCharaIDListTableRow) == 0x000008, "Wrong alignment on FRCParamLipSyncCharaIDListTableRow");
static_assert(sizeof(FRCParamLipSyncCharaIDListTableRow) == 0x000020, "Wrong size on FRCParamLipSyncCharaIDListTableRow");
static_assert(offsetof(FRCParamLipSyncCharaIDListTableRow, IsLipSync) == 0x000008, "Member 'FRCParamLipSyncCharaIDListTableRow::IsLipSync' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncCharaIDListTableRow, CharaIDList) == 0x000010, "Member 'FRCParamLipSyncCharaIDListTableRow::CharaIDList' has a wrong offset!");

// ScriptStruct RC.RCSequenceTalkJumpData
// 0x0038 (0x0038 - 0x0000)
struct FRCSequenceTalkJumpData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSequenceTalkJumpData) == 0x000008, "Wrong alignment on FRCSequenceTalkJumpData");
static_assert(sizeof(FRCSequenceTalkJumpData) == 0x000038, "Wrong size on FRCSequenceTalkJumpData");
static_assert(offsetof(FRCSequenceTalkJumpData, SequencePlayer) == 0x000010, "Member 'FRCSequenceTalkJumpData::SequencePlayer' has a wrong offset!");

// ScriptStruct RC.RCParamLipSyncDataAdjustTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamLipSyncDataAdjustTableRow final : public FTableRowBase
{
public:
	class FName                                   CharaID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vowel_A;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vowel_I;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vowel_U;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vowel_E;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vowel_O;                                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LipSyncCullNum;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipSyncSpeed;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceVolume;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamLipSyncDataAdjustTableRow) == 0x000008, "Wrong alignment on FRCParamLipSyncDataAdjustTableRow");
static_assert(sizeof(FRCParamLipSyncDataAdjustTableRow) == 0x000030, "Wrong size on FRCParamLipSyncDataAdjustTableRow");
static_assert(offsetof(FRCParamLipSyncDataAdjustTableRow, CharaID) == 0x000008, "Member 'FRCParamLipSyncDataAdjustTableRow::CharaID' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncDataAdjustTableRow, Vowel_A) == 0x000010, "Member 'FRCParamLipSyncDataAdjustTableRow::Vowel_A' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncDataAdjustTableRow, Vowel_I) == 0x000014, "Member 'FRCParamLipSyncDataAdjustTableRow::Vowel_I' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncDataAdjustTableRow, Vowel_U) == 0x000018, "Member 'FRCParamLipSyncDataAdjustTableRow::Vowel_U' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncDataAdjustTableRow, Vowel_E) == 0x00001C, "Member 'FRCParamLipSyncDataAdjustTableRow::Vowel_E' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncDataAdjustTableRow, Vowel_O) == 0x000020, "Member 'FRCParamLipSyncDataAdjustTableRow::Vowel_O' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncDataAdjustTableRow, LipSyncCullNum) == 0x000024, "Member 'FRCParamLipSyncDataAdjustTableRow::LipSyncCullNum' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncDataAdjustTableRow, LipSyncSpeed) == 0x000028, "Member 'FRCParamLipSyncDataAdjustTableRow::LipSyncSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncDataAdjustTableRow, VoiceVolume) == 0x00002C, "Member 'FRCParamLipSyncDataAdjustTableRow::VoiceVolume' has a wrong offset!");

// ScriptStruct RC.RCParamLipSyncForTextIDTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamLipSyncForTextIDTableRow final : public FTableRowBase
{
public:
	class FName                                   VoiceID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PartVoiceID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   exception;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamLipSyncForTextIDTableRow) == 0x000008, "Wrong alignment on FRCParamLipSyncForTextIDTableRow");
static_assert(sizeof(FRCParamLipSyncForTextIDTableRow) == 0x000030, "Wrong size on FRCParamLipSyncForTextIDTableRow");
static_assert(offsetof(FRCParamLipSyncForTextIDTableRow, VoiceID) == 0x000008, "Member 'FRCParamLipSyncForTextIDTableRow::VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncForTextIDTableRow, PartVoiceID) == 0x000010, "Member 'FRCParamLipSyncForTextIDTableRow::PartVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncForTextIDTableRow, CharacterId) == 0x000018, "Member 'FRCParamLipSyncForTextIDTableRow::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCParamLipSyncForTextIDTableRow, exception) == 0x000028, "Member 'FRCParamLipSyncForTextIDTableRow::exception' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuStoryInfo
// 0x0003 (0x0003 - 0x0000)
struct FRCVariableGameMenuStoryInfo final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRead;                                             // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuStoryInfo) == 0x000001, "Wrong alignment on FRCVariableGameMenuStoryInfo");
static_assert(sizeof(FRCVariableGameMenuStoryInfo) == 0x000003, "Wrong size on FRCVariableGameMenuStoryInfo");
static_assert(offsetof(FRCVariableGameMenuStoryInfo, bOpen) == 0x000000, "Member 'FRCVariableGameMenuStoryInfo::bOpen' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuStoryInfo, bNew) == 0x000001, "Member 'FRCVariableGameMenuStoryInfo::bNew' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuStoryInfo, bRead) == 0x000002, "Member 'FRCVariableGameMenuStoryInfo::bRead' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuCollectionStoryInfo
// 0x0018 (0x0018 - 0x0000)
struct FRCVariableGameMenuCollectionStoryInfo final
{
public:
	class FName                                   CharacterId;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCVariableGameMenuStoryInfo>   StoryInfoList;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuCollectionStoryInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuCollectionStoryInfo");
static_assert(sizeof(FRCVariableGameMenuCollectionStoryInfo) == 0x000018, "Wrong size on FRCVariableGameMenuCollectionStoryInfo");
static_assert(offsetof(FRCVariableGameMenuCollectionStoryInfo, CharacterId) == 0x000000, "Member 'FRCVariableGameMenuCollectionStoryInfo::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCollectionStoryInfo, StoryInfoList) == 0x000008, "Member 'FRCVariableGameMenuCollectionStoryInfo::StoryInfoList' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuCollectionMenuInfo
// 0x0018 (0x0018 - 0x0000)
struct FRCVariableGameMenuCollectionMenuInfo final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccess;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHintDraw;                                         // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHintAccess;                                       // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableGameMenuCollectionStoryInfo> CollectionStoryList;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuCollectionMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuCollectionMenuInfo");
static_assert(sizeof(FRCVariableGameMenuCollectionMenuInfo) == 0x000018, "Wrong size on FRCVariableGameMenuCollectionMenuInfo");
static_assert(offsetof(FRCVariableGameMenuCollectionMenuInfo, bOpen) == 0x000000, "Member 'FRCVariableGameMenuCollectionMenuInfo::bOpen' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCollectionMenuInfo, bAccess) == 0x000001, "Member 'FRCVariableGameMenuCollectionMenuInfo::bAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCollectionMenuInfo, bHintDraw) == 0x000002, "Member 'FRCVariableGameMenuCollectionMenuInfo::bHintDraw' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCollectionMenuInfo, bHintAccess) == 0x000003, "Member 'FRCVariableGameMenuCollectionMenuInfo::bHintAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCollectionMenuInfo, CollectionStoryList) == 0x000008, "Member 'FRCVariableGameMenuCollectionMenuInfo::CollectionStoryList' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuTutorialInfo
// 0x000C (0x000C - 0x0000)
struct FRCVariableGameMenuTutorialInfo final
{
public:
	class FName                                   TutorialID;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCVariableGameMenuTutorialInfo) == 0x000004, "Wrong alignment on FRCVariableGameMenuTutorialInfo");
static_assert(sizeof(FRCVariableGameMenuTutorialInfo) == 0x00000C, "Wrong size on FRCVariableGameMenuTutorialInfo");
static_assert(offsetof(FRCVariableGameMenuTutorialInfo, TutorialID) == 0x000000, "Member 'FRCVariableGameMenuTutorialInfo::TutorialID' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTutorialInfo, bNew) == 0x000008, "Member 'FRCVariableGameMenuTutorialInfo::bNew' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuGlossaryMenuInfo
// 0x0028 (0x0028 - 0x0000)
struct FRCVariableGameMenuGlossaryMenuInfo final
{
public:
	bool                                          bAccess;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableGameMenuGlossaryInfo> GlossaryList;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCVariableGameMenuTutorialInfo> TutorialList;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuGlossaryMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuGlossaryMenuInfo");
static_assert(sizeof(FRCVariableGameMenuGlossaryMenuInfo) == 0x000028, "Wrong size on FRCVariableGameMenuGlossaryMenuInfo");
static_assert(offsetof(FRCVariableGameMenuGlossaryMenuInfo, bAccess) == 0x000000, "Member 'FRCVariableGameMenuGlossaryMenuInfo::bAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGlossaryMenuInfo, GlossaryList) == 0x000008, "Member 'FRCVariableGameMenuGlossaryMenuInfo::GlossaryList' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGlossaryMenuInfo, TutorialList) == 0x000018, "Member 'FRCVariableGameMenuGlossaryMenuInfo::TutorialList' has a wrong offset!");

// ScriptStruct RC.RCVariableTanteiPointResultInfo
// 0x0008 (0x0008 - 0x0000)
struct FRCVariableTanteiPointResultInfo final
{
public:
	int32                                         Chapter;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TanteiPoint;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableTanteiPointResultInfo) == 0x000004, "Wrong alignment on FRCVariableTanteiPointResultInfo");
static_assert(sizeof(FRCVariableTanteiPointResultInfo) == 0x000008, "Wrong size on FRCVariableTanteiPointResultInfo");
static_assert(offsetof(FRCVariableTanteiPointResultInfo, Chapter) == 0x000000, "Member 'FRCVariableTanteiPointResultInfo::Chapter' has a wrong offset!");
static_assert(offsetof(FRCVariableTanteiPointResultInfo, TanteiPoint) == 0x000004, "Member 'FRCVariableTanteiPointResultInfo::TanteiPoint' has a wrong offset!");

// ScriptStruct RC.RCVariableTanteiSystemInfo
// 0x0028 (0x0028 - 0x0000)
struct FRCVariableTanteiSystemInfo final
{
public:
	int32                                         TotalTanteiPoint;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TanteiRank;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TanteiPointCheckList;                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCVariableTanteiPointResultInfo> ResultList;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableTanteiSystemInfo) == 0x000008, "Wrong alignment on FRCVariableTanteiSystemInfo");
static_assert(sizeof(FRCVariableTanteiSystemInfo) == 0x000028, "Wrong size on FRCVariableTanteiSystemInfo");
static_assert(offsetof(FRCVariableTanteiSystemInfo, TotalTanteiPoint) == 0x000000, "Member 'FRCVariableTanteiSystemInfo::TotalTanteiPoint' has a wrong offset!");
static_assert(offsetof(FRCVariableTanteiSystemInfo, TanteiRank) == 0x000004, "Member 'FRCVariableTanteiSystemInfo::TanteiRank' has a wrong offset!");
static_assert(offsetof(FRCVariableTanteiSystemInfo, TanteiPointCheckList) == 0x000008, "Member 'FRCVariableTanteiSystemInfo::TanteiPointCheckList' has a wrong offset!");
static_assert(offsetof(FRCVariableTanteiSystemInfo, ResultList) == 0x000018, "Member 'FRCVariableTanteiSystemInfo::ResultList' has a wrong offset!");

// ScriptStruct RC.RCVariableFigureInfo
// 0x000C (0x000C - 0x0000)
struct FRCVariableFigureInfo final
{
public:
	class FName                                   PersonID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FigureNum;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableFigureInfo) == 0x000004, "Wrong alignment on FRCVariableFigureInfo");
static_assert(sizeof(FRCVariableFigureInfo) == 0x00000C, "Wrong size on FRCVariableFigureInfo");
static_assert(offsetof(FRCVariableFigureInfo, PersonID) == 0x000000, "Member 'FRCVariableFigureInfo::PersonID' has a wrong offset!");
static_assert(offsetof(FRCVariableFigureInfo, FigureNum) == 0x000008, "Member 'FRCVariableFigureInfo::FigureNum' has a wrong offset!");

// ScriptStruct RC.RCVariableFigureAllInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCVariableFigureAllInfo final
{
public:
	TArray<struct FRCVariableFigureInfo>          FigureInfoList;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableFigureAllInfo) == 0x000008, "Wrong alignment on FRCVariableFigureAllInfo");
static_assert(sizeof(FRCVariableFigureAllInfo) == 0x000010, "Wrong size on FRCVariableFigureAllInfo");
static_assert(offsetof(FRCVariableFigureAllInfo, FigureInfoList) == 0x000000, "Member 'FRCVariableFigureAllInfo::FigureInfoList' has a wrong offset!");

// ScriptStruct RC.RCVariableNazoResultRoundInfo
// 0x0008 (0x0008 - 0x0000)
struct FRCVariableNazoResultRoundInfo final
{
public:
	int32                                         Round;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContinueCount;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableNazoResultRoundInfo) == 0x000004, "Wrong alignment on FRCVariableNazoResultRoundInfo");
static_assert(sizeof(FRCVariableNazoResultRoundInfo) == 0x000008, "Wrong size on FRCVariableNazoResultRoundInfo");
static_assert(offsetof(FRCVariableNazoResultRoundInfo, Round) == 0x000000, "Member 'FRCVariableNazoResultRoundInfo::Round' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultRoundInfo, ContinueCount) == 0x000004, "Member 'FRCVariableNazoResultRoundInfo::ContinueCount' has a wrong offset!");

// ScriptStruct RC.RCVariableNazoResultInfo
// 0x0038 (0x0038 - 0x0000)
struct FRCVariableNazoResultInfo final
{
public:
	class FName                                   MinigameID;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListNum;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNazoGameMode                               NazoGameMode;                                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FailureCount;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailureCount2;                                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TanteiPoint;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TanteiPoint2;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRCVariableNazoResultRoundInfo> RoundInfo;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableNazoResultInfo) == 0x000008, "Wrong alignment on FRCVariableNazoResultInfo");
static_assert(sizeof(FRCVariableNazoResultInfo) == 0x000038, "Wrong size on FRCVariableNazoResultInfo");
static_assert(offsetof(FRCVariableNazoResultInfo, MinigameID) == 0x000000, "Member 'FRCVariableNazoResultInfo::MinigameID' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultInfo, ListNum) == 0x000008, "Member 'FRCVariableNazoResultInfo::ListNum' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultInfo, Scene) == 0x00000C, "Member 'FRCVariableNazoResultInfo::Scene' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultInfo, NazoGameMode) == 0x000014, "Member 'FRCVariableNazoResultInfo::NazoGameMode' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultInfo, FailureCount) == 0x000018, "Member 'FRCVariableNazoResultInfo::FailureCount' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultInfo, FailureCount2) == 0x00001C, "Member 'FRCVariableNazoResultInfo::FailureCount2' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultInfo, TanteiPoint) == 0x000020, "Member 'FRCVariableNazoResultInfo::TanteiPoint' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultInfo, TanteiPoint2) == 0x000024, "Member 'FRCVariableNazoResultInfo::TanteiPoint2' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultInfo, RoundInfo) == 0x000028, "Member 'FRCVariableNazoResultInfo::RoundInfo' has a wrong offset!");

// ScriptStruct RC.RCVariableNazoResultList
// 0x0038 (0x0038 - 0x0000)
struct FRCVariableNazoResultList final
{
public:
	int32                                         Chapter;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableNazoResultInfo>      ResultList;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	ERCNzResultRankValue                          Rank;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNzResultRankValue                          HpRank;                                            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RewardPoint;                                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCNzResultRankValue                          OldHiScoreRank;                                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OldHiRewardPoint;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldHiPoint;                                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContinueCount;                                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCVariableNazoResultList) == 0x000008, "Wrong alignment on FRCVariableNazoResultList");
static_assert(sizeof(FRCVariableNazoResultList) == 0x000038, "Wrong size on FRCVariableNazoResultList");
static_assert(offsetof(FRCVariableNazoResultList, Chapter) == 0x000000, "Member 'FRCVariableNazoResultList::Chapter' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultList, ResultList) == 0x000008, "Member 'FRCVariableNazoResultList::ResultList' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultList, Rank) == 0x000018, "Member 'FRCVariableNazoResultList::Rank' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultList, HpRank) == 0x000019, "Member 'FRCVariableNazoResultList::HpRank' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultList, RewardPoint) == 0x00001C, "Member 'FRCVariableNazoResultList::RewardPoint' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultList, Point) == 0x000020, "Member 'FRCVariableNazoResultList::Point' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultList, OldHiScoreRank) == 0x000024, "Member 'FRCVariableNazoResultList::OldHiScoreRank' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultList, OldHiRewardPoint) == 0x000028, "Member 'FRCVariableNazoResultList::OldHiRewardPoint' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultList, OldHiPoint) == 0x00002C, "Member 'FRCVariableNazoResultList::OldHiPoint' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoResultList, ContinueCount) == 0x000030, "Member 'FRCVariableNazoResultList::ContinueCount' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuGalleryMenuInfo
// 0x0001 (0x0001 - 0x0000)
struct FRCVariableGameMenuGalleryMenuInfo final
{
public:
	bool                                          bAccess;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuGalleryMenuInfo) == 0x000001, "Wrong alignment on FRCVariableGameMenuGalleryMenuInfo");
static_assert(sizeof(FRCVariableGameMenuGalleryMenuInfo) == 0x000001, "Wrong size on FRCVariableGameMenuGalleryMenuInfo");
static_assert(offsetof(FRCVariableGameMenuGalleryMenuInfo, bAccess) == 0x000000, "Member 'FRCVariableGameMenuGalleryMenuInfo::bAccess' has a wrong offset!");

// ScriptStruct RC.RCVariableNazoBattleInfo
// 0x0018 (0x0018 - 0x0000)
struct FRCVariableNazoBattleInfo final
{
public:
	int32                                         HanronSlash;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GayaSlash;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hajiki;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assist;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Clear3Way;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JustMove;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableNazoBattleInfo) == 0x000004, "Wrong alignment on FRCVariableNazoBattleInfo");
static_assert(sizeof(FRCVariableNazoBattleInfo) == 0x000018, "Wrong size on FRCVariableNazoBattleInfo");
static_assert(offsetof(FRCVariableNazoBattleInfo, HanronSlash) == 0x000000, "Member 'FRCVariableNazoBattleInfo::HanronSlash' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoBattleInfo, GayaSlash) == 0x000004, "Member 'FRCVariableNazoBattleInfo::GayaSlash' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoBattleInfo, Hajiki) == 0x000008, "Member 'FRCVariableNazoBattleInfo::Hajiki' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoBattleInfo, Assist) == 0x00000C, "Member 'FRCVariableNazoBattleInfo::Assist' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoBattleInfo, Clear3Way) == 0x000010, "Member 'FRCVariableNazoBattleInfo::Clear3Way' has a wrong offset!");
static_assert(offsetof(FRCVariableNazoBattleInfo, JustMove) == 0x000014, "Member 'FRCVariableNazoBattleInfo::JustMove' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuGalleryBgmInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCVariableGameMenuGalleryBgmInfo final
{
public:
	class FName                                   BgmID;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNum;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCVariableGameMenuGalleryBgmInfo) == 0x000004, "Wrong alignment on FRCVariableGameMenuGalleryBgmInfo");
static_assert(sizeof(FRCVariableGameMenuGalleryBgmInfo) == 0x000010, "Wrong size on FRCVariableGameMenuGalleryBgmInfo");
static_assert(offsetof(FRCVariableGameMenuGalleryBgmInfo, BgmID) == 0x000000, "Member 'FRCVariableGameMenuGalleryBgmInfo::BgmID' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGalleryBgmInfo, SortNum) == 0x000008, "Member 'FRCVariableGameMenuGalleryBgmInfo::SortNum' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGalleryBgmInfo, bEnable) == 0x00000C, "Member 'FRCVariableGameMenuGalleryBgmInfo::bEnable' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuGalleryBgmInfo, bNew) == 0x00000D, "Member 'FRCVariableGameMenuGalleryBgmInfo::bNew' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuGalleryBgmMenuInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCVariableGameMenuGalleryBgmMenuInfo final
{
public:
	TArray<struct FRCVariableGameMenuGalleryBgmInfo> BgmGalleryList;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuGalleryBgmMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuGalleryBgmMenuInfo");
static_assert(sizeof(FRCVariableGameMenuGalleryBgmMenuInfo) == 0x000010, "Wrong size on FRCVariableGameMenuGalleryBgmMenuInfo");
static_assert(offsetof(FRCVariableGameMenuGalleryBgmMenuInfo, BgmGalleryList) == 0x000000, "Member 'FRCVariableGameMenuGalleryBgmMenuInfo::BgmGalleryList' has a wrong offset!");

// ScriptStruct RC.RCVariableSystemSave
// 0x0100 (0x0100 - 0x0000)
struct FRCVariableSystemSave final
{
public:
	bool                                          bIsGameClear;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERCChapter>                            ClearChapterList;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRCVariableTanteiSystemInfo            TanteiSystemInfo;                                  // 0x0018(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableFigureAllInfo               FigureAllInfo;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuCollectionMenuInfo  CollectionInfo;                                    // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuGlossaryMenuInfo    GlossaryMenuList;                                  // 0x0068(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableNazoBattleInfo              BattleInfo;                                        // 0x0090(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FRCVariableNazoResultList>      ResultInfo;                                        // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           UlockAchievementList;                              // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCAchievementSaveInfo>         UlockAchievementSaveList;                          // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuGalleryMenuInfo     GalleryInfo;                                       // 0x00D8(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCVariableGameMenuGalleryBgmMenuInfo  GalleryBgmInfo;                                    // 0x00E0(0x0010)(NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuGalleryMovieMenuInfo GalleryMovieInfo;                                  // 0x00F0(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableSystemSave) == 0x000008, "Wrong alignment on FRCVariableSystemSave");
static_assert(sizeof(FRCVariableSystemSave) == 0x000100, "Wrong size on FRCVariableSystemSave");
static_assert(offsetof(FRCVariableSystemSave, bIsGameClear) == 0x000000, "Member 'FRCVariableSystemSave::bIsGameClear' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, ClearChapterList) == 0x000008, "Member 'FRCVariableSystemSave::ClearChapterList' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, TanteiSystemInfo) == 0x000018, "Member 'FRCVariableSystemSave::TanteiSystemInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, FigureAllInfo) == 0x000040, "Member 'FRCVariableSystemSave::FigureAllInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, CollectionInfo) == 0x000050, "Member 'FRCVariableSystemSave::CollectionInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, GlossaryMenuList) == 0x000068, "Member 'FRCVariableSystemSave::GlossaryMenuList' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, BattleInfo) == 0x000090, "Member 'FRCVariableSystemSave::BattleInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, ResultInfo) == 0x0000A8, "Member 'FRCVariableSystemSave::ResultInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, UlockAchievementList) == 0x0000B8, "Member 'FRCVariableSystemSave::UlockAchievementList' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, UlockAchievementSaveList) == 0x0000C8, "Member 'FRCVariableSystemSave::UlockAchievementSaveList' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, GalleryInfo) == 0x0000D8, "Member 'FRCVariableSystemSave::GalleryInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, GalleryBgmInfo) == 0x0000E0, "Member 'FRCVariableSystemSave::GalleryBgmInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSystemSave, GalleryMovieInfo) == 0x0000F0, "Member 'FRCVariableSystemSave::GalleryMovieInfo' has a wrong offset!");

// ScriptStruct RC.RCParamMenuAreaMapListTableRow
// 0x0048 (0x0050 - 0x0008)
struct FRCParamMenuAreaMapListTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftTop;                                           // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightBottom;                                       // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MapScale;                                          // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureName;                                       // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DlcType;                                           // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamMenuAreaMapListTableRow) == 0x000008, "Wrong alignment on FRCParamMenuAreaMapListTableRow");
static_assert(sizeof(FRCParamMenuAreaMapListTableRow) == 0x000050, "Wrong size on FRCParamMenuAreaMapListTableRow");
static_assert(offsetof(FRCParamMenuAreaMapListTableRow, MapID) == 0x000008, "Member 'FRCParamMenuAreaMapListTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamMenuAreaMapListTableRow, AreaID) == 0x000010, "Member 'FRCParamMenuAreaMapListTableRow::AreaID' has a wrong offset!");
static_assert(offsetof(FRCParamMenuAreaMapListTableRow, LeftTop) == 0x000018, "Member 'FRCParamMenuAreaMapListTableRow::LeftTop' has a wrong offset!");
static_assert(offsetof(FRCParamMenuAreaMapListTableRow, RightBottom) == 0x000024, "Member 'FRCParamMenuAreaMapListTableRow::RightBottom' has a wrong offset!");
static_assert(offsetof(FRCParamMenuAreaMapListTableRow, MapScale) == 0x000030, "Member 'FRCParamMenuAreaMapListTableRow::MapScale' has a wrong offset!");
static_assert(offsetof(FRCParamMenuAreaMapListTableRow, TextureName) == 0x00003C, "Member 'FRCParamMenuAreaMapListTableRow::TextureName' has a wrong offset!");
static_assert(offsetof(FRCParamMenuAreaMapListTableRow, DlcType) == 0x000044, "Member 'FRCParamMenuAreaMapListTableRow::DlcType' has a wrong offset!");

// ScriptStruct RC.RCParamMenuContentsListTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamMenuContentsListTableRow final : public FTableRowBase
{
public:
	class FName                                   ContentsID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FocusLeft;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FocusRight;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FocusUp;                                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FocusDown;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HelpTextID;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamMenuContentsListTableRow) == 0x000008, "Wrong alignment on FRCParamMenuContentsListTableRow");
static_assert(sizeof(FRCParamMenuContentsListTableRow) == 0x000030, "Wrong size on FRCParamMenuContentsListTableRow");
static_assert(offsetof(FRCParamMenuContentsListTableRow, ContentsID) == 0x000008, "Member 'FRCParamMenuContentsListTableRow::ContentsID' has a wrong offset!");
static_assert(offsetof(FRCParamMenuContentsListTableRow, WidgetName) == 0x000010, "Member 'FRCParamMenuContentsListTableRow::WidgetName' has a wrong offset!");
static_assert(offsetof(FRCParamMenuContentsListTableRow, FocusLeft) == 0x000018, "Member 'FRCParamMenuContentsListTableRow::FocusLeft' has a wrong offset!");
static_assert(offsetof(FRCParamMenuContentsListTableRow, FocusRight) == 0x00001C, "Member 'FRCParamMenuContentsListTableRow::FocusRight' has a wrong offset!");
static_assert(offsetof(FRCParamMenuContentsListTableRow, FocusUp) == 0x000020, "Member 'FRCParamMenuContentsListTableRow::FocusUp' has a wrong offset!");
static_assert(offsetof(FRCParamMenuContentsListTableRow, FocusDown) == 0x000024, "Member 'FRCParamMenuContentsListTableRow::FocusDown' has a wrong offset!");
static_assert(offsetof(FRCParamMenuContentsListTableRow, HelpTextID) == 0x000028, "Member 'FRCParamMenuContentsListTableRow::HelpTextID' has a wrong offset!");

// ScriptStruct RC.RCParamMenuStatusTableRow
// 0x00A8 (0x00B0 - 0x0008)
struct FRCParamMenuStatusTableRow final : public FTableRowBase
{
public:
	class FName                                   MenuID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusMap;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusKaikagi;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusMQuest;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusSQuest;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusPersona;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusSkill;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusCharacter;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusGlossary;                                // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusCollection;                              // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusSave;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuStatusOption;                                  // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuType;                                          // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapStatus;                                         // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerUnknown;                                     // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiStatus;                                     // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TanteiRankDraw;                                    // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M03Icon;                                           // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M07Icon;                                           // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerIcon;                                        // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillEdit;                                         // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamMenuStatusTableRow) == 0x000008, "Wrong alignment on FRCParamMenuStatusTableRow");
static_assert(sizeof(FRCParamMenuStatusTableRow) == 0x0000B0, "Wrong size on FRCParamMenuStatusTableRow");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuID) == 0x000008, "Member 'FRCParamMenuStatusTableRow::MenuID' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusMap) == 0x000010, "Member 'FRCParamMenuStatusTableRow::MenuStatusMap' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusKaikagi) == 0x000018, "Member 'FRCParamMenuStatusTableRow::MenuStatusKaikagi' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusMQuest) == 0x000020, "Member 'FRCParamMenuStatusTableRow::MenuStatusMQuest' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusSQuest) == 0x000028, "Member 'FRCParamMenuStatusTableRow::MenuStatusSQuest' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusPersona) == 0x000030, "Member 'FRCParamMenuStatusTableRow::MenuStatusPersona' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusSkill) == 0x000038, "Member 'FRCParamMenuStatusTableRow::MenuStatusSkill' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusCharacter) == 0x000040, "Member 'FRCParamMenuStatusTableRow::MenuStatusCharacter' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusGlossary) == 0x000048, "Member 'FRCParamMenuStatusTableRow::MenuStatusGlossary' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusCollection) == 0x000050, "Member 'FRCParamMenuStatusTableRow::MenuStatusCollection' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusSave) == 0x000058, "Member 'FRCParamMenuStatusTableRow::MenuStatusSave' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuStatusOption) == 0x000060, "Member 'FRCParamMenuStatusTableRow::MenuStatusOption' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MenuType) == 0x000068, "Member 'FRCParamMenuStatusTableRow::MenuType' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, MapStatus) == 0x000070, "Member 'FRCParamMenuStatusTableRow::MapStatus' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, PlayerUnknown) == 0x000078, "Member 'FRCParamMenuStatusTableRow::PlayerUnknown' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, KaikagiStatus) == 0x000080, "Member 'FRCParamMenuStatusTableRow::KaikagiStatus' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, TanteiRankDraw) == 0x000088, "Member 'FRCParamMenuStatusTableRow::TanteiRankDraw' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, M03Icon) == 0x000090, "Member 'FRCParamMenuStatusTableRow::M03Icon' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, M07Icon) == 0x000098, "Member 'FRCParamMenuStatusTableRow::M07Icon' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, PlayerIcon) == 0x0000A0, "Member 'FRCParamMenuStatusTableRow::PlayerIcon' has a wrong offset!");
static_assert(offsetof(FRCParamMenuStatusTableRow, SkillEdit) == 0x0000A8, "Member 'FRCParamMenuStatusTableRow::SkillEdit' has a wrong offset!");

// ScriptStruct RC.RCParamMenuWorldMapListTableRow
// 0x0050 (0x0058 - 0x0008)
struct FRCParamMenuWorldMapListTableRow final : public FTableRowBase
{
public:
	TArray<class FName>                           AreaID;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AreaTextID;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewAreaID;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           IncludeAreaID;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ChangeMapID;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNotNewShow;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamMenuWorldMapListTableRow) == 0x000008, "Wrong alignment on FRCParamMenuWorldMapListTableRow");
static_assert(sizeof(FRCParamMenuWorldMapListTableRow) == 0x000058, "Wrong size on FRCParamMenuWorldMapListTableRow");
static_assert(offsetof(FRCParamMenuWorldMapListTableRow, AreaID) == 0x000008, "Member 'FRCParamMenuWorldMapListTableRow::AreaID' has a wrong offset!");
static_assert(offsetof(FRCParamMenuWorldMapListTableRow, AreaTextID) == 0x000018, "Member 'FRCParamMenuWorldMapListTableRow::AreaTextID' has a wrong offset!");
static_assert(offsetof(FRCParamMenuWorldMapListTableRow, WidgetName) == 0x000020, "Member 'FRCParamMenuWorldMapListTableRow::WidgetName' has a wrong offset!");
static_assert(offsetof(FRCParamMenuWorldMapListTableRow, NewAreaID) == 0x000028, "Member 'FRCParamMenuWorldMapListTableRow::NewAreaID' has a wrong offset!");
static_assert(offsetof(FRCParamMenuWorldMapListTableRow, IncludeAreaID) == 0x000030, "Member 'FRCParamMenuWorldMapListTableRow::IncludeAreaID' has a wrong offset!");
static_assert(offsetof(FRCParamMenuWorldMapListTableRow, ChangeMapID) == 0x000040, "Member 'FRCParamMenuWorldMapListTableRow::ChangeMapID' has a wrong offset!");
static_assert(offsetof(FRCParamMenuWorldMapListTableRow, bNotNewShow) == 0x000050, "Member 'FRCParamMenuWorldMapListTableRow::bNotNewShow' has a wrong offset!");

// ScriptStruct RC.RCSequenceSectionEndData_Base
// 0x0010 (0x0010 - 0x0000)
struct FRCSequenceSectionEndData_Base
{
public:
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSequenceSectionEndData_Base) == 0x000008, "Wrong alignment on FRCSequenceSectionEndData_Base");
static_assert(sizeof(FRCSequenceSectionEndData_Base) == 0x000010, "Wrong size on FRCSequenceSectionEndData_Base");
static_assert(offsetof(FRCSequenceSectionEndData_Base, SequencePlayer) == 0x000000, "Member 'FRCSequenceSectionEndData_Base::SequencePlayer' has a wrong offset!");

// ScriptStruct RC.RCSequenceSectionEndData_Subtitle
// 0x0010 (0x0020 - 0x0010)
struct FRCSequenceSectionEndData_Subtitle final : public FRCSequenceSectionEndData_Base
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSequenceSectionEndData_Subtitle) == 0x000008, "Wrong alignment on FRCSequenceSectionEndData_Subtitle");
static_assert(sizeof(FRCSequenceSectionEndData_Subtitle) == 0x000020, "Wrong size on FRCSequenceSectionEndData_Subtitle");

// ScriptStruct RC.RCParamMinimapListTableRow
// 0x0048 (0x0050 - 0x0008)
struct FRCParamMinimapListTableRow final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftTop;                                           // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightBottom;                                       // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MapScale;                                          // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureName;                                       // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DlcType;                                           // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamMinimapListTableRow) == 0x000008, "Wrong alignment on FRCParamMinimapListTableRow");
static_assert(sizeof(FRCParamMinimapListTableRow) == 0x000050, "Wrong size on FRCParamMinimapListTableRow");
static_assert(offsetof(FRCParamMinimapListTableRow, MapID) == 0x000008, "Member 'FRCParamMinimapListTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamMinimapListTableRow, AreaID) == 0x000010, "Member 'FRCParamMinimapListTableRow::AreaID' has a wrong offset!");
static_assert(offsetof(FRCParamMinimapListTableRow, LeftTop) == 0x000018, "Member 'FRCParamMinimapListTableRow::LeftTop' has a wrong offset!");
static_assert(offsetof(FRCParamMinimapListTableRow, RightBottom) == 0x000024, "Member 'FRCParamMinimapListTableRow::RightBottom' has a wrong offset!");
static_assert(offsetof(FRCParamMinimapListTableRow, MapScale) == 0x000030, "Member 'FRCParamMinimapListTableRow::MapScale' has a wrong offset!");
static_assert(offsetof(FRCParamMinimapListTableRow, TextureName) == 0x00003C, "Member 'FRCParamMinimapListTableRow::TextureName' has a wrong offset!");
static_assert(offsetof(FRCParamMinimapListTableRow, DlcType) == 0x000044, "Member 'FRCParamMinimapListTableRow::DlcType' has a wrong offset!");

// ScriptStruct RC.RCParamMobListTableRow
// 0x00C0 (0x00C8 - 0x0008)
struct FRCParamMobListTableRow final : public FTableRowBase
{
public:
	class FName                                   MobID;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseId;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinId;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EyeId;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FormId;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachmentFormId;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionFolderName;                                  // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KakiwariModelId;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KakiwariMotionId;                                  // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IntegrationMobModelId;                             // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IntegrationMobFormId;                              // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientColor_R;                                    // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientColor_G;                                    // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientColor_B;                                    // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalColor_R;                                // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalColor_G;                                // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalColor_B;                                // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 dummy;                                             // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamMobListTableRow) == 0x000008, "Wrong alignment on FRCParamMobListTableRow");
static_assert(sizeof(FRCParamMobListTableRow) == 0x0000C8, "Wrong size on FRCParamMobListTableRow");
static_assert(offsetof(FRCParamMobListTableRow, MobID) == 0x000008, "Member 'FRCParamMobListTableRow::MobID' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, BaseId) == 0x000010, "Member 'FRCParamMobListTableRow::BaseId' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, SkinId) == 0x000020, "Member 'FRCParamMobListTableRow::SkinId' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, EyeId) == 0x000030, "Member 'FRCParamMobListTableRow::EyeId' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, FormId) == 0x000040, "Member 'FRCParamMobListTableRow::FormId' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, AttachmentFormId) == 0x000050, "Member 'FRCParamMobListTableRow::AttachmentFormId' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, MotionFolderName) == 0x000060, "Member 'FRCParamMobListTableRow::MotionFolderName' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, KakiwariModelId) == 0x000068, "Member 'FRCParamMobListTableRow::KakiwariModelId' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, KakiwariMotionId) == 0x000078, "Member 'FRCParamMobListTableRow::KakiwariMotionId' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, IntegrationMobModelId) == 0x000080, "Member 'FRCParamMobListTableRow::IntegrationMobModelId' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, IntegrationMobFormId) == 0x000090, "Member 'FRCParamMobListTableRow::IntegrationMobFormId' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, AmbientColor_R) == 0x0000A0, "Member 'FRCParamMobListTableRow::AmbientColor_R' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, AmbientColor_G) == 0x0000A4, "Member 'FRCParamMobListTableRow::AmbientColor_G' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, AmbientColor_B) == 0x0000A8, "Member 'FRCParamMobListTableRow::AmbientColor_B' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, DirectionalColor_R) == 0x0000AC, "Member 'FRCParamMobListTableRow::DirectionalColor_R' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, DirectionalColor_G) == 0x0000B0, "Member 'FRCParamMobListTableRow::DirectionalColor_G' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, DirectionalColor_B) == 0x0000B4, "Member 'FRCParamMobListTableRow::DirectionalColor_B' has a wrong offset!");
static_assert(offsetof(FRCParamMobListTableRow, dummy) == 0x0000B8, "Member 'FRCParamMobListTableRow::dummy' has a wrong offset!");

// ScriptStruct RC.ManualMotionData
// 0x0020 (0x0020 - 0x0000)
struct FManualMotionData final
{
public:
	class URCCharacterProxy*                      pCharacter;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VoiceID;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacialName;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManualMotionData) == 0x000008, "Wrong alignment on FManualMotionData");
static_assert(sizeof(FManualMotionData) == 0x000020, "Wrong size on FManualMotionData");
static_assert(offsetof(FManualMotionData, pCharacter) == 0x000000, "Member 'FManualMotionData::pCharacter' has a wrong offset!");
static_assert(offsetof(FManualMotionData, VoiceID) == 0x000008, "Member 'FManualMotionData::VoiceID' has a wrong offset!");
static_assert(offsetof(FManualMotionData, FacialName) == 0x000018, "Member 'FManualMotionData::FacialName' has a wrong offset!");

// ScriptStruct RC.RCParamMovieDataTableRow
// 0x01D8 (0x01E0 - 0x0008)
struct FRCParamMovieDataTableRow final : public FTableRowBase
{
public:
	class FString                                 sound_jp;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sound_en;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DlcType;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 movieSource_jp;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 texture_jp;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 material_jp;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 movieSource_en;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 texture_en;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 material_en;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 movieSource_zh_hans;                               // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 texture_zh_hans;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 material_zh_hans;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 movieSource_zh_hant;                               // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 texture_zh_hant;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 material_zh_hant;                                  // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 movieSource_fr;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 texture_fr;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 material_fr;                                       // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 movieSource_it;                                    // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 texture_it;                                        // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 material_it;                                       // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 movieSource_de;                                    // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 texture_de;                                        // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 material_de;                                       // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 movieSource_es;                                    // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 texture_es;                                        // 0x0190(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 material_es;                                       // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 movieSource_ko;                                    // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 texture_ko;                                        // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 material_ko;                                       // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamMovieDataTableRow) == 0x000008, "Wrong alignment on FRCParamMovieDataTableRow");
static_assert(sizeof(FRCParamMovieDataTableRow) == 0x0001E0, "Wrong size on FRCParamMovieDataTableRow");
static_assert(offsetof(FRCParamMovieDataTableRow, sound_jp) == 0x000008, "Member 'FRCParamMovieDataTableRow::sound_jp' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, sound_en) == 0x000018, "Member 'FRCParamMovieDataTableRow::sound_en' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, DlcType) == 0x000028, "Member 'FRCParamMovieDataTableRow::DlcType' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, movieSource_jp) == 0x000030, "Member 'FRCParamMovieDataTableRow::movieSource_jp' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, texture_jp) == 0x000040, "Member 'FRCParamMovieDataTableRow::texture_jp' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, material_jp) == 0x000050, "Member 'FRCParamMovieDataTableRow::material_jp' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, movieSource_en) == 0x000060, "Member 'FRCParamMovieDataTableRow::movieSource_en' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, texture_en) == 0x000070, "Member 'FRCParamMovieDataTableRow::texture_en' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, material_en) == 0x000080, "Member 'FRCParamMovieDataTableRow::material_en' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, movieSource_zh_hans) == 0x000090, "Member 'FRCParamMovieDataTableRow::movieSource_zh_hans' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, texture_zh_hans) == 0x0000A0, "Member 'FRCParamMovieDataTableRow::texture_zh_hans' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, material_zh_hans) == 0x0000B0, "Member 'FRCParamMovieDataTableRow::material_zh_hans' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, movieSource_zh_hant) == 0x0000C0, "Member 'FRCParamMovieDataTableRow::movieSource_zh_hant' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, texture_zh_hant) == 0x0000D0, "Member 'FRCParamMovieDataTableRow::texture_zh_hant' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, material_zh_hant) == 0x0000E0, "Member 'FRCParamMovieDataTableRow::material_zh_hant' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, movieSource_fr) == 0x0000F0, "Member 'FRCParamMovieDataTableRow::movieSource_fr' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, texture_fr) == 0x000100, "Member 'FRCParamMovieDataTableRow::texture_fr' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, material_fr) == 0x000110, "Member 'FRCParamMovieDataTableRow::material_fr' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, movieSource_it) == 0x000120, "Member 'FRCParamMovieDataTableRow::movieSource_it' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, texture_it) == 0x000130, "Member 'FRCParamMovieDataTableRow::texture_it' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, material_it) == 0x000140, "Member 'FRCParamMovieDataTableRow::material_it' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, movieSource_de) == 0x000150, "Member 'FRCParamMovieDataTableRow::movieSource_de' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, texture_de) == 0x000160, "Member 'FRCParamMovieDataTableRow::texture_de' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, material_de) == 0x000170, "Member 'FRCParamMovieDataTableRow::material_de' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, movieSource_es) == 0x000180, "Member 'FRCParamMovieDataTableRow::movieSource_es' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, texture_es) == 0x000190, "Member 'FRCParamMovieDataTableRow::texture_es' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, material_es) == 0x0001A0, "Member 'FRCParamMovieDataTableRow::material_es' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, movieSource_ko) == 0x0001B0, "Member 'FRCParamMovieDataTableRow::movieSource_ko' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, texture_ko) == 0x0001C0, "Member 'FRCParamMovieDataTableRow::texture_ko' has a wrong offset!");
static_assert(offsetof(FRCParamMovieDataTableRow, material_ko) == 0x0001D0, "Member 'FRCParamMovieDataTableRow::material_ko' has a wrong offset!");

// ScriptStruct RC.RCParamNzCriminalTableRow
// 0x0300 (0x0308 - 0x0008)
struct FRCParamNzCriminalTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestionTextID;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CriminalCharacterID;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HintTextId;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter1ID;                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter1LineID;                           // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter1FacialName;                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter1MotionName;                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter1VoiceID;                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter1FailureLineID;                    // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter1FailureFacialName;                // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter1FailureMotionName;                // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter1FailureVoiceID;                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter2ID;                               // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter2LineID;                           // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter2FacialName;                       // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter2MotionName;                       // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter2VoiceID;                          // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter2FailureLineID;                    // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter2FailureFacialName;                // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter2FailureMotionName;                // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter2FailureVoiceID;                   // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter3ID;                               // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter3LineID;                           // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter3FacialName;                       // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter3MotionName;                       // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter3VoiceID;                          // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter3FailureLineID;                    // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter3FailureFacialName;                // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter3FailureMotionName;                // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter3FailureVoiceID;                   // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter4ID;                               // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter4LineID;                           // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter4FacialName;                       // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter4MotionName;                       // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter4VoiceID;                          // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter4FailureLineID;                    // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter4FailureFacialName;                // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter4FailureMotionName;                // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter4FailureVoiceID;                   // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter5ID;                               // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter5LineID;                           // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter5FacialName;                       // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter5MotionName;                       // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter5VoiceID;                          // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter5FailureLineID;                    // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter5FailureFacialName;                // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter5FailureMotionName;                // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter5FailureVoiceID;                   // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter6ID;                               // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter6LineID;                           // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter6FacialName;                       // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter6MotionName;                       // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter6VoiceID;                          // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter6FailureLineID;                    // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter6FailureFacialName;                // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter6FailureMotionName;                // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter6FailureVoiceID;                   // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter7ID;                               // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter7LineID;                           // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter7FacialName;                       // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter7MotionName;                       // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter7VoiceID;                          // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter7FailureLineID;                    // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter7FailureFacialName;                // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter7FailureMotionName;                // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter7FailureVoiceID;                   // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter8ID;                               // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter8LineID;                           // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter8FacialName;                       // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter8MotionName;                       // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter8VoiceID;                          // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter8FailureLineID;                    // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter8FailureFacialName;                // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter8FailureMotionName;                // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter8FailureVoiceID;                   // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter9ID;                               // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter9LineID;                           // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter9FacialName;                       // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter9MotionName;                       // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter9VoiceID;                          // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter9FailureLineID;                    // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter9FailureFacialName;                // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter9FailureMotionName;                // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter9FailureVoiceID;                   // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter10ID;                              // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter10LineID;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter10FacialName;                      // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter10MotionName;                      // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter10VoiceID;                         // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter10FailureLineID;                   // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter10FailureFacialName;               // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter10FailureMotionName;               // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspectCharacter10FailureVoiceID;                  // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzCriminalTableRow) == 0x000008, "Wrong alignment on FRCParamNzCriminalTableRow");
static_assert(sizeof(FRCParamNzCriminalTableRow) == 0x000308, "Wrong size on FRCParamNzCriminalTableRow");
static_assert(offsetof(FRCParamNzCriminalTableRow, ID) == 0x000008, "Member 'FRCParamNzCriminalTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SceneID) == 0x000018, "Member 'FRCParamNzCriminalTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, QuestionTextID) == 0x000020, "Member 'FRCParamNzCriminalTableRow::QuestionTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, CriminalCharacterID) == 0x000028, "Member 'FRCParamNzCriminalTableRow::CriminalCharacterID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, HintTextId) == 0x000030, "Member 'FRCParamNzCriminalTableRow::HintTextId' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter1ID) == 0x000038, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter1ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter1LineID) == 0x000040, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter1LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter1FacialName) == 0x000048, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter1FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter1MotionName) == 0x000050, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter1MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter1VoiceID) == 0x000058, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter1VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter1FailureLineID) == 0x000060, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter1FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter1FailureFacialName) == 0x000068, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter1FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter1FailureMotionName) == 0x000070, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter1FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter1FailureVoiceID) == 0x000078, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter1FailureVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter2ID) == 0x000080, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter2ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter2LineID) == 0x000088, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter2LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter2FacialName) == 0x000090, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter2FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter2MotionName) == 0x000098, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter2MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter2VoiceID) == 0x0000A0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter2VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter2FailureLineID) == 0x0000A8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter2FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter2FailureFacialName) == 0x0000B0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter2FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter2FailureMotionName) == 0x0000B8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter2FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter2FailureVoiceID) == 0x0000C0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter2FailureVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter3ID) == 0x0000C8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter3ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter3LineID) == 0x0000D0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter3LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter3FacialName) == 0x0000D8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter3FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter3MotionName) == 0x0000E0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter3MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter3VoiceID) == 0x0000E8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter3VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter3FailureLineID) == 0x0000F0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter3FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter3FailureFacialName) == 0x0000F8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter3FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter3FailureMotionName) == 0x000100, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter3FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter3FailureVoiceID) == 0x000108, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter3FailureVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter4ID) == 0x000110, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter4ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter4LineID) == 0x000118, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter4LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter4FacialName) == 0x000120, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter4FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter4MotionName) == 0x000128, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter4MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter4VoiceID) == 0x000130, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter4VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter4FailureLineID) == 0x000138, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter4FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter4FailureFacialName) == 0x000140, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter4FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter4FailureMotionName) == 0x000148, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter4FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter4FailureVoiceID) == 0x000150, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter4FailureVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter5ID) == 0x000158, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter5ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter5LineID) == 0x000160, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter5LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter5FacialName) == 0x000168, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter5FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter5MotionName) == 0x000170, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter5MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter5VoiceID) == 0x000178, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter5VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter5FailureLineID) == 0x000180, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter5FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter5FailureFacialName) == 0x000188, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter5FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter5FailureMotionName) == 0x000190, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter5FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter5FailureVoiceID) == 0x000198, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter5FailureVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter6ID) == 0x0001A0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter6ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter6LineID) == 0x0001A8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter6LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter6FacialName) == 0x0001B0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter6FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter6MotionName) == 0x0001B8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter6MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter6VoiceID) == 0x0001C0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter6VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter6FailureLineID) == 0x0001C8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter6FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter6FailureFacialName) == 0x0001D0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter6FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter6FailureMotionName) == 0x0001D8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter6FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter6FailureVoiceID) == 0x0001E0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter6FailureVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter7ID) == 0x0001E8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter7ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter7LineID) == 0x0001F0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter7LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter7FacialName) == 0x0001F8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter7FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter7MotionName) == 0x000200, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter7MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter7VoiceID) == 0x000208, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter7VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter7FailureLineID) == 0x000210, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter7FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter7FailureFacialName) == 0x000218, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter7FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter7FailureMotionName) == 0x000220, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter7FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter7FailureVoiceID) == 0x000228, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter7FailureVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter8ID) == 0x000230, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter8ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter8LineID) == 0x000238, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter8LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter8FacialName) == 0x000240, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter8FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter8MotionName) == 0x000248, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter8MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter8VoiceID) == 0x000250, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter8VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter8FailureLineID) == 0x000258, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter8FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter8FailureFacialName) == 0x000260, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter8FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter8FailureMotionName) == 0x000268, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter8FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter8FailureVoiceID) == 0x000270, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter8FailureVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter9ID) == 0x000278, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter9ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter9LineID) == 0x000280, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter9LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter9FacialName) == 0x000288, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter9FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter9MotionName) == 0x000290, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter9MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter9VoiceID) == 0x000298, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter9VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter9FailureLineID) == 0x0002A0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter9FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter9FailureFacialName) == 0x0002A8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter9FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter9FailureMotionName) == 0x0002B0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter9FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter9FailureVoiceID) == 0x0002B8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter9FailureVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter10ID) == 0x0002C0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter10ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter10LineID) == 0x0002C8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter10LineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter10FacialName) == 0x0002D0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter10FacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter10MotionName) == 0x0002D8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter10MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter10VoiceID) == 0x0002E0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter10VoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter10FailureLineID) == 0x0002E8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter10FailureLineID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter10FailureFacialName) == 0x0002F0, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter10FailureFacialName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter10FailureMotionName) == 0x0002F8, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter10FailureMotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalTableRow, SuspectCharacter10FailureVoiceID) == 0x000300, "Member 'FRCParamNzCriminalTableRow::SuspectCharacter10FailureVoiceID' has a wrong offset!");

// ScriptStruct RC.ARCVariableInfo
// 0x0010 (0x0010 - 0x0000)
struct FARCVariableInfo final
{
public:
	ERCVariableType                               VariableType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VariableName;                                      // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariableValue;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FARCVariableInfo) == 0x000004, "Wrong alignment on FARCVariableInfo");
static_assert(sizeof(FARCVariableInfo) == 0x000010, "Wrong size on FARCVariableInfo");
static_assert(offsetof(FARCVariableInfo, VariableType) == 0x000000, "Member 'FARCVariableInfo::VariableType' has a wrong offset!");
static_assert(offsetof(FARCVariableInfo, VariableName) == 0x000004, "Member 'FARCVariableInfo::VariableName' has a wrong offset!");
static_assert(offsetof(FARCVariableInfo, VariableValue) == 0x00000C, "Member 'FARCVariableInfo::VariableValue' has a wrong offset!");

// ScriptStruct RC.RCParamNzCriminalCameraSettingTableRow
// 0x0068 (0x0070 - 0x0008)
struct FRCParamNzCriminalCameraSettingTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera1BlendTime;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera2BlendTime;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera3BlendTime;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera4BlendTime;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera5BlendTime;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera6BlendTime;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera7BlendTime;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera8BlendTime;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera9BlendTime;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera10BlendTime;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera1FocalLength;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera2FocalLength;                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera3FocalLength;                                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera4FocalLength;                                // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera5FocalLength;                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera6FocalLength;                                // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera7FocalLength;                                // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera8FocalLength;                                // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera9FocalLength;                                // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera10FocalLength;                               // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzCriminalCameraSettingTableRow) == 0x000008, "Wrong alignment on FRCParamNzCriminalCameraSettingTableRow");
static_assert(sizeof(FRCParamNzCriminalCameraSettingTableRow) == 0x000070, "Wrong size on FRCParamNzCriminalCameraSettingTableRow");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, ID) == 0x000008, "Member 'FRCParamNzCriminalCameraSettingTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, SceneID) == 0x000018, "Member 'FRCParamNzCriminalCameraSettingTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera1BlendTime) == 0x000020, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera1BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera2BlendTime) == 0x000024, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera2BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera3BlendTime) == 0x000028, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera3BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera4BlendTime) == 0x00002C, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera4BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera5BlendTime) == 0x000030, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera5BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera6BlendTime) == 0x000034, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera6BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera7BlendTime) == 0x000038, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera7BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera8BlendTime) == 0x00003C, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera8BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera9BlendTime) == 0x000040, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera9BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera10BlendTime) == 0x000044, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera10BlendTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera1FocalLength) == 0x000048, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera1FocalLength' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera2FocalLength) == 0x00004C, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera2FocalLength' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera3FocalLength) == 0x000050, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera3FocalLength' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera4FocalLength) == 0x000054, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera4FocalLength' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera5FocalLength) == 0x000058, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera5FocalLength' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera6FocalLength) == 0x00005C, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera6FocalLength' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera7FocalLength) == 0x000060, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera7FocalLength' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera8FocalLength) == 0x000064, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera8FocalLength' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera9FocalLength) == 0x000068, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera9FocalLength' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalCameraSettingTableRow, Camera10FocalLength) == 0x00006C, "Member 'FRCParamNzCriminalCameraSettingTableRow::Camera10FocalLength' has a wrong offset!");

// ScriptStruct RC.RCParamNzCriminalSceneTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamNzCriminalSceneTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartQuestionTextFontSize;                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainQuestionTextFontSize;                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoveryPoint;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamagePoint;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzCriminalSceneTableRow) == 0x000008, "Wrong alignment on FRCParamNzCriminalSceneTableRow");
static_assert(sizeof(FRCParamNzCriminalSceneTableRow) == 0x000030, "Wrong size on FRCParamNzCriminalSceneTableRow");
static_assert(offsetof(FRCParamNzCriminalSceneTableRow, ID) == 0x000008, "Member 'FRCParamNzCriminalSceneTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalSceneTableRow, SceneID) == 0x000018, "Member 'FRCParamNzCriminalSceneTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalSceneTableRow, StartQuestionTextFontSize) == 0x000020, "Member 'FRCParamNzCriminalSceneTableRow::StartQuestionTextFontSize' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalSceneTableRow, MainQuestionTextFontSize) == 0x000024, "Member 'FRCParamNzCriminalSceneTableRow::MainQuestionTextFontSize' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalSceneTableRow, RecoveryPoint) == 0x000028, "Member 'FRCParamNzCriminalSceneTableRow::RecoveryPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzCriminalSceneTableRow, DamagePoint) == 0x00002C, "Member 'FRCParamNzCriminalSceneTableRow::DamagePoint' has a wrong offset!");

// ScriptStruct RC.RCSequenceSectionEndData_Character
// 0x0008 (0x0018 - 0x0010)
struct FRCSequenceSectionEndData_Character final : public FRCSequenceSectionEndData_Base
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSequenceSectionEndData_Character) == 0x000008, "Wrong alignment on FRCSequenceSectionEndData_Character");
static_assert(sizeof(FRCSequenceSectionEndData_Character) == 0x000018, "Wrong size on FRCSequenceSectionEndData_Character");

// ScriptStruct RC.RCParamNzFinaleTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamNzFinaleTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SectionIDArray;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           InitialPieceIDArray;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzFinaleTableRow) == 0x000008, "Wrong alignment on FRCParamNzFinaleTableRow");
static_assert(sizeof(FRCParamNzFinaleTableRow) == 0x000040, "Wrong size on FRCParamNzFinaleTableRow");
static_assert(offsetof(FRCParamNzFinaleTableRow, ID) == 0x000008, "Member 'FRCParamNzFinaleTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleTableRow, SceneID) == 0x000018, "Member 'FRCParamNzFinaleTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleTableRow, SectionIDArray) == 0x000020, "Member 'FRCParamNzFinaleTableRow::SectionIDArray' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleTableRow, InitialPieceIDArray) == 0x000030, "Member 'FRCParamNzFinaleTableRow::InitialPieceIDArray' has a wrong offset!");

// ScriptStruct RC.RCParamNzFinalePieceTableRow
// 0x0060 (0x0068 - 0x0008)
struct FRCParamNzFinalePieceTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PieceImagePath;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PieceType;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PieceNameTextID;                                   // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PieceTextID;                                       // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PieceAnswerID;                                     // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InteractPointSuccessTalkID;                        // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AddBackgroundImg;                                  // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuccessedPieceTextID;                              // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RockNum;                                           // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzFinalePieceTableRow) == 0x000008, "Wrong alignment on FRCParamNzFinalePieceTableRow");
static_assert(sizeof(FRCParamNzFinalePieceTableRow) == 0x000068, "Wrong size on FRCParamNzFinalePieceTableRow");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, ID) == 0x000008, "Member 'FRCParamNzFinalePieceTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, SceneID) == 0x000018, "Member 'FRCParamNzFinalePieceTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, PieceImagePath) == 0x000020, "Member 'FRCParamNzFinalePieceTableRow::PieceImagePath' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, PieceType) == 0x000030, "Member 'FRCParamNzFinalePieceTableRow::PieceType' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, PieceNameTextID) == 0x000034, "Member 'FRCParamNzFinalePieceTableRow::PieceNameTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, PieceTextID) == 0x00003C, "Member 'FRCParamNzFinalePieceTableRow::PieceTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, PieceAnswerID) == 0x000044, "Member 'FRCParamNzFinalePieceTableRow::PieceAnswerID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, InteractPointSuccessTalkID) == 0x00004C, "Member 'FRCParamNzFinalePieceTableRow::InteractPointSuccessTalkID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, AddBackgroundImg) == 0x000054, "Member 'FRCParamNzFinalePieceTableRow::AddBackgroundImg' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, SuccessedPieceTextID) == 0x00005C, "Member 'FRCParamNzFinalePieceTableRow::SuccessedPieceTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinalePieceTableRow, RockNum) == 0x000064, "Member 'FRCParamNzFinalePieceTableRow::RockNum' has a wrong offset!");

// ScriptStruct RC.SoundVolume
// 0x0038 (0x0038 - 0x0000)
struct FSoundVolume final
{
public:
	float                                         MasterVolume;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pl_bgmVolume;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pg_bgmVolume;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         option_bgmVolume;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pl_seVolume;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pg_seVolume;                                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         option_seVolume;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pl_envVolume;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pg_envVolume;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         option_envVolume;                                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pl_voiceVolume;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pg_voiceVolume;                                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         option_voiceVolume;                                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pl_envMapVolume;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundVolume) == 0x000004, "Wrong alignment on FSoundVolume");
static_assert(sizeof(FSoundVolume) == 0x000038, "Wrong size on FSoundVolume");
static_assert(offsetof(FSoundVolume, MasterVolume) == 0x000000, "Member 'FSoundVolume::MasterVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, pl_bgmVolume) == 0x000004, "Member 'FSoundVolume::pl_bgmVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, pg_bgmVolume) == 0x000008, "Member 'FSoundVolume::pg_bgmVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, option_bgmVolume) == 0x00000C, "Member 'FSoundVolume::option_bgmVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, pl_seVolume) == 0x000010, "Member 'FSoundVolume::pl_seVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, pg_seVolume) == 0x000014, "Member 'FSoundVolume::pg_seVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, option_seVolume) == 0x000018, "Member 'FSoundVolume::option_seVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, pl_envVolume) == 0x00001C, "Member 'FSoundVolume::pl_envVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, pg_envVolume) == 0x000020, "Member 'FSoundVolume::pg_envVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, option_envVolume) == 0x000024, "Member 'FSoundVolume::option_envVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, pl_voiceVolume) == 0x000028, "Member 'FSoundVolume::pl_voiceVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, pg_voiceVolume) == 0x00002C, "Member 'FSoundVolume::pg_voiceVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, option_voiceVolume) == 0x000030, "Member 'FSoundVolume::option_voiceVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolume, pl_envMapVolume) == 0x000034, "Member 'FSoundVolume::pl_envMapVolume' has a wrong offset!");

// ScriptStruct RC.RCParamNzFinaleSceneTableRow
// 0x0068 (0x0070 - 0x0008)
struct FRCParamNzFinaleSceneTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLimit;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLimitAlertTiming;                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameStartFadeInTime;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PieceImageRootPath;                                // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DetectiveImageRootPath;                            // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveCursorSpeed;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveCursorLowSpeed;                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveIndexCursorSpeed;                              // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         inputNoneTimerMax;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         delayPieceUnlockAnimTiming;                        // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTutorial;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzFinaleSceneTableRow) == 0x000008, "Wrong alignment on FRCParamNzFinaleSceneTableRow");
static_assert(sizeof(FRCParamNzFinaleSceneTableRow) == 0x000070, "Wrong size on FRCParamNzFinaleSceneTableRow");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, ID) == 0x000008, "Member 'FRCParamNzFinaleSceneTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, SceneID) == 0x000018, "Member 'FRCParamNzFinaleSceneTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, TimeLimit) == 0x000020, "Member 'FRCParamNzFinaleSceneTableRow::TimeLimit' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, TimeLimitAlertTiming) == 0x000024, "Member 'FRCParamNzFinaleSceneTableRow::TimeLimitAlertTiming' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, GameStartFadeInTime) == 0x000028, "Member 'FRCParamNzFinaleSceneTableRow::GameStartFadeInTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, PieceImageRootPath) == 0x000030, "Member 'FRCParamNzFinaleSceneTableRow::PieceImageRootPath' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, DetectiveImageRootPath) == 0x000040, "Member 'FRCParamNzFinaleSceneTableRow::DetectiveImageRootPath' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, Damage) == 0x000050, "Member 'FRCParamNzFinaleSceneTableRow::Damage' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, MoveCursorSpeed) == 0x000054, "Member 'FRCParamNzFinaleSceneTableRow::MoveCursorSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, MoveCursorLowSpeed) == 0x000058, "Member 'FRCParamNzFinaleSceneTableRow::MoveCursorLowSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, MoveIndexCursorSpeed) == 0x00005C, "Member 'FRCParamNzFinaleSceneTableRow::MoveIndexCursorSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, inputNoneTimerMax) == 0x000060, "Member 'FRCParamNzFinaleSceneTableRow::inputNoneTimerMax' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, delayPieceUnlockAnimTiming) == 0x000064, "Member 'FRCParamNzFinaleSceneTableRow::delayPieceUnlockAnimTiming' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSceneTableRow, IsTutorial) == 0x000068, "Member 'FRCParamNzFinaleSceneTableRow::IsTutorial' has a wrong offset!");

// ScriptStruct RC.RCParamNzFinaleSectionTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamNzFinaleSectionTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionTextID;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionIdxTextID;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackgroundImagePath;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzFinaleSectionTableRow) == 0x000008, "Wrong alignment on FRCParamNzFinaleSectionTableRow");
static_assert(sizeof(FRCParamNzFinaleSectionTableRow) == 0x000040, "Wrong size on FRCParamNzFinaleSectionTableRow");
static_assert(offsetof(FRCParamNzFinaleSectionTableRow, ID) == 0x000008, "Member 'FRCParamNzFinaleSectionTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSectionTableRow, SceneID) == 0x000018, "Member 'FRCParamNzFinaleSectionTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSectionTableRow, SectionTextID) == 0x000020, "Member 'FRCParamNzFinaleSectionTableRow::SectionTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSectionTableRow, SectionIdxTextID) == 0x000028, "Member 'FRCParamNzFinaleSectionTableRow::SectionIdxTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzFinaleSectionTableRow, BackgroundImagePath) == 0x000030, "Member 'FRCParamNzFinaleSectionTableRow::BackgroundImagePath' has a wrong offset!");

// ScriptStruct RC.RCTimerInfo
// 0x0028 (0x0028 - 0x0000)
struct FRCTimerInfo final
{
public:
	struct FDateTime                              BackDataTime;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ExecTimeSpan;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndMillSeconds;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExecTimeMillSeconds;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExec;                                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseStrart;                                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCoundDown;                                        // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimeManager;                                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCTimerInfo) == 0x000008, "Wrong alignment on FRCTimerInfo");
static_assert(sizeof(FRCTimerInfo) == 0x000028, "Wrong size on FRCTimerInfo");
static_assert(offsetof(FRCTimerInfo, BackDataTime) == 0x000000, "Member 'FRCTimerInfo::BackDataTime' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, ExecTimeSpan) == 0x000008, "Member 'FRCTimerInfo::ExecTimeSpan' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, EndMillSeconds) == 0x000010, "Member 'FRCTimerInfo::EndMillSeconds' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, Progress) == 0x000014, "Member 'FRCTimerInfo::Progress' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, ExecTimeMillSeconds) == 0x000018, "Member 'FRCTimerInfo::ExecTimeMillSeconds' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, Scale) == 0x00001C, "Member 'FRCTimerInfo::Scale' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, bExec) == 0x000020, "Member 'FRCTimerInfo::bExec' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, bPause) == 0x000021, "Member 'FRCTimerInfo::bPause' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, bPauseStrart) == 0x000022, "Member 'FRCTimerInfo::bPauseStrart' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, bCoundDown) == 0x000023, "Member 'FRCTimerInfo::bCoundDown' has a wrong offset!");
static_assert(offsetof(FRCTimerInfo, bTimeManager) == 0x000024, "Member 'FRCTimerInfo::bTimeManager' has a wrong offset!");

// ScriptStruct RC.RCParamNzMTBTableRow
// 0x0098 (0x00A0 - 0x0008)
struct FRCParamNzMTBTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wall2WallInterval;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wall2TorideInterval;                               // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelSpeed;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaizinName;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WallNum;                                           // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi1ID;                                        // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi2ID;                                        // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi3ID;                                        // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi4ID;                                        // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi5ID;                                        // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndHalfwayFlag;                                    // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TutorialFlag;                                      // 0x0065(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BgmID;                                             // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MTBEndEventID;                                     // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventTableName;                                    // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissTableName;                                     // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzMTBTableRow) == 0x000008, "Wrong alignment on FRCParamNzMTBTableRow");
static_assert(sizeof(FRCParamNzMTBTableRow) == 0x0000A0, "Wrong size on FRCParamNzMTBTableRow");
static_assert(offsetof(FRCParamNzMTBTableRow, ID) == 0x000008, "Member 'FRCParamNzMTBTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, SceneID) == 0x000018, "Member 'FRCParamNzMTBTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, Wall2WallInterval) == 0x000020, "Member 'FRCParamNzMTBTableRow::Wall2WallInterval' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, Wall2TorideInterval) == 0x000024, "Member 'FRCParamNzMTBTableRow::Wall2TorideInterval' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, MoveSpeed) == 0x000028, "Member 'FRCParamNzMTBTableRow::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, AccelSpeed) == 0x00002C, "Member 'FRCParamNzMTBTableRow::AccelSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, KaizinName) == 0x000030, "Member 'FRCParamNzMTBTableRow::KaizinName' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, WallNum) == 0x000038, "Member 'FRCParamNzMTBTableRow::WallNum' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, Kaikagi1ID) == 0x00003C, "Member 'FRCParamNzMTBTableRow::Kaikagi1ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, Kaikagi2ID) == 0x000044, "Member 'FRCParamNzMTBTableRow::Kaikagi2ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, Kaikagi3ID) == 0x00004C, "Member 'FRCParamNzMTBTableRow::Kaikagi3ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, Kaikagi4ID) == 0x000054, "Member 'FRCParamNzMTBTableRow::Kaikagi4ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, Kaikagi5ID) == 0x00005C, "Member 'FRCParamNzMTBTableRow::Kaikagi5ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, EndHalfwayFlag) == 0x000064, "Member 'FRCParamNzMTBTableRow::EndHalfwayFlag' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, TutorialFlag) == 0x000065, "Member 'FRCParamNzMTBTableRow::TutorialFlag' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, BgmID) == 0x000068, "Member 'FRCParamNzMTBTableRow::BgmID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, MTBEndEventID) == 0x000070, "Member 'FRCParamNzMTBTableRow::MTBEndEventID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, EventTableName) == 0x000078, "Member 'FRCParamNzMTBTableRow::EventTableName' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, MissTableName) == 0x000088, "Member 'FRCParamNzMTBTableRow::MissTableName' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBTableRow, Damage) == 0x000098, "Member 'FRCParamNzMTBTableRow::Damage' has a wrong offset!");

// ScriptStruct RC.RCParamNzMTBChTableRow
// 0x0068 (0x0070 - 0x0008)
struct FRCParamNzMTBChTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaizinID;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterPass;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosZ;                                              // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotZ;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdleMotionID;                                      // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkMotionID;                                      // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShoutMotionID;                                     // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WallBreakMotionID;                                 // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzMTBChTableRow) == 0x000008, "Wrong alignment on FRCParamNzMTBChTableRow");
static_assert(sizeof(FRCParamNzMTBChTableRow) == 0x000070, "Wrong size on FRCParamNzMTBChTableRow");
static_assert(offsetof(FRCParamNzMTBChTableRow, ID) == 0x000008, "Member 'FRCParamNzMTBChTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, SceneID) == 0x000018, "Member 'FRCParamNzMTBChTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, KaizinID) == 0x000020, "Member 'FRCParamNzMTBChTableRow::KaizinID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, CharacterPass) == 0x000028, "Member 'FRCParamNzMTBChTableRow::CharacterPass' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, Scale) == 0x000038, "Member 'FRCParamNzMTBChTableRow::Scale' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, PosX) == 0x00003C, "Member 'FRCParamNzMTBChTableRow::PosX' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, PosY) == 0x000040, "Member 'FRCParamNzMTBChTableRow::PosY' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, PosZ) == 0x000044, "Member 'FRCParamNzMTBChTableRow::PosZ' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, RotZ) == 0x000048, "Member 'FRCParamNzMTBChTableRow::RotZ' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, IdleMotionID) == 0x00004C, "Member 'FRCParamNzMTBChTableRow::IdleMotionID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, TalkMotionID) == 0x000054, "Member 'FRCParamNzMTBChTableRow::TalkMotionID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, ShoutMotionID) == 0x00005C, "Member 'FRCParamNzMTBChTableRow::ShoutMotionID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBChTableRow, WallBreakMotionID) == 0x000064, "Member 'FRCParamNzMTBChTableRow::WallBreakMotionID' has a wrong offset!");

// ScriptStruct RC.LoadData
// 0x0018 (0x0018 - 0x0000)
struct FLoadData final
{
public:
	class FString                                 SoundId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          pSoundCue;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadData) == 0x000008, "Wrong alignment on FLoadData");
static_assert(sizeof(FLoadData) == 0x000018, "Wrong size on FLoadData");
static_assert(offsetof(FLoadData, SoundId) == 0x000000, "Member 'FLoadData::SoundId' has a wrong offset!");
static_assert(offsetof(FLoadData, pSoundCue) == 0x000010, "Member 'FLoadData::pSoundCue' has a wrong offset!");

// ScriptStruct RC.RCParamNzMTBWallTableRow
// 0x0118 (0x0120 - 0x0008)
struct FRCParamNzMTBWallTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PointID;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WallIndex;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hp;                                                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Obj2ObjInterval;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopBlockID;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetDepthPosition;                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallShowDistance;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowDistance;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CanAttackDistance;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackInputLimitDistance;                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopDistance;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaizinID;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaizinScale;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaizinAngle;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaizinPosDepth;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaizinPosSide;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaizinPosHeight;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WeakPoint;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WallID;                                            // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WallTextID;                                        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowWallText;                                      // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WallTextVoiceDistance;                             // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WallTextVoiceID;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WallBreakVoiceID;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WallBreakEventID;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IntervalVoiceID;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalVoiceDistance;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiID;                                         // 0x00B4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropKaikagiID;                                     // 0x00BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiMissEventID;                                // 0x00C4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiSuccessEventID;                             // 0x00CC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WallArrivalEventID;                                // 0x00D4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiUITitleTextID;                              // 0x00DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiUITextID;                                   // 0x00E4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TorideEndEventID;                                  // 0x00EC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TorideIntervalEvent1ID;                            // 0x00F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TorideResumeEvent1ID;                              // 0x00FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TorideIntervalEvent2ID;                            // 0x0104(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TorideResumeEvent2ID;                              // 0x010C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KaikagiListID;                                     // 0x0114(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzMTBWallTableRow) == 0x000008, "Wrong alignment on FRCParamNzMTBWallTableRow");
static_assert(sizeof(FRCParamNzMTBWallTableRow) == 0x000120, "Wrong size on FRCParamNzMTBWallTableRow");
static_assert(offsetof(FRCParamNzMTBWallTableRow, ID) == 0x000008, "Member 'FRCParamNzMTBWallTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, SceneID) == 0x000018, "Member 'FRCParamNzMTBWallTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, PointID) == 0x000020, "Member 'FRCParamNzMTBWallTableRow::PointID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WallIndex) == 0x000028, "Member 'FRCParamNzMTBWallTableRow::WallIndex' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, Hp) == 0x00002C, "Member 'FRCParamNzMTBWallTableRow::Hp' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, Obj2ObjInterval) == 0x000030, "Member 'FRCParamNzMTBWallTableRow::Obj2ObjInterval' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, LoopBlockID) == 0x000034, "Member 'FRCParamNzMTBWallTableRow::LoopBlockID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, TargetDepthPosition) == 0x000038, "Member 'FRCParamNzMTBWallTableRow::TargetDepthPosition' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WallShowDistance) == 0x00003C, "Member 'FRCParamNzMTBWallTableRow::WallShowDistance' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, SlowDistance) == 0x000040, "Member 'FRCParamNzMTBWallTableRow::SlowDistance' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, CanAttackDistance) == 0x000044, "Member 'FRCParamNzMTBWallTableRow::CanAttackDistance' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, AttackInputLimitDistance) == 0x000048, "Member 'FRCParamNzMTBWallTableRow::AttackInputLimitDistance' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, LoopDistance) == 0x00004C, "Member 'FRCParamNzMTBWallTableRow::LoopDistance' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaizinID) == 0x000050, "Member 'FRCParamNzMTBWallTableRow::KaizinID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaizinScale) == 0x000054, "Member 'FRCParamNzMTBWallTableRow::KaizinScale' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaizinAngle) == 0x000058, "Member 'FRCParamNzMTBWallTableRow::KaizinAngle' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaizinPosDepth) == 0x00005C, "Member 'FRCParamNzMTBWallTableRow::KaizinPosDepth' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaizinPosSide) == 0x000060, "Member 'FRCParamNzMTBWallTableRow::KaizinPosSide' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaizinPosHeight) == 0x000064, "Member 'FRCParamNzMTBWallTableRow::KaizinPosHeight' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WeakPoint) == 0x000068, "Member 'FRCParamNzMTBWallTableRow::WeakPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WallID) == 0x000078, "Member 'FRCParamNzMTBWallTableRow::WallID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WallTextID) == 0x000080, "Member 'FRCParamNzMTBWallTableRow::WallTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, ShowWallText) == 0x000088, "Member 'FRCParamNzMTBWallTableRow::ShowWallText' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WallTextVoiceDistance) == 0x00008C, "Member 'FRCParamNzMTBWallTableRow::WallTextVoiceDistance' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WallTextVoiceID) == 0x000090, "Member 'FRCParamNzMTBWallTableRow::WallTextVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WallBreakVoiceID) == 0x000098, "Member 'FRCParamNzMTBWallTableRow::WallBreakVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WallBreakEventID) == 0x0000A0, "Member 'FRCParamNzMTBWallTableRow::WallBreakEventID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, IntervalVoiceID) == 0x0000A8, "Member 'FRCParamNzMTBWallTableRow::IntervalVoiceID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, IntervalVoiceDistance) == 0x0000B0, "Member 'FRCParamNzMTBWallTableRow::IntervalVoiceDistance' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaikagiID) == 0x0000B4, "Member 'FRCParamNzMTBWallTableRow::KaikagiID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, DropKaikagiID) == 0x0000BC, "Member 'FRCParamNzMTBWallTableRow::DropKaikagiID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaikagiMissEventID) == 0x0000C4, "Member 'FRCParamNzMTBWallTableRow::KaikagiMissEventID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaikagiSuccessEventID) == 0x0000CC, "Member 'FRCParamNzMTBWallTableRow::KaikagiSuccessEventID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, WallArrivalEventID) == 0x0000D4, "Member 'FRCParamNzMTBWallTableRow::WallArrivalEventID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaikagiUITitleTextID) == 0x0000DC, "Member 'FRCParamNzMTBWallTableRow::KaikagiUITitleTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaikagiUITextID) == 0x0000E4, "Member 'FRCParamNzMTBWallTableRow::KaikagiUITextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, TorideEndEventID) == 0x0000EC, "Member 'FRCParamNzMTBWallTableRow::TorideEndEventID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, TorideIntervalEvent1ID) == 0x0000F4, "Member 'FRCParamNzMTBWallTableRow::TorideIntervalEvent1ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, TorideResumeEvent1ID) == 0x0000FC, "Member 'FRCParamNzMTBWallTableRow::TorideResumeEvent1ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, TorideIntervalEvent2ID) == 0x000104, "Member 'FRCParamNzMTBWallTableRow::TorideIntervalEvent2ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, TorideResumeEvent2ID) == 0x00010C, "Member 'FRCParamNzMTBWallTableRow::TorideResumeEvent2ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallTableRow, KaikagiListID) == 0x000114, "Member 'FRCParamNzMTBWallTableRow::KaikagiListID' has a wrong offset!");

// ScriptStruct RC.RCParamNzMTBWallMeshTableRow
// 0x00A8 (0x00B0 - 0x0008)
struct FRCParamNzMTBWallMeshTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WallID;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkeltalMeshName;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MotionName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StaticMeshName;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClackMeshName;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BrokenMeshName;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StaticMesh2Name;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StaticMesh3Name;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StaticMesh4Name;                                   // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StaticMesh5Name;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzMTBWallMeshTableRow) == 0x000008, "Wrong alignment on FRCParamNzMTBWallMeshTableRow");
static_assert(sizeof(FRCParamNzMTBWallMeshTableRow) == 0x0000B0, "Wrong size on FRCParamNzMTBWallMeshTableRow");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, ID) == 0x000008, "Member 'FRCParamNzMTBWallMeshTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, WallID) == 0x000018, "Member 'FRCParamNzMTBWallMeshTableRow::WallID' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, SkeltalMeshName) == 0x000020, "Member 'FRCParamNzMTBWallMeshTableRow::SkeltalMeshName' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, MotionName) == 0x000030, "Member 'FRCParamNzMTBWallMeshTableRow::MotionName' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, StaticMeshName) == 0x000040, "Member 'FRCParamNzMTBWallMeshTableRow::StaticMeshName' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, ClackMeshName) == 0x000050, "Member 'FRCParamNzMTBWallMeshTableRow::ClackMeshName' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, BrokenMeshName) == 0x000060, "Member 'FRCParamNzMTBWallMeshTableRow::BrokenMeshName' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, StaticMesh2Name) == 0x000070, "Member 'FRCParamNzMTBWallMeshTableRow::StaticMesh2Name' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, StaticMesh3Name) == 0x000080, "Member 'FRCParamNzMTBWallMeshTableRow::StaticMesh3Name' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, StaticMesh4Name) == 0x000090, "Member 'FRCParamNzMTBWallMeshTableRow::StaticMesh4Name' has a wrong offset!");
static_assert(offsetof(FRCParamNzMTBWallMeshTableRow, StaticMesh5Name) == 0x0000A0, "Member 'FRCParamNzMTBWallMeshTableRow::StaticMesh5Name' has a wrong offset!");

// ScriptStruct RC.LipSyncaArgument
// 0x0008 (0x0008 - 0x0000)
struct FLipSyncaArgument final
{
public:
	float                                         lipSyncFrame;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceVolume;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLipSyncaArgument) == 0x000004, "Wrong alignment on FLipSyncaArgument");
static_assert(sizeof(FLipSyncaArgument) == 0x000008, "Wrong size on FLipSyncaArgument");
static_assert(offsetof(FLipSyncaArgument, lipSyncFrame) == 0x000000, "Member 'FLipSyncaArgument::lipSyncFrame' has a wrong offset!");
static_assert(offsetof(FLipSyncaArgument, VoiceVolume) == 0x000004, "Member 'FLipSyncaArgument::VoiceVolume' has a wrong offset!");

// ScriptStruct RC.RCParamNzPuzzleTableRow
// 0x0100 (0x0108 - 0x0008)
struct FRCParamNzPuzzleTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestionTextID;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnswerTextID;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         answerNum;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaruTextNum;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrelSpeed;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitTime;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlertTime;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi1ID;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi1HintID;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi2ID;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi2HintID;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi3ID;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi3HintID;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi4ID;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi4HintID;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi5ID;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi5HintID;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi6ID;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kaikagi6HintID;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TutorialFlag;                                      // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BgmID;                                             // 0x00AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Speed1ID;                                          // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Speed2ID;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Speed3ID;                                          // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedKeepTimeMin;                                  // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedKeepTimeMax;                                  // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStartUI;                                        // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BGTimeZone;                                        // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzPuzzleTableRow) == 0x000008, "Wrong alignment on FRCParamNzPuzzleTableRow");
static_assert(sizeof(FRCParamNzPuzzleTableRow) == 0x000108, "Wrong size on FRCParamNzPuzzleTableRow");
static_assert(offsetof(FRCParamNzPuzzleTableRow, ID) == 0x000008, "Member 'FRCParamNzPuzzleTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, SceneID) == 0x000018, "Member 'FRCParamNzPuzzleTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, QuestionTextID) == 0x000020, "Member 'FRCParamNzPuzzleTableRow::QuestionTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, AnswerTextID) == 0x000028, "Member 'FRCParamNzPuzzleTableRow::AnswerTextID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, answerNum) == 0x000030, "Member 'FRCParamNzPuzzleTableRow::answerNum' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, TaruTextNum) == 0x000034, "Member 'FRCParamNzPuzzleTableRow::TaruTextNum' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, BarrelSpeed) == 0x000038, "Member 'FRCParamNzPuzzleTableRow::BarrelSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Damage) == 0x00003C, "Member 'FRCParamNzPuzzleTableRow::Damage' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, LimitTime) == 0x000040, "Member 'FRCParamNzPuzzleTableRow::LimitTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, AlertTime) == 0x000044, "Member 'FRCParamNzPuzzleTableRow::AlertTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi1ID) == 0x000048, "Member 'FRCParamNzPuzzleTableRow::Kaikagi1ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi1HintID) == 0x000050, "Member 'FRCParamNzPuzzleTableRow::Kaikagi1HintID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi2ID) == 0x000058, "Member 'FRCParamNzPuzzleTableRow::Kaikagi2ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi2HintID) == 0x000060, "Member 'FRCParamNzPuzzleTableRow::Kaikagi2HintID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi3ID) == 0x000068, "Member 'FRCParamNzPuzzleTableRow::Kaikagi3ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi3HintID) == 0x000070, "Member 'FRCParamNzPuzzleTableRow::Kaikagi3HintID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi4ID) == 0x000078, "Member 'FRCParamNzPuzzleTableRow::Kaikagi4ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi4HintID) == 0x000080, "Member 'FRCParamNzPuzzleTableRow::Kaikagi4HintID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi5ID) == 0x000088, "Member 'FRCParamNzPuzzleTableRow::Kaikagi5ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi5HintID) == 0x000090, "Member 'FRCParamNzPuzzleTableRow::Kaikagi5HintID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi6ID) == 0x000098, "Member 'FRCParamNzPuzzleTableRow::Kaikagi6ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Kaikagi6HintID) == 0x0000A0, "Member 'FRCParamNzPuzzleTableRow::Kaikagi6HintID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, TutorialFlag) == 0x0000A8, "Member 'FRCParamNzPuzzleTableRow::TutorialFlag' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, BgmID) == 0x0000AC, "Member 'FRCParamNzPuzzleTableRow::BgmID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Speed1ID) == 0x0000B8, "Member 'FRCParamNzPuzzleTableRow::Speed1ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Speed2ID) == 0x0000C8, "Member 'FRCParamNzPuzzleTableRow::Speed2ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, Speed3ID) == 0x0000D8, "Member 'FRCParamNzPuzzleTableRow::Speed3ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, SpeedKeepTimeMin) == 0x0000E8, "Member 'FRCParamNzPuzzleTableRow::SpeedKeepTimeMin' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, SpeedKeepTimeMax) == 0x0000EC, "Member 'FRCParamNzPuzzleTableRow::SpeedKeepTimeMax' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, UseStartUI) == 0x0000F0, "Member 'FRCParamNzPuzzleTableRow::UseStartUI' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleTableRow, BGTimeZone) == 0x0000F8, "Member 'FRCParamNzPuzzleTableRow::BGTimeZone' has a wrong offset!");

// ScriptStruct RC.RCWanderingSpiritHitData
// 0x000C (0x000C - 0x0000)
struct FRCWanderingSpiritHitData final
{
public:
	struct FVector                                HitPos;                                            // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCWanderingSpiritHitData) == 0x000004, "Wrong alignment on FRCWanderingSpiritHitData");
static_assert(sizeof(FRCWanderingSpiritHitData) == 0x00000C, "Wrong size on FRCWanderingSpiritHitData");
static_assert(offsetof(FRCWanderingSpiritHitData, HitPos) == 0x000000, "Member 'FRCWanderingSpiritHitData::HitPos' has a wrong offset!");

// ScriptStruct RC.RCParamNzPuzzleLangTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamNzPuzzleLangTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LangSceneID;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzPuzzleLangTableRow) == 0x000008, "Wrong alignment on FRCParamNzPuzzleLangTableRow");
static_assert(sizeof(FRCParamNzPuzzleLangTableRow) == 0x000028, "Wrong size on FRCParamNzPuzzleLangTableRow");
static_assert(offsetof(FRCParamNzPuzzleLangTableRow, ID) == 0x000008, "Member 'FRCParamNzPuzzleLangTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleLangTableRow, SceneID) == 0x000018, "Member 'FRCParamNzPuzzleLangTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleLangTableRow, LangSceneID) == 0x000020, "Member 'FRCParamNzPuzzleLangTableRow::LangSceneID' has a wrong offset!");

// ScriptStruct RC.RCParamNzPuzzleSceneTableRow
// 0x00A8 (0x00B0 - 0x0008)
struct FRCParamNzPuzzleSceneTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLimit;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CursorSpeed;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrelSpeed;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTaikutuWait;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTaikutuWait;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaikagiEatAngle;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaikagiReturnSpeed;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KaikagiDepthPos;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraRotateSpeed;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraRotateLRInvert;                             // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraRotateLRMaxAngle;                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraRotateUDInvert;                             // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraRotateMaxUpAngle;                            // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraRotateMaxDownAngle;                          // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraZoomSpeed;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraZoomInMaxDistance;                           // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraZoomOutMaxDistance;                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrelWordTextScale;                               // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrelWordDepthOffset;                             // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrelWordUpperAngle;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrelWordLowerAngle;                              // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShinigamiAngleWord8;                               // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShinigamiAngleWord12;                              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShinigamiAngleWord16;                              // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HintDrawTime;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitBarrelAngle;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LangPathBase;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LangPathJp;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LangPathEn;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzPuzzleSceneTableRow) == 0x000008, "Wrong alignment on FRCParamNzPuzzleSceneTableRow");
static_assert(sizeof(FRCParamNzPuzzleSceneTableRow) == 0x0000B0, "Wrong size on FRCParamNzPuzzleSceneTableRow");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, ID) == 0x000008, "Member 'FRCParamNzPuzzleSceneTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, TimeLimit) == 0x000018, "Member 'FRCParamNzPuzzleSceneTableRow::TimeLimit' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, CursorSpeed) == 0x00001C, "Member 'FRCParamNzPuzzleSceneTableRow::CursorSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, BarrelSpeed) == 0x000020, "Member 'FRCParamNzPuzzleSceneTableRow::BarrelSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, MinTaikutuWait) == 0x000024, "Member 'FRCParamNzPuzzleSceneTableRow::MinTaikutuWait' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, MaxTaikutuWait) == 0x000028, "Member 'FRCParamNzPuzzleSceneTableRow::MaxTaikutuWait' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, KaikagiEatAngle) == 0x00002C, "Member 'FRCParamNzPuzzleSceneTableRow::KaikagiEatAngle' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, KaikagiReturnSpeed) == 0x000030, "Member 'FRCParamNzPuzzleSceneTableRow::KaikagiReturnSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, KaikagiDepthPos) == 0x000034, "Member 'FRCParamNzPuzzleSceneTableRow::KaikagiDepthPos' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, CameraRotateSpeed) == 0x000038, "Member 'FRCParamNzPuzzleSceneTableRow::CameraRotateSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, bCameraRotateLRInvert) == 0x00003C, "Member 'FRCParamNzPuzzleSceneTableRow::bCameraRotateLRInvert' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, CameraRotateLRMaxAngle) == 0x000040, "Member 'FRCParamNzPuzzleSceneTableRow::CameraRotateLRMaxAngle' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, bCameraRotateUDInvert) == 0x000044, "Member 'FRCParamNzPuzzleSceneTableRow::bCameraRotateUDInvert' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, CameraRotateMaxUpAngle) == 0x000048, "Member 'FRCParamNzPuzzleSceneTableRow::CameraRotateMaxUpAngle' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, CameraRotateMaxDownAngle) == 0x00004C, "Member 'FRCParamNzPuzzleSceneTableRow::CameraRotateMaxDownAngle' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, CameraZoomSpeed) == 0x000050, "Member 'FRCParamNzPuzzleSceneTableRow::CameraZoomSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, CameraZoomInMaxDistance) == 0x000054, "Member 'FRCParamNzPuzzleSceneTableRow::CameraZoomInMaxDistance' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, CameraZoomOutMaxDistance) == 0x000058, "Member 'FRCParamNzPuzzleSceneTableRow::CameraZoomOutMaxDistance' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, BarrelWordTextScale) == 0x00005C, "Member 'FRCParamNzPuzzleSceneTableRow::BarrelWordTextScale' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, BarrelWordDepthOffset) == 0x000060, "Member 'FRCParamNzPuzzleSceneTableRow::BarrelWordDepthOffset' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, BarrelWordUpperAngle) == 0x000064, "Member 'FRCParamNzPuzzleSceneTableRow::BarrelWordUpperAngle' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, BarrelWordLowerAngle) == 0x000068, "Member 'FRCParamNzPuzzleSceneTableRow::BarrelWordLowerAngle' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, ShinigamiAngleWord8) == 0x00006C, "Member 'FRCParamNzPuzzleSceneTableRow::ShinigamiAngleWord8' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, ShinigamiAngleWord12) == 0x000070, "Member 'FRCParamNzPuzzleSceneTableRow::ShinigamiAngleWord12' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, ShinigamiAngleWord16) == 0x000074, "Member 'FRCParamNzPuzzleSceneTableRow::ShinigamiAngleWord16' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, HintDrawTime) == 0x000078, "Member 'FRCParamNzPuzzleSceneTableRow::HintDrawTime' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, InitBarrelAngle) == 0x00007C, "Member 'FRCParamNzPuzzleSceneTableRow::InitBarrelAngle' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, LangPathBase) == 0x000080, "Member 'FRCParamNzPuzzleSceneTableRow::LangPathBase' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, LangPathJp) == 0x000090, "Member 'FRCParamNzPuzzleSceneTableRow::LangPathJp' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSceneTableRow, LangPathEn) == 0x0000A0, "Member 'FRCParamNzPuzzleSceneTableRow::LangPathEn' has a wrong offset!");

// ScriptStruct RC.RCParamNzPuzzleSpeedTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamNzPuzzleSpeedTableRow final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 speedID;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzPuzzleSpeedTableRow) == 0x000008, "Wrong alignment on FRCParamNzPuzzleSpeedTableRow");
static_assert(sizeof(FRCParamNzPuzzleSpeedTableRow) == 0x000030, "Wrong size on FRCParamNzPuzzleSpeedTableRow");
static_assert(offsetof(FRCParamNzPuzzleSpeedTableRow, ID) == 0x000008, "Member 'FRCParamNzPuzzleSpeedTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSpeedTableRow, speedID) == 0x000018, "Member 'FRCParamNzPuzzleSpeedTableRow::speedID' has a wrong offset!");
static_assert(offsetof(FRCParamNzPuzzleSpeedTableRow, Speed) == 0x000028, "Member 'FRCParamNzPuzzleSpeedTableRow::Speed' has a wrong offset!");

// ScriptStruct RC.RCFaderHUDHiddenWidgetData
// 0x0010 (0x0010 - 0x0000)
struct FRCFaderHUDHiddenWidgetData final
{
public:
	class URCUiWidgetBase*                        Widget;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              PrevSlateVisibility;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCFaderHUDHiddenWidgetData) == 0x000008, "Wrong alignment on FRCFaderHUDHiddenWidgetData");
static_assert(sizeof(FRCFaderHUDHiddenWidgetData) == 0x000010, "Wrong size on FRCFaderHUDHiddenWidgetData");
static_assert(offsetof(FRCFaderHUDHiddenWidgetData, Widget) == 0x000000, "Member 'FRCFaderHUDHiddenWidgetData::Widget' has a wrong offset!");
static_assert(offsetof(FRCFaderHUDHiddenWidgetData, PrevSlateVisibility) == 0x000008, "Member 'FRCFaderHUDHiddenWidgetData::PrevSlateVisibility' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultHitPointTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamNzResultHitPointTableRow final : public FTableRowBase
{
public:
	int32                                         Rank_SS_HitPoint;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_S_HitPoint;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_A_HitPoint;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_B_HitPoint;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_C_HitPoint;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzResultHitPointTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultHitPointTableRow");
static_assert(sizeof(FRCParamNzResultHitPointTableRow) == 0x000020, "Wrong size on FRCParamNzResultHitPointTableRow");
static_assert(offsetof(FRCParamNzResultHitPointTableRow, Rank_SS_HitPoint) == 0x000008, "Member 'FRCParamNzResultHitPointTableRow::Rank_SS_HitPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultHitPointTableRow, Rank_S_HitPoint) == 0x00000C, "Member 'FRCParamNzResultHitPointTableRow::Rank_S_HitPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultHitPointTableRow, Rank_A_HitPoint) == 0x000010, "Member 'FRCParamNzResultHitPointTableRow::Rank_A_HitPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultHitPointTableRow, Rank_B_HitPoint) == 0x000014, "Member 'FRCParamNzResultHitPointTableRow::Rank_B_HitPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultHitPointTableRow, Rank_C_HitPoint) == 0x000018, "Member 'FRCParamNzResultHitPointTableRow::Rank_C_HitPoint' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultMinigameListTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamNzResultMinigameListTableRow final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MinigameMode;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListNum;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzResultMinigameListTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultMinigameListTableRow");
static_assert(sizeof(FRCParamNzResultMinigameListTableRow) == 0x000028, "Wrong size on FRCParamNzResultMinigameListTableRow");
static_assert(offsetof(FRCParamNzResultMinigameListTableRow, ID) == 0x000008, "Member 'FRCParamNzResultMinigameListTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultMinigameListTableRow, Chapter) == 0x000010, "Member 'FRCParamNzResultMinigameListTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultMinigameListTableRow, Scene) == 0x000014, "Member 'FRCParamNzResultMinigameListTableRow::Scene' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultMinigameListTableRow, MinigameMode) == 0x00001C, "Member 'FRCParamNzResultMinigameListTableRow::MinigameMode' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultMinigameListTableRow, ListNum) == 0x000024, "Member 'FRCParamNzResultMinigameListTableRow::ListNum' has a wrong offset!");

// ScriptStruct RC.FadeData
// 0x0030 (0x0030 - 0x0000)
struct FFadeData final
{
public:
	class UAtomComponent*                         pAtomComponent;                                    // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSoundType                                  SoundType;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SoundId;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         startVolume;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         finishVolume;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFadeData) == 0x000008, "Wrong alignment on FFadeData");
static_assert(sizeof(FFadeData) == 0x000030, "Wrong size on FFadeData");
static_assert(offsetof(FFadeData, pAtomComponent) == 0x000000, "Member 'FFadeData::pAtomComponent' has a wrong offset!");
static_assert(offsetof(FFadeData, SoundType) == 0x000008, "Member 'FFadeData::SoundType' has a wrong offset!");
static_assert(offsetof(FFadeData, SoundId) == 0x000010, "Member 'FFadeData::SoundId' has a wrong offset!");
static_assert(offsetof(FFadeData, startVolume) == 0x000020, "Member 'FFadeData::startVolume' has a wrong offset!");
static_assert(offsetof(FFadeData, finishVolume) == 0x000024, "Member 'FFadeData::finishVolume' has a wrong offset!");
static_assert(offsetof(FFadeData, DeltaTime) == 0x000028, "Member 'FFadeData::DeltaTime' has a wrong offset!");
static_assert(offsetof(FFadeData, FadeTime) == 0x00002C, "Member 'FFadeData::FadeTime' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultMinigamePointTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamNzResultMinigamePointTableRow final : public FTableRowBase
{
public:
	int32                                         Rank_SS_Failures;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_S_Failures;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_A_Failures;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_B_Failures;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_C_Failures;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzResultMinigamePointTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultMinigamePointTableRow");
static_assert(sizeof(FRCParamNzResultMinigamePointTableRow) == 0x000020, "Wrong size on FRCParamNzResultMinigamePointTableRow");
static_assert(offsetof(FRCParamNzResultMinigamePointTableRow, Rank_SS_Failures) == 0x000008, "Member 'FRCParamNzResultMinigamePointTableRow::Rank_SS_Failures' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultMinigamePointTableRow, Rank_S_Failures) == 0x00000C, "Member 'FRCParamNzResultMinigamePointTableRow::Rank_S_Failures' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultMinigamePointTableRow, Rank_A_Failures) == 0x000010, "Member 'FRCParamNzResultMinigamePointTableRow::Rank_A_Failures' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultMinigamePointTableRow, Rank_B_Failures) == 0x000014, "Member 'FRCParamNzResultMinigamePointTableRow::Rank_B_Failures' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultMinigamePointTableRow, Rank_C_Failures) == 0x000018, "Member 'FRCParamNzResultMinigamePointTableRow::Rank_C_Failures' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultMinigameTextTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamNzResultMinigameTextTableRow final : public FTableRowBase
{
public:
	class FName                                   MinigameTextId;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamNzResultMinigameTextTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultMinigameTextTableRow");
static_assert(sizeof(FRCParamNzResultMinigameTextTableRow) == 0x000010, "Wrong size on FRCParamNzResultMinigameTextTableRow");
static_assert(offsetof(FRCParamNzResultMinigameTextTableRow, MinigameTextId) == 0x000008, "Member 'FRCParamNzResultMinigameTextTableRow::MinigameTextId' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultRankTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamNzResultRankTableRow final : public FTableRowBase
{
public:
	int32                                         Rank_SS;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_S;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_A;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_B;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_C;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzResultRankTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultRankTableRow");
static_assert(sizeof(FRCParamNzResultRankTableRow) == 0x000020, "Wrong size on FRCParamNzResultRankTableRow");
static_assert(offsetof(FRCParamNzResultRankTableRow, Rank_SS) == 0x000008, "Member 'FRCParamNzResultRankTableRow::Rank_SS' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankTableRow, Rank_S) == 0x00000C, "Member 'FRCParamNzResultRankTableRow::Rank_S' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankTableRow, Rank_A) == 0x000010, "Member 'FRCParamNzResultRankTableRow::Rank_A' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankTableRow, Rank_B) == 0x000014, "Member 'FRCParamNzResultRankTableRow::Rank_B' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankTableRow, Rank_C) == 0x000018, "Member 'FRCParamNzResultRankTableRow::Rank_C' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultRankItemToTanteiPointTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamNzResultRankItemToTanteiPointTableRow final : public FTableRowBase
{
public:
	int32                                         Rank_SS_Point;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_S_Point;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_A_Point;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_B_Point;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_C_Point;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzResultRankItemToTanteiPointTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultRankItemToTanteiPointTableRow");
static_assert(sizeof(FRCParamNzResultRankItemToTanteiPointTableRow) == 0x000020, "Wrong size on FRCParamNzResultRankItemToTanteiPointTableRow");
static_assert(offsetof(FRCParamNzResultRankItemToTanteiPointTableRow, Rank_SS_Point) == 0x000008, "Member 'FRCParamNzResultRankItemToTanteiPointTableRow::Rank_SS_Point' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankItemToTanteiPointTableRow, Rank_S_Point) == 0x00000C, "Member 'FRCParamNzResultRankItemToTanteiPointTableRow::Rank_S_Point' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankItemToTanteiPointTableRow, Rank_A_Point) == 0x000010, "Member 'FRCParamNzResultRankItemToTanteiPointTableRow::Rank_A_Point' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankItemToTanteiPointTableRow, Rank_B_Point) == 0x000014, "Member 'FRCParamNzResultRankItemToTanteiPointTableRow::Rank_B_Point' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankItemToTanteiPointTableRow, Rank_C_Point) == 0x000018, "Member 'FRCParamNzResultRankItemToTanteiPointTableRow::Rank_C_Point' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultRankPointTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamNzResultRankPointTableRow final : public FTableRowBase
{
public:
	int32                                         Rank_SS_RankPoint;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_S_RankPoint;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_A_RankPoint;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_B_RankPoint;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_C_RankPoint;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzResultRankPointTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultRankPointTableRow");
static_assert(sizeof(FRCParamNzResultRankPointTableRow) == 0x000020, "Wrong size on FRCParamNzResultRankPointTableRow");
static_assert(offsetof(FRCParamNzResultRankPointTableRow, Rank_SS_RankPoint) == 0x000008, "Member 'FRCParamNzResultRankPointTableRow::Rank_SS_RankPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankPointTableRow, Rank_S_RankPoint) == 0x00000C, "Member 'FRCParamNzResultRankPointTableRow::Rank_S_RankPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankPointTableRow, Rank_A_RankPoint) == 0x000010, "Member 'FRCParamNzResultRankPointTableRow::Rank_A_RankPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankPointTableRow, Rank_B_RankPoint) == 0x000014, "Member 'FRCParamNzResultRankPointTableRow::Rank_B_RankPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultRankPointTableRow, Rank_C_RankPoint) == 0x000018, "Member 'FRCParamNzResultRankPointTableRow::Rank_C_RankPoint' has a wrong offset!");

// ScriptStruct RC.RCParamNzResultReasoningPointTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamNzResultReasoningPointTableRow final : public FTableRowBase
{
public:
	int32                                         Rank_SS_ReasoningPoint;                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_S_ReasoningPoint;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_A_ReasoningPoint;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_B_ReasoningPoint;                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_C_ReasoningPoint;                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamNzResultReasoningPointTableRow) == 0x000008, "Wrong alignment on FRCParamNzResultReasoningPointTableRow");
static_assert(sizeof(FRCParamNzResultReasoningPointTableRow) == 0x000020, "Wrong size on FRCParamNzResultReasoningPointTableRow");
static_assert(offsetof(FRCParamNzResultReasoningPointTableRow, Rank_SS_ReasoningPoint) == 0x000008, "Member 'FRCParamNzResultReasoningPointTableRow::Rank_SS_ReasoningPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultReasoningPointTableRow, Rank_S_ReasoningPoint) == 0x00000C, "Member 'FRCParamNzResultReasoningPointTableRow::Rank_S_ReasoningPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultReasoningPointTableRow, Rank_A_ReasoningPoint) == 0x000010, "Member 'FRCParamNzResultReasoningPointTableRow::Rank_A_ReasoningPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultReasoningPointTableRow, Rank_B_ReasoningPoint) == 0x000014, "Member 'FRCParamNzResultReasoningPointTableRow::Rank_B_ReasoningPoint' has a wrong offset!");
static_assert(offsetof(FRCParamNzResultReasoningPointTableRow, Rank_C_ReasoningPoint) == 0x000018, "Member 'FRCParamNzResultReasoningPointTableRow::Rank_C_ReasoningPoint' has a wrong offset!");

// ScriptStruct RC.RCParamOptionTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamOptionTableRow final : public FTableRowBase
{
public:
	class FName                                   OptionID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TitleTextID;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HelpTextID;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PCOnly;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConfirmTextID;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScreenConfirmTextID;                               // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InitializeConfirmTextID;                           // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamOptionTableRow) == 0x000008, "Wrong alignment on FRCParamOptionTableRow");
static_assert(sizeof(FRCParamOptionTableRow) == 0x000040, "Wrong size on FRCParamOptionTableRow");
static_assert(offsetof(FRCParamOptionTableRow, OptionID) == 0x000008, "Member 'FRCParamOptionTableRow::OptionID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionTableRow, TitleTextID) == 0x000010, "Member 'FRCParamOptionTableRow::TitleTextID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionTableRow, HelpTextID) == 0x000018, "Member 'FRCParamOptionTableRow::HelpTextID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionTableRow, PCOnly) == 0x000020, "Member 'FRCParamOptionTableRow::PCOnly' has a wrong offset!");
static_assert(offsetof(FRCParamOptionTableRow, ConfirmTextID) == 0x000028, "Member 'FRCParamOptionTableRow::ConfirmTextID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionTableRow, ScreenConfirmTextID) == 0x000030, "Member 'FRCParamOptionTableRow::ScreenConfirmTextID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionTableRow, InitializeConfirmTextID) == 0x000038, "Member 'FRCParamOptionTableRow::InitializeConfirmTextID' has a wrong offset!");

// ScriptStruct RC.RCParamOption_ItemListTableRow
// 0x00B0 (0x00B8 - 0x0008)
struct FRCParamOption_ItemListTableRow final : public FTableRowBase
{
public:
	class FName                                   OptionItemID;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemTitleTextID;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemTitleTextID_PS5;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemTitleTextID_XSX;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HelpTextID;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HelpTextID_PS5;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HelpTextID_XSX;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PCOnly;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConsoleOnly;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PadDispSwitch;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScreenConfirmFlag;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotChangeInGame;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsFastAdaptation;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SampleSE;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionVariable;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionType;                                        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsVolume;                                          // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Volume100Flag;                                     // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ItemTextID;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ValueList;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamOption_ItemListTableRow) == 0x000008, "Wrong alignment on FRCParamOption_ItemListTableRow");
static_assert(sizeof(FRCParamOption_ItemListTableRow) == 0x0000B8, "Wrong size on FRCParamOption_ItemListTableRow");
static_assert(offsetof(FRCParamOption_ItemListTableRow, OptionItemID) == 0x000008, "Member 'FRCParamOption_ItemListTableRow::OptionItemID' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, ItemTitleTextID) == 0x000010, "Member 'FRCParamOption_ItemListTableRow::ItemTitleTextID' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, ItemTitleTextID_PS5) == 0x000018, "Member 'FRCParamOption_ItemListTableRow::ItemTitleTextID_PS5' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, ItemTitleTextID_XSX) == 0x000020, "Member 'FRCParamOption_ItemListTableRow::ItemTitleTextID_XSX' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, HelpTextID) == 0x000028, "Member 'FRCParamOption_ItemListTableRow::HelpTextID' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, HelpTextID_PS5) == 0x000030, "Member 'FRCParamOption_ItemListTableRow::HelpTextID_PS5' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, HelpTextID_XSX) == 0x000038, "Member 'FRCParamOption_ItemListTableRow::HelpTextID_XSX' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, PCOnly) == 0x000040, "Member 'FRCParamOption_ItemListTableRow::PCOnly' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, ConsoleOnly) == 0x000048, "Member 'FRCParamOption_ItemListTableRow::ConsoleOnly' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, PadDispSwitch) == 0x000050, "Member 'FRCParamOption_ItemListTableRow::PadDispSwitch' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, ScreenConfirmFlag) == 0x000058, "Member 'FRCParamOption_ItemListTableRow::ScreenConfirmFlag' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, NotChangeInGame) == 0x000060, "Member 'FRCParamOption_ItemListTableRow::NotChangeInGame' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, IsFastAdaptation) == 0x000068, "Member 'FRCParamOption_ItemListTableRow::IsFastAdaptation' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, SampleSE) == 0x000070, "Member 'FRCParamOption_ItemListTableRow::SampleSE' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, OptionVariable) == 0x000078, "Member 'FRCParamOption_ItemListTableRow::OptionVariable' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, OptionType) == 0x000080, "Member 'FRCParamOption_ItemListTableRow::OptionType' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, IsVolume) == 0x000088, "Member 'FRCParamOption_ItemListTableRow::IsVolume' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, Volume100Flag) == 0x000090, "Member 'FRCParamOption_ItemListTableRow::Volume100Flag' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, ItemTextID) == 0x000098, "Member 'FRCParamOption_ItemListTableRow::ItemTextID' has a wrong offset!");
static_assert(offsetof(FRCParamOption_ItemListTableRow, ValueList) == 0x0000A8, "Member 'FRCParamOption_ItemListTableRow::ValueList' has a wrong offset!");

// ScriptStruct RC.RCParamOptionControllerTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamOptionControllerTableRow final : public FTableRowBase
{
public:
	class FName                                   PlatformID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ControllerTextIDList;                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamOptionControllerTableRow) == 0x000008, "Wrong alignment on FRCParamOptionControllerTableRow");
static_assert(sizeof(FRCParamOptionControllerTableRow) == 0x000020, "Wrong size on FRCParamOptionControllerTableRow");
static_assert(offsetof(FRCParamOptionControllerTableRow, PlatformID) == 0x000008, "Member 'FRCParamOptionControllerTableRow::PlatformID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionControllerTableRow, ControllerTextIDList) == 0x000010, "Member 'FRCParamOptionControllerTableRow::ControllerTextIDList' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuPersonaMenuInfo
// 0x0020 (0x0020 - 0x0000)
struct FRCVariableGameMenuPersonaMenuInfo final
{
public:
	bool                                          bAccess;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkillMenuAccess;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkillEdit;                                      // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Hp;                                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HpMax;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableGameMenuSkillInfo>   SkillList;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuPersonaMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuPersonaMenuInfo");
static_assert(sizeof(FRCVariableGameMenuPersonaMenuInfo) == 0x000020, "Wrong size on FRCVariableGameMenuPersonaMenuInfo");
static_assert(offsetof(FRCVariableGameMenuPersonaMenuInfo, bAccess) == 0x000000, "Member 'FRCVariableGameMenuPersonaMenuInfo::bAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuPersonaMenuInfo, bSkillMenuAccess) == 0x000001, "Member 'FRCVariableGameMenuPersonaMenuInfo::bSkillMenuAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuPersonaMenuInfo, bIsSkillEdit) == 0x000002, "Member 'FRCVariableGameMenuPersonaMenuInfo::bIsSkillEdit' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuPersonaMenuInfo, Hp) == 0x000004, "Member 'FRCVariableGameMenuPersonaMenuInfo::Hp' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuPersonaMenuInfo, HpMax) == 0x000008, "Member 'FRCVariableGameMenuPersonaMenuInfo::HpMax' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuPersonaMenuInfo, SkillList) == 0x000010, "Member 'FRCVariableGameMenuPersonaMenuInfo::SkillList' has a wrong offset!");

// ScriptStruct RC.RCParamOptionGraphicsTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamOptionGraphicsTableRow final : public FTableRowBase
{
public:
	class FName                                   ItemId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamOptionGraphicsTableRow) == 0x000008, "Wrong alignment on FRCParamOptionGraphicsTableRow");
static_assert(sizeof(FRCParamOptionGraphicsTableRow) == 0x000010, "Wrong size on FRCParamOptionGraphicsTableRow");
static_assert(offsetof(FRCParamOptionGraphicsTableRow, ItemId) == 0x000008, "Member 'FRCParamOptionGraphicsTableRow::ItemId' has a wrong offset!");

// ScriptStruct RC.RCParamOptionKeyTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamOptionKeyTableRow final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryID;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TitleTextID;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsHeader;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyType;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SettingDisableFlagList;                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamOptionKeyTableRow) == 0x000008, "Wrong alignment on FRCParamOptionKeyTableRow");
static_assert(sizeof(FRCParamOptionKeyTableRow) == 0x000040, "Wrong size on FRCParamOptionKeyTableRow");
static_assert(offsetof(FRCParamOptionKeyTableRow, ID) == 0x000008, "Member 'FRCParamOptionKeyTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionKeyTableRow, CategoryID) == 0x000010, "Member 'FRCParamOptionKeyTableRow::CategoryID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionKeyTableRow, TitleTextID) == 0x000018, "Member 'FRCParamOptionKeyTableRow::TitleTextID' has a wrong offset!");
static_assert(offsetof(FRCParamOptionKeyTableRow, IsHeader) == 0x000020, "Member 'FRCParamOptionKeyTableRow::IsHeader' has a wrong offset!");
static_assert(offsetof(FRCParamOptionKeyTableRow, KeyType) == 0x000028, "Member 'FRCParamOptionKeyTableRow::KeyType' has a wrong offset!");
static_assert(offsetof(FRCParamOptionKeyTableRow, SettingDisableFlagList) == 0x000030, "Member 'FRCParamOptionKeyTableRow::SettingDisableFlagList' has a wrong offset!");

// ScriptStruct RC.RCParamOptionSoundTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamOptionSoundTableRow final : public FTableRowBase
{
public:
	class FName                                   ItemId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamOptionSoundTableRow) == 0x000008, "Wrong alignment on FRCParamOptionSoundTableRow");
static_assert(sizeof(FRCParamOptionSoundTableRow) == 0x000010, "Wrong size on FRCParamOptionSoundTableRow");
static_assert(offsetof(FRCParamOptionSoundTableRow, ItemId) == 0x000008, "Member 'FRCParamOptionSoundTableRow::ItemId' has a wrong offset!");

// ScriptStruct RC.RCParamQuestCategoryListTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamQuestCategoryListTableRow final : public FTableRowBase
{
public:
	class FName                                   QuestCategoryID;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamQuestCategoryListTableRow) == 0x000008, "Wrong alignment on FRCParamQuestCategoryListTableRow");
static_assert(sizeof(FRCParamQuestCategoryListTableRow) == 0x000018, "Wrong size on FRCParamQuestCategoryListTableRow");
static_assert(offsetof(FRCParamQuestCategoryListTableRow, QuestCategoryID) == 0x000008, "Member 'FRCParamQuestCategoryListTableRow::QuestCategoryID' has a wrong offset!");
static_assert(offsetof(FRCParamQuestCategoryListTableRow, TextID) == 0x000010, "Member 'FRCParamQuestCategoryListTableRow::TextID' has a wrong offset!");

// ScriptStruct RC.RCParamQuestListTableRow
// 0x00B0 (0x00B8 - 0x0008)
struct FRCParamQuestListTableRow final : public FTableRowBase
{
public:
	class FName                                   QuestID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestCategoryID;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartScene;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndScene;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartMapID;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartActorName;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndMapID;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndType;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EndActorName;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SortNum;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuestNum;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDQuestChapter;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDQuestTitle;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNazo;                                        // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextIDQuestNext;                                   // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDOrderPlace;                                  // 0x007C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDRequester;                                   // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDQuestCaption;                                // 0x008C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextureNameCaption;                                // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestIDPrecondition;                               // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamQuestListTableRow) == 0x000008, "Wrong alignment on FRCParamQuestListTableRow");
static_assert(sizeof(FRCParamQuestListTableRow) == 0x0000B8, "Wrong size on FRCParamQuestListTableRow");
static_assert(offsetof(FRCParamQuestListTableRow, QuestID) == 0x000008, "Member 'FRCParamQuestListTableRow::QuestID' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, Phase) == 0x000010, "Member 'FRCParamQuestListTableRow::Phase' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, QuestCategoryID) == 0x000014, "Member 'FRCParamQuestListTableRow::QuestCategoryID' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, Chapter) == 0x00001C, "Member 'FRCParamQuestListTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, StartScene) == 0x000020, "Member 'FRCParamQuestListTableRow::StartScene' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, EndScene) == 0x000024, "Member 'FRCParamQuestListTableRow::EndScene' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, StartMapID) == 0x000028, "Member 'FRCParamQuestListTableRow::StartMapID' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, StartActorName) == 0x000030, "Member 'FRCParamQuestListTableRow::StartActorName' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, EndMapID) == 0x000038, "Member 'FRCParamQuestListTableRow::EndMapID' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, EndType) == 0x000040, "Member 'FRCParamQuestListTableRow::EndType' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, EndActorName) == 0x000048, "Member 'FRCParamQuestListTableRow::EndActorName' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, SortNum) == 0x000058, "Member 'FRCParamQuestListTableRow::SortNum' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, QuestNum) == 0x00005C, "Member 'FRCParamQuestListTableRow::QuestNum' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, TextIDQuestChapter) == 0x000060, "Member 'FRCParamQuestListTableRow::TextIDQuestChapter' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, TextIDQuestTitle) == 0x000068, "Member 'FRCParamQuestListTableRow::TextIDQuestTitle' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, bClearNazo) == 0x000070, "Member 'FRCParamQuestListTableRow::bClearNazo' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, TextIDQuestNext) == 0x000074, "Member 'FRCParamQuestListTableRow::TextIDQuestNext' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, TextIDOrderPlace) == 0x00007C, "Member 'FRCParamQuestListTableRow::TextIDOrderPlace' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, TextIDRequester) == 0x000084, "Member 'FRCParamQuestListTableRow::TextIDRequester' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, TextIDQuestCaption) == 0x00008C, "Member 'FRCParamQuestListTableRow::TextIDQuestCaption' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, TextureNameCaption) == 0x000098, "Member 'FRCParamQuestListTableRow::TextureNameCaption' has a wrong offset!");
static_assert(offsetof(FRCParamQuestListTableRow, QuestIDPrecondition) == 0x0000A8, "Member 'FRCParamQuestListTableRow::QuestIDPrecondition' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuMapIconInfo
// 0x001C (0x001C - 0x0000)
struct FRCVariableGameMenuMapIconInfo final
{
public:
	class FName                                   MapID;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuStatus                             Status;                                            // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayer;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBusStop;                                          // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBusStopDisable;                                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMainQuest;                                        // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubQuestStartNum;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubQuestDestinationNum;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateOrUpdate;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCVariableGameMenuMapIconInfo) == 0x000004, "Wrong alignment on FRCVariableGameMenuMapIconInfo");
static_assert(sizeof(FRCVariableGameMenuMapIconInfo) == 0x00001C, "Wrong size on FRCVariableGameMenuMapIconInfo");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, MapID) == 0x000000, "Member 'FRCVariableGameMenuMapIconInfo::MapID' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, bNew) == 0x000008, "Member 'FRCVariableGameMenuMapIconInfo::bNew' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, Status) == 0x000009, "Member 'FRCVariableGameMenuMapIconInfo::Status' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, bPlayer) == 0x00000A, "Member 'FRCVariableGameMenuMapIconInfo::bPlayer' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, bBusStop) == 0x00000B, "Member 'FRCVariableGameMenuMapIconInfo::bBusStop' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, bBusStopDisable) == 0x00000C, "Member 'FRCVariableGameMenuMapIconInfo::bBusStopDisable' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, bMainQuest) == 0x00000D, "Member 'FRCVariableGameMenuMapIconInfo::bMainQuest' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, SubQuestStartNum) == 0x000010, "Member 'FRCVariableGameMenuMapIconInfo::SubQuestStartNum' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, SubQuestDestinationNum) == 0x000014, "Member 'FRCVariableGameMenuMapIconInfo::SubQuestDestinationNum' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapIconInfo, bCreateOrUpdate) == 0x000018, "Member 'FRCVariableGameMenuMapIconInfo::bCreateOrUpdate' has a wrong offset!");

// ScriptStruct RC.RCParamRainEffectListTableRow
// 0x0048 (0x0050 - 0x0008)
struct FRCParamRainEffectListTableRow final : public FTableRowBase
{
public:
	class FName                                   CharacterId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SocketName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EmitterStaticMeshPath;                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OffsetNormalDirection;                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SpawnRate;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamRainEffectListTableRow) == 0x000008, "Wrong alignment on FRCParamRainEffectListTableRow");
static_assert(sizeof(FRCParamRainEffectListTableRow) == 0x000050, "Wrong size on FRCParamRainEffectListTableRow");
static_assert(offsetof(FRCParamRainEffectListTableRow, CharacterId) == 0x000008, "Member 'FRCParamRainEffectListTableRow::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCParamRainEffectListTableRow, SocketName) == 0x000010, "Member 'FRCParamRainEffectListTableRow::SocketName' has a wrong offset!");
static_assert(offsetof(FRCParamRainEffectListTableRow, EmitterStaticMeshPath) == 0x000020, "Member 'FRCParamRainEffectListTableRow::EmitterStaticMeshPath' has a wrong offset!");
static_assert(offsetof(FRCParamRainEffectListTableRow, OffsetNormalDirection) == 0x000030, "Member 'FRCParamRainEffectListTableRow::OffsetNormalDirection' has a wrong offset!");
static_assert(offsetof(FRCParamRainEffectListTableRow, SpawnRate) == 0x000040, "Member 'FRCParamRainEffectListTableRow::SpawnRate' has a wrong offset!");

// ScriptStruct RC.RCParamRealEventSettingDataAssetRecord
// 0x0050 (0x0050 - 0x0000)
struct FRCParamRealEventSettingDataAssetRecord final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCRealEventActorType                         ActorType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCRealCheckActorType                         CheckActorType;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreaMoveStop;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextMapID;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextPlayerStartName;                               // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamRealEventSettingDataAssetRecord) == 0x000008, "Wrong alignment on FRCParamRealEventSettingDataAssetRecord");
static_assert(sizeof(FRCParamRealEventSettingDataAssetRecord) == 0x000050, "Wrong size on FRCParamRealEventSettingDataAssetRecord");
static_assert(offsetof(FRCParamRealEventSettingDataAssetRecord, ActorName) == 0x000000, "Member 'FRCParamRealEventSettingDataAssetRecord::ActorName' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingDataAssetRecord, ActorType) == 0x000008, "Member 'FRCParamRealEventSettingDataAssetRecord::ActorType' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingDataAssetRecord, CheckActorType) == 0x000009, "Member 'FRCParamRealEventSettingDataAssetRecord::CheckActorType' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingDataAssetRecord, Position) == 0x00000C, "Member 'FRCParamRealEventSettingDataAssetRecord::Position' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingDataAssetRecord, bAreaMoveStop) == 0x000018, "Member 'FRCParamRealEventSettingDataAssetRecord::bAreaMoveStop' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingDataAssetRecord, NextMapID) == 0x00001C, "Member 'FRCParamRealEventSettingDataAssetRecord::NextMapID' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingDataAssetRecord, NextPlayerStartName) == 0x000024, "Member 'FRCParamRealEventSettingDataAssetRecord::NextPlayerStartName' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingDataAssetRecord, TextID) == 0x00002C, "Member 'FRCParamRealEventSettingDataAssetRecord::TextID' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingDataAssetRecord, Name) == 0x000038, "Member 'FRCParamRealEventSettingDataAssetRecord::Name' has a wrong offset!");

// ScriptStruct RC.BusStopStatusFromAreamap
// 0x000C (0x000C - 0x0000)
struct FBusStopStatusFromAreamap final
{
public:
	class FName                                   MapID;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCRealEventMapConnectBusStopStatus           Status;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBusStopStatusFromAreamap) == 0x000004, "Wrong alignment on FBusStopStatusFromAreamap");
static_assert(sizeof(FBusStopStatusFromAreamap) == 0x00000C, "Wrong size on FBusStopStatusFromAreamap");
static_assert(offsetof(FBusStopStatusFromAreamap, MapID) == 0x000000, "Member 'FBusStopStatusFromAreamap::MapID' has a wrong offset!");
static_assert(offsetof(FBusStopStatusFromAreamap, Status) == 0x000008, "Member 'FBusStopStatusFromAreamap::Status' has a wrong offset!");

// ScriptStruct RC.RCParamRealEventSettingTableRow
// 0x0040 (0x0048 - 0x0008)
struct FRCParamRealEventSettingTableRow final : public FTableRowBase
{
public:
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorType;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckActorType;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreaMoveStop;                                     // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextMapID;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextPlayerStartName;                               // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamRealEventSettingTableRow) == 0x000008, "Wrong alignment on FRCParamRealEventSettingTableRow");
static_assert(sizeof(FRCParamRealEventSettingTableRow) == 0x000048, "Wrong size on FRCParamRealEventSettingTableRow");
static_assert(offsetof(FRCParamRealEventSettingTableRow, ActorName) == 0x000008, "Member 'FRCParamRealEventSettingTableRow::ActorName' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingTableRow, ActorType) == 0x000010, "Member 'FRCParamRealEventSettingTableRow::ActorType' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingTableRow, CheckActorType) == 0x000018, "Member 'FRCParamRealEventSettingTableRow::CheckActorType' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingTableRow, Position) == 0x000020, "Member 'FRCParamRealEventSettingTableRow::Position' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingTableRow, bAreaMoveStop) == 0x00002C, "Member 'FRCParamRealEventSettingTableRow::bAreaMoveStop' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingTableRow, NextMapID) == 0x000030, "Member 'FRCParamRealEventSettingTableRow::NextMapID' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingTableRow, NextPlayerStartName) == 0x000038, "Member 'FRCParamRealEventSettingTableRow::NextPlayerStartName' has a wrong offset!");
static_assert(offsetof(FRCParamRealEventSettingTableRow, TextID) == 0x000040, "Member 'FRCParamRealEventSettingTableRow::TextID' has a wrong offset!");

// ScriptStruct RC.RCParamSaveLoadDialogTableRow
// 0x0058 (0x0060 - 0x0008)
struct FRCParamSaveLoadDialogTableRow final : public FTableRowBase
{
public:
	class FName                                   CheckLoad;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckSave;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadError;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SaveError;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SaveOverWrite;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CantSave;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CantSaveDlc;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CantLoad;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckTitleBack;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AutoSaveNG;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Installing;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSaveLoadDialogTableRow) == 0x000008, "Wrong alignment on FRCParamSaveLoadDialogTableRow");
static_assert(sizeof(FRCParamSaveLoadDialogTableRow) == 0x000060, "Wrong size on FRCParamSaveLoadDialogTableRow");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, CheckLoad) == 0x000008, "Member 'FRCParamSaveLoadDialogTableRow::CheckLoad' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, CheckSave) == 0x000010, "Member 'FRCParamSaveLoadDialogTableRow::CheckSave' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, LoadError) == 0x000018, "Member 'FRCParamSaveLoadDialogTableRow::LoadError' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, SaveError) == 0x000020, "Member 'FRCParamSaveLoadDialogTableRow::SaveError' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, SaveOverWrite) == 0x000028, "Member 'FRCParamSaveLoadDialogTableRow::SaveOverWrite' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, CantSave) == 0x000030, "Member 'FRCParamSaveLoadDialogTableRow::CantSave' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, CantSaveDlc) == 0x000038, "Member 'FRCParamSaveLoadDialogTableRow::CantSaveDlc' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, CantLoad) == 0x000040, "Member 'FRCParamSaveLoadDialogTableRow::CantLoad' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, CheckTitleBack) == 0x000048, "Member 'FRCParamSaveLoadDialogTableRow::CheckTitleBack' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, AutoSaveNG) == 0x000050, "Member 'FRCParamSaveLoadDialogTableRow::AutoSaveNG' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadDialogTableRow, Installing) == 0x000058, "Member 'FRCParamSaveLoadDialogTableRow::Installing' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuQuestInfo
// 0x0030 (0x0030 - 0x0000)
struct FRCVariableGameMenuQuestInfo final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCQuestCategory                              QuestCategory;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Phase;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuQuestStatus                        Status;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CheckActorList;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SortNum;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCVariableGameMenuQuestInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuQuestInfo");
static_assert(sizeof(FRCVariableGameMenuQuestInfo) == 0x000030, "Wrong size on FRCVariableGameMenuQuestInfo");
static_assert(offsetof(FRCVariableGameMenuQuestInfo, QuestID) == 0x000000, "Member 'FRCVariableGameMenuQuestInfo::QuestID' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestInfo, QuestCategory) == 0x000008, "Member 'FRCVariableGameMenuQuestInfo::QuestCategory' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestInfo, bNew) == 0x000009, "Member 'FRCVariableGameMenuQuestInfo::bNew' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestInfo, bUpdate) == 0x00000A, "Member 'FRCVariableGameMenuQuestInfo::bUpdate' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestInfo, Phase) == 0x00000C, "Member 'FRCVariableGameMenuQuestInfo::Phase' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestInfo, Status) == 0x000010, "Member 'FRCVariableGameMenuQuestInfo::Status' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestInfo, CheckActorList) == 0x000018, "Member 'FRCVariableGameMenuQuestInfo::CheckActorList' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestInfo, SortNum) == 0x000028, "Member 'FRCVariableGameMenuQuestInfo::SortNum' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuQuestMenuInfo
// 0x0038 (0x0038 - 0x0000)
struct FRCVariableGameMenuQuestMenuInfo final
{
public:
	bool                                          bMainQuestAccess;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubQuestAccess;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableGameMenuQuestInfo>   MainQuestList;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCVariableGameMenuQuestInfo>   SubQuestList;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCVariableGameMenuQuestInfo>   DlcQuestList;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuQuestMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuQuestMenuInfo");
static_assert(sizeof(FRCVariableGameMenuQuestMenuInfo) == 0x000038, "Wrong size on FRCVariableGameMenuQuestMenuInfo");
static_assert(offsetof(FRCVariableGameMenuQuestMenuInfo, bMainQuestAccess) == 0x000000, "Member 'FRCVariableGameMenuQuestMenuInfo::bMainQuestAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestMenuInfo, bSubQuestAccess) == 0x000001, "Member 'FRCVariableGameMenuQuestMenuInfo::bSubQuestAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestMenuInfo, MainQuestList) == 0x000008, "Member 'FRCVariableGameMenuQuestMenuInfo::MainQuestList' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestMenuInfo, SubQuestList) == 0x000018, "Member 'FRCVariableGameMenuQuestMenuInfo::SubQuestList' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuQuestMenuInfo, DlcQuestList) == 0x000028, "Member 'FRCVariableGameMenuQuestMenuInfo::DlcQuestList' has a wrong offset!");

// ScriptStruct RC.RCParamSaveLoadErrorTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamSaveLoadErrorTableRow final : public FTableRowBase
{
public:
	class FName                                   ErrorID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDSw;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCodeSw;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextIDWin;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDPS5;                                         // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextIDXSX;                                         // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamSaveLoadErrorTableRow) == 0x000008, "Wrong alignment on FRCParamSaveLoadErrorTableRow");
static_assert(sizeof(FRCParamSaveLoadErrorTableRow) == 0x000038, "Wrong size on FRCParamSaveLoadErrorTableRow");
static_assert(offsetof(FRCParamSaveLoadErrorTableRow, ErrorID) == 0x000008, "Member 'FRCParamSaveLoadErrorTableRow::ErrorID' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadErrorTableRow, TextIDSw) == 0x000010, "Member 'FRCParamSaveLoadErrorTableRow::TextIDSw' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadErrorTableRow, ErrorCodeSw) == 0x000018, "Member 'FRCParamSaveLoadErrorTableRow::ErrorCodeSw' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadErrorTableRow, TextIDWin) == 0x00001C, "Member 'FRCParamSaveLoadErrorTableRow::TextIDWin' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadErrorTableRow, TextIDPS5) == 0x000024, "Member 'FRCParamSaveLoadErrorTableRow::TextIDPS5' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadErrorTableRow, TextIDXSX) == 0x00002C, "Member 'FRCParamSaveLoadErrorTableRow::TextIDXSX' has a wrong offset!");

// ScriptStruct RC.RCParamSaveLoadIconTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamSaveLoadIconTableRow final : public FTableRowBase
{
public:
	int32                                         Chapter;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ImagePath;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSaveLoadIconTableRow) == 0x000008, "Wrong alignment on FRCParamSaveLoadIconTableRow");
static_assert(sizeof(FRCParamSaveLoadIconTableRow) == 0x000020, "Wrong size on FRCParamSaveLoadIconTableRow");
static_assert(offsetof(FRCParamSaveLoadIconTableRow, Chapter) == 0x000008, "Member 'FRCParamSaveLoadIconTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadIconTableRow, ImagePath) == 0x000010, "Member 'FRCParamSaveLoadIconTableRow::ImagePath' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuMapLineInfo
// 0x0014 (0x0014 - 0x0000)
struct FRCVariableGameMenuMapLineInfo final
{
public:
	class FName                                   MapID1;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID2;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuStatus                             Status;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCVariableGameMenuMapLineInfo) == 0x000004, "Wrong alignment on FRCVariableGameMenuMapLineInfo");
static_assert(sizeof(FRCVariableGameMenuMapLineInfo) == 0x000014, "Wrong size on FRCVariableGameMenuMapLineInfo");
static_assert(offsetof(FRCVariableGameMenuMapLineInfo, MapID1) == 0x000000, "Member 'FRCVariableGameMenuMapLineInfo::MapID1' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapLineInfo, MapID2) == 0x000008, "Member 'FRCVariableGameMenuMapLineInfo::MapID2' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapLineInfo, Status) == 0x000010, "Member 'FRCVariableGameMenuMapLineInfo::Status' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuMapMenuInfo
// 0x0028 (0x0028 - 0x0000)
struct FRCVariableGameMenuMapMenuInfo final
{
public:
	bool                                          bAccess;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableGameMenuMapIconInfo> IconList;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRCVariableGameMenuMapLineInfo> LineList;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuMapMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuMapMenuInfo");
static_assert(sizeof(FRCVariableGameMenuMapMenuInfo) == 0x000028, "Wrong size on FRCVariableGameMenuMapMenuInfo");
static_assert(offsetof(FRCVariableGameMenuMapMenuInfo, bAccess) == 0x000000, "Member 'FRCVariableGameMenuMapMenuInfo::bAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapMenuInfo, IconList) == 0x000008, "Member 'FRCVariableGameMenuMapMenuInfo::IconList' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuMapMenuInfo, LineList) == 0x000018, "Member 'FRCVariableGameMenuMapMenuInfo::LineList' has a wrong offset!");

// ScriptStruct RC.RCParamSaveLoadTextTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamSaveLoadTextTableRow final : public FTableRowBase
{
public:
	class FName                                   FileNoText;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AutoSaveText;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewSaveData;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NoSaveData;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NazoMapName;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSaveLoadTextTableRow) == 0x000008, "Wrong alignment on FRCParamSaveLoadTextTableRow");
static_assert(sizeof(FRCParamSaveLoadTextTableRow) == 0x000030, "Wrong size on FRCParamSaveLoadTextTableRow");
static_assert(offsetof(FRCParamSaveLoadTextTableRow, FileNoText) == 0x000008, "Member 'FRCParamSaveLoadTextTableRow::FileNoText' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadTextTableRow, AutoSaveText) == 0x000010, "Member 'FRCParamSaveLoadTextTableRow::AutoSaveText' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadTextTableRow, NewSaveData) == 0x000018, "Member 'FRCParamSaveLoadTextTableRow::NewSaveData' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadTextTableRow, NoSaveData) == 0x000020, "Member 'FRCParamSaveLoadTextTableRow::NoSaveData' has a wrong offset!");
static_assert(offsetof(FRCParamSaveLoadTextTableRow, NazoMapName) == 0x000028, "Member 'FRCParamSaveLoadTextTableRow::NazoMapName' has a wrong offset!");

// ScriptStruct RC.RCParamSequencerSoundTemplateTableRow
// 0x0048 (0x0050 - 0x0008)
struct FRCParamSequencerSoundTemplateTableRow final : public FTableRowBase
{
public:
	float                                         Time;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamSoundID;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundType;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SubTitleID;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSubTitle;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStart;                                           // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChangeVolume;                                    // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFedeIn;                                          // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FedeInTime;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFadeOut;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FedeOutTime;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSequencerSoundTemplateTableRow) == 0x000008, "Wrong alignment on FRCParamSequencerSoundTemplateTableRow");
static_assert(sizeof(FRCParamSequencerSoundTemplateTableRow) == 0x000050, "Wrong size on FRCParamSequencerSoundTemplateTableRow");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, Time) == 0x000008, "Member 'FRCParamSequencerSoundTemplateTableRow::Time' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, ParamSoundID) == 0x000010, "Member 'FRCParamSequencerSoundTemplateTableRow::ParamSoundID' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, SoundType) == 0x000020, "Member 'FRCParamSequencerSoundTemplateTableRow::SoundType' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, SubTitleID) == 0x000028, "Member 'FRCParamSequencerSoundTemplateTableRow::SubTitleID' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, IsSubTitle) == 0x000038, "Member 'FRCParamSequencerSoundTemplateTableRow::IsSubTitle' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, IsStart) == 0x000039, "Member 'FRCParamSequencerSoundTemplateTableRow::IsStart' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, IsChangeVolume) == 0x00003A, "Member 'FRCParamSequencerSoundTemplateTableRow::IsChangeVolume' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, Volume) == 0x00003C, "Member 'FRCParamSequencerSoundTemplateTableRow::Volume' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, IsLoop) == 0x000040, "Member 'FRCParamSequencerSoundTemplateTableRow::IsLoop' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, IsFedeIn) == 0x000041, "Member 'FRCParamSequencerSoundTemplateTableRow::IsFedeIn' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, FedeInTime) == 0x000044, "Member 'FRCParamSequencerSoundTemplateTableRow::FedeInTime' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, IsFadeOut) == 0x000048, "Member 'FRCParamSequencerSoundTemplateTableRow::IsFadeOut' has a wrong offset!");
static_assert(offsetof(FRCParamSequencerSoundTemplateTableRow, FedeOutTime) == 0x00004C, "Member 'FRCParamSequencerSoundTemplateTableRow::FedeOutTime' has a wrong offset!");

// ScriptStruct RC.RCVariableLogInfo
// 0x001C (0x001C - 0x0000)
struct FRCVariableLogInfo final
{
public:
	int32                                         LogNum;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFaceID;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterFacialID;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableLogInfo) == 0x000004, "Wrong alignment on FRCVariableLogInfo");
static_assert(sizeof(FRCVariableLogInfo) == 0x00001C, "Wrong size on FRCVariableLogInfo");
static_assert(offsetof(FRCVariableLogInfo, LogNum) == 0x000000, "Member 'FRCVariableLogInfo::LogNum' has a wrong offset!");
static_assert(offsetof(FRCVariableLogInfo, CharacterFaceID) == 0x000004, "Member 'FRCVariableLogInfo::CharacterFaceID' has a wrong offset!");
static_assert(offsetof(FRCVariableLogInfo, CharacterFacialID) == 0x000008, "Member 'FRCVariableLogInfo::CharacterFacialID' has a wrong offset!");
static_assert(offsetof(FRCVariableLogInfo, TextID) == 0x00000C, "Member 'FRCVariableLogInfo::TextID' has a wrong offset!");
static_assert(offsetof(FRCVariableLogInfo, VoiceID) == 0x000014, "Member 'FRCVariableLogInfo::VoiceID' has a wrong offset!");

// ScriptStruct RC.RCVariableLogList
// 0x0018 (0x0018 - 0x0000)
struct FRCVariableLogList final
{
public:
	int32                                         LastLogNum;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableLogInfo>             LogList;                                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableLogList) == 0x000008, "Wrong alignment on FRCVariableLogList");
static_assert(sizeof(FRCVariableLogList) == 0x000018, "Wrong size on FRCVariableLogList");
static_assert(offsetof(FRCVariableLogList, LastLogNum) == 0x000000, "Member 'FRCVariableLogList::LastLogNum' has a wrong offset!");
static_assert(offsetof(FRCVariableLogList, LogList) == 0x000008, "Member 'FRCVariableLogList::LogList' has a wrong offset!");

// ScriptStruct RC.RCParamShinigamiExIdleTableRow
// 0x00A8 (0x00B0 - 0x0008)
struct FRCParamShinigamiExIdleTableRow final : public FTableRowBase
{
public:
	class FName                                   ExIdleID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChapterNum;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShinigamiEmotionType;                              // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitSecMin;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitSecMax;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence1;                                     // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability1;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence2;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability2;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence3;                                     // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability3;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence4;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability4;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence5;                                     // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability5;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence6;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability6;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence7;                                     // 0x007C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability7;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence8;                                     // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability8;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence9;                                     // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability9;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaySequence10;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayProbability10;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamShinigamiExIdleTableRow) == 0x000008, "Wrong alignment on FRCParamShinigamiExIdleTableRow");
static_assert(sizeof(FRCParamShinigamiExIdleTableRow) == 0x0000B0, "Wrong size on FRCParamShinigamiExIdleTableRow");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, ExIdleID) == 0x000008, "Member 'FRCParamShinigamiExIdleTableRow::ExIdleID' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, ChapterNum) == 0x000010, "Member 'FRCParamShinigamiExIdleTableRow::ChapterNum' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, SceneID) == 0x000014, "Member 'FRCParamShinigamiExIdleTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, MapID) == 0x00001C, "Member 'FRCParamShinigamiExIdleTableRow::MapID' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, ShinigamiEmotionType) == 0x000024, "Member 'FRCParamShinigamiExIdleTableRow::ShinigamiEmotionType' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, WaitSecMin) == 0x00002C, "Member 'FRCParamShinigamiExIdleTableRow::WaitSecMin' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, WaitSecMax) == 0x000030, "Member 'FRCParamShinigamiExIdleTableRow::WaitSecMax' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence1) == 0x000034, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence1' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability1) == 0x00003C, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability1' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence2) == 0x000040, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence2' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability2) == 0x000048, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability2' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence3) == 0x00004C, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence3' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability3) == 0x000054, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability3' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence4) == 0x000058, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence4' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability4) == 0x000060, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability4' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence5) == 0x000064, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence5' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability5) == 0x00006C, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability5' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence6) == 0x000070, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence6' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability6) == 0x000078, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability6' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence7) == 0x00007C, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence7' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability7) == 0x000084, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability7' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence8) == 0x000088, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence8' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability8) == 0x000090, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability8' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence9) == 0x000094, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence9' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability9) == 0x00009C, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability9' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlaySequence10) == 0x0000A0, "Member 'FRCParamShinigamiExIdleTableRow::PlaySequence10' has a wrong offset!");
static_assert(offsetof(FRCParamShinigamiExIdleTableRow, PlayProbability10) == 0x0000A8, "Member 'FRCParamShinigamiExIdleTableRow::PlayProbability10' has a wrong offset!");

// ScriptStruct RC.RCParamSkillEquipmentListTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamSkillEquipmentListTableRow final : public FTableRowBase
{
public:
	class FName                                   SkillFunctionID;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillValue;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillModeTextID;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SKillCaptionTextID;                                // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillValueTextID;                                  // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillIconIndex;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSkillEquipmentListTableRow) == 0x000008, "Wrong alignment on FRCParamSkillEquipmentListTableRow");
static_assert(sizeof(FRCParamSkillEquipmentListTableRow) == 0x000030, "Wrong size on FRCParamSkillEquipmentListTableRow");
static_assert(offsetof(FRCParamSkillEquipmentListTableRow, SkillFunctionID) == 0x000008, "Member 'FRCParamSkillEquipmentListTableRow::SkillFunctionID' has a wrong offset!");
static_assert(offsetof(FRCParamSkillEquipmentListTableRow, SkillValue) == 0x000010, "Member 'FRCParamSkillEquipmentListTableRow::SkillValue' has a wrong offset!");
static_assert(offsetof(FRCParamSkillEquipmentListTableRow, SkillModeTextID) == 0x000014, "Member 'FRCParamSkillEquipmentListTableRow::SkillModeTextID' has a wrong offset!");
static_assert(offsetof(FRCParamSkillEquipmentListTableRow, SKillCaptionTextID) == 0x00001C, "Member 'FRCParamSkillEquipmentListTableRow::SKillCaptionTextID' has a wrong offset!");
static_assert(offsetof(FRCParamSkillEquipmentListTableRow, SkillValueTextID) == 0x000024, "Member 'FRCParamSkillEquipmentListTableRow::SkillValueTextID' has a wrong offset!");
static_assert(offsetof(FRCParamSkillEquipmentListTableRow, SkillIconIndex) == 0x00002C, "Member 'FRCParamSkillEquipmentListTableRow::SkillIconIndex' has a wrong offset!");

// ScriptStruct RC.RCVariableSelectAlreadyInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCVariableSelectAlreadyInfo final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableSelectAlreadyInfo) == 0x000004, "Wrong alignment on FRCVariableSelectAlreadyInfo");
static_assert(sizeof(FRCVariableSelectAlreadyInfo) == 0x000010, "Wrong size on FRCVariableSelectAlreadyInfo");
static_assert(offsetof(FRCVariableSelectAlreadyInfo, TextID) == 0x000000, "Member 'FRCVariableSelectAlreadyInfo::TextID' has a wrong offset!");
static_assert(offsetof(FRCVariableSelectAlreadyInfo, SceneID) == 0x000008, "Member 'FRCVariableSelectAlreadyInfo::SceneID' has a wrong offset!");

// ScriptStruct RC.RCVariableSelectAlreadyAllInfo
// 0x0010 (0x0010 - 0x0000)
struct FRCVariableSelectAlreadyAllInfo final
{
public:
	TArray<struct FRCVariableSelectAlreadyInfo>   SelectAlreadyList;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableSelectAlreadyAllInfo) == 0x000008, "Wrong alignment on FRCVariableSelectAlreadyAllInfo");
static_assert(sizeof(FRCVariableSelectAlreadyAllInfo) == 0x000010, "Wrong size on FRCVariableSelectAlreadyAllInfo");
static_assert(offsetof(FRCVariableSelectAlreadyAllInfo, SelectAlreadyList) == 0x000000, "Member 'FRCVariableSelectAlreadyAllInfo::SelectAlreadyList' has a wrong offset!");

// ScriptStruct RC.RCParamSkillListTableRow
// 0x0060 (0x0068 - 0x0008)
struct FRCParamSkillListTableRow final : public FTableRowBase
{
public:
	class FName                                   SkillID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillPoint;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCost;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillRank;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionX;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionY;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreSkillID;                                        // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillFunctionID;                                   // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillValue;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillType;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillTypeValue;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillIconName;                                     // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillReleasedValue;                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillReleaseAchievedValue;                         // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillNameTextID;                                   // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillDescriptionTextID;                            // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamSkillListTableRow) == 0x000008, "Wrong alignment on FRCParamSkillListTableRow");
static_assert(sizeof(FRCParamSkillListTableRow) == 0x000068, "Wrong size on FRCParamSkillListTableRow");
static_assert(offsetof(FRCParamSkillListTableRow, SkillID) == 0x000008, "Member 'FRCParamSkillListTableRow::SkillID' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillPoint) == 0x000010, "Member 'FRCParamSkillListTableRow::SkillPoint' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillCost) == 0x000014, "Member 'FRCParamSkillListTableRow::SkillCost' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillRank) == 0x000018, "Member 'FRCParamSkillListTableRow::SkillRank' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, PositionX) == 0x00001C, "Member 'FRCParamSkillListTableRow::PositionX' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, PositionY) == 0x000020, "Member 'FRCParamSkillListTableRow::PositionY' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, PreSkillID) == 0x000024, "Member 'FRCParamSkillListTableRow::PreSkillID' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillFunctionID) == 0x00002C, "Member 'FRCParamSkillListTableRow::SkillFunctionID' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillValue) == 0x000034, "Member 'FRCParamSkillListTableRow::SkillValue' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillType) == 0x000038, "Member 'FRCParamSkillListTableRow::SkillType' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillTypeValue) == 0x000040, "Member 'FRCParamSkillListTableRow::SkillTypeValue' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillIconName) == 0x000044, "Member 'FRCParamSkillListTableRow::SkillIconName' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillReleasedValue) == 0x00004C, "Member 'FRCParamSkillListTableRow::SkillReleasedValue' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillReleaseAchievedValue) == 0x000050, "Member 'FRCParamSkillListTableRow::SkillReleaseAchievedValue' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillNameTextID) == 0x000054, "Member 'FRCParamSkillListTableRow::SkillNameTextID' has a wrong offset!");
static_assert(offsetof(FRCParamSkillListTableRow, SkillDescriptionTextID) == 0x00005C, "Member 'FRCParamSkillListTableRow::SkillDescriptionTextID' has a wrong offset!");

// ScriptStruct RC.RCParamSocketListTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamSocketListTableRow final : public FTableRowBase
{
public:
	class FName                                   AttachPlaceId;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSocketListTableRow) == 0x000008, "Wrong alignment on FRCParamSocketListTableRow");
static_assert(sizeof(FRCParamSocketListTableRow) == 0x000018, "Wrong size on FRCParamSocketListTableRow");
static_assert(offsetof(FRCParamSocketListTableRow, AttachPlaceId) == 0x000008, "Member 'FRCParamSocketListTableRow::AttachPlaceId' has a wrong offset!");
static_assert(offsetof(FRCParamSocketListTableRow, SocketName) == 0x000010, "Member 'FRCParamSocketListTableRow::SocketName' has a wrong offset!");

// ScriptStruct RC.RCParamSoundFormatTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamSoundFormatTableRow final : public FTableRowBase
{
public:
	class FString                                 IdFormat;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSoundFormatTableRow) == 0x000008, "Wrong alignment on FRCParamSoundFormatTableRow");
static_assert(sizeof(FRCParamSoundFormatTableRow) == 0x000018, "Wrong size on FRCParamSoundFormatTableRow");
static_assert(offsetof(FRCParamSoundFormatTableRow, IdFormat) == 0x000008, "Member 'FRCParamSoundFormatTableRow::IdFormat' has a wrong offset!");

// ScriptStruct RC.RCParamSoundIdListTemplateTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamSoundIdListTemplateTableRow final : public FTableRowBase
{
public:
	class FString                                 ParamSoundID;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         soundIndex;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionType;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharaID;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSoundIdListTemplateTableRow) == 0x000008, "Wrong alignment on FRCParamSoundIdListTemplateTableRow");
static_assert(sizeof(FRCParamSoundIdListTemplateTableRow) == 0x000040, "Wrong size on FRCParamSoundIdListTemplateTableRow");
static_assert(offsetof(FRCParamSoundIdListTemplateTableRow, ParamSoundID) == 0x000008, "Member 'FRCParamSoundIdListTemplateTableRow::ParamSoundID' has a wrong offset!");
static_assert(offsetof(FRCParamSoundIdListTemplateTableRow, soundIndex) == 0x000018, "Member 'FRCParamSoundIdListTemplateTableRow::soundIndex' has a wrong offset!");
static_assert(offsetof(FRCParamSoundIdListTemplateTableRow, OptionType) == 0x00001C, "Member 'FRCParamSoundIdListTemplateTableRow::OptionType' has a wrong offset!");
static_assert(offsetof(FRCParamSoundIdListTemplateTableRow, SoundId) == 0x000020, "Member 'FRCParamSoundIdListTemplateTableRow::SoundId' has a wrong offset!");
static_assert(offsetof(FRCParamSoundIdListTemplateTableRow, CharaID) == 0x000030, "Member 'FRCParamSoundIdListTemplateTableRow::CharaID' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuTopSelectInfo
// 0x0005 (0x0005 - 0x0000)
struct FRCVariableGameMenuTopSelectInfo final
{
public:
	ERCGameMenuSelectType                         Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuKaikagiStatus                      KaikagiStatus;                                     // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuStatus                             Status;                                            // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuTopSelectInfo) == 0x000001, "Wrong alignment on FRCVariableGameMenuTopSelectInfo");
static_assert(sizeof(FRCVariableGameMenuTopSelectInfo) == 0x000005, "Wrong size on FRCVariableGameMenuTopSelectInfo");
static_assert(offsetof(FRCVariableGameMenuTopSelectInfo, Type) == 0x000000, "Member 'FRCVariableGameMenuTopSelectInfo::Type' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopSelectInfo, bNew) == 0x000001, "Member 'FRCVariableGameMenuTopSelectInfo::bNew' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopSelectInfo, bUpdate) == 0x000002, "Member 'FRCVariableGameMenuTopSelectInfo::bUpdate' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopSelectInfo, KaikagiStatus) == 0x000003, "Member 'FRCVariableGameMenuTopSelectInfo::KaikagiStatus' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopSelectInfo, Status) == 0x000004, "Member 'FRCVariableGameMenuTopSelectInfo::Status' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuTopMenuInfo
// 0x0028 (0x0028 - 0x0000)
struct FRCVariableGameMenuTopMenuInfo final
{
public:
	bool                                          bAccess;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TopMenuID;                                         // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuType                               MenuType;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTanteiPointDraw;                                  // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawWorldMap;                                     // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerUnknown;                                    // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuMapM03IconType                     MapM03IconType;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuMapM07IconType                     MapM07IconType;                                    // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCGameMenuPlayerIconType                     PlayerIconType;                                    // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFastTravel;                                       // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableGameMenuTopSelectInfo> SelectList;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuTopMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuTopMenuInfo");
static_assert(sizeof(FRCVariableGameMenuTopMenuInfo) == 0x000028, "Wrong size on FRCVariableGameMenuTopMenuInfo");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, bAccess) == 0x000000, "Member 'FRCVariableGameMenuTopMenuInfo::bAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, TopMenuID) == 0x000004, "Member 'FRCVariableGameMenuTopMenuInfo::TopMenuID' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, MenuType) == 0x00000C, "Member 'FRCVariableGameMenuTopMenuInfo::MenuType' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, bTanteiPointDraw) == 0x00000D, "Member 'FRCVariableGameMenuTopMenuInfo::bTanteiPointDraw' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, bDrawWorldMap) == 0x00000E, "Member 'FRCVariableGameMenuTopMenuInfo::bDrawWorldMap' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, bPlayerUnknown) == 0x00000F, "Member 'FRCVariableGameMenuTopMenuInfo::bPlayerUnknown' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, MapM03IconType) == 0x000010, "Member 'FRCVariableGameMenuTopMenuInfo::MapM03IconType' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, MapM07IconType) == 0x000011, "Member 'FRCVariableGameMenuTopMenuInfo::MapM07IconType' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, PlayerIconType) == 0x000012, "Member 'FRCVariableGameMenuTopMenuInfo::PlayerIconType' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, bFastTravel) == 0x000013, "Member 'FRCVariableGameMenuTopMenuInfo::bFastTravel' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuTopMenuInfo, SelectList) == 0x000018, "Member 'FRCVariableGameMenuTopMenuInfo::SelectList' has a wrong offset!");

// ScriptStruct RC.RCParamSoundNonResidentListTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamSoundNonResidentListTableRow final : public FTableRowBase
{
public:
	class FString                                 SheetID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundType;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DataPath;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SheetName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSoundNonResidentListTableRow) == 0x000008, "Wrong alignment on FRCParamSoundNonResidentListTableRow");
static_assert(sizeof(FRCParamSoundNonResidentListTableRow) == 0x000040, "Wrong size on FRCParamSoundNonResidentListTableRow");
static_assert(offsetof(FRCParamSoundNonResidentListTableRow, SheetID) == 0x000008, "Member 'FRCParamSoundNonResidentListTableRow::SheetID' has a wrong offset!");
static_assert(offsetof(FRCParamSoundNonResidentListTableRow, SoundType) == 0x000018, "Member 'FRCParamSoundNonResidentListTableRow::SoundType' has a wrong offset!");
static_assert(offsetof(FRCParamSoundNonResidentListTableRow, DataPath) == 0x000020, "Member 'FRCParamSoundNonResidentListTableRow::DataPath' has a wrong offset!");
static_assert(offsetof(FRCParamSoundNonResidentListTableRow, SheetName) == 0x000030, "Member 'FRCParamSoundNonResidentListTableRow::SheetName' has a wrong offset!");

// ScriptStruct RC.RCParamSoundResidentListTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamSoundResidentListTableRow final : public FTableRowBase
{
public:
	int32                                         SoundType;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DataPath;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSoundResidentListTableRow) == 0x000008, "Wrong alignment on FRCParamSoundResidentListTableRow");
static_assert(sizeof(FRCParamSoundResidentListTableRow) == 0x000020, "Wrong size on FRCParamSoundResidentListTableRow");
static_assert(offsetof(FRCParamSoundResidentListTableRow, SoundType) == 0x000008, "Member 'FRCParamSoundResidentListTableRow::SoundType' has a wrong offset!");
static_assert(offsetof(FRCParamSoundResidentListTableRow, DataPath) == 0x000010, "Member 'FRCParamSoundResidentListTableRow::DataPath' has a wrong offset!");

// ScriptStruct RC.RCParamStaffRollListTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamStaffRollListTableRow final : public FTableRowBase
{
public:
	class FName                                   ContentType;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextIDList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   IsDispAsia;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispEU;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispUS;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispKR;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamStaffRollListTableRow) == 0x000008, "Wrong alignment on FRCParamStaffRollListTableRow");
static_assert(sizeof(FRCParamStaffRollListTableRow) == 0x000040, "Wrong size on FRCParamStaffRollListTableRow");
static_assert(offsetof(FRCParamStaffRollListTableRow, ContentType) == 0x000008, "Member 'FRCParamStaffRollListTableRow::ContentType' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollListTableRow, TextIDList) == 0x000010, "Member 'FRCParamStaffRollListTableRow::TextIDList' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollListTableRow, IsDispAsia) == 0x000020, "Member 'FRCParamStaffRollListTableRow::IsDispAsia' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollListTableRow, IsDispEU) == 0x000028, "Member 'FRCParamStaffRollListTableRow::IsDispEU' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollListTableRow, IsDispUS) == 0x000030, "Member 'FRCParamStaffRollListTableRow::IsDispUS' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollListTableRow, IsDispKR) == 0x000038, "Member 'FRCParamStaffRollListTableRow::IsDispKR' has a wrong offset!");

// ScriptStruct RC.RCParamStaffRollList_PS5TableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamStaffRollList_PS5TableRow final : public FTableRowBase
{
public:
	class FName                                   ContentType;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextIDList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   IsDispAsia;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispEU;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispUS;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispKR;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamStaffRollList_PS5TableRow) == 0x000008, "Wrong alignment on FRCParamStaffRollList_PS5TableRow");
static_assert(sizeof(FRCParamStaffRollList_PS5TableRow) == 0x000040, "Wrong size on FRCParamStaffRollList_PS5TableRow");
static_assert(offsetof(FRCParamStaffRollList_PS5TableRow, ContentType) == 0x000008, "Member 'FRCParamStaffRollList_PS5TableRow::ContentType' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_PS5TableRow, TextIDList) == 0x000010, "Member 'FRCParamStaffRollList_PS5TableRow::TextIDList' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_PS5TableRow, IsDispAsia) == 0x000020, "Member 'FRCParamStaffRollList_PS5TableRow::IsDispAsia' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_PS5TableRow, IsDispEU) == 0x000028, "Member 'FRCParamStaffRollList_PS5TableRow::IsDispEU' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_PS5TableRow, IsDispUS) == 0x000030, "Member 'FRCParamStaffRollList_PS5TableRow::IsDispUS' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_PS5TableRow, IsDispKR) == 0x000038, "Member 'FRCParamStaffRollList_PS5TableRow::IsDispKR' has a wrong offset!");

// ScriptStruct RC.RCParamStaffRollList_SwitchTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamStaffRollList_SwitchTableRow final : public FTableRowBase
{
public:
	class FName                                   ContentType;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextIDList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   IsDispAsia;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispEU;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispUS;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispKR;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamStaffRollList_SwitchTableRow) == 0x000008, "Wrong alignment on FRCParamStaffRollList_SwitchTableRow");
static_assert(sizeof(FRCParamStaffRollList_SwitchTableRow) == 0x000040, "Wrong size on FRCParamStaffRollList_SwitchTableRow");
static_assert(offsetof(FRCParamStaffRollList_SwitchTableRow, ContentType) == 0x000008, "Member 'FRCParamStaffRollList_SwitchTableRow::ContentType' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_SwitchTableRow, TextIDList) == 0x000010, "Member 'FRCParamStaffRollList_SwitchTableRow::TextIDList' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_SwitchTableRow, IsDispAsia) == 0x000020, "Member 'FRCParamStaffRollList_SwitchTableRow::IsDispAsia' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_SwitchTableRow, IsDispEU) == 0x000028, "Member 'FRCParamStaffRollList_SwitchTableRow::IsDispEU' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_SwitchTableRow, IsDispUS) == 0x000030, "Member 'FRCParamStaffRollList_SwitchTableRow::IsDispUS' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_SwitchTableRow, IsDispKR) == 0x000038, "Member 'FRCParamStaffRollList_SwitchTableRow::IsDispKR' has a wrong offset!");

// ScriptStruct RC.RCParamStaffRollList_XboxTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamStaffRollList_XboxTableRow final : public FTableRowBase
{
public:
	class FName                                   ContentType;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextIDList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   IsDispAsia;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispEU;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispUS;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsDispKR;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamStaffRollList_XboxTableRow) == 0x000008, "Wrong alignment on FRCParamStaffRollList_XboxTableRow");
static_assert(sizeof(FRCParamStaffRollList_XboxTableRow) == 0x000040, "Wrong size on FRCParamStaffRollList_XboxTableRow");
static_assert(offsetof(FRCParamStaffRollList_XboxTableRow, ContentType) == 0x000008, "Member 'FRCParamStaffRollList_XboxTableRow::ContentType' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_XboxTableRow, TextIDList) == 0x000010, "Member 'FRCParamStaffRollList_XboxTableRow::TextIDList' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_XboxTableRow, IsDispAsia) == 0x000020, "Member 'FRCParamStaffRollList_XboxTableRow::IsDispAsia' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_XboxTableRow, IsDispEU) == 0x000028, "Member 'FRCParamStaffRollList_XboxTableRow::IsDispEU' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_XboxTableRow, IsDispUS) == 0x000030, "Member 'FRCParamStaffRollList_XboxTableRow::IsDispUS' has a wrong offset!");
static_assert(offsetof(FRCParamStaffRollList_XboxTableRow, IsDispKR) == 0x000038, "Member 'FRCParamStaffRollList_XboxTableRow::IsDispKR' has a wrong offset!");

// ScriptStruct RC.RCParamStartupTextTableRow
// 0x0050 (0x0058 - 0x0008)
struct FRCParamStartupTextTableRow final : public FTableRowBase
{
public:
	class FName                                   AutoSaveText;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CautionTitleText;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CautionMainText;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckSaveDataText;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckDLCDataText;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CopyLightText_ASIA;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CopyLightText_US;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CopyLightText_EU;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CopyLightText_KO;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CopyLightText_ALL;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamStartupTextTableRow) == 0x000008, "Wrong alignment on FRCParamStartupTextTableRow");
static_assert(sizeof(FRCParamStartupTextTableRow) == 0x000058, "Wrong size on FRCParamStartupTextTableRow");
static_assert(offsetof(FRCParamStartupTextTableRow, AutoSaveText) == 0x000008, "Member 'FRCParamStartupTextTableRow::AutoSaveText' has a wrong offset!");
static_assert(offsetof(FRCParamStartupTextTableRow, CautionTitleText) == 0x000010, "Member 'FRCParamStartupTextTableRow::CautionTitleText' has a wrong offset!");
static_assert(offsetof(FRCParamStartupTextTableRow, CautionMainText) == 0x000018, "Member 'FRCParamStartupTextTableRow::CautionMainText' has a wrong offset!");
static_assert(offsetof(FRCParamStartupTextTableRow, CheckSaveDataText) == 0x000020, "Member 'FRCParamStartupTextTableRow::CheckSaveDataText' has a wrong offset!");
static_assert(offsetof(FRCParamStartupTextTableRow, CheckDLCDataText) == 0x000028, "Member 'FRCParamStartupTextTableRow::CheckDLCDataText' has a wrong offset!");
static_assert(offsetof(FRCParamStartupTextTableRow, CopyLightText_ASIA) == 0x000030, "Member 'FRCParamStartupTextTableRow::CopyLightText_ASIA' has a wrong offset!");
static_assert(offsetof(FRCParamStartupTextTableRow, CopyLightText_US) == 0x000038, "Member 'FRCParamStartupTextTableRow::CopyLightText_US' has a wrong offset!");
static_assert(offsetof(FRCParamStartupTextTableRow, CopyLightText_EU) == 0x000040, "Member 'FRCParamStartupTextTableRow::CopyLightText_EU' has a wrong offset!");
static_assert(offsetof(FRCParamStartupTextTableRow, CopyLightText_KO) == 0x000048, "Member 'FRCParamStartupTextTableRow::CopyLightText_KO' has a wrong offset!");
static_assert(offsetof(FRCParamStartupTextTableRow, CopyLightText_ALL) == 0x000050, "Member 'FRCParamStartupTextTableRow::CopyLightText_ALL' has a wrong offset!");

// ScriptStruct RC.RCParamSystemTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCParamSystemTableRow final : public FTableRowBase
{
public:
	int32                                         DefaultHp;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkipGameSpeed;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerSpeedRun;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerSpeedWalk;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerSpeedTrain;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerSpeedYoro;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobSpeedRun;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobSpeedWalk;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterDitherFadeInTime;                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterDitherFadeOutTime;                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KakiwariDitherFadeInTime;                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KakiwariDitherFadeOutTime;                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobOtherPlayerLength;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobStopPlayerLength;                               // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamSystemTableRow) == 0x000008, "Wrong alignment on FRCParamSystemTableRow");
static_assert(sizeof(FRCParamSystemTableRow) == 0x000040, "Wrong size on FRCParamSystemTableRow");
static_assert(offsetof(FRCParamSystemTableRow, DefaultHp) == 0x000008, "Member 'FRCParamSystemTableRow::DefaultHp' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, SkipGameSpeed) == 0x00000C, "Member 'FRCParamSystemTableRow::SkipGameSpeed' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, PlayerSpeedRun) == 0x000010, "Member 'FRCParamSystemTableRow::PlayerSpeedRun' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, PlayerSpeedWalk) == 0x000014, "Member 'FRCParamSystemTableRow::PlayerSpeedWalk' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, PlayerSpeedTrain) == 0x000018, "Member 'FRCParamSystemTableRow::PlayerSpeedTrain' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, PlayerSpeedYoro) == 0x00001C, "Member 'FRCParamSystemTableRow::PlayerSpeedYoro' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, MobSpeedRun) == 0x000020, "Member 'FRCParamSystemTableRow::MobSpeedRun' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, MobSpeedWalk) == 0x000024, "Member 'FRCParamSystemTableRow::MobSpeedWalk' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, CharacterDitherFadeInTime) == 0x000028, "Member 'FRCParamSystemTableRow::CharacterDitherFadeInTime' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, CharacterDitherFadeOutTime) == 0x00002C, "Member 'FRCParamSystemTableRow::CharacterDitherFadeOutTime' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, KakiwariDitherFadeInTime) == 0x000030, "Member 'FRCParamSystemTableRow::KakiwariDitherFadeInTime' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, KakiwariDitherFadeOutTime) == 0x000034, "Member 'FRCParamSystemTableRow::KakiwariDitherFadeOutTime' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, MobOtherPlayerLength) == 0x000038, "Member 'FRCParamSystemTableRow::MobOtherPlayerLength' has a wrong offset!");
static_assert(offsetof(FRCParamSystemTableRow, MobStopPlayerLength) == 0x00003C, "Member 'FRCParamSystemTableRow::MobStopPlayerLength' has a wrong offset!");

// ScriptStruct RC.RCParamSystemPlatformTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamSystemPlatformTableRow final : public FTableRowBase
{
public:
	int32                                         LodNum;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthActorMin;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthActorMax;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthKakiwariMin;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthKakiwariMax;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthCameraAlphaMin;                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthCameraAlphaMax;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterDrawMax;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MobDrawMax;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KakiwariDrawMax;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MobSpawnMemoryThreshold;                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamSystemPlatformTableRow) == 0x000008, "Wrong alignment on FRCParamSystemPlatformTableRow");
static_assert(sizeof(FRCParamSystemPlatformTableRow) == 0x000038, "Wrong size on FRCParamSystemPlatformTableRow");
static_assert(offsetof(FRCParamSystemPlatformTableRow, LodNum) == 0x000008, "Member 'FRCParamSystemPlatformTableRow::LodNum' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, LengthActorMin) == 0x00000C, "Member 'FRCParamSystemPlatformTableRow::LengthActorMin' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, LengthActorMax) == 0x000010, "Member 'FRCParamSystemPlatformTableRow::LengthActorMax' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, LengthKakiwariMin) == 0x000014, "Member 'FRCParamSystemPlatformTableRow::LengthKakiwariMin' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, LengthKakiwariMax) == 0x000018, "Member 'FRCParamSystemPlatformTableRow::LengthKakiwariMax' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, LengthCameraAlphaMin) == 0x00001C, "Member 'FRCParamSystemPlatformTableRow::LengthCameraAlphaMin' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, LengthCameraAlphaMax) == 0x000020, "Member 'FRCParamSystemPlatformTableRow::LengthCameraAlphaMax' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, CharacterDrawMax) == 0x000024, "Member 'FRCParamSystemPlatformTableRow::CharacterDrawMax' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, MobDrawMax) == 0x000028, "Member 'FRCParamSystemPlatformTableRow::MobDrawMax' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, KakiwariDrawMax) == 0x00002C, "Member 'FRCParamSystemPlatformTableRow::KakiwariDrawMax' has a wrong offset!");
static_assert(offsetof(FRCParamSystemPlatformTableRow, MobSpawnMemoryThreshold) == 0x000030, "Member 'FRCParamSystemPlatformTableRow::MobSpawnMemoryThreshold' has a wrong offset!");

// ScriptStruct RC.RCParamTalkTextTagListTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamTalkTextTagListTableRow final : public FTableRowBase
{
public:
	class FName                                   SpeakerId;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagName;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTalkTextTagListTableRow) == 0x000008, "Wrong alignment on FRCParamTalkTextTagListTableRow");
static_assert(sizeof(FRCParamTalkTextTagListTableRow) == 0x000018, "Wrong size on FRCParamTalkTextTagListTableRow");
static_assert(offsetof(FRCParamTalkTextTagListTableRow, SpeakerId) == 0x000008, "Member 'FRCParamTalkTextTagListTableRow::SpeakerId' has a wrong offset!");
static_assert(offsetof(FRCParamTalkTextTagListTableRow, TagName) == 0x000010, "Member 'FRCParamTalkTextTagListTableRow::TagName' has a wrong offset!");

// ScriptStruct RC.RCParamTanteiPointListTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamTanteiPointListTableRow final : public FTableRowBase
{
public:
	class FName                                   TanteiPointID;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetNum;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Duplication;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamTanteiPointListTableRow) == 0x000008, "Wrong alignment on FRCParamTanteiPointListTableRow");
static_assert(sizeof(FRCParamTanteiPointListTableRow) == 0x000018, "Wrong size on FRCParamTanteiPointListTableRow");
static_assert(offsetof(FRCParamTanteiPointListTableRow, TanteiPointID) == 0x000008, "Member 'FRCParamTanteiPointListTableRow::TanteiPointID' has a wrong offset!");
static_assert(offsetof(FRCParamTanteiPointListTableRow, GetNum) == 0x000010, "Member 'FRCParamTanteiPointListTableRow::GetNum' has a wrong offset!");
static_assert(offsetof(FRCParamTanteiPointListTableRow, Duplication) == 0x000014, "Member 'FRCParamTanteiPointListTableRow::Duplication' has a wrong offset!");

// ScriptStruct RC.RCParamTanteiRankListTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamTanteiRankListTableRow final : public FTableRowBase
{
public:
	int32                                         TanteiRank;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTanteiPoint;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSkillPoint;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillSlot;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTanteiRankListTableRow) == 0x000008, "Wrong alignment on FRCParamTanteiRankListTableRow");
static_assert(sizeof(FRCParamTanteiRankListTableRow) == 0x000020, "Wrong size on FRCParamTanteiRankListTableRow");
static_assert(offsetof(FRCParamTanteiRankListTableRow, TanteiRank) == 0x000008, "Member 'FRCParamTanteiRankListTableRow::TanteiRank' has a wrong offset!");
static_assert(offsetof(FRCParamTanteiRankListTableRow, TotalTanteiPoint) == 0x00000C, "Member 'FRCParamTanteiRankListTableRow::TotalTanteiPoint' has a wrong offset!");
static_assert(offsetof(FRCParamTanteiRankListTableRow, TotalSkillPoint) == 0x000010, "Member 'FRCParamTanteiRankListTableRow::TotalSkillPoint' has a wrong offset!");
static_assert(offsetof(FRCParamTanteiRankListTableRow, SkillSlot) == 0x000014, "Member 'FRCParamTanteiRankListTableRow::SkillSlot' has a wrong offset!");
static_assert(offsetof(FRCParamTanteiRankListTableRow, TextID) == 0x000018, "Member 'FRCParamTanteiRankListTableRow::TextID' has a wrong offset!");

// ScriptStruct RC.RCParamTextListTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRCParamTextListTableRow final : public FTableRowBase
{
public:
	class FName                                   Filename;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FolderName;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTextListTableRow) == 0x000008, "Wrong alignment on FRCParamTextListTableRow");
static_assert(sizeof(FRCParamTextListTableRow) == 0x000020, "Wrong size on FRCParamTextListTableRow");
static_assert(offsetof(FRCParamTextListTableRow, Filename) == 0x000008, "Member 'FRCParamTextListTableRow::Filename' has a wrong offset!");
static_assert(offsetof(FRCParamTextListTableRow, FolderName) == 0x000010, "Member 'FRCParamTextListTableRow::FolderName' has a wrong offset!");

// ScriptStruct RC.RCParamTipsListTableRow
// 0x0040 (0x0048 - 0x0008)
struct FRCParamTipsListTableRow final : public FTableRowBase
{
public:
	class FName                                   TipsID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TitleTextID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DetailTextID;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureFileName;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SceneID;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Scene;                                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTipsListTableRow) == 0x000008, "Wrong alignment on FRCParamTipsListTableRow");
static_assert(sizeof(FRCParamTipsListTableRow) == 0x000048, "Wrong size on FRCParamTipsListTableRow");
static_assert(offsetof(FRCParamTipsListTableRow, TipsID) == 0x000008, "Member 'FRCParamTipsListTableRow::TipsID' has a wrong offset!");
static_assert(offsetof(FRCParamTipsListTableRow, TitleTextID) == 0x000010, "Member 'FRCParamTipsListTableRow::TitleTextID' has a wrong offset!");
static_assert(offsetof(FRCParamTipsListTableRow, DetailTextID) == 0x000018, "Member 'FRCParamTipsListTableRow::DetailTextID' has a wrong offset!");
static_assert(offsetof(FRCParamTipsListTableRow, TextureFileName) == 0x000020, "Member 'FRCParamTipsListTableRow::TextureFileName' has a wrong offset!");
static_assert(offsetof(FRCParamTipsListTableRow, SceneID) == 0x000028, "Member 'FRCParamTipsListTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamTipsListTableRow, Scene) == 0x000038, "Member 'FRCParamTipsListTableRow::Scene' has a wrong offset!");

// ScriptStruct RC.RCParamTitleDialogTextTableRow
// 0x0030 (0x0038 - 0x0008)
struct FRCParamTitleDialogTextTableRow final : public FTableRowBase
{
public:
	class FName                                   StoreDialogText;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StorePCDialogText;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InstallingDialogText;                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubstoryDialogText;                                // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubstoryDialogButtonText1;                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubstoryDialogButtonText2;                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTitleDialogTextTableRow) == 0x000008, "Wrong alignment on FRCParamTitleDialogTextTableRow");
static_assert(sizeof(FRCParamTitleDialogTextTableRow) == 0x000038, "Wrong size on FRCParamTitleDialogTextTableRow");
static_assert(offsetof(FRCParamTitleDialogTextTableRow, StoreDialogText) == 0x000008, "Member 'FRCParamTitleDialogTextTableRow::StoreDialogText' has a wrong offset!");
static_assert(offsetof(FRCParamTitleDialogTextTableRow, StorePCDialogText) == 0x000010, "Member 'FRCParamTitleDialogTextTableRow::StorePCDialogText' has a wrong offset!");
static_assert(offsetof(FRCParamTitleDialogTextTableRow, InstallingDialogText) == 0x000018, "Member 'FRCParamTitleDialogTextTableRow::InstallingDialogText' has a wrong offset!");
static_assert(offsetof(FRCParamTitleDialogTextTableRow, SubstoryDialogText) == 0x000020, "Member 'FRCParamTitleDialogTextTableRow::SubstoryDialogText' has a wrong offset!");
static_assert(offsetof(FRCParamTitleDialogTextTableRow, SubstoryDialogButtonText1) == 0x000028, "Member 'FRCParamTitleDialogTextTableRow::SubstoryDialogButtonText1' has a wrong offset!");
static_assert(offsetof(FRCParamTitleDialogTextTableRow, SubstoryDialogButtonText2) == 0x000030, "Member 'FRCParamTitleDialogTextTableRow::SubstoryDialogButtonText2' has a wrong offset!");

// ScriptStruct RC.RCParamTitleLanguageTextTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamTitleLanguageTextTableRow final : public FTableRowBase
{
public:
	TArray<class FName>                           LanguageText;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HelpText;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckDialogText;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTitleLanguageTextTableRow) == 0x000008, "Wrong alignment on FRCParamTitleLanguageTextTableRow");
static_assert(sizeof(FRCParamTitleLanguageTextTableRow) == 0x000028, "Wrong size on FRCParamTitleLanguageTextTableRow");
static_assert(offsetof(FRCParamTitleLanguageTextTableRow, LanguageText) == 0x000008, "Member 'FRCParamTitleLanguageTextTableRow::LanguageText' has a wrong offset!");
static_assert(offsetof(FRCParamTitleLanguageTextTableRow, HelpText) == 0x000018, "Member 'FRCParamTitleLanguageTextTableRow::HelpText' has a wrong offset!");
static_assert(offsetof(FRCParamTitleLanguageTextTableRow, CheckDialogText) == 0x000020, "Member 'FRCParamTitleLanguageTextTableRow::CheckDialogText' has a wrong offset!");

// ScriptStruct RC.RCParamTitleMenuListTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamTitleMenuListTableRow final : public FTableRowBase
{
public:
	TArray<int32>                                 switcherIndex;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTitleMenuListTableRow) == 0x000008, "Wrong alignment on FRCParamTitleMenuListTableRow");
static_assert(sizeof(FRCParamTitleMenuListTableRow) == 0x000018, "Wrong size on FRCParamTitleMenuListTableRow");
static_assert(offsetof(FRCParamTitleMenuListTableRow, switcherIndex) == 0x000008, "Member 'FRCParamTitleMenuListTableRow::switcherIndex' has a wrong offset!");

// ScriptStruct RC.RCParamTitleSubStoryTableRow
// 0x0048 (0x0050 - 0x0008)
struct FRCParamTitleSubStoryTableRow final : public FTableRowBase
{
public:
	int32                                         DlcNo;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubStoryCategoryText;                              // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubStoryNameText;                                  // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SubStoryImagePath;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubStoryCaptionText;                               // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChapterID;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneIdNoSaveData;                                 // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamTitleSubStoryTableRow) == 0x000008, "Wrong alignment on FRCParamTitleSubStoryTableRow");
static_assert(sizeof(FRCParamTitleSubStoryTableRow) == 0x000050, "Wrong size on FRCParamTitleSubStoryTableRow");
static_assert(offsetof(FRCParamTitleSubStoryTableRow, DlcNo) == 0x000008, "Member 'FRCParamTitleSubStoryTableRow::DlcNo' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryTableRow, SubStoryCategoryText) == 0x00000C, "Member 'FRCParamTitleSubStoryTableRow::SubStoryCategoryText' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryTableRow, SubStoryNameText) == 0x000014, "Member 'FRCParamTitleSubStoryTableRow::SubStoryNameText' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryTableRow, SubStoryImagePath) == 0x000020, "Member 'FRCParamTitleSubStoryTableRow::SubStoryImagePath' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryTableRow, SubStoryCaptionText) == 0x000030, "Member 'FRCParamTitleSubStoryTableRow::SubStoryCaptionText' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryTableRow, ChapterID) == 0x000038, "Member 'FRCParamTitleSubStoryTableRow::ChapterID' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryTableRow, SceneID) == 0x00003C, "Member 'FRCParamTitleSubStoryTableRow::SceneID' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryTableRow, SceneIdNoSaveData) == 0x000044, "Member 'FRCParamTitleSubStoryTableRow::SceneIdNoSaveData' has a wrong offset!");

// ScriptStruct RC.RCParamTitleSubStoryWindowTextTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamTitleSubStoryWindowTextTableRow final : public FTableRowBase
{
public:
	class FName                                   Continue;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadGame;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewGame;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Return;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTitleSubStoryWindowTextTableRow) == 0x000008, "Wrong alignment on FRCParamTitleSubStoryWindowTextTableRow");
static_assert(sizeof(FRCParamTitleSubStoryWindowTextTableRow) == 0x000028, "Wrong size on FRCParamTitleSubStoryWindowTextTableRow");
static_assert(offsetof(FRCParamTitleSubStoryWindowTextTableRow, Continue) == 0x000008, "Member 'FRCParamTitleSubStoryWindowTextTableRow::Continue' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryWindowTextTableRow, LoadGame) == 0x000010, "Member 'FRCParamTitleSubStoryWindowTextTableRow::LoadGame' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryWindowTextTableRow, NewGame) == 0x000018, "Member 'FRCParamTitleSubStoryWindowTextTableRow::NewGame' has a wrong offset!");
static_assert(offsetof(FRCParamTitleSubStoryWindowTextTableRow, Return) == 0x000020, "Member 'FRCParamTitleSubStoryWindowTextTableRow::Return' has a wrong offset!");

// ScriptStruct RC.RCParamTutorialButtonGuideListTableRow
// 0x0050 (0x0058 - 0x0008)
struct FRCParamTutorialButtonGuideListTableRow final : public FTableRowBase
{
public:
	class FName                                   TutorialButtonGuideID;                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyNum;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERCInputKeyType>                       KeyType;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   JointTextID;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  bWithVector;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  bPreferenceStick;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTutorialButtonGuideListTableRow) == 0x000008, "Wrong alignment on FRCParamTutorialButtonGuideListTableRow");
static_assert(sizeof(FRCParamTutorialButtonGuideListTableRow) == 0x000058, "Wrong size on FRCParamTutorialButtonGuideListTableRow");
static_assert(offsetof(FRCParamTutorialButtonGuideListTableRow, TutorialButtonGuideID) == 0x000008, "Member 'FRCParamTutorialButtonGuideListTableRow::TutorialButtonGuideID' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialButtonGuideListTableRow, KeyNum) == 0x000010, "Member 'FRCParamTutorialButtonGuideListTableRow::KeyNum' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialButtonGuideListTableRow, KeyType) == 0x000018, "Member 'FRCParamTutorialButtonGuideListTableRow::KeyType' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialButtonGuideListTableRow, JointTextID) == 0x000028, "Member 'FRCParamTutorialButtonGuideListTableRow::JointTextID' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialButtonGuideListTableRow, TextID) == 0x000030, "Member 'FRCParamTutorialButtonGuideListTableRow::TextID' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialButtonGuideListTableRow, bWithVector) == 0x000038, "Member 'FRCParamTutorialButtonGuideListTableRow::bWithVector' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialButtonGuideListTableRow, bPreferenceStick) == 0x000048, "Member 'FRCParamTutorialButtonGuideListTableRow::bPreferenceStick' has a wrong offset!");

// ScriptStruct RC.RCParamTutorialListTableRow
// 0x0050 (0x0058 - 0x0008)
struct FRCParamTutorialListTableRow final : public FTableRowBase
{
public:
	class FName                                   TutorialID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TitleTextID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideNum;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERCInputKeyType>                       KeyType;                                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           GuideID;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PageNum;                                           // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PageID;                                            // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamTutorialListTableRow) == 0x000008, "Wrong alignment on FRCParamTutorialListTableRow");
static_assert(sizeof(FRCParamTutorialListTableRow) == 0x000058, "Wrong size on FRCParamTutorialListTableRow");
static_assert(offsetof(FRCParamTutorialListTableRow, TutorialID) == 0x000008, "Member 'FRCParamTutorialListTableRow::TutorialID' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialListTableRow, TitleTextID) == 0x000010, "Member 'FRCParamTutorialListTableRow::TitleTextID' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialListTableRow, GuideNum) == 0x000018, "Member 'FRCParamTutorialListTableRow::GuideNum' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialListTableRow, KeyType) == 0x000020, "Member 'FRCParamTutorialListTableRow::KeyType' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialListTableRow, GuideID) == 0x000030, "Member 'FRCParamTutorialListTableRow::GuideID' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialListTableRow, PageNum) == 0x000040, "Member 'FRCParamTutorialListTableRow::PageNum' has a wrong offset!");
static_assert(offsetof(FRCParamTutorialListTableRow, PageID) == 0x000048, "Member 'FRCParamTutorialListTableRow::PageID' has a wrong offset!");

// ScriptStruct RC.RCParamVariableChapterTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamVariableChapterTableRow final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VariableName;                                      // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitValue;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamVariableChapterTableRow) == 0x000008, "Wrong alignment on FRCParamVariableChapterTableRow");
static_assert(sizeof(FRCParamVariableChapterTableRow) == 0x000028, "Wrong size on FRCParamVariableChapterTableRow");
static_assert(offsetof(FRCParamVariableChapterTableRow, Comment) == 0x000008, "Member 'FRCParamVariableChapterTableRow::Comment' has a wrong offset!");
static_assert(offsetof(FRCParamVariableChapterTableRow, Chapter) == 0x000018, "Member 'FRCParamVariableChapterTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamVariableChapterTableRow, VariableName) == 0x00001C, "Member 'FRCParamVariableChapterTableRow::VariableName' has a wrong offset!");
static_assert(offsetof(FRCParamVariableChapterTableRow, InitValue) == 0x000024, "Member 'FRCParamVariableChapterTableRow::InitValue' has a wrong offset!");

// ScriptStruct RC.RCParamVariableGameTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRCParamVariableGameTableRow final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VariableName;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitValue;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamVariableGameTableRow) == 0x000008, "Wrong alignment on FRCParamVariableGameTableRow");
static_assert(sizeof(FRCParamVariableGameTableRow) == 0x000028, "Wrong size on FRCParamVariableGameTableRow");
static_assert(offsetof(FRCParamVariableGameTableRow, Comment) == 0x000008, "Member 'FRCParamVariableGameTableRow::Comment' has a wrong offset!");
static_assert(offsetof(FRCParamVariableGameTableRow, VariableName) == 0x000018, "Member 'FRCParamVariableGameTableRow::VariableName' has a wrong offset!");
static_assert(offsetof(FRCParamVariableGameTableRow, InitValue) == 0x000020, "Member 'FRCParamVariableGameTableRow::InitValue' has a wrong offset!");

// ScriptStruct RC.RCParamVariableSceneTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRCParamVariableSceneTableRow final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VariableName;                                      // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitValue;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamVariableSceneTableRow) == 0x000008, "Wrong alignment on FRCParamVariableSceneTableRow");
static_assert(sizeof(FRCParamVariableSceneTableRow) == 0x000030, "Wrong size on FRCParamVariableSceneTableRow");
static_assert(offsetof(FRCParamVariableSceneTableRow, Comment) == 0x000008, "Member 'FRCParamVariableSceneTableRow::Comment' has a wrong offset!");
static_assert(offsetof(FRCParamVariableSceneTableRow, Chapter) == 0x000018, "Member 'FRCParamVariableSceneTableRow::Chapter' has a wrong offset!");
static_assert(offsetof(FRCParamVariableSceneTableRow, Scene) == 0x00001C, "Member 'FRCParamVariableSceneTableRow::Scene' has a wrong offset!");
static_assert(offsetof(FRCParamVariableSceneTableRow, VariableName) == 0x000024, "Member 'FRCParamVariableSceneTableRow::VariableName' has a wrong offset!");
static_assert(offsetof(FRCParamVariableSceneTableRow, InitValue) == 0x00002C, "Member 'FRCParamVariableSceneTableRow::InitValue' has a wrong offset!");

// ScriptStruct RC.RCParamVoiceDataPathListTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamVoiceDataPathListTableRow final : public FTableRowBase
{
public:
	class FName                                   CueSheetName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamVoiceDataPathListTableRow) == 0x000008, "Wrong alignment on FRCParamVoiceDataPathListTableRow");
static_assert(sizeof(FRCParamVoiceDataPathListTableRow) == 0x000010, "Wrong size on FRCParamVoiceDataPathListTableRow");
static_assert(offsetof(FRCParamVoiceDataPathListTableRow, CueSheetName) == 0x000008, "Member 'FRCParamVoiceDataPathListTableRow::CueSheetName' has a wrong offset!");

// ScriptStruct RC.RCParamVoiceSheetNameListTableRow
// 0x0010 (0x0018 - 0x0008)
struct FRCParamVoiceSheetNameListTableRow final : public FTableRowBase
{
public:
	TArray<class FString>                         SheetName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCParamVoiceSheetNameListTableRow) == 0x000008, "Wrong alignment on FRCParamVoiceSheetNameListTableRow");
static_assert(sizeof(FRCParamVoiceSheetNameListTableRow) == 0x000018, "Wrong size on FRCParamVoiceSheetNameListTableRow");
static_assert(offsetof(FRCParamVoiceSheetNameListTableRow, SheetName) == 0x000008, "Member 'FRCParamVoiceSheetNameListTableRow::SheetName' has a wrong offset!");

// ScriptStruct RC.RCParamWanderingSpiritSpeedTableRow
// 0x0008 (0x0010 - 0x0008)
struct FRCParamWanderingSpiritSpeedTableRow final : public FTableRowBase
{
public:
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCParamWanderingSpiritSpeedTableRow) == 0x000008, "Wrong alignment on FRCParamWanderingSpiritSpeedTableRow");
static_assert(sizeof(FRCParamWanderingSpiritSpeedTableRow) == 0x000010, "Wrong size on FRCParamWanderingSpiritSpeedTableRow");
static_assert(offsetof(FRCParamWanderingSpiritSpeedTableRow, Speed) == 0x000008, "Member 'FRCParamWanderingSpiritSpeedTableRow::Speed' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuCharacterInfo
// 0x0014 (0x0014 - 0x0000)
struct FRCVariableGameMenuCharacterInfo final
{
public:
	class FName                                   CharacterId;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCCharacterInfoCategory                      CharacterCategory;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Phase;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayDead;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCVariableGameMenuCharacterInfo) == 0x000004, "Wrong alignment on FRCVariableGameMenuCharacterInfo");
static_assert(sizeof(FRCVariableGameMenuCharacterInfo) == 0x000014, "Wrong size on FRCVariableGameMenuCharacterInfo");
static_assert(offsetof(FRCVariableGameMenuCharacterInfo, CharacterId) == 0x000000, "Member 'FRCVariableGameMenuCharacterInfo::CharacterId' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCharacterInfo, CharacterCategory) == 0x000008, "Member 'FRCVariableGameMenuCharacterInfo::CharacterCategory' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCharacterInfo, bNew) == 0x000009, "Member 'FRCVariableGameMenuCharacterInfo::bNew' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCharacterInfo, bUpdate) == 0x00000A, "Member 'FRCVariableGameMenuCharacterInfo::bUpdate' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCharacterInfo, Phase) == 0x00000C, "Member 'FRCVariableGameMenuCharacterInfo::Phase' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCharacterInfo, bPlayDead) == 0x000010, "Member 'FRCVariableGameMenuCharacterInfo::bPlayDead' has a wrong offset!");

// ScriptStruct RC.RCPlayerSave
// 0x0048 (0x0048 - 0x0000)
struct FRCPlayerSave final
{
public:
	bool                                          bPlayerMove;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerPosition;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerYaw;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCRealPlayerGameMode                         PlayerGameMode;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReserchExit;                                      // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCPlayerMoveSpeedType                        PlayerMoveSpeedType;                               // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ShinigamiPosition;                                 // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShinigamiYaw;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCShinigamiEmotionType                       ShinigamiAiEmotionType;                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCCompanionActorSave>          CompanionInfo;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bVisibleCompanion;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRainDraw;                                         // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCPlayerSave) == 0x000008, "Wrong alignment on FRCPlayerSave");
static_assert(sizeof(FRCPlayerSave) == 0x000048, "Wrong size on FRCPlayerSave");
static_assert(offsetof(FRCPlayerSave, bPlayerMove) == 0x000000, "Member 'FRCPlayerSave::bPlayerMove' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, PlayerPosition) == 0x000004, "Member 'FRCPlayerSave::PlayerPosition' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, PlayerYaw) == 0x000010, "Member 'FRCPlayerSave::PlayerYaw' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, PlayerGameMode) == 0x000014, "Member 'FRCPlayerSave::PlayerGameMode' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, bReserchExit) == 0x000015, "Member 'FRCPlayerSave::bReserchExit' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, PlayerMoveSpeedType) == 0x000016, "Member 'FRCPlayerSave::PlayerMoveSpeedType' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, ShinigamiPosition) == 0x000018, "Member 'FRCPlayerSave::ShinigamiPosition' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, ShinigamiYaw) == 0x000024, "Member 'FRCPlayerSave::ShinigamiYaw' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, ShinigamiAiEmotionType) == 0x000028, "Member 'FRCPlayerSave::ShinigamiAiEmotionType' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, CompanionInfo) == 0x000030, "Member 'FRCPlayerSave::CompanionInfo' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, bVisibleCompanion) == 0x000040, "Member 'FRCPlayerSave::bVisibleCompanion' has a wrong offset!");
static_assert(offsetof(FRCPlayerSave, bRainDraw) == 0x000041, "Member 'FRCPlayerSave::bRainDraw' has a wrong offset!");

// ScriptStruct RC.RCPALData
// 0x0030 (0x0030 - 0x0000)
struct FRCPALData final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         NeverCookAssets;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FString>                         NeverCookAssetPathPatterns;                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                NeverCookAssetPaths;                               // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCPALData) == 0x000008, "Wrong alignment on FRCPALData");
static_assert(sizeof(FRCPALData) == 0x000030, "Wrong size on FRCPALData");
static_assert(offsetof(FRCPALData, NeverCookAssets) == 0x000000, "Member 'FRCPALData::NeverCookAssets' has a wrong offset!");
static_assert(offsetof(FRCPALData, NeverCookAssetPathPatterns) == 0x000010, "Member 'FRCPALData::NeverCookAssetPathPatterns' has a wrong offset!");
static_assert(offsetof(FRCPALData, NeverCookAssetPaths) == 0x000020, "Member 'FRCPALData::NeverCookAssetPaths' has a wrong offset!");

// ScriptStruct RC.RCSaveSlotInfo
// 0x0030 (0x0030 - 0x0000)
struct FRCSaveSlotInfo final
{
public:
	ERCSaveDataType                               Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotNum;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SaveDataTime;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chapter;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SaveLoadMapNameID;                                 // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerMove;                                     // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSaveSlotInfo) == 0x000008, "Wrong alignment on FRCSaveSlotInfo");
static_assert(sizeof(FRCSaveSlotInfo) == 0x000030, "Wrong size on FRCSaveSlotInfo");
static_assert(offsetof(FRCSaveSlotInfo, Type) == 0x000000, "Member 'FRCSaveSlotInfo::Type' has a wrong offset!");
static_assert(offsetof(FRCSaveSlotInfo, SlotNum) == 0x000004, "Member 'FRCSaveSlotInfo::SlotNum' has a wrong offset!");
static_assert(offsetof(FRCSaveSlotInfo, SaveDataTime) == 0x000008, "Member 'FRCSaveSlotInfo::SaveDataTime' has a wrong offset!");
static_assert(offsetof(FRCSaveSlotInfo, Chapter) == 0x000010, "Member 'FRCSaveSlotInfo::Chapter' has a wrong offset!");
static_assert(offsetof(FRCSaveSlotInfo, Scene) == 0x000014, "Member 'FRCSaveSlotInfo::Scene' has a wrong offset!");
static_assert(offsetof(FRCSaveSlotInfo, MapID) == 0x00001C, "Member 'FRCSaveSlotInfo::MapID' has a wrong offset!");
static_assert(offsetof(FRCSaveSlotInfo, SaveLoadMapNameID) == 0x000024, "Member 'FRCSaveSlotInfo::SaveLoadMapNameID' has a wrong offset!");
static_assert(offsetof(FRCSaveSlotInfo, bIsPlayerMove) == 0x00002C, "Member 'FRCSaveSlotInfo::bIsPlayerMove' has a wrong offset!");

// ScriptStruct RC.SCScriptCommand
// 0x0038 (0x0038 - 0x0000)
struct FSCScriptCommand final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         ScriptLineNum;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommandName;                                       // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ParameterList;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCScriptCommand) == 0x000008, "Wrong alignment on FSCScriptCommand");
static_assert(sizeof(FSCScriptCommand) == 0x000038, "Wrong size on FSCScriptCommand");
static_assert(offsetof(FSCScriptCommand, Name) == 0x000000, "Member 'FSCScriptCommand::Name' has a wrong offset!");
static_assert(offsetof(FSCScriptCommand, ScriptLineNum) == 0x000018, "Member 'FSCScriptCommand::ScriptLineNum' has a wrong offset!");
static_assert(offsetof(FSCScriptCommand, CommandName) == 0x00001C, "Member 'FSCScriptCommand::CommandName' has a wrong offset!");
static_assert(offsetof(FSCScriptCommand, ParameterList) == 0x000028, "Member 'FSCScriptCommand::ParameterList' has a wrong offset!");

// ScriptStruct RC.SCScriptDefineCommand
// 0x0040 (0x0040 - 0x0000)
struct FSCScriptDefineCommand final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 CommandNameJp;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommandName;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParameterList;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCScriptDefineCommand) == 0x000008, "Wrong alignment on FSCScriptDefineCommand");
static_assert(sizeof(FSCScriptDefineCommand) == 0x000040, "Wrong size on FSCScriptDefineCommand");
static_assert(offsetof(FSCScriptDefineCommand, Name) == 0x000000, "Member 'FSCScriptDefineCommand::Name' has a wrong offset!");
static_assert(offsetof(FSCScriptDefineCommand, CommandNameJp) == 0x000018, "Member 'FSCScriptDefineCommand::CommandNameJp' has a wrong offset!");
static_assert(offsetof(FSCScriptDefineCommand, CommandName) == 0x000028, "Member 'FSCScriptDefineCommand::CommandName' has a wrong offset!");
static_assert(offsetof(FSCScriptDefineCommand, ParameterList) == 0x000030, "Member 'FSCScriptDefineCommand::ParameterList' has a wrong offset!");

// ScriptStruct RC.SCScriptDefineCommandDataTableRow
// 0x0028 (0x0030 - 0x0008)
struct FSCScriptDefineCommandDataTableRow final : public FTableRowBase
{
public:
	class FString                                 CommandNameJp;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommandName;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParameterList;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCScriptDefineCommandDataTableRow) == 0x000008, "Wrong alignment on FSCScriptDefineCommandDataTableRow");
static_assert(sizeof(FSCScriptDefineCommandDataTableRow) == 0x000030, "Wrong size on FSCScriptDefineCommandDataTableRow");
static_assert(offsetof(FSCScriptDefineCommandDataTableRow, CommandNameJp) == 0x000008, "Member 'FSCScriptDefineCommandDataTableRow::CommandNameJp' has a wrong offset!");
static_assert(offsetof(FSCScriptDefineCommandDataTableRow, CommandName) == 0x000018, "Member 'FSCScriptDefineCommandDataTableRow::CommandName' has a wrong offset!");
static_assert(offsetof(FSCScriptDefineCommandDataTableRow, ParameterList) == 0x000020, "Member 'FSCScriptDefineCommandDataTableRow::ParameterList' has a wrong offset!");

// ScriptStruct RC.RCScriptActorFootIKFootData
// 0x0018 (0x0018 - 0x0000)
struct FRCScriptActorFootIKFootData final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorFootIKFootData) == 0x000004, "Wrong alignment on FRCScriptActorFootIKFootData");
static_assert(sizeof(FRCScriptActorFootIKFootData) == 0x000018, "Wrong size on FRCScriptActorFootIKFootData");
static_assert(offsetof(FRCScriptActorFootIKFootData, Offset) == 0x000000, "Member 'FRCScriptActorFootIKFootData::Offset' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKFootData, Rot) == 0x00000C, "Member 'FRCScriptActorFootIKFootData::Rot' has a wrong offset!");

// ScriptStruct RC.RCScriptActorFootIKData
// 0x0064 (0x0064 - 0x0000)
struct FRCScriptActorFootIKData final
{
public:
	bool                                          bFootIK;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastFootIK;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanFootIK;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WaistOffset;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCScriptActorFootIKFootData           FootLData;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCScriptActorFootIKFootData           FootRData;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeightIK;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadiusIK;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastActorLocation;                                 // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKLandingZ;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFootIKInterp;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCScriptActorFootIKData) == 0x000004, "Wrong alignment on FRCScriptActorFootIKData");
static_assert(sizeof(FRCScriptActorFootIKData) == 0x000064, "Wrong size on FRCScriptActorFootIKData");
static_assert(offsetof(FRCScriptActorFootIKData, bFootIK) == 0x000000, "Member 'FRCScriptActorFootIKData::bFootIK' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, bLastFootIK) == 0x000001, "Member 'FRCScriptActorFootIKData::bLastFootIK' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, bCanFootIK) == 0x000002, "Member 'FRCScriptActorFootIKData::bCanFootIK' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, WaistOffset) == 0x000004, "Member 'FRCScriptActorFootIKData::WaistOffset' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, FootLData) == 0x000010, "Member 'FRCScriptActorFootIKData::FootLData' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, FootRData) == 0x000028, "Member 'FRCScriptActorFootIKData::FootRData' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, CapsuleHalfHeight) == 0x000040, "Member 'FRCScriptActorFootIKData::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, CapsuleRadius) == 0x000044, "Member 'FRCScriptActorFootIKData::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, CapsuleHalfHeightIK) == 0x000048, "Member 'FRCScriptActorFootIKData::CapsuleHalfHeightIK' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, CapsuleRadiusIK) == 0x00004C, "Member 'FRCScriptActorFootIKData::CapsuleRadiusIK' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, LastActorLocation) == 0x000050, "Member 'FRCScriptActorFootIKData::LastActorLocation' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, FootIKLandingZ) == 0x00005C, "Member 'FRCScriptActorFootIKData::FootIKLandingZ' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKData, bFootIKInterp) == 0x000060, "Member 'FRCScriptActorFootIKData::bFootIKInterp' has a wrong offset!");

// ScriptStruct RC.RCScriptActorFootIKSettings
// 0x0050 (0x0050 - 0x0000)
struct FRCScriptActorFootIKSettings final
{
public:
	bool                                          bFootIKEnable;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFootRotationEnable;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCScriptActorFootIKFootSettings       FootLSettings;                                     // 0x0004(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCScriptActorFootIKFootSettings       FootRSettings;                                     // 0x0018(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TraceStartOffsetZ;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceEndOffsetZ;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WaistBoneName;                                     // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaistOffsetLimitZ;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorLandingInterpSpeed;                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaistOffsetInterpSpeed;                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootOffsetInterpSpeed;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRotInterpSpeed;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorFootIKSettings) == 0x000004, "Wrong alignment on FRCScriptActorFootIKSettings");
static_assert(sizeof(FRCScriptActorFootIKSettings) == 0x000050, "Wrong size on FRCScriptActorFootIKSettings");
static_assert(offsetof(FRCScriptActorFootIKSettings, bFootIKEnable) == 0x000000, "Member 'FRCScriptActorFootIKSettings::bFootIKEnable' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, bFootRotationEnable) == 0x000001, "Member 'FRCScriptActorFootIKSettings::bFootRotationEnable' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, FootLSettings) == 0x000004, "Member 'FRCScriptActorFootIKSettings::FootLSettings' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, FootRSettings) == 0x000018, "Member 'FRCScriptActorFootIKSettings::FootRSettings' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, TraceStartOffsetZ) == 0x00002C, "Member 'FRCScriptActorFootIKSettings::TraceStartOffsetZ' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, TraceEndOffsetZ) == 0x000030, "Member 'FRCScriptActorFootIKSettings::TraceEndOffsetZ' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, WaistBoneName) == 0x000034, "Member 'FRCScriptActorFootIKSettings::WaistBoneName' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, WaistOffsetLimitZ) == 0x00003C, "Member 'FRCScriptActorFootIKSettings::WaistOffsetLimitZ' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, ActorLandingInterpSpeed) == 0x000040, "Member 'FRCScriptActorFootIKSettings::ActorLandingInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, WaistOffsetInterpSpeed) == 0x000044, "Member 'FRCScriptActorFootIKSettings::WaistOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, FootOffsetInterpSpeed) == 0x000048, "Member 'FRCScriptActorFootIKSettings::FootOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRCScriptActorFootIKSettings, FootRotInterpSpeed) == 0x00004C, "Member 'FRCScriptActorFootIKSettings::FootRotInterpSpeed' has a wrong offset!");

// ScriptStruct RC.RCScriptActorHitReactionData
// 0x0014 (0x0014 - 0x0000)
struct FRCScriptActorHitReactionData final
{
public:
	bool                                          bHitReaction;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitRight;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Power;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerInterpSpeed;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInterpSpeedToReaction;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInterpSpeedToBase;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorHitReactionData) == 0x000004, "Wrong alignment on FRCScriptActorHitReactionData");
static_assert(sizeof(FRCScriptActorHitReactionData) == 0x000014, "Wrong size on FRCScriptActorHitReactionData");
static_assert(offsetof(FRCScriptActorHitReactionData, bHitReaction) == 0x000000, "Member 'FRCScriptActorHitReactionData::bHitReaction' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionData, bHitRight) == 0x000001, "Member 'FRCScriptActorHitReactionData::bHitRight' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionData, Power) == 0x000004, "Member 'FRCScriptActorHitReactionData::Power' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionData, PowerInterpSpeed) == 0x000008, "Member 'FRCScriptActorHitReactionData::PowerInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionData, BlendInterpSpeedToReaction) == 0x00000C, "Member 'FRCScriptActorHitReactionData::BlendInterpSpeedToReaction' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionData, BlendInterpSpeedToBase) == 0x000010, "Member 'FRCScriptActorHitReactionData::BlendInterpSpeedToBase' has a wrong offset!");

// ScriptStruct RC.RCScriptActorAnimInstHitReactionData
// 0x0024 (0x0024 - 0x0000)
struct FRCScriptActorAnimInstHitReactionData final
{
public:
	struct FRCScriptActorHitReactionData          ScriptActorData;                                   // 0x0000(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerTarget;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendAlpha;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendAlphaTarget;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorAnimInstHitReactionData) == 0x000004, "Wrong alignment on FRCScriptActorAnimInstHitReactionData");
static_assert(sizeof(FRCScriptActorAnimInstHitReactionData) == 0x000024, "Wrong size on FRCScriptActorAnimInstHitReactionData");
static_assert(offsetof(FRCScriptActorAnimInstHitReactionData, ScriptActorData) == 0x000000, "Member 'FRCScriptActorAnimInstHitReactionData::ScriptActorData' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstHitReactionData, Power) == 0x000014, "Member 'FRCScriptActorAnimInstHitReactionData::Power' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstHitReactionData, PowerTarget) == 0x000018, "Member 'FRCScriptActorAnimInstHitReactionData::PowerTarget' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstHitReactionData, BlendAlpha) == 0x00001C, "Member 'FRCScriptActorAnimInstHitReactionData::BlendAlpha' has a wrong offset!");
static_assert(offsetof(FRCScriptActorAnimInstHitReactionData, BlendAlphaTarget) == 0x000020, "Member 'FRCScriptActorAnimInstHitReactionData::BlendAlphaTarget' has a wrong offset!");

// ScriptStruct RC.RCScriptActorHitReactionSettings
// 0x0030 (0x0030 - 0x0000)
struct FRCScriptActorHitReactionSettings final
{
public:
	bool                                          bHitReactionEnable;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitLength;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPower;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPower;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeakenPower;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeakenHitLength;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastSpeed;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowSpeed;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInterpSpeedToReactionFast;                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInterpSpeedToReactionSlow;                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInterpSpeedToBaseFast;                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInterpSpeedToBaseSlow;                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorHitReactionSettings) == 0x000004, "Wrong alignment on FRCScriptActorHitReactionSettings");
static_assert(sizeof(FRCScriptActorHitReactionSettings) == 0x000030, "Wrong size on FRCScriptActorHitReactionSettings");
static_assert(offsetof(FRCScriptActorHitReactionSettings, bHitReactionEnable) == 0x000000, "Member 'FRCScriptActorHitReactionSettings::bHitReactionEnable' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, HitLength) == 0x000004, "Member 'FRCScriptActorHitReactionSettings::HitLength' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, MaxPower) == 0x000008, "Member 'FRCScriptActorHitReactionSettings::MaxPower' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, MinPower) == 0x00000C, "Member 'FRCScriptActorHitReactionSettings::MinPower' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, bWeakenPower) == 0x000010, "Member 'FRCScriptActorHitReactionSettings::bWeakenPower' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, WeakenHitLength) == 0x000014, "Member 'FRCScriptActorHitReactionSettings::WeakenHitLength' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, FastSpeed) == 0x000018, "Member 'FRCScriptActorHitReactionSettings::FastSpeed' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, SlowSpeed) == 0x00001C, "Member 'FRCScriptActorHitReactionSettings::SlowSpeed' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, BlendInterpSpeedToReactionFast) == 0x000020, "Member 'FRCScriptActorHitReactionSettings::BlendInterpSpeedToReactionFast' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, BlendInterpSpeedToReactionSlow) == 0x000024, "Member 'FRCScriptActorHitReactionSettings::BlendInterpSpeedToReactionSlow' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, BlendInterpSpeedToBaseFast) == 0x000028, "Member 'FRCScriptActorHitReactionSettings::BlendInterpSpeedToBaseFast' has a wrong offset!");
static_assert(offsetof(FRCScriptActorHitReactionSettings, BlendInterpSpeedToBaseSlow) == 0x00002C, "Member 'FRCScriptActorHitReactionSettings::BlendInterpSpeedToBaseSlow' has a wrong offset!");

// ScriptStruct RC.RCAnimInstTurnStateData
// 0x0050 (0x0050 - 0x0000)
struct FRCAnimInstTurnStateData final
{
public:
	struct FRCScriptActorTurnData                 TurnData;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAnimInstTurnStateSequenceData       SequenceData0;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAnimInstTurnStateSequenceData       SequenceData1;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAnimInstTurnStateSequenceData       SequenceData2;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bStartState;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAnimInstTurnStateData) == 0x000008, "Wrong alignment on FRCAnimInstTurnStateData");
static_assert(sizeof(FRCAnimInstTurnStateData) == 0x000050, "Wrong size on FRCAnimInstTurnStateData");
static_assert(offsetof(FRCAnimInstTurnStateData, TurnData) == 0x000000, "Member 'FRCAnimInstTurnStateData::TurnData' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnStateData, SequenceData0) == 0x000018, "Member 'FRCAnimInstTurnStateData::SequenceData0' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnStateData, SequenceData1) == 0x000028, "Member 'FRCAnimInstTurnStateData::SequenceData1' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnStateData, SequenceData2) == 0x000038, "Member 'FRCAnimInstTurnStateData::SequenceData2' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnStateData, bStartState) == 0x000048, "Member 'FRCAnimInstTurnStateData::bStartState' has a wrong offset!");

// ScriptStruct RC.RCAnimInstTurnData
// 0x00A8 (0x00A8 - 0x0000)
struct FRCAnimInstTurnData final
{
public:
	bool                                          bTurn;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrevTurn;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TurnStateID;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCAnimInstTurnStateData               Turn0StateData;                                    // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAnimInstTurnStateData               Turn1StateData;                                    // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCAnimInstTurnData) == 0x000008, "Wrong alignment on FRCAnimInstTurnData");
static_assert(sizeof(FRCAnimInstTurnData) == 0x0000A8, "Wrong size on FRCAnimInstTurnData");
static_assert(offsetof(FRCAnimInstTurnData, bTurn) == 0x000000, "Member 'FRCAnimInstTurnData::bTurn' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnData, bPrevTurn) == 0x000001, "Member 'FRCAnimInstTurnData::bPrevTurn' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnData, TurnStateID) == 0x000004, "Member 'FRCAnimInstTurnData::TurnStateID' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnData, Turn0StateData) == 0x000008, "Member 'FRCAnimInstTurnData::Turn0StateData' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnData, Turn1StateData) == 0x000058, "Member 'FRCAnimInstTurnData::Turn1StateData' has a wrong offset!");

// ScriptStruct RC.RCAnimInstTurnSequenceSettings
// 0x0020 (0x0020 - 0x0000)
struct FRCAnimInstTurnSequenceSettings final
{
public:
	float                                         AngleMin;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      SequenceL;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      SequenceR;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAnimInstTurnSequenceSettings) == 0x000008, "Wrong alignment on FRCAnimInstTurnSequenceSettings");
static_assert(sizeof(FRCAnimInstTurnSequenceSettings) == 0x000020, "Wrong size on FRCAnimInstTurnSequenceSettings");
static_assert(offsetof(FRCAnimInstTurnSequenceSettings, AngleMin) == 0x000000, "Member 'FRCAnimInstTurnSequenceSettings::AngleMin' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSequenceSettings, SequenceL) == 0x000008, "Member 'FRCAnimInstTurnSequenceSettings::SequenceL' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSequenceSettings, SequenceR) == 0x000010, "Member 'FRCAnimInstTurnSequenceSettings::SequenceR' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSequenceSettings, PlayRate) == 0x000018, "Member 'FRCAnimInstTurnSequenceSettings::PlayRate' has a wrong offset!");

// ScriptStruct RC.RCAnimInstTurnSettings
// 0x0088 (0x0088 - 0x0000)
struct FRCAnimInstTurnSettings final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TurnStateMachineName;                              // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Turn0StateName;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Turn1StateName;                                    // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCAnimInstTurnSequenceSettings        SequenceSettings0;                                 // 0x0020(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAnimInstTurnSequenceSettings        SequenceSettings1;                                 // 0x0040(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCAnimInstTurnSequenceSettings        SequenceSettings2;                                 // 0x0060(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayRateForAll;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCAnimInstTurnSettings) == 0x000008, "Wrong alignment on FRCAnimInstTurnSettings");
static_assert(sizeof(FRCAnimInstTurnSettings) == 0x000088, "Wrong size on FRCAnimInstTurnSettings");
static_assert(offsetof(FRCAnimInstTurnSettings, MaxSpeed) == 0x000000, "Member 'FRCAnimInstTurnSettings::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSettings, TurnStateMachineName) == 0x000004, "Member 'FRCAnimInstTurnSettings::TurnStateMachineName' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSettings, Turn0StateName) == 0x00000C, "Member 'FRCAnimInstTurnSettings::Turn0StateName' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSettings, Turn1StateName) == 0x000014, "Member 'FRCAnimInstTurnSettings::Turn1StateName' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSettings, SequenceSettings0) == 0x000020, "Member 'FRCAnimInstTurnSettings::SequenceSettings0' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSettings, SequenceSettings1) == 0x000040, "Member 'FRCAnimInstTurnSettings::SequenceSettings1' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSettings, SequenceSettings2) == 0x000060, "Member 'FRCAnimInstTurnSettings::SequenceSettings2' has a wrong offset!");
static_assert(offsetof(FRCAnimInstTurnSettings, PlayRateForAll) == 0x000080, "Member 'FRCAnimInstTurnSettings::PlayRateForAll' has a wrong offset!");

// ScriptStruct RC.RCScriptActorTurnSettings
// 0x0014 (0x0014 - 0x0000)
struct FRCScriptActorTurnSettings final
{
public:
	bool                                          bTurnEnable;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCScriptActorTurnSequenceSettings     Sequence0;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCScriptActorTurnSequenceSettings     Sequence1;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRCScriptActorTurnSequenceSettings     Sequence2;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayRateForAll;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCScriptActorTurnSettings) == 0x000004, "Wrong alignment on FRCScriptActorTurnSettings");
static_assert(sizeof(FRCScriptActorTurnSettings) == 0x000014, "Wrong size on FRCScriptActorTurnSettings");
static_assert(offsetof(FRCScriptActorTurnSettings, bTurnEnable) == 0x000000, "Member 'FRCScriptActorTurnSettings::bTurnEnable' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnSettings, Sequence0) == 0x000004, "Member 'FRCScriptActorTurnSettings::Sequence0' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnSettings, Sequence1) == 0x000008, "Member 'FRCScriptActorTurnSettings::Sequence1' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnSettings, Sequence2) == 0x00000C, "Member 'FRCScriptActorTurnSettings::Sequence2' has a wrong offset!");
static_assert(offsetof(FRCScriptActorTurnSettings, PlayRateForAll) == 0x000010, "Member 'FRCScriptActorTurnSettings::PlayRateForAll' has a wrong offset!");

// ScriptStruct RC.RCSequenceSectionEndData_CharacterFacialColor
// 0x0008 (0x0018 - 0x0010)
struct FRCSequenceSectionEndData_CharacterFacialColor final : public FRCSequenceSectionEndData_Base
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSequenceSectionEndData_CharacterFacialColor) == 0x000008, "Wrong alignment on FRCSequenceSectionEndData_CharacterFacialColor");
static_assert(sizeof(FRCSequenceSectionEndData_CharacterFacialColor) == 0x000018, "Wrong size on FRCSequenceSectionEndData_CharacterFacialColor");

// ScriptStruct RC.RCSequenceSectionEndData_Talk
// 0x0008 (0x0018 - 0x0010)
struct FRCSequenceSectionEndData_Talk final : public FRCSequenceSectionEndData_Base
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCSequenceSectionEndData_Talk) == 0x000008, "Wrong alignment on FRCSequenceSectionEndData_Talk");
static_assert(sizeof(FRCSequenceSectionEndData_Talk) == 0x000018, "Wrong size on FRCSequenceSectionEndData_Talk");

// ScriptStruct RC.RCSequenceJumpData
// 0x0020 (0x0020 - 0x0000)
struct FRCSequenceJumpData final
{
public:
	ERCSequenceJumpType                           JumpType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Label;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frame;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSequenceJumpData) == 0x000008, "Wrong alignment on FRCSequenceJumpData");
static_assert(sizeof(FRCSequenceJumpData) == 0x000020, "Wrong size on FRCSequenceJumpData");
static_assert(offsetof(FRCSequenceJumpData, JumpType) == 0x000000, "Member 'FRCSequenceJumpData::JumpType' has a wrong offset!");
static_assert(offsetof(FRCSequenceJumpData, Label) == 0x000008, "Member 'FRCSequenceJumpData::Label' has a wrong offset!");
static_assert(offsetof(FRCSequenceJumpData, Frame) == 0x000018, "Member 'FRCSequenceJumpData::Frame' has a wrong offset!");
static_assert(offsetof(FRCSequenceJumpData, Seconds) == 0x00001C, "Member 'FRCSequenceJumpData::Seconds' has a wrong offset!");

// ScriptStruct RC.RCShinigamiAiIxIdleList
// 0x000C (0x000C - 0x0000)
struct FRCShinigamiAiIxIdleList final
{
public:
	class FName                                   SequenceName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCShinigamiAiIxIdleList) == 0x000004, "Wrong alignment on FRCShinigamiAiIxIdleList");
static_assert(sizeof(FRCShinigamiAiIxIdleList) == 0x00000C, "Wrong size on FRCShinigamiAiIxIdleList");
static_assert(offsetof(FRCShinigamiAiIxIdleList, SequenceName) == 0x000000, "Member 'FRCShinigamiAiIxIdleList::SequenceName' has a wrong offset!");
static_assert(offsetof(FRCShinigamiAiIxIdleList, Probability) == 0x000008, "Member 'FRCShinigamiAiIxIdleList::Probability' has a wrong offset!");

// ScriptStruct RC.SoundPlayerPosFade
// 0x0040 (0x0040 - 0x0000)
struct FSoundPlayerPosFade final
{
public:
	ERCSoundType                                  lhsSoundType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCSoundType                                  rhsSoundType;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCheck;                                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 lhsTargetActor;                                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 rhsTargetActor;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 lhsSoundId;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 rhsSoundId;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         lhsSoundVolumeRate;                                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         rhsSoundVolumeRate;                                // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundPlayerPosFade) == 0x000008, "Wrong alignment on FSoundPlayerPosFade");
static_assert(sizeof(FSoundPlayerPosFade) == 0x000040, "Wrong size on FSoundPlayerPosFade");
static_assert(offsetof(FSoundPlayerPosFade, lhsSoundType) == 0x000000, "Member 'FSoundPlayerPosFade::lhsSoundType' has a wrong offset!");
static_assert(offsetof(FSoundPlayerPosFade, rhsSoundType) == 0x000001, "Member 'FSoundPlayerPosFade::rhsSoundType' has a wrong offset!");
static_assert(offsetof(FSoundPlayerPosFade, isCheck) == 0x000002, "Member 'FSoundPlayerPosFade::isCheck' has a wrong offset!");
static_assert(offsetof(FSoundPlayerPosFade, lhsTargetActor) == 0x000008, "Member 'FSoundPlayerPosFade::lhsTargetActor' has a wrong offset!");
static_assert(offsetof(FSoundPlayerPosFade, rhsTargetActor) == 0x000010, "Member 'FSoundPlayerPosFade::rhsTargetActor' has a wrong offset!");
static_assert(offsetof(FSoundPlayerPosFade, lhsSoundId) == 0x000018, "Member 'FSoundPlayerPosFade::lhsSoundId' has a wrong offset!");
static_assert(offsetof(FSoundPlayerPosFade, rhsSoundId) == 0x000028, "Member 'FSoundPlayerPosFade::rhsSoundId' has a wrong offset!");
static_assert(offsetof(FSoundPlayerPosFade, lhsSoundVolumeRate) == 0x000038, "Member 'FSoundPlayerPosFade::lhsSoundVolumeRate' has a wrong offset!");
static_assert(offsetof(FSoundPlayerPosFade, rhsSoundVolumeRate) == 0x00003C, "Member 'FSoundPlayerPosFade::rhsSoundVolumeRate' has a wrong offset!");

// ScriptStruct RC.FacialCharaData
// 0x0018 (0x0018 - 0x0000)
struct FFacialCharaData final
{
public:
	class URCCharacterProxy*                      pCharacter;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacialName;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFlowLiquid;                                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFacialCharaData) == 0x000008, "Wrong alignment on FFacialCharaData");
static_assert(sizeof(FFacialCharaData) == 0x000018, "Wrong size on FFacialCharaData");
static_assert(offsetof(FFacialCharaData, pCharacter) == 0x000000, "Member 'FFacialCharaData::pCharacter' has a wrong offset!");
static_assert(offsetof(FFacialCharaData, FacialName) == 0x000008, "Member 'FFacialCharaData::FacialName' has a wrong offset!");
static_assert(offsetof(FFacialCharaData, bAllowFlowLiquid) == 0x000010, "Member 'FFacialCharaData::bAllowFlowLiquid' has a wrong offset!");

// ScriptStruct RC.LipSyncData
// 0x0038 (0x0038 - 0x0000)
struct FLipSyncData final
{
public:
	class URCCharacterProxy*                      pCharacter;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCParamLipSyncData*                    pLipSyncParam;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   lipSyncParamPath;                                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         morphCount;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         msec;                                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VoiceID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFinished;                                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLipSyncData) == 0x000008, "Wrong alignment on FLipSyncData");
static_assert(sizeof(FLipSyncData) == 0x000038, "Wrong size on FLipSyncData");
static_assert(offsetof(FLipSyncData, pCharacter) == 0x000000, "Member 'FLipSyncData::pCharacter' has a wrong offset!");
static_assert(offsetof(FLipSyncData, pLipSyncParam) == 0x000008, "Member 'FLipSyncData::pLipSyncParam' has a wrong offset!");
static_assert(offsetof(FLipSyncData, lipSyncParamPath) == 0x000010, "Member 'FLipSyncData::lipSyncParamPath' has a wrong offset!");
static_assert(offsetof(FLipSyncData, morphCount) == 0x000018, "Member 'FLipSyncData::morphCount' has a wrong offset!");
static_assert(offsetof(FLipSyncData, msec) == 0x00001C, "Member 'FLipSyncData::msec' has a wrong offset!");
static_assert(offsetof(FLipSyncData, VoiceID) == 0x000020, "Member 'FLipSyncData::VoiceID' has a wrong offset!");
static_assert(offsetof(FLipSyncData, IsFinished) == 0x000030, "Member 'FLipSyncData::IsFinished' has a wrong offset!");

// ScriptStruct RC.EnvMapData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEnvMapData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnvMapData) == 0x000008, "Wrong alignment on FEnvMapData");
static_assert(sizeof(FEnvMapData) == 0x000018, "Wrong size on FEnvMapData");

// ScriptStruct RC.SoundData
// 0x0048 (0x0048 - 0x0000)
struct FSoundData final
{
public:
	class UAtomComponent*                         pAtomComponent;                                    // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundId;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParamSoundID;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         originalVolume;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   voiceCharaID;                                      // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 pSoundActor;                                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPause3DSound;                                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundData) == 0x000008, "Wrong alignment on FSoundData");
static_assert(sizeof(FSoundData) == 0x000048, "Wrong size on FSoundData");
static_assert(offsetof(FSoundData, pAtomComponent) == 0x000000, "Member 'FSoundData::pAtomComponent' has a wrong offset!");
static_assert(offsetof(FSoundData, SoundId) == 0x000008, "Member 'FSoundData::SoundId' has a wrong offset!");
static_assert(offsetof(FSoundData, ParamSoundID) == 0x000018, "Member 'FSoundData::ParamSoundID' has a wrong offset!");
static_assert(offsetof(FSoundData, originalVolume) == 0x000028, "Member 'FSoundData::originalVolume' has a wrong offset!");
static_assert(offsetof(FSoundData, voiceCharaID) == 0x00002C, "Member 'FSoundData::voiceCharaID' has a wrong offset!");
static_assert(offsetof(FSoundData, pSoundActor) == 0x000038, "Member 'FSoundData::pSoundActor' has a wrong offset!");
static_assert(offsetof(FSoundData, isPause3DSound) == 0x000040, "Member 'FSoundData::isPause3DSound' has a wrong offset!");

// ScriptStruct RC.RCTextDataTableRow
// 0x0038 (0x0040 - 0x0008)
struct FRCTextDataTableRow final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpeakerId;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegrationID;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCTextDataTableRow) == 0x000008, "Wrong alignment on FRCTextDataTableRow");
static_assert(sizeof(FRCTextDataTableRow) == 0x000040, "Wrong size on FRCTextDataTableRow");
static_assert(offsetof(FRCTextDataTableRow, ID) == 0x000008, "Member 'FRCTextDataTableRow::ID' has a wrong offset!");
static_assert(offsetof(FRCTextDataTableRow, Text) == 0x000010, "Member 'FRCTextDataTableRow::Text' has a wrong offset!");
static_assert(offsetof(FRCTextDataTableRow, SpeakerId) == 0x000020, "Member 'FRCTextDataTableRow::SpeakerId' has a wrong offset!");
static_assert(offsetof(FRCTextDataTableRow, IntegrationID) == 0x000030, "Member 'FRCTextDataTableRow::IntegrationID' has a wrong offset!");
static_assert(offsetof(FRCTextDataTableRow, VoiceID) == 0x000034, "Member 'FRCTextDataTableRow::VoiceID' has a wrong offset!");

// ScriptStruct RC.TipsInfo
// 0x0020 (0x0020 - 0x0000)
struct FTipsInfo final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TitleTextID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DetailsTextID;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureFileName;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTipsInfo) == 0x000004, "Wrong alignment on FTipsInfo");
static_assert(sizeof(FTipsInfo) == 0x000020, "Wrong size on FTipsInfo");
static_assert(offsetof(FTipsInfo, TipsID) == 0x000000, "Member 'FTipsInfo::TipsID' has a wrong offset!");
static_assert(offsetof(FTipsInfo, TitleTextID) == 0x000008, "Member 'FTipsInfo::TitleTextID' has a wrong offset!");
static_assert(offsetof(FTipsInfo, DetailsTextID) == 0x000010, "Member 'FTipsInfo::DetailsTextID' has a wrong offset!");
static_assert(offsetof(FTipsInfo, TextureFileName) == 0x000018, "Member 'FTipsInfo::TextureFileName' has a wrong offset!");

// ScriptStruct RC.RCVariableGameMenuCharacterMenuInfo
// 0x0018 (0x0018 - 0x0000)
struct FRCVariableGameMenuCharacterMenuInfo final
{
public:
	bool                                          bAccess;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRCVariableGameMenuCharacterInfo> CharacterList;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableGameMenuCharacterMenuInfo) == 0x000008, "Wrong alignment on FRCVariableGameMenuCharacterMenuInfo");
static_assert(sizeof(FRCVariableGameMenuCharacterMenuInfo) == 0x000018, "Wrong size on FRCVariableGameMenuCharacterMenuInfo");
static_assert(offsetof(FRCVariableGameMenuCharacterMenuInfo, bAccess) == 0x000000, "Member 'FRCVariableGameMenuCharacterMenuInfo::bAccess' has a wrong offset!");
static_assert(offsetof(FRCVariableGameMenuCharacterMenuInfo, CharacterList) == 0x000008, "Member 'FRCVariableGameMenuCharacterMenuInfo::CharacterList' has a wrong offset!");

// ScriptStruct RC.RCSkillStatusInfo
// 0x0048 (0x0048 - 0x0000)
struct FRCSkillStatusInfo final
{
public:
	bool                                          bSkillUpdate;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AllSkillPoint;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestSkillPoint;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllEquipSkillSlot;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestSkillSlot;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EquipSkillIDList;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LearnSkillIDList;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReadySkillIDList;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCSkillStatusInfo) == 0x000008, "Wrong alignment on FRCSkillStatusInfo");
static_assert(sizeof(FRCSkillStatusInfo) == 0x000048, "Wrong size on FRCSkillStatusInfo");
static_assert(offsetof(FRCSkillStatusInfo, bSkillUpdate) == 0x000000, "Member 'FRCSkillStatusInfo::bSkillUpdate' has a wrong offset!");
static_assert(offsetof(FRCSkillStatusInfo, AllSkillPoint) == 0x000004, "Member 'FRCSkillStatusInfo::AllSkillPoint' has a wrong offset!");
static_assert(offsetof(FRCSkillStatusInfo, RestSkillPoint) == 0x000008, "Member 'FRCSkillStatusInfo::RestSkillPoint' has a wrong offset!");
static_assert(offsetof(FRCSkillStatusInfo, AllEquipSkillSlot) == 0x00000C, "Member 'FRCSkillStatusInfo::AllEquipSkillSlot' has a wrong offset!");
static_assert(offsetof(FRCSkillStatusInfo, RestSkillSlot) == 0x000010, "Member 'FRCSkillStatusInfo::RestSkillSlot' has a wrong offset!");
static_assert(offsetof(FRCSkillStatusInfo, EquipSkillIDList) == 0x000018, "Member 'FRCSkillStatusInfo::EquipSkillIDList' has a wrong offset!");
static_assert(offsetof(FRCSkillStatusInfo, LearnSkillIDList) == 0x000028, "Member 'FRCSkillStatusInfo::LearnSkillIDList' has a wrong offset!");
static_assert(offsetof(FRCSkillStatusInfo, ReadySkillIDList) == 0x000038, "Member 'FRCSkillStatusInfo::ReadySkillIDList' has a wrong offset!");

// ScriptStruct RC.GameLevelInfo
// 0x0024 (0x0024 - 0x0000)
struct FGameLevelInfo final
{
public:
	int32                                         Chapter;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scene;                                             // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapIDLong;                                         // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerStartName;                                   // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameLevelInfo) == 0x000004, "Wrong alignment on FGameLevelInfo");
static_assert(sizeof(FGameLevelInfo) == 0x000024, "Wrong size on FGameLevelInfo");
static_assert(offsetof(FGameLevelInfo, Chapter) == 0x000000, "Member 'FGameLevelInfo::Chapter' has a wrong offset!");
static_assert(offsetof(FGameLevelInfo, Scene) == 0x000004, "Member 'FGameLevelInfo::Scene' has a wrong offset!");
static_assert(offsetof(FGameLevelInfo, MapID) == 0x00000C, "Member 'FGameLevelInfo::MapID' has a wrong offset!");
static_assert(offsetof(FGameLevelInfo, MapIDLong) == 0x000014, "Member 'FGameLevelInfo::MapIDLong' has a wrong offset!");
static_assert(offsetof(FGameLevelInfo, PlayerStartName) == 0x00001C, "Member 'FGameLevelInfo::PlayerStartName' has a wrong offset!");

// ScriptStruct RC.RCVariableSave
// 0x0280 (0x0280 - 0x0000)
struct FRCVariableSave final
{
public:
	ERCStoryMode                                  StoryMode;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameLevelInfo                         GameLevelInfo;                                     // 0x0004(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 GameVariable;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChapterVariable;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SceneVariable;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MainQuestPhase;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERCRealEventMapConnectStatus                  BusStopStatus;                                     // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBusStopStatusFromAreamap>      BusStopStatusFromAreamap;                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDrawDisableSubQuest;                              // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCVariableSelectAlreadyAllInfo        SelectAlreadyAllInfo;                              // 0x0078(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableNazoResultList              ResultCurrentInfo;                                 // 0x0088(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableLogList                     BacklogInfo;                                       // 0x00C0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuTopMenuInfo         TopMenuInfo;                                       // 0x00D8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuMapMenuInfo         MapMenuInfo;                                       // 0x0100(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuKaikagiMenuInfo     KaikagiMenuInfo;                                   // 0x0128(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuQuestMenuInfo       QuestMenuInfo;                                     // 0x0140(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuPersonaMenuInfo     PersonaMenuInfo;                                   // 0x0178(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuCharacterMenuInfo   CharacterMenuInfo;                                 // 0x0198(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCVariableGameMenuGlossaryMenuInfo    SubStoryGlossaryMenuList;                          // 0x01B0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   SaveLoadMapName;                                   // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastCameraTagName;                                 // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpiritMiniGameCheckPointNumber;                    // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRCEnvironmentInfo                     EnviromentInfo;                                    // 0x01F0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRCTimerInfo                           NazoCountDownTimerInfo;                            // 0x0258(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRCVariableSave) == 0x000008, "Wrong alignment on FRCVariableSave");
static_assert(sizeof(FRCVariableSave) == 0x000280, "Wrong size on FRCVariableSave");
static_assert(offsetof(FRCVariableSave, StoryMode) == 0x000000, "Member 'FRCVariableSave::StoryMode' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, GameLevelInfo) == 0x000004, "Member 'FRCVariableSave::GameLevelInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, GameVariable) == 0x000028, "Member 'FRCVariableSave::GameVariable' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, ChapterVariable) == 0x000038, "Member 'FRCVariableSave::ChapterVariable' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, SceneVariable) == 0x000048, "Member 'FRCVariableSave::SceneVariable' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, MainQuestPhase) == 0x000058, "Member 'FRCVariableSave::MainQuestPhase' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, BusStopStatus) == 0x00005C, "Member 'FRCVariableSave::BusStopStatus' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, BusStopStatusFromAreamap) == 0x000060, "Member 'FRCVariableSave::BusStopStatusFromAreamap' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, bDrawDisableSubQuest) == 0x000070, "Member 'FRCVariableSave::bDrawDisableSubQuest' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, SelectAlreadyAllInfo) == 0x000078, "Member 'FRCVariableSave::SelectAlreadyAllInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, ResultCurrentInfo) == 0x000088, "Member 'FRCVariableSave::ResultCurrentInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, BacklogInfo) == 0x0000C0, "Member 'FRCVariableSave::BacklogInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, TopMenuInfo) == 0x0000D8, "Member 'FRCVariableSave::TopMenuInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, MapMenuInfo) == 0x000100, "Member 'FRCVariableSave::MapMenuInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, KaikagiMenuInfo) == 0x000128, "Member 'FRCVariableSave::KaikagiMenuInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, QuestMenuInfo) == 0x000140, "Member 'FRCVariableSave::QuestMenuInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, PersonaMenuInfo) == 0x000178, "Member 'FRCVariableSave::PersonaMenuInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, CharacterMenuInfo) == 0x000198, "Member 'FRCVariableSave::CharacterMenuInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, SubStoryGlossaryMenuList) == 0x0001B0, "Member 'FRCVariableSave::SubStoryGlossaryMenuList' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, SaveLoadMapName) == 0x0001D8, "Member 'FRCVariableSave::SaveLoadMapName' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, LastCameraTagName) == 0x0001E0, "Member 'FRCVariableSave::LastCameraTagName' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, SpiritMiniGameCheckPointNumber) == 0x0001E8, "Member 'FRCVariableSave::SpiritMiniGameCheckPointNumber' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, EnviromentInfo) == 0x0001F0, "Member 'FRCVariableSave::EnviromentInfo' has a wrong offset!");
static_assert(offsetof(FRCVariableSave, NazoCountDownTimerInfo) == 0x000258, "Member 'FRCVariableSave::NazoCountDownTimerInfo' has a wrong offset!");

// ScriptStruct RC.RCRunningVehicleData
// 0x0010 (0x0010 - 0x0000)
struct FRCRunningVehicleData final
{
public:
	class AActor*                                 pVehicle;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleLaneType                              laneType;                                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRCRunningVehicleData) == 0x000008, "Wrong alignment on FRCRunningVehicleData");
static_assert(sizeof(FRCRunningVehicleData) == 0x000010, "Wrong size on FRCRunningVehicleData");
static_assert(offsetof(FRCRunningVehicleData, pVehicle) == 0x000000, "Member 'FRCRunningVehicleData::pVehicle' has a wrong offset!");
static_assert(offsetof(FRCRunningVehicleData, laneType) == 0x000008, "Member 'FRCRunningVehicleData::laneType' has a wrong offset!");

}

