#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ToonDirectionalLight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ToonDirectionalLight.BP_ToonDirectionalLight_C.ApplySettings
// 0x0028 (0x0028 - 0x0000)
struct BP_ToonDirectionalLight_C_ApplySettings final
{
public:
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ToonDirectionalLight_C_ApplySettings) == 0x000004, "Wrong alignment on BP_ToonDirectionalLight_C_ApplySettings");
static_assert(sizeof(BP_ToonDirectionalLight_C_ApplySettings) == 0x000028, "Wrong size on BP_ToonDirectionalLight_C_ApplySettings");
static_assert(offsetof(BP_ToonDirectionalLight_C_ApplySettings, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000000, "Member 'BP_ToonDirectionalLight_C_ApplySettings::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ToonDirectionalLight_C_ApplySettings, CallFunc_GetForwardVector_ReturnValue) == 0x00000C, "Member 'BP_ToonDirectionalLight_C_ApplySettings::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ToonDirectionalLight_C_ApplySettings, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000018, "Member 'BP_ToonDirectionalLight_C_ApplySettings::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");

// Function BP_ToonDirectionalLight.BP_ToonDirectionalLight_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_ToonDirectionalLight_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ToonDirectionalLight_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_ToonDirectionalLight_C_ReceiveTick");
static_assert(sizeof(BP_ToonDirectionalLight_C_ReceiveTick) == 0x000004, "Wrong size on BP_ToonDirectionalLight_C_ReceiveTick");
static_assert(offsetof(BP_ToonDirectionalLight_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_ToonDirectionalLight_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_ToonDirectionalLight.BP_ToonDirectionalLight_C.ExecuteUbergraph_BP_ToonDirectionalLight
// 0x000C (0x000C - 0x0000)
struct BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight) == 0x000004, "Wrong alignment on BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight");
static_assert(sizeof(BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight) == 0x00000C, "Wrong size on BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight");
static_assert(offsetof(BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight, EntryPoint) == 0x000000, "Member 'BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_ToonDirectionalLight_C_ExecuteUbergraph_BP_ToonDirectionalLight::K2Node_Event_DeltaSeconds' has a wrong offset!");

}

