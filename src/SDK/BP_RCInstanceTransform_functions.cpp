#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RCInstanceTransform

#include "Basic.hpp"

#include "BP_RCInstanceTransform_classes.hpp"
#include "BP_RCInstanceTransform_parameters.hpp"


namespace SDK
{

// Function BP_RCInstanceTransform.BP_RCInstanceTransform_C.ExecuteUbergraph_BP_RCInstanceTransform
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RCInstanceTransform_C::ExecuteUbergraph_BP_RCInstanceTransform(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RCInstanceTransform_C", "ExecuteUbergraph_BP_RCInstanceTransform");

	Params::BP_RCInstanceTransform_C_ExecuteUbergraph_BP_RCInstanceTransform Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RCInstanceTransform.BP_RCInstanceTransform_C.StopUpdateManagement
// (Event, Public, BlueprintEvent)

void ABP_RCInstanceTransform_C::StopUpdateManagement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RCInstanceTransform_C", "StopUpdateManagement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RCInstanceTransform.BP_RCInstanceTransform_C.Stop_Interval
// (BlueprintCallable, BlueprintEvent)

void ABP_RCInstanceTransform_C::Stop_Interval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RCInstanceTransform_C", "Stop_Interval");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RCInstanceTransform.BP_RCInstanceTransform_C.UpdateInstanceTransform
// (BlueprintCallable, BlueprintEvent)

void ABP_RCInstanceTransform_C::UpdateInstanceTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RCInstanceTransform_C", "UpdateInstanceTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RCInstanceTransform.BP_RCInstanceTransform_C.Re-setTimer
// (BlueprintCallable, BlueprintEvent)

void ABP_RCInstanceTransform_C::Re_setTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RCInstanceTransform_C", "Re-setTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RCInstanceTransform.BP_RCInstanceTransform_C.StartUpdateManagement
// (Event, Public, BlueprintEvent)

void ABP_RCInstanceTransform_C::StartUpdateManagement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RCInstanceTransform_C", "StartUpdateManagement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RCInstanceTransform.BP_RCInstanceTransform_C.ComponentUnloadedViaStreaming
// (BlueprintCallable, BlueprintEvent)

void ABP_RCInstanceTransform_C::ComponentUnloadedViaStreaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RCInstanceTransform_C", "ComponentUnloadedViaStreaming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RCInstanceTransform.BP_RCInstanceTransform_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_RCInstanceTransform_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RCInstanceTransform_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

